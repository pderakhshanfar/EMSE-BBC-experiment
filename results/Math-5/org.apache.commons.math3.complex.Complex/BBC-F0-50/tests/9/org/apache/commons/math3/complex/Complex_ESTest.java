/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:05:39 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.897146442236022E215);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2586.9067968), 0.4087719171055482);
      complex0.I.tanh();
      Complex complex1 = complex0.multiply((-2586.9067968));
      Complex complex2 = complex1.add(20.0);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.add(complex1);
      Complex.valueOf((-20.0));
      complex0.sinh();
      Complex complex5 = complex4.multiply(complex3);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getField();
      Complex complex1 = new Complex(1.203278237867575E-265);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.log();
      complex0.getArgument();
      complex0.hashCode();
      Complex complex4 = new Complex((-271.7));
      Complex complex5 = complex0.tanh();
      complex0.multiply(1.5707963267948966);
      complex2.cos();
      complex5.isNaN();
      Complex complex6 = complex0.reciprocal();
      complex6.log();
      complex4.tan();
      Complex complex7 = complex4.acos();
      complex3.asin();
      complex6.atan();
      complex2.nthRoot(625);
      complex4.asin();
      complex7.pow(1.203278237867575E-265);
      complex3.pow(0.19782572984695435);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(3.08072210937242E-8);
      Complex complex1 = Complex.valueOf(3.08072210937242E-8, 2.356194490192345);
      Complex complex2 = complex1.pow(2.356194490192345);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.I.divide((-1864.95669));
      complex4.sin();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ONE.tan();
      complex6.ONE.tanh();
      Complex complex7 = complex6.NaN.log();
      complex3.I.multiply(2.356194490192345);
      Complex complex8 = complex1.createComplex(645.0669804491414, 7.592605043662661);
      complex8.ONE.sinh();
      Complex complex9 = complex8.ZERO.log();
      complex0.divide((-2352.9815605006));
      complex1.INF.readResolve();
      complex3.add(0.5629583597183228);
      complex7.cosh();
      complex7.abs();
      Complex complex10 = complex4.pow(complex5);
      complex1.INF.tan();
      complex6.pow(complex5);
      Complex complex11 = complex9.divide(complex10);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(4.036548930895323E-269, 20.0);
      complex1.tan();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.createComplex(8.306111510463843E-162, Double.POSITIVE_INFINITY);
      complex1.tan();
      complex2.multiply(1910.683130674);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-94.36451405168), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-1029));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.getArgument();
      Complex complex2 = complex1.createComplex(1.5707963267948966, Double.POSITIVE_INFINITY);
      complex0.toString();
      complex2.tan();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(9.813901863427107E161);
      Complex complex1 = new Complex(9.813901863427107E161);
      complex0.toString();
      Complex.valueOf(9.813901863427107E161, 9.813901863427107E161);
      complex1.asin();
      Complex complex2 = complex1.tan();
      complex2.tanh();
      try { 
        complex1.nthRoot((-4619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,619
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract((-2207.18814783686));
      complex2.toString();
      complex0.toString();
      complex2.asin();
      complex1.ZERO.toString();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.tanh();
      complex3.cos();
      complex4.readResolve();
      complex0.sinh();
      complex3.reciprocal();
      complex3.multiply((-675));
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.asin();
      complex1.getArgument();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.multiply(complex1);
      try { 
        complex2.nthRoot((-3296));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,296
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.log();
      complex1.getArgument();
      Complex complex4 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.multiply(4836);
      Complex complex6 = complex4.createComplex(3.683043641790553E-251, Double.POSITIVE_INFINITY);
      complex0.atan();
      complex5.divide(-0.0);
      complex3.multiply(1544);
      Complex complex7 = complex5.tan();
      complex6.multiply((-1394));
      complex7.tanh();
      complex5.reciprocal();
      complex7.subtract((-1.6411525886171892E248));
      complex6.pow(complex7);
      Complex complex8 = new Complex(1544, 1544);
      Complex complex9 = Complex.ONE;
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-4101.0));
      Complex complex1 = complex0.conjugate();
      complex0.equals(complex1);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.NaN.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.log();
      complex1.getArgument();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.asin();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-4101.0));
      Complex complex2 = Complex.valueOf((-4101.0), (-4101.0));
      complex2.equals(complex1);
      Complex complex3 = complex0.sinh();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.I.tan();
      Complex complex1 = complex0.multiply(175);
      Complex complex2 = complex0.exp();
      complex0.ZERO.add((-20.0));
      complex1.INF.toString();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.ONE.pow(1.5627006743114285E-7);
      Complex complex5 = complex2.ONE.multiply(complex4);
      complex5.I.sin();
      complex0.INF.conjugate();
      complex4.NaN.abs();
      complex3.NaN.abs();
      complex2.add(0.0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = new Complex(230.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-4101.0));
      complex1.conjugate();
      Complex complex2 = new Complex(1046.5541404948415, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.tan();
      complex1.tanh();
      complex4.cos();
      complex1.sinh();
      complex3.multiply(1.48097267048991);
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.log();
      complex1.getArgument();
      Complex complex4 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.pow((-1511.69));
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1511.69));
      Complex complex7 = complex4.sin();
      complex4.conjugate();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.abs();
      complex0.nthRoot(105);
      complex8.abs();
      Complex complex9 = Complex.NaN;
      complex9.add((-1511.69));
      complex3.sqrt();
      complex6.nthRoot(1192);
      complex4.atan();
      Complex complex10 = Complex.ZERO;
      complex10.divide((-6886.52122695));
      complex6.multiply((-1810));
      complex0.tan();
      Complex complex11 = complex4.reciprocal();
      complex11.subtract(335.22829);
      complex7.pow(complex6);
      complex10.exp();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1184.587148, 2164.7038514711016);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.divide(0.0);
      complex1.NaN.createComplex((-1411.1), (-2123.79));
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex1.divide(complex2);
      complex3.sinh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.I;
      complex6.cos();
      complex5.sinh();
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = complex0.asin();
      complex0.getArgument();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.multiply(4836);
      Complex complex3 = Complex.valueOf((double) 4836, (double) 4836);
      Complex complex4 = complex2.tan();
      complex4.ZERO.sin();
      complex1.cos();
      Complex complex5 = new Complex(20.0, (-927.265634559019));
      complex5.multiply(4836);
      Complex complex6 = complex0.tanh();
      complex1.reciprocal();
      complex3.tanh();
      Complex complex7 = complex6.cos();
      complex3.sinh();
      complex7.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1184.587148, 2164.7038514711016);
      complex0.asin();
      complex0.INF.divide(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(75);
      Complex complex3 = complex0.tanh();
      complex3.reciprocal();
      complex2.subtract((-2239.477));
      Complex.valueOf((-2239.477), (-2640.8409703939647));
      Complex complex4 = complex1.exp();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-918.80266933));
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex1.log();
      complex2.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      complex1.getArgument();
      Complex complex3 = complex0.pow(1.5627006743114285E-7);
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex2.conjugate();
      complex6.abs();
      complex1.nthRoot(504);
      Complex complex7 = Complex.I;
      complex7.abs();
      complex3.add(0.0);
      Complex complex8 = complex6.sqrt();
      complex8.nthRoot(618);
      complex3.atan();
      Complex complex9 = complex4.divide(1.5707963267948966);
      Complex complex10 = complex3.multiply(618);
      Complex complex11 = complex5.tan();
      complex10.multiply(2877);
      complex1.tanh();
      Complex complex12 = new Complex(-0.0, (-229.76260470084));
      complex12.reciprocal();
      complex5.subtract(0.0);
      complex9.pow(complex10);
      complex2.exp();
      complex11.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.multiply(175);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.ZERO.add((-20.0));
      complex1.INF.toString();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.ONE.pow(1.5627006743114285E-7);
      Complex complex6 = complex2.ONE.multiply(complex5);
      complex6.I.sin();
      Complex complex7 = complex0.INF.conjugate();
      complex5.NaN.abs();
      complex5.I.nthRoot(175);
      complex4.NaN.abs();
      complex2.add(0.0);
      Complex complex8 = complex0.sqrt();
      complex8.nthRoot(174);
      complex3.atan();
      Complex complex9 = complex4.divide(1.5627006743114285E-7);
      complex7.multiply(2877);
      Complex complex10 = complex4.tan();
      complex10.multiply(152);
      Complex complex11 = complex9.tanh();
      Complex complex12 = complex11.reciprocal();
      complex12.subtract((double) 0);
      complex1.pow(complex2);
      complex0.exp();
      complex8.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf((-2740.9710279311), (-1.0));
      complex2.multiply((-1.0));
      complex0.nthRoot(2416);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      complex1.getArgument();
      Complex complex3 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.multiply(4836);
      complex0.tan();
      Complex complex5 = complex2.multiply(4836);
      complex5.tanh();
      complex4.reciprocal();
      complex3.subtract(1123.629);
      Complex complex6 = Complex.valueOf(1123.629, (double) 4836);
      complex2.exp();
      complex4.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2164.7038514711016, 2164.7038514711016);
      complex1.getImaginary();
      complex0.multiply(2817.448071043303);
      // Undeclared exception!
      complex1.nthRoot(2145452851);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-7.861419797923639E-8), (-7.861419797923639E-8));
      Complex complex1 = complex0.divide(292.2097541582595);
      Complex complex2 = complex0.multiply(535);
      Complex complex3 = Complex.INF;
      complex0.multiply(complex3);
      complex0.reciprocal();
      complex0.sinh();
      complex2.conjugate();
      complex1.cos();
      complex2.sinh();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex0.asin();
      complex1.getArgument();
      double double0 = (-2740.9710279311);
      Complex complex2 = complex1.multiply(827);
      complex0.divide((double) 827);
      complex0.hashCode();
      complex0.subtract((-2740.9710279311));
      complex0.toString();
      complex0.tan();
      complex2.tan();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex0.getArgument();
      Complex complex2 = Complex.I;
      complex2.conjugate();
      complex1.subtract(2164.7038514711016);
      Complex complex3 = complex1.asin();
      Complex complex4 = new Complex((-551.1989204991386));
      complex2.equals(complex4);
      Complex complex5 = complex2.cos();
      Complex complex6 = Complex.ONE;
      complex6.add(318.9800104265);
      complex2.getField();
      complex4.pow(2164.7038514711016);
      complex2.acos();
      complex3.multiply(37);
      complex4.subtract(complex3);
      complex6.sqrt();
      Complex complex7 = complex3.atan();
      Complex.valueOf(1184.587148);
      complex6.subtract(complex1);
      complex7.divide(complex3);
      Complex complex8 = new Complex(Double.NaN, (-300.29));
      complex8.asin();
      complex2.toString();
      complex8.abs();
      complex5.multiply(18131.42723584377);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.I.tan();
      Complex complex1 = complex0.multiply(175);
      Complex complex2 = complex0.exp();
      complex0.ZERO.add((-20.0));
      complex1.INF.toString();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.ONE.pow(1.5627006743114285E-7);
      Complex complex5 = complex2.ONE.multiply(complex4);
      complex5.I.sin();
      complex0.INF.conjugate();
      complex4.NaN.abs();
      complex4.I.nthRoot(175);
      complex3.NaN.abs();
      Complex complex6 = complex2.add(0.0);
      Complex complex7 = complex0.sqrt();
      complex7.INF.nthRoot(618);
      complex1.atan();
      complex7.divide(Double.NaN);
      complex0.multiply(2877);
      complex0.tan();
      Complex complex8 = complex4.multiply(0);
      Complex complex9 = complex0.ONE.tanh();
      complex6.NaN.reciprocal();
      complex0.subtract(0.0);
      complex2.pow(complex6);
      complex8.exp();
      complex9.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1184.587148, 2164.7038514711016);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.multiply((-2435));
      Complex complex3 = Complex.ONE;
      complex2.ZERO.hashCode();
      complex1.NaN.createComplex((-1411.1), (-2123.79));
      Complex complex4 = complex1.cosh();
      Complex.valueOf((-2123.79));
      complex1.exp();
      Complex.valueOf((-2123.79), Double.NaN);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.getArgument();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.valueOf(0.0, 409.746);
      complex4.subtract(0.0);
      Complex complex5 = complex1.asin();
      complex0.equals(complex3);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex6.add((-20.0));
      complex2.getField();
      Complex complex8 = complex4.pow(409.746);
      complex8.acos();
      complex8.multiply(0);
      complex2.subtract(complex6);
      complex6.sqrt();
      complex6.atan();
      Complex.valueOf((-561.6347));
      Complex complex9 = complex3.subtract(complex6);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.divide(complex9);
      Complex complex12 = complex11.asin();
      complex12.toString();
      complex7.abs();
      complex4.multiply(1402807.3289501714);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-7.861419797923639E-8), (-7.861419797923639E-8));
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(5201.2943365);
      Complex complex2 = Complex.valueOf(1.7774975231077406E-4, 2025.06818);
      complex2.cosh();
      Complex.valueOf(5201.2943365);
      complex0.exp();
      Complex.valueOf((-0.9500594530321046), 2025.06818);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1914734393460718E-8));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.ZERO.pow(complex1);
      Complex complex4 = complex0.divide((-3264.1));
      complex0.ZERO.subtract(complex3);
      Complex complex5 = complex1.ZERO.createComplex(3.5371542244169364E-8, (-3264.1));
      complex4.INF.abs();
      Complex complex6 = complex4.ZERO.multiply(complex1);
      complex6.NaN.tan();
      complex3.equals(complex4);
      complex6.sqrt();
      complex3.tan();
      complex5.getField();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1536.47));
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-1.1914734393460718E-8));
      complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-247.3583407));
      Complex complex1 = complex0.tan();
      complex1.sqrt();
      Complex complex2 = new Complex(664.0, (-5.2744376732859406E250));
      complex2.subtract(complex0);
      Complex complex3 = Complex.ZERO;
      complex3.createComplex(Double.NaN, (-247.3583407));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1184.587148, 2164.7038514711016);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.asin();
      complex0.equals(complex2);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.add(3501.0);
      complex2.getField();
      Complex complex5 = complex2.pow(1184.587148);
      complex4.acos();
      complex3.multiply(2372);
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.sqrt();
      complex3.atan();
      Complex complex9 = Complex.valueOf(598.034);
      Complex complex10 = new Complex((-2.86072564));
      complex6.subtract(complex10);
      Complex complex11 = complex7.divide(complex6);
      complex5.asin();
      complex11.toString();
      complex8.abs();
      complex9.multiply(2467.573539251);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.sqrt();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.pow(2.3542816006738576E-4);
      Complex complex3 = complex0.tanh();
      complex1.equals(complex3);
      complex0.ZERO.log();
      complex3.I.add(complex2);
      Complex complex4 = complex3.tan();
      complex3.cos();
      complex4.readResolve();
      complex0.createComplex(2.3542816006738576E-4, 1456.7751682);
      Complex complex5 = complex0.divide(complex4);
      complex5.ZERO.asin();
      Complex complex6 = Complex.valueOf(623.7);
      complex4.divide(complex6);
      complex0.add((-2441.3371827091055));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.multiply(175);
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.ZERO.add((-20.0));
      complex3.INF.toString();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.ONE.pow(1.5627006743114285E-7);
      Complex complex8 = complex4.ONE.multiply(complex7);
      complex8.I.sin();
      complex1.INF.conjugate();
      complex7.NaN.abs();
      complex7.I.nthRoot(1);
      complex6.NaN.abs();
      Complex complex9 = complex8.add((double) 175);
      Complex complex10 = complex4.sqrt();
      complex2.nthRoot(618);
      complex0.atan();
      complex3.divide(3.199235358904701E-5);
      Complex complex11 = complex9.multiply(618);
      complex6.tan();
      Complex complex12 = complex8.multiply((-1006));
      complex6.tanh();
      Complex complex13 = complex10.reciprocal();
      Complex complex14 = complex11.subtract(1.5627006743114285E-7);
      complex5.pow(complex14);
      complex3.exp();
      complex12.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-3961.470022993), (-3961.470022993));
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.asin();
      complex2.acos();
      complex1.sinh();
      complex3.conjugate();
      Complex complex4 = new Complex((-5116823.548715033), 21.0);
      Complex complex5 = Complex.valueOf(7.861419797923607E-8, 21.0);
      complex5.cos();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(405);
      Complex complex2 = Complex.INF;
      complex0.divide(complex2);
      complex2.acos();
      Complex complex3 = Complex.valueOf((double) 405);
      complex1.sqrt1z();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.asin();
      complex2.reciprocal();
      complex3.subtract((-5138.0));
      complex2.createComplex((-5138.0), (-4.333719263537725E-8));
      complex3.atan();
      Complex complex6 = Complex.valueOf((double) 405, (-4.333719263537725E-8));
      complex6.multiply(1251.57);
      complex2.getArgument();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1184.587148, 2159.7497311);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.subtract((-3537.0));
      Complex complex3 = complex0.asin();
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex4 = complex0.cos();
      complex3.add(1184.587148);
      complex0.getField();
      Complex complex5 = new Complex(2159.7497311, (-2260.91822298));
      Complex complex6 = complex5.pow((-3537.0));
      Complex complex7 = complex4.acos();
      complex3.multiply(82);
      complex1.subtract(complex2);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex8.atan();
      Complex.valueOf(0.0);
      complex1.subtract(complex3);
      Complex complex10 = new Complex((-3537.0));
      complex10.divide(complex1);
      complex6.asin();
      complex6.toString();
      complex4.abs();
      complex9.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.multiply(175);
      complex0.I.tan();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex0.exp();
      complex0.ZERO.add((-20.0));
      complex2.INF.toString();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.ONE.pow(1.5627006743114285E-7);
      Complex complex6 = complex3.ONE.multiply(complex5);
      Complex complex7 = complex6.I.sin();
      Complex complex8 = complex1.INF.conjugate();
      complex5.NaN.abs();
      complex5.I.nthRoot(1);
      complex4.NaN.abs();
      Complex complex9 = complex3.add(0.0);
      Complex complex10 = complex1.sqrt();
      complex10.INF.nthRoot(618);
      complex2.atan();
      Complex complex11 = complex7.divide((double) 618);
      complex7.multiply(2877);
      complex9.tan();
      complex2.multiply(37);
      complex0.tanh();
      complex8.reciprocal();
      Complex complex12 = complex6.subtract((double) 175);
      complex2.pow(complex12);
      complex0.exp();
      complex11.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-7.861419797923639E-8), (-7.861419797923639E-8));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.conjugate();
      complex0.abs();
      complex0.nthRoot(1799);
      complex2.abs();
      Complex complex3 = complex2.add((-39.7932));
      Complex complex4 = Complex.ZERO;
      complex4.sqrt();
      complex2.nthRoot(1221);
      Complex complex5 = complex0.atan();
      complex0.divide((-39.7932));
      Complex complex6 = new Complex(417.279123826695);
      Complex complex7 = complex6.multiply(1221);
      complex4.tan();
      complex7.multiply(2147483077);
      complex3.tanh();
      complex5.reciprocal();
      complex1.subtract(293.948);
      Complex complex8 = complex1.pow(complex4);
      complex7.exp();
      complex4.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = Complex.valueOf(1.1483560326413004E-7);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(1.1483560326413004E-7);
      Complex complex4 = complex0.subtract(complex3);
      complex3.I.exp();
      Complex complex5 = Complex.valueOf((-625.17), 0.45160030615905045);
      complex4.hashCode();
      Complex complex6 = new Complex((-625.17));
      Complex complex7 = complex6.divide(1293.6967827);
      complex7.abs();
      complex6.multiply(186);
      complex6.multiply(complex5);
      complex0.reciprocal();
      complex0.sinh();
      complex2.conjugate();
      complex2.cos();
      complex5.sinh();
      complex6.multiply(2011.21206);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 4.806827797299427E-9);
      Complex complex1 = Complex.ZERO;
      complex0.ONE.sqrt1z();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.I.tan();
      complex1.I.getArgument();
      Complex complex3 = complex0.subtract(complex1);
      complex3.ZERO.exp();
      complex3.exp();
      Complex complex4 = complex0.pow(20.0);
      complex3.pow(20.0);
      Complex complex5 = complex4.log();
      complex5.ZERO.sqrt1z();
      int int0 = (-2045222521);
      try { 
        complex0.ONE.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.hashCode();
      Complex complex1 = complex0.sinh();
      complex1.toString();
      Complex complex2 = Complex.valueOf((-135.35));
      complex1.divide(complex2);
      complex1.subtract(complex2);
      Complex complex3 = Complex.valueOf((-135.35), (-2262.982532114));
      complex3.NaN.hashCode();
      complex2.INF.divide((-135.35));
      complex0.ONE.abs();
      Complex complex4 = complex2.multiply(186);
      Complex complex5 = complex4.NaN.multiply(complex2);
      complex4.ZERO.reciprocal();
      complex5.sinh();
      Complex complex6 = complex2.conjugate();
      complex6.cos();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.asin();
      complex2.NaN.getArgument();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.I.readResolve();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = new Complex((-20.0), (-1.7790661150204172E-247));
      complex6.subtract(Double.NaN);
      Complex complex7 = Complex.valueOf((-1.7790661150204172E-247), (-1.0));
      Complex complex8 = complex6.pow(complex5);
      complex7.nthRoot(461);
      Complex complex9 = complex5.sin();
      complex8.sin();
      complex4.getField();
      Complex complex10 = complex0.subtract(0.0);
      complex10.ZERO.reciprocal();
      complex9.sin();
      Complex complex11 = new Complex(1.3131921291351318, (-1.0));
      complex11.subtract((-1.7790661150204172E-247));
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(280);
      Complex complex2 = complex1.divide(complex0);
      Complex.valueOf((double) 280);
      Complex complex3 = Complex.valueOf(2107.014786, (-4.333719263537725E-8));
      Complex complex4 = complex2.sqrt1z();
      complex4.ONE.nthRoot(514);
      Complex complex5 = complex1.asin();
      complex4.I.reciprocal();
      complex1.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.createComplex(4553.05, 4553.05);
      complex3.INF.atan();
      complex4.subtract(complex5);
      complex3.sin();
      complex6.sin();
      complex6.getField();
      complex1.subtract((-20.0));
      Complex complex7 = Complex.valueOf((-1.3008467947765466E7));
      complex7.sin();
      complex3.subtract((-2086.6552997278063));
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(2566.161484697589, (-1463.9132));
      Complex complex3 = complex0.asin();
      complex0.multiply((-2435));
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.divide((-1739.527622461983));
      complex4.hashCode();
      Complex complex6 = complex5.createComplex(2654.219670198565, 3634.8132279);
      complex4.ZERO.subtract(complex3);
      complex1.subtract((-2626.6019));
      complex6.toString();
      complex0.toString();
      complex3.tan();
      complex5.subtract(complex0);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.multiply(0.0);
      complex0.I.hashCode();
      Complex complex1 = complex0.sinh();
      complex1.toString();
      Complex complex2 = Complex.valueOf((-135.35));
      Complex complex3 = complex1.divide(complex2);
      complex1.subtract(complex2);
      Complex.valueOf((-135.35), (-2262.982532114));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.add(1589.37963098139);
      complex1.getField();
      Complex complex6 = complex0.pow((-5116823.548715033));
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.multiply(536);
      Complex complex10 = new Complex((-5591.38425), 536);
      complex10.subtract(complex9);
      Complex complex11 = complex4.sqrt();
      complex6.atan();
      Complex complex12 = Complex.valueOf((-5116823.548715033));
      complex11.subtract(complex3);
      complex6.divide(complex2);
      Complex complex13 = complex6.asin();
      complex5.toString();
      complex12.abs();
      complex9.multiply((-2262.982532114));
      complex13.createComplex(0.0, (-5591.38425));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.pow((-2588.91393282));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.atan();
      complex0.subtract(complex3);
      Complex complex4 = complex1.multiply((-2588.91393282));
      complex4.getArgument();
      Complex.valueOf(0.0, Double.NaN);
      Complex complex5 = new Complex(0.0);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.multiply(175);
      Complex complex2 = complex0.I.tan();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.ZERO.add((-20.0));
      complex3.INF.toString();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.ONE.pow(1.5627006743114285E-7);
      Complex complex8 = complex4.ONE.multiply(complex7);
      complex8.I.sin();
      Complex complex9 = complex1.INF.conjugate();
      complex1.cosh();
      Complex complex10 = Complex.valueOf((-2828.979498));
      complex10.ONE.log();
      Complex complex11 = complex5.exp();
      complex1.divide(complex11);
      Complex complex12 = complex9.asin();
      complex1.acos();
      Complex complex13 = complex9.pow((-503.938265712));
      Complex complex14 = complex2.pow(complex13);
      Complex complex15 = complex9.divide((-964.45040207));
      complex14.sinh();
      complex12.conjugate();
      Complex complex16 = complex15.tan();
      complex5.tan();
      complex7.multiply(complex12);
      complex9.pow(2941.0);
      complex16.add(complex14);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.asin();
      complex2.NaN.getArgument();
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.divide(complex3);
      complex2.pow(0.0);
      Complex complex5 = complex0.pow(complex2);
      complex4.divide(0.0);
      complex0.sinh();
      complex4.conjugate();
      Complex complex6 = Complex.INF;
      complex6.tan();
      Complex complex7 = complex2.tan();
      complex5.multiply(complex1);
      complex5.pow(0.2845032215118408);
      complex7.add(complex1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(3606.725516);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.I.hashCode();
      complex2.ZERO.nthRoot(2411);
      Complex complex3 = complex0.ONE.tanh();
      complex3.ONE.abs();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex4.ZERO.createComplex(2411, 0.0);
      complex0.hashCode();
      complex2.atan();
      complex5.cosh();
      Complex complex6 = Complex.valueOf((-503.938265712));
      Complex complex7 = complex0.INF.exp();
      complex7.ONE.divide(complex6);
      complex0.asin();
      Complex complex8 = complex5.acos();
      complex2.sinh();
      complex1.conjugate();
      complex5.tanh();
      Complex complex9 = new Complex(2411, 1919.312247008324);
      complex9.cos();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.multiply(175);
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.getArgument();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.3416208028793335);
      Complex complex5 = complex4.divide(complex1);
      complex4.sinh();
      Complex complex6 = complex5.conjugate();
      complex2.tanh();
      complex6.cos();
      Complex complex7 = Complex.valueOf(479.0, (-3003.476805366243));
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(585.0, 277.890659529);
      Complex complex1 = complex0.pow(585.0);
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.ZERO.add(2.864122672853628E-291);
      complex3.NaN.multiply(0.0);
      Complex complex4 = complex1.ZERO.divide(complex0);
      Complex complex5 = complex1.ONE.divide(1528.867186964391);
      complex5.NaN.log();
      complex0.abs();
      complex4.getImaginary();
      complex0.isInfinite();
      complex4.getReal();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4316.7247, 4316.7247);
      complex0.getImaginary();
      complex0.multiply(4316.7247);
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.I.subtract(0.0);
      complex3.log();
      complex1.getImaginary();
      complex1.sinh();
      complex1.abs();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.log();
      complex5.ONE.add(complex0);
      Complex.valueOf(2983.0022, (-736.87777));
      complex5.sinh();
      complex3.subtract(0.0);
      Complex complex6 = complex2.sinh();
      complex6.multiply(1099);
      complex6.I.abs();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(280);
      Complex complex2 = complex1.divide(complex0);
      complex1.ONE.acos();
      Complex.valueOf((double) 280);
      Complex complex3 = Complex.valueOf(2107.014786, (-4.333719263537725E-8));
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex4.I.reciprocal();
      complex1.ZERO.subtract(Double.POSITIVE_INFINITY);
      complex5.createComplex(4553.05, 4553.05);
      complex3.INF.atan();
      complex4.subtract(complex5);
      Complex complex7 = complex3.multiply(Double.NaN);
      complex7.ONE.getArgument();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3855429446520427E-49);
      Complex complex1 = complex0.ZERO.add(3.3855429446520427E-49);
      complex1.INF.getField();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.INF.pow(3858.0);
      complex3.INF.toString();
      Complex complex4 = complex0.ONE.multiply(3858.0);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex4.INF.divide(complex2);
      complex1.multiply(complex3);
      Complex complex8 = Complex.valueOf(3.3855429446520427E-49);
      complex1.sin();
      complex3.multiply(3.3855429446520427E-49);
      Complex complex9 = complex4.subtract(complex8);
      Complex complex10 = complex9.NaN.cosh();
      complex2.getImaginary();
      complex6.add(0.0);
      complex10.divide((-1369.01));
      complex7.tan();
      complex9.tan();
      complex10.getImaginary();
      complex0.add((-1275.41713891));
      complex10.tanh();
      Complex complex11 = complex6.multiply((-1275.41713891));
      complex11.sin();
      complex6.conjugate();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4196864366531372, 1003.7391);
      Complex complex1 = new Complex(0.4196864366531372, 0.4196864366531372);
      complex1.INF.negate();
      Complex complex2 = complex0.divide(complex1);
      complex2.toString();
      complex2.tan();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.pow(1003.7391);
      complex4.readResolve();
      complex2.cosh();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.subtract(0.0);
      complex0.abs();
      complex0.ONE.multiply(0.0);
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      complex0.INF.reciprocal();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.divide(0.0);
      complex1.NaN.acos();
      int int0 = 623;
      complex3.nthRoot(623);
      complex0.ZERO.negate();
      complex0.pow(Double.NaN);
      double double1 = (-366.17577556876);
      Complex.valueOf((-366.17577556876));
      Complex complex4 = Complex.valueOf((-7.058033461293));
      try { 
        complex4.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = complex1.INF.divide((-306.855174805294));
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ZERO.multiply(complex1);
      Complex complex5 = complex1.subtract((-2494.0160822041967));
      Complex complex6 = complex0.cos();
      complex5.NaN.readResolve();
      Complex complex7 = complex6.NaN.add(complex0);
      Complex complex8 = complex7.cosh();
      complex5.atan();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex10.I.multiply(complex3);
      complex4.divide(0.0);
      complex2.acos();
      Complex complex12 = complex5.divide(complex1);
      complex12.ZERO.add(0.0);
      complex12.NaN.negate();
      complex7.getField();
      complex11.readResolve();
      Complex complex13 = complex6.sin();
      complex13.ONE.sqrt();
      complex1.getReal();
      complex11.asin();
      complex8.abs();
      complex4.reciprocal();
      Complex.valueOf(0.0, 1617.0860149803);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(623.543894697058);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.NaN.reciprocal();
      complex2.INF.tanh();
      complex2.INF.asin();
      Complex complex3 = complex0.cos();
      complex1.pow(623.543894697058);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1925.9529950514);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = Complex.ONE;
      complex1.ZERO.multiply((-9.374695893307895E158));
      complex0.ZERO.multiply(complex3);
      Complex complex4 = Complex.I;
      complex1.multiply(complex4);
      complex1.getReal();
      complex1.asin();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(807.6);
      Complex complex1 = complex0.negate();
      complex1.ONE.pow(709.54);
      Complex complex2 = complex1.asin();
      complex2.divide((-1650.09177247));
      Complex.valueOf(2.0);
      complex1.atan();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sin();
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex0.negate();
      complex2.getArgument();
      Complex complex3 = complex2.I.conjugate();
      double double0 = 0.0;
      Complex complex4 = complex3.INF.subtract(0.0);
      complex3.I.asin();
      complex0.equals(complex2);
      Complex complex5 = complex0.cos();
      complex5.INF.add(0.0);
      complex1.I.getField();
      complex4.INF.pow((double) 1);
      Complex complex6 = complex2.acos();
      complex6.NaN.multiply(82);
      Complex complex7 = complex4.subtract(complex0);
      complex7.sqrt();
      complex1.ZERO.atan();
      Complex.valueOf(0.0);
      complex3.subtract(complex1);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.NaN.readResolve();
      Complex complex3 = complex0.NaN.multiply(0.0);
      Complex complex4 = complex0.asin();
      complex0.ZERO.getArgument();
      complex4.getArgument();
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.asin();
      complex6.getField();
      Complex complex7 = complex5.multiply(complex0);
      Complex complex8 = complex5.I.cosh();
      Complex complex9 = complex8.NaN.multiply((-2160));
      complex9.ONE.exp();
      complex6.ZERO.acos();
      complex7.I.getField();
      Complex complex10 = complex6.add(0.0);
      Complex complex11 = complex10.acos();
      complex11.ZERO.sinh();
      Complex complex12 = complex11.sin();
      complex10.I.cosh();
      Complex complex13 = complex12.ONE.log();
      complex13.INF.multiply(0.0);
      complex11.equals(complex0);
      Complex complex14 = complex3.exp();
      Complex complex15 = complex11.pow(0.0);
      complex15.sin();
      complex14.getArgument();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.INF.hashCode();
      complex0.equals(complex1);
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex0.multiply(0);
      complex2.getReal();
      Complex complex5 = complex1.reciprocal();
      complex5.NaN.hashCode();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex6.INF.conjugate();
      Complex complex8 = complex2.NaN.pow(0.0);
      complex8.INF.tanh();
      Complex.valueOf((double) 0, (double) 0);
      complex2.ONE.multiply(complex0);
      complex2.getField();
      complex5.INF.hashCode();
      complex0.equals("(F-ZbH");
      complex5.multiply(0);
      complex7.getArgument();
      complex7.multiply(0);
      complex3.abs();
      complex4.readResolve();
      complex3.toString();
      complex6.createComplex((-431.53649077), Double.POSITIVE_INFINITY);
      complex7.log();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3154.159812103886, 1.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex2.ONE.divide(3154.159812103886);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex1.multiply(1);
      Complex complex5 = complex1.atan();
      complex5.getArgument();
      complex2.multiply(882);
      complex4.acos();
      complex4.subtract(complex0);
      complex3.cos();
      Complex.valueOf(298.10939168);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(3606.725516);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.I.hashCode();
      complex2.ZERO.nthRoot(2411);
      Complex complex3 = complex0.ONE.tanh();
      complex3.ONE.abs();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex4.ZERO.createComplex(2411, 0.0);
      complex0.hashCode();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex5.cosh();
      Complex complex8 = Complex.valueOf((-503.938265712));
      Complex complex9 = complex0.INF.exp();
      complex9.ONE.divide(complex8);
      complex0.asin();
      complex5.acos();
      complex6.pow(1919.312247008324);
      Complex complex10 = complex2.pow(complex7);
      complex10.INF.divide(1.0);
      complex4.sinh();
      Complex complex11 = complex8.conjugate();
      complex11.tan();
      complex0.tan();
      complex8.multiply(complex3);
      complex1.pow(0.2845032215118408);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(282);
      complex0.sin();
      Complex complex2 = complex1.multiply(0.0);
      complex2.NaN.multiply(1);
      complex1.toString();
      complex0.INF.getArgument();
      Complex complex3 = complex2.divide(complex1);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.I.add(0.0);
      Object object0 = complex0.ONE.readResolve();
      Complex complex4 = complex0.INF.createComplex(0.0, 0.0);
      complex0.cosh();
      complex3.ZERO.cosh();
      complex4.sinh();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.asin();
      complex6.ZERO.add(0.0);
      Complex.valueOf(0.0, 0.0);
      complex6.I.abs();
      complex3.acos();
      complex5.equals(object0);
      complex0.multiply(complex4);
      complex5.tanh();
      Complex complex7 = complex2.pow(complex5);
      complex7.multiply(0.0);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3646.02727), (-3646.02727));
      Complex complex1 = complex0.sqrt();
      complex1.INF.multiply(0);
      Complex complex2 = Complex.valueOf(0.0, (-3646.02727));
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex3.I.tan();
      complex4.ZERO.sinh();
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex0.cos();
      complex3.NaN.getArgument();
      complex3.I.cosh();
      complex6.ZERO.multiply((-550.7570926));
      Complex complex7 = complex6.add(2095.41198);
      complex7.getArgument();
      complex1.ZERO.toString();
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      complex5.getImaginary();
      Complex complex8 = complex0.divide(Double.NaN);
      Complex complex9 = complex3.add(complex2);
      complex8.sqrt();
      complex5.getReal();
      Complex complex10 = complex5.cosh();
      complex8.add(complex10);
      Complex.valueOf(0.0);
      complex9.reciprocal();
      complex3.add(Double.NaN);
      complex9.tan();
      complex8.multiply(489);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-4535.9036874997), (-4535.9036874997));
      Complex complex1 = complex0.I.multiply((-4535.9036874997));
      Complex complex2 = Complex.ZERO;
      complex2.I.abs();
      complex2.ONE.abs();
      complex0.ZERO.multiply(complex2);
      Complex complex3 = complex0.ZERO.negate();
      complex3.ONE.getField();
      complex3.NaN.getField();
      complex3.NaN.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.conjugate();
      complex6.getArgument();
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.I.add(complex0);
      complex8.hashCode();
      complex2.isInfinite();
      complex0.getImaginary();
      int int0 = (-1);
      try { 
        complex7.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(1.446491003036499, 0.0);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ZERO.sinh();
      complex2.ZERO.acos();
      complex0.getArgument();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.divide(complex0);
      complex1.atan();
      complex3.INF.tanh();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.add(complex0);
      complex2.ONE.log();
      complex1.ZERO.subtract((-1463.9132));
      Complex complex3 = complex2.I.asin();
      complex3.asin();
      complex3.I.readResolve();
      Complex complex4 = complex0.divide((-1463.9132));
      complex1.toString();
      complex4.getImaginary();
      Complex complex5 = complex2.subtract(complex0);
      complex0.add(complex2);
      complex5.INF.getArgument();
      complex2.abs();
      Complex complex6 = complex5.multiply(2.0);
      complex6.ZERO.tan();
      complex2.tan();
      complex0.getArgument();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      complex1.I.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.cosh();
      complex3.I.exp();
      complex3.I.cos();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex1.I.getField();
      complex1.INF.asin();
      Complex complex2 = complex1.ZERO.log();
      double double0 = Double.NaN;
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = Complex.valueOf(1137.0251884);
      complex2.NaN.tan();
      complex4.I.pow(0.0);
      complex3.getArgument();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.add(complex6);
      complex6.NaN.tanh();
      Complex complex8 = complex1.sqrt1z();
      complex8.ONE.subtract(complex0);
      complex8.ONE.sin();
      try { 
        complex7.nthRoot((-3166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,166
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.multiply(175);
      complex0.I.tan();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex0.exp();
      complex0.ZERO.add((-20.0));
      complex2.INF.toString();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.ONE.pow(1.5627006743114285E-7);
      Complex complex6 = complex3.ONE.multiply(complex5);
      complex6.I.sin();
      complex1.INF.conjugate();
      complex5.NaN.abs();
      complex5.I.nthRoot(1);
      complex4.NaN.abs();
      Complex complex7 = complex3.add(0.0);
      Complex complex8 = complex1.sqrt();
      complex8.INF.nthRoot(618);
      complex2.atan();
      complex8.divide(Double.NaN);
      complex1.multiply(2877);
      complex1.tan();
      Complex complex9 = complex5.multiply(0);
      Complex complex10 = complex0.ONE.tanh();
      complex7.NaN.reciprocal();
      complex0.subtract(0.0);
      complex3.pow(complex7);
      complex9.exp();
      complex10.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2065.759198);
      complex0.ZERO.getArgument();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.acos();
      Complex complex1 = complex0.asin();
      complex1.NaN.getArgument();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.divide(complex3);
      complex4.sinh();
      Complex complex5 = complex4.conjugate();
      complex5.ZERO.tanh();
      complex2.cos();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      int int0 = (-1);
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.INF.negate();
      complex1.NaN.negate();
      try { 
        complex1.ZERO.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.exp();
      complex2.hashCode();
      complex2.getImaginary();
      Complex complex3 = complex0.INF.add(complex2);
      Complex complex4 = complex3.I.cosh();
      complex4.readResolve();
      complex4.INF.hashCode();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex3.INF.sinh();
      complex5.I.pow(complex1);
      Complex complex6 = complex0.divide(0.0);
      complex6.isInfinite();
      Complex complex7 = complex0.multiply(0.0);
      Complex complex8 = complex7.asin();
      complex7.multiply((-880.88827829021));
      Complex complex9 = complex8.acos();
      Complex.valueOf(2336.791312, (-880.88827829021));
      Complex.valueOf((-880.88827829021));
      Complex complex10 = complex0.NaN.add(complex9);
      Complex complex11 = complex10.NaN.pow(462.1485);
      Complex complex12 = complex11.ZERO.createComplex((-880.88827829021), 2336.791312);
      complex12.NaN.negate();
      Complex complex13 = Complex.valueOf(0.0, 9.903174064539538E203);
      Complex complex14 = complex6.divide(complex13);
      complex9.readResolve();
      complex14.NaN.cos();
      complex0.isInfinite();
      Complex complex15 = complex2.multiply(462.1485);
      complex15.reciprocal();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.pow((-2588.91393282));
      complex0.tanh();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.exp();
      complex1.isInfinite();
      complex1.INF.divide(complex0);
      complex0.INF.nthRoot(530);
      complex1.log();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.createComplex((-1.0), 262.0);
      complex3.INF.pow(2.3195229636950566E-16);
      Complex complex4 = complex2.NaN.atan();
      complex3.ZERO.sinh();
      Complex complex5 = complex2.multiply((-565.673704248297));
      complex5.equals(complex0);
      complex0.pow((-565.673704248297));
      complex2.INF.subtract((-1.0));
      complex5.isNaN();
      Complex complex6 = complex4.log();
      complex6.atan();
      complex1.multiply(4519);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2084.76471847, 2084.76471847);
      Complex complex1 = Complex.NaN;
      complex0.NaN.hashCode();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.NaN.cos();
      complex3.ONE.sin();
      complex0.getField();
      Complex complex4 = complex2.ONE.sinh();
      complex0.ONE.abs();
      Complex complex5 = complex2.tan();
      complex5.I.divide(complex3);
      complex5.conjugate();
      complex0.I.atan();
      complex1.NaN.getArgument();
      complex1.tanh();
      Complex complex6 = complex0.createComplex(2084.76471847, 2084.76471847);
      complex6.I.tan();
      Complex complex7 = complex2.tanh();
      complex7.conjugate();
      Complex complex8 = complex0.log();
      Object object0 = new Object();
      complex7.equals(object0);
      Object object1 = complex8.readResolve();
      complex4.equals(object1);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1051.4399967439165));
      Complex complex2 = complex1.divide(complex0);
      complex2.ONE.multiply(0.0);
      Complex complex3 = complex0.INF.multiply(complex1);
      complex3.cosh();
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1914734393460718E-8));
      Complex complex1 = Complex.ONE;
      complex1.multiply(complex0);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.divide((-3264.1));
      complex0.ZERO.subtract(complex2);
      Complex complex4 = complex1.ZERO.createComplex(3.5371542244169364E-8, (-3264.1));
      complex3.INF.abs();
      Complex complex5 = complex3.ZERO.multiply(complex1);
      Complex complex6 = complex5.NaN.tan();
      complex2.equals(complex3);
      complex5.sqrt();
      complex2.tan();
      complex4.getField();
      complex2.conjugate();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex0.I.hashCode();
      Complex complex2 = complex0.sinh();
      complex2.toString();
      Complex complex3 = Complex.valueOf((-135.35));
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = Complex.valueOf((-135.35), (-2262.982532114));
      complex6.NaN.hashCode();
      Complex complex7 = complex3.INF.divide((-135.35));
      double double0 = complex1.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex8 = complex3.multiply(186);
      Complex complex9 = complex8.NaN.multiply(complex3);
      Complex complex10 = complex8.ZERO.reciprocal();
      Complex complex11 = complex10.ONE.subtract(2506.8944097);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals((-2505.8944097), complex11.getReal(), 0.01);
      
      Complex complex12 = Complex.valueOf((-135.35), (-135.35));
      Complex complex13 = complex2.I.pow(complex5);
      assertEquals((-0.8526401643540977), complex13.getImaginary(), 0.01);
      assertEquals(0.5224985647159399, complex13.getReal(), 0.01);
      
      List<Complex> list0 = complex5.INF.nthRoot(514);
      assertFalse(list0.contains(complex1));
      
      Complex complex14 = complex3.sin();
      complex14.ONE.sin();
      complex3.getField();
      Complex complex15 = complex1.subtract(0.0);
      assertSame(complex15, complex10);
      
      Complex complex16 = complex7.sin();
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex14));
      assertTrue(complex16.equals((Object)complex9));
      
      complex7.subtract((double) 514);
      assertTrue(complex7.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex3.equals((Object)complex8));
      
      boolean boolean0 = complex2.isNaN();
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.abs();
      Complex complex1 = complex0.sin();
      complex1.INF.getField();
      Complex complex2 = complex1.divide(complex0);
      double double0 = 1.1507496472539512E-93;
      Complex complex3 = Complex.valueOf(1.1507496472539512E-93);
      complex3.I.asin();
      Complex complex4 = complex2.subtract(complex1);
      try { 
        complex4.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.acos();
      complex2.I.createComplex(0.0, 2123.0586472782);
      Complex complex3 = complex2.I.pow(0.0);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.multiply(984);
      Complex complex5 = complex4.add((double) 984);
      Complex complex6 = complex5.negate();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals((-984.0), complex6.getReal(), 0.01);
      
      complex1.readResolve();
      Complex complex7 = complex4.cos();
      Complex.valueOf(0.0);
      complex4.add(1468.079364);
      Complex complex8 = complex1.conjugate();
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex7.conjugate();
      assertTrue(complex9.equals((Object)complex3));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex4.sqrt();
      assertFalse(complex10.equals((Object)complex2));
      
      double double0 = complex0.getArgument();
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, double0, 0.01);
  }
}
