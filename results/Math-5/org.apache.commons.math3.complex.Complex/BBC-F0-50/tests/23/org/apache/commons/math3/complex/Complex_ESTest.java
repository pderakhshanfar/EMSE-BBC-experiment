/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:06:11 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.ONE;
      complex2.cosh();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2.51402968559859E301);
      Complex complex2 = new Complex(0.05, 2.51402968559859E301);
      complex2.tanh();
      complex1.atan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      complex0.sqrt();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(356);
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.valueOf(2338.05030628, Double.POSITIVE_INFINITY);
      complex4.multiply(complex5);
      complex4.I.sin();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(2.0, Double.POSITIVE_INFINITY);
      complex0.multiply((-2075.2661690001078));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      complex2.reciprocal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(3527.01774658);
      complex0.I.sinh();
      Complex complex1 = complex0.sinh();
      complex1.ZERO.multiply(1730);
      Complex complex2 = Complex.valueOf((-984.1625), 3527.01774658);
      complex2.sqrt();
      complex2.I.negate();
      complex1.abs();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.I.cos();
      complex2.pow(complex3);
      Complex.valueOf(87.92100519895);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.I.reciprocal();
      complex6.INF.multiply(1730);
      Complex complex7 = complex2.add(complex5);
      Complex complex8 = complex7.I.conjugate();
      complex7.asin();
      Complex complex9 = complex4.acos();
      complex5.abs();
      complex1.cos();
      Complex complex10 = complex7.multiply(4.817491674217065E-144);
      Complex complex11 = complex5.acos();
      complex11.sqrt();
      complex10.add(complex9);
      complex8.divide((-984.1625));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(544.85012, 544.85012);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.pow(complex2);
      complex2.nthRoot(2713);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.exp();
      complex3.getImaginary();
      Complex complex6 = Complex.I;
      complex6.nthRoot(1);
      complex1.add((double) 2713);
      Complex complex7 = complex3.sqrt();
      complex7.subtract(complex5);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.NaN;
      complex9.sin();
      complex5.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.INF;
      complex1.ZERO.multiply(complex2);
      complex0.multiply(complex1);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.asin();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.subtract(1.328167263606087E161);
      complex1.NaN.hashCode();
      Complex complex2 = complex0.divide(0.12728634476661682);
      complex1.acos();
      complex0.pow(complex2);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3474.13708133));
      Complex complex1 = complex0.pow(complex0);
      complex1.sqrt1z();
      complex1.nthRoot(500);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.subtract(complex1);
      complex3.add(Double.NaN);
      Complex complex4 = complex0.divide(complex1);
      Object object0 = complex2.ONE.readResolve();
      ((Complex) object0).INF.divide(Double.NaN);
      complex4.ONE.sin();
      complex1.multiply(complex4);
      Complex.valueOf(1.0, 1.0);
      complex1.I.multiply((-1911));
      complex1.ZERO.sin();
      Complex complex5 = complex2.cosh();
      complex5.I.log();
      complex5.ONE.getField();
      complex2.nthRoot(1347);
      complex1.tan();
      complex1.add((-563149.8899829006));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.pow(complex0);
      complex1.sqrt1z();
      complex1.multiply((-0.0010568117656505713));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.conjugate();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.I.tanh();
      complex0.ONE.sinh();
      Complex complex1 = Complex.valueOf((-546.7928788), (-546.7928788));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.reciprocal();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      complex1.pow(complex2);
      complex2.exp();
      complex2.getImaginary();
      complex1.add(923.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      complex0.I.getField();
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1142.7409183781083);
      Complex complex1 = Complex.valueOf(1142.7409183781083, 0.0);
      Complex complex2 = complex0.ONE.subtract(1142.7409183781083);
      Complex complex3 = Complex.valueOf(1142.7409183781083, 1142.7409183781083);
      complex1.INF.abs();
      complex0.sqrt();
      Complex complex4 = complex3.subtract(complex0);
      complex4.ONE.getArgument();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.sinh();
      complex2.isInfinite();
      complex6.NaN.abs();
      complex0.cosh();
      Complex complex7 = complex6.cos();
      complex7.ZERO.add(complex2);
      complex5.isNaN();
      Complex complex8 = complex6.log();
      complex2.cosh();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(922.42, 20.0);
      Complex complex2 = complex1.tan();
      Complex.valueOf(20.0, (-2816.59));
      complex1.cosh();
      complex2.getField();
      Complex complex3 = new Complex((-2816.59));
      complex3.cosh();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = new Complex(2506, Double.POSITIVE_INFINITY);
      complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1954.4), (-1954.4));
      Complex complex1 = complex0.tan();
      Complex.valueOf(6.283185307179586);
      complex1.cosh();
      complex1.I.sqrt1z();
      complex1.getField();
      Complex complex2 = new Complex((-1954.4));
      complex1.cosh();
      Complex complex3 = Complex.NaN;
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.I.tanh();
      Complex complex1 = Complex.valueOf((-546.7928788), (-546.7928788));
      Complex complex2 = complex0.add(complex1);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1413.1018, 1.0);
      Complex.valueOf(750.4376845615);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(3.7813691654412385E-34);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(28.75949973);
      Complex complex1 = Complex.I;
      double double0 = (-3190.93458165567);
      Complex complex2 = Complex.valueOf((-3190.93458165567));
      Complex complex3 = complex1.pow(complex2);
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-750.4370182902592));
      complex1.pow(complex0);
      Complex complex2 = Complex.ONE;
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.subtract(complex1);
      complex3.add(Double.NaN);
      Complex complex4 = complex0.divide(complex1);
      complex2.ONE.readResolve();
      complex4.ONE.sin();
      complex1.multiply(complex4);
      Complex.valueOf(1.0, 1.0);
      complex1.I.multiply((-1911));
      complex1.ZERO.sin();
      Complex complex5 = complex2.cosh();
      complex5.ONE.getField();
      complex2.nthRoot(1347);
      complex1.tan();
      complex1.add((-563149.8899829006));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.subtract(1.0);
      Complex complex3 = new Complex(1.0);
      complex1.I.sqrt1z();
      complex0.isInfinite();
      complex0.I.reciprocal();
      Complex.valueOf(1.0, 1.0);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.NaN.acos();
      complex4.negate();
      Complex complex6 = complex5.tan();
      complex6.sin();
      complex2.divide(complex1);
      complex5.reciprocal();
      Complex.valueOf(654.2, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3794148633283659E-8, (-5008.8084));
      Complex complex1 = complex0.divide(4739546.400599152);
      complex0.conjugate();
      complex1.log();
      Complex complex2 = Complex.ZERO;
      complex2.tan();
      complex0.cos();
      complex1.sin();
      complex2.divide(complex1);
      Complex complex3 = Complex.ONE;
      complex3.reciprocal();
      Complex.valueOf(1.3794148633283659E-8, (-5008.8084));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.nthRoot(1601);
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex5.NaN.acos();
      complex4.INF.getField();
      Complex complex7 = Complex.valueOf(757.98062, (-1002.3269926711));
      complex2.getArgument();
      complex2.nthRoot(2426);
      Complex complex8 = complex0.sin();
      complex4.NaN.subtract(complex6);
      complex7.INF.tan();
      Complex.valueOf(3.4742610108480497E-91);
      Complex complex9 = Complex.valueOf(603.2, 1.5800256583859738);
      complex9.NaN.nthRoot(37);
      complex1.getField();
      complex7.ONE.cosh();
      complex0.abs();
      Complex complex10 = complex8.cosh();
      complex10.I.readResolve();
      complex8.I.atan();
      Complex complex11 = complex3.sqrt1z();
      complex11.add(complex10);
      complex7.sin();
      Complex.valueOf(1.5800256583859738, (-1002.3269926711));
      complex10.conjugate();
      complex4.sin();
      complex11.pow(1.5800256583859738);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.createComplex(750.4376845615, (-2561.542593383));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex4.sqrt1z();
      complex5.cos();
      complex1.hashCode();
      Complex.valueOf(2472.7);
      complex4.pow((-4739546.400599152));
      Complex complex6 = Complex.ZERO;
      complex0.nthRoot(2635);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex4.divide(3451.12041108007);
      complex5.add(complex1);
      Complex complex9 = complex6.divide(complex4);
      Complex complex10 = Complex.valueOf((double) 2635, 1253.9216);
      complex2.getImaginary();
      complex9.tan();
      complex3.subtract(complex8);
      complex10.exp();
      complex5.tanh();
      complex4.createComplex(2.414213562373095, (-29.213295320753144));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.nthRoot(2717);
      complex0.I.divide((double) 2717);
      Complex complex1 = complex0.I.multiply(2.6290763595212492E-129);
      complex0.NaN.pow(complex1);
      int int0 = 2427;
      complex0.nthRoot(2427);
      complex0.exp();
      complex0.getImaginary();
      Complex complex2 = Complex.ONE;
      // Undeclared exception!
      complex2.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ONE.log();
      complex2.I.tan();
      complex1.ZERO.cos();
      Complex complex3 = complex0.sin();
      complex3.divide(complex0);
      complex3.reciprocal();
      Complex.valueOf(1253.40444673863, 654.2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      complex2.ZERO.atan();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.asin();
      complex4.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.divide((double) 2717);
      Complex.valueOf(1462.167, Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(2202.800205, 2202.800205);
      complex2.cosh();
      complex0.NaN.abs();
      complex2.INF.multiply(2202.800205);
      complex1.getField();
      complex2.getField();
      Complex complex3 = new Complex(Double.NaN);
      Complex complex4 = Complex.I;
      complex4.ONE.pow(complex3);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex1.nthRoot(1487);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(1487, list0.size());
      assertEquals((-0.7615941559557649), complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.multiply(1472);
      Complex complex3 = complex2.pow(complex0);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1030.133434);
      Complex complex2 = Complex.valueOf((-179.0));
      complex2.asin();
      Complex complex3 = complex1.sin();
      complex0.subtract(complex3);
      Complex complex4 = complex2.divide((-1.8791776732592608E-7));
      complex1.getImaginary();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.I.getArgument();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.cos();
      complex3.abs();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, (-3496.2020871));
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex4.isNaN();
      complex3.getImaginary();
      complex4.add(Double.NEGATIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.add(complex6);
      complex1.divide(complex8);
      Complex.valueOf(1.5707963267948966, 1.0640404096769032E-9);
      Complex complex9 = Complex.INF;
      complex9.getImaginary();
      complex3.tan();
      complex7.subtract(complex3);
      Complex complex10 = Complex.INF;
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.cosh();
      complex2.NaN.getField();
      complex1.getField();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex3.tanh();
      complex3.nthRoot(1487);
      complex4.multiply(1472);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-660.60148768));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.add(complex2);
      complex3.multiply(1);
      Complex complex4 = complex2.divide((-374.502513));
      complex4.getArgument();
      complex2.sin();
      Complex complex5 = complex0.log();
      complex5.I.acos();
      complex1.add((-374.502513));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(502);
      complex1.NaN.readResolve();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.multiply((double) 502);
      Complex complex5 = complex1.asin();
      complex4.ONE.hashCode();
      Complex complex6 = complex4.ONE.sinh();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex4.multiply((double) 502);
      complex8.ONE.reciprocal();
      Complex complex9 = Complex.valueOf((double) 502, (double) 502);
      complex6.INF.cos();
      complex6.INF.pow((double) 502);
      complex4.ZERO.tanh();
      complex4.readResolve();
      Complex complex10 = Complex.valueOf((double) 502);
      Complex complex11 = complex10.I.negate();
      complex5.divide(complex3);
      complex6.toString();
      Complex complex12 = complex5.multiply((double) 502);
      complex7.readResolve();
      Complex complex13 = complex11.divide(complex4);
      complex13.getImaginary();
      complex12.tanh();
      complex9.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.log();
      complex2.I.getArgument();
      Complex complex3 = complex2.conjugate();
      complex0.atan();
      Complex complex4 = Complex.valueOf(1.5707963267948966, (-986.0));
      Complex complex5 = complex2.sqrt1z();
      complex5.ZERO.negate();
      Complex complex6 = complex0.createComplex(Double.POSITIVE_INFINITY, 750.4376845615);
      Complex complex7 = complex6.ZERO.add(complex2);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.I.sqrt1z();
      complex6.cos();
      complex8.hashCode();
      Complex complex9 = complex0.pow(0.0);
      complex3.cosh();
      complex3.cosh();
      complex6.I.log();
      Complex complex10 = complex9.log();
      complex10.INF.add(750.4376845615);
      Object object0 = new Object();
      complex10.equals(object0);
      complex7.hashCode();
      complex4.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.subtract(1.0);
      Complex complex3 = new Complex(1.0);
      Complex complex4 = complex1.I.sqrt1z();
      complex0.isInfinite();
      complex0.I.reciprocal();
      Complex.valueOf(1.0, 1.0);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.createComplex(750.4376845615, 2.414213562373095);
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = Complex.valueOf((-2177.05039));
      complex7.sqrt1z();
      Complex complex10 = complex9.cos();
      complex8.hashCode();
      Complex complex11 = Complex.valueOf((-2177.05039));
      complex11.pow(2.414213562373095);
      complex10.cosh();
      complex6.cosh();
      Complex complex12 = complex4.log();
      complex6.log();
      complex7.add(1985.042065);
      complex1.tanh();
      Object object0 = new Object();
      complex0.equals(complex8);
      complex8.hashCode();
      complex12.add((-667.102));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.pow((-1.0));
      Complex complex4 = complex1.multiply(complex3);
      complex2.divide((-2.483811732227808E-8));
      complex4.readResolve();
      Object object0 = new Object();
      complex3.isNaN();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ZERO;
      complex1.getField();
      Complex complex3 = complex0.subtract(complex1);
      complex2.pow((-779.407989481184));
      complex3.ZERO.toString();
      complex3.INF.createComplex((-20.0), (-207.37314106));
      complex1.getArgument();
      Complex complex4 = new Complex((-779.407989481184));
      Complex complex5 = complex4.INF.sqrt();
      complex5.ONE.cosh();
      Complex complex6 = complex0.createComplex(834.774610962325, 351.580267971105);
      Complex.valueOf((-0.7847731637229688));
      Complex complex7 = complex4.conjugate();
      complex6.NaN.pow(0.0);
      Complex complex8 = complex7.I.multiply(complex6);
      Complex complex9 = complex1.divide(351.580267971105);
      Complex complex10 = (Complex)complex9.NaN.readResolve();
      complex10.add(complex8);
      complex5.equals(complex8);
      complex8.isNaN();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.subtract(1.0);
      complex2.I.createComplex(1.0, (-2177.05039));
      Complex complex3 = complex1.I.sqrt1z();
      complex0.isInfinite();
      complex0.I.reciprocal();
      complex0.INF.getArgument();
      complex3.ONE.hashCode();
      complex0.getImaginary();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex1.INF.subtract(complex3);
      Complex complex7 = complex6.INF.add((-1.0180490545927503E-7));
      complex7.negate();
      Complex complex8 = complex3.subtract((-2864.0));
      complex8.ZERO.divide(complex3);
      Complex complex9 = complex5.negate();
      Complex complex10 = complex0.I.multiply(0);
      complex10.NaN.hashCode();
      complex0.sqrt1z();
      Complex complex11 = complex9.multiply(Double.NaN);
      complex11.add(complex5);
      Complex complex12 = complex4.atan();
      complex12.ZERO.subtract(811.056);
      Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      Complex complex13 = complex11.asin();
      complex13.ONE.exp();
      complex6.isInfinite();
      complex7.sqrt();
      complex3.pow((-1.0180490545927503E-7));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.log();
      complex2.I.getArgument();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf(1.5707963267948966, (-986.0));
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.ZERO.negate();
      Complex complex8 = complex0.createComplex(546.1355826, 750.4376845615);
      complex8.ZERO.add(complex2);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.abs();
      complex1.divide(546.1355826);
      Complex complex10 = complex1.sqrt1z();
      complex1.multiply(1261);
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.negate();
      complex3.equals(complex5);
      complex0.divide(complex4);
      complex6.cosh();
      Complex complex12 = complex0.cosh();
      complex2.asin();
      complex11.reciprocal();
      complex10.pow(546.1355826);
      complex7.pow(complex9);
      complex12.createComplex(1261, 12.80654632);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex4.add(0.5584990978240967);
      Complex complex7 = complex2.tanh();
      complex1.nthRoot(1432);
      complex5.reciprocal();
      complex2.add(complex1);
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex2.cos();
      complex2.abs();
      Complex complex10 = complex1.multiply(20.0);
      complex8.isNaN();
      Complex complex11 = Complex.ONE;
      complex11.getImaginary();
      complex1.add((double) 1029);
      Complex complex12 = complex0.sin();
      Complex complex13 = Complex.valueOf((double) 1432);
      complex13.divide(0.0);
      Complex complex14 = complex9.add(complex12);
      complex12.divide(complex7);
      Complex.valueOf((-1.0), 0.0);
      complex4.getImaginary();
      complex14.tan();
      Complex complex15 = Complex.ONE;
      complex15.subtract(complex11);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      complex1.I.sinh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.acos();
      complex2.I.sinh();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.ONE.pow(complex1);
      complex5.NaN.readResolve();
      complex4.ZERO.conjugate();
      Complex complex6 = Complex.valueOf(0.5584990978240967);
      Complex complex7 = complex3.INF.negate();
      Complex complex8 = complex7.INF.subtract(complex2);
      complex0.multiply(0);
      complex1.pow(complex4);
      complex2.pow(complex4);
      complex3.nthRoot(393);
      complex6.exp();
      complex8.getImaginary();
      try { 
        complex0.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1462.167, 2.6290763595212492E-129);
      complex0.I.nthRoot(2717);
      Complex complex2 = complex0.I.divide((double) 2717);
      Complex complex3 = complex0.I.multiply(2.6290763595212492E-129);
      complex0.equals("");
      complex1.getReal();
      complex2.isNaN();
      Complex complex4 = new Complex(836.5807);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.NaN;
      complex7.abs();
      Complex complex8 = complex4.divide((-3.0173901411577916E-8));
      Complex complex9 = complex3.sqrt1z();
      complex2.multiply(2717);
      complex8.negate();
      Complex complex10 = Complex.valueOf(836.5807);
      complex2.equals(complex10);
      complex5.divide(complex9);
      Complex complex11 = complex7.cosh();
      Complex complex12 = complex5.cosh();
      complex5.asin();
      complex12.reciprocal();
      complex11.pow((-3409.233695605));
      complex0.pow(complex3);
      complex9.createComplex(2398.747, 2398.747);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.log();
      complex2.I.getArgument();
      Complex complex3 = complex2.conjugate();
      complex0.atan();
      Complex complex4 = Complex.valueOf(1.5707963267948966, (-986.0));
      Complex complex5 = complex2.sqrt1z();
      complex5.ZERO.negate();
      Complex complex6 = complex0.createComplex(1.4142135623730951, 750.4376845615);
      Complex complex7 = complex6.ZERO.add(complex2);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.I.sqrt1z();
      complex6.cos();
      complex8.hashCode();
      Complex complex9 = complex0.pow(0.0);
      complex3.cosh();
      complex3.cosh();
      complex6.I.log();
      Complex complex10 = complex9.log();
      complex10.INF.add(750.4376845615);
      complex9.tanh();
      Object object0 = new Object();
      complex10.equals(object0);
      complex7.hashCode();
      complex4.add(1.4142135623730951);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(753.8, 753.8);
      Complex complex1 = complex0.add(753.8);
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.ONE;
      complex3.getArgument();
      Complex complex4 = complex1.conjugate();
      complex0.atan();
      Complex complex5 = Complex.valueOf((-986.0), (-986.0));
      Complex complex6 = Complex.valueOf((-1403.276), 975.302466);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.negate();
      Complex complex9 = complex7.createComplex(125.709799, (-1511.714479964));
      Complex complex10 = complex9.add(complex4);
      Complex.valueOf(975.302466);
      Complex complex11 = complex3.sqrt1z();
      Complex.valueOf(0.0);
      complex8.hashCode();
      complex5.pow(125.709799);
      complex10.cosh();
      Complex complex12 = complex1.cosh();
      complex8.log();
      complex2.log();
      complex12.add((-996.97));
      complex1.tanh();
      complex6.add(complex11);
      Object object0 = new Object();
      complex2.equals(complex6);
      complex3.hashCode();
      complex0.add(5569.66354325);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.add(752.9501305663582);
      Complex complex4 = complex1.tanh();
      complex1.nthRoot(1029);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = complex2.cosh();
      complex4.cos();
      complex1.abs();
      complex4.multiply(2.9257892371894816E-17);
      complex7.isNaN();
      complex6.getImaginary();
      Complex complex8 = complex6.add(Double.POSITIVE_INFINITY);
      complex2.sin();
      complex8.divide(2738.630768708168);
      Complex complex9 = Complex.ZERO;
      complex9.add(complex4);
      Complex complex10 = complex0.divide(complex8);
      Complex complex11 = Complex.valueOf(Double.NaN, (-2005.0));
      complex5.getImaginary();
      Complex complex12 = Complex.valueOf(2166.3, 1317.541304067);
      complex12.tan();
      complex1.subtract(complex10);
      complex11.exp();
      complex4.exp();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf(0.0, 0.11081436276435852);
      Complex complex4 = complex0.divide(complex2);
      complex4.INF.multiply(complex1);
      complex4.tan();
      complex3.subtract(0.0);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(1142.7409183781083);
      Complex complex1 = Complex.valueOf(1142.7409183781083, 0.0);
      Complex complex2 = complex0.ONE.subtract(1142.7409183781083);
      Complex complex3 = complex2.ONE.cosh();
      complex1.INF.abs();
      complex0.sqrt();
      Complex complex4 = complex3.subtract(complex0);
      complex4.ONE.getArgument();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex4.sinh();
      complex2.isInfinite();
      complex6.NaN.abs();
      complex0.cosh();
      Complex complex7 = complex6.cos();
      complex7.ZERO.add(complex2);
      complex5.isNaN();
      Complex complex8 = complex6.log();
      complex2.cosh();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1462.167, 2.6290763595212492E-129);
      complex0.I.nthRoot(2717);
      complex0.I.divide((double) 2717);
      Complex complex2 = complex0.I.multiply(2.6290763595212492E-129);
      complex0.equals("");
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex2.pow(complex0);
      complex4.nthRoot(1299);
      complex4.INF.exp();
      complex0.getImaginary();
      complex1.nthRoot(1);
      complex2.add(0.0);
      Complex complex5 = complex1.pow(complex4);
      complex5.ZERO.sqrt();
      complex3.getField();
      complex5.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1081.9), 439.19081716138);
      Complex complex1 = complex0.ONE.divide((-1081.9));
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.ZERO.createComplex(3779.25036, 1423.74561525521);
      complex0.getReal();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt();
      complex1.INF.getField();
      Complex complex2 = complex0.pow((-3309.299027311938));
      complex2.INF.hashCode();
      complex2.ZERO.tanh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf((-3309.299027311938), (-3309.299027311938));
      complex3.I.tanh();
      complex1.multiply(complex4);
      complex3.add(complex1);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.acos();
      complex0.I.negate();
      complex0.I.exp();
      Complex complex2 = Complex.valueOf(893.08, 1648.131729005);
      complex1.ONE.getField();
      complex2.ONE.getArgument();
      Complex complex3 = complex0.createComplex(82.105233094696, 2.0);
      complex3.ONE.asin();
      complex1.divide(complex2);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex1.ZERO.tan();
      Object object0 = complex0.readResolve();
      complex4.toString();
      complex0.equals(object0);
      Complex complex5 = complex0.ONE.pow(complex1);
      Complex complex6 = complex5.I.divide(complex3);
      Complex complex7 = complex4.divide(0.0);
      complex7.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.INF.tan();
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = complex8.ZERO.divide(0.0);
      complex2.ONE.add((-1878.107419066826));
      Complex complex11 = complex7.NaN.reciprocal();
      complex7.sqrt1z();
      Complex complex12 = complex3.multiply(0.0);
      complex7.sinh();
      complex8.ZERO.asin();
      complex2.log();
      complex11.getArgument();
      complex12.conjugate();
      Complex complex13 = complex11.multiply((-4501.4586474869));
      complex13.acos();
      complex9.getReal();
      complex10.isInfinite();
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2738.6308599946574), (-2738.6308599946574));
      Complex complex2 = complex1.sqrt1z();
      complex0.ZERO.cos();
      Complex complex3 = complex2.I.pow(0.0);
      Complex complex4 = complex1.NaN.log();
      Complex complex5 = complex0.NaN.multiply(complex1);
      Complex complex6 = complex0.tan();
      complex0.getField();
      Complex complex7 = Complex.valueOf((-2738.6308599946574), (-2013.35037275));
      complex7.I.atan();
      complex0.add(complex6);
      complex0.hashCode();
      complex4.ZERO.hashCode();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex1.ONE.cos();
      complex8.INF.readResolve();
      complex8.NaN.multiply(0);
      complex4.INF.abs();
      complex0.tanh();
      complex4.subtract(complex5);
      Complex complex10 = complex8.log();
      complex3.log();
      Complex complex11 = complex9.conjugate();
      complex10.add(complex11);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex1.ZERO.subtract(1.0);
      complex2.I.createComplex(1.0, (-2177.05039));
      Complex complex3 = complex1.I.sqrt1z();
      complex0.isInfinite();
      complex0.I.reciprocal();
      complex0.INF.getArgument();
      complex3.ONE.hashCode();
      complex0.getImaginary();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex1.INF.subtract(complex3);
      Complex complex7 = complex6.INF.add((-1.0180490545927503E-7));
      complex7.negate();
      Complex complex8 = complex3.subtract((-2864.0));
      complex8.ZERO.divide(complex3);
      Complex complex9 = complex5.negate();
      Complex complex10 = complex0.I.multiply(0);
      complex10.NaN.hashCode();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex9.multiply(Double.NaN);
      complex12.add(complex5);
      Complex complex13 = complex4.atan();
      complex13.ZERO.subtract(811.056);
      Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      complex12.asin();
      complex0.cosh();
      Complex complex14 = complex5.divide((-2864.0));
      complex6.multiply(3274);
      complex14.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(753.8, 753.8);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.tanh();
      complex0.ONE.sqrt1z();
      Complex complex3 = complex2.I.add(665.6009855516388);
      complex3.tanh();
      complex2.ONE.nthRoot(1029);
      Complex complex4 = complex3.ZERO.reciprocal();
      complex4.I.add(complex1);
      Complex complex5 = complex1.INF.cosh();
      Complex complex6 = complex5.INF.cos();
      complex0.INF.abs();
      Complex complex7 = complex5.ONE.multiply(0.0);
      complex0.isNaN();
      complex1.getImaginary();
      Complex complex8 = complex0.add(Double.POSITIVE_INFINITY);
      complex8.ZERO.sin();
      Complex complex9 = complex8.I.divide(0.0);
      Complex complex10 = complex0.add(complex7);
      complex10.ONE.divide(complex9);
      Complex.valueOf(0.0, 665.6009855516388);
      complex0.getImaginary();
      complex1.tan();
      complex0.subtract(complex10);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.divide(complex0);
      complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf((-1.4611908070155308E-8));
      Complex complex4 = complex0.subtract(Double.NaN);
      complex4.NaN.createComplex(0.0, 0.0);
      Complex complex5 = complex4.divide(Double.NaN);
      Complex complex6 = complex5.tan();
      complex5.isNaN();
      complex5.exp();
      complex0.ZERO.nthRoot(1201);
      complex6.divide(0.0);
      complex2.hashCode();
      complex2.conjugate();
      complex4.sinh();
      complex3.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(2709.9022781802287);
      complex0.NaN.sqrt();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(568.346454102);
      Complex complex1 = new Complex((-1.0), 568.346454102);
      complex1.divide(complex0);
      Complex.valueOf(1826.138089456956);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.add(568.346454102);
      Complex.valueOf(5.21281096513035E-303, 0.0);
      Complex complex4 = complex3.cosh();
      complex4.multiply(0.0);
      complex4.getArgument();
      Complex.valueOf((-1.0));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      complex2.NaN.getField();
      complex1.getField();
      Complex complex3 = complex0.subtract(complex1);
      complex2.pow((-779.407989481184));
      complex3.ZERO.toString();
      complex3.INF.createComplex((-20.0), (-207.37314106));
      complex1.getArgument();
      complex0.getField();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex4.INF.sqrt();
      complex5.ONE.cosh();
      Complex complex6 = complex0.createComplex(834.774610962325, 351.580267971105);
      Complex.valueOf((-0.7847731637229688));
      Complex complex7 = complex4.conjugate();
      complex6.NaN.pow(0.0);
      Complex complex8 = complex7.I.multiply(complex6);
      Complex complex9 = complex1.divide(351.580267971105);
      complex9.NaN.readResolve();
      complex5.equals(complex8);
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.NaN.multiply(1);
      Complex complex4 = complex3.NaN.multiply((double) 1);
      complex3.NaN.hashCode();
      complex0.INF.abs();
      Complex complex5 = new Complex(0.0, (-4.055299181908475E-8));
      Complex complex6 = complex5.I.cos();
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex7.I.tan();
      Complex complex9 = complex4.ZERO.multiply(1);
      Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex8.sqrt();
      complex3.I.multiply(0.0);
      Complex complex11 = complex8.multiply(1);
      complex4.tan();
      complex10.INF.hashCode();
      Complex complex12 = complex10.subtract(complex1);
      Complex complex13 = complex11.tan();
      Complex complex14 = complex13.I.cos();
      complex12.pow((-4.055299181908475E-8));
      complex12.exp();
      complex2.multiply(8.43527683868743E-8);
      complex12.hashCode();
      Complex complex15 = Complex.valueOf(8.43527683868743E-8, (-2665.718593425766));
      complex4.divide(complex15);
      complex9.isInfinite();
      complex14.multiply(complex6);
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.NaN.sqrt();
      complex0.ZERO.abs();
      complex4.ONE.createComplex((-5567.3945136741), 0.0);
      complex3.multiply(0.0);
      Complex complex5 = complex4.I.log();
      complex5.INF.add(0.0);
      complex5.INF.getField();
      Complex complex6 = complex0.INF.divide(complex4);
      Complex complex7 = complex6.NaN.divide(0.0);
      complex1.acos();
      complex6.NaN.getField();
      complex6.toString();
      complex3.I.readResolve();
      Complex complex8 = complex0.sqrt1z();
      complex0.multiply(complex8);
      Complex complex9 = complex8.divide(complex3);
      complex9.I.multiply(complex4);
      complex1.cosh();
      Complex complex10 = complex9.ONE.multiply(complex8);
      complex9.multiply(0.0);
      complex1.equals(complex7);
      complex2.cosh();
      Complex complex11 = complex3.atan();
      complex1.conjugate();
      complex10.getField();
      complex11.atan();
      complex6.cos();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), Double.NaN);
      complex0.ONE.sqrt();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-1397.3582511935092));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.sin();
      complex2.INF.subtract(complex1);
      complex0.divide((-1397.3582511935092));
      complex1.getImaginary();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(4.817491674217065E-144);
      complex1.negate();
      Complex complex2 = complex0.add(4.817491674217065E-144);
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = Complex.valueOf(4.817491674217065E-144);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex1.hashCode();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex1.negate();
      complex7.ZERO.divide(439.96038664787);
      Complex complex8 = complex6.acos();
      Complex complex9 = complex8.cosh();
      Complex complex10 = complex5.tan();
      Complex complex11 = complex10.ONE.exp();
      complex3.sqrt1z();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex12.ZERO.multiply(0.0);
      complex4.tanh();
      complex11.getImaginary();
      Complex complex13 = complex9.subtract(complex2);
      complex13.ZERO.nthRoot(1766);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.acos();
      complex3.I.sinh();
      Complex complex5 = complex4.ZERO.cos();
      Complex complex6 = complex5.ONE.pow(complex1);
      complex6.NaN.readResolve();
      complex5.ZERO.conjugate();
      Complex complex7 = Complex.valueOf(0.5584990978240967);
      Complex complex8 = complex4.INF.negate();
      complex8.INF.subtract(complex3);
      Complex complex9 = complex0.multiply(0);
      complex4.getReal();
      complex4.isNaN();
      Complex complex10 = complex4.conjugate();
      complex0.tanh();
      complex4.abs();
      complex0.I.divide(1907.0);
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = complex11.multiply(1261);
      complex4.negate();
      complex11.equals(complex7);
      complex11.divide(complex2);
      Complex complex13 = complex12.cosh();
      complex10.cosh();
      complex1.asin();
      complex9.reciprocal();
      complex7.pow(542.83778362);
      complex13.pow(complex5);
      complex4.createComplex(3797.1519462272913, 0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.NaN.reciprocal();
      Complex complex4 = complex1.NaN.multiply(complex0);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex7.sqrt1z();
      complex8.INF.tan();
      complex4.hashCode();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex9.ZERO.subtract(complex3);
      Complex complex11 = complex9.NaN.cos();
      complex11.ZERO.sqrt1z();
      complex3.ZERO.tanh();
      complex10.NaN.nthRoot(37);
      complex5.abs();
      complex11.multiply(complex1);
      complex2.INF.readResolve();
      complex4.divide(0.0);
      complex4.divide(complex6);
      complex0.sinh();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex12.getField();
      complex11.equals(complex12);
      complex10.isInfinite();
      Complex complex13 = complex2.add(0.0);
      complex13.NaN.readResolve();
      complex10.sqrt();
      complex10.multiply(complex2);
      Complex.valueOf(0.0, (-552.27502965822));
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 339.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ONE.multiply(0.0);
      Complex complex5 = Complex.valueOf(339.0, 211.4828293240877);
      complex5.conjugate();
      Complex complex6 = complex1.NaN.pow(0.0);
      complex6.NaN.tan();
      complex6.I.readResolve();
      complex2.readResolve();
      complex4.ONE.atan();
      Complex complex7 = complex0.multiply((-1132));
      complex1.toString();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.NaN.getArgument();
      complex8.NaN.sinh();
      Complex.valueOf((-2345.96));
      complex8.ZERO.conjugate();
      complex1.hashCode();
      Complex complex9 = complex7.add(complex1);
      complex4.INF.reciprocal();
      complex8.cosh();
      complex9.INF.conjugate();
      complex4.subtract(complex6);
      complex5.add(complex1);
      complex9.toString();
      Complex complex10 = complex6.multiply(211.4828293240877);
      Complex complex11 = complex10.cos();
      complex11.ONE.add(211.4828293240877);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.NaN.sin();
      complex3.ONE.negate();
      complex3.ZERO.exp();
      complex0.toString();
      Complex complex4 = complex0.asin();
      complex2.getArgument();
      complex4.createComplex(Double.NaN, Double.NaN);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.NaN.sqrt1z();
      Complex complex6 = Complex.NaN;
      complex1.divide(complex6);
      complex0.getField();
      complex1.pow(complex4);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.sqrt1z();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex1.ZERO.divide(complex0);
      complex0.cosh();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-1708.87706516), (-1708.87706516));
      Complex complex1 = complex0.INF.subtract((-1708.87706516));
      complex1.INF.log();
      complex0.ONE.multiply((-2451));
      Complex complex2 = complex0.ZERO.add((-3002.4279003687725));
      complex0.isNaN();
      Complex.valueOf((-1708.87706516));
      Complex complex3 = complex0.INF.sinh();
      complex3.ZERO.sinh();
      complex3.NaN.hashCode();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.reciprocal();
      complex2.isInfinite();
      complex4.subtract((-1708.87706516));
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.abs();
      complex0.getReal();
      Complex complex1 = new Complex(2076.157352, 0.0);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ONE.getArgument();
      Complex complex4 = complex0.add(complex1);
      complex4.NaN.conjugate();
      Complex complex5 = Complex.valueOf((-244.845363394398));
      Complex complex6 = complex1.ZERO.pow(complex5);
      Complex complex7 = Complex.valueOf(2076.157352);
      Complex complex8 = complex6.ONE.multiply(complex7);
      complex2.nthRoot(17);
      Complex complex9 = complex1.ZERO.sin();
      complex9.INF.pow(1142.7641);
      complex7.I.exp();
      complex8.INF.sinh();
      try { 
        complex2.nthRoot((-2471));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,471
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.atan();
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.add(844.375585389228);
      complex0.sin();
      complex0.createComplex(20.0, 1191.587368710366);
      complex1.I.cosh();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex2.tan();
      complex4.ONE.toString();
      Complex complex6 = complex3.ONE.multiply(3986);
      complex6.readResolve();
      complex6.ONE.readResolve();
      Complex complex7 = complex0.sinh();
      complex1.INF.getArgument();
      Complex complex8 = complex1.ONE.multiply(3986);
      complex7.ONE.sqrt();
      Complex complex9 = complex0.subtract(1296.86376);
      complex7.getField();
      Complex complex10 = complex2.tanh();
      complex10.cos();
      Complex complex11 = complex10.I.acos();
      complex11.NaN.createComplex(24.7528, 1988.37);
      complex10.hashCode();
      complex7.getField();
      complex9.pow(complex8);
      complex7.getField();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-1.7346590916458485E-9), (-1.7346590916458485E-9));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = new Complex(521.085212);
      complex2.INF.createComplex((-1.7346590916458485E-9), 521.085212);
      complex0.subtract(complex2);
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-2708.51107485086), 1.0);
      Complex complex1 = Complex.ZERO;
      complex0.I.getArgument();
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.INF.add(complex0);
      complex0.hashCode();
      Complex complex4 = complex2.I.sqrt1z();
      complex2.ZERO.getField();
      Complex complex5 = complex1.negate();
      Complex complex6 = complex3.INF.tanh();
      Complex complex7 = complex3.asin();
      Complex complex8 = Complex.valueOf((-2708.51107485086));
      complex8.ONE.readResolve();
      Complex complex9 = complex1.atan();
      complex7.asin();
      complex5.getImaginary();
      complex4.toString();
      complex9.cos();
      complex8.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add((-20.0));
      Complex complex2 = new Complex((-2505.0), (-2505.0));
      complex0.add(complex2);
      Complex complex3 = complex1.tan();
      complex3.log();
      Complex.valueOf(35.162878131, (-20.0));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.log();
      complex2.I.getArgument();
      Complex complex3 = complex2.conjugate();
      complex0.atan();
      Complex complex4 = Complex.valueOf(1.5707963267948966, (-986.0));
      Complex complex5 = complex2.sqrt1z();
      complex5.ZERO.negate();
      Complex complex6 = complex0.createComplex(546.1355826, 750.4376845615);
      Complex complex7 = complex6.ZERO.add(complex2);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.I.sqrt1z();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(1.4142135623730951, complex9.getReal(), 0.01);
      
      Complex complex10 = complex6.cos();
      complex8.hashCode();
      Complex complex11 = complex0.pow(0.0);
      Complex complex12 = complex3.cosh();
      complex3.cosh();
      Complex complex13 = complex6.I.log();
      assertFalse(complex13.isInfinite());
      
      Complex complex14 = complex11.log();
      complex14.INF.add(750.4376845615);
      Complex complex15 = complex11.tanh();
      assertSame(complex15, complex5);
      
      Object object0 = new Object();
      complex14.equals(object0);
      complex7.hashCode();
      assertTrue(complex1.equals((Object)complex10));
      assertSame(complex7, complex12);
      assertNotSame(complex7, complex11);
      assertFalse(complex7.equals((Object)complex13));
      
      Complex complex16 = complex4.add(546.1355826);
      assertEquals(547.706378926795, complex16.getReal(), 0.01);
      assertEquals((-986.0), complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.conjugate();
      Complex complex1 = complex0.asin();
      complex1.NaN.atan();
      Complex complex2 = complex0.ONE.sqrt1z();
      complex2.INF.add(complex0);
      try { 
        complex2.nthRoot((-2809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,809
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.add((-1866.632018414));
      Complex complex1 = complex0.ONE.add(758.448431);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(759.448431, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.divide(complex0);
      assertSame(complex3, complex2);
      assertFalse(complex3.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.cosh();
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.asin();
      boolean boolean0 = complex1.equals(complex3);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex((-511.8669), 0.0);
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.I.sinh();
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.reciprocal();
      complex1.sqrt();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.sin();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex4 = complex1.subtract((double) 1);
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex0.cosh();
      complex5.readResolve();
      Complex complex6 = complex5.tan();
      double double0 = complex6.getArgument();
      assertEquals(36.071404402473284, complex6.getReal(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Complex complex7 = complex0.sqrt();
      assertTrue(complex7.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.exp();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = (Complex)complex1.INF.readResolve();
      assertTrue(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex2));
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex4 = Complex.valueOf(0.0, (-309.0));
      complex0.equals(complex4);
      boolean boolean0 = complex4.isInfinite();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals((-309.0), complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex0.multiply(660);
      assertEquals((-660.0), complex5.getImaginary(), 0.01);
      assertEquals((-660.0), complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      complex0.negate();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
