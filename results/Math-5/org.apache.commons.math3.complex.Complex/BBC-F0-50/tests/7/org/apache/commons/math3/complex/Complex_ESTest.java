/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:44:22 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Object object0 = new Object();
      Complex complex2 = complex0.subtract((-1.9219116633978794E41));
      Complex complex3 = complex2.exp();
      complex1.nthRoot(1335);
      complex1.equals(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.multiply(complex3);
      complex1.abs();
      Complex complex6 = complex2.divide(complex1);
      complex6.acos();
      Complex complex7 = Complex.I;
      Complex complex8 = complex4.cos();
      complex4.multiply((-2.5338279333399964E-272));
      complex3.getArgument();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex1.cos();
      complex5.toString();
      complex11.add(0.0);
      complex10.hashCode();
      complex10.isInfinite();
      Complex complex12 = Complex.ZERO;
      complex5.pow(complex11);
      complex4.sinh();
      Complex.valueOf(Double.NaN, 1730.608);
      complex5.acos();
      Complex.valueOf((-1.9219116633978794E41));
      complex10.toString();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.reciprocal();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1176, Double.POSITIVE_INFINITY);
      complex0.ONE.reciprocal();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(1166, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex2.multiply(1073741824);
      complex0.pow(1.7407497662694827E-295);
      complex2.pow(complex0);
      complex1.asin();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(1166, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(1167, Double.POSITIVE_INFINITY);
      complex0.sin();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(1167, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tanh();
      Complex.valueOf(20.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(20.0);
      complex0.multiply(complex1);
      complex0.divide(1879.86814941064);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.conjugate();
      Complex.valueOf((-2125.5371462));
      complex1.reciprocal();
      complex1.asin();
      complex0.divide(complex2);
      complex1.negate();
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex((-2125.5371462), Double.POSITIVE_INFINITY);
      complex4.multiply(1321);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2759.0, 1.0);
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = complex0.multiply(20.0);
      Complex complex3 = complex1.negate();
      complex3.NaN.toString();
      Complex complex4 = complex2.negate();
      complex2.toString();
      Complex complex5 = Complex.valueOf(2759.0);
      complex4.readResolve();
      Complex complex6 = complex2.atan();
      complex4.abs();
      Complex complex7 = complex0.INF.conjugate();
      Complex complex8 = complex0.I.pow(20.0);
      complex8.ZERO.add(2759.0);
      Complex complex9 = complex4.tan();
      Complex complex10 = complex9.ONE.tan();
      complex4.INF.divide(20.0);
      Complex complex11 = complex2.add(20.0);
      complex11.ZERO.log();
      Complex complex12 = complex5.tan();
      Complex.valueOf(1.0013602361565184);
      complex12.reciprocal();
      Complex complex13 = complex6.ONE.createComplex(1.0, 1.0);
      complex4.multiply(1326);
      complex10.readResolve();
      complex7.readResolve();
      complex6.divide((double) 1326);
      complex1.pow(complex13);
      complex2.readResolve();
      complex13.reciprocal();
      complex0.getField();
      try { 
        complex0.nthRoot((-47));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -47
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.conjugate();
      Complex.valueOf((-2125.5371462));
      Complex complex3 = new Complex((-2125.5371462), (-2125.5371462));
      complex3.reciprocal();
      complex1.asin();
      Complex complex4 = Complex.NaN;
      complex3.divide(complex2);
      complex1.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(2.7621956910836314, Double.POSITIVE_INFINITY);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1018.7853998814));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.tanh();
      complex3.ONE.createComplex(Double.POSITIVE_INFINITY, (-548.1020640176577));
      Complex complex4 = Complex.INF;
      complex3.divide((-1018.7853998814));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.asin();
      Complex complex1 = complex0.add((-325.743976599193));
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.divide(complex1);
      complex0.negate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.asin();
      complex5.log();
      complex3.tan();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, (-325.743976599193));
      Complex complex7 = complex6.divide((-325.743976599193));
      complex6.multiply(complex4);
      complex2.pow(complex0);
      complex7.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 2.0);
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex0.atan();
      Complex.valueOf(2.0);
      complex1.ZERO.cos();
      complex2.subtract((-20.0));
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.multiply(2803.923877349606);
      complex1.NaN.getField();
      complex4.INF.abs();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex3.cos();
      complex6.ZERO.exp();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-325.743976599193));
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.INF;
      complex3.add(complex0);
      Complex complex4 = new Complex((-325.743976599193), (-325.743976599193));
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex1.pow(complex0);
      Complex complex8 = Complex.valueOf((-580.29979389));
      Complex complex9 = Complex.ONE;
      complex3.reciprocal();
      complex7.abs();
      complex0.asin();
      Complex complex10 = complex7.add((-580.29979389));
      Complex complex11 = complex10.divide(complex6);
      complex11.ONE.multiply(3760);
      complex8.negate();
      Complex complex12 = complex9.asin();
      complex2.negate();
      complex6.tan();
      Complex complex13 = Complex.valueOf((-5323.8236));
      complex8.multiply(complex13);
      complex5.readResolve();
      complex1.pow(complex5);
      complex12.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.subtract(2.0);
      Complex complex4 = complex3.subtract(4220.199763044392);
      complex4.INF.multiply(complex2);
      Complex complex5 = Complex.valueOf(4220.199763044392, 4220.199763044392);
      complex5.nthRoot(3204);
      complex3.sin();
      Complex complex6 = Complex.valueOf((-1.0));
      Complex complex7 = complex4.asin();
      complex7.getArgument();
      complex1.toString();
      Complex complex8 = complex6.reciprocal();
      complex8.sin();
      Complex complex9 = complex0.sqrt();
      complex7.pow(complex8);
      complex9.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(2.2716631311540616, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.valueOf((-576.2828));
      Complex complex7 = complex4.pow(complex5);
      Complex complex8 = complex4.subtract(complex5);
      Complex complex9 = complex2.divide(2.2716631311540616);
      complex6.tanh();
      complex7.acos();
      complex9.getField();
      Complex.valueOf((-946.234212015324));
      complex7.pow((-2000.0));
      Complex complex10 = Complex.ZERO;
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = 2.0;
      double double1 = (-20.0);
      Complex complex0 = Complex.valueOf((-20.0), (-1513.9572));
      Complex complex1 = Complex.valueOf((-4016.086), (-20.0));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.multiply((-163.092685756938));
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.valueOf((-1513.9572));
      complex2.pow(complex5);
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex3.ZERO.add(complex1);
      complex1.sqrt();
      Complex.valueOf((-576.2828));
      Complex complex5 = complex4.subtract((-576.2828));
      complex2.multiply(complex0);
      complex3.cos();
      complex5.divide(2122.7679);
      complex4.tanh();
      Complex complex6 = Complex.I;
      complex6.acos();
      complex3.getField();
      Complex.valueOf((-487.32162));
      complex6.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.INF;
      double double0 = 2.0;
      complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.subtract(2.0);
      complex3.subtract(4220.199763044392);
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(479.390223, 3.137374584307575E254);
      complex0.cosh();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply((-1831.3854227888974));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex3.conjugate();
      complex3.pow(complex5);
      Complex.valueOf((-487.32162));
      complex2.sqrt();
      complex4.reciprocal();
      complex3.abs();
      Complex complex7 = complex2.asin();
      complex6.add(2122.7679);
      complex3.divide(complex7);
      Complex complex8 = new Complex(479.390223, (-1831.3854227888974));
      complex8.negate();
      Complex complex9 = Complex.ONE;
      complex5.negate();
      complex8.tan();
      Complex.valueOf(7.856800469312431E8);
      Complex complex10 = new Complex(479.390223, Double.NaN);
      Complex complex11 = Complex.ZERO;
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(0.12642613053321838);
      complex1.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.acos();
      Complex complex4 = new Complex(1232.072215, (-1928.36903956));
      complex3.pow(4.313978872469646E-84);
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex4.multiply(complex2);
      Complex complex7 = complex5.subtract(4506144.55727041);
      complex7.INF.multiply(1.9999999999999998);
      Complex complex8 = Complex.valueOf(2.0, (-1324.40696929));
      Complex complex9 = complex8.subtract(5414.736023);
      Complex complex10 = Complex.valueOf(1232.072215, (-5.755303038890997E-8));
      Complex complex11 = complex9.multiply(complex10);
      complex1.cos();
      complex1.divide(4.313978872469646E-84);
      complex11.tanh();
      complex10.acos();
      Complex complex12 = Complex.ONE;
      complex12.divide(4.313978872469646E-84);
      complex12.INF.cosh();
      complex6.getField();
      Complex.valueOf((-5.755303038890997E-8));
      complex7.pow(974.614);
      complex12.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      Complex complex1 = complex0.exp();
      complex1.getReal();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.reciprocal();
      complex3.hashCode();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = Complex.valueOf((double) 1335, 0.5403023058681398);
      complex5.isInfinite();
      Complex complex6 = new Complex(Double.NaN, (-1097.8037679382535));
      complex5.pow(complex6);
      Complex.valueOf(3110.04);
      complex3.acos();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide(4.313978872469646E-84);
      complex1.ZERO.getField();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.acos();
      Complex complex4 = new Complex((-6.437492120743254E-9), 4.313978872469646E-84);
      complex4.NaN.pow(4.313978872469646E-84);
      Complex complex5 = complex0.INF.divide(complex4);
      Complex complex6 = complex0.ZERO.multiply(complex2);
      Complex complex7 = complex0.subtract(2.0);
      Complex complex8 = complex7.subtract(4220.199763044392);
      complex8.INF.multiply(complex6);
      Complex complex9 = complex3.cos();
      Complex complex10 = complex7.tanh();
      complex10.NaN.acos();
      complex5.divide(4220.199763044392);
      complex9.getField();
      Complex complex11 = Complex.valueOf(6.283185307179586);
      Complex complex12 = complex11.pow(6.283185307179586);
      Complex complex13 = complex12.cos();
      complex3.getImaginary();
      complex13.readResolve();
      complex7.sqrt1z();
      complex4.divide(4220.199763044392);
      complex4.createComplex(1826.855713174, (-6.437492120743254E-9));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(9.688437803487918, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = new Complex(0.11081436276435852, 2122.7679);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = Complex.I;
      Complex complex6 = complex1.sqrt();
      complex6.conjugate();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex1.INF.subtract(complex4);
      complex1.sqrt();
      complex1.reciprocal();
      complex5.abs();
      complex7.asin();
      complex3.add(9.688437803487918);
      complex2.multiply(complex8);
      complex8.isInfinite();
      complex5.pow(complex2);
      Complex.valueOf(0.12470348179340363);
      complex6.acos();
      Complex complex9 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.multiply(37);
      complex0.equals("elements cannot be retrieved from a negative array index {0}");
      complex2.tan();
      Complex complex3 = Complex.valueOf(3.1613917467297413E135, 1624.28345744);
      Complex complex4 = complex3.multiply(complex0);
      complex0.pow(6.283185307179586);
      Complex complex5 = complex4.pow(complex1);
      complex5.negate();
      Complex complex6 = complex3.asin();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
      Complex complex1 = complex0.multiply(37);
      complex1.sinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.negate();
      Complex complex5 = complex2.tan();
      Complex.valueOf((double) 37);
      Complex complex6 = new Complex((-2831.827438915378), 1981.445986);
      Complex complex7 = complex3.multiply(complex0);
      Complex complex8 = complex3.I.sinh();
      complex4.divide((double) 37);
      complex7.add((double) 37);
      complex5.add(Double.NaN);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-294.1015509335), (-839.5749261));
      Complex complex1 = complex0.createComplex((-839.5749261), (-936.0));
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex1.NaN.add(complex2);
      complex3.ZERO.multiply((-2518));
      Complex complex4 = complex2.NaN.log();
      complex4.NaN.atan();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.cos();
      complex2.I.sinh();
      complex1.multiply((-1429));
      complex2.sqrt1z();
      Complex complex3 = complex1.conjugate();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex1.sqrt();
      complex5.conjugate();
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex1.INF.subtract(complex4);
      complex1.sqrt();
      complex1.reciprocal();
      complex0.abs();
      complex6.asin();
      complex3.add(0.0);
      complex7.divide(complex0);
      complex1.negate();
      complex6.negate();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.divide(complex2);
      complex4.NaN.cosh();
      Complex complex5 = Complex.valueOf(2.0, 1731.0);
      complex2.readResolve();
      complex0.getArgument();
      Complex complex6 = Complex.ONE;
      complex5.multiply(complex2);
      complex6.getImaginary();
      complex0.pow(0.0);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex3.sin();
      Complex complex9 = Complex.valueOf(526.68);
      complex7.add(complex9);
      complex5.multiply((-190));
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = new Object();
      Complex complex3 = complex0.subtract((-1.9219116633978794E41));
      Complex complex4 = complex3.exp();
      complex1.nthRoot(1335);
      complex2.equals(complex1);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex3.multiply(complex5);
      Complex complex7 = complex1.pow(1.7407497662694827E-295);
      complex4.pow(complex5);
      complex4.negate();
      complex7.asin();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex3.ONE.divide(complex2);
      complex1.equals(complex4);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.multiply(complex5);
      complex6.abs();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = Complex.I;
      Complex complex9 = complex5.cos();
      Complex complex10 = complex0.multiply(Double.NaN);
      complex10.getArgument();
      Complex complex11 = Complex.ONE;
      complex6.sinh();
      Complex complex12 = Complex.I;
      complex12.cos();
      complex9.toString();
      Complex complex13 = new Complex((-2065.89555));
      complex13.add((-2065.89555));
      complex8.hashCode();
      complex8.isInfinite();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex13.pow(complex4);
      complex7.sinh();
      Complex.valueOf(Double.NaN, (-2471.147932));
      complex15.acos();
      Complex.valueOf((-2065.89555));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Object object0 = new Object();
      Complex complex2 = complex0.subtract((-1.9219116633978794E41));
      Complex complex3 = complex2.exp();
      complex1.nthRoot(1335);
      complex1.equals(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.multiply(complex3);
      complex1.abs();
      complex2.divide(complex1);
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.cos();
      complex4.multiply((-2.5338279333399964E-272));
      complex3.getArgument();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex1.cos();
      complex5.toString();
      complex10.add(0.0);
      complex9.hashCode();
      complex9.isInfinite();
      Complex complex11 = Complex.ZERO;
      complex5.pow(complex10);
      complex4.sinh();
      Complex.valueOf(Double.NaN, 1730.608);
      complex5.acos();
      Complex.valueOf((-1.9219116633978794E41));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-4255.0182115254), (-4255.0182115254));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.multiply(2122.7679);
      complex2.add(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.add(1174.0);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex7.pow(complex4);
      Complex complex9 = Complex.valueOf(0.11081436276435852);
      complex8.subtract(complex9);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex6.reciprocal();
      complex11.abs();
      Complex complex12 = Complex.I;
      Complex complex13 = new Complex(0.029185414977064082, 0.029185414977064082);
      complex0.add(1174.0);
      complex4.divide(complex10);
      Complex complex14 = complex5.negate();
      complex6.asin();
      complex6.negate();
      complex0.tan();
      Complex.valueOf((-4255.0182115254));
      complex14.multiply(complex5);
      complex3.divide(0.029185414977064082);
      complex13.add((-595.0413613));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(2013.644789, 2013.644789);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.createComplex(2013.644789, 2013.644789);
      complex1.INF.getField();
      Complex complex4 = complex0.NaN.multiply(2013.644789);
      complex4.NaN.divide(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = Complex.valueOf(2013.644789, 2013.644789);
      complex6.ONE.subtract(complex5);
      complex0.readResolve();
      complex2.I.multiply(2013.644789);
      complex3.multiply(complex5);
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.INF.cos();
      complex8.NaN.tanh();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex9.reciprocal();
      complex10.INF.negate();
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      Complex complex11 = new Complex(2013.644789);
      complex0.pow(complex11);
      complex9.multiply(1043);
      complex1.divide(2013.644789);
      Complex.valueOf((double) 1043, 2013.644789);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      double double0 = (-1031.24148);
      Complex complex2 = complex0.createComplex((-4.8465821804075345E-8), (-1031.24148));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex3.subtract(complex2);
      complex2.sqrt();
      Complex complex6 = complex0.reciprocal();
      complex5.sqrt1z();
      complex4.sqrt1z();
      Complex complex7 = Complex.valueOf(1.7896699905395508);
      Complex complex8 = complex6.cos();
      complex7.tan();
      complex5.multiply(complex8);
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.multiply(complex1);
      Object object0 = new Object();
      Complex complex4 = Complex.valueOf((double) 1335, (-2.0110092718356274E218));
      Complex complex5 = complex4.subtract((-2.0110092718356274E218));
      complex5.exp();
      List<Complex> list0 = complex2.nthRoot(1335);
      complex4.equals(list0);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex5.multiply(complex0);
      Complex complex8 = complex2.divide(complex7);
      complex4.cos();
      Complex complex9 = complex3.multiply(2.139863967895508);
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex0.cos();
      complex6.toString();
      Complex complex12 = complex4.add((-1228.688280569));
      complex9.hashCode();
      complex2.isInfinite();
      Complex complex13 = complex12.pow(complex10);
      complex11.sinh();
      complex13.acos();
      complex12.add((-1228.688280569));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = Complex.valueOf((-1.548715389333397E-8));
      complex2.asin();
      Complex complex5 = complex1.sinh();
      complex5.INF.conjugate();
      complex1.divide(complex2);
      complex4.getImaginary();
      complex3.equals(complex0);
      Complex complex6 = Complex.valueOf(0.0);
      complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5139456987380981);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.INF.subtract((double) 1335);
      Complex complex4 = complex3.I.exp();
      complex4.abs();
      Complex complex5 = new Complex(1.3043045862358962);
      complex5.multiply(complex1);
      complex4.sqrt1z();
      Complex complex6 = complex0.exp();
      complex4.getReal();
      complex5.negate();
      complex4.reciprocal();
      complex2.hashCode();
      complex1.isInfinite();
      complex6.pow(complex3);
      complex3.sinh();
      complex3.acos();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex((-4.8465821804075345E-8), (-1031.24148));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.multiply(complex1);
      complex3.nthRoot(1330);
      Object object0 = complex4.readResolve();
      complex2.equals(object0);
      Complex complex5 = complex2.tan();
      complex3.multiply(complex4);
      complex4.abs();
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex5.cos();
      complex1.multiply((-916.97));
      complex4.sinh();
      Complex complex8 = complex7.cos();
      complex2.toString();
      complex6.add((-916.97));
      complex0.hashCode();
      complex4.isInfinite();
      complex0.pow(complex5);
      complex8.sinh();
      complex8.acos();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Object object0 = new Object();
      Complex complex3 = complex0.subtract((-1.9219116633978794E41));
      Complex complex4 = complex3.exp();
      complex1.nthRoot(1335);
      complex2.equals(complex1);
      Complex complex5 = complex2.tan();
      Complex complex6 = complex3.multiply(complex5);
      complex0.abs();
      Complex complex7 = complex5.divide(complex6);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.cos();
      Complex complex10 = complex4.multiply(0.0);
      complex10.INF.getArgument();
      Complex complex11 = Complex.ONE;
      complex11.sinh();
      complex7.cos();
      complex9.toString();
      Complex complex12 = complex9.add((-2471.147932));
      complex8.hashCode();
      complex6.isInfinite();
      Complex complex13 = Complex.ZERO;
      complex12.pow(complex13);
      complex8.sinh();
      Complex complex14 = Complex.valueOf(0.0, (-2471.147932));
      complex14.acos();
      Complex.valueOf(1609.5031548990762);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      double double0 = (-286.1377023541);
      Complex complex2 = Complex.valueOf((-286.1377023541), (-286.1377023541));
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.multiply((-286.1377023541));
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.add(complex5);
      complex4.add((-286.1377023541));
      complex2.sqrt();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex6.pow(complex3);
      Complex complex9 = complex8.subtract(complex1);
      complex9.sqrt();
      Complex complex10 = complex1.reciprocal();
      complex9.sqrt1z();
      complex4.sqrt1z();
      Complex.valueOf(0.11081436276435852);
      complex8.cos();
      complex10.tan();
      complex7.multiply(complex9);
      int int0 = 0;
      Complex complex11 = Complex.ONE;
      try { 
        complex11.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      complex1.add(459.711353534);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(459.711353534);
      complex4.divide(complex1);
      Complex.valueOf(0.0);
      Complex complex5 = Complex.valueOf(2.0, 459.711353534);
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.acos();
      complex3.ONE.divide(complex2);
      Complex complex4 = Complex.valueOf(526.68, 526.68);
      complex4.ONE.add(0.0);
      complex4.cos();
      complex2.NaN.hashCode();
      complex0.INF.abs();
      Complex complex5 = complex0.asin();
      complex5.I.add(Double.POSITIVE_INFINITY);
      int int0 = 1;
      complex5.ONE.nthRoot(1);
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.I.negate();
      complex7.NaN.asin();
      Complex complex8 = new Complex(0.0, Double.POSITIVE_INFINITY);
      try { 
        complex8.ONE.nthRoot((-3271));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,271
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex3.ONE.divide(complex2);
      Complex complex5 = Complex.valueOf(526.68, 526.68);
      complex5.ONE.add(0.0);
      complex5.cos();
      complex2.NaN.hashCode();
      complex0.INF.abs();
      complex0.asin();
      complex5.add(526.68);
      int int0 = 17;
      complex4.nthRoot(17);
      Complex complex6 = complex4.divide(complex0);
      complex6.negate();
      complex2.asin();
      complex6.negate();
      int int1 = (-3271);
      Complex complex7 = Complex.ZERO;
      int int2 = 2145645265;
      // Undeclared exception!
      complex7.nthRoot(2145645265);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ZERO.divide(2.0);
      Complex complex6 = complex5.INF.divide(complex0);
      complex4.subtract(complex6);
      complex3.getArgument();
      complex1.createComplex(Double.NaN, 2.0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sqrt1z();
      complex3.abs();
      Complex.valueOf(Double.NaN, 0.0);
      complex8.readResolve();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6400018930435181, 0.6400018930435181);
      Complex complex1 = complex0.multiply(532);
      Complex complex2 = complex0.tanh();
      complex2.ONE.tan();
      complex2.ZERO.hashCode();
      complex0.equals(complex2);
      Complex complex3 = complex1.tanh();
      complex2.sinh();
      Complex complex4 = Complex.ZERO;
      complex4.asin();
      complex0.isInfinite();
      Complex.valueOf((-1.2448938139338362E211));
      Complex complex5 = Complex.NaN;
      complex5.pow(641.912);
      Complex complex6 = Complex.valueOf((-1147.0), 2157.6438131);
      complex3.subtract(complex6);
      complex5.getArgument();
      complex6.negate();
      complex4.createComplex(1.0823142528533936, (-20.0));
      Complex complex7 = Complex.I;
      complex7.sqrt1z();
      complex3.abs();
      Complex.valueOf(2.0, Double.NaN);
      complex3.readResolve();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(0.11081436276435852);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex1.add(0.0);
      Complex complex6 = complex1.sqrt();
      complex6.conjugate();
      complex0.pow(complex3);
      Complex complex7 = complex1.INF.subtract(complex4);
      complex1.sqrt();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.sqrt1z();
      complex2.sqrt();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = Complex.ZERO;
      complex7.cosh();
      complex2.sqrt1z();
      complex3.multiply(complex7);
      complex4.tan();
      complex11.reciprocal();
      Complex complex12 = Complex.valueOf(2942.1);
      Complex complex13 = new Complex((-332.91), (-4.7108306094133045E-4));
      complex13.multiply(complex9);
      complex1.pow((-4.7108306094133045E-4));
      Complex.valueOf(1.5800256583859738);
      complex10.sin();
      complex12.divide(0.11081436276435852);
      complex5.add((-332.91));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2404.906), (-2404.906));
      Complex complex1 = complex0.multiply(532);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.tan();
      complex2.ZERO.hashCode();
      complex0.equals(complex2);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.sinh();
      complex4.ONE.asin();
      complex1.isInfinite();
      complex2.conjugate();
      Complex complex6 = complex5.createComplex(8.04768962869242, 532);
      complex4.log();
      Complex.valueOf((double) 532, (-2404.906));
      complex5.acos();
      complex6.nthRoot(532);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.7316830893872364E-7));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cosh();
      complex2.equals(complex0);
      Complex complex3 = new Complex(318.0367469522212, 0.0);
      complex3.divide((-1.7316830893872364E-7));
      complex3.add(5350.587487971405);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5139456987380981);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Object object0 = new Object();
      Complex complex3 = complex1.INF.subtract((double) 1335);
      complex3.I.exp();
      complex1.nthRoot(1335);
      complex0.equals(object0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.multiply(complex2);
      complex5.abs();
      complex1.divide(complex4);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.multiply(0.5139456987380981);
      complex7.ONE.sinh();
      complex1.ZERO.cos();
      complex7.toString();
      Complex complex8 = complex1.add(0.5139456987380981);
      complex8.ZERO.pow(0.0);
      complex0.pow(0.0);
      Complex complex9 = Complex.valueOf((-815.679271779));
      complex3.sin();
      Complex.valueOf((-1320.0), 0.0);
      complex9.exp();
      Complex.valueOf((-815.679271779), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(0.11081436276435852);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex1.INF.subtract(complex4);
      complex6.divide(complex1);
      Complex complex9 = new Complex(0.11081436276435852);
      complex9.cos();
      Complex complex10 = complex9.multiply(0.0);
      complex10.sinh();
      Complex complex11 = complex2.cos();
      complex4.toString();
      Complex complex12 = complex5.add(963.1257016923);
      Complex complex13 = complex7.pow(0.0);
      complex13.divide((-20.0));
      Complex complex14 = Complex.ONE;
      complex14.multiply(complex12);
      Complex complex15 = complex3.sin();
      complex15.getField();
      complex8.getField();
      Complex complex16 = Complex.NaN;
      complex16.add(0.11081436276435852);
      complex16.cosh();
      Complex complex17 = complex5.sinh();
      complex1.pow(0.0);
      complex17.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = Complex.valueOf(2.0, 0.0);
      Complex complex3 = complex2.cos();
      complex3.hashCode();
      complex2.abs();
      complex3.asin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.add(2186.5);
      complex3.nthRoot(1);
      Complex complex6 = complex5.divide(complex0);
      complex6.negate();
      complex3.asin();
      Complex complex7 = complex6.negate();
      complex1.nthRoot(1);
      complex7.tan();
      double double0 = 1563.50708;
      Complex.valueOf((double) 1);
      complex3.multiply(complex0);
      try { 
        complex4.nthRoot((-2121));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,121
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-5079.66064), (-5079.66064));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.acos();
      complex3.ONE.divide(complex2);
      Complex complex4 = Complex.valueOf(526.68, 526.68);
      Complex complex5 = complex4.ONE.add(0.0);
      complex4.cos();
      complex2.NaN.hashCode();
      complex0.INF.abs();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.I.add(Double.POSITIVE_INFINITY);
      complex6.ONE.nthRoot(1);
      complex7.sqrt();
      Complex complex8 = Complex.valueOf(1.5656258353157435);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.cosh();
      complex8.sqrt1z();
      complex11.multiply(complex8);
      Complex.valueOf(526.68);
      complex11.multiply(complex0);
      complex9.pow((-1.4255188208147591));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.sin();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex7.exp();
      Complex.valueOf(396.9, (-2360.3));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(0.11081436276435852);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex1.sqrt();
      complex5.conjugate();
      complex0.pow(complex3);
      Complex complex6 = complex1.INF.subtract(complex4);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.divide(complex5);
      complex3.negate();
      Complex complex9 = Complex.valueOf(1273.3916013836);
      Complex complex10 = complex9.asin();
      complex5.negate();
      complex8.nthRoot(17);
      Complex complex11 = complex2.tan();
      Complex.valueOf(0.0);
      complex1.multiply(complex6);
      complex5.nthRoot(17);
      Complex complex12 = complex9.sin();
      Complex complex13 = Complex.valueOf(0.0);
      Complex complex14 = complex13.asin();
      complex11.getArgument();
      complex9.toString();
      complex12.reciprocal();
      complex5.sin();
      complex10.sqrt();
      complex14.pow(complex12);
      complex13.subtract(3377.3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(0.11081436276435852);
      Complex complex4 = complex3.ZERO.add(complex1);
      complex1.add(0.0);
      Complex complex5 = complex1.sqrt();
      complex5.conjugate();
      complex0.pow(complex3);
      Complex complex6 = complex1.INF.subtract(complex4);
      complex1.sqrt();
      Complex complex7 = complex1.reciprocal();
      complex7.sqrt1z();
      complex6.sqrt1z();
      Complex.valueOf(0.0011519268318238574);
      complex5.cos();
      Complex complex8 = complex7.tan();
      complex7.NaN.multiply(complex6);
      int int0 = 0;
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cosh();
      complex2.equals(complex0);
      Complex complex3 = new Complex(0.0, 0.0);
      complex3.divide(0.0);
      complex1.add((-1135.31856157));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6400018930435181, 0.6400018930435181);
      Complex complex1 = complex0.multiply(532);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.tan();
      complex2.ZERO.hashCode();
      complex0.equals(complex2);
      Complex complex4 = complex3.tanh();
      complex4.sinh();
      Complex complex5 = complex4.ONE.asin();
      complex1.isInfinite();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.I.pow(0.0);
      Complex complex7 = complex6.ZERO.subtract(complex1);
      complex7.NaN.getArgument();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex5.createComplex(0.6400018930435181, (-2050.8852916779942));
      Complex complex10 = complex3.sqrt1z();
      complex10.INF.abs();
      complex6.getField();
      complex9.add(5.280427179595944E-8);
      complex6.cosh();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5139456987380981);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Object object0 = new Object();
      Complex complex3 = complex1.INF.subtract((double) 1335);
      Complex complex4 = complex3.I.exp();
      complex1.nthRoot(1335);
      complex0.equals(object0);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.multiply(complex2);
      complex6.abs();
      complex1.divide(complex5);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.multiply(0.5139456987380981);
      complex8.ONE.sinh();
      complex1.ZERO.cos();
      complex8.toString();
      Complex complex9 = complex1.add(0.5139456987380981);
      complex9.ZERO.pow(0.0);
      complex9.ONE.divide(1133.49);
      Complex complex10 = complex4.multiply(complex5);
      complex0.sin();
      complex3.getField();
      Complex.valueOf(0.5139456987380981, 5445.0707953);
      Complex.valueOf(1133.49);
      complex0.readResolve();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.sin();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.I.pow(complex1);
      complex4.conjugate();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.multiply(0);
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.createComplex((-1.0), (-1.0));
      Complex complex4 = complex3.ONE.add(0.0);
      Complex complex5 = complex4.NaN.multiply(complex1);
      Complex.valueOf(2.0);
      Complex complex6 = complex2.add(2.0);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex6.add(2.0);
      complex8.INF.sin();
      complex1.ONE.asin();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.NaN.divide(0.0);
      complex10.NaN.add(0.0);
      complex9.ONE.exp();
      Complex complex11 = complex9.pow(0.0);
      complex0.createComplex(0.0, 3156.91215);
      complex1.cos();
      complex7.cosh();
      complex2.log();
      complex11.getField();
      complex5.asin();
      complex1.subtract((-2775.0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-262.4321557668), 6.283185307179586);
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.NaN.getField();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.multiply(1);
      complex4.ONE.divide(complex5);
      complex4.getArgument();
      complex4.ZERO.getField();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex5.add(complex6);
      complex7.I.getField();
      complex1.getImaginary();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex4.INF.tanh();
      Complex.valueOf(1103.344);
      Complex complex10 = complex0.acos();
      complex3.sin();
      complex10.getArgument();
      complex7.I.subtract(complex2);
      Object object0 = new Object();
      complex7.equals(object0);
      Complex.valueOf((-20.0));
      complex0.sin();
      complex8.subtract(0.0);
      Complex complex11 = complex2.cos();
      Complex complex12 = complex8.tanh();
      complex12.readResolve();
      complex11.sinh();
      complex9.abs();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.acos();
      complex3.ONE.divide(complex2);
      Complex complex4 = Complex.valueOf(526.68, 526.68);
      complex4.ONE.add(0.0);
      complex4.cos();
      complex2.NaN.hashCode();
      complex0.INF.abs();
      Complex complex5 = complex0.asin();
      complex5.I.add(Double.POSITIVE_INFINITY);
      int int0 = 1;
      complex5.ONE.nthRoot(1);
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.I.negate();
      complex7.NaN.asin();
      Complex complex8 = complex7.ZERO.negate();
      try { 
        complex8.ONE.nthRoot((-3271));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,271
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract((-966.0248485));
      Complex complex2 = complex1.NaN.negate();
      complex2.INF.multiply(0);
      Complex complex3 = complex2.ONE.createComplex((-966.0248485), (-966.0248485));
      Complex complex4 = complex3.INF.divide(complex1);
      complex4.I.pow(complex1);
      Complex complex5 = Complex.valueOf(2.0, 0.0);
      Complex complex6 = complex5.ONE.conjugate();
      complex6.INF.cos();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.divide((-92.64));
      Complex complex9 = complex8.ONE.exp();
      complex1.getReal();
      complex0.log();
      Complex complex10 = Complex.valueOf(0.0, 1939.20726);
      complex9.I.cos();
      complex0.divide(complex10);
      complex9.cosh();
      complex7.toString();
      complex8.cos();
      complex8.readResolve();
      complex7.ONE.log();
      complex8.multiply(623);
      complex0.tan();
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-1604.2327715991));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.divide((-59.481494240371));
      complex1.NaN.getField();
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ONE.multiply(3015);
      complex0.NaN.getArgument();
      ComplexField complexField0 = complex0.getField();
      Complex complex6 = complex2.tan();
      complex6.NaN.cos();
      Complex complex7 = complex6.conjugate();
      complex7.INF.getField();
      Complex complex8 = complex0.subtract((-1604.2327715991));
      Complex complex9 = complex1.ZERO.subtract(complex5);
      complex9.ZERO.asin();
      Complex complex10 = complex8.NaN.negate();
      Complex complex11 = complex5.ZERO.tan();
      complex7.sinh();
      Complex complex12 = complex7.subtract(complex6);
      Complex complex13 = complex4.log();
      complex13.INF.negate();
      complex5.equals(complexField0);
      complex10.cos();
      complex12.sqrt1z();
      complex11.createComplex(3015, 2173.2292);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.add(complex1);
      Complex complex2 = complex0.ONE.multiply(2323.83323106);
      complex0.atan();
      complex2.INF.divide(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.acos();
      complex0.readResolve();
      complex2.getField();
      complex3.add(complex2);
      complex4.subtract(complex0);
      complex4.subtract(2323.83323106);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.INF.subtract(complex2);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.ONE.tanh();
      complex5.NaN.toString();
      complex1.multiply(0.0);
      complex5.isInfinite();
      complex3.nthRoot(1);
      Complex complex6 = complex1.cos();
      complex5.getArgument();
      complex3.pow(complex6);
      complex5.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, 1651.12958759);
      Complex complex2 = complex1.INF.divide(759.3669052);
      Complex complex3 = complex2.I.atan();
      complex3.I.sin();
      complex2.ZERO.tan();
      Complex complex4 = complex0.ZERO.divide(0.0);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex4.INF.sqrt1z();
      Complex complex7 = complex4.INF.createComplex(0.0, (-1026.4962693110228));
      Complex complex8 = complex4.NaN.sqrt1z();
      complex6.NaN.sqrt1z();
      complex8.INF.tan();
      complex8.NaN.divide(complex7);
      complex0.equals("");
      complex0.hashCode();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.NaN.asin();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ZERO.divide(2.0);
      complex4.INF.divide(complex0);
      complex0.getImaginary();
      complex1.equals(complex0);
      complex2.divide(6.283185307179586);
      complex2.add((-1135.31856157));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1624.44449));
      Complex complex1 = complex0.pow((-1624.44449));
      Complex complex2 = complex1.pow((-1624.44449));
      complex2.NaN.subtract((-1624.44449));
      complex2.isNaN();
      Complex complex3 = complex0.NaN.reciprocal();
      complex2.sqrt1z();
      Complex complex4 = complex0.NaN.cos();
      complex4.ZERO.readResolve();
      Complex.valueOf(0.0, (-1624.44449));
      complex2.NaN.acos();
      complex2.add(0.0);
      Complex complex5 = Complex.valueOf((-1624.44449));
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex5.ZERO.multiply(1190);
      complex7.I.cosh();
      complex1.subtract(0.0);
      Complex.valueOf((double) 1190, 0.40089738368988037);
      complex1.getImaginary();
      complex3.tanh();
      Complex complex8 = Complex.valueOf((-20.0), 0.0);
      complex6.conjugate();
      complex7.hashCode();
      Object object0 = complex8.readResolve();
      complex6.equals(object0);
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.isInfinite();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.ONE.readResolve();
      complex2.I.conjugate();
      complex0.createComplex(1, 659.3535);
      complex1.log();
      Complex complex4 = Complex.valueOf(1420.5445132768941, (-1045.88068434));
      complex4.NaN.acos();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.add((-226.0));
      Complex complex3 = complex2.createComplex((-375.2738141507175), (-226.0));
      complex0.isNaN();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex5.ZERO.acos();
      complex4.add((-226.0));
      Complex complex7 = complex1.pow((-226.0));
      complex7.ONE.acos();
      complex1.cos();
      Complex complex8 = complex1.pow(complex3);
      Complex complex9 = complex8.divide(0.0);
      complex9.ZERO.divide(complex1);
      complex8.readResolve();
      complex9.ONE.atan();
      complex7.acos();
      complex9.multiply(Double.NaN);
      Complex complex10 = complex0.sinh();
      complex10.conjugate();
      complex6.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.cosh();
      complex0.abs();
      Complex complex2 = Complex.valueOf((-7.08313012515209E-155));
      Complex complex3 = complex2.ONE.sin();
      complex0.divide(complex3);
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex0.multiply(complex2);
      complex0.getImaginary();
      Complex complex6 = complex1.sqrt();
      complex0.exp();
      Complex complex7 = Complex.valueOf(20.0);
      complex7.I.multiply(0.0);
      complex7.INF.atan();
      Complex complex8 = complex1.tanh();
      complex2.INF.sinh();
      complex5.acos();
      complex4.NaN.sqrt();
      Complex complex9 = complex4.createComplex(0.0, 0.0);
      Complex complex10 = Complex.valueOf(5.356668151937413E47);
      complex10.ONE.toString();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      complex11.NaN.add(complex6);
      complex0.toString();
      complex9.subtract(1401.0);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6400018930435181, 0.6400018930435181);
      Complex complex1 = complex0.multiply(532);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ONE.tan();
      complex2.ZERO.hashCode();
      complex0.equals(complex2);
      Complex complex4 = complex3.tanh();
      complex4.sinh();
      Complex complex5 = complex4.ONE.asin();
      complex1.isInfinite();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.I.pow(0.0);
      Complex complex7 = complex6.ZERO.subtract(complex1);
      complex7.NaN.getArgument();
      complex1.negate();
      complex5.createComplex(0.6400018930435181, (-2050.8852916779942));
      Complex complex8 = complex3.sqrt1z();
      complex8.INF.abs();
      Complex.valueOf((double) 532, 0.6400018930435181);
      complex1.readResolve();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.3951607353932444E-301);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.acos();
      complex3.ONE.getArgument();
      complex0.multiply(complex2);
      complex0.NaN.hashCode();
      Complex complex4 = complex2.sqrt();
      complex4.NaN.tan();
      complex4.ZERO.createComplex((-3556.9), 0.0);
      Complex complex5 = Complex.valueOf(733.0);
      complex2.INF.abs();
      complex1.subtract(complex5);
      complex4.sin();
      Complex complex6 = complex3.tan();
      complex6.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(733.0, (-4661.160589930761));
      complex2.hashCode();
      Complex complex7 = complex1.subtract(0.0);
      complex6.getReal();
      complex5.isNaN();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.NaN.subtract(2883.529188035);
      Complex complex5 = Complex.valueOf(0.0, 2883.529188035);
      Complex complex6 = complex4.tanh();
      complex6.NaN.log();
      complex3.nthRoot(1060);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.NaN.cos();
      Complex complex9 = complex0.pow(2883.529188035);
      complex9.ZERO.toString();
      complex2.subtract(2.0);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex10.sin();
      complex11.ONE.divide(complex7);
      complex5.sqrt1z();
      complex11.createComplex(1060, 2.0);
      complex8.getField();
      complex1.isNaN();
      complex7.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.abs();
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex4.sinh();
      complex5.I.abs();
      Complex complex6 = complex0.INF.tanh();
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex0.pow((-1.0));
      complex1.ZERO.getField();
      Complex complex9 = complex0.reciprocal();
      complex8.ZERO.conjugate();
      Complex.valueOf((-2126.712), (-3825.10304762));
      Complex complex10 = complex8.sinh();
      complex6.NaN.multiply((-2126.712));
      Complex complex11 = complex1.subtract(complex9);
      Complex complex12 = complex10.exp();
      complex12.ONE.subtract(complex11);
      complex6.INF.conjugate();
      complex8.INF.divide(complex3);
      complex12.I.readResolve();
      complex10.tanh();
      Complex complex13 = complex1.sqrt1z();
      complex13.NaN.sinh();
      complex7.getField();
      complex9.conjugate();
      complex13.getField();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 2122.7679);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.multiply(0.11081436276435852);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.conjugate();
      complex0.pow(complex3);
      complex1.INF.subtract(complex4);
      complex1.sqrt();
      complex2.conjugate();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.NaN.cosh();
      complex8.INF.sqrt1z();
      complex6.ONE.multiply(complex7);
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex6.multiply(complex9);
      complex10.pow((-2124.147));
      Complex.valueOf(2122.7679);
      complex2.sin();
      Complex complex11 = Complex.valueOf(0.0, (-2360.3));
      complex11.exp();
      Complex.valueOf(0.0, (-1100.2));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.sqrt();
      complex1.NaN.abs();
      Complex complex2 = complex0.INF.pow(1796.329778094107);
      complex0.toString();
      complex1.I.subtract(complex2);
      Complex complex3 = Complex.ZERO;
      complex2.ONE.multiply(complex3);
      complex1.subtract(Double.NaN);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(2.0);
      Complex complex2 = new Complex(774.37607);
      Complex complex3 = complex2.NaN.multiply(0.0);
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = Complex.valueOf((-664.6597114981746));
      Complex complex6 = complex4.ZERO.atan();
      complex0.equals(complex2);
      Complex complex7 = complex6.negate();
      complex0.NaN.subtract(complex4);
      Complex complex8 = complex4.INF.sqrt();
      Complex.valueOf(2.0, 0.0);
      complex6.getField();
      complex3.isInfinite();
      Complex complex9 = complex4.cosh();
      complex9.NaN.exp();
      Complex complex10 = complex0.sqrt1z();
      complex9.abs();
      Complex complex11 = complex7.tanh();
      Complex complex12 = complex8.NaN.acos();
      Complex complex13 = complex11.INF.reciprocal();
      complex13.ZERO.cos();
      complex1.cos();
      complex3.readResolve();
      complex8.sin();
      complex2.conjugate();
      complex4.atan();
      complex10.ONE.add(1.149548905166106);
      complex10.multiply(37);
      complex12.sinh();
      complex6.abs();
      complex5.createComplex(1.149548905166106, 1311.03);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-2548.252), (-2548.252));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-3072.33796));
      complex0.I.readResolve();
      Complex complex1 = complex0.log();
      complex0.isNaN();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.multiply((-525));
      Complex complex4 = Complex.ZERO;
      Complex.valueOf(3.0374839443564585E-159, (-3072.33796));
      complex3.NaN.multiply(complex4);
      Complex complex5 = complex3.I.multiply(complex0);
      Complex complex6 = complex5.ZERO.multiply((double) (-525));
      Complex complex7 = complex3.pow(complex1);
      Complex complex8 = complex7.INF.tanh();
      complex7.ZERO.toString();
      complex1.readResolve();
      Complex complex9 = complex2.createComplex(1.8995553996578656E216, 0.0);
      complex9.ZERO.conjugate();
      complex0.isInfinite();
      complex0.asin();
      complex6.divide(complex3);
      complex3.divide((-939.47778));
      complex2.toString();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex((-1763.6956186), (-1798.520589701013));
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex0.atan();
      complex3.ONE.getArgument();
      complex1.toString();
      Complex complex4 = complex1.subtract(2890.615);
      complex4.getArgument();
      Complex complex5 = complex2.sinh();
      complex5.abs();
      Complex complex6 = complex5.NaN.divide(1.8559980428862584E-230);
      Complex complex7 = complex5.multiply((-1716));
      complex3.getReal();
      complex7.sin();
      complex2.cosh();
      complex7.NaN.toString();
      Complex.valueOf((-2287.035), (-675.0000890028507));
      Complex complex8 = complex7.negate();
      complex8.ZERO.abs();
      complex0.multiply(4);
      Complex complex9 = Complex.valueOf((-6.1370690793508674E296), (-1798.520589701013));
      complex9.sin();
      Complex complex10 = complex6.pow(complex9);
      complex10.createComplex((-997.69), 2030.65201223);
      complex9.readResolve();
      complex6.readResolve();
      complex10.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(complex0);
      complex2.abs();
      Complex complex3 = complex0.multiply(complex2);
      complex2.I.sqrt1z();
      complex3.I.exp();
      complex2.getReal();
      complex1.negate();
      Complex complex4 = complex0.reciprocal();
      complex4.NaN.hashCode();
      complex1.isInfinite();
      complex0.pow(complex4);
      complex4.sinh();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1038.003731));
      Complex complex2 = complex1.NaN.cosh();
      complex2.subtract((-1038.003731));
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.atan();
      complex4.NaN.getArgument();
      complex2.abs();
      complex1.divide(complex0);
      Complex complex5 = complex3.sqrt1z();
      complex0.sqrt();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      complex0.NaN.createComplex(1137.0, 1156.35780356);
      Complex complex1 = complex0.multiply(2191);
      Complex complex2 = complex0.INF.subtract(0.0);
      Complex complex3 = complex1.ZERO.subtract((double) 2191);
      complex3.INF.add(0.0);
      complex1.abs();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.INF.tanh();
      complex4.multiply(9.168889933128375E-10);
      complex3.getImaginary();
      Complex complex7 = complex2.tanh();
      complex7.toString();
      complex1.ZERO.asin();
      complex6.multiply(1559.67);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.INF.hashCode();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = (-298.4);
      Complex complex0 = Complex.valueOf((-298.4));
      complex0.ONE.cosh();
      Complex complex1 = Complex.valueOf((-298.4));
      complex0.I.readResolve();
      complex1.I.multiply((-2210.677));
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.I.log();
      complex3.asin();
      try { 
        complex0.nthRoot((-116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -116
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.cosh();
      Complex.valueOf((-1054.822871));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.conjugate();
      complex1.getField();
      complex2.isNaN();
      Complex complex3 = Complex.valueOf((-256.154356));
      complex3.INF.tan();
      complex0.INF.exp();
      Complex complex4 = complex3.I.add(4182.3566186);
      complex4.I.tan();
      complex3.pow(complex2);
      complex1.getImaginary();
      complex1.sqrt();
      complex2.log();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.ONE.cos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.add(complex1);
      complex0.ZERO.hashCode();
      complex0.getImaginary();
      complex2.subtract(complex3);
      complex1.acos();
      complex1.sinh();
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      complex4.NaN.add(1.0);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.createComplex((-4.8465821804075345E-8), (-1031.24148));
      complex2.createComplex((-1031.24148), (-1031.24148));
      Complex complex3 = complex2.INF.sin();
      complex0.INF.multiply((-4.8465821804075345E-8));
      complex1.readResolve();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.add((-1031.24148));
      complex5.ONE.getArgument();
      complex5.ONE.tan();
      complex3.getField();
      complex3.toString();
      complex3.ONE.divide((-4.8465821804075345E-8));
      complex0.reciprocal();
      complex4.sqrt1z();
      complex2.sqrt1z();
      Complex.valueOf((-4.8465821804075345E-8));
      Complex complex6 = complex4.NaN.cos();
      complex6.ZERO.tan();
      int int0 = 0;
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-564.28963));
      Complex complex1 = complex0.I.pow((-491.4));
      Complex complex2 = complex1.I.sinh();
      complex1.INF.hashCode();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.ZERO.divide(20.0);
      Complex complex5 = complex0.multiply(0.0);
      complex5.NaN.readResolve();
      complex5.ZERO.readResolve();
      complex3.abs();
      complex5.getReal();
      complex3.getImaginary();
      Complex complex6 = complex2.log();
      Complex complex7 = complex1.sqrt();
      complex7.nthRoot(7);
      Complex complex8 = complex7.pow(20.0);
      complex8.NaN.tan();
      complex2.INF.pow(complex6);
      Complex complex9 = complex3.divide((-564.28963));
      complex9.readResolve();
      complex6.toString();
      complex6.sin();
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.divide(complex1);
      complex2.I.tan();
      Complex.valueOf((-595.0413613));
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5139456987380981);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Object object0 = new Object();
      Complex complex3 = complex1.INF.subtract((double) 1335);
      Complex complex4 = complex3.I.exp();
      List<Complex> list0 = complex1.nthRoot(1335);
      assertEquals(1335, list0.size());
      
      complex0.equals(object0);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.multiply(complex2);
      complex6.abs();
      assertEquals(0.5139456987380981, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex7 = complex1.divide(complex5);
      assertEquals(1.3130352854993315, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.multiply(0.5139456987380981);
      complex9.ONE.sinh();
      complex1.ZERO.cos();
      String string0 = complex9.toString();
      assertEquals("(0.6703417319403137, -0.0)", string0);
      
      Complex complex10 = complex1.add(0.5139456987380981);
      complex10.ZERO.pow(0.0);
      Complex complex11 = complex10.ONE.divide(1133.49);
      Complex complex12 = complex4.multiply(complex5);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals((-0.6408593844360362), complex12.getReal(), 0.01);
      
      Complex complex13 = complex0.sin();
      assertEquals(0.4916170247519361, complex13.getReal(), 0.01);
      
      complex3.getField();
      complex3.getField();
      complex0.add((double) 1335);
      Complex complex14 = complex9.cosh();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex11.sinh();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(8.822309857166804E-4, complex11.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cosh();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.subtract(225.599);
      assertEquals((-225.599), complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.cosh();
      complex2.ZERO.sqrt();
      Complex complex3 = Complex.valueOf(956.7032, 0.0);
      complex3.NaN.getField();
      complex3.toString();
      complex0.ZERO.subtract(complex3);
      double double0 = (-2050.948);
      complex0.ZERO.divide(0.0);
      complex0.NaN.pow((-2050.948));
      complex0.conjugate();
      Complex complex4 = complex0.acos();
      complex4.ONE.createComplex(0.0, 0.0);
      int int0 = (-627);
      try { 
        complex0.nthRoot((-627));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -627
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.ONE.getField();
      Complex complex3 = complex0.sqrt1z();
      complex0.readResolve();
      complex0.getArgument();
      Complex complex4 = complex1.multiply(complex0);
      complex2.getImaginary();
      Complex complex5 = complex3.pow((-1572.025));
      assertEquals(2.43590604496799E-237, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      complex4.cos();
      Complex complex6 = complex0.sin();
      assertEquals(1.1752011936438014, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.add(complex2);
      assertTrue(complex7.isInfinite());
      assertTrue(complex7.equals((Object)complex2));
      
      Complex complex8 = complex0.multiply(0);
      assertFalse(complex8.equals((Object)complex0));
      assertEquals(0.0, complex8.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2873.9);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.ZERO.conjugate();
      complex0.abs();
      String string0 = complex3.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex4 = complex3.NaN.log();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex5.ONE.tan();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex6.getReal(), 0.01);
      
      Complex complex7 = complex3.atan();
      Complex complex8 = complex2.add(2012.05);
      assertTrue(complex8.isInfinite());
      
      complex4.getReal();
      complex4.cos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex7));
      assertEquals(0.6109642518371401, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-2297));
      Complex complex2 = complex0.divide(661.483);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.ONE.divide(1198.7155375214752);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(8.342262769594615E-4, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.add(complex2);
      Complex complex6 = complex5.INF.subtract(complex0);
      Complex complex7 = complex5.multiply((double) (-2297));
      assertSame(complex7, complex1);
      
      Complex complex8 = complex0.divide(complex6);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      
      Complex complex9 = complex3.tan();
      assertNotSame(complex9, complex6);
      assertSame(complex9, complex8);
      assertTrue(complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
  }
}
