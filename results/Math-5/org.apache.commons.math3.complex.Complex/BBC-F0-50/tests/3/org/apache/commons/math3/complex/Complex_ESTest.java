/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:46:32 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.log();
      Complex complex2 = new Complex(5.333371443528904E204, (-1.5038413653121357E55));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1412.9356089, 20.0);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.acos();
      complex3.NaN.add(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex(2.0, 18.648293941559896);
      Complex complex6 = new Complex(1412.9356089);
      complex6.negate();
      Complex complex7 = complex6.add(complex2);
      complex4.nthRoot(2211);
      complex7.asin();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract(90.87101418082);
      complex0.I.getArgument();
      Complex complex2 = complex0.conjugate();
      complex0.abs();
      complex0.toString();
      Complex complex3 = complex0.tanh();
      complex3.I.tan();
      complex1.ZERO.readResolve();
      Complex complex4 = Complex.valueOf(9.97728609663656E32, 9.97728609663656E32);
      Complex complex5 = complex3.INF.sin();
      complex5.ONE.exp();
      complex4.ZERO.cos();
      complex0.ONE.sin();
      complex3.subtract(90.87101418082);
      complex1.toString();
      complex4.asin();
      Complex complex6 = complex2.cosh();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-375.795472989899), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.nthRoot(167);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex.valueOf((-375.795472989899), Double.POSITIVE_INFINITY);
      Complex.valueOf((-375.795472989899), (-4309.07917513));
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.log();
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-375.795472989899), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tan();
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(92.0, (-20.0));
      complex0.tan();
      complex0.nthRoot(167);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2.5263051986694336);
      Complex complex1 = complex0.sin();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      complex1.NaN.readResolve();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf((-375.795472989899), Double.POSITIVE_INFINITY);
      complex3.tan();
      complex3.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-375.795472989899), Double.POSITIVE_INFINITY);
      complex2.INF.sqrt1z();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN, 1498.022237899);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.acos();
      complex3.tan();
      complex0.nthRoot(1049);
      complex0.abs();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
      Complex complex1 = Complex.valueOf((-375.795472989899), Double.POSITIVE_INFINITY);
      complex0.acos();
      complex0.acos();
      Complex complex2 = new Complex(114.24, Double.POSITIVE_INFINITY);
      Complex.valueOf((-375.795472989899), 2748.6814);
      Complex complex3 = Complex.ONE;
      complex3.subtract((-375.795472989899));
      Complex complex4 = Complex.valueOf(1.0111373751683202E-4);
      complex4.atan();
      Complex complex5 = Complex.I;
      complex5.divide(1.0);
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex((-375.795472989899), 1.0);
      complex8.tan();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.NaN.sinh();
      complex2.ONE.toString();
      Complex complex3 = complex1.INF.createComplex(1087.7607803197789, (-4751.781114913));
      complex2.ZERO.pow(5441381.782282737);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.log();
      complex4.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.sinh();
      complex6.ZERO.sqrt1z();
      Complex complex7 = complex5.NaN.tanh();
      complex7.ZERO.acos();
      Complex complex8 = complex0.pow(complex4);
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex9.I.pow(complex8);
      complex10.I.pow(complex3);
      complex9.sqrt1z();
      complex9.cosh();
      Complex complex11 = Complex.valueOf(5441381.782282737);
      complex10.add(complex11);
      Complex complex12 = complex0.log();
      complex12.log();
      complex2.add(complex9);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(1698.0, 3.2988908516009827E-9);
      Complex complex2 = Complex.ONE;
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1957.9497825724, 1957.9497825724);
      complex1.subtract((-3436.3023));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex4.acos();
      Complex complex7 = new Complex((-3436.3023), (-8.204903560604627E-9));
      complex6.pow(complex7);
      complex3.negate();
      complex5.ZERO.sin();
      complex4.subtract(341.03634099317475);
      complex5.atan();
      complex6.divide((-531.5332577464619));
      Complex complex8 = Complex.ONE;
      try { 
        complex8.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.tan();
      complex3.acos();
      Complex complex5 = complex0.acos();
      complex4.acos();
      Complex complex6 = new Complex((-705.96), (-2103.9543490267));
      complex0.negate();
      complex6.subtract((-375.795472989899));
      complex4.atan();
      complex2.divide((-315.3718270436));
      complex1.divide(complex3);
      complex5.sinh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.atan();
      complex0.divide((-301.0));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex3.tan();
      complex4.hashCode();
      Complex.valueOf((-301.0));
      Complex complex6 = complex2.tan();
      complex6.NaN.multiply(1209);
      complex4.toString();
      complex0.sin();
      Complex complex7 = Complex.ONE;
      complex7.abs();
      complex5.isNaN();
      Complex complex8 = complex5.sqrt1z();
      complex8.toString();
      complex4.divide(1.0);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex1.tanh();
      complex2.toString();
      complex0.negate();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.tan();
      complex3.acos();
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex((-705.96), (-2103.9543490267));
      complex0.negate();
      complex7.I.sin();
      complex7.subtract((-375.795472989899));
      Complex complex8 = complex4.atan();
      complex2.divide((-315.3718270436));
      Complex complex9 = complex1.divide(complex3);
      complex5.sinh();
      complex9.tan();
      complex1.hashCode();
      Complex.valueOf(1234.1925706534546);
      complex8.getField();
      complex4.sqrt();
      complex9.cos();
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.subtract(complex2);
      complex0.subtract(complex9);
      complex12.toString();
      complex10.multiply(1234.1925706534546);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-2103.9543490267), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.subtract(6.516115189736396E126);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.tan();
      complex4.acos();
      complex3.acos();
      Complex complex5 = new Complex((-2103.9543490267), (-3436.3023));
      Complex complex6 = new Complex(827.629, (-2103.9543490267));
      complex3.isInfinite();
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex(1618.998053813, Double.NaN);
      complex0.negate();
      complex1.subtract(0.0);
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.valueOf((-20.0));
      complex5.divide((-419.47304328756));
      Complex complex6 = complex3.divide(complex4);
      Complex complex7 = Complex.valueOf((-20.0), 167.00447);
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex2.tan();
      Complex complex10 = Complex.valueOf(1618.998053813);
      Complex complex11 = Complex.I;
      complex0.sqrt();
      complex8.sqrt();
      complex2.subtract(complex3);
      complex6.subtract(complex2);
      complex9.toString();
      complex10.multiply(1.177137851715088);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
      Complex complex1 = new Complex((-2235.19), (-2235.19));
      complex1.getArgument();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.multiply((-2235.19));
      complex3.sin();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex1.sin();
      complex5.ONE.createComplex((-2235.19), 6.283185307179586);
      Complex complex6 = Complex.INF;
      complex6.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.exp();
      complex3.INF.readResolve();
      Complex complex4 = complex2.ONE.atan();
      complex0.tanh();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.acos();
      Complex complex7 = new Complex(2711.952660433377, 2711.952660433377);
      Complex complex8 = complex3.negate();
      Complex complex9 = complex2.INF.subtract(1.6294423071831747E-297);
      Complex complex10 = complex1.atan();
      Complex.valueOf(2711.952660433377, Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.divide(complex8);
      Complex complex12 = complex5.sinh();
      complex11.tan();
      Complex complex13 = Complex.valueOf((-301.0));
      complex13.getField();
      complex6.sqrt();
      complex12.cos();
      Complex complex14 = complex4.sqrt();
      complex2.subtract(complex3);
      complex5.subtract(complex9);
      complex9.toString();
      complex14.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(1401.0577718002594, 1401.0577718002594);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.valueOf(1401.0577718002594, 1401.0577718002594);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sqrt1z();
      complex0.abs();
      complex2.subtract(complex3);
      Complex complex4 = new Complex(1401.0577718002594, (-785.2416793413));
      complex4.toString();
      Complex complex5 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.asin();
      complex0.NaN.readResolve();
      complex0.multiply(0.7853983183614708);
      complex0.INF.sqrt();
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.tan();
      complex3.toString();
      Complex complex4 = Complex.I;
      complex2.sin();
      Complex complex5 = Complex.NaN;
      complex5.sin();
      Complex complex6 = Complex.I;
      complex4.abs();
      complex6.getImaginary();
      complex6.exp();
      complex6.sinh();
      Complex.valueOf(6.283185307179586, (-3551.54512486));
      complex5.pow(111.5661127038576);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.INF;
      Object object0 = complex8.readResolve();
      complex8.equals(object0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      complex1.INF.atan();
      Complex complex2 = complex0.negate();
      complex0.tan();
      Complex complex3 = complex2.acos();
      complex0.acos();
      Complex complex4 = new Complex((-2103.9543490267), (-3436.3023));
      Complex complex5 = new Complex(827.629, 4387.916670406);
      complex3.isInfinite();
      complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.exp();
      complex3.INF.readResolve();
      complex2.ONE.atan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.acos();
      Complex complex7 = new Complex(2711.952660433377, 2711.952660433377);
      complex3.negate();
      complex2.INF.subtract(1.6294423071831747E-297);
      Complex complex8 = Complex.I;
      complex4.hashCode();
      Complex.valueOf(2711.952660433377);
      complex4.pow(complex5);
      Complex complex9 = complex8.tan();
      complex9.toString();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.sin();
      Complex complex12 = complex5.sin();
      Complex complex13 = Complex.I;
      complex12.abs();
      complex6.getImaginary();
      complex9.exp();
      Complex complex14 = complex5.sinh();
      Complex.valueOf(1.0232274785475506, 2711.952660433377);
      complex14.pow(2711.952660433377);
      Complex complex15 = Complex.ZERO;
      complex11.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1091.64), 1401.0577718002594);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract((-1003.7287987));
      complex2.divide(1401.0577718002594);
      complex2.asin();
      Complex complex3 = Complex.valueOf((-1091.64));
      complex1.cos();
      Complex complex4 = Complex.I;
      complex3.subtract(complex2);
      complex3.I.exp();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      complex1.INF.atan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      complex2.acos();
      complex0.acos();
      Complex complex4 = new Complex((-2103.9543490267), (-3436.3023));
      Complex complex5 = Complex.I;
      Complex.valueOf((-3436.3023));
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex1.subtract(complex3);
      Complex complex9 = complex6.cosh();
      complex9.multiply(0.24551619608802294);
      complex8.exp();
      Complex complex10 = complex5.add(complex7);
      complex2.pow(898.13075);
      complex4.abs();
      complex10.readResolve();
      complex6.sqrt();
      Complex.valueOf(100.299306825, 100.299306825);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2103.9543490267));
      Complex complex1 = complex0.subtract(298.7638062);
      Complex complex2 = new Complex((-2103.9543490267));
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.NaN;
      complex0.asin();
      complex6.multiply((-1890.4));
      complex5.asin();
      Complex complex8 = Complex.valueOf((-1890.4));
      Complex complex9 = complex8.negate();
      Complex complex10 = new Complex((-2103.9543490267));
      Complex complex11 = complex10.reciprocal();
      complex9.reciprocal();
      complex3.conjugate();
      Complex complex12 = complex5.acos();
      Complex complex13 = new Complex(1443.6172090369832);
      Complex complex14 = complex7.cos();
      complex2.sinh();
      Complex complex15 = Complex.NaN;
      complex9.toString();
      complex11.negate();
      complex14.createComplex(898.13075, 898.13075);
      complex1.readResolve();
      complex7.createComplex((-2103.9543490267), Double.NaN);
      complex15.sqrt1z();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1350.71279625053, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.subtract(1350.71279625053);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.tan();
      complex3.ONE.acos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.NaN;
      complex5.asin();
      Complex complex6 = complex2.multiply(0.0);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex1.negate();
      complex3.reciprocal();
      Complex complex9 = complex7.reciprocal();
      complex6.conjugate();
      complex5.acos();
      Complex complex10 = new Complex(0.0);
      Complex complex11 = complex10.cos();
      complex9.sinh();
      Complex complex12 = Complex.NaN;
      complex12.toString();
      complex8.negate();
      complex11.createComplex(2329.0785, Double.NaN);
      complex2.readResolve();
      Complex complex13 = complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex12.sqrt1z();
      complex13.sqrt();
      complex0.add((-1320.872755));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(380);
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex1.log();
      complex2.tanh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.subtract(complex1);
      complex1.toString();
      complex4.negate();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex0.multiply(complex4);
      complex1.toString();
      complex3.multiply(380);
      complex4.sin();
      Complex complex6 = complex1.add(complex4);
      complex6.sin();
      complex0.multiply(complex4);
      complex1.sqrt1z();
      Complex complex7 = new Complex((-2002.873707160664));
      complex5.add(complex0);
      Complex complex8 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(1401.0577718002594, 1401.0577718002594);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.reciprocal();
      complex2.sqrt1z();
      complex0.abs();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.tan();
      complex3.acos();
      Complex complex5 = complex0.acos();
      complex4.acos();
      Complex complex6 = new Complex((-705.96), (-2103.9543490267));
      complex0.negate();
      complex6.subtract((-375.795472989899));
      Complex complex7 = complex4.atan();
      Complex complex8 = complex2.divide((-315.3718270436));
      Complex complex9 = complex1.divide(complex3);
      complex5.sinh();
      Complex complex10 = complex9.tan();
      complex1.hashCode();
      Complex complex11 = Complex.valueOf(1234.1925706534546);
      complex7.getField();
      Complex complex12 = complex4.sqrt();
      complex9.cos();
      complex1.sqrt();
      Complex complex13 = complex10.subtract(complex12);
      complex10.subtract(complex8);
      complex13.toString();
      complex11.multiply(1.6294423071831747E-297);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.nthRoot(380);
      complex0.add(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex((-3.326791455362767E-8), (-4011.829659));
      complex0.atan();
      Complex complex4 = complex3.divide(1869.357);
      Complex complex5 = complex4.divide(complex1);
      complex1.sinh();
      complex3.tan();
      complex2.hashCode();
      Complex complex6 = Complex.valueOf((double) 380);
      complex0.tan();
      complex1.toString();
      complex5.sin();
      complex0.sin();
      complex6.abs();
      complex4.getImaginary();
      Complex complex7 = complex5.exp();
      complex7.multiply(complex4);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1369.258537088846, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.subtract(1369.258537088846);
      Complex complex2 = complex1.I.negate();
      complex1.I.tan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.subtract(complex1);
      complex4.toString();
      Complex complex6 = complex0.negate();
      Complex.valueOf(0.4190443754196167, 0.0);
      Complex complex7 = complex6.multiply(complex1);
      complex5.toString();
      complex0.multiply(0);
      complex4.sin();
      complex4.add(complex2);
      Complex complex8 = complex7.sin();
      complex6.multiply(complex8);
      complex2.sqrt1z();
      Complex complex9 = new Complex((-1.1752011936438014));
      complex0.add(complex5);
      Complex complex10 = complex2.conjugate();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.exp();
      complex3.INF.readResolve();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.acos();
      Complex complex8 = new Complex(2711.952660433377, 2711.952660433377);
      Complex complex9 = complex3.negate();
      Complex complex10 = complex2.INF.subtract(1.6294423071831747E-297);
      Complex complex11 = complex1.atan();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.divide(complex9);
      Complex complex13 = complex6.sinh();
      complex12.tan();
      complex13.hashCode();
      Complex complex14 = Complex.valueOf((-301.0));
      complex14.getField();
      complex7.sqrt();
      complex13.cos();
      Complex complex15 = complex12.sqrt();
      complex15.subtract(complex14);
      complex5.subtract(complex4);
      complex1.toString();
      complex10.multiply(2711.952660433377);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      double double0 = 898.13075;
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      complex1.INF.atan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex((-2103.9543490267), (-3436.3023));
      Complex complex7 = Complex.I;
      complex7.negate();
      Complex complex8 = complex0.atan();
      complex4.divide((-2103.9543490267));
      Complex complex9 = complex3.divide(complex4);
      complex8.sinh();
      complex8.tan();
      Complex complex10 = complex5.conjugate();
      complex8.subtract(complex9);
      complex0.cosh();
      double double1 = 1.4609230212974023;
      Complex complex11 = Complex.valueOf(1.4609230212974023);
      complex11.multiply(898.13075);
      Complex complex12 = Complex.I;
      complex12.exp();
      try { 
        complex10.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-157.788652309399));
      Complex complex1 = complex0.tanh();
      complex1.getArgument();
      complex0.readResolve();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      Complex.valueOf((-157.788652309399));
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex1.subtract(complex4);
      complex6.cosh();
      complex4.multiply(2.7156286239624023);
      Complex complex7 = complex5.exp();
      complex4.add(complex6);
      Complex complex8 = complex3.pow(100.299306825);
      complex3.abs();
      complex7.readResolve();
      complex8.sqrt();
      Complex.valueOf(100.299306825, 2.7156286239624023);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.nthRoot(380);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.log();
      complex2.tanh();
      Complex complex3 = complex2.INF.subtract(complex0);
      complex2.toString();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.valueOf((double) 380, 0.0);
      Complex complex6 = complex1.NaN.multiply(complex5);
      complex4.reciprocal();
      Complex complex7 = complex4.reciprocal();
      complex4.conjugate();
      Complex complex8 = complex6.acos();
      complex7.cos();
      complex5.sinh();
      complex2.toString();
      Complex complex9 = complex0.negate();
      complex3.createComplex(5.74952254077566E-19, 0.0);
      complex9.readResolve();
      complex8.createComplex(0.0, (-1013.712779840967));
      complex0.sqrt1z();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      complex1.INF.atan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex((-2103.9543490267), (-3436.3023));
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.negate();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex4.divide((-2103.9543490267));
      Complex complex11 = complex3.divide(complex4);
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex9.tan();
      Complex complex14 = Complex.I;
      complex14.hashCode();
      Complex.valueOf(330.0);
      Complex complex15 = complex10.pow(complex11);
      complex8.tan();
      complex12.toString();
      Complex complex16 = Complex.I;
      complex16.sin();
      complex13.sin();
      Complex complex17 = Complex.I;
      complex17.abs();
      complex7.getImaginary();
      Complex complex18 = complex15.exp();
      complex18.sinh();
      Complex.valueOf(2725.4403718, 898.13075);
      complex5.pow((-1411.7710642));
      Complex complex19 = Complex.ZERO;
      complex3.equals(complex17);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      complex1.INF.atan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.acos();
      complex0.acos();
      Complex complex5 = new Complex((-2103.9543490267), (-3436.3023));
      Complex complex6 = Complex.I;
      complex6.negate();
      Complex complex7 = complex0.atan();
      complex7.reciprocal();
      Complex complex8 = Complex.valueOf((-2103.9543490267));
      Complex complex9 = complex8.sqrt();
      complex0.conjugate();
      Complex complex10 = complex3.subtract(complex9);
      Complex complex11 = complex4.cosh();
      complex1.multiply((-3436.3023));
      Complex complex12 = complex11.exp();
      Complex complex13 = Complex.I;
      complex13.add(complex12);
      Complex complex14 = Complex.I;
      complex14.pow((-2103.9543490267));
      Complex complex15 = Complex.ZERO;
      complex15.abs();
      complex5.readResolve();
      complex10.sqrt();
      Complex.valueOf((-1053.5), 409.9547459);
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(0.5562618970870972, 0.5562618970870972);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.ONE.atan();
      complex4.acos();
      Complex complex5 = new Complex(8.428419960456083, 1704.0804372088214);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex0.divide(1.167336538775361);
      Complex complex9 = new Complex((-2147.737532593), (-301.0));
      complex2.divide(complex9);
      Complex complex10 = complex8.sinh();
      complex7.tan();
      complex3.hashCode();
      Complex complex11 = Complex.valueOf((-2147.737532593));
      complex9.pow(complex7);
      complex11.tan();
      complex6.toString();
      Complex complex12 = complex10.sin();
      complex12.sin();
      complex12.abs();
      complex12.getImaginary();
      Complex complex13 = complex5.exp();
      complex13.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(459.00291355);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.I.subtract(complex0);
      Complex complex4 = complex0.multiply(1455);
      Complex.valueOf(1.0, 0.6823468208312988);
      complex3.subtract(complex0);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex3.sqrt1z();
      complex5.acos();
      complex3.hashCode();
      complex4.equals(complex2);
      complex2.exp();
      complex1.cosh();
      Complex complex7 = new Complex(459.00291355);
      complex0.multiply(complex6);
      Complex.valueOf((double) (-1916), (double) 1455);
      complex3.isNaN();
      complex6.sqrt1z();
      complex7.toString();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.exp();
      complex3.INF.readResolve();
      Complex complex4 = complex2.ONE.atan();
      complex0.tanh();
      Complex complex5 = complex1.acos();
      complex5.acos();
      Complex complex6 = new Complex(2711.952660433377, 2711.952660433377);
      Complex complex7 = complex3.negate();
      complex2.INF.subtract(1.6294423071831747E-297);
      Complex complex8 = Complex.valueOf(0.6188545963018726, 3424.0);
      Complex complex9 = complex7.multiply(complex0);
      complex9.toString();
      complex3.multiply(0);
      Complex complex10 = complex9.sin();
      Complex complex11 = Complex.valueOf(3424.0);
      complex0.getImaginary();
      Complex complex12 = complex10.acos();
      complex4.getField();
      complex11.nthRoot(4995);
      complex0.subtract(complex8);
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY, 2.576131820678711);
      complex13.acos();
      Complex.valueOf(0.0, (double) 4995);
      complex12.readResolve();
      complex13.sin();
      complex9.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.tan();
      Complex complex1 = Complex.ZERO;
      complex1.abs();
      Complex.valueOf((-959.32322), 0.0);
      Complex complex2 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.5562618970870972, 0.5562618970870972);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.multiply((-1916));
      Complex complex4 = Complex.valueOf((-338.98), (-338.98));
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = complex0.sqrt();
      complex2.sqrt1z();
      Complex complex8 = complex4.log();
      complex6.acos();
      complex6.atan();
      complex7.hashCode();
      complex3.equals(complex5);
      Complex complex9 = complex1.exp();
      complex6.cosh();
      Complex complex10 = Complex.I;
      complex10.tan();
      complex9.multiply(complex4);
      Complex complex11 = Complex.valueOf(6.283185307179586, 0.5562618970870972);
      complex11.isNaN();
      complex8.sqrt1z();
      Complex complex12 = Complex.ZERO;
      complex12.toString();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.5562618970870972, 0.5562618970870972);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.INF.cos();
      complex0.sqrt1z();
      Complex complex2 = complex0.ONE.atan();
      complex2.INF.sqrt();
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex0.multiply((-647.0));
      Complex complex5 = complex1.asin();
      Complex complex6 = complex4.I.negate();
      Complex complex7 = complex6.ZERO.reciprocal();
      complex7.I.reciprocal();
      Complex complex8 = complex5.NaN.conjugate();
      complex8.INF.acos();
      complex8.ZERO.cos();
      Complex complex9 = complex0.sinh();
      complex9.toString();
      Complex complex10 = complex4.negate();
      complex10.ONE.createComplex(Double.NaN, 1872.0);
      complex0.readResolve();
      complex3.createComplex(0.5562618970870972, 0.5562618970870972);
      complex1.sqrt1z();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(1544.186591630096, 0.0);
      Complex complex1 = complex0.acos();
      complex0.INF.subtract((-86.28));
      complex1.conjugate();
      Complex complex2 = Complex.valueOf((-380.7622298));
      complex2.add(complex0);
      complex2.readResolve();
      // Undeclared exception!
      complex1.ONE.nthRoot(2145951982);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(898.13075, (-2103.9543490267));
      Complex complex1 = complex0.subtract((-3436.3023));
      complex1.INF.atan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex((-2103.9543490267), (-3436.3023));
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.negate();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex4.divide((-2103.9543490267));
      Complex complex11 = complex3.divide(complex4);
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex9.tan();
      Complex complex14 = Complex.I;
      complex14.hashCode();
      Complex.valueOf(330.0);
      Complex complex15 = complex10.pow(complex11);
      complex8.tan();
      complex12.toString();
      Complex complex16 = Complex.I;
      complex16.sin();
      complex13.sin();
      Complex complex17 = Complex.I;
      complex17.abs();
      complex7.getImaginary();
      Complex complex18 = complex15.exp();
      complex18.sinh();
      Complex.valueOf(2725.4403718, 898.13075);
      complex5.pow((-1411.7710642));
      Complex complex19 = Complex.ZERO;
      complex19.isNaN();
      Complex complex20 = Complex.NaN;
      complex3.equals(complex20);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-4009.77057300911));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.cos();
      complex0.NaN.negate();
      complex0.getImaginary();
      Complex complex3 = complex1.divide((-4009.77057300911));
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.multiply((-330));
      Complex complex6 = complex3.sqrt();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.log();
      complex7.tan();
      Complex complex9 = Complex.I;
      Complex complex10 = complex2.subtract(complex1);
      complex7.readResolve();
      Complex complex11 = new Complex((-5062.33095394));
      complex11.divide(complex1);
      complex4.pow((-1558.60851));
      complex4.toString();
      complex5.asin();
      complex6.sinh();
      complex8.add(complex10);
      Complex complex12 = Complex.valueOf(0.6553317308425903);
      complex12.multiply((-2693.794));
      complex5.sqrt1z();
      complex1.abs();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1401.0577718002594, 1401.0577718002594);
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.I.nthRoot(1);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex1.I.divide(0.0);
      complex3.tan();
      complex2.ONE.tan();
      complex1.ZERO.atan();
      Complex complex4 = Complex.valueOf(1401.0577718002594, 1401.0577718002594);
      complex4.INF.getField();
      complex0.getArgument();
      complex1.getImaginary();
      complex1.sinh();
      complex0.divide(Double.NaN);
      Complex.valueOf(Double.NaN, 1135.62515);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = (Complex)complex3.INF.readResolve();
      complex2.ONE.atan();
      complex0.tanh();
      Complex complex5 = complex1.acos();
      complex5.acos();
      Complex complex6 = new Complex(2711.952660433377, 2711.952660433377);
      Complex complex7 = complex3.negate();
      complex2.INF.subtract(1.6294423071831747E-297);
      Complex complex8 = complex1.atan();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.divide(complex7);
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex9.tan();
      complex10.hashCode();
      Complex.valueOf(2711.952660433377);
      Complex complex12 = complex4.pow(complex2);
      Complex complex13 = complex0.tan();
      complex8.toString();
      complex11.sin();
      Complex complex14 = complex12.sin();
      complex11.abs();
      complex14.getImaginary();
      complex1.exp();
      Complex.valueOf((-301.0), 1297.2187331);
      complex14.pow(Double.POSITIVE_INFINITY);
      Complex complex15 = Complex.INF;
      complex15.isNaN();
      complex13.nthRoot(1137);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-4009.77057300911));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.NaN.negate();
      complex0.getImaginary();
      Complex complex4 = complex1.divide((-4009.77057300911));
      complex2.INF.add(complex3);
      Complex complex5 = complex4.sin();
      complex2.multiply(complex0);
      complex2.add(complex5);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex0.tanh();
      complex1.getArgument();
      complex5.readResolve();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.ONE.sqrt();
      Complex complex8 = complex1.ONE.conjugate();
      complex8.ZERO.subtract(complex3);
      complex7.NaN.cosh();
      Complex complex9 = complex1.multiply(1430.0);
      Complex complex10 = complex6.exp();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.ZERO.multiply((-330));
      complex4.sqrt();
      complex3.log();
      Complex complex13 = complex5.tan();
      Complex complex14 = Complex.I;
      Complex complex15 = complex13.subtract(complex14);
      complex15.NaN.readResolve();
      complex10.I.divide(complex12);
      complex11.pow(338.61947493450305);
      complex13.toString();
      complex13.asin();
      complex11.sinh();
      Complex complex16 = complex9.add(complex4);
      complex10.multiply((double) (-330));
      complex15.sqrt1z();
      complex16.abs();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(1401.0577718002594, 1401.0577718002594);
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.I.nthRoot(1);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.multiply((-20.0));
      complex1.exp();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.multiply(1256);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex5.log();
      Complex complex9 = complex8.tan();
      Complex complex10 = Complex.I;
      complex7.subtract(complex1);
      complex4.readResolve();
      complex0.divide(complex6);
      complex1.pow(0.5403023058681398);
      complex10.toString();
      Complex complex11 = complex10.asin();
      complex7.sinh();
      complex9.add(complex11);
      complex8.multiply(0.5403023058681398);
      complex7.sqrt1z();
      complex11.abs();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.4255188208147591, 1.4255188208147591);
      Complex complex2 = complex0.tan();
      complex1.subtract(1215486.95591369);
      complex0.createComplex((-533.2157), 1.4255188208147591);
      Complex complex3 = Complex.valueOf(Double.NaN, (-1.0));
      complex3.tanh();
      Complex complex4 = complex2.createComplex(0.0, 0.0);
      Complex complex5 = Complex.valueOf(0.0, Double.NaN);
      complex5.cosh();
      complex4.getField();
      Complex complex6 = complex5.sqrt();
      complex0.cos();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.sqrt();
      complex7.subtract(complex6);
      complex1.subtract(complex3);
      complex8.toString();
      complex1.multiply(2347.583781457284);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.exp();
      complex3.INF.readResolve();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex0.tanh();
      complex1.getArgument();
      complex5.readResolve();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.ONE.sqrt();
      Complex complex8 = complex1.ONE.conjugate();
      complex8.ZERO.subtract(complex3);
      complex7.NaN.cosh();
      complex1.multiply(1430.0);
      Complex complex9 = complex6.exp();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex10.ZERO.multiply((-330));
      complex4.sqrt();
      Complex complex12 = Complex.valueOf((double) (-330));
      Complex complex13 = new Complex(426.591746994019, (-330));
      complex13.pow(complex11);
      complex0.tan();
      Complex complex14 = Complex.ONE;
      complex14.toString();
      complex9.sin();
      complex3.sin();
      complex1.abs();
      complex2.getImaginary();
      complex2.exp();
      Complex.valueOf(1430.0, 748.95430656799);
      complex0.pow(Double.NaN);
      complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1350.71279625053, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.subtract(1350.71279625053);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.ONE.acos();
      complex4.I.acos();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.NaN.negate();
      complex5.atan();
      Complex.valueOf((-188.14378072461));
      complex6.NaN.divide((-301.0));
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex0.NaN.sinh();
      complex7.tan();
      complex5.hashCode();
      Complex complex9 = Complex.ONE;
      complex9.log();
      Complex complex10 = complex3.tan();
      Complex complex11 = Complex.I;
      complex6.subtract(complex0);
      complex6.ZERO.log();
      complex8.readResolve();
      Complex complex12 = complex9.divide(complex11);
      complex1.pow(1350.71279625053);
      complex2.toString();
      Complex complex13 = complex0.asin();
      Complex complex14 = complex6.sinh();
      complex12.add(complex13);
      complex4.multiply(1316.60091);
      complex14.sqrt1z();
      complex5.abs();
      complex10.acos();
      complex7.subtract(Double.POSITIVE_INFINITY);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-4009.77057300911));
      Complex complex1 = Complex.valueOf((-2.524630659933467));
      complex1.getReal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.NaN;
      complex3.I.sqrt1z();
      complex3.sin();
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.divide((-6.1370690793508674E296));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.cos();
      complex1.atan();
      Complex.valueOf(38.47841760435743, 2.0);
      complex0.getField();
      complex2.getArgument();
      complex3.getImaginary();
      complex2.sinh();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1350.71279625053, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.subtract(1350.71279625053);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.tan();
      complex3.INF.divide(complex0);
      Complex complex4 = complex3.ONE.acos();
      complex4.I.acos();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.NaN.negate();
      Complex complex7 = complex5.atan();
      complex6.NaN.divide((-301.0));
      Complex complex8 = complex0.divide(complex5);
      complex0.NaN.sinh();
      Complex complex9 = complex8.tan();
      complex5.hashCode();
      Complex complex10 = Complex.valueOf(1350.71279625053);
      Complex complex11 = complex5.pow(complex6);
      complex11.ONE.tan();
      complex1.toString();
      complex0.sin();
      Complex complex12 = complex10.sin();
      complex12.abs();
      complex7.getImaginary();
      Complex complex13 = complex0.exp();
      complex13.ONE.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1411.7710642));
      complex9.pow(Double.POSITIVE_INFINITY);
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.INF.negate();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.pow(0.0);
      complex0.INF.conjugate();
      Complex.valueOf((-2184.624425));
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex1.pow(complex0);
      complex4.ONE.negate();
      Complex.valueOf(0.0, (-2846.9));
      complex4.multiply(complex3);
      Complex.valueOf((-809.65230847851), (-809.65230847851));
      Complex.valueOf(0.0, 2.9257892371894816E-17);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(459.00291355);
      complex1.ZERO.log();
      Complex complex2 = complex1.I.subtract(complex0);
      complex2.multiply((-1916));
      Complex complex3 = Complex.valueOf(1.0, 459.00291355);
      Complex complex4 = complex3.INF.subtract(complex2);
      complex3.sqrt();
      complex4.INF.sqrt1z();
      Complex complex5 = complex4.ONE.log();
      complex5.I.acos();
      Complex complex6 = complex3.INF.atan();
      complex6.hashCode();
      complex0.equals(complex3);
      Complex complex7 = complex3.exp();
      complex7.NaN.cosh();
      Complex complex8 = complex4.tan();
      complex8.multiply(complex2);
      Complex complex9 = Complex.valueOf(689.837664105, 459.00291355);
      complex9.isNaN();
      Complex complex10 = complex5.sqrt1z();
      complex10.INF.toString();
      complex2.divide(549.4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.pow(1.0);
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex0.isInfinite();
      Complex complex4 = complex3.ONE.sin();
      complex3.createComplex((-953.0), 0.0);
      complex3.toString();
      complex3.isNaN();
      Complex complex5 = complex3.NaN.conjugate();
      complex5.ZERO.conjugate();
      complex5.multiply(1558);
      int int0 = 17;
      complex4.ZERO.nthRoot(17);
      complex5.NaN.tanh();
      Complex complex6 = Complex.valueOf(0.0, (-20.0));
      Complex complex7 = complex1.conjugate();
      complex4.multiply(207);
      complex3.getReal();
      complex6.negate();
      complex6.nthRoot(961);
      Complex complex8 = complex3.I.pow(complex6);
      complex8.ZERO.pow(complex6);
      complex1.NaN.toString();
      Complex complex9 = complex7.cosh();
      try { 
        complex9.nthRoot((-370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -370
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      Complex complex5 = complex1.ONE.pow(0.0);
      Complex complex6 = Complex.valueOf((-2711.952660433377), (-1997.0));
      complex4.ONE.divide(0.0);
      complex2.ONE.readResolve();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex0.tan();
      Complex complex9 = complex5.I.atan();
      Complex complex10 = complex5.ZERO.tan();
      complex10.multiply(complex9);
      complex2.abs();
      Complex complex11 = complex7.I.sqrt1z();
      Object object0 = complex0.readResolve();
      complex7.ONE.subtract(0.0);
      complex2.subtract((-1997.0));
      complex2.NaN.multiply((-1997.0));
      complex7.isNaN();
      complex5.isInfinite();
      complex4.subtract(complex0);
      Complex complex12 = complex4.cosh();
      complex12.INF.subtract((-299.70912375));
      complex3.equals(object0);
      Complex complex13 = complex4.add((-1997.0));
      complex11.add(0.0);
      complex13.getField();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.add(complex1);
      complex1.createComplex(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.pow((-186.8635717));
      complex0.INF.cosh();
      Complex.valueOf((-186.8635717), 1.2481715679168701);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.I.cosh();
      Complex complex5 = complex4.NaN.multiply((-186.8635717));
      complex5.I.sin();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.NaN.negate();
      complex7.INF.readResolve();
      complex1.getImaginary();
      Complex complex8 = complex6.add(0.0);
      complex3.multiply(complex8);
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(1516.0, 1516.0);
      complex9.NaN.nthRoot(305);
      complex9.NaN.tanh();
      complex2.equals(complex4);
      complex9.getArgument();
      complex2.subtract(0.0);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow((-1.0));
      complex1.NaN.add(0.0);
      Complex complex2 = complex1.NaN.add((-1.0));
      Complex complex3 = complex1.I.pow(complex0);
      Complex.valueOf(Double.NaN);
      complex0.ZERO.getArgument();
      complex0.getArgument();
      complex0.isInfinite();
      Complex complex4 = complex0.conjugate();
      complex4.ONE.toString();
      complex4.conjugate();
      complex0.multiply(211);
      complex3.asin();
      complex2.multiply((-2299.26255802));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ZERO.nthRoot(380);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.tanh();
      complex2.INF.subtract(complex0);
      complex2.toString();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.valueOf((double) 380, 0.0);
      Complex complex6 = complex1.NaN.multiply(complex5);
      complex1.toString();
      complex2.ZERO.multiply(0);
      complex2.ZERO.sin();
      Complex.valueOf(0.0);
      complex4.getImaginary();
      Complex complex7 = complex2.acos();
      complex2.getField();
      Complex complex8 = complex3.atan();
      complex0.nthRoot(500);
      Complex complex9 = complex2.subtract(complex0);
      complex9.acos();
      Complex.valueOf(0.0, (double) 380);
      complex7.readResolve();
      complex6.pow(481.0);
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(6.283185307179586, 0.0);
      Complex complex3 = complex2.ZERO.pow(complex1);
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex4.NaN.subtract(complex1);
      Complex complex6 = complex5.I.sqrt();
      complex6.ZERO.reciprocal();
      complex0.NaN.add(complex4);
      Complex complex7 = Complex.valueOf(6.283185307179586);
      Complex complex8 = complex7.NaN.add(6.283185307179586);
      complex3.ZERO.hashCode();
      Complex complex9 = complex3.INF.pow(0.0);
      complex0.subtract(complex1);
      Complex complex10 = complex2.sin();
      Complex complex11 = complex10.I.multiply(599);
      complex11.I.pow(complex1);
      Complex complex12 = complex3.tanh();
      complex9.abs();
      complex4.isInfinite();
      Complex complex13 = complex12.atan();
      complex9.sinh();
      complex4.isInfinite();
      complex13.log();
      Complex complex14 = complex4.tanh();
      complex14.readResolve();
      Complex complex15 = complex1.acos();
      complex15.pow(complex3);
      Complex complex16 = complex2.exp();
      complex15.hashCode();
      Complex complex17 = complex13.subtract(complex3);
      complex17.I.add(complex8);
      complex15.sinh();
      complex16.isNaN();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(1.0);
      complex1.divide(complex2);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ZERO.cos();
      complex4.INF.readResolve();
      Complex complex5 = complex3.I.sin();
      Complex complex6 = complex1.sin();
      complex6.I.conjugate();
      Complex complex7 = complex0.sqrt();
      complex7.ZERO.conjugate();
      complex7.ONE.tanh();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex1.ONE.multiply(281);
      complex6.I.nthRoot(1);
      complex8.isNaN();
      complex6.getField();
      complex2.abs();
      complex5.cosh();
      complex2.sin();
      Complex complex10 = Complex.valueOf(0.0);
      complex10.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(2307.96925);
      Complex complex1 = complex0.sinh();
      complex1.add(21.544);
      Complex complex2 = complex0.ONE.add(1101.491703331);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.log();
      complex4.ZERO.asin();
      complex3.isNaN();
      Complex complex5 = complex4.cosh();
      complex3.abs();
      complex0.getImaginary();
      Complex complex6 = complex2.sqrt1z();
      complex6.NaN.negate();
      Complex complex7 = complex0.divide(complex4);
      complex2.add(Double.NaN);
      complex6.hashCode();
      Object object0 = new Object();
      complex5.equals(object0);
      complex7.getImaginary();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.pow(1.1768108384670781E-7);
      Complex complex3 = complex2.ZERO.add(complex1);
      complex1.ZERO.subtract(0.0);
      complex2.I.tanh();
      complex3.ONE.negate();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.NaN.cos();
      complex6.log();
      complex5.acos();
      Complex complex7 = complex1.log();
      Complex complex8 = complex7.I.pow(1.1509928703308105);
      complex8.ZERO.sqrt();
      complex8.ZERO.abs();
      complex7.INF.sqrt1z();
      complex7.equals((Object) null);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(748.95430656799, 373.0180390247488);
      Complex complex1 = complex0.sin();
      complex1.ONE.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1401.0577718002594, 1401.0577718002594);
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.I.nthRoot(1);
      Complex complex2 = complex1.INF.atan();
      complex1.I.divide(0.0);
      complex2.ONE.tan();
      complex1.I.cos();
      complex1.ZERO.atan();
      Complex complex3 = Complex.valueOf(1401.0577718002594, 1401.0577718002594);
      complex3.INF.getField();
      complex0.getArgument();
      complex1.getImaginary();
      complex1.sinh();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1720.5222758377304, (-2.724174869314043E-8));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.NaN.createComplex((-2.724174869314043E-8), 945.0);
      complex0.INF.abs();
      complex1.abs();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex4.ONE.tan();
      complex5.ONE.getArgument();
      Complex complex6 = complex3.divide(1720.5222758377304);
      complex6.abs();
      Complex complex7 = Complex.valueOf(3020.515881, 0.0);
      complex3.nthRoot(7);
      complex0.INF.tan();
      complex3.nthRoot(1871);
      complex4.hashCode();
      complex7.getField();
      complex4.ONE.negate();
      Complex complex8 = complex4.add(complex7);
      complex8.NaN.hashCode();
      Complex complex9 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ONE.divide(0.0);
      complex10.INF.subtract(945.0);
      complex4.abs();
      Complex complex11 = complex6.tanh();
      complex11.NaN.subtract(complex6);
      complex4.asin();
      complex2.cosh();
      complex2.createComplex(20.0, 7);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      complex0.I.getField();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.I.exp();
      complex3.INF.readResolve();
      Complex complex4 = complex2.ONE.atan();
      Complex complex5 = complex0.tanh();
      complex1.getArgument();
      complex5.readResolve();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.ONE.sqrt();
      Complex complex8 = complex1.ONE.conjugate();
      complex8.ZERO.subtract(complex3);
      complex7.NaN.cosh();
      Complex complex9 = complex1.multiply(1430.0);
      Complex complex10 = complex6.exp();
      Complex complex11 = complex0.cos();
      Complex complex12 = complex11.ZERO.multiply((-330));
      complex4.sqrt();
      complex3.log();
      Complex complex13 = complex5.tan();
      Complex complex14 = Complex.I;
      Complex complex15 = complex13.subtract(complex14);
      complex15.NaN.readResolve();
      complex10.I.divide(complex12);
      complex11.pow(338.61947493450305);
      complex13.toString();
      complex13.asin();
      complex11.sinh();
      Complex complex16 = complex9.add(complex4);
      complex10.multiply(0.0);
      complex15.sqrt1z();
      complex16.abs();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-184.23177), 1031.71754);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = complex2.ZERO.conjugate();
      complex3.NaN.getField();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex0.sin();
      complex7.INF.getField();
      Complex complex8 = complex5.tanh();
      Complex.valueOf(1.172548532485962, 0.0);
      Complex complex9 = complex8.subtract(complex2);
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = complex10.NaN.multiply(1031.71754);
      complex6.ZERO.reciprocal();
      complex1.multiply(complex9);
      Complex complex12 = Complex.NaN;
      complex12.INF.acos();
      Complex complex13 = complex1.ONE.conjugate();
      complex13.INF.divide(complex11);
      complex8.equals(complex12);
      complex1.NaN.readResolve();
      Complex complex14 = complex8.log();
      complex14.INF.subtract(1.172548532485962);
      Complex.valueOf(1031.71754);
      complex0.INF.atan();
      complex6.sinh();
      complex4.subtract(complex0);
      complex1.getReal();
      complex1.atan();
      complex3.tanh();
      complex8.multiply(1735);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-1.053036399720808E256));
      Complex complex1 = complex0.reciprocal();
      complex1.exp();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = Complex.valueOf((-1.053036399720808E256));
      Complex complex4 = complex3.I.sqrt1z();
      complex0.abs();
      Complex complex5 = complex1.NaN.multiply(1.053036399720808E256);
      Complex complex6 = complex0.ONE.cos();
      Complex complex7 = complex4.ZERO.cosh();
      complex7.INF.divide((-1019.4051774321));
      Complex complex8 = Complex.valueOf(2543.645970235271, 2596.0928);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.I.multiply(0.0);
      Complex complex11 = complex0.log();
      Complex complex12 = complex11.I.atan();
      complex12.ONE.conjugate();
      complex12.ZERO.getArgument();
      complex12.INF.reciprocal();
      complex11.isInfinite();
      Complex complex13 = complex2.cosh();
      Complex complex14 = complex13.add(complex3);
      complex14.ZERO.createComplex((-1.053036399720808E256), (-1.053036399720808E256));
      Complex complex15 = complex4.sqrt1z();
      complex15.INF.getField();
      Complex complex16 = Complex.valueOf(539.9948903468688);
      complex16.I.cosh();
      complex15.getImaginary();
      Complex complex17 = complex8.asin();
      complex5.sqrt();
      complex17.divide(complex6);
      complex10.sinh();
      complex4.pow(2543.645970235271);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2371.0, 2371.0);
      Complex complex1 = complex0.I.multiply((-806));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ZERO.acos();
      Complex.valueOf(20.0, 2371.0);
      Complex complex5 = complex3.I.multiply((-806));
      Complex complex6 = complex0.ONE.reciprocal();
      complex6.I.divide(complex4);
      complex2.nthRoot(1341);
      Complex complex7 = complex2.tan();
      Complex complex8 = complex3.NaN.asin();
      complex7.getArgument();
      Complex complex9 = complex1.add(complex7);
      complex2.tanh();
      Complex complex10 = complex1.divide(complex7);
      complex9.INF.multiply(1341);
      Complex complex11 = complex10.NaN.atan();
      complex11.INF.readResolve();
      Complex complex12 = complex3.divide(complex5);
      Complex complex13 = complex9.cos();
      complex1.atan();
      complex2.subtract((-1.0));
      Complex complex14 = complex3.cosh();
      complex12.toString();
      Complex complex15 = complex13.createComplex(2.0, 1.285159987981792E19);
      complex0.pow(complex14);
      complex15.readResolve();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.INF.createComplex((-167.40388228), (-167.40388228));
      complex0.pow(complex1);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.subtract(complex2);
      complex0.getField();
      complex3.log();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1350.71279625053, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.subtract(1350.71279625053);
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.ONE.acos();
      complex4.I.acos();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.NaN.negate();
      Complex complex7 = complex5.atan();
      complex6.NaN.divide((-301.0));
      Complex complex8 = complex0.divide(complex5);
      complex0.NaN.sinh();
      Complex complex9 = complex8.tan();
      complex5.hashCode();
      Complex complex10 = Complex.valueOf(1350.71279625053);
      Complex complex11 = complex5.pow(complex6);
      complex11.ONE.tan();
      complex1.toString();
      complex0.sin();
      Complex complex12 = complex10.sin();
      complex12.abs();
      complex7.getImaginary();
      complex0.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1411.7710642));
      complex9.pow(Double.POSITIVE_INFINITY);
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(2.2975389535985893E-7, 1.8428773880004883);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.multiply((-399));
      Complex complex2 = Complex.valueOf(2594.696562);
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-2088.5586155981), 834.32462660923);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2325.4127731986), 3191.380782327872);
      complex0.ONE.sinh();
      Complex complex1 = complex0.add(397.0);
      complex1.NaN.getArgument();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.divide(complex2);
      complex0.multiply(0);
      complex0.readResolve();
      complex3.getReal();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(216.825891226841, 216.825891226841);
      Complex complex1 = complex0.ONE.createComplex((-4230.227079855016), 1835.8324356913);
      Complex.valueOf((-4230.227079855016), 1835.8324356913);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.INF.createComplex(0.6186635494232178, 0.0);
      complex3.ONE.toString();
      complex1.toString();
      complex0.getReal();
      Complex complex4 = complex0.add(complex1);
      complex4.ONE.atan();
      complex0.abs();
      complex2.getReal();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.ZERO.hashCode();
      Complex complex2 = Complex.valueOf(8.257484966196574E-8, 8.257484966196574E-8);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex2.I.multiply(8.257484966196574E-8);
      complex0.readResolve();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex4.add(complex5);
      complex7.I.sqrt1z();
      complex0.I.sinh();
      complex6.cosh();
      Complex complex8 = complex7.ONE.pow(0.0);
      complex8.INF.multiply(complex0);
      complex2.abs();
      complex1.equals(complex3);
      complex7.sin();
      complex6.getField();
      complex7.cos();
      complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-4009.77057300911));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.NaN.negate();
      complex0.getImaginary();
      Complex complex4 = complex1.divide((-4009.77057300911));
      complex2.INF.add(complex3);
      complex2.ZERO.pow(598.76);
      complex4.abs();
      complex2.readResolve();
      complex1.sqrt();
      Complex.valueOf((-1958.855087006), 1373.217793940945);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(439);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.pow(2692.66736993);
      Complex complex4 = complex1.ZERO.conjugate();
      complex4.ONE.multiply(complex0);
      Complex complex5 = complex1.ZERO.add(0.4556184411048889);
      complex1.nthRoot(17);
      complex2.toString();
      Complex complex6 = complex0.NaN.subtract(2692.66736993);
      complex6.INF.abs();
      complex6.INF.abs();
      complex0.ONE.tan();
      complex5.multiply(0);
      complex0.atan();
      Complex complex7 = complex5.add(complex3);
      complex7.toString();
      complex1.isNaN();
      Complex.valueOf(20.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply((-2484));
      complex1.NaN.log();
      complex0.abs();
      Complex complex2 = new Complex(0.0);
      try { 
        complex2.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-295.24));
      complex0.INF.nthRoot(1);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ONE.sqrt();
      Complex complex2 = complex1.I.subtract(complex0);
      complex2.ONE.divide((-690.27844109));
      Complex complex3 = Complex.valueOf((double) 1, (-2307.70086317));
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.multiply(complex1);
      complex5.ONE.acos();
      complex2.isNaN();
      Complex complex6 = complex3.add(0.0);
      complex6.NaN.tanh();
      complex5.sqrt1z();
      complex6.nthRoot(1);
      Complex complex7 = complex0.add(complex3);
      complex7.I.multiply(complex5);
      try { 
        complex4.nthRoot((-2575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,575
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.sqrt1z();
      complex0.NaN.sinh();
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex0.hashCode();
      Complex complex3 = complex1.asin();
      complex3.getField();
      complex2.getArgument();
      Complex complex4 = complex2.cos();
      complex4.negate();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      complex1.I.sinh();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2481.60466), 19.1303722);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex1.INF.pow((-2481.60466));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.ONE.sqrt();
      complex5.ONE.abs();
      complex1.ONE.hashCode();
      Complex complex6 = complex4.cosh();
      complex6.I.exp();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.multiply(complex5);
      complex8.ONE.sinh();
      Complex complex9 = complex8.I.subtract(0.2034190595149994);
      String string0 = complex2.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Object object0 = complex4.I.readResolve();
      Complex complex10 = complex4.subtract(1.0);
      Complex complex11 = Complex.valueOf(19.1303722);
      Complex complex12 = complex11.I.multiply(1);
      assertEquals(19.1303722, complex11.getReal(), 0.01);
      
      Complex complex13 = complex10.ONE.tanh();
      Complex complex14 = (Complex)complex13.readResolve();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex14.getReal(), 0.01);
      
      complex10.INF.getField();
      assertEquals(2481.6044585294285, complex4.getImaginary(), 0.01);
      assertEquals(18.130373753110934, complex10.getReal(), 0.01);
      
      complex1.NaN.hashCode();
      Complex complex15 = complex1.multiply(0.2034190595149994);
      Complex complex16 = Complex.valueOf(19.1303722, (-2481.60466));
      complex7.INF.pow(1.0);
      Complex complex17 = complex15.tan();
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex3.subtract(complex7);
      assertNotSame(complex18, complex12);
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      
      complex9.sin();
      Complex complex19 = complex16.log();
      assertEquals(7.816690382710694, complex19.getReal(), 0.01);
      
      complex9.getField();
      assertTrue(complex8.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex17));
      assertFalse(complex5.equals((Object)object0));
      assertTrue(complex1.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sin();
      assertEquals(1.1752011936438014, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.multiply(complex1);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3.726946038150935E-291), 2.0);
      assertEquals((-3.726946038150935E-291), complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.subtract((-540.921332543913));
      complex3.NaN.createComplex((-540.921332543913), (-3.726946038150935E-291));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.createComplex(0.0, 0.0);
      Complex complex6 = complex2.NaN.cosh();
      complex0.ZERO.getField();
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex6.ONE.cos();
      assertEquals(0.5403023058681398, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.INF.subtract(complex5);
      complex10.INF.subtract(complex9);
      assertFalse(complex5.equals((Object)complex3));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex10.isInfinite());
      assertEquals(0.7615941559557649, complex4.getReal(), 0.01);
      
      String string0 = complex6.toString();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex2.getReal(), 0.01);
      assertEquals("(NaN, NaN)", string0);
      assertSame(complex6, complex7);
      
      Complex complex11 = complex0.multiply(1.784536881359796E-8);
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex11.isInfinite());
      assertEquals(1.784536881359796E-8, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
  }
}
