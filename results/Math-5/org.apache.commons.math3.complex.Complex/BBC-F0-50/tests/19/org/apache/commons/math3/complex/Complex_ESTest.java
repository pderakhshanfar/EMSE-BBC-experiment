/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:49:28 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      complex0.asin();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.tanh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 749.0539537632396);
      complex0.tanh();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-2094.9137600093904), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.exp();
      complex1.readResolve();
      complex1.isInfinite();
      Complex complex2 = complex0.tan();
      complex2.INF.sinh();
      complex0.getImaginary();
      Complex complex3 = complex0.add(complex1);
      complex0.asin();
      complex1.NaN.nthRoot(1321);
      complex3.readResolve();
      Complex complex4 = new Complex(20.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(7669686.1364, (-1273.85792));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = Complex.valueOf(7669686.1364);
      Complex complex4 = complex2.ONE.multiply(complex1);
      complex4.NaN.add((-1273.85792));
      Complex.valueOf(2135.929976, (-722.97));
      Complex complex5 = complex2.ONE.add((-1273.85792));
      complex5.ZERO.sqrt();
      complex0.conjugate();
      Complex complex6 = complex0.pow(7669686.1364);
      Complex complex7 = complex6.log();
      complex7.NaN.subtract(2135.929976);
      complex6.ONE.subtract(7669686.1364);
      Complex complex8 = complex6.INF.multiply(4520);
      complex6.sqrt1z();
      Complex complex9 = complex3.multiply(4520);
      complex9.ZERO.subtract(complex5);
      complex3.cos();
      complex9.acos();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-635.457001486), Double.POSITIVE_INFINITY);
      complex1.multiply(1443);
      Complex complex2 = complex1.reciprocal();
      complex1.tanh();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.log();
      complex1.ONE.nthRoot(1376);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.NaN.multiply((double) 1376);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex0.ONE.cos();
      complex5.ONE.multiply(complex3);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex1.negate();
      complex7.I.sqrt1z();
      complex7.ONE.pow(complex5);
      complex7.tanh();
      Complex complex8 = complex4.cosh();
      complex8.NaN.divide((double) 1376);
      complex1.exp();
      Complex complex9 = Complex.valueOf(4.814793918384117E127, 1.0);
      complex7.conjugate();
      complex8.toString();
      complex7.divide(complex9);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.pow((-2631.8411629629945));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf((-20.0), 2555.635282091111);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.createComplex(3.4454766202661184E267, 2555.635282091111);
      Complex complex4 = complex0.tan();
      complex4.INF.toString();
      complex4.INF.subtract((-1527.0));
      complex4.ONE.readResolve();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.NaN.add(complex3);
      Complex complex7 = complex6.ONE.add((-0.6697591169381106));
      Complex complex8 = complex7.ZERO.subtract(complex2);
      complex7.INF.add(237.0620416691);
      complex6.NaN.exp();
      Complex.valueOf(3.4454766202661184E267, (-4.503876787768218));
      complex5.cos();
      Complex complex9 = new Complex((-20.0), (-20.0));
      complex5.subtract(complex9);
      complex8.subtract(2265.88732316682);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(205.43566200978);
      complex1.multiply(814);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.NaN.nthRoot(493);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.I.sqrt();
      Complex complex4 = complex3.createComplex(493, 493);
      complex4.NaN.tanh();
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.valueOf((double) 493, Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.add(complex5);
      complex7.ZERO.divide((double) 493);
      Complex complex8 = complex7.ZERO.subtract(complex1);
      complex8.INF.cosh();
      complex2.getField();
      Complex complex9 = complex6.acos();
      Complex complex10 = complex2.acos();
      complex6.multiply(complex5);
      complex9.add(complex10);
      Complex.valueOf((double) 493);
      complex5.exp();
      Complex complex11 = complex1.exp();
      complex2.abs();
      Complex complex12 = complex10.multiply(complex11);
      complex10.conjugate();
      complex4.readResolve();
      complex12.sqrt();
      complex2.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(720.5071011245411, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3579.7));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.subtract(5227.857);
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = Complex.ZERO;
      complex6.INF.toString();
      complex0.INF.multiply(complex6);
      Complex complex7 = complex2.INF.divide(complex0);
      Complex complex8 = complex0.pow(complex1);
      complex8.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex8.add(complex1);
      complex1.readResolve();
      Complex complex9 = Complex.valueOf((-3579.7), (-3579.7));
      complex2.asin();
      complex3.I.sinh();
      complex9.nthRoot(758);
      Complex complex10 = Complex.valueOf((-1479.3822005817));
      complex4.sinh();
      complex5.add(0.45251762866973877);
      complex7.tan();
      complex3.sin();
      complex1.multiply(complex10);
      complex7.log();
      complex8.cosh();
      complex5.multiply((-752));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.nthRoot(1914);
      complex1.getField();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.add(complex1);
      complex2.sinh();
      Complex complex4 = complex3.conjugate();
      complex1.sqrt();
      Complex complex5 = complex0.multiply(37);
      complex1.multiply((-855.43543319603));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.multiply(complex0);
      complex3.asin();
      complex7.sqrt();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex4.multiply(complex8);
      complex9.atan();
      complex1.abs();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6261.5, 6261.5);
      complex0.exp();
      complex0.NaN.conjugate();
      Complex complex1 = Complex.valueOf(6261.5);
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.INF;
      complex2.INF.add(complex0);
      complex0.NaN.readResolve();
      Complex complex4 = complex0.divide((-956.119307));
      complex3.readResolve();
      complex2.isInfinite();
      complex4.tan();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-617.334));
      Complex complex1 = Complex.NaN;
      complex0.abs();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.tan();
      complex5.exp();
      complex1.exp();
      complex3.INF.sqrt();
      Complex complex6 = new Complex(0.23526649393675203, Double.POSITIVE_INFINITY);
      complex6.asin();
      Complex complex7 = Complex.INF;
      complex4.equals(complex2);
      Complex complex8 = Complex.valueOf((-617.334));
      complex8.tan();
      complex8.getImaginary();
      complex8.pow(complex1);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.tan();
      Complex complex1 = complex0.INF.cosh();
      Complex.valueOf((-587.6087));
      complex0.log();
      complex1.createComplex(Double.POSITIVE_INFINITY, 6.3890560989306495);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.I.acos();
      complex0.isInfinite();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.sinh();
      complex3.ZERO.getArgument();
      complex2.ZERO.cos();
      Complex complex4 = complex3.ONE.exp();
      complex3.ONE.add((-1483.48));
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = complex2.I.cos();
      complex8.ONE.reciprocal();
      Complex complex9 = complex6.exp();
      Complex complex10 = complex9.NaN.log();
      complex9.NaN.abs();
      complex9.NaN.log();
      Complex complex11 = complex6.conjugate();
      Complex complex12 = complex11.INF.add(complex7);
      complex11.getField();
      complex12.add(1.9332630743320287E-8);
      Complex complex13 = complex5.multiply((-1483.48));
      complex13.I.divide(complex12);
      Complex complex14 = Complex.valueOf(0.0);
      complex14.INF.cos();
      complex14.getReal();
      Complex complex15 = complex1.sinh();
      complex15.I.sin();
      Complex.valueOf((-94.88608062), 0.0);
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.tanh();
      complex1.log();
      complex1.log();
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = complex2.tan();
      Complex complex4 = new Complex(1.4151292367806538E-173, 1.7976931348623157E308);
      complex4.sqrt1z();
      Complex.valueOf((-626.5848792606592), 1469.0);
      complex3.log();
      complex1.atan();
      complex0.readResolve();
      Complex complex5 = Complex.INF;
      complex5.tanh();
      complex3.nthRoot(2078);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.920197743470107E-8));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.log();
      complex2.readResolve();
      complex0.tanh();
      complex2.tanh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = (Complex)complex0.readResolve();
      Complex.valueOf((-4.996854125490041E297));
      complex0.equals(complex4);
      complex0.nthRoot(1198);
      complex1.asin();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex4.asin();
      complex6.I.add((-842.5));
      Complex complex7 = complex5.conjugate();
      complex2.getReal();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(0.47280728816986084);
      complex0.hashCode();
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.ONE.abs();
      complex1.tanh();
      complex1.tanh();
      Complex complex2 = Complex.NaN;
      complex2.conjugate();
      Complex complex3 = Complex.NaN;
      complex3.readResolve();
      Complex.valueOf((-16.12610788903671));
      complex1.equals(complex0);
      complex2.nthRoot(1198);
      Complex complex4 = Complex.valueOf(6.425410206451039, (-4.996854125490041E297));
      complex4.asin();
      complex2.conjugate();
      complex0.asin();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.I.hashCode();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = Complex.INF;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex0.INF.toString();
      Complex complex2 = Complex.valueOf(55.609818220922);
      Complex complex3 = complex0.multiply(316);
      Complex complex4 = complex0.I.sqrt();
      complex4.INF.multiply((double) 316);
      complex4.I.asin();
      complex3.equals(complex0);
      Complex complex5 = complex1.NaN.asin();
      complex5.I.sqrt();
      Complex.valueOf(2.582759362004277E-251);
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.acos();
      complex2.ONE.abs();
      Complex complex7 = complex1.pow(complex3);
      complex6.ONE.add(617.334);
      Complex complex8 = complex2.subtract(complex7);
      complex8.readResolve();
      complex8.ZERO.tanh();
      complex1.ONE.subtract(complex6);
      complex7.I.toString();
      complex8.NaN.log();
      Complex complex9 = complex5.subtract(complex0);
      Complex complex10 = complex9.I.negate();
      Complex.valueOf(731.87429442, 2.0);
      complex10.ZERO.hashCode();
      complex8.readResolve();
      Complex.valueOf(Double.NaN);
      Complex.valueOf((-20.0), 55.609818220922);
      complex3.multiply(4982);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex1.sqrt();
      complex2.divide(complex0);
      complex2.INF.reciprocal();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(9.510567165169581E-4);
      complex3.getImaginary();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex1.sqrt();
      complex1.cosh();
      complex0.readResolve();
      Complex complex6 = Complex.I;
      complex0.conjugate();
      complex5.sqrt1z();
      Complex complex7 = complex6.tanh();
      complex4.negate();
      complex2.pow(complex0);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-1441.980586));
      Complex complex1 = complex0.add((-1441.980586));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.tan();
      complex4.abs();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.exp();
      complex1.abs();
      complex4.toString();
      Complex complex7 = Complex.I;
      complex5.cos();
      complex1.conjugate();
      complex6.sqrt1z();
      Complex complex8 = complex6.tanh();
      complex5.negate();
      complex1.subtract(complex5);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      complex6.reciprocal();
      Complex.valueOf(971.6861578862051);
      complex7.cos();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex((-2784.862), 2.0);
      complex2.cosh();
      complex1.readResolve();
      Complex complex3 = complex0.conjugate();
      complex0.tanh();
      Complex complex4 = complex3.negate();
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-10.95131906183914), (-10.95131906183914));
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.NaN;
      Object object0 = new Object();
      Complex complex4 = complex0.tanh();
      complex2.tanh();
      Object object1 = complex3.readResolve();
      complex0.equals(object1);
      complex4.nthRoot(1188);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.580025658385974, 0.580025658385974);
      Complex complex2 = complex0.add(complex1);
      complex0.I.sqrt();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.NaN.conjugate();
      complex0.multiply((-1590));
      Complex complex5 = complex2.sinh();
      complex5.NaN.reciprocal();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex0.log();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex8.add(complex7);
      complex10.I.add(0.0);
      complex9.sqrt();
      complex1.cosh();
      complex8.pow(complex6);
      complex7.getField();
      complex4.createComplex(0.580025658385974, 3.691814001080034E75);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.NaN.abs();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.exp();
      complex3.NaN.abs();
      complex1.toString();
      Complex complex4 = complex3.multiply((-5515));
      Complex complex5 = new Complex((-1261.04829246985));
      complex4.equals(complex5);
      complex2.cosh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.NaN;
      complex7.getReal();
      complex7.getField();
      complex2.pow((-1261.04829246985));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2227.9, 2227.9);
      Complex complex1 = complex0.tan();
      complex0.abs();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.exp();
      complex2.abs();
      complex2.toString();
      complex3.divide(complex0);
      complex3.add(2227.9);
      complex2.cos();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex3.tanh();
      complex4.negate();
      Complex complex7 = new Complex(3150.7263956110187);
      Complex.valueOf(1.0);
      complex5.tan();
      complex2.subtract(3150.7263956110187);
      complex6.createComplex(2227.9, 1.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add((-1.1914734393460718E-8));
      Complex complex3 = complex1.subtract(complex0);
      complex1.tan();
      complex3.abs();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex0.exp();
      complex6.toString();
      Complex complex7 = Complex.I;
      complex2.add((-2105.2247228519313));
      Complex complex8 = Complex.NaN;
      complex8.cos();
      Complex complex9 = complex4.conjugate();
      Complex complex10 = Complex.NaN;
      complex10.sqrt1z();
      complex9.tanh();
      Complex complex11 = complex0.negate();
      complex5.subtract(complex6);
      Complex complex12 = new Complex((-1.1914734393460718E-8));
      complex3.reciprocal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.cos();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex1.isInfinite();
      Complex.valueOf((-617.334), (-617.334));
      Complex.valueOf(619.14044);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1499.3595104827218);
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.tan();
      complex2.NaN.abs();
      Complex complex3 = complex0.negate();
      complex3.INF.tan();
      complex2.acos();
      Complex complex4 = complex3.exp();
      complex4.NaN.abs();
      complex2.toString();
      complex4.divide(complex2);
      Complex complex5 = complex4.add(Double.NaN);
      Complex complex6 = complex5.ZERO.cos();
      complex6.NaN.atan();
      Complex complex7 = complex0.add(complex4);
      complex7.pow(1499.3595104827218);
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.47280728816986084);
      complex0.hashCode();
      Complex complex1 = complex0.sqrt();
      complex1.readResolve();
      Complex complex2 = complex1.tanh();
      complex2.add(1378.3329876236485);
      Complex complex3 = complex2.ONE.log();
      complex2.NaN.log();
      complex3.ZERO.sqrt1z();
      Complex complex4 = complex3.I.tan();
      complex4.cos();
      complex2.conjugate();
      Complex complex5 = Complex.INF;
      complex5.sqrt1z();
      complex1.tanh();
      Complex complex6 = complex4.negate();
      Complex complex7 = new Complex(1138.8483558007472);
      complex0.reciprocal();
      Complex complex8 = Complex.valueOf(1138.8483558007472);
      Complex complex9 = complex3.cos();
      complex9.divide(Double.NaN);
      complex8.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1400.27, 365.08439662777);
      Complex complex1 = complex0.sqrt();
      complex1.INF.multiply((-5515));
      complex1.equals(complex0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.createComplex(365.08439662777, 1400.27);
      complex3.getReal();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.ONE.pow(complex1);
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.INF.divide(complex0);
      Complex complex7 = new Complex(2248076.9416749873, 2248076.9416749873);
      complex7.toString();
      complex7.sin();
      complex2.createComplex((-2160.576130726), 1920249.0090132803);
      complex6.readResolve();
      complex7.equals(complex3);
      complex2.sin();
      Complex complex8 = Complex.INF;
      complex8.abs();
      complex6.readResolve();
      Complex complex9 = Complex.ONE;
      complex6.equals(complex5);
      Complex complex10 = Complex.ZERO;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1385.73049653));
      Complex complex1 = complex0.tan();
      complex1.getArgument();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.reciprocal();
      complex3.toString();
      complex0.readResolve();
      complex0.readResolve();
      complex0.cos();
      Complex complex4 = complex2.asin();
      complex3.equals("(-7.216410423990051E-4, -0.0)");
      complex4.getImaginary();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex2.tan();
      complex0.getImaginary();
      complex5.reciprocal();
      complex4.ONE.negate();
      complex6.reciprocal();
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1499.3595104827218);
      complex1.NaN.subtract(complex0);
      complex0.tan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.multiply((-214.1986919197));
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.exp();
      complex2.abs();
      complex2.toString();
      complex1.divide(complex3);
      complex1.add(Double.NaN);
      Complex complex4 = complex2.cos();
      complex4.conjugate();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.tanh();
      complex6.negate();
      complex5.subtract(complex0);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      Complex.valueOf(2248076.9416749873);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-1385.73049653));
      complex0.nthRoot(1396);
      complex0.I.abs();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.multiply(1396);
      complex2.ZERO.negate();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.exp();
      Complex complex7 = Complex.NaN;
      complex7.abs();
      Complex complex8 = Complex.NaN;
      complex8.toString();
      Complex complex9 = complex6.divide(complex7);
      complex5.add(Double.POSITIVE_INFINITY);
      complex2.cos();
      complex8.conjugate();
      Complex complex10 = complex0.sqrt1z();
      complex2.tanh();
      Complex complex11 = complex9.negate();
      complex10.subtract(complex7);
      Complex complex12 = new Complex(Double.NaN);
      Complex complex13 = complex4.reciprocal();
      complex13.ZERO.add((-2432.5196514));
      Complex.valueOf(1475.76885683963);
      Complex.valueOf((-3028.543));
      complex11.cos();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1499.3595104827218);
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.tan();
      complex2.NaN.abs();
      complex0.hashCode();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.log();
      complex3.subtract(complex4);
      Complex complex5 = complex3.atan();
      double double0 = (-149.23050265592488);
      Complex complex6 = complex4.divide(1499.3595104827218);
      Complex.valueOf(3586.47);
      complex2.log();
      complex2.hashCode();
      Complex.valueOf(Double.NaN, 1499.3595104827218);
      Complex complex7 = Complex.valueOf(6.283185307179586, Double.NaN);
      complex7.getArgument();
      complex5.NaN.createComplex((-456.286803), Double.NaN);
      int int0 = 1443;
      complex6.nthRoot(1443);
      Complex complex8 = complex2.cos();
      complex5.toString();
      complex8.sin();
      Complex complex9 = complex0.multiply(1443);
      complex9.sqrt1z();
      Complex complex10 = new Complex(Double.NaN, 0.5964443231683475);
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex0.getArgument();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex0.toString();
      complex3.readResolve();
      complex0.readResolve();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex3.asin();
      complex0.equals((Object) null);
      complex1.getImaginary();
      complex1.sqrt1z();
      Complex complex6 = complex5.tan();
      complex4.getImaginary();
      complex6.reciprocal();
      complex6.reciprocal();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = Complex.valueOf((-1875.029973143379));
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.ZERO.reciprocal();
      Complex complex7 = complex6.multiply(796);
      Complex complex8 = complex3.INF.multiply(0);
      Complex complex9 = complex0.createComplex((-869.7), (-315.18387));
      Complex.valueOf(1.3240710866573994E38, (-869.7));
      Complex complex10 = Complex.ZERO;
      complex10.isInfinite();
      Complex complex11 = complex7.acos();
      Complex complex12 = new Complex(2689.6356);
      complex12.tanh();
      complex2.getField();
      complex12.reciprocal();
      complex12.createComplex(20.0, 20.0);
      complex8.reciprocal();
      complex12.getField();
      complex9.atan();
      complex1.divide(complex4);
      complex11.nthRoot(796);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1499.3595104827218);
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex0.tan();
      complex3.NaN.abs();
      Complex complex4 = complex0.negate();
      complex4.INF.tan();
      Complex complex5 = complex4.exp();
      complex5.NaN.abs();
      complex3.toString();
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex5.add(Double.NaN);
      complex7.ZERO.cos();
      Complex complex8 = complex7.conjugate();
      complex8.sqrt1z();
      Complex complex9 = complex6.tanh();
      complex7.negate();
      complex9.subtract(complex2);
      Complex complex10 = new Complex(Double.NaN);
      complex10.reciprocal();
      Complex.valueOf(855624.0);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-1385.73049653));
      complex0.nthRoot(1396);
      complex0.I.abs();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.multiply(1396);
      Complex complex3 = complex2.ZERO.negate();
      complex1.INF.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex3.ZERO.subtract(complex5);
      Complex complex7 = complex5.atan();
      complex7.ZERO.divide((-149.23050265592488));
      Complex complex8 = Complex.valueOf((-1385.73049653));
      Complex complex9 = complex8.I.log();
      complex9.ONE.hashCode();
      Complex complex10 = Complex.valueOf(1.0, (-1385.73049653));
      Complex.valueOf(61.67825, (-1385.73049653));
      complex1.getArgument();
      complex5.nthRoot(1396);
      complex3.getReal();
      complex10.cos();
      complex3.toString();
      complex6.reciprocal();
      Complex complex11 = complex5.createComplex(9.39987974788905E-8, (-3.141592653589793));
      complex8.reciprocal();
      complex10.getField();
      complex1.atan();
      complex5.divide(complex11);
      int int0 = 4166;
      // Undeclared exception!
      complex4.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.INF;
      Complex complex3 = (Complex)complex0.NaN.readResolve();
      Complex complex4 = complex0.pow(complex2);
      complex4.I.toString();
      Complex complex5 = complex4.NaN.divide(complex0);
      complex0.equals(complex1);
      Complex complex6 = Complex.ONE;
      complex2.INF.hashCode();
      Complex complex7 = complex4.pow(Double.NaN);
      complex1.createComplex((-1879.4588540461966), 1.740249660600677E-253);
      Complex complex8 = Complex.valueOf(6.283185307179586, 1618.22);
      complex0.isInfinite();
      Complex complex9 = complex6.acos();
      Complex complex10 = complex3.tanh();
      complex9.getField();
      complex7.reciprocal();
      complex10.createComplex(611.951, 1618.22);
      complex8.reciprocal();
      complex5.getField();
      Complex complex11 = complex8.atan();
      complex2.divide(complex11);
      complex2.nthRoot(2552);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-1385.73049653));
      complex0.nthRoot(1396);
      complex0.I.abs();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.multiply(1396);
      Complex complex3 = complex2.ZERO.negate();
      complex1.INF.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex3.ZERO.subtract(complex5);
      Complex complex7 = complex5.atan();
      Complex complex8 = complex7.ZERO.divide((-149.23050265592488));
      Complex.valueOf(925.0);
      complex2.sqrt();
      complex7.toString();
      complex3.getArgument();
      Complex complex9 = new Complex(925.0);
      complex9.sqrt1z();
      Complex complex10 = complex9.reciprocal();
      complex7.toString();
      complex10.I.toString();
      Object object0 = complex5.readResolve();
      complex9.readResolve();
      complex7.cos();
      Complex complex11 = complex10.asin();
      complex8.equals(object0);
      complex6.getImaginary();
      complex11.sqrt1z();
      complex10.tan();
      Complex complex12 = Complex.ZERO;
      complex12.getImaginary();
      complex4.reciprocal();
      complex2.reciprocal();
      complex3.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex1.sqrt();
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.add(1378.3329876236485);
      Complex complex5 = complex2.log();
      complex3.log();
      complex3.sqrt1z();
      Complex complex6 = complex5.tan();
      Complex.valueOf(1635.032762601, 1635.032762601);
      Complex complex7 = complex4.reciprocal();
      complex4.log();
      Complex complex8 = complex2.atan();
      complex6.tanh();
      Object object1 = new Object();
      complex5.equals(object1);
      complex8.getArgument();
      complex3.equals(object0);
      complex2.getImaginary();
      try { 
        complex7.nthRoot((-1089));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,089
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2335.108813218315);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex1.tanh();
      complex3.getArgument();
      Complex complex4 = complex1.multiply(2335.108813218315);
      complex2.acos();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex2.log();
      complex4.hashCode();
      Complex complex8 = complex5.pow(547.726501940759);
      Complex complex9 = complex5.createComplex(2.414213562373095, 737.509144646129);
      Complex complex10 = Complex.valueOf(433.8826, (-351.2427980577121));
      complex3.isInfinite();
      Complex complex11 = complex10.acos();
      Complex complex12 = complex1.tanh();
      Complex complex13 = Complex.INF;
      complex13.getField();
      complex9.reciprocal();
      complex12.createComplex(433.8826, 2.3101551448625578E-152);
      complex11.reciprocal();
      Complex complex14 = Complex.valueOf(2335.108813218315);
      complex14.getField();
      complex7.atan();
      complex0.divide(complex6);
      complex8.nthRoot(2552);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2335.108813218315);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.tanh();
      complex3.getArgument();
      Complex complex4 = complex3.multiply(20.0);
      Complex complex5 = complex3.acos();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.tanh();
      complex6.log();
      Complex complex8 = Complex.ZERO;
      complex8.hashCode();
      Complex complex9 = complex4.pow(484.54);
      Complex complex10 = complex1.createComplex(Double.NaN, 0.0);
      Complex.valueOf(0.2723414689118316, (-184.00313471));
      complex6.isInfinite();
      Complex complex11 = complex8.acos();
      Complex complex12 = complex7.tanh();
      complex12.getField();
      Complex complex13 = complex11.reciprocal();
      complex10.createComplex(484.54, 1.0);
      complex9.reciprocal();
      complex1.getField();
      complex2.atan();
      complex0.divide(complex13);
      complex5.nthRoot(2552);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2335.108813218315);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.ONE.tanh();
      complex3.I.getArgument();
      Complex complex4 = complex0.ONE.multiply(2335.108813218315);
      Complex complex5 = complex0.negate();
      complex5.NaN.tanh();
      Complex complex6 = complex3.log();
      complex6.INF.hashCode();
      complex0.pow(6.283185307179586);
      complex6.createComplex(0.0, 0.0);
      Complex complex7 = Complex.valueOf(6.283185307179586, 0.0);
      complex4.isInfinite();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex8.I.tanh();
      complex4.getField();
      complex6.reciprocal();
      Complex complex10 = complex7.createComplex(1.5707963267948966, 0.0);
      complex10.reciprocal();
      complex7.getField();
      complex7.atan();
      complex9.divide(complex1);
      complex2.nthRoot(2552);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-1385.73049653));
      int int0 = 1396;
      complex0.nthRoot(1396);
      Complex complex1 = complex0.sqrt1z();
      double double0 = (-1875.029973143379);
      Complex complex2 = Complex.valueOf((-1385.73049653));
      complex0.pow(complex2);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.multiply(1607);
      complex4.multiply(1396);
      complex3.sqrt();
      Complex complex5 = Complex.ZERO;
      int int1 = (-2460);
      try { 
        complex5.nthRoot((-2460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,460
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.NaN.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.INF.divide(complex0);
      complex0.NaN.getArgument();
      complex3.getImaginary();
      complex2.ONE.asin();
      Complex complex7 = complex3.multiply(925);
      complex2.sqrt();
      Complex complex8 = Complex.valueOf((double) 925, (-1582.779769));
      complex8.I.pow(complex0);
      Complex complex9 = complex8.ZERO.cos();
      complex9.INF.nthRoot(925);
      Complex complex10 = complex2.cosh();
      Complex complex11 = Complex.valueOf(1.1102230246251565E-16);
      Complex complex12 = Complex.ONE;
      complex12.add(604.69471);
      complex3.readResolve();
      Complex complex13 = Complex.NaN;
      complex10.add(complex5);
      complex5.conjugate();
      complex0.sqrt1z();
      Complex complex14 = new Complex((-1582.779769), 1.5707963267948966);
      complex14.tanh();
      complex7.negate();
      complex12.subtract(complex11);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.NaN.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.INF.divide(complex0);
      complex0.NaN.getArgument();
      complex3.getImaginary();
      complex2.ONE.asin();
      complex3.multiply(925);
      complex2.sqrt();
      Complex complex7 = Complex.valueOf((double) 925, (-1582.779769));
      complex7.I.pow(complex0);
      Complex complex8 = complex7.ZERO.cos();
      complex8.INF.nthRoot(925);
      Complex complex9 = complex2.cosh();
      Complex.valueOf(Double.NaN);
      Complex complex10 = complex9.add(3696.57487);
      complex3.readResolve();
      Complex complex11 = Complex.NaN;
      complex6.add(complex7);
      Complex complex12 = new Complex(0.2386477291584015, (-874.0));
      Complex complex13 = complex12.conjugate();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex14.sqrt1z();
      complex10.tanh();
      complex13.negate();
      complex4.subtract(complex15);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-1385.73049653));
      complex0.nthRoot(1396);
      complex0.I.abs();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.multiply(1396);
      Complex complex3 = complex2.ZERO.negate();
      complex1.INF.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.log();
      complex3.ZERO.subtract(complex5);
      Complex complex6 = complex5.atan();
      complex6.ZERO.divide((-149.23050265592488));
      Complex complex7 = Complex.valueOf((-1385.73049653));
      Complex complex8 = complex7.I.log();
      complex8.ONE.hashCode();
      complex5.I.negate();
      Complex complex9 = Complex.valueOf(1.0, (-1385.73049653));
      Complex.valueOf(61.67825, (-1385.73049653));
      complex1.getArgument();
      complex5.nthRoot(1396);
      complex3.getReal();
      complex9.cos();
      complex3.toString();
      complex1.sin();
      complex2.multiply(0);
      complex0.nthRoot(1396);
      Complex complex10 = complex2.add(2.0);
      Complex complex11 = Complex.valueOf(6.283185307179586, 61.67825);
      complex11.ONE.getField();
      complex10.negate();
      complex9.add(61.67825);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-617.334));
      Complex complex1 = complex0.tan();
      complex0.getArgument();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.reciprocal();
      complex0.toString();
      complex3.readResolve();
      complex0.readResolve();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex3.asin();
      complex0.equals((Object) null);
      complex1.getImaginary();
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex5.tan();
      complex4.getImaginary();
      complex7.reciprocal();
      Complex complex8 = complex7.reciprocal();
      complex8.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1385.73049653));
      complex0.nthRoot(1396);
      complex0.I.abs();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.multiply(1396);
      Complex complex3 = complex2.ZERO.negate();
      complex1.INF.hashCode();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.log();
      complex3.ZERO.subtract(complex5);
      Complex complex6 = complex5.atan();
      complex6.ZERO.divide((-149.23050265592488));
      Complex complex7 = Complex.valueOf((-1385.73049653));
      Complex complex8 = complex7.I.log();
      complex8.ONE.hashCode();
      Complex complex9 = Complex.valueOf(1.0, (-1385.73049653));
      Complex.valueOf(61.67825, (-1385.73049653));
      complex1.getArgument();
      complex5.nthRoot(1396);
      complex3.getReal();
      complex9.cos();
      complex3.toString();
      complex1.sin();
      complex2.multiply(0);
      complex0.nthRoot(1396);
      Complex complex10 = complex2.add(2.0);
      Complex.valueOf(6.283185307179586, 61.67825);
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.add(Double.NaN);
      Complex complex2 = Complex.valueOf((-461.88568706), 2.0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex3.I.log();
      complex5.ONE.sinh();
      Complex complex6 = complex1.divide(2.0);
      Complex complex7 = complex0.pow(complex3);
      complex7.sqrt();
      Complex complex8 = complex2.createComplex((-3296.9912428308), (-3296.9912428308));
      complex8.NaN.multiply((-816));
      complex4.multiply(complex5);
      complex5.getArgument();
      complex4.toString();
      complex3.equals("(0.7071067811865476, 0.7071067811865475)");
      complex6.subtract(0.2516399025917053);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      complex1.I.hashCode();
      complex1.ONE.readResolve();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.reciprocal();
      complex1.I.multiply((-3.940510424527919E-20));
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex6.NaN.divide(complex5);
      Complex complex8 = complex6.multiply(3518);
      complex8.INF.cos();
      Complex complex9 = Complex.valueOf(2.0);
      complex6.INF.sqrt();
      complex5.toString();
      complex7.getArgument();
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex9.reciprocal();
      complex11.NaN.toString();
      complex0.readResolve();
      complex1.readResolve();
      complex9.I.cos();
      complex1.ONE.asin();
      complex9.equals((Object) null);
      complex0.getImaginary();
      complex10.sqrt1z();
      complex4.tan();
      complex2.getImaginary();
      complex11.reciprocal();
      complex3.reciprocal();
      complex9.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex0.abs();
      complex1.reciprocal();
      complex1.ONE.log();
      Complex complex2 = Complex.ZERO;
      int int0 = (-573);
      try { 
        complex2.I.nthRoot((-573));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -573
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      complex0.getImaginary();
      complex0.nthRoot(1);
      complex0.getField();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1368.02298552971, 1368.02298552971);
      Complex complex1 = Complex.valueOf(1368.02298552971, 1368.02298552971);
      Complex complex2 = complex1.divide(2.3410181999206543);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.ONE.conjugate();
      complex4.I.sqrt();
      complex3.tanh();
      complex1.abs();
      Complex complex5 = complex0.sqrt();
      complex5.ONE.pow(2137.0);
      Complex complex6 = complex1.subtract(complex2);
      Complex complex7 = complex6.NaN.atan();
      complex7.NaN.pow(2.3410181999206543);
      Complex.valueOf(0.0);
      complex7.ONE.getArgument();
      Complex complex8 = complex0.I.tan();
      Complex complex9 = complex8.NaN.negate();
      complex9.INF.pow(complex2);
      complex1.sqrt1z();
      complex0.sqrt();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = Complex.valueOf((-1875.029973143379));
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.ZERO.reciprocal();
      complex6.multiply(796);
      complex3.INF.multiply(0);
      complex5.NaN.sqrt();
      complex0.INF.nthRoot(1607);
      complex0.INF.subtract(complex3);
      complex5.NaN.createComplex((-1875.029973143379), 0.0);
      complex0.ONE.readResolve();
      complex0.nthRoot(1607);
      complex3.subtract((double) 1607);
      complex5.toString();
      Complex complex7 = complex4.divide(complex0);
      complex7.sinh();
      complex5.negate();
      complex2.toString();
      complex5.subtract(complex6);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(871.301, 1.1589095247718807E59);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.47280728816986084);
      complex0.hashCode();
      Complex complex1 = complex0.sqrt();
      complex1.readResolve();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.add(1378.3329876236485);
      Complex complex4 = complex2.ONE.log();
      complex2.NaN.log();
      complex4.ZERO.sqrt1z();
      Complex complex5 = complex4.I.tan();
      Complex.valueOf(0.47280728816986084, 1378.3329876236485);
      complex4.I.reciprocal();
      Complex complex6 = complex2.I.log();
      complex6.INF.atan();
      complex0.readResolve();
      complex5.tanh();
      complex2.equals(complex0);
      complex0.NaN.getArgument();
      complex1.equals("'6");
      complex3.getImaginary();
      complex5.nthRoot(383);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.add(complex2);
      complex3.ONE.tan();
      complex0.cosh();
      double double1 = (-1377.0);
      Complex complex4 = complex0.I.conjugate();
      complex4.NaN.subtract(complex3);
      Complex complex5 = complex4.ONE.tanh();
      complex5.NaN.tanh();
      Complex.valueOf((-1377.0));
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = new Complex(0.0, 6.283185307179586);
      Complex complex2 = complex0.I.multiply((-3785));
      Complex complex3 = complex2.ONE.createComplex((-926.897), 0.0);
      complex3.INF.sin();
      complex1.ONE.multiply((-932));
      complex0.INF.multiply(complex1);
      complex0.abs();
      Complex complex4 = complex0.reciprocal();
      complex2.negate();
      complex4.I.divide(0.0);
      Complex complex5 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.asin();
      Complex complex6 = Complex.valueOf((-926.897));
      complex4.pow(6.283185307179586);
      complex5.sqrt1z();
      Complex complex7 = complex3.INF.sqrt();
      complex2.isNaN();
      complex3.createComplex((-142.1479425227251), 0.0);
      complex6.subtract(6.283185307179586);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      complex1.INF.getArgument();
      complex1.NaN.asin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.divide(complex2);
      complex2.hashCode();
      complex0.multiply(complex3);
      complex3.I.nthRoot(17);
      Complex complex4 = complex2.pow(0.0);
      complex4.abs();
      complex4.NaN.cosh();
      complex2.getField();
      complex0.sin();
      Complex complex5 = complex2.divide(Double.NaN);
      Complex complex6 = complex5.cosh();
      Complex complex7 = Complex.valueOf(0.0, (double) 17);
      complex7.I.nthRoot(17);
      Complex complex8 = complex5.ZERO.multiply(17);
      complex6.I.createComplex(Double.NaN, 0.0);
      complex0.multiply(2.0);
      Complex complex9 = complex4.ONE.sqrt1z();
      complex0.readResolve();
      Complex.valueOf(2.0);
      Complex.valueOf(Double.NaN);
      Complex complex10 = complex4.asin();
      complex9.sqrt();
      Complex complex11 = complex10.cos();
      complex11.multiply(complex8);
      complex2.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.2689530849456787);
      complex0.I.nthRoot(1084);
      Complex complex1 = Complex.valueOf(0.2689530849456787);
      Complex complex2 = complex0.NaN.cosh();
      complex2.I.subtract(Double.POSITIVE_INFINITY);
      complex2.ONE.createComplex((-2.1596593091833788E-8), 2.0699801445007324);
      Complex complex3 = complex1.ONE.exp();
      complex3.ONE.hashCode();
      complex3.NaN.getField();
      Complex complex4 = complex0.asin();
      complex4.subtract(complex1);
      Complex complex5 = complex1.conjugate();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(1.3029727935791016);
      complex0.ONE.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex1.cos();
      complex3.log();
      Complex complex4 = complex0.INF.subtract(1.3029727935791016);
      complex4.ONE.sqrt1z();
      complex0.abs();
      Complex complex5 = complex2.log();
      complex0.ZERO.atan();
      Complex complex6 = complex0.I.divide(complex1);
      complex6.readResolve();
      Complex complex7 = complex4.reciprocal();
      complex7.NaN.negate();
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex8.NaN.createComplex(1.3029727935791016, 1.3029727935791016);
      complex7.NaN.getField();
      complex9.getArgument();
      complex1.getArgument();
      complex5.isInfinite();
      complex8.I.divide(complex9);
      complex1.isNaN();
      complex0.toString();
      Complex complex10 = complex8.sqrt1z();
      complex10.ONE.sqrt1z();
      complex8.log();
      complex0.tanh();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.I.acos();
      complex0.isInfinite();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.sinh();
      complex3.ZERO.getArgument();
      complex2.ZERO.cos();
      Complex complex4 = complex3.ONE.exp();
      complex3.ONE.add((-1483.48));
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex6.I.sqrt1z();
      complex2.I.cos();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex8.NaN.log();
      complex8.NaN.abs();
      complex8.NaN.log();
      Complex complex10 = complex6.conjugate();
      Complex complex11 = complex10.INF.add(complex7);
      complex10.getField();
      complex11.add(1.9332630743320287E-8);
      complex5.multiply((-1483.48));
      Complex complex12 = Complex.valueOf(0.0);
      complex12.getReal();
      Complex complex13 = complex1.sinh();
      complex13.I.sin();
      Complex.valueOf((-94.88608062), 0.0);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.getField();
      Complex complex1 = complex0.I.tan();
      complex1.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.conjugate();
      complex3.ONE.hashCode();
      complex3.readResolve();
      complex2.ZERO.toString();
      Complex complex4 = complex2.ZERO.createComplex(0.0, 0.0);
      complex2.INF.divide(complex0);
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.negate();
      complex6.log();
      complex4.NaN.cosh();
      complex5.getArgument();
      complex3.getField();
      complex5.multiply(1536);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2302.4163850760806));
      Complex complex1 = complex0.ONE.negate();
      complex0.isInfinite();
      Complex complex2 = complex0.tan();
      complex2.I.tanh();
      complex2.isNaN();
      complex2.cosh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1871.0), 974.648247123962);
      Complex complex1 = Complex.valueOf(2516.69105);
      Complex complex2 = complex1.subtract(2094.67);
      complex0.isInfinite();
      Complex complex3 = complex1.sin();
      complex3.ONE.sin();
      complex1.multiply(3760);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0.0);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      int int0 = (-1);
      try { 
        complex2.ZERO.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(2227.9, 0.0);
      complex0.nthRoot(2486);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex0.INF.conjugate();
      complex2.INF.hashCode();
      complex3.ONE.add(complex0);
      Complex complex4 = complex0.I.divide((-1704.0003809996156));
      complex0.conjugate();
      complex3.ONE.abs();
      complex3.pow(complex4);
      Complex complex5 = complex2.sqrt1z();
      complex5.I.reciprocal();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.3916988968849182);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.pow(0.0);
      complex2.acos();
      complex1.divide(0.0);
      complex1.divide(0.0);
      Complex complex3 = complex0.INF.divide(3774.4);
      complex3.NaN.conjugate();
      Complex complex4 = complex0.cosh();
      complex4.atan();
      Complex complex5 = complex0.tanh();
      complex0.I.toString();
      complex5.INF.toString();
      complex5.toString();
      complex5.multiply(3743);
      complex3.sqrt1z();
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(1499.3595104827218);
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.tan();
      complex2.NaN.abs();
      Complex complex3 = complex0.negate();
      complex3.INF.tan();
      Complex complex4 = complex3.exp();
      complex4.NaN.abs();
      complex2.toString();
      complex4.divide(complex2);
      Complex complex5 = complex4.add(Double.NaN);
      Complex complex6 = complex5.ZERO.cos();
      complex6.NaN.atan();
      Complex complex7 = complex0.add(complex4);
      complex7.pow(1499.3595104827218);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-2562.1927385);
      Complex complex1 = complex0.NaN.sinh();
      double double1 = (-684.47);
      Complex complex2 = complex1.divide((-684.47));
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex0.ONE.subtract((-2562.1927385));
      complex3.subtract((-2562.1927385));
      complex0.sin();
      complex0.sqrt1z();
      Complex complex4 = complex3.I.sqrt1z();
      try { 
        complex4.INF.nthRoot((-1742));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,742
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(1351.14307183767, 7.568772963781632E-10);
      complex1.I.sinh();
      Complex complex2 = Complex.valueOf(0.0, 7.568772963781632E-10);
      complex0.ONE.divide(complex1);
      Complex complex3 = complex0.sqrt();
      complex3.ONE.asin();
      complex0.asin();
      complex1.ZERO.readResolve();
      complex0.hashCode();
      complex2.toString();
      complex1.isNaN();
      Complex complex4 = Complex.valueOf((-2662.79), 2797.0);
      complex4.ZERO.sqrt();
      complex3.pow(complex2);
      Complex complex5 = complex3.pow(2797.0);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.NaN.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.sqrt();
      complex5.INF.divide(complex0);
      complex0.NaN.getArgument();
      complex3.getImaginary();
      Complex complex6 = complex2.ONE.asin();
      complex3.multiply(925);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = Complex.valueOf((double) 925, (-1582.779769));
      Complex complex9 = complex8.I.pow(complex0);
      Complex complex10 = complex8.ZERO.cos();
      complex10.INF.nthRoot(925);
      complex2.cosh();
      Complex.valueOf((double) 925);
      complex10.ONE.add(3.8410992889527954E-214);
      complex1.readResolve();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex10.add(complex11);
      complex12.ZERO.conjugate();
      complex3.sqrt1z();
      complex6.tanh();
      complex7.negate();
      complex3.subtract(complex0);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-617.334));
      complex0.tan();
      complex0.multiply((-319));
      complex0.readResolve();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3199.9, 3199.9);
      Complex complex1 = complex0.I.pow(3199.9);
      complex0.ONE.toString();
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex1.ZERO.reciprocal();
      Complex complex5 = complex4.ZERO.subtract(complex0);
      Complex complex6 = complex1.cosh();
      complex0.getReal();
      Complex complex7 = complex0.INF.cos();
      Complex complex8 = complex7.ZERO.divide(3199.9);
      complex6.ZERO.add(0.0);
      Complex complex9 = complex0.createComplex(3199.9, 3199.9);
      complex9.INF.conjugate();
      Complex complex10 = complex9.I.subtract(complex6);
      complex9.NaN.createComplex(3199.9, 0.0);
      complex1.I.sqrt();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex0.subtract(3199.9);
      complex3.sqrt1z();
      complex11.abs();
      Complex complex13 = complex6.cosh();
      complex13.ONE.pow(complex4);
      complex2.getArgument();
      complex5.equals("(1.0, 0.0)");
      Object object0 = complex0.readResolve();
      complex8.NaN.subtract(complex10);
      complex12.equals(object0);
      complex8.readResolve();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2335.108813218315);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.ONE.tanh();
      complex3.I.getArgument();
      Complex complex4 = complex0.ONE.multiply(2335.108813218315);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.negate();
      complex6.NaN.tanh();
      Complex complex7 = complex5.log();
      complex7.INF.hashCode();
      complex5.pow(6.283185307179586);
      complex7.createComplex(0.0, 0.0);
      Complex complex8 = Complex.valueOf(6.283185307179586, 0.0);
      complex5.isInfinite();
      Complex complex9 = complex6.acos();
      Complex complex10 = complex9.I.tanh();
      complex4.getField();
      complex7.reciprocal();
      Complex complex11 = complex8.createComplex(1.5707963267948966, 0.0);
      complex11.reciprocal();
      complex8.getField();
      complex8.atan();
      complex10.divide(complex1);
      complex2.nthRoot(2552);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.INF.getArgument();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = Complex.I;
      complex1.ZERO.negate();
      Complex complex4 = complex3.INF.add(complex0);
      complex0.ONE.sinh();
      complex2.divide(complex3);
      complex0.isNaN();
      Complex complex5 = complex0.I.cosh();
      complex2.multiply(699);
      Complex complex6 = complex2.acos();
      complex4.hashCode();
      Complex complex7 = complex1.pow(0.0);
      complex7.tanh();
      complex5.multiply(699);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex3.I.sinh();
      Complex complex5 = complex1.I.divide(complex2);
      complex5.NaN.cos();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.add(complex0);
      complex4.asin();
      complex6.getArgument();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.ZERO.nthRoot(251);
      Complex complex9 = complex8.ONE.sqrt();
      Complex complex10 = complex1.acos();
      complex4.multiply(complex6);
      complex10.isInfinite();
      Complex complex11 = complex3.pow(0.0);
      complex8.multiply(0.0);
      Complex complex12 = complex2.pow(complex6);
      complex12.ZERO.createComplex(0.0, 3189.42);
      complex9.conjugate();
      complex11.asin();
      complex7.multiply(251);
      complex11.cos();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(612.5815, 0.0);
      Complex complex1 = complex0.ONE.multiply((-3482.0));
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.pow(complex2);
      complex0.createComplex((-3142.2442), (-3142.2442));
      complex3.NaN.cos();
      Complex complex4 = Complex.valueOf((-3482.0), (-1018.5632631718769));
      Complex complex5 = complex2.I.createComplex(4.597700093952774E14, 0.0);
      Complex complex6 = complex0.sinh();
      complex6.NaN.multiply((-629));
      complex6.ONE.toString();
      complex5.INF.getArgument();
      Complex complex7 = complex0.divide((-3482.0));
      Complex complex8 = complex1.atan();
      Complex complex9 = complex1.INF.tan();
      Complex complex10 = complex5.atan();
      complex2.getArgument();
      complex1.isInfinite();
      complex10.getField();
      Complex complex11 = complex8.pow(3.5451314095271004E52);
      complex11.NaN.sqrt();
      complex8.hashCode();
      complex9.pow(4.597700093952774E14);
      complex4.subtract((-3147.3584727189054));
      complex3.exp();
      complex7.divide(3.5451314095271004E52);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.4564130306243896);
      Complex complex1 = complex0.ZERO.add(0.0);
      complex0.ZERO.toString();
      Complex complex2 = complex1.ONE.createComplex(1.4564130306243896, 0.0);
      complex2.INF.getField();
      complex0.I.getField();
      complex1.INF.toString();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.add(complex4);
      complex5.I.sinh();
      complex5.ZERO.add(complex1);
      complex0.getReal();
      Complex complex6 = complex4.sin();
      complex6.multiply(complex1);
      complex0.NaN.readResolve();
      complex1.multiply((-204));
      complex1.tanh();
      complex3.INF.sqrt1z();
      complex3.pow(2316.0);
      Complex.valueOf((double) (-204));
      complex1.toString();
      complex3.abs();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex2.INF.reciprocal();
      complex3.NaN.add((-1.0E-6));
      Complex.valueOf(Double.NaN, (-1.0E-6));
      complex3.I.toString();
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = complex4.subtract(Double.NaN);
      Complex complex6 = complex5.ONE.sinh();
      complex0.getField();
      Complex complex7 = complex0.NaN.subtract(Double.NaN);
      complex7.ONE.abs();
      Complex complex8 = complex1.sqrt1z();
      complex8.ONE.multiply(complex1);
      Complex complex9 = Complex.valueOf(811.04697091);
      Complex complex10 = complex9.pow(811.04697091);
      complex10.ZERO.reciprocal();
      complex9.toString();
      complex1.subtract((-3816.349315235));
      Complex complex11 = complex1.divide(Double.NaN);
      complex0.ZERO.exp();
      complex2.acos();
      complex1.asin();
      complex6.sqrt1z();
      complex5.isInfinite();
      complex0.isInfinite();
      Complex.valueOf(0.0);
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.ZERO.tanh();
      Complex complex5 = complex0.sqrt1z();
      complex5.isInfinite();
      complex4.getArgument();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex0.NaN.add(complex3);
      complex7.INF.multiply(1694);
      complex6.I.acos();
      complex3.I.pow(0.0);
      Complex complex8 = complex5.pow(complex0);
      complex4.nthRoot(1);
      complex8.getField();
      complex1.add(complex6);
      Complex complex9 = complex3.acos();
      complex9.I.atan();
      Complex complex10 = complex4.multiply(0.0);
      complex10.I.log();
      complex3.subtract((double) 1);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex1 = Complex.INF;
      complex0.NaN.readResolve();
      Complex complex2 = complex0.pow(complex1);
      complex2.I.toString();
      Complex complex3 = complex2.NaN.divide(complex0);
      boolean boolean0 = complex0.equals(object0);
      assertTrue(boolean0);
      
      Complex complex4 = Complex.ONE;
      complex1.INF.hashCode();
      double double0 = complex2.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex5 = complex1.ZERO.asin();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.equals((Object)object0));
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.subtract(complex4);
      complex1.getArgument();
      complex6.INF.subtract(Double.NaN);
      Complex complex7 = complex2.pow(1802.16897682896);
      Complex complex8 = complex6.atan();
      complex1.getArgument();
      complex4.readResolve();
      Complex complex9 = complex2.pow(Double.NaN);
      Complex complex10 = complex9.ONE.add(complex3);
      Complex complex11 = complex7.pow(complex8);
      complex10.getReal();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex9.negate();
      Complex complex13 = complex11.sin();
      assertEquals(0.4023594781085251, complex8.getImaginary(), 0.01);
      assertSame(complex13, complex10);
      
      double double1 = complex7.getArgument();
      assertFalse(complex0.equals((Object)complex6));
      assertSame(complex7, complex12);
      assertNotSame(complex2, complex7);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.26296502351760864);
      Complex complex1 = complex0.divide(0.26296502351760864);
      Complex complex2 = complex0.add(20.0);
      double double0 = complex2.getReal();
      assertEquals(20.0, double0, 0.01);
      
      complex2.getField();
      assertEquals(0.26296502351760864, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.cos();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(1613.85291);
      Complex complex1 = complex0.INF.divide(0.0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.valueOf(2.5243410574836706E106);
      assertEquals(2.5243410574836706E106, complex2.getReal(), 0.01);
      
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = (Complex)complex4.ONE.readResolve();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex4.ONE.acos();
      assertTrue(complex3.equals((Object)complex5));
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      complex0.hashCode();
      assertEquals(1613.85291, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(838.7625611);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.NaN.divide(838.7625611);
      Complex complex3 = complex0.acos();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(7.425074489419744, complex3.getImaginary(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(838.7625611, 0.0)", string0);
      
      Complex complex4 = complex0.sin();
      complex4.INF.createComplex(2801.079221225, 2801.079221225);
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      Complex complex5 = complex0.sin();
      double double0 = complex5.abs();
      assertEquals(0.04266445449196391, double0, 0.01);
      
      complex4.ZERO.readResolve();
      Complex complex6 = Complex.ONE;
      complex4.equals(complex6);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex1.multiply(complex7);
      assertTrue(complex8.equals((Object)complex1));
      assertSame(complex8, complex2);
      assertFalse(complex8.equals((Object)complex7));
      assertNotSame(complex8, complex1);
  }
}
