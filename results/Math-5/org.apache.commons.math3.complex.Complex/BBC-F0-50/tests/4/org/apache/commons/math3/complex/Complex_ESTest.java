/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:04:08 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.407017154070999E7, 2.407017154070999E7);
      complex0.asin();
      Complex complex1 = Complex.valueOf(2.407017154070999E7);
      complex1.I.hashCode();
      Complex complex2 = complex1.pow(8.612421577170572);
      complex2.acos();
      complex1.sin();
      Complex complex3 = complex2.tan();
      Complex complex4 = new Complex((-4223.826966467395));
      complex4.conjugate();
      Complex complex5 = new Complex((-4223.826966467395), 2.407017154070999E7);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(6.0, Double.POSITIVE_INFINITY);
      complex1.multiply(745);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-1.999517), Double.POSITIVE_INFINITY);
      complex0.I.sinh();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(8.310629417537063E264);
      Complex complex2 = complex0.multiply(complex1);
      complex0.readResolve();
      Complex complex3 = complex2.asin();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(2.4070172E7, 3787.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.readResolve();
      complex1.asin();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2070.824457, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.cos();
      complex0.ZERO.getField();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      complex2.ZERO.readResolve();
      Complex complex4 = complex1.INF.tan();
      Complex complex5 = Complex.valueOf(0.0);
      complex4.INF.divide(complex5);
      Complex complex6 = complex0.subtract((-20.0));
      complex6.ZERO.tan();
      Complex complex7 = complex1.add(complex3);
      complex7.cos();
      complex7.NaN.negate();
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex9.ONE.sqrt();
      complex10.add(3121.5);
      complex9.NaN.abs();
      Complex complex11 = complex9.ONE.asin();
      complex11.NaN.add(complex6);
      complex9.readResolve();
      Complex complex12 = complex3.log();
      complex1.divide((-20.0));
      complex2.abs();
      complex1.atan();
      complex12.subtract(complex1);
      Complex.valueOf((-3055.2128241188084), (-20.0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2.4070172E7));
      complex0.divide(complex1);
      Complex complex2 = complex0.multiply((-2052));
      complex2.sqrt();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2967.80844202, Double.POSITIVE_INFINITY);
      int int0 = (-1665);
      try { 
        complex1.nthRoot((-1665));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,665
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = new Object();
      Complex complex0 = Complex.valueOf(3178.0, Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      Complex.valueOf(721.69406, 3.0374839443564585E-159);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.subtract(complex1);
      Complex complex2 = new Complex(37, (-3.732266217624991E251));
      Complex complex3 = complex2.sqrt1z();
      Complex.valueOf(3787.0, (double) 37);
      complex1.asin();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.sinh();
      complex0.divide(complex1);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-412.433198));
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.add((-412.433198));
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = Complex.valueOf((-937.8789753));
      complex0.abs();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex6.add(complex4);
      complex8.NaN.getField();
      complex8.NaN.add(complex1);
      complex7.createComplex((-937.8789753), (-412.433198));
      Complex complex9 = complex4.sinh();
      complex5.add(Double.NaN);
      complex7.cos();
      Complex.valueOf(412.433198);
      complex3.sin();
      complex6.subtract((-937.8789753));
      complex9.reciprocal();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(0.3910386562347412);
      Complex complex1 = complex0.I.subtract(Double.NaN);
      Complex complex2 = complex0.pow(0.3910386562347412);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex1.NaN.reciprocal();
      complex4.NaN.getArgument();
      complex3.INF.sqrt1z();
      complex0.getField();
      Complex complex5 = Complex.valueOf(0.3910386562347412);
      complex1.I.hashCode();
      complex5.INF.pow(3787.03561);
      Complex complex6 = complex2.sqrt();
      complex6.INF.hashCode();
      Complex complex7 = complex1.pow(7.462678536479685E-9);
      complex7.multiply(0.3910386562347412);
      Complex complex8 = complex7.multiply(complex4);
      Complex complex9 = complex5.multiply(0.3910386562347412);
      complex9.INF.getField();
      complex1.hashCode();
      complex9.getField();
      complex4.add(0.3910386562347412);
      complex3.readResolve();
      Complex complex10 = complex4.acos();
      complex10.asin();
      Complex complex11 = complex5.asin();
      complex11.readResolve();
      Complex complex12 = complex11.ZERO.tan();
      complex12.pow(Double.NaN);
      complex0.NaN.getArgument();
      Complex.valueOf((-1068.0583649), (-1068.0583649));
      complex4.acos();
      complex10.sqrt1z();
      complex8.createComplex(4.267089756924666E-8, 3.846720258072078E-173);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(2177.0170858673);
      try { 
        complex1.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-1111.541738), 0.1808556318283081);
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.I.add((-1230.14569085));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex0.divide(complex3);
      complex4.NaN.asin();
      Complex complex5 = complex4.pow((-1.0013856273567325));
      complex4.ZERO.exp();
      Complex complex6 = complex0.multiply(17);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex4.multiply(17);
      complex8.ONE.sin();
      Complex complex9 = complex7.divide(0.1808556318283081);
      complex7.ZERO.cosh();
      complex1.add(complex5);
      complex0.cosh();
      Complex complex10 = complex9.pow(complex3);
      Complex complex11 = complex2.sqrt();
      complex11.createComplex(1.1730463525082348E-7, 1.1730463525082348E-7);
      complex3.getField();
      complex3.ONE.conjugate();
      complex7.exp();
      Complex complex12 = complex6.tanh();
      complex12.I.pow(complex5);
      complex10.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2778508303324259E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf(3483.950082, 3594.72058952);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.INF.tan();
      Complex complex5 = complex1.I.log();
      Complex complex6 = complex0.I.cos();
      Complex complex7 = complex6.ZERO.pow(complex4);
      complex0.ONE.toString();
      complex4.INF.conjugate();
      Complex complex8 = complex0.sqrt();
      complex0.multiply((-2455));
      complex3.toString();
      complex6.sqrt();
      complex0.readResolve();
      complex4.pow((double) (-2455));
      Complex complex9 = complex2.pow(3483.950082);
      Complex complex10 = complex1.multiply((-2455));
      Complex complex11 = complex6.divide(complex9);
      complex1.conjugate();
      Complex complex12 = complex3.multiply(complex10);
      complex12.I.acos();
      complex7.multiply((-2455));
      complex5.INF.sinh();
      Complex complex13 = Complex.ZERO;
      complex5.equals(complex13);
      Complex.valueOf((double) (-2455), 3483.950082);
      complex8.toString();
      complex11.exp();
      complex11.abs();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(0.7789255310326417, (-721.4223957));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex.valueOf(0.7789255310326417, (-225.2234));
      Complex complex2 = Complex.valueOf(0.7789255310326417);
      complex2.tanh();
      complex0.sinh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.subtract(complex3);
      complex3.sqrt1z();
      Complex.valueOf(0.0, (-721.4223957));
      complex4.add((-1.0004657661348304));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(1766.63652737743);
      Complex complex1 = Complex.I;
      complex1.getField();
      complex0.NaN.log();
      Complex complex2 = Complex.valueOf(2753.0, 20.0);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = Complex.valueOf(449.0721555603, 721.6940643);
      complex1.tanh();
      Complex complex6 = complex3.sinh();
      complex4.divide(complex6);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      double double0 = 2967.80844202;
      Complex complex0 = new Complex((-646.7), 2967.80844202);
      int int0 = 444;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(1766.63652737743);
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = Complex.valueOf(2753.0, 20.0);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = Complex.valueOf(449.0721555603, 721.6940643);
      complex4.conjugate();
      complex5.cos();
      Complex complex6 = Complex.valueOf(721.6940643, 20.0);
      Complex.valueOf(463.3486792177679, Double.POSITIVE_INFINITY);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(517025.6288230757);
      complex0.divide((double) 1);
      Complex complex1 = Complex.valueOf((-20.0), 2617.1529479216683);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2984.36433844);
      Complex complex1 = complex0.atan();
      complex0.subtract((-20.0));
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-20.0), (-20.0));
      Complex complex4 = Complex.valueOf(1067.88);
      complex2.equals(complex4);
      complex3.tan();
      complex3.ONE.nthRoot(1982);
      complex3.ZERO.sqrt();
      complex4.nthRoot(1982);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2070.977075));
      Complex complex1 = new Complex((-7.475571347653619E-8), (-2070.977075));
      complex0.I.multiply(complex1);
      complex0.subtract((-1.0));
      Complex.valueOf(1897.3172547, (-1992.6677926618));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1766.63652737743);
      complex0.add(449.0721555603);
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = Complex.valueOf(2753.0, 20.0);
      Complex complex3 = complex2.subtract(complex0);
      complex3.readResolve();
      Complex complex4 = Complex.valueOf(5352.5269479608305, 721.6940643);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.sinh();
      complex6.INF.nthRoot(807);
      complex3.subtract(complex4);
      complex5.sqrt1z();
      Complex complex7 = Complex.valueOf(3787.03561, 2.179424521221378E-224);
      Complex complex8 = complex7.asin();
      complex8.add(2.179424521221378E-224);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract((-1606.8));
      complex1.sinh();
      Complex complex3 = Complex.valueOf((-608.447537736492), (-608.447537736492));
      complex0.equals(complex1);
      Complex complex4 = complex3.divide((-608.447537736492));
      complex4.conjugate();
      complex2.pow(2.6000471621223296E-230);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = new Complex(1766.63652737743, 979.8165733536022);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.pow(complex0);
      complex3.multiply(1766.63652737743);
      complex3.createComplex((-3304.48593562), 1.5707961795530863);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-2070.977075), Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(Double.NaN, (-2070.977075));
      Complex complex3 = complex2.pow(complex1);
      complex3.multiply((-20.0));
      complex1.createComplex((-20.0), (-20.0));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.sinh();
      complex1.acos();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.INF.negate();
      double double0 = 376.24471;
      complex5.ZERO.createComplex(376.24471, 376.24471);
      complex4.I.getField();
      Complex complex6 = complex3.ONE.multiply(complex4);
      complex3.abs();
      complex6.divide(0.8414709848078965);
      Complex complex7 = complex3.sqrt1z();
      complex3.reciprocal();
      // Undeclared exception!
      complex7.nthRoot(1073741789);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2070.977075));
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex2.createComplex((-2070.977075), (-0.9999998836474373));
      complex1.sinh();
      complex2.tanh();
      complex0.multiply(7);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.getField();
      Complex complex1 = complex0.multiply(complex0);
      complex1.createComplex(0.0, 0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.atan();
      double double0 = (-2174.84038658);
      Complex complex2 = Complex.valueOf((-1187.6575), (-2174.84038658));
      complex2.tan();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-2617.9), (-2617.9));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract((-2617.9));
      complex2.sinh();
      complex0.atan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.subtract(2.0);
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.valueOf((-2.0003494511442993E196), 603.4292318);
      complex4.multiply(complex2);
      complex5.equals(complex4);
      complex3.INF.pow((-2617.9));
      Complex complex7 = complex1.divide(1776.136134008);
      complex7.conjugate();
      complex7.cos();
      complex5.divide(complex1);
      complex6.multiply(20);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(4.999126524757713E-197);
      Complex complex3 = complex2.tan();
      complex2.atan();
      Complex complex4 = complex1.subtract(4.999126524757713E-197);
      complex2.sinh();
      Complex complex5 = Complex.valueOf((-1606.8), 1.1552273904608563E-172);
      complex0.equals(complex2);
      complex1.divide(4.999126524757713E-197);
      complex3.conjugate();
      complex4.cos();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = Complex.I;
      complex6.NaN.divide(complex7);
      Complex complex8 = Complex.I;
      complex8.multiply(404);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(2.0121798515319824);
      Complex complex1 = complex0.sin();
      complex1.ZERO.getArgument();
      complex0.INF.cosh();
      Complex complex2 = complex0.log();
      complex2.I.abs();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.INF.pow(0.0);
      complex5.I.abs();
      complex1.readResolve();
      complex3.ZERO.log();
      Complex complex6 = complex0.subtract((-2.6489990728664908E-8));
      Complex complex7 = complex4.INF.negate();
      Complex.valueOf((-1.0), (-472.143553611));
      Complex.valueOf((-1657.8));
      complex4.pow(complex0);
      complex1.cos();
      complex6.subtract(complex3);
      complex3.sin();
      complex5.multiply((-472.143553611));
      complex4.conjugate();
      complex7.multiply(812.593602507);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.ONE.sinh();
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.multiply((-2026));
      Complex complex3 = complex1.add(complex2);
      complex1.asin();
      complex3.atan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.divide(20.0);
      complex2.tanh();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.divide(complex2);
      complex0.toString();
      complex2.getReal();
      Complex complex4 = Complex.I;
      complex4.subtract(0.0);
      Complex complex5 = Complex.INF;
      complex5.divide(complex4);
      complex2.cosh();
      complex3.add(complex1);
      complex5.getReal();
      complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1606.8), (-1606.8));
      Complex complex1 = complex0.subtract(1.530436781375042E19);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf(2263.684, 648.41759);
      complex3.equals(complex2);
      Complex complex4 = complex1.divide(258.4302134551379);
      Complex complex5 = complex4.conjugate();
      complex5.cos();
      Complex.valueOf((-1013.24153), 0.0);
      complex1.tan();
      Complex complex6 = new Complex(258.4302134551379);
      Complex complex7 = Complex.ZERO;
      complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      complex0.INF.atan();
      complex0.I.reciprocal();
      Complex complex1 = complex0.add(318.376761117);
      Complex complex2 = complex1.pow(1766.63652737743);
      Complex complex3 = Complex.ONE;
      complex3.readResolve();
      Complex complex4 = new Complex(318.376761117, 1766.63652737743);
      complex4.pow((-1778.079));
      complex3.divide(complex4);
      complex2.divide(0.0);
      Complex complex5 = Complex.NaN;
      complex2.add(complex5);
      complex4.subtract((-1778.079));
      Complex complex6 = complex1.cosh();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = Complex.valueOf(3483.950082, 3483.950082);
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf(0.0, Double.NaN);
      Complex complex5 = complex4.subtract(Double.NaN);
      Complex complex6 = complex2.reciprocal();
      complex6.ONE.tan();
      complex3.pow(Double.NaN);
      complex2.createComplex((-2319.1), (-1893.763445337801));
      Complex complex7 = complex1.createComplex(2879.32434638, (-2319.1));
      complex5.log();
      complex7.getReal();
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2147.0);
      Complex complex2 = complex1.divide(4.999126524757713E-197);
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex4.subtract((-1606.8));
      Complex complex6 = complex0.sinh();
      Complex complex7 = Complex.valueOf((-1606.8), 2147.0);
      complex6.equals(complex0);
      complex0.divide(0.0);
      complex4.conjugate();
      Complex complex8 = complex5.cos();
      complex5.exp();
      Complex.valueOf(399.0, 2147.0);
      complex2.exp();
      Complex complex9 = complex3.subtract((-1682.509733027));
      complex7.reciprocal();
      complex9.pow(393.203);
      Complex complex10 = Complex.valueOf((-455.23954958523854), 75.4374487);
      complex10.createComplex((-2023.6661392083), 399.0);
      complex8.createComplex((-455.23954958523854), 0.026976589113473892);
      Complex complex11 = complex4.log();
      complex11.tan();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(1766.63652737743);
      Complex complex1 = complex0.add(449.0721555603);
      Complex complex2 = Complex.I;
      complex2.getField();
      Complex complex3 = Complex.valueOf(2753.0, 20.0);
      Complex complex4 = complex3.subtract(complex0);
      complex4.readResolve();
      Complex.valueOf(1766.63652737743, 721.6940643);
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex4.sinh();
      complex1.subtract(complex7);
      complex2.sqrt1z();
      Complex.valueOf((-0.9999162136474498), 0.22859740257263184);
      complex6.asin();
      complex4.cos();
      Complex complex8 = Complex.NaN;
      complex2.isNaN();
      Complex.valueOf(1611.874);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(847.26043176);
      complex0.tan();
      Complex complex2 = Complex.valueOf(366.5, (-4.079585475491198E-54));
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.multiply((-1141));
      complex6.pow((double) (-1141));
      complex5.sinh();
      Complex.valueOf(3.072002648437831);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.NaN.divide((-1642.40864603184));
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex2.sqrt();
      complex5.cosh();
      complex1.NaN.readResolve();
      Complex complex6 = complex0.ZERO.subtract(complex4);
      Complex complex7 = Complex.valueOf(463.92203827);
      complex6.I.subtract(complex2);
      Complex complex8 = Complex.valueOf(1325.969897, 1325.969897);
      Complex.valueOf((-1642.40864603184));
      complex1.nthRoot(746);
      complex2.reciprocal();
      Complex complex9 = complex4.sin();
      Object object0 = complex9.readResolve();
      complex8.equals(object0);
      Complex complex10 = complex9.multiply((-608.5544461153));
      Complex complex11 = complex2.add((-608.5544461153));
      complex11.pow((-1778.079));
      complex10.readResolve();
      complex9.ONE.pow(0.0);
      Complex complex12 = complex11.divide(complex2);
      complex12.INF.divide((double) 746);
      complex0.add(complex4);
      complex9.subtract(2028.3481);
      complex7.cosh();
      complex12.acos();
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = Complex.valueOf(2.0, 1189.0);
      Complex complex1 = complex0.INF.cosh();
      complex1.INF.subtract(complex0);
      Complex complex2 = complex0.acos();
      complex0.INF.readResolve();
      Complex complex3 = complex0.ONE.sinh();
      complex3.I.atan();
      Complex complex4 = complex0.ZERO.multiply((-1454));
      Complex complex5 = complex4.ONE.pow(complex2);
      complex0.ZERO.createComplex(2.0, 6690.549826288452);
      complex5.NaN.nthRoot(37);
      complex0.toString();
      // Undeclared exception!
      complex0.ZERO.nthRoot(2049870724);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-646.7), (-646.7));
      complex0.ZERO.nthRoot(444);
      Complex complex1 = complex0.negate();
      complex0.sqrt();
      Complex complex2 = complex1.tan();
      complex2.sqrt();
      Complex complex3 = new Complex(20.0, 1.0770423412322998);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2147.0);
      Complex complex2 = complex1.divide(4.999126524757713E-197);
      complex0.ZERO.tan();
      complex0.NaN.atan();
      complex0.sinh();
      Complex complex3 = Complex.valueOf((-1606.8), 2147.0);
      Complex complex4 = complex2.createComplex(4.999126524757713E-197, (-1606.8));
      complex1.subtract(complex0);
      Complex.valueOf(4.999126524757713E-197);
      Complex complex5 = Complex.valueOf((-1158.0));
      complex5.I.cos();
      Complex complex6 = Complex.valueOf(3.425518820814759);
      complex6.conjugate();
      complex1.pow((-1158.0));
      complex4.atan();
      Complex complex7 = Complex.NaN;
      complex3.isNaN();
      complex4.tan();
      complex2.asin();
      Complex.valueOf(3.425518820814759);
      Complex.valueOf(1846.184994274606, 4.999126524757713E-197);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.multiply((-2012));
      Complex complex2 = complex0.add(complex1);
      complex0.asin();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.I;
      complex4.divide(1766.63652737743);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.subtract(4913.0497);
      Complex complex2 = complex0.sinh();
      Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex3 = Complex.NaN;
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      Complex complex4 = complex3.divide((-20.0));
      complex0.conjugate();
      complex3.cos();
      Complex complex5 = Complex.valueOf(Double.NaN, 1766.63652737743);
      Complex complex6 = complex0.exp();
      complex4.subtract(1458.0);
      Complex complex7 = complex1.reciprocal();
      complex3.pow(0.0);
      complex6.createComplex((-20.0), 4913.0497);
      complex5.createComplex(4913.0497, (-1550.4));
      complex4.log();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-646.7), 2968.595446807989);
      Complex complex1 = complex0.subtract((-646.7));
      Complex complex2 = Complex.I;
      complex1.getArgument();
      complex2.getField();
      complex0.abs();
      Complex complex3 = complex1.cosh();
      complex0.INF.reciprocal();
      complex2.NaN.sqrt1z();
      complex3.getImaginary();
      complex0.toString();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-646.7), (-646.7));
      Complex complex1 = Complex.valueOf((-1.0), 160.0);
      complex0.NaN.add(complex1);
      complex0.add((-646.7));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.toString();
      Complex complex1 = complex0.INF.acos();
      complex0.ONE.log();
      complex0.negate();
      Complex complex2 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex3 = complex2.sqrt1z();
      complex3.NaN.nthRoot(1095);
      Complex complex4 = complex1.ONE.subtract(complex2);
      Complex complex5 = complex0.log();
      complex3.I.asin();
      complex0.multiply((-1));
      Complex complex6 = complex2.tan();
      complex5.sqrt();
      complex6.tan();
      complex4.sqrt();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-1248.866999));
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.isNaN();
      Complex complex3 = Complex.valueOf(1.334449995534113E-7, 2753.0);
      Complex complex4 = complex3.subtract(complex1);
      complex3.readResolve();
      Complex.valueOf(1.7768193998956956, 0.0);
      complex2.tanh();
      complex3.sinh();
      complex2.subtract(complex1);
      Complex complex5 = new Complex((-393.5187506275), 20.0);
      complex5.sqrt1z();
      Complex complex6 = Complex.valueOf((-3434.0), 696.0384524552586);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex6.cos();
      complex1.isNaN();
      complex6.multiply(34);
      complex3.pow(696.0384524552586);
      complex1.divide(complex8);
      complex4.nthRoot(1095);
      complex7.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.multiply((-2546));
      Complex complex3 = complex0.reciprocal();
      complex0.toString();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex4.sqrt1z();
      complex2.pow(0.0);
      complex6.conjugate();
      complex1.tan();
      Complex complex7 = Complex.INF;
      complex7.I.reciprocal();
      complex5.subtract(complex7);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-2145.89371950368));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(0.0);
      complex2.I.hashCode();
      Complex complex3 = complex1.tan();
      complex3.I.sqrt();
      Complex complex4 = complex0.tan();
      complex4.ZERO.sqrt();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.toString();
      complex0.getReal();
      complex2.isNaN();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.createComplex((-816.31500152597), (-816.31500152597));
      Complex complex6 = complex5.sin();
      Complex complex7 = Complex.ZERO;
      complex7.negate();
      Complex complex8 = complex1.reciprocal();
      complex7.pow(complex8);
      complex3.tan();
      Complex complex9 = complex5.pow(complex8);
      complex9.hashCode();
      complex6.add(complex4);
      complex8.isNaN();
      complex3.multiply(832);
      Complex complex10 = Complex.valueOf((-525.7724737));
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.INF.add(complex0);
      complex0.sin();
      Complex complex4 = complex1.log();
      complex3.exp();
      Complex.valueOf(143.9);
      complex4.conjugate();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      complex0.add(449.0721555603);
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = Complex.valueOf(2753.0, 20.0);
      Complex complex3 = complex2.subtract(complex0);
      complex3.readResolve();
      Complex complex4 = Complex.valueOf(5352.5269479608305, 721.6940643);
      Complex complex5 = complex1.tanh();
      complex3.sinh();
      complex3.subtract(complex4);
      complex5.sqrt1z();
      Complex complex6 = Complex.valueOf(3787.03561, 2.179424521221378E-224);
      Complex complex7 = complex6.asin();
      complex3.cos();
      complex6.isNaN();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.pow(449.0721555603);
      complex8.divide(complex7);
      try { 
        complex9.nthRoot((-2263));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,263
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.cosh();
      complex0.abs();
      Complex complex1 = complex0.atan();
      complex1.ONE.nthRoot(17);
      complex0.ONE.conjugate();
      complex0.sinh();
      complex0.NaN.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.INF;
      complex3.reciprocal();
      Complex complex4 = Complex.I;
      complex4.add(complex2);
      complex1.getImaginary();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-2169.905269));
      complex0.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.INF.negate();
      complex1.NaN.getField();
      Complex complex5 = Complex.valueOf(3317.10183768);
      complex3.NaN.atan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.createComplex((-326.452967681005), 3317.10183768);
      complex7.subtract(complex4);
      Complex.valueOf((-2169.905269));
      Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.conjugate();
      complex5.pow(514.240389297606);
      complex3.atan();
      complex5.isNaN();
      complex3.tan();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-1248.866999));
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.isNaN();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.I.sinh();
      complex4.pow((-1446.4692457));
      Complex complex5 = complex1.asin();
      Complex complex6 = complex2.divide((-1049.33));
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.INF;
      complex5.equals(complex8);
      complex5.readResolve();
      complex6.isInfinite();
      complex3.getReal();
      complex8.isInfinite();
      complex3.divide((-1049.33));
      complex7.cosh();
      complex4.hashCode();
      Complex complex9 = Complex.ZERO;
      complex9.getField();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2147.0);
      complex1.divide(4.999126524757713E-197);
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.NaN.atan();
      complex3.subtract((-1606.8));
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.valueOf((-1606.8), 2147.0);
      complex4.equals(complex0);
      Complex complex6 = complex0.divide(0.0);
      complex6.ONE.conjugate();
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.valueOf(3.35462624207139E-4, 0.0);
      Complex complex9 = complex8.exp();
      complex2.I.subtract(0.0);
      complex2.ZERO.reciprocal();
      Complex complex10 = complex5.pow((-2023.6661392083));
      complex10.createComplex((-1550.4), 4.999126524757713E-197);
      Complex complex11 = complex7.createComplex((-1606.8), 0.0);
      complex9.log();
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(2.334169864654541);
      Complex complex1 = new Complex(1023.4023926272329, (-1254.4));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex3.I.pow(1023.4023926272329);
      Complex complex5 = Complex.valueOf(1439.17488225);
      complex5.INF.pow(2.334169864654541);
      complex4.I.createComplex((-796.483), 3247.200607);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.NaN.sqrt1z();
      complex6.INF.tan();
      complex0.I.asin();
      Complex.valueOf(6.283185307179586, 1.8412576154421806E-7);
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex6.subtract(2.334169864654541);
      complex10.toString();
      complex2.getField();
      Complex complex11 = complex7.exp();
      complex11.NaN.getField();
      Complex complex12 = Complex.NaN;
      complex12.I.getField();
      complex12.INF.abs();
      complex9.multiply(0);
      complex10.equals(complex12);
      complex10.subtract(484.408444481778);
      complex9.multiply(484.408444481778);
      complex7.tan();
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.negate();
      Complex.valueOf(20.0);
      complex0.conjugate();
      Complex complex3 = complex2.pow(2785.788973426737);
      complex3.getImaginary();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.multiply(complex4);
      complex4.divide(complex1);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      complex1.ONE.multiply((-284));
      Complex complex2 = complex0.add(complex1);
      complex2.asin();
      complex2.I.atan();
      complex0.divide(1342.7);
      complex0.tanh();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-2484.1938));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(2.1520078872608393E-5);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(2.1520078872608393E-5);
      complex3.ZERO.getField();
      complex2.ONE.getArgument();
      Complex complex4 = complex0.multiply(complex2);
      complex2.log();
      Complex complex5 = Complex.valueOf(2.1520078872608393E-5);
      complex5.ONE.sqrt1z();
      complex4.isInfinite();
      complex0.multiply(complex4);
      complex2.readResolve();
      Complex complex6 = complex2.pow(complex1);
      complex2.I.conjugate();
      complex6.getReal();
      Complex complex7 = complex4.multiply(0);
      complex0.ONE.createComplex(0, (-3.835454246739619E-8));
      complex1.toString();
      Complex complex8 = complex6.multiply(complex0);
      complex8.sqrt();
      Complex complex9 = complex6.cos();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex7.subtract(complex10);
      Complex complex12 = complex11.ZERO.conjugate();
      complex11.NaN.cosh();
      complex2.I.asin();
      Complex complex13 = complex11.conjugate();
      complex0.conjugate();
      complex13.equals(complex1);
      Complex.valueOf(1.0);
      complex9.pow(1.0);
      complex4.acos();
      complex13.pow((double) 0);
      complex12.multiply((double) 0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.toString();
      Complex complex1 = complex0.INF.acos();
      complex0.ONE.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex3.sqrt1z();
      complex4.NaN.nthRoot(1095);
      complex1.ONE.subtract(complex3);
      complex0.log();
      complex4.I.asin();
      Complex complex5 = complex0.multiply((-1));
      complex5.ONE.reciprocal();
      complex5.ZERO.toString();
      complex3.add(complex2);
      Complex complex6 = complex1.negate();
      complex6.I.sqrt1z();
      complex6.I.pow(0.0);
      complex0.conjugate();
      complex3.tan();
      Complex complex7 = Complex.INF;
      complex5.subtract(complex7);
      complex1.multiply(complex0);
      complex7.getImaginary();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.I.add(complex0);
      int int0 = (-202);
      try { 
        complex1.nthRoot((-202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -202
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      complex1.INF.atan();
      Complex complex2 = complex0.acos();
      complex1.sqrt1z();
      Complex complex3 = complex2.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.exp();
      complex3.exp();
      Complex complex4 = complex2.negate();
      complex4.ZERO.subtract(complex1);
      complex4.I.multiply(0);
      complex1.toString();
      complex4.cos();
      Complex complex5 = complex3.sinh();
      complex5.ONE.cos();
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1663.489));
      Complex complex1 = complex0.I.pow((-1663.489));
      Complex complex2 = Complex.valueOf((-1663.489), (-1663.489));
      Complex complex3 = complex0.cosh();
      complex0.isInfinite();
      Complex complex4 = complex3.ONE.pow((-1447.660442424678));
      complex3.ZERO.readResolve();
      Complex complex5 = complex2.cosh();
      complex2.I.asin();
      complex5.sqrt1z();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.multiply(complex3);
      Complex.valueOf((-1447.660442424678));
      complex1.acos();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex8.sinh();
      complex9.ZERO.sinh();
      Complex complex10 = complex8.ZERO.reciprocal();
      complex10.I.getField();
      complex3.multiply((-1447.660442424678));
      complex3.getImaginary();
      Complex complex11 = complex3.sinh();
      complex11.I.add(548.515463604193);
      complex3.multiply(2300);
      complex7.cosh();
      complex6.log();
      complex7.createComplex((-20.0), 0.0);
      Complex complex12 = complex0.multiply(548.515463604193);
      complex12.createComplex((-2420.6), 0.0);
      complex0.divide((-20.0));
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(1593.790045);
      complex0.ONE.toString();
      complex0.pow(1593.790045);
      complex0.multiply(4943);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.cosh();
      complex0.abs();
      Complex complex1 = complex0.atan();
      complex1.ONE.nthRoot(17);
      complex0.ONE.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex0.add(1.0386032577072378E209);
      complex1.getField();
      Complex.valueOf(1.0386032577072378E209, 2753.0);
      complex4.NaN.subtract(complex2);
      complex4.ZERO.readResolve();
      Complex complex5 = Complex.valueOf(1.0386032577072378E209, 0.0);
      complex4.tanh();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex4.subtract(complex5);
      complex6.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0, 1.798489141298457E-208);
      complex8.ONE.asin();
      Complex complex9 = complex7.ONE.cos();
      complex4.isNaN();
      complex3.pow(0.0);
      complex7.divide(complex2);
      complex9.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.tanh();
      complex2.NaN.tanh();
      Complex complex3 = Complex.valueOf((-20.0), 465.52207);
      Complex complex4 = complex3.INF.subtract(0.0);
      complex4.I.asin();
      complex3.INF.getArgument();
      complex3.NaN.getField();
      complex0.abs();
      Complex complex5 = complex0.cosh();
      complex0.sin();
      complex5.acos();
      complex1.log();
      complex0.exp();
      Complex complex6 = complex0.conjugate();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.exp();
      complex3.multiply((-737));
      complex2.isNaN();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.createComplex(1.545909820981726E-8, 0.0);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.reciprocal();
      complex9.ONE.pow(complex2);
      Complex complex10 = complex1.tan();
      complex7.NaN.pow(complex8);
      complex7.hashCode();
      complex5.add(complex7);
      complex10.isNaN();
      Complex complex11 = complex4.multiply((-2114));
      Complex.valueOf((double) (-2114));
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.NaN.pow(0.0);
      complex3.INF.toString();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex1.I.acos();
      complex5.ZERO.negate();
      complex5.ONE.add((-2283.365));
      complex5.NaN.log();
      Complex complex6 = complex4.INF.conjugate();
      complex0.ZERO.reciprocal();
      complex1.isInfinite();
      Complex complex7 = complex0.divide(complex1);
      complex7.ZERO.add(complex1);
      complex6.toString();
      Complex complex8 = complex4.atan();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.INF.multiply((-2283.365));
      complex2.exp();
      complex1.toString();
      complex8.cosh();
      complex4.sqrt();
      complex5.multiply((-2283.365));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.NaN.pow(Double.NaN);
      Complex complex4 = complex3.INF.tanh();
      complex3.exp();
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex5.ZERO.pow(7.425346071427343E-8);
      complex6.I.subtract(complex2);
      Complex complex7 = complex0.I.conjugate();
      complex0.getArgument();
      Complex complex8 = complex7.acos();
      complex8.INF.sqrt1z();
      Complex complex9 = complex5.divide(0.0);
      complex9.NaN.createComplex(1.5707963267948966, 1.5707963267948966);
      complex5.conjugate();
      complex7.getArgument();
      Complex complex10 = complex5.cosh();
      complex0.log();
      complex10.log();
      Complex.valueOf(0.0);
      complex0.getReal();
      complex4.pow(Double.NaN);
      complex8.sinh();
      complex10.createComplex(Double.NaN, 2104.4273273);
      complex8.sin();
      complex1.isInfinite();
      complex5.add(1.5707963267948966);
      Complex complex11 = Complex.valueOf((-598.0026198672));
      complex10.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.toString();
      complex0.getReal();
      Complex complex3 = complex2.subtract(0.0);
      complex2.INF.createComplex((-326.452967681005), (-326.452967681005));
      complex3.subtract(complex0);
      Complex.valueOf(0.0);
      Complex.valueOf(514.240389297606);
      Complex complex4 = complex3.conjugate();
      complex3.I.pow(0.0);
      Complex complex5 = complex4.atan();
      complex5.isNaN();
      complex3.tan();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(1741.0);
      Complex complex2 = complex1.pow(complex0);
      complex1.ZERO.atan();
      Complex complex3 = complex2.NaN.sqrt();
      complex3.I.multiply(complex2);
      complex2.INF.hashCode();
      Complex complex4 = complex1.reciprocal();
      Complex.valueOf(852.05873576);
      Complex complex5 = complex1.cosh();
      complex5.isInfinite();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex7.cos();
      complex8.I.log();
      complex4.createComplex(0.0, 0.0);
      complex5.exp();
      Complex complex9 = complex4.tan();
      complex1.multiply(1741.0);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-1665.297636);
      double double1 = 2226.24454834048;
      Complex complex1 = complex0.ZERO.pow(2226.24454834048);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.NaN.add(complex1);
      complex3.ONE.getArgument();
      Complex complex4 = complex0.ONE.pow((-1665.297636));
      int int0 = 0;
      complex1.NaN.getArgument();
      try { 
        complex4.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      complex0.ONE.toString();
      Complex complex1 = null;
      complex0.ZERO.cos();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1210.41649048709));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.ZERO.multiply((-1210.41649048709));
      complex3.INF.abs();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex0.pow(complex2);
      Complex.valueOf((-1210.41649048709));
      complex1.ZERO.sinh();
      complex5.toString();
      complex0.divide((-1210.41649048709));
      complex6.getArgument();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.I.sinh();
      complex8.NaN.sqrt();
      complex5.sqrt1z();
      Complex complex9 = Complex.valueOf(2085.0);
      Complex complex10 = complex9.INF.pow((-1.4354545209473424));
      complex10.multiply(2085.0);
      complex9.ZERO.conjugate();
      Complex.valueOf(0.0, (-1210.41649048709));
      complex1.atan();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex5.multiply(complex11);
      Complex complex13 = complex12.ONE.cos();
      complex13.ZERO.divide(0.0);
      complex6.pow(0.0);
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-2617.9), (-2617.9));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      complex2.I.multiply((-2617.9));
      complex0.createComplex((-2617.9), (-2617.9));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(0.0);
      complex2.I.hashCode();
      Complex complex3 = complex2.tan();
      complex3.I.sqrt();
      Complex complex4 = complex0.tan();
      complex4.ZERO.sqrt();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2147.0);
      complex1.divide(4.999126524757713E-197);
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex3.subtract((-1606.8));
      Complex complex5 = complex0.sinh();
      Complex.valueOf((-1606.8), 2147.0);
      complex5.equals(complex0);
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.ONE.conjugate();
      Complex complex8 = complex2.cos();
      Complex complex9 = Complex.valueOf(3.35462624207139E-4, 0.0);
      complex9.exp();
      complex2.I.subtract(0.0);
      complex2.ZERO.reciprocal();
      Complex complex10 = complex8.pow(2070.489489);
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex2.divide(3.35462624207139E-4);
      Complex complex13 = complex12.I.cosh();
      complex6.equals(complex7);
      complex12.INF.readResolve();
      complex2.readResolve();
      complex13.isInfinite();
      complex4.getReal();
      complex4.isInfinite();
      complex3.divide(1060.3323846348576);
      complex5.cosh();
      complex13.hashCode();
      complex9.getField();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-1248.866999));
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.isNaN();
      Complex complex3 = complex0.atan();
      complex3.I.sinh();
      Complex complex4 = complex0.pow((-1446.4692457));
      complex4.NaN.createComplex(0.0, (-1446.4692457));
      complex2.createComplex(1.0, (-1446.4692457));
      complex4.log();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(990.456359456, 990.456359456);
      complex0.ZERO.tanh();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.pow(990.456359456);
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex3.ONE.acos();
      complex4.INF.getArgument();
      Complex complex5 = complex2.divide(990.456359456);
      complex1.readResolve();
      complex0.subtract(990.456359456);
      complex0.cos();
      complex0.ZERO.sin();
      complex2.exp();
      Complex complex6 = complex5.divide(990.456359456);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      complex0.asin();
      Complex complex1 = Complex.valueOf((-737.1));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.tanh();
      complex3.ONE.subtract(1918.0509151051);
      complex0.getReal();
      complex2.tanh();
      Complex complex4 = complex0.cosh();
      complex1.acos();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.atan();
      complex1.hashCode();
      complex3.divide((-413.635));
      complex0.conjugate();
      complex2.subtract(3414.70609253995);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.negate();
      complex2.toString();
      complex0.isNaN();
      Complex complex3 = complex1.NaN.acos();
      complex3.ZERO.sinh();
      Complex complex4 = complex3.exp();
      complex4.add(0.0);
      complex0.multiply(complex1);
      complex3.ZERO.divide((-1910.697605356219));
      Complex complex5 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.NaN.hashCode();
      complex2.sqrt();
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.INF.getField();
      Complex complex2 = complex0.multiply(complex1);
      complex2.createComplex((-4905.99), 0.0);
      complex0.readResolve();
      complex1.sinh();
      complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(397.551808283402, 1108.57633);
      complex0.multiply(8.756510122348782E-27);
      complex0.conjugate();
      complex0.I.readResolve();
      complex0.I.hashCode();
      Complex complex1 = complex0.cosh();
      complex0.hashCode();
      complex0.subtract(397.551808283402);
      Complex complex2 = complex0.negate();
      complex2.ONE.multiply(complex1);
      complex0.pow(1108.57633);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.ONE.multiply(484.977616411455);
      complex4.isNaN();
      complex4.createComplex(0.0, 0.0);
      Complex complex6 = complex2.asin();
      complex0.ZERO.exp();
      Complex.valueOf(0.0);
      Complex.valueOf(0.0, 5.184023388254773E-130);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.INF.add(complex7);
      complex8.NaN.tanh();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = Complex.valueOf(484.977616411455);
      complex10.NaN.abs();
      complex4.log();
      complex9.subtract(0.0);
      complex5.cos();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2984.36433844);
      Complex complex1 = complex0.negate();
      complex0.divide(complex1);
      complex0.equals("\"Y_PsL~]][U");
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.divide(5006.0381017844);
      Complex complex2 = complex1.I.add(6.283185307179586);
      complex2.ZERO.atan();
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.reciprocal();
      complex2.INF.add(complex0);
      complex0.getImaginary();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-982.3905757));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex2.acos();
      Complex complex3 = Complex.INF;
      complex2.ONE.pow(complex3);
      Complex complex4 = complex2.ZERO.add((-20.0));
      Complex complex5 = complex1.log();
      Complex complex6 = complex2.ONE.acos();
      Complex complex7 = complex1.sqrt();
      complex7.ONE.readResolve();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex8.I.tanh();
      complex6.INF.pow(0.0);
      Complex complex11 = complex10.multiply((-982.3905757));
      complex11.ONE.sin();
      complex6.ONE.add(complex0);
      complex10.I.divide((-1787.53749598));
      complex11.INF.sin();
      complex4.hashCode();
      complex6.getImaginary();
      complex11.getField();
      complex2.add(complex7);
      Complex complex12 = complex11.tanh();
      complex4.subtract((-33.13121274062));
      complex12.divide((-33.13121274062));
      complex11.pow(complex5);
      complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.exp();
      complex1.I.getArgument();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.divide(162.17);
      Complex complex5 = complex0.multiply((-608.4346));
      Complex complex6 = complex0.NaN.sin();
      Complex complex7 = complex3.ZERO.multiply(complex1);
      complex7.ONE.cos();
      Complex complex8 = complex7.ONE.acos();
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex3.ZERO.conjugate();
      Complex complex10 = complex9.ZERO.divide(complex6);
      Complex complex11 = complex6.ZERO.multiply(728);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex3.tanh();
      Complex complex13 = complex5.asin();
      complex13.isInfinite();
      assertTrue(complex13.equals((Object)complex11));
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      complex4.isNaN();
      Complex complex14 = complex6.multiply((-608.4346));
      complex14.sin();
      complex6.nthRoot(37);
      complex12.atan();
      assertSame(complex12, complex14);
      
      Complex complex15 = complex0.cos();
      Complex complex16 = complex10.conjugate();
      complex16.sinh();
      assertSame(complex10, complex7);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex17 = complex1.multiply((-1));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex17.equals((Object)complex2));
      assertSame(complex17, complex4);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-4441.8));
      Complex complex1 = new Complex((-1.0));
      complex1.ONE.acos();
      Complex.valueOf((-4441.8));
      complex0.INF.getField();
      complex0.pow(complex1);
      complex0.getReal();
      int int0 = (-1211);
      try { 
        complex0.nthRoot((-1211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,211
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.ONE.cos();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex7.equals((Object)complex4));
      assertEquals(1.8508157176809255, complex6.getReal(), 0.01);
      
      complex1.readResolve();
      complex3.isInfinite();
      Complex complex8 = complex1.add(complex2);
      assertEquals(0.8813735870195428, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex0.multiply(1520);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.conjugate();
      assertFalse(complex3.isInfinite());
      assertTrue(complex0.equals((Object)complex2));
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
  }
}
