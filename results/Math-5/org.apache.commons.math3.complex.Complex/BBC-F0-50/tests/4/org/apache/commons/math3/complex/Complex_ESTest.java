/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:44:43 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.subtract(complex0);
      complex2.asin();
      Complex complex3 = complex1.subtract((-1013.0));
      complex3.nthRoot(284);
      Complex complex4 = complex2.multiply(1);
      Complex complex5 = Complex.valueOf(2855.506202455639, Double.POSITIVE_INFINITY);
      complex5.sinh();
      Complex complex6 = Complex.valueOf((double) 1);
      Complex complex7 = Complex.ONE;
      complex4.toString();
      complex5.multiply(complex2);
      complex5.cosh();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.ONE;
      complex2.nthRoot(284);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(0.5887627601623535);
      complex1.nthRoot(4976);
      Complex complex2 = complex1.multiply((-2145640314));
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.valueOf((double) 1);
      Complex complex5 = Complex.ONE;
      complex2.acos();
      Complex complex6 = new Complex((-1013.0));
      complex6.NaN.tan();
      complex3.cosh();
      Complex complex7 = Complex.I;
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 5.092753117288608E212);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex4.ZERO.tanh();
      complex4.NaN.cosh();
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex4.ONE.sqrt();
      complex7.NaN.tan();
      Complex complex8 = complex0.add((-1589.567));
      complex0.ONE.sin();
      complex1.ZERO.sin();
      complex8.tan();
      complex6.conjugate();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex9.INF.sin();
      complex10.ONE.tan();
      Complex complex11 = Complex.valueOf((-20.0));
      complex11.ONE.readResolve();
      complex8.sqrt1z();
      complex7.add(5.092753117288608E212);
      complex2.tan();
      Complex complex12 = complex8.tan();
      complex10.subtract((-1589.567));
      complex12.tanh();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-647.4176009291247), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(5.4557485189210095E73);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.negate();
      complex2.cos();
      Complex complex5 = complex0.pow(5.4557485189210095E73);
      complex5.add(5.4557485189210095E73);
      Complex complex6 = complex4.atan();
      Complex complex7 = complex3.createComplex((-2.3951455355985637E-8), 5.4557485189210095E73);
      complex0.sin();
      complex6.divide(5.4557485189210095E73);
      Object object0 = complex3.readResolve();
      complex6.equals(object0);
      Complex complex8 = Complex.valueOf(1838.19311277, (-622.0));
      complex8.multiply((-1.0));
      complex7.asin();
      Complex complex9 = Complex.INF;
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex4.reciprocal();
      complex5.ONE.cos();
      complex3.isInfinite();
      complex3.INF.abs();
      complex1.add(complex2);
      complex0.multiply(1520);
      Complex complex6 = Complex.valueOf((double) 1520, Double.POSITIVE_INFINITY);
      complex0.multiply(complex6);
      complex2.acos();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.sqrt1z();
      complex4.INF.createComplex(6.283185307179586, (-2096.9546));
      Complex complex5 = complex3.multiply(complex1);
      complex5.multiply(1.4296266435430204E7);
      complex5.ZERO.reciprocal();
      Complex complex6 = complex5.NaN.tanh();
      complex6.ONE.getArgument();
      complex3.log();
      complex2.I.cos();
      Complex complex7 = complex2.ZERO.cos();
      complex7.I.asin();
      Complex complex8 = complex3.NaN.subtract((-1169.28662));
      complex8.ZERO.multiply(complex5);
      complex1.readResolve();
      complex1.equals(complex0);
      complex3.ONE.subtract(complex1);
      Complex complex9 = complex0.multiply((-1355));
      complex9.I.tan();
      Complex complex10 = complex3.exp();
      complex2.atan();
      complex8.tan();
      complex3.getField();
      complex9.pow((-3.5616655060851565));
      complex7.asin();
      complex2.pow(complex0);
      complex10.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.sinh();
      complex3.ZERO.abs();
      complex1.tanh();
      complex3.I.abs();
      Complex complex4 = Complex.valueOf((-2258.874975776948));
      Complex complex5 = complex4.ZERO.createComplex(20.0, (-2258.874975776948));
      complex5.ONE.add(complex2);
      Complex complex6 = complex4.acos();
      Complex complex7 = complex3.ZERO.negate();
      complex7.ONE.cos();
      complex7.NaN.pow(6.283185307179586);
      complex6.I.add(1.0);
      complex5.equals(complex6);
      Complex.valueOf((-2258.874975776948), (-2.6437112632041807E-8));
      Complex complex8 = new Complex(1991.21982059, 0.0);
      complex2.multiply(complex8);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-5942.7615096));
      complex0.tanh();
      complex0.nthRoot(2104);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex2 = complex0.divide(complex1);
      complex2.divide(Double.POSITIVE_INFINITY);
      complex2.exp();
      Complex complex3 = Complex.I;
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.abs();
      complex0.divide(complex1);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2052);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.atan();
      complex3.nthRoot(2074);
      complex2.sqrt1z();
      Complex complex4 = complex1.divide(complex3);
      complex4.toString();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(2074, 412.29776285);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.multiply(Double.NaN);
      Complex complex2 = Complex.INF;
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(1992.57196320402);
      complex0.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = new Complex(2905.99, 20.0);
      complex1.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.equals("JWf|u9Z_");
      Complex complex1 = new Complex((-2346.6), (-2346.6));
      Complex complex2 = complex1.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(15.574558817604808, 15.574558817604808);
      Complex complex2 = new Complex((-2812.6220658671414), Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 985.0);
      Complex complex4 = complex3.tan();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = (-1.3850458263351744E91);
      double double1 = Double.NaN;
      Complex complex0 = new Complex((-1.3850458263351744E91), Double.NaN);
      Complex complex1 = complex0.asin();
      complex1.ZERO.cosh();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.INF.divide(complex0);
      int int0 = 1476;
      Complex complex4 = complex3.I.multiply(1476);
      complex4.ZERO.multiply((-1.8592937532754405E-9));
      complex1.I.abs();
      complex1.divide(1.0);
      Complex complex5 = complex0.INF.add(1.0);
      try { 
        complex5.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cos();
      Complex complex3 = new Complex((-1741.45573));
      complex1.add((-1741.45573));
      complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.multiply((-737));
      complex2.isNaN();
      Complex complex5 = complex1.sqrt();
      complex1.atan();
      complex5.acos();
      complex0.getArgument();
      complex0.divide(1.545909820981726E-8);
      complex5.readResolve();
      Complex complex6 = complex3.subtract((double) (-737));
      complex6.cos();
      complex2.sin();
      complex4.exp();
      complex2.divide(0.7853981633974483);
      complex5.getImaginary();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.28805835150457E-8, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.pow(6.28805835150457E-8);
      Complex complex3 = complex2.tan();
      complex1.atan();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.subtract(0.0);
      complex5.abs();
      complex5.sinh();
      Complex complex6 = Complex.valueOf(20.0, (-1577.134629563077));
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      complex1.divide((-1606.8));
      complex1.divide(complex6);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743);
      Complex complex1 = Complex.valueOf((-3985.999610166), 851.773204687);
      complex1.pow((-1.0));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.subtract(6.283185307179586);
      complex0.abs();
      complex3.sinh();
      Complex.valueOf((-3549.4666164736996), 851.773204687);
      complex4.equals((Object) null);
      complex2.divide(635.1087);
      Complex complex5 = Complex.INF;
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.negate();
      complex2.sqrt();
      Complex complex4 = Complex.valueOf((-5942.7615096));
      complex4.atan();
      complex4.hashCode();
      complex3.divide((-413.635));
      complex0.conjugate();
      complex0.subtract(2617.9);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(2147.0);
      Complex complex1 = Complex.valueOf(4.999126524757713E-197, 2147.0);
      complex0.ZERO.tan();
      Complex complex2 = complex0.NaN.atan();
      complex1.asin();
      Complex complex3 = complex2.subtract((-1606.8));
      complex3.NaN.abs();
      complex0.sinh();
      Complex.valueOf((-1606.8), 2147.0);
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1216.251609184746, 1798.9476676601892);
      Complex complex1 = new Complex(1118.8289991, 6.3890560989306495);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.I.add(1216.251609184746);
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex4.I.createComplex(1216.251609184746, 6.3890560989306495);
      complex0.nthRoot(970);
      Complex complex6 = complex0.asin();
      complex6.NaN.asin();
      complex6.INF.subtract(1216.251609184746);
      complex2.sinh();
      complex2.getField();
      complex5.multiply(292);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.subtract((-221.04638725742691));
      complex1.abs();
      complex3.sinh();
      Complex complex5 = Complex.valueOf((-221.04638725742691), (-2338.8980433106435));
      complex2.equals("");
      complex5.divide(Double.NaN);
      complex0.divide(complex4);
      complex4.sinh();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.sinh();
      int int0 = 8388608;
      // Undeclared exception!
      complex0.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt1z();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ONE;
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.reciprocal();
      complex2.INF.log();
      complex2.INF.add(complex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex0.INF.divide(249.923405523064);
      Complex complex4 = complex3.INF.multiply(complex2);
      complex4.ZERO.multiply(complex3);
      Complex complex5 = complex3.ONE.multiply(606);
      complex5.INF.subtract(complex1);
      complex2.INF.sqrt();
      Complex complex6 = complex0.pow(249.923405523064);
      complex0.ZERO.cos();
      complex6.ONE.acos();
      Complex complex7 = complex6.INF.cos();
      Complex complex8 = complex0.exp();
      complex8.ZERO.pow(complex3);
      Complex complex9 = complex8.ONE.acos();
      complex1.I.cos();
      Complex complex10 = complex8.divide(complex7);
      complex10.ZERO.cosh();
      Complex complex11 = complex7.cos();
      Complex complex12 = complex11.tanh();
      Complex complex13 = complex12.I.multiply(249.923405523064);
      complex13.NaN.divide((-183.0));
      Complex complex14 = complex2.divide(1100.28095198983);
      complex7.ZERO.tanh();
      Complex complex15 = Complex.ONE;
      complex11.ZERO.exp();
      complex14.multiply(complex15);
      complex10.tanh();
      complex12.getField();
      Complex complex16 = Complex.ZERO;
      complex9.subtract(complex16);
      complex15.negate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.hashCode();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.2510824509582883);
      complex1.tan();
      Complex complex2 = new Complex(Double.NaN);
      complex1.equals(complex2);
      Complex.valueOf(2570.1352630415954);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.divide(4.999126524757713E-197);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.atan();
      complex0.subtract((-2932.6646628746));
      complex4.sinh();
      Complex.valueOf(4.999126524757713E-197, (-1606.8));
      Complex complex5 = Complex.I;
      complex2.equals(complex5);
      Complex complex6 = complex4.divide((-1.029980741248172E-7));
      complex6.ONE.toString();
      complex6.multiply(252);
      complex0.conjugate();
      Complex.valueOf((-2932.6646628746), (-1606.8));
      complex2.multiply(3805);
      complex4.conjugate();
      complex3.tan();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-838.674044356), (-4040.86));
      Complex complex1 = complex0.pow(1.3405964389498495E-8);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.multiply(complex2);
      complex3.reciprocal();
      complex4.toString();
      Complex complex5 = complex0.tan();
      complex0.pow(complex5);
      complex0.hashCode();
      Complex complex6 = Complex.ZERO;
      complex5.add(complex3);
      complex2.isNaN();
      complex0.multiply((-2114));
      Complex complex7 = complex4.conjugate();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-2617.9), (-2617.9));
      Complex complex1 = complex0.I.pow(complex0);
      complex1.log();
      complex0.exp();
      complex1.conjugate();
      Complex complex2 = Complex.ZERO;
      complex2.getReal();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2147.0);
      Complex complex2 = complex1.divide(4.999126524757713E-197);
      complex0.ZERO.tan();
      Complex complex3 = complex0.NaN.atan();
      complex0.asin();
      complex1.getArgument();
      complex2.getField();
      Complex.valueOf(4.999126524757713E-197, 6.283185307179586);
      complex0.abs();
      complex0.cosh();
      Complex complex4 = complex1.sin();
      complex2.acos();
      complex3.log();
      Complex complex5 = complex4.exp();
      complex5.conjugate();
      complex1.getReal();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.add(97.0042);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex0.reciprocal();
      complex5.ZERO.sqrt1z();
      Complex complex6 = Complex.valueOf((-2178.918), 1864.11993);
      complex6.ONE.add(0.0);
      complex0.equals(complex4);
      complex0.I.divide(complex6);
      complex6.sin();
      Complex complex7 = complex0.atan();
      complex7.I.multiply(complex0);
      Complex complex8 = complex1.INF.pow(1302.2);
      Complex complex9 = complex0.subtract(complex1);
      complex9.INF.sin();
      Complex complex10 = complex1.log();
      complex0.subtract(complex2);
      complex8.add((-185.657439883));
      complex5.add((-2523.5));
      complex10.equals(complex3);
      complex8.reciprocal();
      Complex.valueOf(6.283185307179586, 0.0);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(1766.63652737743, 1766.63652737743);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.multiply(1.7482123374938965);
      complex3.createComplex(1766.63652737743, 1.7482123374938965);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-646.7), 2967.80844202);
      Complex complex1 = complex0.reciprocal();
      complex0.add(complex1);
      complex1.getImaginary();
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.INF.add(complex0);
      complex0.getImaginary();
      complex2.add(1320.24937502);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sin();
      Complex complex1 = complex0.tanh();
      complex1.tanh();
      Complex complex2 = Complex.valueOf(2.0, (-2539.107545));
      Complex complex3 = complex1.subtract((-2751.22914592264));
      complex0.reciprocal();
      complex2.add(complex3);
      complex3.getImaginary();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.asin();
      complex3.getArgument();
      complex1.getField();
      Complex complex4 = Complex.valueOf(2806.0, Double.NaN);
      complex1.abs();
      Complex complex5 = complex0.cosh();
      complex5.sin();
      complex4.acos();
      Complex complex6 = complex3.log();
      Complex complex7 = new Complex(Double.NaN, 2806.0);
      Complex complex8 = complex0.conjugate();
      complex8.getReal();
      complex6.pow(2.32053279876709);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-2169.905269));
      complex0.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.INF.negate();
      complex1.NaN.getField();
      Complex complex5 = Complex.valueOf(3317.10183768);
      Complex complex6 = complex3.NaN.atan();
      Complex complex7 = complex1.pow((-838.674044356));
      Complex complex8 = complex7.sqrt1z();
      complex7.NaN.conjugate();
      Complex complex9 = complex6.ZERO.multiply(314);
      Complex complex10 = complex2.multiply(complex0);
      Complex complex11 = complex0.ONE.reciprocal();
      complex11.divide(complex3);
      Complex complex12 = complex10.sqrt1z();
      Complex.valueOf((-2169.905269), 412.0);
      complex12.NaN.toString();
      complex1.tan();
      complex1.pow(complex9);
      complex3.hashCode();
      Complex complex13 = Complex.ZERO;
      complex5.add(complex13);
      complex1.isNaN();
      Complex complex14 = complex8.multiply((-2114));
      complex14.ZERO.conjugate();
      Complex.valueOf((-2214.3));
      complex4.sin();
      complex5.sqrt1z();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-2617.9), (-2617.9));
      Complex complex1 = complex0.I.pow(complex0);
      Complex complex2 = complex1.I.multiply((-2617.9));
      complex2.I.log();
      Complex complex3 = complex0.createComplex((-2617.9), (-2617.9));
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(2045.959419972);
      complex1.hashCode();
      complex2.tan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex4.multiply(1766.63652737743);
      complex5.createComplex(2045.959419972, 1766.63652737743);
      Complex complex6 = complex2.subtract(complex1);
      complex6.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-2617.9), (-2617.9));
      Complex.valueOf((-213143.0802154706), (-1677.955654));
      complex0.sqrt();
      complex0.tan();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt();
      complex2.isInfinite();
      Complex complex3 = new Complex((-460.4412155818085));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(2045.959419972);
      complex1.hashCode();
      complex2.tan();
      Complex complex3 = Complex.valueOf(1766.63652737743, 1396.23236910468);
      Complex complex4 = complex3.sqrt();
      complex2.nthRoot(1473);
      complex4.negate();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-2169.905269));
      complex0.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.INF.negate();
      complex1.NaN.getField();
      Complex complex5 = Complex.valueOf(3317.10183768);
      Complex complex6 = complex3.NaN.atan();
      Complex complex7 = complex1.pow((-838.674044356));
      Complex complex8 = complex7.sqrt1z();
      complex3.conjugate();
      Complex complex9 = complex5.multiply(314);
      Complex complex10 = complex7.divide(complex6);
      complex1.multiply(complex4);
      complex0.multiply(2049870754);
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = complex1.sqrt1z();
      complex11.toString();
      complex10.isInfinite();
      complex9.getField();
      complex12.toString();
      complex10.getField();
      complex8.cos();
      complex1.tanh();
      Complex complex13 = Complex.NaN;
      Complex.valueOf(1.5707963267948966);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-2169.905269));
      complex0.getArgument();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.INF.negate();
      complex1.NaN.getField();
      Complex complex5 = Complex.valueOf(3317.10183768);
      Complex complex6 = complex3.NaN.atan();
      Complex complex7 = complex1.pow((-838.674044356));
      Complex complex8 = complex7.sqrt1z();
      complex7.NaN.conjugate();
      Complex complex9 = complex6.ZERO.multiply(314);
      Complex complex10 = complex2.multiply(complex0);
      complex0.ONE.reciprocal();
      Complex complex11 = complex10.sqrt1z();
      complex11.NaN.toString();
      complex1.tan();
      complex1.pow(complex9);
      complex3.hashCode();
      Complex complex12 = Complex.ZERO;
      complex5.add(complex12);
      complex1.isNaN();
      Complex complex13 = complex8.multiply((-2114));
      complex13.ZERO.conjugate();
      Complex.valueOf((-2214.3));
      complex4.sin();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.multiply((-737));
      complex2.isNaN();
      complex1.sqrt();
      complex1.atan();
      Complex complex5 = complex0.createComplex(1.545909820981726E-8, 0.0);
      Complex complex6 = complex1.sin();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex8.ONE.pow(complex2);
      complex9.isInfinite();
      complex6.getField();
      complex7.toString();
      complex1.getField();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex5.tanh();
      complex11.isInfinite();
      complex4.createComplex(1.5340733916570804E145, 1.5340733916570804E145);
      complex4.asin();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex2.negate();
      complex3.getField();
      Complex complex5 = Complex.valueOf((-20.0));
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.pow(Double.NaN);
      complex5.sqrt1z();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex4.multiply(314);
      Complex complex10 = complex5.multiply(complex4);
      complex3.reciprocal();
      complex7.sqrt1z();
      complex2.toString();
      complex8.isInfinite();
      Complex complex11 = Complex.valueOf((-838.674044356), (double) 314);
      complex11.getField();
      complex10.toString();
      complex8.getField();
      complex4.cos();
      complex5.tanh();
      complex11.isInfinite();
      Complex complex12 = new Complex(3317.10183768, 3317.10183768);
      Complex complex13 = complex12.createComplex(3.425518820814759, 1170.0);
      complex2.asin();
      complex9.getArgument();
      complex13.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-2169.905269));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.multiply((-737));
      complex3.isNaN();
      complex1.sqrt();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex2.createComplex((-2169.905269), 0.0);
      Complex complex6 = complex0.sin();
      complex5.negate();
      Complex complex7 = complex4.reciprocal();
      complex7.pow(complex6);
      complex0.tan();
      complex0.pow(complex1);
      complex3.hashCode();
      complex6.add(complex0);
      complex0.isNaN();
      Complex complex8 = Complex.NaN;
      complex8.multiply((-233));
      Complex.valueOf((double) (-737));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(2045.959419972);
      complex1.hashCode();
      complex2.tan();
      Complex complex3 = Complex.valueOf(1766.63652737743, 1396.23236910468);
      Complex complex4 = complex3.sqrt();
      complex4.tan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.sqrt();
      complex5.isInfinite();
      complex6.asin();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-2169.905269));
      complex0.getArgument();
      Complex complex2 = complex0.negate();
      complex0.sinh();
      complex2.INF.negate();
      complex1.NaN.getField();
      Complex complex3 = Complex.valueOf(3317.10183768);
      Complex complex4 = Complex.valueOf(1.5707963267948966, (-2169.905269));
      complex4.subtract(3317.10183768);
      Complex complex5 = complex0.asin();
      complex5.abs();
      Complex complex6 = new Complex(0.8813735870195428, 0.0);
      complex6.cosh();
      complex2.sin();
      Complex complex7 = Complex.INF;
      complex7.acos();
      complex3.log();
      complex4.conjugate();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.pow(465.52207);
      Complex complex6 = complex3.sqrt1z();
      complex0.conjugate();
      complex5.multiply(314);
      Complex complex7 = Complex.NaN;
      complex2.multiply(complex7);
      complex3.reciprocal();
      complex7.sqrt1z();
      complex6.toString();
      complex2.isInfinite();
      complex3.getField();
      complex7.toString();
      complex3.getField();
      complex6.cos();
      Complex complex8 = Complex.valueOf((-20.0), 1.7110536098480225);
      complex8.tanh();
      complex4.isInfinite();
      complex8.createComplex(20.0, (-838.674044356));
      complex1.asin();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      complex0.abs();
      Complex complex2 = complex0.atan();
      complex2.ONE.nthRoot(17);
      complex0.ONE.conjugate();
      complex0.sinh();
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex0.add(1.0386032577072378E209);
      complex2.getField();
      Complex complex5 = complex1.createComplex((-258.501), 2753.0);
      complex5.sin();
      Complex complex6 = complex4.negate();
      complex6.reciprocal();
      Complex complex7 = complex4.pow(complex3);
      complex4.tan();
      Complex complex8 = Complex.ZERO;
      complex8.pow(complex1);
      complex3.hashCode();
      Complex complex9 = Complex.NaN;
      complex7.add(complex9);
      Complex complex10 = Complex.INF;
      complex10.isNaN();
      Complex complex11 = complex8.multiply((-83));
      Complex.valueOf((-52.60940199928227));
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.exp();
      complex3.multiply((-737));
      complex2.isNaN();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.valueOf(0.0, (double) (-737));
      Complex complex7 = complex2.subtract(complex1);
      Object object0 = new Object();
      Complex complex8 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.tanh();
      complex5.sinh();
      Complex complex10 = complex8.subtract(complex9);
      complex10.reciprocal();
      complex6.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.asin();
      complex4.cos();
      complex0.isNaN();
      complex5.pow(1.545909820981726E-8);
      complex2.divide(complex9);
      try { 
        complex7.nthRoot((-737));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -737
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.cosh();
      complex0.abs();
      Complex complex1 = complex0.atan();
      complex1.ONE.nthRoot(36);
      Complex complex2 = complex0.ONE.conjugate();
      complex0.sinh();
      complex0.NaN.negate();
      complex0.add(1.0386032577072378E209);
      complex1.getField();
      Complex complex3 = Complex.valueOf(7.634657476387474E-4, (double) 36);
      complex3.getArgument();
      Complex complex4 = complex1.divide((-2.3789334438756013E245));
      complex0.readResolve();
      complex4.subtract((-5309.63435));
      complex0.cos();
      complex4.sin();
      complex2.exp();
      Complex complex5 = Complex.NaN;
      complex5.divide((-1913.61283472117));
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.pow(complex1);
      complex5.tan();
      Complex complex6 = complex0.pow(complex3);
      complex6.hashCode();
      Complex complex7 = complex5.add(complex4);
      complex7.isNaN();
      complex0.multiply(3718);
      Complex.valueOf(1766.63652737743);
      complex2.sin();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(990.456359456, 990.456359456);
      complex0.ZERO.tanh();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.pow(990.456359456);
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex1.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.I;
      complex5.sin();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.reciprocal();
      complex3.pow(complex4);
      complex1.tan();
      complex8.pow(complex3);
      complex8.hashCode();
      complex3.add(complex2);
      complex3.isNaN();
      complex6.multiply((-2114));
      Complex.valueOf(8.407128854944895E-246);
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.pow((-3.1139472791083883E-8));
      complex2.conjugate();
      complex0.tan();
      Complex complex5 = Complex.INF;
      complex1.subtract(complex5);
      Complex complex6 = complex4.multiply(complex0);
      complex2.getImaginary();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-322.211831092), (-322.211831092));
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.add(complex3);
      complex3.getImaginary();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.tanh();
      complex2.tanh();
      Complex.valueOf(2.0, (-2539.107545));
      complex2.subtract((-2751.22914592264));
      Complex complex3 = complex0.asin();
      complex3.getArgument();
      complex1.getField();
      Complex complex4 = Complex.valueOf(2806.0, (-5942.7615096));
      complex4.abs();
      complex4.cosh();
      Complex complex5 = complex2.sin();
      Complex complex6 = complex4.acos();
      complex6.log();
      complex0.exp();
      complex6.conjugate();
      complex3.getReal();
      complex5.pow(2.32053279876709);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.toString();
      complex0.getReal();
      complex2.subtract(0.0);
      Complex complex3 = complex2.INF.createComplex((-326.452967681005), (-326.452967681005));
      Complex complex4 = Complex.valueOf(2753.0, 1593.790045);
      Complex complex5 = complex1.subtract(complex3);
      complex5.readResolve();
      Complex.valueOf(2753.0, 0.8813735870195428);
      complex2.tanh();
      Complex complex6 = Complex.ONE;
      complex6.sinh();
      complex2.subtract(complex4);
      complex4.sqrt1z();
      Complex complex7 = Complex.valueOf(2824.98956, 0.8813735870195428);
      Complex complex8 = complex5.asin();
      complex8.cos();
      complex7.isNaN();
      Complex complex9 = Complex.valueOf((-9.799351869734466E-8));
      complex9.pow(2824.98956);
      Complex complex10 = complex3.divide(complex8);
      complex10.nthRoot(149);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 465.52207);
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex1.I.asin();
      complex0.INF.getArgument();
      complex0.NaN.getField();
      complex2.tan();
      Complex complex3 = complex0.sqrt();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.reciprocal();
      complex2.sinh();
      complex0.subtract(complex2);
      Complex complex3 = complex1.sqrt1z();
      Complex.valueOf(Double.NaN, 1.798489141298457E-208);
      complex3.asin();
      Complex complex4 = complex2.cos();
      complex3.isNaN();
      complex4.pow(6.28805835150457E-8);
      Complex.valueOf(Double.NaN, 6.28805835150457E-8);
      try { 
        complex2.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(2.334169864654541);
      Complex complex1 = new Complex(1023.4023926272329, (-1254.4));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex3.I.pow(1023.4023926272329);
      Complex complex5 = Complex.valueOf(1439.17488225);
      complex5.INF.pow(2.334169864654541);
      complex4.I.createComplex((-796.483), 3247.200607);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.NaN.sqrt1z();
      complex6.INF.tan();
      complex0.I.asin();
      Complex.valueOf(6.283185307179586, 1.8412576154421806E-7);
      Complex complex8 = complex0.divide(complex6);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex6.subtract(2.334169864654541);
      complex10.toString();
      complex2.getField();
      Complex complex11 = complex7.exp();
      complex11.NaN.getField();
      Complex complex12 = Complex.NaN;
      complex12.I.getField();
      complex12.INF.abs();
      complex9.multiply(0);
      complex10.equals(complex12);
      complex10.subtract(484.408444481778);
      complex9.multiply(484.408444481778);
      complex7.tan();
      complex1.multiply(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.negate();
      Complex.valueOf(20.0);
      complex0.conjugate();
      Complex complex3 = complex2.pow(2785.788973426737);
      complex3.getImaginary();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.multiply(complex4);
      complex4.divide(complex1);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      complex1.ONE.multiply((-284));
      Complex complex2 = complex0.add(complex1);
      complex2.asin();
      complex2.I.atan();
      complex0.divide(1342.7);
      complex0.tanh();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-2484.1938));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(2.1520078872608393E-5);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf(2.1520078872608393E-5);
      complex3.ZERO.getField();
      complex2.ONE.getArgument();
      Complex complex4 = complex0.multiply(complex2);
      complex2.log();
      Complex complex5 = Complex.valueOf(2.1520078872608393E-5);
      complex5.ONE.sqrt1z();
      complex4.isInfinite();
      complex0.multiply(complex4);
      complex2.readResolve();
      Complex complex6 = complex2.pow(complex1);
      complex2.I.conjugate();
      complex6.getReal();
      Complex complex7 = complex4.multiply(0);
      complex0.ONE.createComplex(0, (-3.835454246739619E-8));
      complex1.toString();
      Complex complex8 = complex6.multiply(complex0);
      complex8.sqrt();
      Complex complex9 = complex6.cos();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex7.subtract(complex10);
      Complex complex12 = complex11.ZERO.conjugate();
      complex11.NaN.cosh();
      complex2.I.asin();
      Complex complex13 = complex11.conjugate();
      complex0.conjugate();
      complex13.equals(complex1);
      Complex.valueOf(1.0);
      complex9.pow(1.0);
      complex4.acos();
      complex13.pow((double) 0);
      complex12.multiply((double) 0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.toString();
      Complex complex1 = complex0.INF.acos();
      complex0.ONE.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex4 = complex3.sqrt1z();
      complex4.NaN.nthRoot(1095);
      complex1.ONE.subtract(complex3);
      complex0.log();
      complex4.I.asin();
      Complex complex5 = complex0.multiply((-1));
      complex5.ONE.reciprocal();
      complex5.ZERO.toString();
      complex3.add(complex2);
      Complex complex6 = complex1.negate();
      complex6.I.sqrt1z();
      complex6.I.pow(0.0);
      complex0.conjugate();
      complex3.tan();
      Complex complex7 = Complex.INF;
      complex5.subtract(complex7);
      complex1.multiply(complex0);
      complex7.getImaginary();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.I.add(complex0);
      int int0 = (-202);
      try { 
        complex1.nthRoot((-202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -202
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      complex1.INF.atan();
      Complex complex2 = complex0.acos();
      complex1.sqrt1z();
      Complex complex3 = complex2.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.exp();
      complex3.exp();
      Complex complex4 = complex2.negate();
      complex4.ZERO.subtract(complex1);
      complex4.I.multiply(0);
      complex1.toString();
      complex4.cos();
      Complex complex5 = complex3.sinh();
      complex5.ONE.cos();
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-1663.489));
      Complex complex1 = complex0.I.pow((-1663.489));
      Complex complex2 = Complex.valueOf((-1663.489), (-1663.489));
      Complex complex3 = complex0.cosh();
      complex0.isInfinite();
      Complex complex4 = complex3.ONE.pow((-1447.660442424678));
      complex3.ZERO.readResolve();
      Complex complex5 = complex2.cosh();
      complex2.I.asin();
      complex5.sqrt1z();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.multiply(complex3);
      Complex.valueOf((-1447.660442424678));
      complex1.acos();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex8.sinh();
      complex9.ZERO.sinh();
      Complex complex10 = complex8.ZERO.reciprocal();
      complex10.I.getField();
      complex3.multiply((-1447.660442424678));
      complex3.getImaginary();
      Complex complex11 = complex3.sinh();
      complex11.I.add(548.515463604193);
      complex3.multiply(2300);
      complex7.cosh();
      complex6.log();
      complex7.createComplex((-20.0), 0.0);
      Complex complex12 = complex0.multiply(548.515463604193);
      complex12.createComplex((-2420.6), 0.0);
      complex0.divide((-20.0));
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(1593.790045);
      complex0.ONE.toString();
      complex0.pow(1593.790045);
      complex0.multiply(4943);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.cosh();
      complex0.abs();
      Complex complex1 = complex0.atan();
      complex1.ONE.nthRoot(17);
      complex0.ONE.conjugate();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex0.add(1.0386032577072378E209);
      complex1.getField();
      Complex.valueOf(1.0386032577072378E209, 2753.0);
      complex4.NaN.subtract(complex2);
      complex4.ZERO.readResolve();
      Complex complex5 = Complex.valueOf(1.0386032577072378E209, 0.0);
      complex4.tanh();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex4.subtract(complex5);
      complex6.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0, 1.798489141298457E-208);
      complex8.ONE.asin();
      Complex complex9 = complex7.ONE.cos();
      complex4.isNaN();
      complex3.pow(0.0);
      complex7.divide(complex2);
      complex9.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.tanh();
      complex2.NaN.tanh();
      Complex complex3 = Complex.valueOf((-20.0), 465.52207);
      Complex complex4 = complex3.INF.subtract(0.0);
      complex4.I.asin();
      complex3.INF.getArgument();
      complex3.NaN.getField();
      complex0.abs();
      Complex complex5 = complex0.cosh();
      complex0.sin();
      complex5.acos();
      complex1.log();
      complex0.exp();
      Complex complex6 = complex0.conjugate();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.exp();
      complex3.multiply((-737));
      complex2.isNaN();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex0.createComplex(1.545909820981726E-8, 0.0);
      Complex complex7 = complex1.sin();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex8.reciprocal();
      complex9.ONE.pow(complex2);
      Complex complex10 = complex1.tan();
      complex7.NaN.pow(complex8);
      complex7.hashCode();
      complex5.add(complex7);
      complex10.isNaN();
      Complex complex11 = complex4.multiply((-2114));
      Complex.valueOf((double) (-2114));
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.NaN.pow(0.0);
      complex3.INF.toString();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex1.I.acos();
      complex5.ZERO.negate();
      complex5.ONE.add((-2283.365));
      complex5.NaN.log();
      Complex complex6 = complex4.INF.conjugate();
      complex0.ZERO.reciprocal();
      complex1.isInfinite();
      Complex complex7 = complex0.divide(complex1);
      complex7.ZERO.add(complex1);
      complex6.toString();
      Complex complex8 = complex4.atan();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.INF.multiply((-2283.365));
      complex2.exp();
      complex1.toString();
      complex8.cosh();
      complex4.sqrt();
      complex5.multiply((-2283.365));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.NaN.pow(Double.NaN);
      Complex complex4 = complex3.INF.tanh();
      complex3.exp();
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex5.ZERO.pow(7.425346071427343E-8);
      complex6.I.subtract(complex2);
      Complex complex7 = complex0.I.conjugate();
      complex0.getArgument();
      Complex complex8 = complex7.acos();
      complex8.INF.sqrt1z();
      Complex complex9 = complex5.divide(0.0);
      complex9.NaN.createComplex(1.5707963267948966, 1.5707963267948966);
      complex5.conjugate();
      complex7.getArgument();
      Complex complex10 = complex5.cosh();
      complex0.log();
      complex10.log();
      Complex.valueOf(0.0);
      complex0.getReal();
      complex4.pow(Double.NaN);
      complex8.sinh();
      complex10.createComplex(Double.NaN, 2104.4273273);
      complex8.sin();
      complex1.isInfinite();
      complex5.add(1.5707963267948966);
      Complex complex11 = Complex.valueOf((-598.0026198672));
      complex10.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.toString();
      complex0.getReal();
      Complex complex3 = complex2.subtract(0.0);
      complex2.INF.createComplex((-326.452967681005), (-326.452967681005));
      complex3.subtract(complex0);
      Complex.valueOf(0.0);
      Complex.valueOf(514.240389297606);
      Complex complex4 = complex3.conjugate();
      complex3.I.pow(0.0);
      Complex complex5 = complex4.atan();
      complex5.isNaN();
      complex3.tan();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(1741.0);
      Complex complex2 = complex1.pow(complex0);
      complex1.ZERO.atan();
      Complex complex3 = complex2.NaN.sqrt();
      complex3.I.multiply(complex2);
      complex2.INF.hashCode();
      Complex complex4 = complex1.reciprocal();
      Complex.valueOf(852.05873576);
      Complex complex5 = complex1.cosh();
      complex5.isInfinite();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.multiply(complex6);
      Complex complex8 = complex7.cos();
      complex8.I.log();
      complex4.createComplex(0.0, 0.0);
      complex5.exp();
      Complex complex9 = complex4.tan();
      complex1.multiply(1741.0);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = (-1665.297636);
      double double1 = 2226.24454834048;
      Complex complex1 = complex0.ZERO.pow(2226.24454834048);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.NaN.add(complex1);
      complex3.ONE.getArgument();
      Complex complex4 = complex0.ONE.pow((-1665.297636));
      int int0 = 0;
      complex1.NaN.getArgument();
      try { 
        complex4.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      complex0.ONE.toString();
      Complex complex1 = null;
      complex0.ZERO.cos();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-1210.41649048709));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.ZERO.multiply((-1210.41649048709));
      complex3.INF.abs();
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex0.pow(complex2);
      Complex.valueOf((-1210.41649048709));
      complex1.ZERO.sinh();
      complex5.toString();
      complex0.divide((-1210.41649048709));
      complex6.getArgument();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.I.sinh();
      complex8.NaN.sqrt();
      complex5.sqrt1z();
      Complex complex9 = Complex.valueOf(2085.0);
      Complex complex10 = complex9.INF.pow((-1.4354545209473424));
      complex10.multiply(2085.0);
      complex9.ZERO.conjugate();
      Complex.valueOf(0.0, (-1210.41649048709));
      complex1.atan();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex5.multiply(complex11);
      Complex complex13 = complex12.ONE.cos();
      complex13.ZERO.divide(0.0);
      complex6.pow(0.0);
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-2617.9), (-2617.9));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.I.pow(complex1);
      complex2.I.multiply((-2617.9));
      complex0.createComplex((-2617.9), (-2617.9));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.pow(0.0);
      complex2.I.hashCode();
      Complex complex3 = complex2.tan();
      complex3.I.sqrt();
      Complex complex4 = complex0.tan();
      complex4.ZERO.sqrt();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2147.0);
      complex1.divide(4.999126524757713E-197);
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.NaN.atan();
      Complex complex4 = complex3.subtract((-1606.8));
      Complex complex5 = complex0.sinh();
      Complex.valueOf((-1606.8), 2147.0);
      complex5.equals(complex0);
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.ONE.conjugate();
      Complex complex8 = complex2.cos();
      Complex complex9 = Complex.valueOf(3.35462624207139E-4, 0.0);
      complex9.exp();
      complex2.I.subtract(0.0);
      complex2.ZERO.reciprocal();
      Complex complex10 = complex8.pow(2070.489489);
      Complex complex11 = complex10.I.asin();
      Complex complex12 = complex2.divide(3.35462624207139E-4);
      Complex complex13 = complex12.I.cosh();
      complex6.equals(complex7);
      complex12.INF.readResolve();
      complex2.readResolve();
      complex13.isInfinite();
      complex4.getReal();
      complex4.isInfinite();
      complex3.divide(1060.3323846348576);
      complex5.cosh();
      complex13.hashCode();
      complex9.getField();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-1248.866999));
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.isNaN();
      Complex complex3 = complex0.atan();
      complex3.I.sinh();
      Complex complex4 = complex0.pow((-1446.4692457));
      complex4.NaN.createComplex(0.0, (-1446.4692457));
      complex2.createComplex(1.0, (-1446.4692457));
      complex4.log();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(990.456359456, 990.456359456);
      complex0.ZERO.tanh();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ONE.pow(990.456359456);
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex3.ONE.acos();
      complex4.INF.getArgument();
      Complex complex5 = complex2.divide(990.456359456);
      complex1.readResolve();
      complex0.subtract(990.456359456);
      complex0.cos();
      complex0.ZERO.sin();
      complex2.exp();
      Complex complex6 = complex5.divide(990.456359456);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      complex0.asin();
      Complex complex1 = Complex.valueOf((-737.1));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.tanh();
      complex3.ONE.subtract(1918.0509151051);
      complex0.getReal();
      complex2.tanh();
      Complex complex4 = complex0.cosh();
      complex1.acos();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.atan();
      complex1.hashCode();
      complex3.divide((-413.635));
      complex0.conjugate();
      complex2.subtract(3414.70609253995);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.negate();
      complex2.toString();
      complex0.isNaN();
      Complex complex3 = complex1.NaN.acos();
      complex3.ZERO.sinh();
      Complex complex4 = complex3.exp();
      complex4.add(0.0);
      complex0.multiply(complex1);
      complex3.ZERO.divide((-1910.697605356219));
      Complex complex5 = complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.NaN.hashCode();
      complex2.sqrt();
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.INF.getField();
      Complex complex2 = complex0.multiply(complex1);
      complex2.createComplex((-4905.99), 0.0);
      complex0.readResolve();
      complex1.sinh();
      complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(397.551808283402, 1108.57633);
      complex0.multiply(8.756510122348782E-27);
      complex0.conjugate();
      complex0.I.readResolve();
      complex0.I.hashCode();
      Complex complex1 = complex0.cosh();
      complex0.hashCode();
      complex0.subtract(397.551808283402);
      Complex complex2 = complex0.negate();
      complex2.ONE.multiply(complex1);
      complex0.pow(1108.57633);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.ONE.multiply(484.977616411455);
      complex4.isNaN();
      complex4.createComplex(0.0, 0.0);
      Complex complex6 = complex2.asin();
      complex0.ZERO.exp();
      Complex.valueOf(0.0);
      Complex.valueOf(0.0, 5.184023388254773E-130);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.INF.add(complex7);
      complex8.NaN.tanh();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = Complex.valueOf(484.977616411455);
      complex10.NaN.abs();
      complex4.log();
      complex9.subtract(0.0);
      complex5.cos();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2984.36433844);
      Complex complex1 = complex0.negate();
      complex0.divide(complex1);
      complex0.equals("\"Y_PsL~]][U");
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.divide(5006.0381017844);
      Complex complex2 = complex1.I.add(6.283185307179586);
      complex2.ZERO.atan();
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1766.63652737743, 1766.63652737743);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.I.reciprocal();
      complex2.INF.add(complex0);
      complex0.getImaginary();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-982.3905757));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex2.acos();
      Complex complex3 = Complex.INF;
      complex2.ONE.pow(complex3);
      Complex complex4 = complex2.ZERO.add((-20.0));
      Complex complex5 = complex1.log();
      Complex complex6 = complex2.ONE.acos();
      Complex complex7 = complex1.sqrt();
      complex7.ONE.readResolve();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.ZERO.conjugate();
      Complex complex10 = complex8.I.tanh();
      complex6.INF.pow(0.0);
      Complex complex11 = complex10.multiply((-982.3905757));
      complex11.ONE.sin();
      complex6.ONE.add(complex0);
      complex10.I.divide((-1787.53749598));
      complex11.INF.sin();
      complex4.hashCode();
      complex6.getImaginary();
      complex11.getField();
      complex2.add(complex7);
      Complex complex12 = complex11.tanh();
      complex4.subtract((-33.13121274062));
      complex12.divide((-33.13121274062));
      complex11.pow(complex5);
      complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.exp();
      complex1.I.getArgument();
      complex1.ZERO.pow(0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.divide(162.17);
      Complex complex4 = complex0.multiply((-608.4346));
      Complex complex5 = complex0.NaN.sin();
      Complex complex6 = complex2.ZERO.multiply(complex1);
      complex6.ONE.cos();
      Complex complex7 = complex6.ONE.acos();
      Complex complex8 = complex2.ZERO.conjugate();
      Complex complex9 = complex8.ZERO.divide(complex5);
      Complex complex10 = complex5.ZERO.multiply(728);
      Complex complex11 = complex2.tanh();
      Complex complex12 = complex4.asin();
      complex12.isInfinite();
      assertTrue(complex12.equals((Object)complex10));
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      complex3.isNaN();
      Complex complex13 = complex5.multiply((-608.4346));
      complex13.sin();
      List<Complex> list0 = complex5.nthRoot(37);
      assertTrue(list0.contains(complex13));
      
      complex11.atan();
      Complex complex14 = complex0.cos();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex9.conjugate();
      Complex complex16 = complex15.sinh();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertSame(complex2, complex6);
      assertTrue(complex8.equals((Object)complex7));
      assertSame(complex16, complex3);
      
      Complex complex17 = complex1.multiply((-1));
      assertSame(complex17, complex9);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-4441.8));
      Complex complex1 = new Complex((-1.0));
      complex1.ONE.acos();
      Complex.valueOf((-4441.8));
      complex0.INF.getField();
      complex0.pow(complex1);
      complex0.getReal();
      int int0 = (-1211);
      try { 
        complex0.nthRoot((-1211));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,211
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex1.INF.sin();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex3.ZERO.sqrt();
      Complex complex6 = complex4.reciprocal();
      complex6.ONE.cos();
      assertEquals(1.8508157176809255, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      complex1.readResolve();
      complex3.isInfinite();
      assertTrue(complex3.isNaN());
      
      Complex complex7 = complex1.add(complex2);
      assertEquals(0.8813735870195428, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.multiply(1520);
      assertTrue(complex8.equals((Object)complex5));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.conjugate();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex3.isInfinite());
  }
}
