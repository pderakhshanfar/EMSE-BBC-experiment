/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:48:53 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      Complex complex1 = new Complex(604.0792, 20.0);
      complex1.tan();
      complex1.tanh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(763.194209305162, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-157.7235), (-620.817170497));
      complex1.pow(complex0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(12.563397068220398, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(283.451479216064, 9.69547908925135E-302);
      Complex complex2 = complex0.divide(complex1);
      complex2.divide(283.451479216064);
      Complex complex3 = Complex.ZERO;
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(12.563397068220398, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(12.563397068220398, Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(12.563397068220398, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(2717);
      Complex complex3 = complex2.conjugate();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double double0 = 1928.396055899;
      Complex complex0 = Complex.valueOf(1928.396055899, 1928.396055899);
      Complex complex1 = complex0.ONE.pow(1928.396055899);
      complex0.add(complex1);
      Complex complex2 = complex0.ZERO.negate();
      complex2.ONE.reciprocal();
      complex2.I.negate();
      complex2.INF.hashCode();
      Complex complex3 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.352594940263854E270);
      Complex complex2 = complex1.add(2.0);
      Complex complex3 = complex1.acos();
      int int0 = 3174;
      Complex.valueOf(1.352594940263854E270, 1.0531206130981445);
      double double0 = 8.598369704466743E-136;
      Complex complex4 = Complex.valueOf(8.598369704466743E-136);
      complex2.add(2.0);
      complex3.exp();
      try { 
        complex4.nthRoot((-4935));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,935
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.NaN.add((-20.0));
      complex1.ONE.acos();
      Complex complex2 = Complex.valueOf((double) 3174, (-20.0));
      Complex.valueOf((double) 3174);
      Complex complex3 = complex0.add(1.0531206130981445);
      complex3.INF.exp();
      complex2.nthRoot(3174);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ONE.createComplex(1.0531206130981445, (-20.0));
      Complex complex7 = Complex.valueOf(1.5979955196380615, (double) 3174);
      Complex.valueOf((double) 3174, (double) 3174);
      complex6.tan();
      Complex complex8 = new Complex(19.582406020502802, (-20.0));
      complex8.multiply(complex7);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-598.29969353645));
      complex0.I.multiply(16.295980017796516);
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.divide((-1004.3));
      complex1.INF.sinh();
      Complex complex2 = new Complex(111.28521605, Double.POSITIVE_INFINITY);
      complex2.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex5 = Complex.valueOf(0.0, Double.NaN);
      complex5.asin();
      complex0.pow(complex2);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.log();
      complex2.add(complex1);
      complex0.getField();
      Complex complex3 = Complex.I;
      complex2.ZERO.getArgument();
      complex0.abs();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1185.4375241844891, 1185.4375241844891);
      complex1.acos();
      complex1.add(1.0531206130981445);
      Complex complex2 = complex0.exp();
      complex1.tan();
      Complex complex3 = complex2.sinh();
      complex3.I.reciprocal();
      complex1.createComplex(1798.004785991, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(2.2123895973891194E-4, 2.7002575714977818E-8);
      Complex complex5 = new Complex(1646.9);
      complex3.tanh();
      Complex complex6 = new Complex(1.0531206130981445, 1.0531206130981445);
      complex0.asin();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex((-1971.02), 1185.4375241844891);
      complex4.asin();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.NaN.add(1184.3165918);
      Complex complex2 = complex1.ONE.acos();
      complex1.INF.exp();
      complex0.ZERO.conjugate();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = new Complex((-20.0));
      Complex complex5 = complex2.NaN.exp();
      complex5.NaN.abs();
      Complex complex6 = Complex.I;
      complex0.equals(complex4);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      complex1.INF.sqrt1z();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.divide(6.283185307179586);
      complex0.abs();
      Complex complex4 = complex2.pow(complex0);
      complex0.subtract(complex4);
      Complex complex5 = complex1.conjugate();
      complex3.abs();
      complex4.toString();
      complex3.exp();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex1.conjugate();
      complex7.atan();
      complex0.sin();
      complex6.log();
      complex0.tanh();
      complex5.atan();
      complex5.sqrt1z();
      complex6.divide(261.2779035168);
      Complex complex8 = Complex.valueOf((-1628.69), 0.0);
      complex2.negate();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
      Complex complex1 = complex0.multiply((-2393));
      Complex complex2 = complex0.add(Double.NaN);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.multiply(Double.NaN);
      complex1.nthRoot(2969);
      complex4.tan();
      complex1.sinh();
      Complex.valueOf(1.5979955196380615, (double) (-2393));
      Complex complex5 = new Complex(641.99);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, (-1620.9805967042569));
      complex6.tanh();
      Complex complex7 = new Complex(1646.9, (-1.0));
      complex4.asin();
      Complex complex8 = Complex.I;
      Complex complex9 = new Complex(Double.NaN, 2.35385266837019584E17);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-2374.462322412546), (-2374.462322412546));
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.negate();
      complex2.multiply(37);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex0.multiply(complex1);
      complex0.atan();
      Complex complex6 = complex4.subtract((-2295.0));
      complex3.getField();
      Complex complex7 = complex6.pow(complex5);
      Complex complex8 = complex0.add((-2.356194490192345));
      Complex complex9 = complex3.log();
      complex7.sinh();
      complex9.getField();
      Complex complex10 = Complex.ZERO;
      complex10.getField();
      Complex complex11 = complex6.multiply(complex8);
      complex5.asin();
      complex4.pow(complex11);
      Complex complex12 = Complex.valueOf((-2374.462322412546));
      complex12.multiply(complex5);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-2374.462322412546), (-2374.462322412546));
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      complex1.I.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.multiply((-660));
      complex1.add((-1155.14605722654));
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.multiply((-2374.462322412546));
      complex5.nthRoot(71);
      complex5.tan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.sinh();
      Complex.valueOf(1.0, (-1117.326060524));
      Complex complex8 = new Complex(1814.5266203099513);
      complex4.tanh();
      Complex complex9 = new Complex((-1908.8228273), Double.NaN);
      complex7.asin();
      Complex complex10 = Complex.I;
      Complex complex11 = new Complex((-803.0), 3177);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.abs();
      complex0.toString();
      Complex complex1 = Complex.valueOf(3.0599055362181553);
      complex1.nthRoot(17);
      Complex.valueOf(1.0);
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = Complex.valueOf(1.3119103908538818, 3.0599055362181553);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex2.tanh();
      Complex complex5 = Complex.I;
      complex5.asin();
      Complex complex6 = Complex.I;
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-2374.462322412546), (-2374.462322412546));
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.negate();
      complex2.ZERO.multiply(1105);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.I.multiply(complex1);
      complex4.I.atan();
      Complex complex5 = complex1.subtract((-2374.462322412546));
      complex5.ONE.getField();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex0.add((-2374.462322412546));
      complex7.log();
      complex1.sinh();
      complex5.getField();
      Complex complex8 = Complex.ZERO;
      complex7.ZERO.getField();
      Complex complex9 = Complex.INF;
      complex3.asin();
      complex6.asin();
      Complex complex10 = Complex.I;
      Complex complex11 = new Complex(1105, Double.POSITIVE_INFINITY);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.ONE.subtract(complex0);
      Complex complex4 = complex1.I.divide(6.283185307179586);
      complex4.abs();
      Complex complex5 = complex3.ZERO.multiply((-3.552713678800501E-15));
      complex2.pow(complex5);
      Complex complex6 = complex2.ONE.subtract(complex0);
      Complex complex7 = complex2.NaN.conjugate();
      complex7.INF.abs();
      complex0.toString();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.atan();
      complex9.ZERO.conjugate();
      Complex complex10 = complex2.atan();
      complex10.ZERO.sin();
      complex8.log();
      complex8.tanh();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex11.ZERO.sqrt1z();
      complex12.ONE.divide(Double.POSITIVE_INFINITY);
      complex8.sin();
      Complex.valueOf((-803.29725933969), 0.23128876038597942);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.ZERO.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.INF;
      complex2.abs();
      complex0.abs();
      complex2.NaN.pow((-1798.43));
      complex1.toString();
      complex2.multiply(0.3682039026276807);
      complex2.nthRoot(17);
      complex0.tan();
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex3.sinh();
      Complex.valueOf((double) 17, 1.5707963267948966);
      Complex complex5 = new Complex((-196.1270133));
      complex3.tanh();
      Complex complex6 = complex0.asin();
      complex4.ONE.conjugate();
      Complex complex7 = Complex.I;
      complex4.asin();
      complex6.add(complex3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.add(complex1);
      complex0.getField();
      Complex complex4 = complex3.add((-1.0));
      Complex complex5 = complex0.acos();
      Complex complex6 = complex4.multiply(711);
      Complex complex7 = complex2.add(312.92430432469);
      complex6.exp();
      Complex complex8 = new Complex(312.92430432469);
      complex8.log();
      Complex complex9 = complex5.conjugate();
      complex4.reciprocal();
      Complex complex10 = complex6.subtract((double) 711);
      complex9.readResolve();
      Complex complex11 = Complex.valueOf((-1.0), 982.0);
      complex11.exp();
      complex7.abs();
      complex6.multiply((-1.0));
      Complex complex12 = Complex.INF;
      complex12.equals("vXn87\"L(vK:OdB=!?6?");
      Complex complex13 = Complex.I;
      Complex complex14 = complex13.reciprocal();
      Complex.valueOf((double) 711, 312.92430432469);
      complex9.nthRoot(1073741824);
      Complex complex15 = complex4.atan();
      complex14.equals(complex10);
      complex14.divide(complex15);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.subtract(2044.9393901);
      Complex complex3 = Complex.valueOf(5.1090893668503945E-12);
      complex1.readResolve();
      Complex complex4 = new Complex(5.1090893668503945E-12);
      complex4.multiply(complex0);
      Complex complex5 = complex3.log();
      Complex complex6 = complex3.add(complex5);
      complex3.getField();
      complex6.abs();
      complex5.abs();
      complex1.toString();
      Complex complex7 = complex0.multiply(4.697483373495968);
      complex0.nthRoot(340);
      complex1.tan();
      complex2.sinh();
      complex1.nthRoot(468);
      Complex complex8 = complex3.conjugate();
      complex5.negate();
      Complex complex9 = complex8.pow((double) 468);
      complex9.getArgument();
      complex6.pow(complex0);
      complex5.nthRoot(871);
      complex7.divide(complex9);
      Complex complex10 = Complex.valueOf((-2290.71559428018), (double) 871);
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      complex0.I.abs();
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.abs();
      Complex complex1 = complex0.ZERO.divide(complex0);
      Complex complex2 = Complex.INF;
      complex1.INF.divide(complex2);
      complex0.reciprocal();
      Complex complex3 = complex1.multiply((-403));
      complex3.createComplex(0.0, 2.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(578.0, 3.457553391989844E-8);
      Complex complex1 = complex0.I.exp();
      complex0.subtract(3.457553391989844E-8);
      Complex.valueOf(578.0);
      Object object0 = complex0.INF.readResolve();
      Complex complex2 = Complex.valueOf(3.457553391989844E-8, 3.457553391989844E-8);
      Complex complex3 = ((Complex) object0).I.log();
      complex3.INF.getField();
      complex3.ZERO.abs();
      complex1.abs();
      complex0.toString();
      complex1.multiply((double) 340);
      Complex complex4 = Complex.valueOf(543.9570540677549);
      complex4.nthRoot(340);
      Complex complex5 = new Complex(3134.135404);
      Complex complex6 = complex5.tan();
      complex6.sinh();
      Complex.valueOf(0.0, Double.NaN);
      Complex complex7 = new Complex(3593.0);
      complex2.tanh();
      complex0.asin();
      Complex complex8 = Complex.I;
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = new Complex((-1.899407107267079E-8));
      complex4.getField();
      Complex complex5 = Complex.I;
      complex2.abs();
      complex0.abs();
      complex5.toString();
      Complex complex6 = complex4.multiply((-1.899407107267079E-8));
      complex6.nthRoot(17);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.sinh();
      Complex.valueOf(2.1930815295603267E-4, Double.POSITIVE_INFINITY);
      complex5.pow((double) 17);
      Complex.valueOf(1.5707963267948966);
      complex0.sqrt();
      complex0.tan();
      complex7.sin();
      Complex.valueOf((-1.899407107267079E-8), 127.875905696);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-2374.462322412546), (-2374.462322412546));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.negate();
      complex2.ZERO.multiply(1105);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.I.multiply(complex1);
      complex4.I.atan();
      Complex complex5 = complex1.subtract((-649.0));
      complex5.ONE.getField();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.log();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex3.reciprocal();
      complex6.subtract((-2374.462322412546));
      complex4.readResolve();
      complex9.exp();
      complex2.abs();
      complex8.multiply((-0.9950124688279302));
      Complex complex10 = Complex.NaN;
      complex10.equals("1)b");
      complex9.reciprocal();
      complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2958.807);
      Complex complex1 = complex0.subtract((-2.8362173224732088E165));
      Complex complex2 = complex0.multiply((-990));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex4.I.multiply((-990));
      complex6.I.asin();
      complex5.INF.cosh();
      complex5.getArgument();
      Complex complex7 = complex2.sinh();
      complex7.hashCode();
      complex2.multiply(Double.NaN);
      complex0.equals(complex6);
      complex6.reciprocal();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-2.8362173224732088E165));
      complex0.multiply((-990));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2390.24557));
      complex4.I.getArgument();
      Complex complex5 = complex3.NaN.negate();
      Complex complex6 = complex3.I.multiply((-990));
      complex6.I.asin();
      complex5.INF.cosh();
      complex5.getArgument();
      Complex complex7 = Complex.valueOf(Double.NaN, (double) (-990));
      complex7.hashCode();
      complex1.getReal();
      complex2.reciprocal();
      Complex complex8 = Complex.ONE;
      Complex complex9 = new Complex(Double.NaN, (-2.8362173224732088E165));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-2374.462322412546), (-2374.462322412546));
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.negate();
      complex2.ZERO.multiply(1105);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.I.multiply(complex1);
      Complex complex5 = complex4.I.atan();
      Complex complex6 = complex1.subtract((-649.0));
      complex6.ONE.getField();
      complex1.pow(complex0);
      Complex complex7 = complex0.add((-649.0));
      Complex complex8 = complex7.log();
      complex1.sinh();
      complex6.getField();
      Complex complex9 = Complex.ZERO;
      complex7.ZERO.getField();
      complex6.multiply(complex9);
      complex3.asin();
      Complex complex10 = complex8.pow(complex5);
      Complex complex11 = Complex.valueOf(638.938356814674);
      complex11.INF.multiply(complex10);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(578.0, 3.457553391989844E-8);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.subtract((-304.63));
      complex2.multiply((-990));
      Complex complex3 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(3177);
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex0.exp();
      complex1.log();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.reciprocal();
      complex2.subtract((-2461.2));
      complex5.readResolve();
      complex1.asin();
      Complex complex6 = complex4.exp();
      complex5.abs();
      Complex complex7 = Complex.valueOf(2.0020234215759705E-8);
      Complex complex8 = complex7.multiply(2.380738071335498E-8);
      complex8.equals(complex7);
      Complex complex9 = Complex.valueOf((-0.5123937872150726));
      complex9.getArgument();
      complex6.multiply(20.0);
      complex5.asin();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-4560.794), (-4560.794));
      Complex complex1 = complex0.ONE.add((-4560.794));
      complex1.reciprocal();
      double double0 = 0.35128939151763916;
      Complex complex2 = Complex.valueOf(0.35128939151763916);
      Complex complex3 = complex0.NaN.add(complex2);
      complex3.ZERO.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.ZERO.divide(complex4);
      Complex complex6 = complex5.I.sinh();
      complex0.cos();
      Complex complex7 = complex5.multiply(1689);
      complex7.I.multiply(complex6);
      complex1.getArgument();
      double double1 = 2640.78921;
      Complex complex8 = new Complex(2640.78921, 1689);
      int int0 = 1174;
      // Undeclared exception!
      complex2.nthRoot(1546081761);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.ZERO.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.tan();
      complex2.add((-255.7774925315));
      complex0.add(0.0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = new Complex(0.6415454149246216, (-20.0));
      complex4.getField();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5968599319458008);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(0.5968599319458008);
      complex2.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply((-640));
      Complex complex5 = complex2.exp();
      complex1.log();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex5.subtract(3.3527476928456816E267);
      complex8.readResolve();
      Complex complex10 = complex9.asin();
      complex2.exp();
      complex4.multiply((-20.0));
      complex0.equals(complex4);
      complex10.getArgument();
      Complex complex11 = complex2.multiply(0.5968599319458008);
      complex7.asin();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.add(complex1);
      complex0.getField();
      Complex complex4 = Complex.I;
      complex4.abs();
      complex2.abs();
      complex0.toString();
      Complex complex5 = complex1.multiply((-196.1270133));
      complex2.nthRoot(17);
      complex3.tan();
      Complex complex6 = complex1.sinh();
      complex6.I.getArgument();
      Complex complex7 = new Complex(2640.78921, 2640.78921);
      complex5.nthRoot(1174);
      Complex.valueOf((-11.572342114898));
      complex3.negate();
      Complex complex8 = complex7.pow(568.604);
      complex6.getArgument();
      Complex complex9 = Complex.ONE;
      complex9.nthRoot(17);
      Complex complex10 = Complex.ONE;
      complex2.divide(complex9);
      Complex.valueOf(568.604, 0.0);
      complex7.cos();
      Complex complex11 = complex8.add(5.6696103838614634E-8);
      complex11.add(complex9);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(578.0, 3.457553391989844E-8);
      Complex complex1 = complex0.I.exp();
      complex0.subtract(3.457553391989844E-8);
      Complex complex2 = Complex.valueOf(578.0);
      Complex complex3 = (Complex)complex0.INF.readResolve();
      Complex complex4 = complex1.INF.multiply(complex0);
      complex2.add(2058.0119058587);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex4.multiply(3177);
      Complex complex7 = complex0.add(3.457553391989844E-8);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex4.log();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = Complex.valueOf(5522.4100536672, (double) 3177);
      Complex complex12 = complex11.reciprocal();
      complex9.subtract(Double.NaN);
      complex6.readResolve();
      complex12.asin();
      complex10.exp();
      complex7.abs();
      complex10.multiply((double) 3177);
      Complex complex13 = Complex.valueOf((-43.635376208649));
      complex9.equals(complex13);
      complex11.getArgument();
      complex11.multiply(1.0);
      complex5.asin();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.3809312720974749);
      complex1.subtract((-357.98423850180643));
      Complex complex2 = complex1.multiply((-990));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.multiply(938);
      Complex complex7 = Complex.ONE;
      complex7.asin();
      Complex complex8 = new Complex((-990), 0.35128939151763916);
      complex8.cosh();
      complex8.getArgument();
      complex6.sinh();
      complex4.hashCode();
      complex1.getReal();
      complex2.reciprocal();
      complex5.nthRoot(938);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(578.0, 3.457553391989844E-8);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.subtract(3.457553391989844E-8);
      Complex.valueOf(578.0);
      complex0.INF.readResolve();
      Complex complex3 = complex1.INF.multiply(complex0);
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.NaN.add(complex3);
      complex6.INF.getField();
      complex5.ZERO.abs();
      complex1.abs();
      complex0.toString();
      complex6.multiply((double) 340);
      complex4.nthRoot(340);
      Complex complex7 = complex1.tan();
      Complex complex8 = complex1.sinh();
      complex8.I.nthRoot(340);
      complex1.conjugate();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex8.pow(578.0);
      complex10.getArgument();
      complex0.multiply(103.410296437);
      complex10.cosh();
      complex9.nthRoot(782);
      Complex complex11 = complex6.divide(complex4);
      complex3.acos();
      complex7.subtract(complex11);
      complex5.multiply(1249);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-4560.794), (-4560.794));
      Complex complex1 = complex0.ONE.add((-4560.794));
      complex1.reciprocal();
      Complex complex2 = Complex.valueOf(0.35128939151763916);
      Complex complex3 = complex0.NaN.add(complex2);
      complex3.ZERO.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.ZERO.divide(complex4);
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex0.cos();
      complex7.NaN.multiply((-4560.794));
      Complex complex8 = complex5.multiply(1689);
      complex8.I.multiply(complex6);
      Complex complex9 = complex0.I.negate();
      complex8.ONE.atan();
      Complex complex10 = complex9.ONE.atan();
      Complex complex11 = complex5.subtract(complex8);
      Complex complex12 = complex11.divide((-4560.794));
      Complex complex13 = complex12.subtract(4087.66);
      complex13.ONE.atan();
      complex13.ZERO.log();
      Complex complex14 = complex5.I.divide((-4560.794));
      complex1.multiply((-4560.794));
      Complex complex15 = Complex.valueOf(0.8414709848078965);
      complex15.add(1.279910496643312E214);
      Complex complex16 = complex10.add(2189.6204537465);
      complex14.tanh();
      complex16.getField();
      complex15.log();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.cos();
      complex0.equals(complex2);
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = Complex.valueOf(Double.NaN, 1.5263078212738037);
      complex4.pow((-1991.95299));
      Complex complex6 = Complex.valueOf((-1991.95299));
      complex4.sqrt();
      complex1.tan();
      complex6.sin();
      Complex.valueOf(1.5263078212738037, 3259.48);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-4560.794), (-4560.794));
      Complex complex1 = complex0.ONE.add((-4560.794));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf(0.35128939151763916);
      Complex complex4 = complex0.NaN.add(complex3);
      complex4.ZERO.hashCode();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.ZERO.divide(complex5);
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex6.multiply(1689);
      Complex complex10 = complex9.I.multiply(complex7);
      Complex complex11 = complex0.I.negate();
      Complex complex12 = complex11.ONE.atan();
      Complex complex13 = complex6.subtract(complex9);
      Complex complex14 = complex13.divide((-4560.794));
      Complex complex15 = complex14.subtract(4087.66);
      Complex complex16 = complex15.ONE.atan();
      complex15.ZERO.log();
      complex6.I.divide((-4560.794));
      complex0.INF.asin();
      complex15.ZERO.atan();
      complex3.nthRoot(1689);
      Object object0 = complex12.readResolve();
      complex3.equals(object0);
      complex8.getField();
      complex3.multiply(complex16);
      complex10.sqrt1z();
      complex2.reciprocal();
      complex0.getImaginary();
      complex0.pow(2.425402115319395E-188);
      complex3.subtract((-4560.794));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.add(complex1);
      complex0.getField();
      Complex complex4 = Complex.I;
      complex4.abs();
      complex2.abs();
      complex0.toString();
      complex1.multiply((-196.1270133));
      complex2.nthRoot(17);
      complex3.tan();
      Complex complex5 = complex1.sinh();
      complex5.I.getArgument();
      Complex complex6 = new Complex(2640.78921, 2640.78921);
      complex6.nthRoot(1174);
      Complex complex7 = Complex.valueOf((-196.1270133));
      complex7.negate();
      complex1.pow((double) 1174);
      complex3.getArgument();
      Complex complex8 = Complex.ONE;
      complex7.nthRoot(340);
      Complex complex9 = Complex.ONE;
      complex9.divide(complex3);
      Complex.valueOf(200.66595, 2944.2694683414775);
      Complex complex10 = complex6.cos();
      complex10.add((-3176.0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2958.807);
      complex0.subtract((-2.8362173224732088E165));
      complex0.multiply((-990));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.negate();
      Complex complex3 = complex2.I.multiply((-990));
      Complex complex4 = complex3.I.asin();
      complex4.exp();
      complex2.abs();
      complex0.multiply((-2549.3));
      complex3.equals("");
      complex3.getArgument();
      Complex complex5 = complex2.multiply(0.0);
      Complex complex6 = complex3.cosh();
      complex1.nthRoot(782);
      complex5.divide(complex4);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.acos();
      complex4.subtract(complex8);
      complex6.multiply((-2147483647));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.NaN;
      complex3.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.divide(complex1);
      complex4.sinh();
      complex0.cos();
      Complex complex6 = complex0.multiply(1689);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex5.multiply(complex7);
      Complex complex9 = complex8.negate();
      complex8.atan();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.subtract(complex0);
      complex0.divide((double) 1689);
      complex2.subtract(2702.642627039);
      Complex complex12 = complex5.atan();
      complex9.log();
      complex12.divide(1.0531206130981445);
      complex6.asin();
      complex7.add((-0.6905817003766437));
      Object object0 = new Object();
      complex11.readResolve();
      Object object1 = new Object();
      complex8.equals(object1);
      complex6.tanh();
      complex1.sqrt();
      complex12.getField();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-4560.794), (-4560.794));
      Complex complex1 = complex0.ONE.add((-4560.794));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.add((-5099.77297033));
      Complex complex5 = complex3.acos();
      Complex complex6 = complex0.multiply(3177);
      Complex complex7 = complex6.add((-4560.794));
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.log();
      complex5.conjugate();
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex1.subtract(1155.9999999654244);
      complex11.readResolve();
      complex10.asin();
      Complex complex12 = complex0.exp();
      complex3.abs();
      complex2.multiply(1155.9999999654244);
      Object object0 = new Object();
      complex3.equals(object0);
      complex12.getArgument();
      complex8.multiply((-1.0));
      Complex complex13 = complex1.cosh();
      complex3.nthRoot(782);
      complex4.divide(complex8);
      complex6.acos();
      complex13.subtract(complex7);
      complex6.multiply(988);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1730.564373374));
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      complex1.acos();
      Complex complex4 = Complex.valueOf(975.2784491137176, 4164.66483867);
      complex4.ONE.add(complex0);
      Complex complex5 = complex0.ZERO.add(complex3);
      complex1.NaN.negate();
      complex0.negate();
      complex1.nthRoot(1);
      Complex complex6 = complex4.INF.sqrt();
      complex0.abs();
      complex1.createComplex(1381.0662461322977, 1730.564373374);
      Complex complex7 = Complex.valueOf((-2703.0));
      complex6.NaN.pow(complex7);
      complex4.ZERO.add((-2703.0));
      complex0.negate();
      Complex complex8 = complex5.tan();
      complex8.readResolve();
      Complex complex9 = complex5.sqrt1z();
      complex4.getField();
      complex9.atan();
      Complex complex10 = complex6.sqrt();
      complex0.atan();
      complex10.multiply(1);
      Complex.valueOf(3364.02231409, 3364.02231409);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.valueOf((-1965.71015163), 0.35128939151763916);
      complex2.divide(complex1);
      complex3.createComplex(Double.NaN, 2027.1417737286);
      complex0.tanh();
      complex2.asin();
      complex4.reciprocal();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      complex2.ONE.sinh();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = complex5.INF.divide(complex4);
      complex2.getImaginary();
      Complex complex7 = complex4.ZERO.log();
      complex0.readResolve();
      Complex complex8 = complex7.asin();
      Complex complex9 = Complex.I;
      complex9.exp();
      complex6.abs();
      complex4.multiply((-1688.2108505));
      Complex complex10 = (Complex)complex8.readResolve();
      complex7.equals(complex10);
      complex2.getArgument();
      Complex complex11 = complex9.multiply(Double.NaN);
      complex3.cosh();
      complex6.nthRoot(188);
      Complex complex12 = new Complex(0.0, 0.0);
      complex12.divide(complex3);
      complex1.acos();
      complex9.subtract(complex5);
      complex11.multiply(188);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.NaN.add(1184.3165918);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex3.multiply(3177);
      Complex complex5 = complex0.add(1.0531206130981445);
      complex5.INF.exp();
      Complex complex6 = complex0.INF.log();
      Complex complex7 = complex0.ZERO.conjugate();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.NaN.subtract((double) 3177);
      complex6.getField();
      complex6.getField();
      complex6.abs();
      complex7.reciprocal();
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex4.sqrt();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.subtract(complex1);
      complex8.divide(complex10);
      Complex complex12 = complex9.sinh();
      complex11.isNaN();
      complex8.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.getReal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex0.multiply((-1930));
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.multiply(complex7);
      Complex complex9 = complex3.negate();
      complex8.atan();
      complex9.subtract(complex7);
      Complex complex10 = complex3.divide(1245.376609);
      complex4.subtract(4087.66);
      complex7.atan();
      complex8.log();
      complex8.divide(0.0);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.asin();
      complex4.atan();
      complex2.nthRoot(3078);
      complex6.readResolve();
      complex10.equals(complex3);
      complex5.getField();
      complex12.multiply(complex8);
      Complex complex13 = Complex.ZERO;
      complex13.sqrt1z();
      complex0.reciprocal();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex0.ONE.getArgument();
      complex0.ONE.pow(complex1);
      complex1.readResolve();
      complex0.asin();
      Complex complex2 = complex0.exp();
      complex0.abs();
      Complex complex3 = complex0.multiply((double) 982);
      complex2.equals(complex0);
      complex0.getArgument();
      Complex complex4 = complex0.multiply(0.6203702283489952);
      complex2.cosh();
      complex0.nthRoot(982);
      Complex complex5 = complex3.divide(complex0);
      complex5.acos();
      Complex complex6 = complex0.subtract(complex4);
      complex5.multiply(982);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(292.8724186426, 3723.79257859);
      Complex complex1 = new Complex(292.8724186426, 292.8724186426);
      Complex complex2 = complex1.multiply(3723.79257859);
      complex1.tan();
      complex2.asin();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ONE.sinh();
      complex1.NaN.exp();
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = complex4.INF.divide(complex3);
      complex1.getImaginary();
      complex3.ZERO.log();
      complex1.getField();
      complex2.I.getField();
      complex3.reciprocal();
      complex0.isInfinite();
      complex2.negate();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = Complex.valueOf(0.0, (-2461.2));
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = Complex.ZERO;
      complex4.I.getArgument();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex1.divide(complex2);
      complex5.multiply(complex6);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.INF.cosh();
      complex2.getArgument();
      Complex complex3 = complex2.atan();
      complex3.hashCode();
      complex2.hashCode();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.pow(complex4);
      complex3.add(complex5);
      Complex complex6 = Complex.valueOf((-1.1524714043067699E-7));
      Complex complex7 = Complex.valueOf(0.0, (-146.588351399688));
      Complex.valueOf((-878.023));
      complex3.atan();
      complex7.sqrt();
      Complex.valueOf((-1.1524714043067699E-7), (-578.1161));
      complex6.cos();
      complex1.getImaginary();
      Complex.valueOf((-357.98423850180643), 2830.9271931986527);
      complex3.sinh();
      Complex complex8 = Complex.NaN;
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = (Complex)complex1.INF.readResolve();
      complex0.getField();
      Complex complex3 = complex0.pow(2641.42603528391);
      Complex complex4 = complex3.ZERO.asin();
      complex4.toString();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex0.ONE.multiply(complex3);
      Complex complex7 = complex6.tanh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.divide(complex3);
      complex1.divide(complex7);
      complex9.multiply(complex2);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf((-3451.337572765), (-0.998866952490215));
      complex1.divide(complex2);
      complex2.createComplex(0.375, 6.283185307179586);
      Complex complex3 = complex0.tanh();
      complex1.asin();
      complex3.reciprocal();
      Complex complex4 = complex2.asin();
      complex4.add(0.375);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex3.ZERO.divide(2.2316346168518066);
      Complex complex5 = complex0.INF.divide(complex4);
      complex2.ZERO.log();
      complex3.getArgument();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex1.ZERO.exp();
      complex2.ZERO.getField();
      Complex complex8 = complex2.exp();
      complex8.I.readResolve();
      complex3.subtract(2.2316346168518066);
      Complex complex9 = Complex.valueOf(487.862639);
      complex9.I.cos();
      complex2.toString();
      complex6.ZERO.getArgument();
      Complex complex10 = complex6.subtract((-2188.1401131));
      complex10.NaN.reciprocal();
      complex10.equals(complex6);
      complex4.tanh();
      complex5.nthRoot(114);
      complex3.sqrt1z();
      complex7.equals(complex8);
      complex7.reciprocal();
      Complex complex11 = complex3.exp();
      Complex complex12 = complex1.sin();
      complex12.I.readResolve();
      complex0.pow(0.0);
      complex11.asin();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = Complex.valueOf(0.0, (-2461.2));
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.ZERO.createComplex(0.0, 2027.1417737286);
      complex2.ONE.tanh();
      complex0.asin();
      complex0.reciprocal();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      double double0 = 0.0;
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.ZERO.conjugate();
      complex1.NaN.divide(0.0);
      Complex complex4 = complex2.pow(0.0);
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex5.ONE.negate();
      complex3.NaN.abs();
      Complex complex7 = complex6.tan();
      complex7.readResolve();
      complex0.sqrt();
      int int0 = (-2025);
      complex4.I.hashCode();
      try { 
        complex1.nthRoot((-2025));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,025
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-3684.96660074418));
      Complex complex1 = complex0.cos();
      complex1.INF.hashCode();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.ZERO.cosh();
      complex2.INF.atan();
      Complex complex3 = complex0.INF.tanh();
      Complex.valueOf(98.0);
      Complex complex4 = complex0.tanh();
      complex4.ZERO.cos();
      Complex complex5 = complex0.divide((-3684.96660074418));
      complex0.ZERO.readResolve();
      complex5.multiply(complex0);
      Complex complex6 = complex3.pow(0.0);
      complex5.I.subtract(98.0);
      complex6.ONE.add(complex4);
      complex5.readResolve();
      complex4.INF.toString();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.tan();
      complex8.pow(complex4);
      Complex complex9 = complex7.sin();
      complex9.INF.reciprocal();
      Complex complex10 = complex1.tan();
      complex0.negate();
      complex10.asin();
      Complex.valueOf(0.0, 98.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex9.acos();
      complex11.I.cosh();
      Complex complex12 = Complex.NaN;
      complex10.divide(complex12);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.isInfinite();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.ZERO.add(complex1);
      complex0.NaN.cosh();
      complex1.getImaginary();
      Complex complex3 = complex2.ZERO.subtract(Double.NaN);
      Complex complex4 = complex1.pow(complex0);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex2.tanh();
      Complex complex5 = complex1.tan();
      complex4.NaN.multiply(Double.NaN);
      Complex complex6 = Complex.ZERO;
      complex3.ONE.pow(complex6);
      complex0.ONE.hashCode();
      Complex complex7 = Complex.valueOf(4.3418021646459346E167);
      complex7.ONE.getField();
      complex4.atan();
      Complex complex8 = complex5.cos();
      complex8.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = Complex.ZERO;
      complex2.ONE.divide(complex1);
      Complex complex4 = complex0.divide(complex3);
      complex4.multiply(complex2);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.ONE;
      complex0.I.multiply(complex1);
      complex0.ZERO.toString();
      Complex complex2 = complex0.NaN.tanh();
      Complex.valueOf((-6.527407547535494E-8), (-6.527407547535494E-8));
      Complex complex3 = complex0.add((-6.527407547535494E-8));
      complex2.ONE.nthRoot(91);
      Complex complex4 = complex3.I.atan();
      complex4.INF.pow(complex2);
      Complex complex5 = complex3.add(7.241626420445137E-206);
      Complex complex6 = complex4.pow((-6.527407547535494E-8));
      Complex complex7 = complex6.ONE.divide(complex4);
      Complex complex8 = complex6.asin();
      Complex complex9 = complex8.INF.pow(complex5);
      complex9.ONE.pow((double) 91);
      Complex complex10 = complex0.multiply(1.0);
      Complex complex11 = complex10.sqrt();
      complex6.INF.toString();
      complex11.ONE.atan();
      Complex complex12 = complex3.multiply(423);
      Complex complex13 = complex5.multiply(complex12);
      complex13.NaN.toString();
      complex13.pow((-6.336314643222911E118));
      complex5.getField();
      try { 
        complex7.nthRoot((-2749));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,749
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(1180.864362417, 0.0);
      Complex complex1 = complex0.multiply(1180.864362417);
      Complex complex2 = complex0.createComplex(0.6522845029830933, (-3657.438094349381));
      complex2.I.subtract(0.0);
      complex2.getArgument();
      complex0.ZERO.abs();
      Complex complex3 = complex2.sinh();
      complex1.getArgument();
      Complex complex4 = Complex.valueOf((-3657.438094349381));
      Complex complex5 = complex0.multiply(1186);
      complex5.I.multiply(complex3);
      complex1.sqrt1z();
      Complex complex6 = complex5.tanh();
      complex6.NaN.subtract((-2686.8));
      complex6.add(0.6522845029830933);
      complex4.add(2925.77665);
      Complex complex7 = complex5.negate();
      complex3.getImaginary();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(578.0, 3.457553391989844E-8);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.subtract(3.457553391989844E-8);
      Complex complex3 = Complex.valueOf(578.0);
      complex0.INF.readResolve();
      Complex complex4 = complex1.INF.multiply(complex0);
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex6.NaN.add(complex4);
      complex7.INF.getField();
      complex6.ZERO.abs();
      complex1.abs();
      complex0.toString();
      complex7.multiply((double) 340);
      complex5.nthRoot(340);
      complex1.tan();
      complex0.ZERO.sin();
      Complex complex8 = complex1.sinh();
      complex8.I.nthRoot(340);
      complex1.conjugate();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex8.pow(578.0);
      complex10.getArgument();
      complex9.pow(complex8);
      complex10.nthRoot(1249);
      complex7.divide(complex9);
      Complex complex11 = Complex.valueOf(1413.10771613305, 6.283185307179586);
      complex3.cos();
      complex11.add(3.457553391989844E-8);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(6.402020300783889E-254);
      Complex complex1 = complex0.ZERO.log();
      complex1.INF.conjugate();
      complex1.ONE.asin();
      Complex complex2 = Complex.ZERO;
      complex0.subtract(complex2);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(2645.66906413597);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.ONE.asin();
      complex4.sqrt();
      Complex complex5 = complex4.subtract(Double.NaN);
      complex5.NaN.conjugate();
      complex2.ONE.tan();
      Complex complex6 = complex3.reciprocal();
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      Complex.valueOf(Double.NaN);
      complex2.readResolve();
      complex2.equals(complex6);
      Complex complex7 = Complex.valueOf(0.0);
      complex1.divide((-1118.216064655111));
      complex4.cosh();
      complex0.add(455.861609);
      complex7.pow((-2.4442443105031435E-117));
      complex0.subtract((-1118.216064655111));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.createComplex(847.91595381, 1983.43);
      complex2.NaN.getArgument();
      Complex complex3 = complex1.I.acos();
      complex3.I.sin();
      Complex.valueOf(0.0, 1983.43);
      Complex complex4 = complex0.I.tan();
      complex4.ZERO.abs();
      complex3.INF.getArgument();
      Complex complex5 = complex3.ZERO.log();
      complex5.NaN.pow(complex1);
      Complex.valueOf((-2674.767));
      Complex complex6 = complex0.cosh();
      complex6.INF.nthRoot(110);
      complex0.abs();
      complex6.toString();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex1.add(2.0);
      complex1.divide(complex0);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex3.pow(complex4);
      complex5.add(complex2);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex6.ONE.subtract(complex5);
      Complex complex8 = complex1.ZERO.reciprocal();
      Complex complex9 = complex0.ONE.subtract((-1507.37547561565));
      Complex complex10 = complex2.multiply(1);
      Complex complex11 = complex5.tanh();
      complex5.readResolve();
      Complex complex12 = complex9.subtract(complex10);
      Complex complex13 = complex2.sqrt();
      Complex complex14 = complex13.reciprocal();
      Complex complex15 = complex4.log();
      Complex complex16 = complex15.tanh();
      complex16.INF.multiply(1.0);
      complex11.subtract((-1507.37547561565));
      Complex complex17 = complex11.conjugate();
      complex17.INF.multiply(complex14);
      complex6.cos();
      complex5.multiply(1);
      complex8.pow(complex7);
      Complex complex18 = complex12.subtract(complex4);
      complex18.ZERO.atan();
      complex6.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(292.8724186426, 3723.79257859);
      Complex complex1 = new Complex(292.8724186426, 292.8724186426);
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.divide(1150.4);
      complex1.ZERO.multiply(0);
      complex2.isNaN();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3190.43293669673, 0.0);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ZERO.negate();
      complex0.getImaginary();
      complex0.I.multiply(0.0);
      Complex complex3 = complex0.cosh();
      complex0.atan();
      Complex complex4 = complex1.ONE.atan();
      complex4.ONE.acos();
      Complex complex5 = complex3.I.add(0.0);
      Complex complex6 = complex3.log();
      complex5.ONE.cos();
      complex3.divide(3190.43293669673);
      Complex complex7 = complex3.add(complex2);
      complex1.isNaN();
      complex1.I.add(568.2);
      Complex complex8 = complex7.cos();
      Complex complex9 = complex2.add(2307.6);
      complex3.isNaN();
      complex8.sinh();
      Complex complex10 = complex9.negate();
      complex10.abs();
      complex10.ZERO.subtract(2307.6);
      Complex complex11 = complex9.reciprocal();
      complex4.readResolve();
      complex8.ZERO.sin();
      complex11.multiply(3190.43293669673);
      complex8.abs();
      complex8.tan();
      complex11.getField();
      complex6.subtract((-2469.0325));
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.log();
      complex2.INF.nthRoot(1086);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.exp();
      complex4.ONE.negate();
      complex3.ONE.getArgument();
      complex0.log();
      Complex complex5 = complex0.I.add(complex3);
      Complex.valueOf(0.0, (double) 1086);
      complex5.I.toString();
      complex1.getArgument();
      try { 
        complex3.ZERO.nthRoot((-957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -957
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.divide(1697.7366695005);
      Complex complex4 = complex3.NaN.cos();
      Complex.valueOf((-20.0), (double) 0);
      complex0.getField();
      complex3.toString();
      complex0.subtract(complex3);
      complex4.sin();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      complex1.ONE.sqrt1z();
      Complex.valueOf(0.0, 0.0);
      complex0.getReal();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.conjugate();
      complex2.pow(0.0);
      complex2.INF.sqrt();
      complex1.ONE.getField();
      complex1.ZERO.getArgument();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex4.NaN.add(0.0);
      complex5.I.add(0.0);
      Object object0 = new Object();
      complex3.equals(object0);
      complex3.tanh();
      complex5.sqrt();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex0.ONE.getArgument();
      complex1.ONE.nthRoot(982);
      Complex complex2 = complex1.reciprocal();
      complex2.isInfinite();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.createComplex((-20.0), (-20.0));
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.getReal();
      complex0.log();
      complex1.INF.sqrt1z();
      Complex complex3 = complex2.multiply((-1687.0));
      complex3.getImaginary();
      complex1.readResolve();
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.INF.pow(complex0);
      Complex complex2 = complex1.NaN.pow((-3241.5116604));
      complex2.INF.divide(0.0);
      complex0.isNaN();
      Complex complex3 = complex0.INF.negate();
      complex3.INF.tan();
      Complex complex4 = complex0.createComplex(0.0, 0.6833335161209106);
      complex0.asin();
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.NaN.sqrt1z();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = Complex.valueOf(0.0);
      complex4.atan();
      complex8.acos();
      complex8.readResolve();
      complex0.sqrt1z();
      complex1.tanh();
      complex5.multiply(0.0);
      complex6.getReal();
      complex7.pow(Double.NaN);
      complex9.getReal();
      complex2.add(0.6833335161209106);
      complex2.sinh();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.readResolve();
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.INF.exp();
      complex0.isInfinite();
      complex0.readResolve();
      Complex complex3 = complex2.multiply((-348));
      Complex complex4 = complex3.subtract(2.0);
      Complex complex5 = complex4.ONE.pow(complex2);
      complex4.getField();
      complex5.NaN.divide(2641.44170861851);
      complex2.log();
      complex4.getImaginary();
      complex0.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = complex0.ONE.atan();
      complex1.ZERO.acos();
      complex0.hashCode();
      complex0.sqrt1z();
      Complex.valueOf((-624.52553));
      complex0.ONE.cos();
      try { 
        complex0.nthRoot((-1223));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,223
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1966.82801704), (-1966.82801704));
      Complex complex1 = Complex.I;
      complex0.add(complex1);
      Complex.valueOf((-2862.69), 0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.conjugate();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.NaN.divide((-2361.847881287));
      complex3.hashCode();
      Complex complex4 = complex1.createComplex((-2361.847881287), 2214.7582136429);
      complex4.INF.abs();
      complex1.NaN.readResolve();
      Complex complex5 = Complex.valueOf(157.47361773291775, 157.47361773291775);
      complex5.sinh();
      Complex complex6 = Complex.valueOf(157.47361773291775, 0.0);
      complex6.ONE.log();
      complex6.NaN.getArgument();
      complex0.isInfinite();
      complex0.sqrt();
      Complex.valueOf((-3401.6), (-3401.6));
      Complex complex7 = complex4.createComplex(Double.NaN, (-1080.0));
      complex7.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.I.exp();
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = complex5.INF.divide(complex4);
      complex1.getImaginary();
      complex4.ZERO.log();
      complex6.getField();
      complex2.I.getField();
      complex4.abs();
      complex1.reciprocal();
      complex2.multiply(1.0);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex0.subtract(complex8);
      Complex complex10 = complex7.divide(complex3);
      complex10.I.sinh();
      complex4.isNaN();
      complex9.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(0.5968599319458008, 0.0);
      complex0.I.multiply(0.0);
      Complex complex1 = complex0.tan();
      complex1.I.asin();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add(complex0);
      complex2.exp();
      complex0.subtract(1260.339);
      Complex complex3 = complex2.I.pow(complex0);
      complex0.getImaginary();
      complex3.add((-1816.718210573));
      complex0.divide(5248.52);
      Complex.valueOf(870.65, (-4.5810381714280557E-10));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2958.807);
      Complex complex1 = complex0.subtract((-2.8362173224732088E165));
      Complex complex2 = complex0.multiply((-990));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex4.I.multiply((-990));
      complex6.I.asin();
      complex5.INF.cosh();
      complex5.getArgument();
      Complex complex7 = complex2.sinh();
      complex7.hashCode();
      complex1.getReal();
      complex3.reciprocal();
      complex5.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.acos();
      complex0.I.cosh();
      Complex complex2 = Complex.ZERO;
      complex2.cos();
      complex0.equals(complex2);
      complex2.I.add(complex1);
      Complex.valueOf(1.5263078212738037, 1.5263078212738037);
      complex2.pow(586.1524);
      Complex complex3 = Complex.valueOf((-2250.5297312273447));
      complex3.INF.sqrt();
      complex3.I.tan();
      complex3.ZERO.sin();
      Complex.valueOf(586.1524, 586.1524);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-3169.7833389929));
      Complex complex1 = complex0.sqrt();
      complex1.INF.divide(complex0);
      Complex complex2 = complex0.NaN.multiply((-3169.7833389929));
      complex2.subtract(0.0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.ZERO.negate();
      complex6.ZERO.sqrt1z();
      Complex.valueOf(0.0);
      complex4.ZERO.readResolve();
      complex3.I.abs();
      complex4.getArgument();
      complex3.readResolve();
      Complex complex7 = complex0.createComplex(1.0, -0.0);
      Complex complex8 = complex7.NaN.cosh();
      complex1.subtract((-3169.7833389929));
      complex7.NaN.nthRoot(1);
      Complex.valueOf(1.0);
      complex8.multiply(complex5);
      complex3.createComplex((-3169.7833389929), (-1891.67));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-98.0));
      Complex complex1 = complex0.createComplex((-98.0), (-98.0));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.createComplex((-98.0), (-98.0));
      Complex complex4 = complex3.I.cosh();
      complex2.I.cosh();
      Complex complex5 = complex2.add((-1904.5360779));
      complex5.negate();
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(6.283185307179586);
      complex1.INF.readResolve();
      complex0.getField();
      Complex complex2 = complex0.pow(2641.42603528391);
      Complex complex3 = complex2.ZERO.asin();
      complex3.toString();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex0.ONE.multiply(complex2);
      Complex complex6 = complex5.tanh();
      complex4.I.getArgument();
      complex2.ONE.atan();
      complex4.hashCode();
      complex2.hashCode();
      Complex complex7 = complex1.ZERO.tanh();
      complex7.ONE.pow(complex4);
      complex0.add(complex2);
      Complex.valueOf(0.0);
      Complex complex8 = Complex.valueOf(1.5707963267948966, 6.283185307179586);
      Complex.valueOf((-878.023));
      complex8.NaN.atan();
      complex1.sqrt();
      Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      complex2.cos();
      complex1.getImaginary();
      Complex.valueOf(0.6405166387557983, (-878.023));
      complex6.sinh();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-1159.806096069786), 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.sin();
      complex2.ZERO.multiply((-3099));
      complex1.sqrt();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex3.ONE.reciprocal();
      complex0.negate();
      complex3.INF.getArgument();
      complex0.negate();
      complex4.getImaginary();
      Complex complex5 = complex0.subtract(complex3);
      complex3.sqrt();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.pow(504.3833);
      complex0.toString();
      Complex complex2 = complex0.multiply(0.0);
      complex2.getField();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.I;
      complex2.pow(complex4);
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.sinh();
      Complex complex1 = complex0.cosh();
      complex1.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getField();
      Complex complex1 = complex0.negate();
      complex1.equals(complex0);
      complex0.INF.asin();
      Complex complex2 = Complex.valueOf(2.276357074042286E146);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex0.ONE.add(complex2);
      complex1.INF.toString();
      complex4.I.abs();
      complex0.getArgument();
      complex1.getImaginary();
      complex1.getReal();
      Complex complex5 = complex0.cosh();
      complex5.ONE.cos();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = Complex.valueOf(-0.0);
      complex5.INF.subtract(complex4);
      complex5.INF.hashCode();
      complex6.ONE.exp();
      complex0.isNaN();
      Complex complex8 = complex2.cos();
      complex1.subtract(complex3);
      complex8.INF.tan();
      double double0 = 7.636326960498012E142;
      complex6.INF.add(complex7);
      try { 
        complex4.NaN.nthRoot((-121));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -121
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(4.278345398213486E-9, 0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(4.278345398213486E-9, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(1638.001, 1638.001);
      Complex complex1 = complex0.cos();
      complex1.INF.getArgument();
      Complex complex2 = complex0.sqrt();
      String string0 = complex1.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex3 = complex2.ZERO.tanh();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(44.466190692371505, complex2.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(18.418499251848562, complex2.getImaginary(), 0.01);
      
      Complex complex4 = complex0.multiply(2373.873028836);
      Complex complex5 = complex4.ONE.cosh();
      assertEquals(3888406.3951063966, complex4.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex5.getReal(), 0.01);
      assertEquals(3888406.3951063966, complex4.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      
      complex1.equals("observed counts are both zero for entry {0}");
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.sin();
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertTrue(complex0.equals((Object)object0));
      assertTrue(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      complex0.ONE.hashCode();
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(1, list0.size());
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      
      complex1.sinh();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.add((double) 1);
      Complex complex5 = complex4.I.sqrt1z();
      assertEquals(1.4142135623730951, complex5.getReal(), 0.01);
      
      complex3.log();
      assertSame(complex2, complex4);
      
      Complex complex6 = complex0.pow(Double.NaN);
      assertNotSame(complex6, complex5);
  }
}
