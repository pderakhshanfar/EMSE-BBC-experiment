/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:06:40 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-256.1754362438), 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-2.5789874009739114E224));
      complex0.tan();
      complex0.sqrt1z();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.add((-322.906641990718));
      complex1.add((-322.906641990718));
      complex3.NaN.toString();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.INF;
      complex4.divide(complex5);
      Complex complex6 = Complex.I;
      complex6.sin();
      complex1.nthRoot(946);
      Complex complex7 = complex3.asin();
      complex7.I.sin();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.5707963267948966, (-6.406189112730307E-11));
      complex0.tanh();
      Complex complex1 = complex0.tan();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(5.784440745, (-6.406189112730307E-11));
      Complex complex1 = complex0.subtract(5.784440745);
      Complex complex2 = complex1.sqrt();
      complex2.I.sin();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.asin();
      complex0.abs();
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = new Complex(795.5517, 1.0);
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex0.acos();
      complex6.acos();
      complex2.readResolve();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.sin();
      complex7.exp();
      complex5.reciprocal();
      Complex.valueOf(1423.827388);
      Complex complex11 = complex4.cos();
      complex11.readResolve();
      complex10.nthRoot(923);
      complex3.tan();
      Complex complex12 = complex6.cosh();
      Complex.valueOf((-4139.239), (-1202.20799));
      complex12.add(529.2408633926);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(5.784440744980536, 7.37567604176979E-8);
      Complex complex1 = complex0.subtract(5.784440744980536);
      Complex complex2 = complex1.cosh();
      Complex.valueOf((-189.41775869), 7.37567604176979E-8);
      Complex complex3 = complex2.add((-1271.32747));
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.negate();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(7.37567604176979E-8, 4.439791652732591E81);
      complex0.ZERO.atan();
      Complex complex2 = complex0.subtract(4.439791652732591E81);
      complex1.nthRoot(3333);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6107416152954102, (-20.0));
      complex0.nthRoot(1455);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      complex0.getField();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
      Complex.valueOf((-20.0), 45.94179985786364);
      Complex.valueOf(7.37567604176979E-8, (-20.0));
      complex2.pow(complex1);
      Complex.valueOf(4454838.092207086, (-20.0));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf((-20.0));
      Complex.valueOf(2373.06853);
      Complex complex2 = Complex.valueOf(2373.06853);
      complex2.cos();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2309.014));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.cos();
      complex0.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      complex2.nthRoot(1455);
      Complex complex3 = complex0.tan();
      complex3.NaN.sqrt1z();
      complex3.getField();
      complex0.equals(complex3);
      Complex.valueOf((-1.0), (-12.459220159));
      complex0.multiply(1455);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.reciprocal();
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.ONE.exp();
      complex0.tanh();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(20.23855208507421, 7.37567604176979E-8);
      Complex complex1 = complex0.subtract(20.23855208507421);
      complex1.abs();
      Complex complex2 = Complex.INF;
      complex0.I.multiply(complex2);
      Complex complex3 = Complex.valueOf(20.23855208507421, 7.37567604176979E-8);
      complex3.NaN.hashCode();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      complex2.getField();
      complex0.equals(complex2);
      complex2.INF.log();
      Complex complex4 = complex2.tan();
      complex0.sqrt1z();
      complex1.getField();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2574.64784797181));
      complex0.getImaginary();
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.negate();
      complex1.getField();
      complex1.ZERO.multiply((-3573));
      Complex complex3 = complex1.add(808.9868);
      complex3.abs();
      complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-315.59966293), (-315.59966293));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.NaN.asin();
      complex3.I.sqrt();
      complex3.I.hashCode();
      Complex complex4 = complex1.I.pow((-315.59966293));
      Complex complex5 = complex4.INF.sqrt();
      complex5.ZERO.add((-315.59966293));
      Complex complex6 = Complex.valueOf(1.940772294998169, 1.940772294998169);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.pow(550.976);
      Complex complex9 = complex8.ZERO.multiply(Double.NaN);
      complex7.subtract(complex8);
      complex8.getImaginary();
      complex9.divide(Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex6.exp();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = new Complex(Double.NaN, Double.NaN);
      complex2.subtract(Double.NaN);
      complex2.abs();
      complex0.multiply((-2787));
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = Complex.ONE;
      complex0.negate();
      complex0.sqrt1z();
      Object object0 = new Object();
      Object object1 = new Object();
      complex3.equals(object1);
      Complex complex5 = Complex.NaN;
      complex5.sinh();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(1.557407724654902, 7.37567604176979E-8);
      Complex complex1 = complex0.subtract(1.557407724654902);
      complex1.I.divide(7.37567604176979E-8);
      complex0.I.subtract(complex1);
      Complex complex2 = complex0.multiply(0.0);
      complex1.add(complex2);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sqrt1z();
      complex2.getField();
      complex1.equals(complex0);
      Complex.valueOf((-3.348471032333413E-8), 1125.511);
      Complex complex4 = Complex.valueOf(-0.0, 2.0556009128412406E-4);
      Complex complex5 = Complex.valueOf(2220.0, 2.0556009128412406E-4);
      complex2.pow(complex4);
      Complex.valueOf((-3073.1429305), (-1077.3112));
      complex3.cos();
      complex5.abs();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.divide(0.0);
      complex2.subtract(complex1);
      Complex complex3 = Complex.valueOf(1424.6625732, Double.NaN);
      complex3.abs();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.tan();
      complex3.NaN.sqrt1z();
      complex3.getField();
      complex0.equals(complex3);
      Complex complex4 = Complex.INF;
      complex4.nthRoot(145);
      Complex complex5 = complex2.tan();
      complex5.isNaN();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex2.NaN.multiply(7);
      complex3.ZERO.subtract(complex2);
      complex0.I.abs();
      Complex complex4 = complex1.pow((-841.54495777));
      complex4.INF.abs();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = Complex.valueOf((-1245.385584742), (-841.54495777));
      complex4.sin();
      Complex complex7 = complex1.sqrt1z();
      complex6.ONE.negate();
      Complex complex8 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex4.subtract(complex5);
      Complex complex9 = Complex.INF;
      complex9.log();
      complex2.subtract(3151.05);
      complex1.acos();
      complex3.sqrt1z();
      complex7.toString();
      complex7.createComplex(3151.05, 7);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sqrt1z();
      complex1.I.sinh();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ONE.tan();
      complex3.INF.add(complex1);
      Complex complex4 = complex3.NaN.pow(complex0);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex1.ZERO.pow(0.0);
      complex4.ZERO.asin();
      complex1.ZERO.subtract((-4796.9571));
      complex2.INF.reciprocal();
      Complex complex7 = new Complex((-593.6083535612511), (-593.6083535612511));
      Complex complex8 = complex0.ONE.divide(complex7);
      complex1.ZERO.toString();
      complex7.ZERO.divide(complex6);
      complex0.abs();
      complex8.multiply((-38));
      Complex complex9 = complex6.conjugate();
      complex9.INF.multiply((-38));
      complex6.I.acos();
      complex2.createComplex((-67.20231428), (-67.20231428));
      complex9.pow(complex7);
      complex5.multiply((-878.779521));
      Complex.valueOf(1003.7);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(0.6087939522673632);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(2289.456035874139);
      complex1.getField();
      complex2.reciprocal();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.tan();
      complex3.NaN.sqrt1z();
      complex3.getField();
      complex1.multiply(0);
      Complex complex4 = complex3.subtract(complex0);
      complex3.abs();
      complex4.pow((-1245.385584742));
      Complex complex5 = complex4.multiply(1245.385584742);
      complex5.add(complex4);
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1244.42);
      complex0.INF.abs();
      complex0.NaN.tan();
      complex0.getImaginary();
      Complex complex1 = Complex.ONE;
      complex0.isInfinite();
      complex0.ONE.multiply(1244.42);
      Complex complex2 = complex0.conjugate();
      complex2.ONE.tanh();
      complex2.INF.readResolve();
      complex0.getArgument();
      Complex complex3 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply((-247));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-646.5408259398797));
      complex0.readResolve();
      Complex complex1 = complex0.divide(2703.46094804);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.valueOf(2703.46094804);
      complex0.getField();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = complex2.acos();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex((-1491.702591649));
      complex7.equals(complex8);
      complex3.pow(complex6);
      complex0.multiply((-5721));
      Complex complex9 = complex5.pow(complex0);
      Complex complex10 = Complex.INF;
      complex10.divide(2703.46094804);
      complex3.subtract(complex0);
      complex0.isInfinite();
      complex9.toString();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(10.28);
      Complex complex1 = complex0.ONE.createComplex(10.28, 10.28);
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.divide(10.28);
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf(10.28);
      complex1.getField();
      Complex complex6 = complex1.reciprocal();
      complex1.multiply(complex2);
      Complex complex7 = complex2.acos();
      Complex complex8 = Complex.valueOf((-1491.702591649));
      complex4.equals(complex5);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.pow(complex2);
      complex6.multiply(38);
      Complex complex11 = Complex.I;
      complex11.pow(complex3);
      Complex complex12 = complex8.divide(10.28);
      Complex complex13 = complex12.subtract(complex9);
      complex8.isInfinite();
      complex13.toString();
      complex7.add(complex8);
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(1244.42);
      complex0.INF.abs();
      Complex complex1 = complex0.NaN.tan();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf((-25.4468234941));
      complex1.acos();
      complex1.sqrt1z();
      Complex complex3 = Complex.valueOf(2.0, 0.0);
      complex2.sqrt();
      Complex complex4 = Complex.NaN;
      complex3.subtract(complex4);
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.pow(complex6);
      Complex complex8 = complex2.acos();
      Complex complex9 = complex7.pow(0.0);
      complex5.acos();
      Complex complex10 = Complex.ONE;
      complex6.pow(complex1);
      complex1.divide(483.69527481);
      complex1.subtract(complex3);
      complex1.isInfinite();
      Complex complex11 = new Complex(478.3121);
      complex11.toString();
      complex8.add(complex9);
      Complex complex12 = new Complex(2.0);
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-4.181177882069608E-9));
      Complex complex2 = Complex.INF;
      complex2.asin();
      complex1.reciprocal();
      complex0.hashCode();
      complex1.multiply((-1651));
      Complex complex3 = Complex.ONE;
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex1.NaN.toString();
      Complex complex2 = complex0.ONE.subtract((-3346.3));
      Complex complex3 = complex1.pow(complex0);
      complex3.abs();
      complex2.ONE.toString();
      Complex complex4 = complex3.INF.tan();
      complex4.conjugate();
      complex4.add(Double.NaN);
      Complex complex5 = complex3.tanh();
      complex1.ONE.subtract(complex2);
      complex1.tanh();
      Complex complex6 = complex4.asin();
      complex6.createComplex(Double.NaN, Double.NaN);
      complex5.cos();
      Complex complex7 = Complex.ONE;
      complex5.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex2.NaN.multiply(7);
      complex3.ZERO.subtract(complex2);
      complex0.I.abs();
      Complex complex4 = complex1.pow((-841.54495777));
      complex4.INF.abs();
      complex4.getArgument();
      complex2.sin();
      Complex complex5 = new Complex(480.4321, (-3.141592653589793));
      complex5.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.toString();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf((-1171.0), Double.NaN);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.negate();
      complex1.getReal();
      Complex complex6 = complex0.cos();
      complex1.getField();
      Complex complex7 = complex3.cosh();
      complex2.atan();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex8.pow(complex7);
      Complex.valueOf((-3073.1429305), (-1620.963395735758));
      complex9.cos();
      Complex complex10 = Complex.ONE;
      complex10.abs();
      Complex complex11 = complex6.tanh();
      complex11.multiply((-20.0));
      complex5.sin();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(1.557407724654902, 7.37567604176979E-8);
      Complex complex1 = complex0.subtract(1.557407724654902);
      complex1.toString();
      complex1.abs();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.3817485570907593);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(480.4321);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.valueOf(5.486523121881414E-8, 10.28);
      Complex complex7 = complex6.sqrt();
      complex7.pow(complex0);
      Complex complex8 = complex6.negate();
      complex5.getReal();
      Complex complex9 = complex7.cos();
      complex1.getField();
      complex2.cosh();
      complex9.atan();
      Complex complex10 = new Complex(5.486523121881414E-8, 5.486523121881414E-8);
      complex8.pow(complex2);
      complex4.reciprocal();
      complex8.NaN.conjugate();
      Complex complex11 = Complex.INF;
      complex11.toString();
      complex10.equals(complex8);
      complex3.subtract(complex2);
      Complex complex12 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex2.NaN.multiply(7);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      complex0.I.abs();
      Complex complex5 = complex1.pow((-841.54495777));
      complex5.INF.abs();
      complex5.ONE.atan();
      Complex complex6 = Complex.valueOf((-1245.385584742), (-841.54495777));
      Complex complex7 = complex5.sin();
      complex1.sqrt1z();
      Complex complex8 = complex6.ONE.negate();
      complex3.I.pow(Double.POSITIVE_INFINITY);
      complex0.getReal();
      Complex complex9 = complex6.cos();
      complex1.I.getField();
      Complex complex10 = complex7.cosh();
      complex10.ONE.atan();
      complex6.multiply((-298130980));
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = complex0.pow(complex11);
      Complex complex13 = complex8.divide((double) 7);
      Complex complex14 = complex12.subtract(complex13);
      complex1.isInfinite();
      complex14.toString();
      complex4.add(complex9);
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(10.28);
      Complex complex1 = complex0.ONE.createComplex(10.28, 10.28);
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.divide(10.28);
      complex3.negate();
      Complex complex4 = Complex.valueOf(10.28);
      complex1.getField();
      complex1.NaN.reciprocal();
      Complex complex5 = complex1.ZERO.multiply(complex4);
      Complex complex6 = complex1.acos();
      Complex complex7 = Complex.valueOf((-1491.702591649));
      complex0.equals(complex2);
      Complex complex8 = complex0.pow(complex1);
      complex4.multiply((-5721));
      complex6.subtract((-5377.08394));
      complex2.readResolve();
      Complex complex9 = complex7.cosh();
      complex9.asin();
      complex5.sin();
      complex2.log();
      complex8.subtract((double) (-5721));
      complex8.acos();
      complex6.sqrt1z();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex2.NaN.multiply(7);
      Complex complex4 = complex3.ZERO.subtract(complex2);
      complex0.I.abs();
      Complex complex5 = complex1.pow((-841.54495777));
      complex5.INF.abs();
      complex1.getField();
      complex4.equals(complex2);
      Complex.valueOf(20.584347763315108, (-841.54495777));
      Complex.valueOf(Double.POSITIVE_INFINITY, (double) 7);
      complex0.multiply((-113));
      Complex.valueOf(973.9, (-2309.014));
      complex3.abs();
      complex2.tanh();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(1.557407724654902, 7.37567604176979E-8);
      complex0.toString();
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sin();
      complex2.INF.conjugate();
      complex0.nthRoot(199);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(1.557407724654902, 7.37567604176979E-8);
      Complex complex1 = complex0.subtract(1.557407724654902);
      complex1.toString();
      complex1.abs();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.3817485570907593);
      complex0.acos();
      Complex.valueOf(480.4321);
      complex2.sqrt1z();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.sqrt();
      complex4.pow(complex0);
      complex0.acos();
      complex0.pow(10.28);
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.ONE;
      complex6.subtract(898.46550754386);
      complex0.readResolve();
      complex1.cosh();
      Complex complex7 = complex5.asin();
      complex5.sin();
      complex7.isInfinite();
      complex4.toString();
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(10.28);
      Complex complex1 = complex0.ONE.createComplex(1.0, 10.28);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.divide(10.28);
      complex2.negate();
      Complex complex3 = Complex.valueOf(10.28);
      complex1.getField();
      complex1.NaN.reciprocal();
      complex1.ZERO.multiply(complex3);
      complex1.acos();
      complex1.ONE.sin();
      Complex.valueOf((-1491.702591649));
      complex0.equals(object0);
      // Undeclared exception!
      complex2.nthRoot(1368935878);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-841.54495777));
      complex2.hashCode();
      Complex complex3 = complex2.NaN.multiply(7);
      complex3.ZERO.subtract(complex2);
      complex0.I.abs();
      Complex complex4 = complex1.pow((-841.54495777));
      complex4.INF.abs();
      Complex.valueOf((-841.54495777));
      complex4.sqrt1z();
      Complex complex5 = complex2.sqrt();
      complex5.pow(complex2);
      Complex complex6 = complex4.acos();
      complex6.pow((-1245.385584742));
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.subtract(1388.93797064586);
      complex3.readResolve();
      complex4.cosh();
      Complex complex9 = Complex.valueOf((-1544.12), (double) 7);
      Complex complex10 = complex9.asin();
      complex10.sin();
      Complex complex11 = complex10.log();
      complex0.subtract(Double.POSITIVE_INFINITY);
      complex8.acos();
      complex3.sqrt1z();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2355.0851495242464), 67.95097412370303);
      Complex complex2 = new Complex(1061.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.sqrt1z();
      complex1.equals(complex4);
      Complex complex6 = complex0.negate();
      complex5.negate();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2118.4797509890013));
      Complex complex1 = complex0.subtract((-2118.4797509890013));
      complex0.toString();
      complex1.ZERO.abs();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf((-1972.1));
      complex2.I.acos();
      Complex complex3 = Complex.valueOf((-1972.1));
      Complex complex4 = complex0.sqrt1z();
      complex3.ZERO.sqrt();
      Complex complex5 = complex1.I.pow(complex3);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.pow(0.0);
      complex7.ONE.acos();
      Complex complex8 = complex7.I.subtract((-1972.1));
      complex8.ZERO.readResolve();
      complex1.cosh();
      Complex complex9 = complex4.asin();
      complex5.sin();
      complex6.log();
      complex9.subtract((-2118.4797509890013));
      complex8.acos();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract((-20.0));
      complex1.toString();
      Complex complex2 = complex0.createComplex(2.946219340174139E-4, (-898.46550754386));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.multiply(2.946219340174139E-4);
      complex3.ONE.cosh();
      complex2.toString();
      Complex complex5 = Complex.valueOf(1579.5952, (-20.0));
      complex5.I.acos();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.ONE.multiply(903);
      Complex complex8 = complex7.ZERO.divide((-112.9382));
      complex7.I.log();
      Complex complex9 = complex2.createComplex((-898.46550754386), 2.946219340174139E-4);
      complex6.I.toString();
      Complex complex10 = complex5.multiply(2543);
      Complex complex11 = complex7.asin();
      complex10.NaN.multiply(17);
      complex11.getField();
      Complex complex12 = complex8.atan();
      complex10.getField();
      complex1.atan();
      complex12.equals(complex11);
      complex9.pow(complex4);
      complex7.negate();
      Complex complex13 = complex5.add((-2670.318001377748));
      Object object0 = complex0.readResolve();
      complex9.equals(object0);
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.atan();
      complex0.readResolve();
      Complex complex5 = complex2.multiply(complex0);
      complex0.conjugate();
      Complex complex6 = complex1.sqrt();
      complex6.sinh();
      double double0 = (-188.9602218166);
      Complex complex7 = Complex.valueOf((-188.9602218166));
      complex7.add(complex3);
      Complex complex8 = complex5.add(complex4);
      try { 
        complex8.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex2.NaN.multiply(7);
      complex3.ZERO.subtract(complex2);
      complex0.I.abs();
      Complex complex4 = complex1.pow((-841.54495777));
      complex4.INF.abs();
      complex4.ONE.atan();
      Complex complex5 = Complex.valueOf((-1245.385584742), (-841.54495777));
      Complex complex6 = complex4.sin();
      complex1.sqrt1z();
      complex5.ONE.negate();
      complex0.getReal();
      Complex complex7 = complex5.cos();
      complex1.I.getField();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex8.ONE.atan();
      complex5.tanh();
      complex1.pow(complex6);
      complex9.reciprocal();
      complex0.toString();
      complex2.equals(complex6);
      complex7.acos();
      Complex complex10 = complex0.sqrt1z();
      complex1.multiply(complex10);
      complex9.pow((-864.2150334));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.toString();
      complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.isNaN();
      Complex complex2 = Complex.valueOf((-1972.1));
      Complex complex3 = complex0.acos();
      complex2.NaN.hashCode();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex3.sqrt();
      complex3.pow(complex4);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.pow(2579.87);
      Complex complex8 = complex6.acos();
      Complex complex9 = complex0.subtract((-1.0));
      complex7.readResolve();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex0.sin();
      complex8.log();
      complex11.subtract(0.0);
      complex9.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = new Complex(1.4587030578824436E-19, 1.0317435264587402);
      complex4.hashCode();
      Complex complex5 = complex3.multiply(7);
      Complex complex6 = complex3.subtract(complex5);
      complex1.abs();
      Complex complex7 = complex4.pow((-1125.828));
      complex3.abs();
      complex3.atan();
      Complex complex8 = Complex.valueOf((-1125.828), (-1245.385584742));
      Complex complex9 = complex6.sin();
      complex8.sqrt1z();
      Complex complex10 = complex9.negate();
      complex10.getReal();
      Complex complex11 = complex6.cos();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex12.getField();
      complex1.atan();
      complex8.tanh();
      Complex complex13 = new Complex(2.2522457265949924E-4);
      complex13.pow(complex7);
      complex8.reciprocal();
      complex11.toString();
      complex11.equals((Object) null);
      complex7.acos();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((double) 7);
      Complex complex4 = complex3.multiply(7);
      Complex complex5 = new Complex(7);
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = Complex.valueOf((-4454839.092207085));
      complex7.abs();
      complex3.pow(1.0782585410141121E-7);
      Complex complex8 = Complex.valueOf(1528.8502635);
      complex8.abs();
      complex6.atan();
      Complex.valueOf(20.0, 1528.8502635);
      complex5.sin();
      Complex complex9 = complex5.sqrt1z();
      complex3.negate();
      complex7.getReal();
      Complex complex10 = complex1.cos();
      complex9.getField();
      Complex complex11 = complex5.cosh();
      Complex complex12 = complex10.atan();
      complex12.tanh();
      Complex complex13 = complex0.pow(complex1);
      complex11.reciprocal();
      Complex complex14 = Complex.valueOf((double) 7, (-1388.538441216233));
      complex14.toString();
      complex3.equals(complex0);
      complex13.acos();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex1.multiply(2140903827);
      Complex complex4 = complex2.subtract(complex1);
      complex2.abs();
      Complex complex5 = complex1.pow(931.43518);
      complex4.abs();
      Complex complex6 = complex5.atan();
      Complex.valueOf((-841.54495777));
      Complex.valueOf((double) 2140903827, 971.0);
      complex6.sin();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex6.negate();
      complex7.getReal();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.cos();
      complex6.getField();
      complex10.cosh();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.atan();
      complex3.tanh();
      complex11.pow(complex2);
      complex9.reciprocal();
      complex2.toString();
      Complex complex13 = new Complex(931.43518, Double.NaN);
      complex5.equals(complex13);
      complex12.acos();
      complex6.sqrt1z();
      complex8.reciprocal();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.NaN.multiply(0);
      complex3.I.log();
      complex0.readResolve();
      complex0.multiply((double) 0);
      complex3.acos();
      complex1.tanh();
      Complex complex4 = complex0.negate();
      complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex1.acos();
      Complex.valueOf((-1491.702591649));
      complex3.equals(complex2);
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex2.multiply((-5721));
      complex0.pow(complex4);
      complex2.divide(4454838.092207086);
      complex4.subtract(complex3);
      complex6.isInfinite();
      complex5.toString();
      complex2.add(complex0);
      Complex.valueOf(3944.2, (double) (-5721));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(10.28);
      Complex complex1 = complex0.ONE.createComplex(1.0, 10.28);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(10.28);
      complex3.negate();
      Complex.valueOf(10.28);
      complex1.getField();
      Complex complex4 = complex1.multiply(Double.NaN);
      Complex complex5 = new Complex(1981.077146216);
      complex4.add(complex5);
      Complex complex6 = complex5.divide(complex2);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex2.getField();
      complex0.equals(complex2);
      Complex.valueOf((-1.0), (-12.459220159));
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2309.014));
      complex4.pow(complex3);
      Complex complex5 = Complex.valueOf((-1077.3112), Double.POSITIVE_INFINITY);
      complex5.cos();
      complex2.abs();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(10.28);
      Complex complex1 = complex0.ONE.createComplex(1.0, 10.28);
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.divide(10.28);
      complex3.negate();
      Complex complex4 = Complex.valueOf(10.28);
      complex1.getField();
      complex1.NaN.reciprocal();
      Complex complex5 = complex1.ZERO.multiply(complex4);
      complex1.acos();
      Complex.valueOf((-1491.702591649));
      complex0.equals(complex2);
      complex0.pow(complex1);
      Complex.valueOf((-608.902), 30.052262558889826);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex2.add((-336.6542182708621));
      complex7.atan();
      complex7.negate();
      complex6.conjugate();
      complex1.multiply((-608.902));
      Complex complex8 = complex5.sqrt();
      Complex complex9 = Complex.ZERO;
      complex9.add(complex8);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1);
      complex0.nthRoot(1);
      complex0.getImaginary();
      complex0.ONE.abs();
      Complex complex2 = complex1.tanh();
      complex1.ONE.pow(complex0);
      complex0.ZERO.divide(complex1);
      Complex complex3 = Complex.valueOf((double) 1, (-1670.331310893975));
      complex1.reciprocal();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.NaN.acos();
      complex5.exp();
      Complex complex6 = complex1.log();
      Complex complex7 = complex4.divide(complex1);
      complex7.I.log();
      Complex complex8 = complex6.ONE.conjugate();
      Complex complex9 = complex8.NaN.add(0.0);
      complex2.abs();
      complex6.cosh();
      complex1.atan();
      Complex complex10 = complex9.ZERO.cos();
      Complex complex11 = Complex.valueOf(1.557407724654902);
      Complex complex12 = new Complex((-1670.331310893975), 1.0);
      Complex.valueOf((-1670.331310893975), 4.426120229279107E153);
      complex11.INF.pow(complex12);
      Complex complex13 = complex3.negate();
      Complex complex14 = complex13.conjugate();
      complex14.sqrt();
      complex2.add(complex10);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-2110.64897418));
      Complex complex1 = complex0.subtract((-2110.64897418));
      complex0.toString();
      complex1.abs();
      complex1.isNaN();
      Complex complex2 = Complex.valueOf((-2110.64897418));
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf((-1.0));
      complex4.sqrt1z();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex4.acos();
      Complex complex8 = complex6.pow(2.05047480130511E-9);
      complex8.acos();
      complex0.subtract(3956.0);
      complex5.readResolve();
      Complex complex9 = complex4.cosh();
      complex7.asin();
      Complex complex10 = Complex.ONE;
      complex8.log();
      complex9.subtract(480.4321);
      complex10.subtract(complex4);
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      complex0.INF.add(complex1);
      complex1.NaN.cos();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex3.INF.reciprocal();
      complex0.getImaginary();
      Complex complex6 = complex0.sinh();
      complex4.tan();
      complex1.NaN.sqrt();
      complex6.getField();
      complex3.equals(complex6);
      complex5.negate();
      complex2.negate();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.add(complex1);
      Complex complex2 = new Complex(3575.4245834389944, 3575.4245834389944);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = complex1.ONE.tan();
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex5.INF.reciprocal();
      complex0.ONE.divide(complex7);
      complex0.getImaginary();
      complex0.sinh();
      complex6.tan();
      complex1.NaN.sqrt();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.valueOf(Double.NaN, (-2335.0));
      complex2.multiply(complex8);
      complex3.getField();
      complex4.pow(0.0);
      complex2.isNaN();
      complex9.equals("mhFux8#`h5iNs");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex2.getField();
      complex2.multiply(complex0);
      complex3.getField();
      Complex complex4 = complex2.pow((-1.0));
      complex4.isNaN();
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      complex0.INF.add(complex1);
      complex1.NaN.cos();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.INF.asin();
      complex3.INF.reciprocal();
      complex0.getImaginary();
      complex0.sinh();
      complex4.tan();
      complex1.NaN.sqrt();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.valueOf(Double.NaN, (-2335.0));
      complex2.equals("A=j");
      complex4.negate();
      Complex complex7 = Complex.ONE;
      complex7.negate();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2110.64897418));
      complex0.hashCode();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(7);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.subtract(complex3);
      complex0.abs();
      Complex complex5 = complex2.pow(4221.298185253949);
      complex4.abs();
      complex4.atan();
      Complex.valueOf((-1245.385584742), (-2110.64897418));
      Complex complex6 = complex4.sin();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex7.negate();
      Complex complex9 = Complex.ZERO;
      complex9.getReal();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex10.cos();
      complex1.getField();
      complex10.cosh();
      complex6.atan();
      complex11.tanh();
      complex5.pow(complex10);
      Complex complex12 = Complex.valueOf((double) 7, 2111.64897418);
      complex12.reciprocal();
      Complex complex13 = Complex.ONE;
      complex13.toString();
      complex8.equals(complex4);
      complex3.acos();
      Complex complex14 = new Complex(7, 480.4321);
      complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.subtract((-2870.3));
      complex3.toString();
      complex3.abs();
      complex2.isNaN();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex4.acos();
      Complex.valueOf(5.1266271270833386E-5);
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = Complex.valueOf(2561.192220525589);
      Complex complex9 = complex1.pow(complex8);
      complex5.acos();
      complex7.pow(2561.192220525589);
      Complex complex10 = Complex.ONE;
      complex10.acos();
      Complex complex11 = complex10.subtract(1245.1);
      complex6.readResolve();
      Complex complex12 = complex7.cosh();
      complex10.asin();
      complex10.sin();
      Complex complex13 = complex12.log();
      complex13.ONE.add(105.67839999999998);
      complex11.subtract(6.751460509863465E-258);
      complex12.subtract(complex9);
      complex2.createComplex(2.753362641760998E120, 6.751460509863465E-258);
      complex11.divide((-571.6256899));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-841.54495777));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.hashCode();
      Complex complex3 = complex2.NaN.multiply(7);
      complex3.ZERO.subtract(complex2);
      complex0.I.abs();
      Complex complex4 = complex1.pow((-841.54495777));
      complex4.INF.abs();
      complex4.ONE.atan();
      Complex complex5 = Complex.valueOf((-1245.385584742), (-841.54495777));
      Complex complex6 = complex4.sin();
      complex1.sqrt1z();
      complex5.ONE.negate();
      complex0.getReal();
      Complex complex7 = complex5.cos();
      complex1.I.getField();
      Complex complex8 = complex6.cosh();
      Complex complex9 = complex8.ONE.atan();
      complex5.tanh();
      complex1.pow(complex6);
      complex9.reciprocal();
      complex0.toString();
      complex2.equals(complex6);
      Complex complex10 = complex7.acos();
      complex0.sqrt1z();
      complex9.add(complex10);
      complex2.createComplex(Double.POSITIVE_INFINITY, (-841.54495777));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(277.323034102801);
      complex0.NaN.readResolve();
      complex0.NaN.cosh();
      Complex complex1 = complex0.sinh();
      complex1.getArgument();
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.cos();
      complex4.ONE.subtract(complex1);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.ZERO.atan();
      complex6.NaN.tan();
      Complex complex7 = complex2.subtract(complex4);
      complex7.ONE.cosh();
      complex3.toString();
      Complex complex8 = complex3.createComplex(0.0, 0.0);
      complex8.add(complex2);
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.INF.multiply(1.0);
      Complex complex3 = complex2.I.subtract(complex1);
      complex3.INF.hashCode();
      Complex complex4 = complex0.pow((-20.0));
      Complex complex5 = complex1.NaN.sqrt();
      complex5.INF.reciprocal();
      complex5.ONE.nthRoot(815);
      complex4.I.sqrt1z();
      complex1.toString();
      complex1.multiply(complex5);
      Complex.valueOf((-20.0), 1726.44273);
      complex4.ZERO.multiply(complex5);
      Complex complex6 = complex4.sin();
      complex4.subtract(0.0);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2110.64897418));
      Complex complex1 = complex0.subtract(480.4321);
      complex0.toString();
      complex1.ZERO.abs();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf((-1972.1));
      complex2.I.acos();
      Complex complex3 = Complex.valueOf((-1972.1));
      Complex complex4 = complex0.sqrt1z();
      complex3.ZERO.sqrt();
      Complex complex5 = complex1.I.pow(complex3);
      Complex complex6 = complex1.acos();
      Complex complex7 = complex1.pow(0.0);
      complex7.ONE.acos();
      Complex complex8 = complex7.I.subtract((-1972.1));
      complex8.ZERO.readResolve();
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex4.asin();
      complex5.sin();
      complex6.log();
      Complex complex11 = complex10.subtract(480.4321);
      complex9.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1);
      complex0.nthRoot(1);
      complex0.getImaginary();
      complex0.ONE.abs();
      Complex complex2 = complex1.tanh();
      complex1.ONE.pow(complex0);
      complex0.ZERO.divide(complex1);
      Complex.valueOf((double) 1, (-1670.331310893975));
      complex1.reciprocal();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.NaN.acos();
      complex3.INF.exp();
      complex4.exp();
      Complex complex5 = complex1.log();
      Complex complex6 = complex3.divide(complex1);
      complex6.I.log();
      Complex complex7 = complex5.ONE.conjugate();
      Complex complex8 = complex7.NaN.add(0.0);
      complex2.abs();
      complex5.cosh();
      complex1.atan();
      complex8.ZERO.cos();
      Complex complex9 = Complex.valueOf(1.557407724654902);
      Complex complex10 = new Complex((-1670.331310893975), 1.0);
      Complex.valueOf((-1670.331310893975), 4.426120229279107E153);
      complex9.INF.pow(complex10);
      Complex.valueOf((-1670.331310893975), (-1580.314814));
      complex8.cos();
      complex8.abs();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.multiply((-2.308736892479391E-9));
      Complex complex4 = complex2.cos();
      complex4.I.getArgument();
      complex4.ONE.nthRoot(1229);
      complex1.multiply((double) 1229);
      complex0.nthRoot(1);
      complex2.hashCode();
      complex2.getImaginary();
      Complex complex5 = complex4.NaN.tanh();
      complex5.subtract(complex2);
      complex1.INF.add(complex4);
      Complex.valueOf((-2.5731071572354522E-8));
      Complex complex6 = complex1.sinh();
      complex6.exp();
      Complex complex7 = complex3.multiply(0.0);
      complex7.NaN.reciprocal();
      complex0.sin();
      Complex complex8 = Complex.valueOf((-3401.52));
      Complex complex9 = new Complex(2534.0, 0.0);
      complex8.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(10.28);
      Complex complex1 = complex0.ONE.createComplex(1.0, 10.28);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.divide(10.28);
      complex2.negate();
      Complex complex3 = Complex.valueOf(10.28);
      complex1.getField();
      Complex complex4 = complex1.NaN.reciprocal();
      Complex complex5 = complex1.ZERO.multiply(complex3);
      Complex complex6 = complex1.acos();
      Complex.valueOf((-1491.702591649));
      complex0.equals(object0);
      complex0.pow(complex1);
      complex3.multiply((-5721));
      complex6.pow(complex0);
      Complex complex7 = complex6.divide((-4.181177882069608E-9));
      complex7.I.subtract(complex5);
      complex4.isInfinite();
      complex4.toString();
      complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.getArgument();
      Complex complex1 = complex0.multiply(0.0);
      complex1.ZERO.atan();
      int int0 = (-4337);
      try { 
        complex0.NaN.nthRoot((-4337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,337
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = complex1.ONE.tan();
      Complex complex6 = complex5.INF.asin();
      complex5.INF.reciprocal();
      complex0.getImaginary();
      complex0.sinh();
      complex6.tan();
      complex1.NaN.sqrt();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.valueOf(Double.NaN, (-2335.0));
      complex2.multiply(complex7);
      complex3.getField();
      complex4.pow(0.0);
      complex2.isNaN();
      complex8.equals("mhFux8#`h5iNs");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.sqrt();
      Complex complex1 = Complex.ONE;
      complex1.ONE.log();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex4.I.add(complex3);
      complex5.I.sqrt1z();
      complex3.INF.multiply((-1485));
      complex2.I.sqrt();
      complex1.cos();
      Complex complex6 = complex0.createComplex(1.9355758655647052E54, 2657.230596794);
      complex4.pow(1.9355758655647052E54);
      Complex complex7 = complex6.add(complex2);
      Complex.valueOf(1.0106552237522032E228);
      complex7.sqrt1z();
      complex2.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(442413.375, (-1597.888));
      double double0 = (-1130.05129939);
      Complex.valueOf((-1130.05129939));
      Complex complex2 = complex0.ONE.multiply(complex1);
      try { 
        complex2.ZERO.nthRoot((-3151));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,151
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1974215507507324, (-1004.6974448));
      Complex complex1 = complex0.I.multiply(1.1974215507507324);
      complex1.INF.sinh();
      Complex complex2 = complex0.ONE.tanh();
      complex2.ZERO.add(0.0);
      complex2.ONE.nthRoot(1);
      complex0.equals("");
      complex2.isInfinite();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-558.8891), 1291.26642874733);
      complex1.toString();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.asin();
      complex4.INF.multiply(0.0);
      complex0.getImaginary();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.sin();
      complex5.ZERO.sqrt();
      complex0.multiply(0.0);
      complex3.createComplex((-995.0), (-995.0));
      complex3.subtract((-995.0));
      Complex complex7 = complex5.I.acos();
      complex5.getArgument();
      Complex complex8 = complex2.multiply(1.986264756071962E44);
      complex6.toString();
      Complex complex9 = complex0.add(complex6);
      complex1.getField();
      complex9.getField();
      complex7.readResolve();
      complex5.I.pow(0.0);
      Complex complex10 = complex9.divide(1.0);
      complex9.readResolve();
      complex10.cosh();
      complex8.subtract((-995.0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
      Complex complex2 = complex0.tan();
      complex2.NaN.sqrt1z();
      complex2.getField();
      complex0.equals(complex2);
      Complex complex3 = complex0.negate();
      complex3.negate();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex0.I.multiply(0.0);
      complex1.ZERO.add(complex0);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3793.91873588, 3793.91873588);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(831.013175186);
      Complex complex1 = complex0.INF.sin();
      complex1.I.acos();
      complex0.getField();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 1.0672499803427623E292;
      double double1 = (-1222.19);
      Complex complex0 = new Complex(1.0672499803427623E292, (-1222.19));
      int int0 = 1;
      Complex complex1 = complex0.multiply(1);
      complex1.NaN.asin();
      try { 
        complex1.ZERO.nthRoot((-350));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -350
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-881.51892152406));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.NaN.acos();
      complex0.hashCode();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.ZERO.pow((-2866.0));
      complex5.NaN.sqrt();
      Complex complex6 = complex1.exp();
      complex0.equals(complex1);
      complex3.abs();
      Complex complex7 = new Complex(0.0, 4.01780853635105E197);
      Complex complex8 = complex3.subtract(complex7);
      complex1.readResolve();
      complex3.sqrt();
      complex2.abs();
      Complex complex9 = complex6.multiply((-2866.0));
      complex9.I.multiply(2436);
      Complex complex10 = complex4.acos();
      complex10.ZERO.cosh();
      Complex.valueOf((-817.15812731));
      complex0.multiply(0.0);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.I.conjugate();
      complex3.ONE.atan();
      complex1.readResolve();
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex3.ONE.sqrt();
      Complex complex7 = complex0.I.sinh();
      complex7.INF.add(complex0);
      Complex complex8 = complex7.INF.add(complex4);
      complex8.pow(complex5);
      complex0.toString();
      Complex complex9 = complex3.tanh();
      complex9.ZERO.cosh();
      complex1.sinh();
      complex6.equals("numerator");
      complex1.multiply(312.586125231);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex0.createComplex(0.0, (-1646.0));
      Complex.valueOf(0.0);
      complex2.ZERO.conjugate();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.sin();
      complex1.getArgument();
      complex2.getField();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(1.9426261544163577E-8, 0.0);
      Complex complex1 = complex0.cosh();
      complex1.ONE.pow(1.9426261544163577E-8);
      complex1.I.cos();
      complex0.createComplex(0.0, 1.9426261544163577E-8);
      Complex complex2 = complex1.reciprocal();
      complex1.pow(complex2);
      Complex complex3 = Complex.ZERO;
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1138.54231129206), (-1138.54231129206));
      Complex complex1 = complex0.ZERO.log();
      complex1.NaN.pow((-4493.0));
      complex1.INF.tan();
      complex0.asin();
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4285.443279511454));
      Complex complex1 = complex0.I.createComplex((-2712.888636), 425.7366752089574);
      Complex complex2 = complex0.multiply(3290);
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.ONE.asin();
      complex4.ZERO.readResolve();
      Complex complex5 = complex2.ONE.reciprocal();
      Complex.valueOf((-4285.443279511454), (double) 3290);
      Complex complex6 = complex5.ZERO.exp();
      Complex complex7 = complex0.sqrt();
      complex7.getReal();
      Complex complex8 = complex7.divide(complex6);
      complex8.I.getArgument();
      Complex complex9 = complex1.INF.exp();
      Complex complex10 = Complex.valueOf(1065.9987449397954);
      complex10.NaN.toString();
      Complex complex11 = complex10.pow(0.0);
      Complex complex12 = complex1.sinh();
      complex12.ZERO.getArgument();
      complex12.ZERO.readResolve();
      Complex complex13 = complex0.add(425.7366752089574);
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex13.sqrt1z();
      complex15.I.getArgument();
      complex13.add(complex1);
      complex10.ZERO.asin();
      complex9.asin();
      complex14.divide((-20.0));
      complex12.abs();
      complex7.sqrt();
      complex11.subtract(complex15);
      complex3.nthRoot(79);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((double) 1375);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.NaN.createComplex(1375, (-1293.62989684));
      Complex complex4 = complex0.ONE.subtract(complex3);
      complex4.reciprocal();
      Complex complex5 = complex3.I.cos();
      complex1.I.abs();
      Complex complex6 = complex1.NaN.add(1.0);
      complex6.ONE.getArgument();
      complex0.NaN.nthRoot(1375);
      complex0.getReal();
      Complex complex7 = complex2.multiply(1375);
      Complex complex8 = complex2.sin();
      complex1.multiply(7);
      complex2.NaN.getField();
      complex8.cos();
      complex8.isInfinite();
      complex0.getImaginary();
      complex7.tanh();
      complex5.isInfinite();
      complex1.isInfinite();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex.valueOf(475.7242050339059);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1244.42);
      complex0.INF.abs();
      complex0.NaN.tan();
      complex0.getImaginary();
      complex0.INF.pow(0.0);
      complex0.isInfinite();
      complex0.ONE.multiply(1244.42);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.tanh();
      complex1.INF.readResolve();
      complex0.getArgument();
      complex2.add(complex1);
      complex0.multiply((-247));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.I.asin();
      Complex complex1 = new Complex(241.6097, 241.6097);
      complex0.INF.negate();
      Complex complex2 = complex0.subtract(complex1);
      complex2.subtract(complex0);
      complex1.divide(complex0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-455.7559359018876));
      complex1.ONE.add(0.0);
      try { 
        complex1.NaN.nthRoot((-1332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,332
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1143.2209117404623, 1894.5588847);
      complex0.sin();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex0.NaN.pow((-3756.7));
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.ZERO.multiply(1336.742339765);
      Complex complex3 = complex0.sinh();
      try { 
        complex3.ZERO.nthRoot((-1788));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,788
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2043.61817));
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex1.INF.multiply((-86));
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = new Complex(0.0, (-1579.831975446503));
      Complex complex6 = complex5.I.cos();
      complex6.INF.pow(3108.065859380409);
      complex2.INF.pow(complex5);
      complex3.I.cosh();
      Complex complex7 = complex3.ONE.sqrt();
      Complex complex8 = complex7.ZERO.conjugate();
      complex8.I.cos();
      complex0.getReal();
      complex0.getReal();
      complex0.toString();
      Complex complex9 = Complex.valueOf(115.74);
      complex3.divide(Double.NaN);
      complex2.multiply(115.74);
      complex0.sin();
      complex0.getField();
      complex9.sin();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      double double0 = 1.4110645699377834E-8;
      Complex complex0 = new Complex(1.4110645699377834E-8);
      Complex complex1 = complex0.subtract(1.4110645699377834E-8);
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex1.add(complex0);
      complex3.ZERO.readResolve();
      complex0.add(complex1);
      try { 
        complex2.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.asin();
      complex2.NaN.exp();
      Complex complex3 = complex2.NaN.multiply(1485.9386027747305);
      complex2.NaN.hashCode();
      complex0.ZERO.readResolve();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.pow(0.0);
      complex5.I.asin();
      Complex complex6 = complex5.log();
      complex5.equals(complex1);
      Complex complex7 = complex6.log();
      complex7.NaN.hashCode();
      complex4.ZERO.cosh();
      complex2.isNaN();
      complex4.sqrt1z();
      complex2.cos();
      complex0.negate();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex((-3913.93));
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.896378545255258E-9);
      complex0.cos();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.createComplex(9.896378545255258E-9, (-941.0));
      complex0.add(complex2);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.pow(1.288124387778789E-209);
      complex1.INF.add(complex0);
      Complex complex2 = complex0.add((-1266.3));
      Complex complex3 = complex2.NaN.multiply(0);
      complex3.I.log();
      complex0.readResolve();
      complex3.acos();
      complex1.tanh();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.pow(0.0);
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex2.INF.log();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.multiply(complex0);
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex7.sqrt();
      complex5.ZERO.getArgument();
      complex0.readResolve();
      Complex complex9 = complex4.ONE.createComplex(1225.080843252381, 0.0);
      Complex complex10 = complex5.subtract((-1313.0));
      complex5.INF.negate();
      Complex complex11 = complex10.NaN.pow(2058.3302514364923);
      Complex complex12 = complex11.NaN.reciprocal();
      Complex complex13 = complex10.I.conjugate();
      complex13.NaN.cos();
      assertEquals((-1.0), complex13.getImaginary(), 0.01);
      
      complex10.INF.exp();
      Complex complex14 = complex6.sinh();
      Complex complex15 = complex11.ONE.sin();
      Complex complex16 = Complex.valueOf(0.0, 0.0);
      complex16.ONE.toString();
      double double0 = complex1.getReal();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex3.pow(Double.NaN);
      assertTrue(complex3.isInfinite());
      
      complex10.isNaN();
      Complex complex17 = complex2.sqrt();
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex2.getReal(), 0.01);
      
      Complex complex18 = complex11.tanh();
      assertSame(complex11, complex10);
      assertSame(complex18, complex14);
      
      Complex complex19 = complex7.asin();
      assertEquals(0.0, complex19.getReal(), 0.01);
      assertTrue(complex19.equals((Object)complex8));
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      
      complex9.negate();
      Complex complex20 = complex4.cos();
      assertNotSame(complex20, complex1);
      assertSame(complex20, complex12);
      assertFalse(complex4.equals((Object)complex15));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(1245.398247832557);
      boolean boolean0 = complex0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1245.398247832557, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }
}
