/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:16:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(2100.4468667036567, 2100.4468667036567);
      Complex complex1 = new Complex(2100.4468667036567);
      complex0.ONE.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.createComplex(20.0, 2100.4468667036567);
      complex2.ONE.getArgument();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.ZERO;
      complex6.I.nthRoot(522);
      Complex complex7 = complex6.I.multiply(9.374622223902382E-18);
      complex6.INF.divide(9.374622223902382E-18);
      Complex complex8 = complex5.asin();
      Complex complex9 = complex1.conjugate();
      complex5.abs();
      complex9.NaN.subtract(20.0);
      complex6.multiply(522);
      complex7.exp();
      complex4.abs();
      Complex complex10 = complex6.multiply(complex9);
      complex10.nthRoot(2319);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(522);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(522, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.conjugate();
      complex3.multiply(522);
      complex4.exp();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.62074));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex0.INF.getField();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.cosh();
      complex2.getField();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.divide(0.0);
      Complex complex7 = complex4.multiply(complex6);
      complex3.abs();
      Complex complex8 = complex4.sinh();
      complex1.getArgument();
      Complex complex9 = Complex.valueOf(1.0112214979786464E-43);
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = complex7.subtract((-1045.62074));
      complex8.readResolve();
      complex8.subtract(1.0112214979786464E-43);
      complex10.acos();
      complex0.tanh();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-0.8813735870195428), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.ZERO.divide(complex1);
      complex2.nthRoot(781);
      Complex complex3 = complex0.multiply(1.8508157176809255);
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.NaN;
      complex5.conjugate();
      complex3.tan();
      Complex complex6 = complex4.multiply(4);
      complex6.abs();
      Complex complex7 = Complex.ONE;
      complex3.nthRoot(781);
      complex1.subtract(5.945256705384597E-148);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.792532422030812, 298.08007835);
      Complex complex2 = new Complex(570.51730271, Double.POSITIVE_INFINITY);
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(3.425518820814759, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2615.93867104), (-2615.93867104));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.cosh();
      complex4.ONE.add(1.2662018663984825E-17);
      Complex complex5 = complex3.add(5315.6);
      complex0.abs();
      complex0.toString();
      Complex complex6 = complex2.pow(complex5);
      complex6.ZERO.abs();
      complex1.INF.getArgument();
      Complex complex7 = Complex.valueOf((-1.467401077195495), Double.POSITIVE_INFINITY);
      complex1.exp();
      complex7.abs();
      Complex complex8 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.I;
      complex7.ONE.subtract(complex9);
      Complex complex10 = complex8.ONE.sin();
      complex5.atan();
      complex5.atan();
      complex7.asin();
      complex6.nthRoot(844);
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(8.65981116953487E-18, Double.POSITIVE_INFINITY);
      complex1.getField();
      complex0.getArgument();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.sqrt1z();
      complex2.nthRoot(1);
      complex0.createComplex(8.65981116953487E-18, 1.5707963267948966);
      Complex complex4 = complex1.multiply((-3842.5));
      Complex complex5 = complex4.sqrt1z();
      complex5.INF.exp();
      Complex complex6 = complex0.cosh();
      complex1.I.sqrt();
      complex3.nthRoot(1);
      complex2.conjugate();
      complex6.tanh();
      complex4.sqrt1z();
      Complex complex7 = new Complex((-3842.5));
      complex7.tan();
      complex4.cos();
      complex3.multiply(522);
      Complex.valueOf(8.65981116953487E-18);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex0.acos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.ONE;
      complex5.multiply(4697.3846);
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex5.tan();
      complex1.multiply(1215);
      complex4.equals((Object) null);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(2136.2832604795426, 2136.2832604795426);
      complex0.acos();
      Complex.valueOf(1251.981120120627, 4.50802633729044E-157);
      Complex complex1 = Complex.valueOf(1043.4636563995698, (-2730.53970900707));
      complex1.NaN.add((-2730.53970900707));
      Complex complex2 = complex1.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2100.4468667036567, 2100.4468667036567);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(complex1);
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex0.createComplex(20.0, 2100.4468667036567);
      Complex complex4 = Complex.valueOf(696.5527892990418, 20.0);
      complex3.subtract((-1473.63));
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add((-20.0));
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-20.0));
      complex2.getField();
      Complex complex3 = Complex.valueOf((-20.0), 0.0);
      Complex complex4 = complex3.tanh();
      complex4.divide(601.2396322369787);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2568.05655, 2568.05655);
      Complex complex1 = complex0.sin();
      complex0.NaN.abs();
      Complex complex2 = complex1.multiply(4484);
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.INF.divide(Double.NaN);
      Complex complex6 = complex5.NaN.negate();
      complex6.ZERO.sin();
      Complex complex7 = complex0.subtract(complex4);
      complex2.subtract(20.0);
      Complex complex8 = complex3.multiply(4484);
      complex8.INF.add(1383.2144356176);
      complex8.NaN.add(complex7);
      Complex complex9 = complex2.add((double) 4484);
      complex9.I.log();
      complex6.add(20.0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3178807885678951, 2.667695552814763E162);
      Complex complex1 = new Complex(20.0, 0.3178807885678951);
      complex1.getField();
      complex0.getArgument();
      complex0.tanh();
      complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-215));
      complex0.equals(complex1);
      complex1.sqrt1z();
      complex0.subtract(7.436647289671416E-14);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.abs();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(2100.4468667036567, 2100.4468667036567);
      complex0.getField();
      Complex complex1 = complex0.acos();
      complex1.subtract(complex1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.createComplex(20.0, 3298.4049275207212);
      complex2.getField();
      complex2.ONE.getArgument();
      Complex complex4 = complex3.tanh();
      complex4.sqrt1z();
      Complex complex5 = Complex.ONE;
      complex5.atan();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-1.4680416593826893));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.I.subtract(complex2);
      complex0.ONE.pow(2918.65138060142);
      complex2.nthRoot(2330);
      complex4.sin();
      Complex complex5 = new Complex(2330, Double.POSITIVE_INFINITY);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = Complex.valueOf(3337.3107757137, 3337.3107757137);
      complex3.multiply(complex1);
      complex2.abs();
      complex3.sinh();
      complex0.getArgument();
      Complex.valueOf((-1.0626125049032536E262));
      complex3.reciprocal();
      complex3.multiply(3337.3107757137);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(2918.65138060142, 2918.65138060142);
      Complex complex3 = complex2.ZERO.sinh();
      complex3.atan();
      complex0.exp();
      complex1.nthRoot(2330);
      complex0.log();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(2100.4468667036567, 2.2294564247131348);
      complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(complex1);
      Complex.valueOf(1.2998975819628988E-8, 5.759440286608551E-191);
      Complex complex3 = complex2.subtract((-2457.5512993901));
      Complex complex4 = complex1.tan();
      complex2.conjugate();
      Complex complex5 = complex3.add(complex1);
      complex2.tan();
      Complex complex6 = new Complex((-1109.192081));
      complex6.divide((-2457.5512993901));
      complex1.getField();
      complex4.cosh();
      complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      complex0.toString();
      complex1.negate();
      Complex complex2 = Complex.valueOf((double) 1509);
      complex2.multiply(1509);
      Complex complex3 = Complex.ONE;
      Complex.valueOf((double) 1509);
      complex3.getField();
      Complex complex4 = new Complex(1509);
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      complex5.ONE.createComplex(1509, (-492.241778));
      complex1.getField();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.multiply((double) 1509);
      complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(1054.0183, 2.2294564247131348);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.tan();
      Complex.valueOf(885.496);
      complex2.isNaN();
      Complex complex3 = complex2.sqrt1z();
      complex3.atan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex0.ONE.pow(2918.65138060142);
      Complex complex6 = complex0.exp();
      complex2.nthRoot(2330);
      Complex complex7 = complex6.ZERO.sin();
      complex0.sqrt1z();
      Complex complex8 = complex1.subtract(3937.148);
      complex0.INF.add(Double.NaN);
      complex6.abs();
      complex2.readResolve();
      Complex complex9 = complex5.pow(complex7);
      complex1.ZERO.multiply(complex6);
      Complex complex10 = complex0.add(8.252116273466952E112);
      complex10.pow(complex8);
      complex7.createComplex(2918.65138060142, 3000.38288);
      complex2.getField();
      complex3.tanh();
      complex4.ZERO.createComplex(3937.148, 6.283185307179586);
      Object object0 = complex5.readResolve();
      complex5.equals(object0);
      complex4.add(complex9);
      complex7.hashCode();
      complex0.conjugate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.62074));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf(0.0);
      complex2.readResolve();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex2.add(20.0);
      complex3.createComplex(2135.06754664934, (-123.2073039108629));
      Complex complex7 = Complex.valueOf(0.0, (-622.07));
      complex7.getField();
      complex5.tanh();
      Complex complex8 = Complex.INF;
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-717.11980131916), (-20.0));
      complex0.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.exp();
      complex1.hashCode();
      Complex.valueOf(3.807242187736102E-281, 617.7585517);
      Complex complex3 = new Complex(1.0112214979786464E-43, (-20.0));
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.acos();
      complex1.cos();
      complex1.reciprocal();
      complex2.readResolve();
      complex5.multiply((-717.11980131916));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.sin();
      complex3.I.subtract(complex2);
      Complex complex4 = complex0.ONE.pow(2918.65138060142);
      Complex complex5 = complex0.exp();
      complex2.nthRoot(2330);
      complex5.ZERO.sin();
      complex4.add(2918.65138060142);
      complex3.multiply(Double.NaN);
      complex4.add(3937.148);
      complex5.acos();
      Complex complex6 = complex4.log();
      complex3.tan();
      Complex complex7 = Complex.ONE;
      complex7.getField();
      complex0.sin();
      complex7.asin();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1054.0183, 2.2294564247131348);
      complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex((-1109.192081), (-1109.192081));
      Complex complex3 = complex1.subtract(complex2);
      Complex.valueOf(1.2998975819628988E-8, (-1270.7021));
      Complex complex4 = complex3.subtract((-2457.5512993901));
      complex1.tan();
      complex3.conjugate();
      complex4.add(complex1);
      complex2.sinh();
      complex3.tan();
      complex1.acos();
      Complex complex5 = complex0.log();
      complex0.tan();
      complex2.hashCode();
      complex5.getField();
      Complex complex6 = complex2.sin();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex1.hashCode();
      complex0.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.ZERO.multiply((-2070.4));
      complex4.add(0.0);
      Complex complex5 = Complex.ONE;
      complex5.subtract(complex2);
      Complex complex6 = Complex.valueOf(0.0);
      complex3.reciprocal();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.tan();
      complex0.conjugate();
      Complex complex9 = complex4.conjugate();
      complex8.I.cosh();
      complex1.nthRoot(2327);
      complex9.pow(complex8);
      complex6.createComplex((-1368.604262), 2327);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex1.hashCode();
      complex0.getField();
      complex0.sinh();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.ZERO.multiply((-2070.4));
      Complex complex4 = complex3.add(0.0);
      complex1.acos();
      complex0.log();
      complex4.createComplex((-1695.0768352234), 8.81860282490643E125);
      complex4.readResolve();
      complex1.equals(complex4);
      Complex complex5 = new Complex((-1695.0768352234));
      Complex complex6 = complex3.add(complex5);
      complex3.hashCode();
      complex3.conjugate();
      complex4.asin();
      try { 
        complex6.nthRoot((-1782));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,782
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2223.59));
      complex0.getField();
      complex0.cos();
      Complex complex2 = complex1.exp();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf(3.807242187736102E-281, (-2223.59));
      Complex complex4 = new Complex((-2223.59), 1142.703667921);
      Complex complex5 = complex4.sinh();
      complex3.acos();
      complex4.cos();
      Complex complex6 = complex3.reciprocal();
      complex6.ONE.readResolve();
      complex5.multiply(1142.703667921);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(2.626941680908203);
      complex0.ZERO.getField();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.exp();
      complex0.INF.hashCode();
      complex2.abs();
      Complex complex3 = Complex.valueOf(1.7165256995489035);
      complex3.readResolve();
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex0.multiply(complex4);
      complex3.add(299.2839630583064);
      complex2.createComplex(299.2839630583064, (-506.6556346027));
      complex4.getField();
      complex0.tanh();
      Complex complex6 = complex5.createComplex(1.7165256995489035, 0.31204116344451904);
      complex4.readResolve();
      Complex complex7 = Complex.I;
      complex2.equals(complex7);
      try { 
        complex6.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      complex0.INF.divide((-1.2998975819628988E-8));
      Complex complex1 = complex0.ZERO.divide(332.54331199968);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.sinh();
      complex2.reciprocal();
      complex0.isInfinite();
      complex3.abs();
      Complex complex4 = Complex.ONE;
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cosh();
      complex1.getField();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.divide(0.0);
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = Complex.valueOf(2.0, 3.1708848570787023);
      complex5.abs();
      complex2.sinh();
      complex3.getArgument();
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex4.reciprocal();
      complex0.subtract(Double.NaN);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.62074));
      Complex complex1 = complex0.sin();
      complex0.I.cos();
      complex1.nthRoot(3395);
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.multiply(2148);
      complex2.pow(0.14939609169960022);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.4650891244084597E148), (-3.4650891244084597E148));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.valueOf(Double.NaN, 2913.36009604);
      Complex complex3 = complex2.sin();
      complex3.INF.nthRoot(951);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex4.subtract(complex3);
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex4.I.negate();
      complex0.INF.atan();
      Complex complex8 = complex5.createComplex(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex9 = complex8.ONE.createComplex(951, 2913.36009604);
      Complex complex10 = complex7.negate();
      complex8.log();
      complex3.toString();
      complex5.sin();
      Complex complex11 = complex2.tanh();
      complex10.toString();
      complex8.ONE.sqrt1z();
      complex7.abs();
      complex6.sinh();
      complex9.readResolve();
      complex11.cosh();
      complex8.multiply(656);
      complex11.divide((-965.4607400074));
      complex1.readResolve();
      complex2.nthRoot(951);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(1054.0183, 2.2294564247131348);
      complex0.I.getField();
      Complex complex1 = complex0.ONE.acos();
      complex0.equals("i{V>wF\ng}");
      Complex complex2 = new Complex(1054.0183, 2.2294564247131348);
      Complex complex3 = complex0.subtract(complex2);
      Complex.valueOf(1.16354361977249E-8, Double.NaN);
      complex0.subtract(3528.3585);
      complex2.tan();
      Complex complex4 = complex0.conjugate();
      complex4.ZERO.add(complex1);
      Complex complex5 = complex0.pow(1054.0183);
      complex0.tan();
      Complex complex6 = Complex.ONE;
      complex3.subtract(complex6);
      Complex complex7 = Complex.valueOf(3528.3585);
      complex7.INF.reciprocal();
      complex7.sinh();
      complex5.divide(2.2294564247131348);
      complex7.getField();
      complex4.isInfinite();
      Complex complex8 = Complex.ZERO;
      complex8.createComplex(0.0, Double.NaN);
      Complex complex9 = Complex.NaN;
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex0.getField();
      complex1.hashCode();
      complex0.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.ZERO.multiply((-2070.4));
      complex4.add(0.0);
      complex1.acos();
      Complex complex5 = complex0.log();
      complex2.multiply(complex1);
      complex3.abs();
      Complex complex6 = complex5.sinh();
      complex6.getArgument();
      Complex.valueOf((-1.5707963267948966));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex0.getField();
      complex1.hashCode();
      complex0.getField();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex2.subtract(136.35982444491412);
      complex0.tan();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex4.add(complex5);
      complex4.pow((-761.2295));
      Complex complex7 = complex1.tan();
      Complex complex8 = Complex.ONE;
      complex8.subtract(complex6);
      Complex.valueOf((-1368.604262));
      Complex complex9 = complex2.reciprocal();
      complex1.tan();
      Complex complex10 = Complex.INF;
      complex10.conjugate();
      complex3.conjugate();
      complex7.nthRoot(597);
      complex4.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.62074));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex1.multiply(2.818537910881676E-71);
      complex3.sinh();
      complex3.getField();
      complex3.multiply((-1.0));
      complex0.hashCode();
      Complex complex4 = Complex.valueOf((-1.0));
      Complex complex5 = complex3.sin();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex4.log();
      complex6.getReal();
      complex1.acos();
      complex7.getField();
      Complex complex8 = Complex.valueOf((-2.1189412500235765), 40.19140625);
      complex8.divide((-1045.62074));
      complex7.multiply(complex3);
      complex2.abs();
      Complex complex9 = Complex.I;
      complex9.sinh();
      complex9.getArgument();
      Complex.valueOf((-1125.02640788));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4611679969129262E-8);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(2.4611679969129262E-8);
      complex2.tanh();
      Complex complex3 = complex0.multiply((-2224));
      Complex complex4 = complex3.ONE.subtract(669.833639253);
      complex2.readResolve();
      Complex complex5 = complex0.asin();
      complex2.isInfinite();
      Complex complex6 = complex0.ZERO.cos();
      complex5.INF.multiply(complex1);
      complex5.getField();
      Complex complex7 = Complex.valueOf(1930.8893564231603, 1930.8893564231603);
      Complex complex8 = complex7.cosh();
      complex3.abs();
      complex4.sinh();
      complex8.tan();
      Complex complex9 = Complex.valueOf((double) (-2224), 0.0);
      complex9.add(complex6);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1250.270997132796);
      complex1.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.multiply((-1695.0768352234));
      complex2.getField();
      Complex.valueOf((-758.9170975), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.cosh();
      complex4.abs();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex0.tan();
      complex5.add(complex1);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4611679969129262E-8);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(2.4611679969129262E-8);
      complex2.tanh();
      Complex complex3 = complex0.multiply((-2224));
      complex3.ONE.subtract(669.833639253);
      Complex complex4 = (Complex)complex2.readResolve();
      Complex complex5 = complex0.asin();
      complex2.isInfinite();
      Complex complex6 = complex0.ZERO.cos();
      Complex complex7 = complex5.INF.multiply(complex1);
      Complex.valueOf(0.8414709848078964, 669.833639253);
      Complex complex8 = complex2.subtract(3528.3585);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.tan();
      Complex complex11 = complex9.conjugate();
      complex5.add(complex3);
      Complex complex12 = complex3.pow(37.27622058);
      Complex complex13 = complex12.tan();
      Complex complex14 = Complex.ONE;
      complex10.subtract(complex6);
      Complex complex15 = Complex.valueOf(395611.18702664936);
      complex15.reciprocal();
      Complex complex16 = complex8.tan();
      complex16.NaN.divide(complex4);
      Complex complex17 = Complex.NaN;
      complex17.conjugate();
      complex11.conjugate();
      complex7.nthRoot(1054);
      complex11.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(2.626941680908203);
      complex0.ZERO.getField();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf(Double.NaN, 395611.18702664936);
      complex3.subtract(2.4059133529663086);
      complex1.tan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.add(complex4);
      complex5.pow((-2532.568));
      complex5.tan();
      Complex complex7 = Complex.ONE;
      complex4.subtract(complex2);
      Complex complex8 = Complex.valueOf(395611.18702664936);
      Complex complex9 = new Complex(1809.21, (-180.263914));
      complex9.reciprocal();
      complex7.ONE.exp();
      complex8.tan();
      complex7.conjugate();
      complex4.conjugate();
      complex7.nthRoot(613);
      complex3.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.62074));
      Complex complex1 = complex0.sin();
      complex1.ZERO.reciprocal();
      Complex complex2 = new Complex((-189.17527737), (-1045.62074));
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.sqrt1z();
      complex4.subtract(231.0);
      complex1.add(3528.3585);
      complex2.abs();
      complex2.readResolve();
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = Complex.ZERO;
      complex7.add(3198.107941788456);
      complex7.createComplex(385.4026, 1062.5958862550542);
      complex5.getField();
      Complex complex8 = Complex.INF;
      complex8.tanh();
      complex6.createComplex(1054.0183, 3528.3585);
      complex3.readResolve();
      Complex complex9 = Complex.INF;
      complex9.equals("7^?cd0+oUa Xi#!xJt");
      complex1.add(complex2);
      complex1.hashCode();
      Complex complex10 = new Complex(Double.NaN);
      complex10.conjugate();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.36086535453796387);
      complex0.getField();
      Complex complex1 = complex0.cos();
      complex1.exp();
      complex1.hashCode();
      Complex complex2 = Complex.valueOf((-1123.8117), 0.36086535453796387);
      complex2.sinh();
      Complex complex3 = complex0.acos();
      complex1.cos();
      complex3.reciprocal();
      complex3.multiply(2.7925807446276126E-8);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1058.0);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ONE.conjugate();
      complex2.ONE.getArgument();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.divide(1058.0);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.ZERO.acos();
      Complex complex7 = complex5.ONE.tanh();
      complex7.ONE.getArgument();
      complex3.sin();
      Complex complex8 = complex4.multiply(1058.0);
      Complex complex9 = complex4.ZERO.multiply((-1.9256682968755803E-7));
      Complex complex10 = complex3.sin();
      Complex complex11 = complex10.INF.multiply(complex5);
      complex11.INF.toString();
      complex10.ZERO.sqrt();
      Complex complex12 = complex2.multiply(397);
      Complex complex13 = complex12.ZERO.divide((double) 397);
      complex8.toString();
      complex5.acos();
      complex8.cosh();
      Complex complex14 = complex13.tan();
      complex0.sinh();
      complex0.equals("m");
      Complex complex15 = complex10.sqrt();
      complex12.divide(complex5);
      complex2.NaN.abs();
      complex10.I.reciprocal();
      complex12.abs();
      Complex complex16 = complex14.add(complex15);
      complex16.divide(complex5);
      complex9.nthRoot(397);
      complex6.negate();
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.readResolve();
      complex0.equals(complex1);
      complex1.equals(complex0);
      Complex complex2 = complex0.exp();
      complex0.abs();
      complex0.I.negate();
      Complex complex3 = complex2.cos();
      complex0.atan();
      Complex complex4 = complex1.pow(complex3);
      complex4.multiply(824);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(1054.0183, 2.2294564247131348);
      complex0.I.getField();
      Complex complex1 = complex0.ONE.acos();
      complex0.equals("i{V>wF\ng}");
      Complex complex2 = new Complex(1054.0183, 2.2294564247131348);
      Complex complex3 = complex0.subtract(complex2);
      complex3.INF.asin();
      Complex.valueOf(1.16354361977249E-8, Double.NaN);
      complex0.subtract(3528.3585);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.add(complex1);
      complex0.pow(1054.0183);
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.ONE;
      complex3.subtract(complex7);
      Complex complex8 = Complex.valueOf(3528.3585);
      Complex complex9 = complex8.INF.reciprocal();
      Complex complex10 = complex4.tan();
      complex10.INF.conjugate();
      complex9.conjugate();
      complex8.nthRoot(613);
      complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(2330);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.subtract(1053.0183);
      Complex complex4 = complex0.add(1053.0183);
      complex0.abs();
      complex4.readResolve();
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex2.multiply(complex1);
      complex2.add(3937.148);
      complex6.createComplex(2109.0, 1.5628822871880503E-18);
      Complex complex7 = new Complex((-1.3810978455418157), 2330);
      complex7.getField();
      Complex complex8 = complex4.tanh();
      complex1.createComplex(1368.604262, 20.0);
      Object object0 = complex8.readResolve();
      complex2.equals(object0);
      Complex complex9 = Complex.I;
      complex0.add(complex9);
      complex3.hashCode();
      complex5.conjugate();
      Complex complex10 = Complex.ONE;
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Object object0 = new Object();
      Object object1 = complex0.readResolve();
      complex0.equals(object1);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.INF;
      complex3.divide((-1030.985013));
      complex2.exp();
      int int0 = 3685;
      // Undeclared exception!
      complex1.nthRoot(1073741811);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex0.getField();
      complex1.hashCode();
      complex0.getField();
      complex0.sinh();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.ZERO.multiply((-2070.4));
      complex3.add(0.0);
      complex1.acos();
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.tan();
      complex4.getField();
      complex5.sin();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4611679969129262E-8);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(2.4611679969129262E-8);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.multiply((-2224));
      Complex complex5 = complex4.multiply(complex2);
      Complex.valueOf((double) (-2224), 2.4611679969129262E-8);
      Complex complex6 = Complex.valueOf((-2086.377054392139));
      complex6.pow(complex1);
      complex1.sqrt();
      complex1.abs();
      complex4.abs();
      Complex complex7 = complex1.conjugate();
      complex7.divide((-809.79085073014));
      Complex complex8 = complex4.sinh();
      complex0.sin();
      Complex complex9 = complex2.acos();
      complex3.cos();
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      Complex complex10 = Complex.valueOf((-2086.377054392139));
      complex9.conjugate();
      Complex complex11 = complex9.log();
      complex11.tan();
      complex10.getField();
      complex8.sin();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex3.subtract(669.833639253);
      complex3.readResolve();
      complex4.asin();
      complex3.isInfinite();
      Complex complex5 = complex2.cos();
      complex2.multiply(complex1);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.sinh();
      complex1.multiply(669.833639253);
      complex2.hashCode();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.sin();
      Complex complex11 = complex4.subtract(complex9);
      complex6.log();
      complex8.getReal();
      complex1.acos();
      complex5.getField();
      Complex complex12 = complex7.divide(Double.POSITIVE_INFINITY);
      complex4.multiply(complex12);
      complex8.abs();
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex13.abs();
      complex9.sinh();
      complex10.getArgument();
      Complex.valueOf(675.81019329885);
      Complex complex14 = complex11.multiply(Double.POSITIVE_INFINITY);
      complex10.log();
      complex14.pow(complex7);
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex1.ONE.abs();
      complex0.getField();
      Complex complex2 = complex1.add(1.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex3.multiply(2.4611679969129265E-8);
      complex0.hashCode();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.sin();
      Complex complex9 = Complex.INF;
      complex7.subtract(complex9);
      Complex complex10 = complex8.log();
      complex3.getReal();
      complex0.acos();
      complex1.getField();
      complex10.divide(2.4611679969129265E-8);
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex8.multiply(complex11);
      complex12.abs();
      complex5.abs();
      Complex complex13 = Complex.INF;
      complex13.sinh();
      Complex complex14 = Complex.INF;
      complex14.getArgument();
      Complex.valueOf(0.0);
      complex11.multiply(0.6613985300064087);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1.2998975819628988E-8));
      complex0.hashCode();
      Complex complex1 = complex0.INF.divide((-1.2998975819628988E-8));
      Complex complex2 = complex0.ZERO.divide(332.54331199968);
      Complex complex3 = complex0.atan();
      complex1.abs();
      complex2.sinh();
      complex3.getArgument();
      Complex complex4 = Complex.valueOf(1537.8017820662);
      complex4.multiply((-2359.04526516));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.divide((-1030.985013));
      complex2.INF.exp();
      complex2.I.nthRoot(3685);
      complex4.getField();
      Complex complex5 = complex1.multiply((-1030.985013));
      complex5.INF.hashCode();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.pow(complex5);
      complex7.hashCode();
      complex2.sin();
      Complex complex8 = complex3.divide(complex6);
      complex5.getReal();
      Complex complex9 = complex8.acos();
      Complex complex10 = complex5.createComplex((-3867.137770845703), 1.5707963267948966);
      complex2.getField();
      complex10.tanh();
      Complex complex11 = complex9.createComplex(6.283185307179586, (-3867.137770845703));
      Complex complex12 = Complex.NaN;
      complex12.readResolve();
      Object object1 = new Object();
      complex7.equals(object1);
      complex0.add(complex11);
      complex5.hashCode();
      Complex complex13 = Complex.NaN;
      complex13.conjugate();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.getField();
      Complex complex1 = complex0.I.log();
      complex1.INF.subtract((-1.718446464587963E12));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex4.ZERO.sqrt1z();
      Complex complex6 = complex2.cosh();
      complex6.NaN.log();
      complex3.divide((-1.718446464587963E12));
      Complex complex7 = complex2.multiply(complex5);
      complex5.log();
      complex7.abs();
      complex0.abs();
      complex0.sinh();
      complex7.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.multiply(3801.9875);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4611679969129262E-8);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(2.4611679969129262E-8);
      complex2.tanh();
      Complex complex3 = complex0.multiply((-2224));
      complex3.ONE.subtract(669.833639253);
      complex2.readResolve();
      Complex complex4 = complex0.asin();
      complex2.isInfinite();
      complex0.ZERO.cos();
      Complex complex5 = complex4.INF.multiply(complex1);
      Complex complex6 = complex5.I.sinh();
      complex5.ZERO.getField();
      Complex complex7 = complex4.multiply(669.833639253);
      complex7.hashCode();
      Complex complex8 = Complex.valueOf(1.0);
      Complex complex9 = complex7.sin();
      complex5.INF.subtract(complex9);
      complex7.NaN.log();
      complex2.getReal();
      Complex complex10 = complex7.acos();
      complex10.getField();
      complex0.NaN.divide(0.0);
      complex8.multiply(complex6);
      complex2.abs();
      complex1.sinh();
      complex2.getArgument();
      Complex.valueOf(1537.8017820662);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex1.ONE.abs();
      complex0.getField();
      Complex complex2 = complex1.add(1.0);
      Complex complex3 = (Complex)complex2.readResolve();
      complex1.hashCode();
      complex1.getField();
      complex2.getImaginary();
      Object object0 = new Object();
      complex0.equals(complex3);
      Complex complex4 = complex3.add(complex2);
      complex4.divide(complex0);
      Complex complex5 = complex1.multiply(complex2);
      complex5.tan();
      complex5.toString();
      complex0.sinh();
      complex5.readResolve();
      complex5.negate();
      complex0.getImaginary();
      try { 
        complex1.nthRoot((-506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -506
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4611679969129262E-8);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.negate();
      Complex complex3 = new Complex(2.4611679969129262E-8, Double.NaN);
      Complex complex4 = complex3.atan();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = Complex.valueOf(1579.775478823, 2.4611679969129262E-8);
      Complex complex7 = complex4.pow(complex1);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.sqrt();
      complex7.abs();
      complex5.abs();
      complex0.conjugate();
      complex9.divide((-1016.088703));
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex5.sin();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.acos();
      complex5.cos();
      complex7.readResolve();
      Object object0 = complex11.readResolve();
      complex13.equals(object0);
      Complex.valueOf(3.1184473002226595E-10);
      Complex complex14 = Complex.valueOf((-599.5791874250256));
      complex14.conjugate();
      complex10.log();
      complex14.tan();
      complex13.getField();
      complex6.sin();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide((-1.0));
      complex2.getField();
      complex2.isInfinite();
      complex0.createComplex((-716.3501802884329), (-1.0));
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.atan();
      complex2.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.ZERO.pow(complex2);
      complex4.ZERO.subtract((-599.7912));
      Complex complex5 = complex0.I.sqrt();
      complex5.abs();
      complex1.abs();
      Complex complex6 = complex0.pow(40.969);
      complex2.conjugate();
      complex5.sinh();
      Complex complex7 = complex6.reciprocal();
      complex4.isInfinite();
      complex3.abs();
      complex7.add(complex1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-1.2998975819628988E-8));
      complex0.hashCode();
      complex0.INF.divide((-1.2998975819628988E-8));
      complex0.ZERO.divide(332.54331199968);
      Complex complex1 = complex0.atan();
      complex1.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(978.7237);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.tanh();
      complex2.NaN.conjugate();
      complex2.INF.divide(978.7237);
      complex1.INF.hashCode();
      Complex complex4 = Complex.valueOf(978.7237);
      Complex complex5 = complex0.subtract((-831.0));
      complex4.ONE.log();
      Complex complex6 = complex4.cos();
      complex5.sqrt();
      Complex complex7 = complex5.NaN.atan();
      complex7.negate();
      complex5.NaN.abs();
      complex1.I.getField();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.ZERO.subtract(complex1);
      complex9.getArgument();
      complex4.getArgument();
      complex3.getArgument();
      Complex complex10 = complex2.atan();
      complex2.acos();
      complex10.sin();
      complex0.getReal();
      complex6.sin();
      complex7.atan();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1192.24, (-2332.730593632));
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.ONE.asin();
      complex1.NaN.nthRoot(1);
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.ONE.divide((-2291.0));
      complex0.getImaginary();
      Complex complex5 = complex0.sqrt();
      complex1.readResolve();
      complex5.nthRoot(1289);
      complex0.cos();
      complex2.ONE.toString();
      complex4.acos();
      complex2.multiply((-586.7556));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.NaN.readResolve();
      Complex complex2 = complex1.NaN.cosh();
      complex0.ZERO.cos();
      Complex complex3 = complex1.ONE.reciprocal();
      complex1.getField();
      Complex complex4 = complex2.sqrt1z();
      complex4.NaN.abs();
      complex4.abs();
      complex4.ONE.divide(complex0);
      complex1.hashCode();
      complex0.INF.acos();
      complex2.NaN.sqrt();
      complex3.sqrt();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-978));
      Complex complex2 = complex0.ONE.conjugate();
      complex2.NaN.negate();
      Complex complex3 = complex0.INF.atan();
      complex1.NaN.multiply((double) (-978));
      complex0.isNaN();
      Complex complex4 = complex0.INF.conjugate();
      complex4.multiply(2.3238237048117092E-8);
      complex0.ZERO.sqrt1z();
      Complex complex5 = Complex.valueOf((double) (-978));
      complex5.ONE.sqrt1z();
      complex1.getReal();
      Complex.valueOf((-1377.0));
      Complex complex6 = complex1.add(1.0);
      Complex complex7 = complex6.multiply(-0.0);
      complex7.ONE.subtract(2.3238237048117092E-8);
      complex7.NaN.multiply((-31.69));
      Complex complex8 = complex6.acos();
      complex8.ONE.subtract(1.0);
      Complex complex9 = complex8.NaN.add(complex3);
      complex6.isInfinite();
      complex9.exp();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1160.0168595363696, 1160.0168595363696);
      Complex complex2 = complex1.INF.sqrt();
      complex1.ZERO.readResolve();
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex1.ZERO.createComplex(0.0, 1160.0168595363696);
      complex3.INF.multiply(0.0);
      Complex complex4 = complex2.ZERO.subtract(1160.0168595363696);
      Complex complex5 = complex2.INF.sin();
      complex5.INF.getField();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex1.conjugate();
      complex7.negate();
      complex8.ZERO.readResolve();
      complex6.equals("0HI(c0gVo");
      complex4.isNaN();
      complex0.getField();
      Complex complex9 = complex8.pow(4168.801957);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex0.atan();
      Complex complex12 = Complex.NaN;
      complex10.add(complex12);
      Object object0 = complex7.readResolve();
      complex11.equals(object0);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = Complex.NaN;
      complex1.pow(complex2);
      complex1.INF.sqrt1z();
      complex0.getField();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.pow(complex3);
      double double1 = 1844.526461;
      complex0.INF.negate();
      Complex complex5 = complex4.add(1844.526461);
      complex4.isInfinite();
      complex0.sqrt1z();
      Complex complex6 = complex2.cos();
      complex6.NaN.divide(0.0);
      Complex complex7 = complex5.tan();
      try { 
        complex7.INF.nthRoot((-2526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,526
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4611679969129262E-8);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(2.4611679969129262E-8);
      complex2.tanh();
      Complex complex3 = complex0.multiply((-2224));
      complex3.ONE.subtract(669.833639253);
      complex2.readResolve();
      Complex complex4 = complex0.asin();
      complex2.isInfinite();
      Complex complex5 = complex0.ZERO.cos();
      Complex complex6 = complex4.INF.multiply(complex1);
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex8.hashCode();
      Complex complex9 = Complex.valueOf(1.0);
      Complex complex10 = complex8.sin();
      complex6.INF.subtract(complex10);
      complex8.NaN.log();
      complex2.getReal();
      Complex complex11 = complex8.acos();
      complex11.getField();
      complex0.NaN.divide(0.0);
      complex9.multiply(complex7);
      complex5.abs();
      complex2.abs();
      complex1.sinh();
      complex2.getArgument();
      Complex.valueOf(1537.8017820662);
      complex8.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex0.multiply(0.0);
      complex2.ZERO.multiply(1.0);
      complex2.INF.exp();
      complex1.exp();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex.valueOf((-315.1422));
      Complex complex2 = Complex.valueOf((-315.1422));
      Complex complex3 = complex2.ZERO.cosh();
      complex2.NaN.readResolve();
      complex1.hashCode();
      complex0.getImaginary();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex0.ONE.pow(2918.65138060142);
      Complex complex6 = complex0.exp();
      complex2.nthRoot(2330);
      Complex complex7 = complex6.ZERO.sin();
      complex0.sqrt1z();
      complex1.subtract(3937.148);
      complex0.INF.add(Double.NaN);
      complex6.abs();
      complex2.readResolve();
      Complex complex8 = complex5.pow(complex7);
      complex1.ZERO.multiply(complex6);
      complex0.add(8.252116273466952E112);
      complex7.createComplex(2918.65138060142, 3000.38288);
      complex2.getField();
      complex3.tanh();
      complex4.ZERO.createComplex(3937.148, 6.283185307179586);
      Object object0 = complex5.readResolve();
      complex5.equals(object0);
      complex4.add(complex8);
      complex7.hashCode();
      complex0.conjugate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-3583.83832));
      Complex complex1 = new Complex(1594.79301792582, 1.5260756679495707E107);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(191.0, 191.0);
      Complex complex1 = complex0.NaN.pow(191.0);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex1.I.getArgument();
      Complex complex3 = complex0.divide(191.0);
      complex2.sqrt1z();
      complex3.multiply(1134);
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.multiply((-2604));
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.045546633850141E211);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex4.NaN.pow(complex3);
      complex4.NaN.divide(complex3);
      complex4.INF.toString();
      Complex complex6 = Complex.valueOf((double) 1700, 1019.594320382226);
      Complex complex7 = complex2.ZERO.multiply(complex6);
      complex7.tanh();
      complex1.NaN.nthRoot(1700);
      Complex complex8 = complex0.atan();
      complex0.getReal();
      Complex complex9 = complex5.divide(complex8);
      complex9.add(1019.594320382226);
      complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-1313));
      complex1.NaN.getField();
      Complex.valueOf(0.5151132345199585, 0.0);
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.negate();
      complex1.tan();
      complex0.getReal();
      Complex complex3 = complex2.divide((double) (-1313));
      complex0.ZERO.createComplex(0.0, 0.28229647874832153);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.sqrt1z();
      complex1.exp();
      complex4.atan();
      Complex complex6 = Complex.ONE;
      complex5.pow(complex6);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.getField();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.subtract((-1.718446464587963E12));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.INF.exp();
      complex5.ZERO.sqrt1z();
      complex3.cosh();
      complex4.conjugate();
      Complex complex6 = complex2.pow(complex5);
      complex5.log();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.62074));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex1.multiply((-189.17527737));
      complex0.INF.getField();
      Complex.valueOf(0.0, 0.0);
      complex3.cosh();
      complex3.abs();
      Complex complex4 = complex2.sinh();
      complex1.tan();
      Complex complex5 = complex4.add(complex3);
      complex2.getArgument();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.NaN.sqrt1z();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.conjugate();
      complex1.INF.hashCode();
      complex4.getArgument();
      Complex complex5 = complex0.INF.subtract(0.0);
      complex4.createComplex(2550.46094, (-1615.4));
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex3.tan();
      complex7.sqrt();
      Complex.valueOf(0.0);
      complex1.tan();
      Complex complex8 = complex2.tan();
      complex8.INF.createComplex(0.0, 1.3373196561281372E-150);
      complex6.sinh();
      complex6.divide(complex5);
      try { 
        complex1.nthRoot((-2009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,009
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex1.NaN.sinh();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.cos();
      complex4.NaN.multiply(complex0);
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = complex5.cos();
      complex2.multiply(1);
      complex5.readResolve();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex1.ZERO.add(327.0);
      complex7.divide((double) 1);
      complex3.reciprocal();
      complex7.tanh();
      Complex complex9 = complex5.add(complex6);
      complex7.getReal();
      Complex complex10 = complex1.multiply(complex7);
      complex10.ZERO.subtract(complex9);
      complex8.pow(complex0);
      complex10.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3057.53), 109.957427427);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.NaN.sin();
      complex0.exp();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.ONE.multiply(complex1);
      complex4.I.abs();
      complex0.getArgument();
      complex2.isInfinite();
      complex3.multiply(0.0);
      complex1.INF.getField();
      complex0.multiply(3760);
      complex1.reciprocal();
      complex1.nthRoot(3760);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2792.547892775182, 1182.37);
      complex0.getField();
      Complex complex1 = Complex.I;
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-1303.013), (-1303.013));
      Complex complex1 = complex0.cos();
      complex1.NaN.getField();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.sinh();
      complex1.ZERO.pow((-1303.013));
      Complex complex4 = complex2.NaN.add((-1303.013));
      complex4.ZERO.atan();
      complex4.NaN.exp();
      complex2.hashCode();
      complex2.multiply(0);
      complex3.INF.negate();
      complex3.subtract((-1303.013));
      Complex.valueOf((-1303.013), (-1303.013));
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.INF.asin();
      complex2.ZERO.getField();
      complex2.ONE.acos();
      Complex complex3 = complex1.ONE.pow(0.0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex3.reciprocal();
      complex5.isInfinite();
      complex5.abs();
      complex6.add(complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.NaN.multiply(1);
      complex1.sin();
      complex1.ONE.multiply(0.0);
      complex0.NaN.divide(complex1);
      complex0.toString();
      complex0.multiply((-961));
      Complex complex2 = complex1.atan();
      complex2.I.log();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.sqrt1z();
      complex1.INF.toString();
      complex2.acos();
      Complex complex6 = complex2.I.tan();
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex0.divide(complex2);
      complex2.tan();
      complex8.multiply(1509);
      Complex.valueOf((double) 1509);
      Complex.valueOf(0.0);
      complex8.sinh();
      complex8.ZERO.getArgument();
      Complex complex9 = Complex.ONE;
      complex7.sqrt1z();
      complex9.NaN.getField();
      Complex complex10 = complex8.multiply(complex9);
      complex10.ZERO.createComplex(0.0, 0.0);
      complex10.NaN.tanh();
      complex1.INF.add(0.0);
      Complex complex11 = complex3.add(Double.POSITIVE_INFINITY);
      complex11.NaN.sinh();
      complex11.NaN.sinh();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex5.getField();
      complex7.isInfinite();
      complex9.createComplex(0.0, 0.0);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(1925.59480786);
      Complex complex1 = complex0.asin();
      complex1.NaN.acos();
      complex1.I.cos();
      complex0.NaN.multiply(1);
      complex0.readResolve();
      complex1.equals(complex0);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(1.43695591408832E-9, 587.59892);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.acos();
      complex1.add(complex2);
      Complex complex4 = Complex.valueOf(0.0, 587.59892);
      complex1.abs();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex3.tan();
      complex2.I.divide((-4.35799392139009E85));
      Complex complex7 = complex5.log();
      complex7.ZERO.sqrt1z();
      complex4.toString();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3394.4251624577796, 2.2116799789922265E-191);
      complex0.INF.subtract(0.0);
      Complex complex1 = complex0.createComplex(0.0, 2.2116799789922265E-191);
      complex1.isNaN();
      complex0.getField();
      complex0.isInfinite();
      complex0.multiply(989.95104);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.INF.pow(5308.3);
      complex0.NaN.tanh();
      Complex complex3 = complex0.asin();
      complex0.multiply(complex2);
      complex3.add(complex2);
      complex1.multiply((-1));
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 757.014967690868);
      Complex complex1 = complex0.INF.tanh();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.INF.atan();
      complex0.ZERO.readResolve();
      Complex complex4 = complex2.NaN.cos();
      complex0.toString();
      Complex.valueOf(2.2951597845188004E-8, 0.0);
      complex3.conjugate();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      double double0 = (-179.08918836613356);
      double double1 = 0.0;
      Complex complex0 = Complex.valueOf((-179.08918836613356), 0.0);
      Complex complex1 = complex0.INF.sin();
      complex0.toString();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.ONE.sqrt1z();
      complex1.isNaN();
      complex2.sqrt1z();
      complex4.ZERO.negate();
      try { 
        complex3.nthRoot((-55));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -55
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex1.ONE.abs();
      complex0.getField();
      Complex complex2 = complex1.add(1.0);
      complex2.readResolve();
      complex1.hashCode();
      complex1.getField();
      complex2.getImaginary();
      complex0.sinh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.ZERO.multiply((-2070.4));
      complex4.add(0.0);
      complex1.acos();
      complex2.toString();
      complex2.getField();
      complex2.multiply(2.337202285991116E-7);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.pow((-1.0));
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.multiply((-215));
      Complex complex7 = complex6.ONE.cos();
      complex6.I.readResolve();
      Complex complex8 = complex4.ZERO.exp();
      Complex complex9 = complex7.ONE.add((double) (-215));
      complex9.INF.multiply(1.387007236480713);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex10 = complex5.add(complex8);
      Complex complex11 = complex4.divide(complex7);
      complex11.ONE.multiply(complex7);
      complex3.tan();
      complex7.cosh();
      complex10.toString();
      complex9.sinh();
      complex8.INF.readResolve();
      complex2.ONE.negate();
      complex8.getImaginary();
      try { 
        complex5.nthRoot((-1401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,401
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ZERO.atan();
      complex3.multiply(complex1);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ZERO.pow(complex3);
      Complex complex5 = complex0.I.sqrt();
      complex5.abs();
      complex1.abs();
      Complex complex6 = complex0.ONE.conjugate();
      Complex complex7 = complex6.ZERO.divide(3.1184473002226595E-10);
      complex6.sinh();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex0.acos();
      complex9.ONE.cos();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      Complex.valueOf((-2.0821912536551675E-8));
      Complex complex10 = complex5.conjugate();
      complex1.log();
      complex8.tan();
      complex6.getField();
      complex0.sin();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.divide((-1030.985013));
      complex2.INF.exp();
      List<Complex> list0 = complex2.I.nthRoot(3685);
      assertEquals(3685, list0.size());
      
      complex4.getField();
      Complex complex5 = complex1.multiply((-1030.985013));
      complex5.INF.hashCode();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.pow(complex5);
      complex7.hashCode();
      assertEquals((-1.0269418085041478E106), complex7.getReal(), 0.01);
      
      Complex complex8 = complex2.sin();
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex3.divide(complex6);
      complex5.getReal();
      Complex complex10 = complex9.acos();
      assertEquals((-1.0848449536661606), complex10.getImaginary(), 0.01);
      
      complex5.getArgument();
      Complex complex11 = complex2.divide(complex9);
      complex11.ONE.toString();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      complex3.add((-1035.0));
      Complex complex12 = complex0.subtract(complex2);
      Complex complex13 = complex4.asin();
      assertEquals((-9.69946052165336E-4), complex13.getImaginary(), 0.01);
      
      Complex complex14 = Complex.valueOf((-249.44672273009));
      assertEquals((-249.44672273009), complex14.getReal(), 0.01);
      
      double double0 = complex12.abs();
      assertEquals(0.5574077246549021, double0, 0.01);
  }
}
