/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:06:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(1784.98, 1784.98);
      complex3.subtract(1784.98);
      complex3.NaN.log();
      complex2.INF.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.6103890140790331E-223);
      complex5.INF.nthRoot(1140);
      Complex complex6 = complex1.divide(1784.98);
      complex6.ONE.sin();
      Complex complex7 = complex6.ZERO.multiply(complex1);
      complex7.log();
      Complex complex8 = complex4.tanh();
      complex8.ZERO.hashCode();
      complex6.INF.getField();
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex4.tan();
      Complex complex11 = complex10.I.multiply((-1481));
      Complex complex12 = complex3.sqrt1z();
      Complex.valueOf((-1.0), 1.718446464587963E12);
      complex9.reciprocal();
      Complex complex13 = complex9.multiply(1.6103890140790331E-223);
      complex5.cosh();
      Complex complex14 = complex11.atan();
      complex5.sqrt();
      complex14.sinh();
      complex13.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1074172492), Double.POSITIVE_INFINITY);
      complex1.multiply((-1074172492));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-20.0));
      complex1.abs();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(3352.573269707, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      complex0.pow(complex2);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1914600368), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.add(2918.65138060142);
      Complex complex4 = complex1.I.sin();
      Complex complex5 = complex4.I.subtract(complex2);
      Complex complex6 = complex0.ONE.pow(2918.65138060142);
      Complex complex7 = complex0.exp();
      complex2.nthRoot(2330);
      complex7.abs();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex0.divide(1783.44109);
      complex0.sinh();
      complex5.sin();
      complex2.acos();
      complex8.readResolve();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex9.atan();
      complex6.asin();
      Complex complex12 = Complex.valueOf((-3.9793609609721186E-8));
      complex11.multiply(2279);
      complex8.cosh();
      complex12.cosh();
      complex7.add(0.7615941559557649);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      complex0.ZERO.getArgument();
      Complex complex3 = complex0.I.createComplex(0.0, (-3568.3618));
      Complex complex4 = complex0.pow((-20.0));
      Complex complex5 = complex2.tan();
      Complex complex6 = complex4.createComplex((-3568.3618), Double.NaN);
      complex5.I.getField();
      complex5.I.subtract(complex3);
      Complex complex7 = complex0.createComplex(0.41389304399490356, 0.41389304399490356);
      Complex complex8 = complex5.sqrt();
      complex7.getField();
      complex4.acos();
      Complex complex9 = complex6.tanh();
      complex9.INF.multiply(Double.NaN);
      complex8.createComplex(0.41389304399490356, (-1.0));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.cosh();
      Complex complex2 = new Complex((-20.0));
      complex2.abs();
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      complex1.readResolve();
      complex2.atan();
      Complex.valueOf((-20.0));
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.cos();
      complex5.pow(complex6);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      complex1.cosh();
      Complex.valueOf((-1190.05781));
      Complex complex3 = Complex.NaN;
      complex0.add(complex3);
      complex3.multiply(complex0);
      Complex complex4 = complex0.add((-1190.05781));
      complex2.cosh();
      Complex complex5 = new Complex(937.4009487949224);
      complex4.abs();
      Complex.valueOf(937.4009487949224, (-1190.05781));
      Complex complex6 = Complex.valueOf(Double.NaN, 1189.05781);
      complex6.readResolve();
      complex2.atan();
      Complex.valueOf(1480.3487507017894);
      complex0.tanh();
      Complex complex7 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = Complex.NaN;
      complex2.abs();
      complex1.abs();
      Complex complex3 = new Complex(Double.NaN, Double.NaN);
      complex0.subtract(Double.NaN);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.ONE;
      Complex.valueOf((-5.946190852360168E-8), 2522.136903);
      complex2.pow(complex3);
      complex1.sqrt();
      complex2.abs();
      complex3.abs();
      complex2.conjugate();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(381.65);
      Complex complex1 = complex0.ONE.acos();
      complex1.subtract(complex0);
      Complex complex2 = complex0.subtract(381.65);
      complex0.ONE.negate();
      Complex complex3 = complex1.I.subtract(complex2);
      complex3.ONE.sqrt1z();
      Complex complex4 = complex0.NaN.tan();
      complex4.INF.hashCode();
      complex4.I.reciprocal();
      complex4.getArgument();
      complex2.I.sinh();
      complex1.negate();
      Complex complex5 = complex0.negate();
      complex5.pow(Double.NaN);
      Complex.valueOf((-2.7227850455346925E-4));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double double0 = (-109.768963);
      double double1 = (-939.964859);
      Complex complex0 = Complex.valueOf((-109.768963), (-939.964859));
      complex0.readResolve();
      Complex complex1 = complex0.exp();
      complex1.I.getArgument();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.ZERO.sqrt();
      complex2.ONE.subtract(complex3);
      try { 
        complex1.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.ONE;
      complex2.abs();
      complex1.abs();
      complex1.conjugate();
      Complex complex3 = new Complex(1.0, Double.POSITIVE_INFINITY);
      complex3.sin();
      Complex complex4 = Complex.ONE;
      complex4.acos();
      Complex complex5 = complex0.cos();
      Complex complex6 = Complex.INF;
      complex5.isInfinite();
      Complex complex7 = Complex.valueOf(2.0);
      Complex complex8 = Complex.valueOf(2242.513065461, 2.0);
      Complex complex9 = Complex.valueOf(2.0);
      complex9.tan();
      complex3.getField();
      complex9.sin();
      complex8.asin();
      complex7.asin();
      complex4.getField();
      Complex.valueOf(0.13414156436920166);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2.105749999899302E-7));
      Complex complex2 = Complex.valueOf((-1.557407724654902), 20.0);
      complex2.hashCode();
      complex1.log();
      Complex complex3 = complex2.tan();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      complex2.tanh();
      complex2.pow((-1190.05781));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(642.003683158439);
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, 41.41295);
      Object object0 = new Object();
      complex1.isNaN();
      complex0.conjugate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.NaN;
      complex2.conjugate();
      complex0.tanh();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2425.158), (-2425.158));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2425.158));
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.ONE;
      Complex.valueOf((-2425.158));
      Complex complex4 = complex1.subtract((-1758.6771844));
      complex4.pow(complex1);
      complex2.asin();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2425.158));
      Complex complex2 = complex1.sinh();
      Complex.valueOf((-20.0), 2522.136903);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex1.sqrt();
      complex3.abs();
      complex2.abs();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.divide((-2425.158));
      complex0.conjugate();
      complex4.tanh();
      complex6.tanh();
      complex7.pow(1.8428773880004883);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.2231435477733612);
      complex0.toString();
      Complex complex1 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.cosh();
      complex0.isInfinite();
      complex0.sin();
      complex0.getField();
      complex1.INF.abs();
      complex0.INF.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex5.tan();
      complex6.I.negate();
      Complex complex7 = complex5.cosh();
      complex7.INF.acos();
      complex3.toString();
      Complex complex8 = complex7.asin();
      complex8.ZERO.nthRoot(2);
      complex2.subtract(0.2231435477733612);
      complex1.toString();
      complex0.cosh();
      complex1.NaN.pow((-1487.6449002));
      complex4.log();
      complex1.conjugate();
      complex8.multiply((-79));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2425.158));
      complex1.sinh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.acos();
      complex0.cos();
      complex3.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = Complex.valueOf((-2425.158));
      complex3.tan();
      complex4.nthRoot(37);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply((-2604));
      complex2.pow((double) (-2604));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.valueOf(1878.09724444621, 1801.570025722);
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex3.sqrt();
      complex6.abs();
      complex3.abs();
      Complex complex7 = new Complex((-459.82), Double.NaN);
      complex0.sqrt();
      Complex complex8 = new Complex((-2275.73));
      complex5.INF.pow(complex8);
      Complex complex9 = complex7.conjugate();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex1.divide(2500.7717);
      Complex complex12 = complex5.sinh();
      complex9.subtract((-459.82));
      complex12.pow(complex11);
      Complex complex13 = Complex.valueOf(1.792783182582235E246, 1801.570025722);
      Complex complex14 = complex13.acos();
      Complex complex15 = Complex.I;
      complex15.cos();
      complex13.readResolve();
      Object object0 = complex12.readResolve();
      complex4.equals(object0);
      Complex complex16 = new Complex(2779.9417752);
      complex16.I.divide(complex14);
      Complex.valueOf(1717.4555075);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex.valueOf((-315.0));
      Complex complex2 = Complex.valueOf((-315.0));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.cos();
      complex4.readResolve();
      Complex complex5 = (Complex)complex1.readResolve();
      complex2.equals(complex5);
      Complex.valueOf(362.1789696);
      Complex.valueOf((-315.0), (-2.0821912536551675E-8));
      complex5.log();
      Complex complex6 = new Complex(20.0, (-2632.0261));
      complex6.tan();
      try { 
        complex1.nthRoot((-3700));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,700
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(699.7205164783, 699.7205164783);
      Complex complex1 = complex0.add(699.7205164783);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.NaN.tan();
      complex3.divide(complex2);
      complex3.I.createComplex(2416.29, (-1.111910721269));
      Complex.valueOf(978.7237);
      Complex complex4 = complex2.sqrt();
      complex4.I.nthRoot(409);
      Complex complex5 = complex2.ZERO.asin();
      Complex complex6 = Complex.valueOf(699.7205164783, 699.7205164783);
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = Complex.NaN;
      complex1.NaN.pow(complex8);
      complex7.I.tan();
      Complex.valueOf((double) 409, 1.2567956334920216E105);
      Complex complex9 = complex7.NaN.createComplex(1985.163248498, 699.7205164783);
      complex9.I.sqrt();
      Complex complex10 = complex0.createComplex(699.7205164783, 699.7205164783);
      Complex complex11 = complex10.I.acos();
      complex11.divide(2.9994214762037207E-4);
      Complex complex12 = complex1.atan();
      Complex.valueOf(699.7205164783, 2416.29);
      complex9.tan();
      complex11.multiply(complex12);
      Complex complex13 = complex11.createComplex(2.9994214762037207E-4, 2416.29);
      complex13.divide(2601.6003327);
      complex5.asin();
      complex11.pow(443.568707746503);
      complex10.multiply(1985.163248498);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      complex0.conjugate();
      Complex complex1 = complex0.divide((-2425.158));
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.acos();
      complex4.readResolve();
      Complex complex5 = Complex.ONE;
      complex2.equals(complex1);
      Complex.valueOf(938.0605430787226);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-670.5));
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.log();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.tan();
      complex8.getField();
      complex2.sin();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.pow(complex2);
      complex3.reciprocal();
      Complex complex4 = complex1.subtract((-1423.281785));
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.createComplex(1.0, 0.5403023058681398);
      complex1.toString();
      complex3.sinh();
      Complex complex7 = complex6.cos();
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.ZERO;
      complex9.cosh();
      complex5.conjugate();
      complex0.pow(complex7);
      complex0.abs();
      complex4.acos();
      complex8.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2425.158), (-2425.158));
      complex0.multiply((-1142.703667921));
      Complex complex1 = Complex.valueOf((-2425.158));
      Complex complex2 = Complex.valueOf(1.844910506368174E79, 1.844910506368174E79);
      Complex complex3 = complex2.log();
      complex2.tan();
      complex2.getField();
      complex2.sin();
      complex3.asin();
      Complex complex4 = Complex.I;
      complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.ONE.subtract(833.08401012);
      complex0.multiply(complex5);
      Complex complex7 = complex6.INF.createComplex(833.08401012, 0.7080734182735711);
      Complex complex8 = complex1.exp();
      complex6.sqrt1z();
      complex3.cosh();
      complex8.conjugate();
      complex3.pow(complex4);
      complex0.abs();
      complex7.getImaginary();
      Complex complex9 = Complex.ONE;
      Complex.valueOf(833.08401012);
      Complex complex10 = Complex.I;
      complex8.subtract(complex10);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.divide((-1031.72137307444));
      complex2.INF.exp();
      complex2.I.nthRoot(3685);
      complex4.getField();
      Complex complex5 = complex1.multiply((-1030.985013));
      complex5.INF.hashCode();
      Complex.valueOf((-1030.985013));
      Complex.valueOf(1214.232486902043, Double.NaN);
      complex4.log();
      Complex complex6 = Complex.I;
      complex6.tan();
      complex3.getField();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.NaN;
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.0, 1077.332);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sqrt();
      complex3.abs();
      complex1.abs();
      Complex complex4 = complex1.conjugate();
      complex2.divide(0.7615941559557649);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex6.cos();
      complex5.readResolve();
      complex3.equals(complex8);
      complex4.sinh();
      Complex.valueOf(6.283185307179586);
      Complex complex9 = Complex.valueOf(1.0, 1077.332);
      complex1.log();
      complex7.tan();
      Complex complex10 = Complex.NaN;
      complex10.getField();
      complex8.sin();
      complex10.asin();
      complex9.reciprocal();
      complex4.sqrt();
      complex6.tanh();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.atan();
      complex2.multiply(complex1);
      Complex complex3 = new Complex(4.164382507310335E-8, 83.69717);
      complex3.tanh();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.negate();
      complex2.tanh();
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = Complex.valueOf(379.1355461, 2.3019011105282883E103);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex4.sqrt();
      complex4.abs();
      complex7.abs();
      complex4.conjugate();
      Complex complex8 = complex6.divide((-1.0));
      complex8.sinh();
      complex2.sin();
      Complex complex9 = complex3.acos();
      Complex complex10 = complex9.cos();
      complex6.readResolve();
      complex10.equals(complex0);
      complex9.sinh();
      Complex complex11 = Complex.valueOf(379.1355461);
      Complex complex12 = Complex.valueOf(379.1355461, 4.797813158646644E51);
      complex9.log();
      Complex complex13 = complex0.tan();
      complex0.getField();
      complex13.sin();
      complex12.asin();
      complex7.reciprocal();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      complex1.getArgument();
      Complex complex2 = complex1.I.atan();
      complex2.INF.multiply(complex0);
      complex2.ZERO.hashCode();
      complex0.NaN.getField();
      Complex complex3 = complex1.I.multiply(382);
      complex0.nthRoot(1459);
      Complex complex4 = complex0.multiply(complex1);
      complex3.sqrt1z();
      // Undeclared exception!
      complex4.nthRoot(3655);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.add((-1098.3919289899));
      Complex complex3 = complex2.subtract(complex1);
      complex1.NaN.sin();
      complex1.equals(complex0);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ZERO.negate();
      complex4.I.cosh();
      Complex complex6 = complex5.ZERO.tan();
      complex6.I.log();
      complex5.INF.hashCode();
      Complex complex7 = complex3.NaN.pow(complex4);
      complex7.ONE.subtract((-1098.3919289899));
      complex7.ONE.sin();
      complex0.add(complex1);
      complex3.subtract(1.5430806348152437);
      complex1.subtract(163.23);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      complex1.I.add(2918.65138060142);
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex0.ONE.pow(2918.65138060142);
      Complex complex6 = complex0.exp();
      complex2.nthRoot(2330);
      complex6.abs();
      Complex complex7 = complex6.conjugate();
      complex0.divide(1783.44109);
      Complex complex8 = complex0.sinh();
      complex4.sin();
      Complex complex9 = complex2.acos();
      Object object0 = complex7.readResolve();
      Complex complex10 = Complex.ONE;
      complex10.equals(object0);
      Complex.valueOf(2.0);
      Complex.valueOf((-3983.78631), (-3983.78631));
      complex5.log();
      complex9.tan();
      complex8.getField();
      complex5.sin();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ZERO.atan();
      complex3.multiply(complex1);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ZERO.pow(complex3);
      Complex complex5 = complex0.I.sqrt();
      complex5.abs();
      complex1.abs();
      Complex complex6 = complex0.ONE.conjugate();
      Complex complex7 = complex6.ZERO.divide(3.1184473002226595E-10);
      complex6.sinh();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex0.acos();
      complex9.ONE.cos();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex0.INF.sinh();
      Complex.valueOf((-2.0821912536551675E-8));
      Complex complex10 = Complex.valueOf(1.0, (-2.0821912536551675E-8));
      complex1.log();
      complex8.tan();
      complex6.getField();
      complex0.sin();
      complex10.asin();
      complex5.reciprocal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.negate();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = Complex.valueOf(0.0, 1811.5);
      Complex complex7 = Complex.ZERO;
      complex7.pow(complex6);
      Complex complex8 = complex3.sqrt();
      complex3.abs();
      complex5.abs();
      Complex complex9 = complex2.conjugate();
      complex0.divide(Double.NaN);
      complex9.sinh();
      complex8.sin();
      Complex complex10 = new Complex(Double.NaN, 0.0);
      Complex complex11 = complex10.acos();
      complex10.cos();
      complex5.readResolve();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex10.equals(complex12);
      Complex complex13 = Complex.valueOf(3.1184473002226595E-10);
      Complex.valueOf(1.0, (-1695.0768352234));
      complex1.log();
      complex1.tan();
      Complex complex14 = Complex.NaN;
      complex14.getField();
      complex13.sin();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.INF;
      complex0.divide((-1030.985013));
      complex2.INF.exp();
      complex2.I.nthRoot(3685);
      complex2.atan();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex4.reciprocal();
      complex4.log();
      Complex complex6 = complex4.sinh();
      complex6.I.tan();
      complex5.toString();
      complex4.reciprocal();
      complex5.getField();
      complex2.exp();
      Complex.valueOf(2.0299429893493652);
      complex5.divide((-1030.985013));
      complex0.tanh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.455505956692757);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add((-326.96754));
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex1.pow(1011.21483215421);
      complex0.exp();
      complex2.nthRoot(2330);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex3.sqrt();
      complex5.abs();
      complex1.abs();
      Complex complex8 = complex3.conjugate();
      complex8.sinh();
      Complex complex9 = Complex.ONE;
      complex9.sin();
      Complex complex10 = Complex.NaN;
      complex1.acos();
      Complex complex11 = complex1.cos();
      Object object0 = complex6.readResolve();
      Complex complex12 = Complex.ZERO;
      complex4.equals(object0);
      Complex.valueOf(1.5702063831043163);
      complex1.conjugate();
      Complex complex13 = new Complex(2330);
      complex11.abs();
      complex1.add(complex4);
      complex7.pow((-655.0));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.62074));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply((-1045.62074));
      complex0.INF.getField();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex2.cosh();
      complex2.abs();
      complex3.hashCode();
      complex3.reciprocal();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex5.multiply(794);
      complex0.pow(0.0);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = Complex.ZERO;
      complex1.I.add(2918.65138060142);
      Complex complex3 = complex1.I.sin();
      complex3.I.subtract(complex2);
      complex0.ONE.pow(2918.65138060142);
      Complex complex4 = complex0.exp();
      complex2.nthRoot(2330);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex2.sqrt();
      complex5.abs();
      complex3.abs();
      complex2.conjugate();
      complex1.sinh();
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.NaN;
      complex8.acos();
      complex7.cos();
      complex0.readResolve();
      Complex complex9 = Complex.ZERO;
      complex6.ONE.divide(1.0);
      complex9.equals("");
      Complex.valueOf(1.5702063831043163);
      complex2.conjugate();
      Complex complex10 = new Complex(1.1752011936438014);
      complex10.abs();
      Complex complex11 = complex6.add(complex10);
      Complex complex12 = Complex.ONE;
      complex11.multiply(1357);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1811.5));
      Complex complex1 = complex0.INF.reciprocal();
      complex1.INF.cos();
      complex0.INF.toString();
      Complex complex2 = Complex.valueOf((-1811.5), 7.196001627772714E7);
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.equals(complex3);
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex0.NaN.subtract(complex2);
      Complex complex6 = complex1.NaN.add(complex0);
      Complex complex7 = complex5.ONE.cos();
      Complex complex8 = complex1.reciprocal();
      complex8.NaN.negate();
      complex0.getField();
      complex2.toString();
      complex8.getField();
      Complex complex9 = complex8.multiply(complex7);
      Complex complex10 = complex3.add(1.9888195459082551E-274);
      complex10.createComplex((-1971.789156206871), 1980.4618518);
      complex1.getField();
      Complex complex11 = complex6.tanh();
      complex10.createComplex(1.0, (-0.6905817003766437));
      complex10.readResolve();
      Object object0 = new Object();
      Complex complex12 = new Complex((-1811.5), (-3785.9429));
      complex2.equals(complex12);
      complex9.add(complex11);
      complex12.hashCode();
      complex4.conjugate();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex2 = complex0.tanh();
      complex1.sqrt1z();
      Complex complex3 = complex0.divide((-1030.985013));
      complex2.INF.exp();
      complex2.I.nthRoot(3685);
      complex3.getField();
      Complex complex4 = complex1.multiply((-1030.985013));
      complex4.INF.hashCode();
      Complex complex5 = complex2.reciprocal();
      complex5.pow(complex4);
      Complex complex6 = complex2.add(5607.900406);
      complex1.abs();
      complex1.readResolve();
      complex0.pow(complex2);
      complex1.multiply(complex5);
      complex4.add((-1030.985013));
      complex6.hashCode();
      complex0.getImaginary();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.sin();
      complex3.add((-1695.0768352234));
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex0.ONE.pow(2918.65138060142);
      Complex complex6 = complex0.exp();
      complex2.nthRoot(2330);
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex1.subtract(3937.148);
      complex8.NaN.atan();
      complex4.hashCode();
      complex9.sin();
      complex8.conjugate();
      Complex complex10 = complex7.sinh();
      complex10.INF.cos();
      Complex complex11 = Complex.NaN;
      complex10.isInfinite();
      Complex complex12 = Complex.INF;
      complex6.abs();
      Complex complex13 = new Complex(3937.148, Double.NaN);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      complex0.NaN.negate();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.ZERO.pow(complex2);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.subtract(0.0);
      Complex complex8 = complex7.add((-1.0));
      complex1.abs();
      complex8.readResolve();
      Complex complex9 = complex0.pow(complex3);
      complex5.multiply(complex6);
      Complex complex10 = complex3.add((-1.0));
      Complex complex11 = complex9.createComplex(8.252116273466952E112, Double.NaN);
      complex9.getField();
      complex10.tanh();
      complex11.createComplex((-1194.7531605213474), 0.0);
      complex9.readResolve();
      Object object0 = new Object();
      complex5.equals(object0);
      complex3.add(complex10);
      complex6.hashCode();
      complex5.conjugate();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.multiply(complex2);
      Complex.valueOf((-5.946190852360168E-8), 2522.136903);
      Complex complex4 = complex1.pow(complex3);
      complex2.sqrt();
      complex1.abs();
      complex3.abs();
      complex1.conjugate();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex3.sin();
      Complex complex9 = Complex.valueOf(2.0, 0.41421356237309515);
      Complex complex10 = complex9.acos();
      complex7.cos();
      complex8.readResolve();
      complex4.equals(complex5);
      Complex.valueOf(3394.4251624577796);
      Complex complex11 = Complex.valueOf(Double.NaN, (-783.884828661));
      complex8.log();
      complex11.tan();
      complex10.getField();
      complex4.sin();
      Complex complex12 = Complex.NaN;
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex.valueOf((-2425.158), (-2425.158));
      Complex complex0 = Complex.valueOf((-2425.158));
      Complex complex1 = Complex.valueOf((-1248.657));
      Complex complex2 = complex1.sinh();
      complex2.getArgument();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.sqrt1z();
      complex1.getField();
      Complex complex5 = complex3.multiply(complex2);
      complex1.createComplex(Double.NaN, 0.0);
      complex5.tanh();
      complex5.add(3428.0463876);
      Complex complex6 = complex2.add((-1410.34999394));
      complex3.sinh();
      complex6.sinh();
      Complex complex7 = complex4.divide((-2425.158));
      complex1.getField();
      complex5.isInfinite();
      complex7.createComplex(Double.POSITIVE_INFINITY, (-1248.657));
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex1.atan();
      complex2.NaN.tan();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex1.divide(complex3);
      complex3.abs();
      Complex complex5 = complex1.asin();
      complex1.getField();
      complex0.acos();
      Complex complex6 = new Complex(Double.NaN);
      complex4.ONE.sqrt1z();
      complex6.pow((-2480.317643299));
      complex2.conjugate();
      complex5.sinh();
      Complex complex7 = complex2.reciprocal();
      complex4.getImaginary();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex0.I.asin();
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex3.sqrt1z();
      complex3.abs();
      complex1.asin();
      complex4.getField();
      complex0.acos();
      Complex complex5 = complex4.pow(2268.3);
      complex2.conjugate();
      Complex complex6 = new Complex(1.8011719796199461, 1.8011719796199461);
      complex5.reciprocal();
      complex3.getImaginary();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.sqrt1z();
      complex1.INF.toString();
      complex2.acos();
      Complex complex6 = complex2.I.tan();
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex0.divide(complex2);
      complex2.tan();
      complex8.multiply(1509);
      Complex.valueOf((double) 1509);
      Complex.valueOf(0.0);
      complex8.sinh();
      complex8.ZERO.getArgument();
      Complex complex9 = Complex.ONE;
      complex7.sqrt1z();
      complex9.NaN.getField();
      Complex complex10 = complex8.multiply(complex9);
      complex10.ZERO.createComplex(0.0, 0.0);
      complex10.NaN.tanh();
      complex1.INF.add(0.0);
      Complex complex11 = complex3.add(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.NaN.sinh();
      complex12.ONE.add(696.4);
      complex11.NaN.sinh();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex5.getField();
      complex7.isInfinite();
      complex9.createComplex(0.0, 0.0);
      complex8.getReal();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.getField();
      Complex complex1 = complex0.INF.subtract((-1.718446464587963E12));
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex2.INF.exp();
      complex3.ZERO.sqrt1z();
      Complex complex4 = complex0.cosh();
      complex2.conjugate();
      Complex complex5 = complex1.pow(complex3);
      complex5.ONE.abs();
      complex5.getImaginary();
      complex4.acos();
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.298312765184807);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(4.298312765184807);
      complex2.ONE.subtract(4.298312765184807);
      complex0.ONE.readResolve();
      Complex complex3 = complex1.I.add(complex0);
      complex0.ONE.pow(complex1);
      Complex complex4 = complex3.ONE.add(complex1);
      complex4.abs();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex1.subtract(complex5);
      Complex complex7 = complex6.NaN.pow(1.2062301635742188);
      complex7.nthRoot(2329);
      complex5.cosh();
      complex4.add(4404.90668839);
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.I.subtract(complex2);
      complex0.ONE.pow(2918.65138060142);
      Complex complex5 = complex0.exp();
      complex2.nthRoot(2330);
      complex5.ZERO.sin();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex3.subtract((-1695.0768352234));
      Complex complex8 = complex2.add((-1695.0768352234));
      complex0.abs();
      complex1.readResolve();
      Complex complex9 = complex6.pow(complex5);
      Complex complex10 = new Complex(2918.65138060142);
      complex8.add(1.0);
      Complex complex11 = complex8.createComplex((-360.33044652), 1346.771841);
      complex8.getField();
      complex7.tanh();
      Complex complex12 = complex4.createComplex(6.283185307179586, 20.0);
      complex11.readResolve();
      complex8.equals(complex9);
      complex10.add(complex8);
      complex2.hashCode();
      complex12.conjugate();
      complex12.asin();
      complex10.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.NaN.getArgument();
      Complex complex3 = Complex.ZERO;
      complex2.ZERO.getField();
      complex2.ONE.acos();
      complex1.ONE.pow(0.0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.ONE.sinh();
      complex5.ZERO.reciprocal();
      complex1.abs();
      complex1.abs();
      complex0.sinh();
      complex0.getArgument();
      Complex.valueOf(Double.NaN);
      complex4.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex0.I.asin();
      Complex complex3 = complex1.I.acos();
      Complex complex4 = complex3.sqrt1z();
      complex1.INF.toString();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex2.I.tan();
      Complex complex7 = complex6.add(complex4);
      Complex complex8 = complex0.divide(complex2);
      complex2.tan();
      Complex complex9 = complex8.multiply(1509);
      Complex complex10 = Complex.valueOf((double) 1509);
      Complex complex11 = complex10.conjugate();
      complex11.divide(0.38109784554181547);
      Complex complex12 = complex5.sinh();
      complex7.sin();
      Complex complex13 = complex6.acos();
      complex12.cos();
      complex9.readResolve();
      complex5.equals("(Infinity, Infinity)");
      Complex.valueOf(0.38109784554181547);
      complex7.conjugate();
      complex13.log();
      Complex complex14 = complex0.tan();
      complex0.getField();
      complex14.sin();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.ZERO.pow(complex3);
      Complex complex7 = new Complex(0.0);
      complex2.acos();
      Complex complex8 = new Complex(0.0);
      complex6.conjugate();
      complex8.sinh();
      complex4.reciprocal();
      complex0.isInfinite();
      complex5.abs();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.atan();
      complex2.multiply(complex0);
      Complex complex3 = Complex.valueOf(2.4611679969129262E-8, 843.8771516);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.pow(complex5);
      complex6.sqrt();
      complex3.abs();
      Complex complex7 = Complex.I;
      complex7.abs();
      Complex complex8 = complex4.conjugate();
      complex3.divide(0.0);
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex9.sin();
      complex5.acos();
      complex10.cos();
      complex1.readResolve();
      Complex complex11 = Complex.I;
      complex8.equals(complex11);
      Complex.valueOf((-1030.985013));
      Complex complex12 = complex3.conjugate();
      complex0.log();
      complex10.tan();
      complex7.getField();
      complex12.sin();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4159250748007588);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(0.4159250748007588);
      Complex complex3 = complex2.tanh();
      complex3.NaN.abs();
      complex0.multiply((-2224));
      Complex.valueOf((double) (-2224));
      complex2.readResolve();
      Complex complex4 = complex0.asin();
      complex2.isInfinite();
      complex0.ZERO.cos();
      Complex complex5 = complex4.INF.multiply(complex1);
      complex5.I.sinh();
      Complex complex6 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex6.hashCode();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.INF.subtract(complex7);
      Complex complex9 = Complex.I;
      complex8.NaN.add(complex9);
      complex6.NaN.log();
      complex2.getReal();
      Complex complex10 = complex6.acos();
      complex10.getField();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ZERO.atan();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex3.subtract(0.0);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex4.reciprocal();
      complex4.exp();
      complex6.sqrt1z();
      complex2.cosh();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = new Complex(0.0, 6339114.417600001);
      Complex complex10 = Complex.valueOf(1.0368403169781264E257);
      Complex complex11 = complex9.pow(complex10);
      complex8.log();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.getField();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.pow(complex0);
      complex0.abs();
      complex2.abs();
      Complex complex3 = complex2.conjugate();
      complex0.divide(Double.NaN);
      complex0.ONE.cos();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex4.cos();
      complex2.readResolve();
      complex0.equals(complex3);
      Complex.valueOf(20.0);
      complex5.conjugate();
      complex2.log();
      complex3.tan();
      Complex complex7 = complex6.sin();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex2 = complex0.tanh();
      complex1.sqrt1z();
      Complex complex3 = complex0.divide((-1030.985013));
      complex2.INF.exp();
      complex2.I.nthRoot(3685);
      complex3.getField();
      Complex complex4 = complex1.multiply((-1030.985013));
      complex4.INF.hashCode();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.pow(complex4);
      complex6.hashCode();
      complex2.sin();
      complex4.conjugate();
      Complex complex7 = complex6.sinh();
      complex4.reciprocal();
      Complex complex8 = Complex.NaN;
      complex8.isInfinite();
      Complex complex9 = Complex.INF;
      complex9.abs();
      complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-1.2998975819628988E-8));
      complex0.hashCode();
      complex0.INF.divide((-1.2998975819628988E-8));
      complex0.ZERO.divide(332.54331199968);
      Complex complex1 = complex0.atan();
      complex1.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(978.7237);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.tanh();
      complex2.NaN.conjugate();
      complex2.INF.divide(978.7237);
      complex1.INF.hashCode();
      Complex complex4 = Complex.valueOf(978.7237);
      Complex complex5 = complex0.subtract((-831.0));
      complex4.ONE.log();
      Complex complex6 = complex4.cos();
      complex5.sqrt();
      Complex complex7 = complex5.NaN.atan();
      complex7.negate();
      complex5.NaN.abs();
      complex1.I.getField();
      Complex complex8 = complex0.log();
      Complex complex9 = complex8.ZERO.subtract(complex1);
      complex9.getArgument();
      complex4.getArgument();
      complex3.getArgument();
      Complex complex10 = complex2.atan();
      complex2.acos();
      complex10.sin();
      complex0.getReal();
      complex6.sin();
      complex7.atan();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1192.24, (-2332.730593632));
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.ONE.asin();
      complex1.NaN.nthRoot(1);
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex3.ONE.divide((-2291.0));
      complex0.getImaginary();
      Complex complex5 = complex0.sqrt();
      complex1.readResolve();
      complex5.nthRoot(1289);
      complex0.cos();
      complex2.ONE.toString();
      complex4.acos();
      complex2.multiply((-586.7556));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.NaN.readResolve();
      Complex complex2 = complex1.NaN.cosh();
      complex0.ZERO.cos();
      Complex complex3 = complex1.ONE.reciprocal();
      complex1.getField();
      Complex complex4 = complex2.sqrt1z();
      complex4.NaN.abs();
      complex4.abs();
      complex4.ONE.divide(complex0);
      complex1.hashCode();
      complex0.INF.acos();
      complex2.NaN.sqrt();
      complex3.sqrt();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-978));
      Complex complex2 = complex0.ONE.conjugate();
      complex2.NaN.negate();
      Complex complex3 = complex0.INF.atan();
      complex1.NaN.multiply((double) (-978));
      complex0.isNaN();
      Complex complex4 = complex0.INF.conjugate();
      complex4.multiply(2.3238237048117092E-8);
      complex0.ZERO.sqrt1z();
      Complex complex5 = Complex.valueOf((double) (-978));
      complex5.ONE.sqrt1z();
      complex1.getReal();
      Complex.valueOf((-1377.0));
      Complex complex6 = complex1.add(1.0);
      Complex complex7 = complex6.multiply(-0.0);
      complex7.ONE.subtract(2.3238237048117092E-8);
      complex7.NaN.multiply((-31.69));
      Complex complex8 = complex6.acos();
      complex8.ONE.subtract(1.0);
      Complex complex9 = complex8.NaN.add(complex3);
      complex6.isInfinite();
      complex9.exp();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1160.0168595363696, 1160.0168595363696);
      Complex complex2 = complex1.INF.sqrt();
      complex1.ZERO.readResolve();
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex1.ZERO.createComplex(0.0, 1160.0168595363696);
      complex3.INF.multiply(0.0);
      Complex complex4 = complex2.ZERO.subtract(1160.0168595363696);
      Complex complex5 = complex2.INF.sin();
      complex5.INF.getField();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex1.conjugate();
      complex7.negate();
      complex8.ZERO.readResolve();
      complex6.equals("0HI(c0gVo");
      complex4.isNaN();
      complex0.getField();
      Complex complex9 = complex8.pow(4168.801957);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex0.atan();
      Complex complex12 = Complex.NaN;
      complex10.add(complex12);
      Object object0 = complex7.readResolve();
      complex11.equals(object0);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = Complex.NaN;
      complex1.pow(complex2);
      complex1.INF.sqrt1z();
      complex0.getField();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex0.pow(complex3);
      double double1 = 1844.526461;
      complex0.INF.negate();
      Complex complex5 = complex4.add(1844.526461);
      complex4.isInfinite();
      complex0.sqrt1z();
      Complex complex6 = complex2.cos();
      complex6.NaN.divide(0.0);
      Complex complex7 = complex5.tan();
      try { 
        complex7.INF.nthRoot((-2526));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,526
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4611679969129262E-8);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf(2.4611679969129262E-8);
      complex2.tanh();
      Complex complex3 = complex0.multiply((-2224));
      complex3.ONE.subtract(669.833639253);
      complex2.readResolve();
      Complex complex4 = complex0.asin();
      complex2.isInfinite();
      Complex complex5 = complex0.ZERO.cos();
      Complex complex6 = complex4.INF.multiply(complex1);
      Complex complex7 = complex6.I.sinh();
      Complex complex8 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex8.hashCode();
      Complex complex9 = Complex.valueOf(1.0);
      Complex complex10 = complex8.sin();
      complex6.INF.subtract(complex10);
      complex8.NaN.log();
      complex2.getReal();
      Complex complex11 = complex8.acos();
      complex11.getField();
      complex0.NaN.divide(0.0);
      complex9.multiply(complex7);
      complex5.abs();
      complex2.abs();
      complex1.sinh();
      complex2.getArgument();
      Complex.valueOf(1537.8017820662);
      complex8.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex0.multiply(0.0);
      complex2.ZERO.multiply(1.0);
      complex2.INF.exp();
      complex1.exp();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sin();
      Complex.valueOf((-315.1422));
      Complex complex2 = Complex.valueOf((-315.1422));
      Complex complex3 = complex2.ZERO.cosh();
      complex2.NaN.readResolve();
      complex1.hashCode();
      complex0.getImaginary();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1695.0768352234));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex0.ONE.pow(2918.65138060142);
      Complex complex6 = complex0.exp();
      complex2.nthRoot(2330);
      Complex complex7 = complex6.ZERO.sin();
      complex0.sqrt1z();
      complex1.subtract(3937.148);
      complex0.INF.add(Double.NaN);
      complex6.abs();
      complex2.readResolve();
      Complex complex8 = complex5.pow(complex7);
      complex1.ZERO.multiply(complex6);
      complex0.add(8.252116273466952E112);
      complex7.createComplex(2918.65138060142, 3000.38288);
      complex2.getField();
      complex3.tanh();
      complex4.ZERO.createComplex(3937.148, 6.283185307179586);
      Object object0 = complex5.readResolve();
      complex5.equals(object0);
      complex4.add(complex8);
      complex7.hashCode();
      complex0.conjugate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-3583.83832));
      Complex complex1 = new Complex(1594.79301792582, 1.5260756679495707E107);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(191.0, 191.0);
      Complex complex1 = complex0.NaN.pow(191.0);
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex1.I.getArgument();
      Complex complex3 = complex0.divide(191.0);
      complex2.sqrt1z();
      complex3.multiply(1134);
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.multiply((-2604));
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.045546633850141E211);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex4.NaN.pow(complex3);
      complex4.NaN.divide(complex3);
      complex4.INF.toString();
      Complex complex6 = Complex.valueOf((double) 1700, 1019.594320382226);
      Complex complex7 = complex2.ZERO.multiply(complex6);
      complex7.tanh();
      complex1.NaN.nthRoot(1700);
      Complex complex8 = complex0.atan();
      complex0.getReal();
      Complex complex9 = complex5.divide(complex8);
      complex9.add(1019.594320382226);
      complex3.add(complex0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-1313));
      complex1.NaN.getField();
      Complex.valueOf(0.5151132345199585, 0.0);
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.negate();
      complex1.tan();
      complex0.getReal();
      Complex complex3 = complex2.divide((double) (-1313));
      complex0.ZERO.createComplex(0.0, 0.28229647874832153);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.sqrt1z();
      complex1.exp();
      complex4.atan();
      Complex complex6 = Complex.ONE;
      complex5.pow(complex6);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      complex0.getField();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.subtract((-1.718446464587963E12));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.reciprocal();
      Complex complex5 = complex4.INF.exp();
      complex5.ZERO.sqrt1z();
      complex3.cosh();
      complex4.conjugate();
      Complex complex6 = complex2.pow(complex5);
      complex5.log();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1045.62074));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex1.multiply((-189.17527737));
      complex0.INF.getField();
      Complex.valueOf(0.0, 0.0);
      complex3.cosh();
      complex3.abs();
      Complex complex4 = complex2.sinh();
      complex1.tan();
      Complex complex5 = complex4.add(complex3);
      complex2.getArgument();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.NaN.sqrt1z();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.conjugate();
      complex1.INF.hashCode();
      complex4.getArgument();
      Complex complex5 = complex0.INF.subtract(0.0);
      complex4.createComplex(2550.46094, (-1615.4));
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex3.tan();
      complex7.sqrt();
      Complex.valueOf(0.0);
      complex1.tan();
      Complex complex8 = complex2.tan();
      complex8.INF.createComplex(0.0, 1.3373196561281372E-150);
      complex6.sinh();
      complex6.divide(complex5);
      try { 
        complex1.nthRoot((-2009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,009
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex1.NaN.sinh();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex0.cos();
      complex4.NaN.multiply(complex0);
      Complex complex5 = complex2.NaN.negate();
      Complex complex6 = complex5.cos();
      complex2.multiply(1);
      complex5.readResolve();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex1.ZERO.add(327.0);
      complex7.divide((double) 1);
      complex3.reciprocal();
      complex7.tanh();
      Complex complex9 = complex5.add(complex6);
      complex7.getReal();
      Complex complex10 = complex1.multiply(complex7);
      complex10.ZERO.subtract(complex9);
      complex8.pow(complex0);
      complex10.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3057.53), 109.957427427);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.NaN.sin();
      complex0.exp();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex0.ONE.multiply(complex1);
      complex4.I.abs();
      complex0.getArgument();
      complex2.isInfinite();
      complex3.multiply(0.0);
      complex1.INF.getField();
      complex0.multiply(3760);
      complex1.reciprocal();
      complex1.nthRoot(3760);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2792.547892775182, 1182.37);
      complex0.getField();
      Complex complex1 = Complex.I;
      try { 
        complex1.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-1303.013), (-1303.013));
      Complex complex1 = complex0.cos();
      complex1.NaN.getField();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.sinh();
      complex1.ZERO.pow((-1303.013));
      Complex complex4 = complex2.NaN.add((-1303.013));
      complex4.ZERO.atan();
      complex4.NaN.exp();
      complex2.hashCode();
      complex2.multiply(0);
      complex3.INF.negate();
      complex3.subtract((-1303.013));
      Complex.valueOf((-1303.013), (-1303.013));
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex2.INF.asin();
      complex2.ZERO.getField();
      complex2.ONE.acos();
      Complex complex3 = complex1.ONE.pow(0.0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex3.reciprocal();
      complex5.isInfinite();
      complex5.abs();
      complex6.add(complex1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.NaN.multiply(1);
      complex1.sin();
      complex1.ONE.multiply(0.0);
      complex0.NaN.divide(complex1);
      complex0.toString();
      complex0.multiply((-961));
      Complex complex2 = complex1.atan();
      complex2.I.log();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.sqrt1z();
      complex1.INF.toString();
      complex2.acos();
      Complex complex6 = complex2.I.tan();
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex0.divide(complex2);
      complex2.tan();
      complex8.multiply(1509);
      Complex.valueOf((double) 1509);
      Complex.valueOf(0.0);
      complex8.sinh();
      complex8.ZERO.getArgument();
      Complex complex9 = Complex.ONE;
      complex7.sqrt1z();
      complex9.NaN.getField();
      Complex complex10 = complex8.multiply(complex9);
      complex10.ZERO.createComplex(0.0, 0.0);
      complex10.NaN.tanh();
      complex1.INF.add(0.0);
      Complex complex11 = complex3.add(Double.POSITIVE_INFINITY);
      complex11.NaN.sinh();
      complex11.NaN.sinh();
      complex4.divide(Double.POSITIVE_INFINITY);
      complex5.getField();
      complex7.isInfinite();
      complex9.createComplex(0.0, 0.0);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(1925.59480786);
      Complex complex1 = complex0.asin();
      complex1.NaN.acos();
      complex1.I.cos();
      complex0.NaN.multiply(1);
      complex0.readResolve();
      complex1.equals(complex0);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(1.43695591408832E-9, 587.59892);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.acos();
      complex1.add(complex2);
      Complex complex4 = Complex.valueOf(0.0, 587.59892);
      complex1.abs();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex3.tan();
      complex2.I.divide((-4.35799392139009E85));
      Complex complex7 = complex5.log();
      complex7.ZERO.sqrt1z();
      complex4.toString();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3394.4251624577796, 2.2116799789922265E-191);
      complex0.INF.subtract(0.0);
      Complex complex1 = complex0.createComplex(0.0, 2.2116799789922265E-191);
      complex1.isNaN();
      complex0.getField();
      complex0.isInfinite();
      complex0.multiply(989.95104);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.INF.pow(5308.3);
      complex0.NaN.tanh();
      Complex complex3 = complex0.asin();
      complex0.multiply(complex2);
      complex3.add(complex2);
      complex1.multiply((-1));
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 757.014967690868);
      Complex complex1 = complex0.INF.tanh();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex2.INF.atan();
      complex0.ZERO.readResolve();
      Complex complex4 = complex2.NaN.cos();
      complex0.toString();
      Complex.valueOf(2.2951597845188004E-8, 0.0);
      complex3.conjugate();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = (-179.08918836613356);
      double double1 = 0.0;
      Complex complex0 = Complex.valueOf((-179.08918836613356), 0.0);
      Complex complex1 = complex0.INF.sin();
      complex0.toString();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.ONE.sqrt1z();
      complex1.isNaN();
      complex2.sqrt1z();
      complex4.ZERO.negate();
      try { 
        complex3.nthRoot((-55));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -55
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1368.604262));
      Complex complex1 = Complex.valueOf(0.0, (-1368.604262));
      complex1.ONE.abs();
      complex0.getField();
      Complex complex2 = complex1.add(1.0);
      complex2.readResolve();
      complex1.hashCode();
      complex1.getField();
      complex2.getImaginary();
      complex0.sinh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.ZERO.multiply((-2070.4));
      complex4.add(0.0);
      complex1.acos();
      complex2.toString();
      complex2.getField();
      complex2.multiply(2.337202285991116E-7);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.pow((-1.0));
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex0.I.cosh();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.multiply((-215));
      Complex complex7 = complex6.ONE.cos();
      complex6.I.readResolve();
      Complex complex8 = complex4.ZERO.exp();
      Complex complex9 = complex7.ONE.add((double) (-215));
      complex9.INF.multiply(1.387007236480713);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex10 = complex5.add(complex8);
      Complex complex11 = complex4.divide(complex7);
      complex11.ONE.multiply(complex7);
      complex3.tan();
      complex7.cosh();
      complex10.toString();
      complex9.sinh();
      complex8.INF.readResolve();
      complex2.ONE.negate();
      complex8.getImaginary();
      try { 
        complex5.nthRoot((-1401));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,401
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex1.ZERO.atan();
      complex3.multiply(complex1);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ZERO.pow(complex3);
      Complex complex5 = complex0.I.sqrt();
      complex5.abs();
      complex1.abs();
      Complex complex6 = complex0.ONE.conjugate();
      Complex complex7 = complex6.ZERO.divide(3.1184473002226595E-10);
      complex6.sinh();
      Complex complex8 = complex7.NaN.sin();
      Complex complex9 = complex0.acos();
      complex9.ONE.cos();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      Complex.valueOf((-2.0821912536551675E-8));
      Complex complex10 = complex5.conjugate();
      complex1.log();
      complex8.tan();
      complex6.getField();
      complex0.sin();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      assertFalse(boolean0);
      
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.divide((-1030.985013));
      complex2.INF.exp();
      List<Complex> list0 = complex2.I.nthRoot(3685);
      assertEquals(3685, list0.size());
      
      complex4.getField();
      Complex complex5 = complex1.multiply((-1030.985013));
      complex5.INF.hashCode();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.pow(complex5);
      complex7.hashCode();
      assertEquals(1.497825459522045E107, complex7.getImaginary(), 0.01);
      
      complex2.sin();
      Complex complex8 = complex3.divide(complex6);
      complex5.getReal();
      Complex complex9 = complex8.acos();
      assertEquals((-1.0848449536661606), complex9.getImaginary(), 0.01);
      
      complex5.getArgument();
      Complex complex10 = complex2.divide(complex8);
      String string0 = complex10.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      complex3.add((-1035.0));
      Complex complex11 = complex0.subtract(complex2);
      Complex complex12 = complex4.asin();
      assertEquals((-9.69946052165336E-4), complex12.getImaginary(), 0.01);
      
      Complex.valueOf((-249.44672273009));
      double double0 = complex11.abs();
      assertEquals(0.5574077246549021, double0, 0.01);
  }
}
