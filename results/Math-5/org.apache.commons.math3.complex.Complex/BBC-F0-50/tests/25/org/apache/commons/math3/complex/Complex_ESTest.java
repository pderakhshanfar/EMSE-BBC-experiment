/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:20:08 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = Complex.valueOf(2.075769060297565E143, 2.075769060297565E143);
      Complex complex5 = complex1.atan();
      Complex complex6 = Complex.INF;
      complex1.multiply((-873));
      complex5.divide(complex6);
      Complex complex7 = complex5.divide((double) 87);
      complex7.reciprocal();
      Complex.valueOf((-3225.35), 5.778918910167162E-17);
      complex6.reciprocal();
      complex3.nthRoot(87);
      Complex complex8 = Complex.NaN;
      complex4.tan();
      complex4.asin();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(6.562319473965767E278, (-655.977));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = new Complex(439.2339, 1306.7);
      complex2.INF.divide(6.283185307179586);
      complex1.divide(complex2);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(2.1775261204E-314);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.ONE;
      complex4.pow(2.1775261204E-314);
      complex2.atan();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf(2.1775261204E-314, 2.1775261204E-314);
      complex6.nthRoot(258);
      complex0.toString();
      complex2.nthRoot(258);
      Complex complex7 = Complex.valueOf((double) 258, 948.6733660005674);
      complex4.nthRoot(258);
      complex7.pow((-66.807627564052));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(87, Double.POSITIVE_INFINITY);
      complex3.multiply(87);
      complex1.tan();
      Complex complex4 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.divide((double) 87);
      complex5.ZERO.nthRoot(834);
      Complex.valueOf((-833.32), (-898.8247623));
      Complex.valueOf((-898.8247623), (double) 87);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.abs();
      Complex complex2 = new Complex((-67.84983122403526), Double.NaN);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.pow((-2850.0964244));
      Complex complex6 = Complex.valueOf((-2850.0964244), Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.divide(complex4);
      complex6.multiply(complex5);
      complex4.multiply(complex7);
      complex3.atan();
      complex1.pow(1145.6953064689758);
      Complex complex8 = Complex.valueOf((-1265.976933992));
      complex8.tan();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(2909);
      Complex complex1 = new Complex(20.0, 2909);
      Complex complex2 = new Complex(20.0);
      Complex complex3 = Complex.valueOf(20.0);
      complex3.multiply(complex0);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex0.pow(3.984249446699771E-4);
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex0.multiply(complex4);
      Complex complex8 = complex4.multiply(complex3);
      complex8.ONE.negate();
      complex6.pow(3.984249446699771E-4);
      Complex complex9 = Complex.INF;
      complex3.atan();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex7.sin();
      complex11.abs();
      Complex complex12 = new Complex((-661.760548242477));
      complex12.atan();
      Complex complex13 = new Complex(1.5556202761449185);
      complex13.tan();
      Complex complex14 = complex4.sin();
      complex11.multiply(complex14);
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply((-3412.573052));
      Complex complex2 = complex0.sinh();
      complex2.INF.divide(complex1);
      complex0.ZERO.toString();
      complex1.getField();
      Complex.valueOf((-3412.573052));
      Complex complex3 = Complex.valueOf((-3412.573052), (-3412.573052));
      Complex complex4 = complex3.reciprocal();
      complex4.log();
      Complex complex5 = complex4.multiply(1610.11);
      Complex complex6 = complex3.atan();
      complex0.tan();
      complex3.multiply(884);
      Complex complex7 = Complex.ONE;
      complex7.isNaN();
      complex6.cos();
      try { 
        complex5.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.toString();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.atan();
      complex2.NaN.abs();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex0.multiply(687.8);
      complex4.ONE.abs();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex5.add(687.8);
      complex2.INF.acos();
      complex1.sqrt();
      Complex complex8 = complex7.multiply(complex3);
      complex3.ONE.abs();
      Complex complex9 = complex8.multiply(complex3);
      Complex complex10 = complex9.tan();
      Complex complex11 = complex10.subtract(complex3);
      complex10.sqrt();
      complex5.I.abs();
      complex11.cos();
      complex7.acos();
      complex2.cosh();
      complex6.pow(complex1);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.subtract(1970.3);
      Complex complex3 = complex0.log();
      complex3.NaN.atan();
      Complex complex4 = complex2.exp();
      complex4.abs();
      complex4.getField();
      Complex complex5 = complex0.subtract(1970.3);
      complex4.pow((-2497.5479389061));
      complex4.cosh();
      Complex.valueOf(3447.776, (-9.250975291734664E-9));
      Complex complex6 = complex1.atan();
      complex2.subtract((-1840.519036415));
      complex6.conjugate();
      complex5.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.0, 4.0);
      complex0.conjugate();
      Complex complex1 = complex0.pow((-3.3305763842862286E7));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.pow(884.660066288764);
      complex3.NaN.reciprocal();
      Complex complex4 = Complex.valueOf(4.0, 20.0);
      Complex complex5 = Complex.valueOf(558.07512343);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.log();
      complex1.sin();
      complex0.abs();
      Complex complex8 = Complex.I;
      complex7.I.multiply((-5204.76251861));
      complex4.tan();
      complex5.multiply(692);
      complex1.multiply(complex6);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.2930046425129, 2.0);
      complex0.cosh();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.conjugate();
      complex2.hashCode();
      Complex complex3 = complex0.subtract(2015.2930046425129);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex4.pow((-3.3305763842862286E7));
      complex0.divide(complex3);
      Complex complex7 = complex3.multiply(complex5);
      Complex complex8 = complex2.multiply(complex0);
      complex6.pow(2.0);
      Complex.valueOf((-3.3305763842862286E7), 558.07512343);
      Complex complex9 = Complex.valueOf((-3.3305763842862286E7));
      Complex complex10 = complex9.tan();
      complex5.log();
      Complex complex11 = complex9.sin();
      complex6.abs();
      Complex complex12 = Complex.I;
      complex7.tan();
      complex5.multiply(9);
      complex11.multiply(complex10);
      complex8.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.getField();
      Complex complex1 = new Complex((-1324.81451), (-1324.81451));
      Complex complex2 = complex0.pow(complex1);
      complex2.toString();
      complex1.isInfinite();
      Complex complex3 = complex1.createComplex((-603.401063859), (-5480.567));
      Complex complex4 = complex0.sinh();
      complex4.multiply((-2772));
      complex1.exp();
      complex4.divide(684.253);
      complex0.acos();
      complex3.subtract((-5480.567));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cosh();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.conjugate();
      complex2.hashCode();
      Complex complex3 = complex0.subtract(2015.2930046425129);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex4.pow((-3.3305763842862286E7));
      complex0.divide(complex3);
      Complex complex7 = complex3.multiply(complex5);
      complex2.multiply(complex0);
      complex6.pow(2.46908691624885);
      Complex complex8 = Complex.valueOf((-3.3305763842862286E7), 558.07512343);
      Complex complex9 = Complex.INF;
      complex9.tan();
      complex5.log();
      complex9.sin();
      complex6.abs();
      Complex complex10 = Complex.I;
      complex10.atan();
      complex7.tan();
      Complex complex11 = complex5.multiply(9);
      complex7.isNaN();
      complex3.cos();
      complex11.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(2.0);
      Complex complex2 = Complex.ZERO;
      complex2.hashCode();
      Complex complex3 = complex0.pow(1.1453864574432373);
      complex0.divide(complex2);
      complex1.multiply(complex2);
      complex2.multiply(complex0);
      complex2.pow(1.1453864574432373);
      Complex complex4 = Complex.valueOf((-20.0));
      complex3.tan();
      complex0.log();
      Complex complex5 = Complex.ONE;
      complex5.sin();
      complex5.atan();
      complex3.tan();
      Complex complex6 = complex4.negate();
      Complex.valueOf(4316.72733309, 2.0);
      complex1.tan();
      complex1.getArgument();
      Complex complex7 = complex6.asin();
      complex7.divide(2.0);
      complex4.tanh();
      Complex complex8 = Complex.ONE;
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 369);
      Complex complex1 = new Complex(369, (-4090.008009467));
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex1.pow(55.235882297465416);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.sin();
      Complex complex3 = new Complex((-1182.71), (-1182.71));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex.valueOf(2.0);
      complex0.exp();
      Complex complex2 = complex0.add((-177.14));
      Complex.valueOf(2.0, 1058.124658);
      complex1.subtract((-177.14));
      Complex complex3 = complex2.multiply((-1049));
      Complex complex4 = complex0.negate();
      complex4.divide(complex0);
      complex2.sinh();
      complex4.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex1.asin();
      complex2.ZERO.toString();
      Complex complex5 = complex0.NaN.multiply((-1467));
      complex5.tan();
      complex3.ZERO.getArgument();
      Complex complex6 = complex0.ZERO.reciprocal();
      Complex complex7 = complex0.add(1214.88409);
      Complex complex8 = complex7.NaN.multiply(5.86440876259637E-309);
      Complex complex9 = complex8.pow(1214.88409);
      complex4.sinh();
      complex9.subtract(complex6);
      Complex complex10 = Complex.NaN;
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.multiply((-1467));
      Complex complex2 = complex1.tan();
      complex2.getArgument();
      Complex complex3 = complex1.reciprocal();
      complex1.add(1451.768131564711);
      Complex complex4 = complex1.multiply(1451.768131564711);
      complex3.pow(8061.1720185700515);
      complex2.sinh();
      Complex complex5 = Complex.INF;
      complex4.multiply((-1467));
      complex3.nthRoot(1604);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2123.6));
      complex0.log();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      complex0.hashCode();
      Complex complex3 = complex0.subtract((-2123.6));
      complex0.hashCode();
      Complex complex4 = complex1.pow(1.1453864574432373);
      Complex complex5 = complex2.divide(complex4);
      complex3.multiply(complex1);
      Complex complex6 = complex2.multiply(complex0);
      Complex complex7 = complex1.pow((-2123.6));
      Complex.valueOf(2116.200545232361);
      Complex complex8 = complex1.tan();
      Complex complex9 = Complex.ONE;
      complex9.log();
      complex8.sin();
      complex5.atan();
      complex9.tan();
      Complex complex10 = Complex.valueOf(1497.5256082, (-0.21370707780737552));
      complex10.negate();
      Complex.valueOf(14.0, 2116.200545232361);
      complex3.tan();
      complex6.getArgument();
      complex1.asin();
      complex3.divide(Double.NaN);
      complex7.tanh();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1.0));
      complex0.INF.acos();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = new Complex(2.0, 2.0);
      Complex complex3 = complex1.I.subtract(complex2);
      Complex complex4 = complex1.INF.subtract((-2012.455423));
      Complex complex5 = complex4.ZERO.multiply((-1.0));
      Complex complex6 = complex1.ZERO.subtract((-1.0));
      Complex complex7 = complex1.I.subtract(complex0);
      Complex complex8 = complex3.NaN.cosh();
      Complex complex9 = complex2.NaN.multiply(complex6);
      Complex.valueOf(492.0);
      Complex complex10 = complex9.tan();
      complex0.log();
      complex3.sin();
      Complex complex11 = Complex.ZERO;
      complex11.abs();
      complex7.atan();
      Complex complex12 = complex11.tan();
      complex8.multiply(9);
      Complex complex13 = complex5.multiply((-638));
      complex13.ZERO.pow(complex10);
      complex4.sqrt1z();
      Complex complex14 = Complex.ONE;
      complex12.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.NaN;
      Object object0 = complex0.INF.readResolve();
      Complex complex3 = Complex.valueOf(742.8278, 742.8278);
      Complex complex4 = complex1.pow(complex2);
      complex3.ZERO.add(complex4);
      Complex complex5 = complex3.INF.divide(1145.6953064689758);
      complex5.I.hashCode();
      complex2.ONE.reciprocal();
      complex0.getImaginary();
      Complex complex6 = complex3.INF.cosh();
      Complex complex7 = complex5.createComplex(742.8278, 0.0);
      ((Complex) object0).NaN.divide(complex1);
      complex2.abs();
      complex7.equals(complex4);
      complex3.getField();
      complex0.sqrt1z();
      complex2.tan();
      complex6.multiply(0.0);
      Complex complex8 = complex7.acos();
      complex8.I.cos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.2930046425129, 2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.log();
      complex1.conjugate();
      Complex complex3 = Complex.valueOf(2015.2930046425129, 2.0);
      complex3.hashCode();
      Complex complex4 = complex0.subtract(2015.2930046425129);
      complex4.hashCode();
      Complex complex5 = complex2.pow(2.0);
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex1.multiply(complex3);
      complex6.multiply(complex7);
      Complex complex8 = Complex.I;
      complex8.pow(2.0);
      Complex.valueOf((-2081116.841664));
      Complex complex9 = Complex.valueOf(1.1453864574432373);
      complex9.tan();
      complex9.log();
      Complex complex10 = complex8.sin();
      Complex complex11 = new Complex(2808.0, 1497.5256082);
      complex11.atan();
      complex3.tan();
      complex9.negate();
      Complex.valueOf(2434.23841, 2015.2930046425129);
      complex4.tan();
      complex4.getArgument();
      complex6.asin();
      complex5.divide(1497.5256082);
      complex10.tanh();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(742.8278, 1145.6953064689758);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sqrt1z();
      complex1.readResolve();
      Complex complex3 = Complex.valueOf(1145.6953064689758, (-1312616.7352650403));
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex0.add(complex2);
      complex5.toString();
      complex5.divide((-1312616.7352650403));
      complex4.hashCode();
      Complex complex6 = complex4.add(742.8278);
      Complex complex7 = complex4.reciprocal();
      complex6.getImaginary();
      Complex complex8 = complex7.cosh();
      Complex complex9 = new Complex((-540.508));
      Complex complex10 = complex9.createComplex(0.0, 3533.481598795223);
      Complex complex11 = new Complex(0.4158278703689575, 1159.13053);
      complex3.divide(complex11);
      complex6.abs();
      complex10.equals(complex1);
      complex9.getField();
      complex8.sqrt1z();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.tan();
      complex4.multiply(0.4158278703689575);
      complex8.acos();
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.2930046425129, 2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.NaN.conjugate();
      complex1.ONE.hashCode();
      Complex complex4 = complex0.subtract(2.0);
      Complex complex5 = complex4.I.conjugate();
      complex5.ONE.hashCode();
      Complex complex6 = complex4.pow(1.1453864574432373);
      complex6.divide(complex5);
      Complex complex7 = complex5.NaN.multiply(complex6);
      Complex complex8 = Complex.NaN;
      complex8.tan();
      Complex complex9 = complex7.log();
      Complex complex10 = complex0.sin();
      complex8.abs();
      complex10.atan();
      Complex complex11 = complex9.tan();
      Complex complex12 = complex2.negate();
      complex12.asin();
      Complex.valueOf((-1518.69926144817), (-536.47579));
      complex0.tan();
      Complex complex13 = Complex.I;
      complex13.getArgument();
      Complex complex14 = complex1.asin();
      complex14.divide(2015.2930046425129);
      complex3.tanh();
      complex8.getArgument();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      complex0.INF.readResolve();
      Complex complex3 = Complex.valueOf(742.8278, 742.8278);
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex3.ZERO.add(complex4);
      complex2.toString();
      Complex complex6 = complex3.INF.divide(1145.6953064689758);
      complex6.I.hashCode();
      complex3.getArgument();
      Complex complex7 = complex1.reciprocal();
      complex2.negate();
      complex7.tanh();
      complex0.negate();
      Complex complex8 = complex1.subtract(1.2247224482958058E115);
      complex5.getImaginary();
      complex8.getField();
      Complex complex9 = Complex.valueOf(1.2247224482958058E115);
      complex9.getImaginary();
      Complex complex10 = Complex.INF;
      complex7.sqrt();
      // Undeclared exception!
      complex4.nthRoot(2045222520);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(1.643422227918695E-4, 1145.6953064689758);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex3.add(complex1);
      complex2.toString();
      Complex complex5 = complex0.divide(99.04990724328003);
      complex5.hashCode();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.add(2078.993476711);
      complex3.reciprocal();
      complex4.getImaginary();
      Complex complex8 = complex1.cosh();
      complex8.createComplex((-745.9457299546802), (-932.2378082394638));
      Complex complex9 = complex5.divide(complex3);
      complex8.abs();
      complex7.equals(complex4);
      complex0.getField();
      complex8.sqrt1z();
      complex8.tan();
      complex9.multiply((-1.0));
      complex1.acos();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sqrt();
      Complex.valueOf((-1859.717768), Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      complex4.getArgument();
      Complex complex5 = complex2.reciprocal();
      complex5.negate();
      complex5.tanh();
      Complex complex6 = complex0.negate();
      complex3.subtract((-273.364804137471));
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.getImaginary();
      complex7.getField();
      complex1.getImaginary();
      Complex.valueOf((-67.7456), 1.0);
      complex6.nthRoot(538);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 1145.6953064689758);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = (Complex)complex0.INF.readResolve();
      Complex complex3 = Complex.valueOf(1145.6953064689758, 1145.6953064689758);
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex3.ZERO.add(complex4);
      Complex complex6 = complex1.divide(1145.6953064689758);
      complex6.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.I;
      complex7.getField();
      Complex complex8 = Complex.NaN;
      complex2.getField();
      complex5.getReal();
      complex4.asin();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(867.384);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.I.sqrt1z();
      Complex.valueOf((-1648.78), (double) 2061);
      complex0.nthRoot(2061);
      Complex complex4 = complex0.reciprocal();
      complex4.INF.atan();
      Complex complex5 = complex2.NaN.createComplex(2.0, 2.0);
      Complex complex6 = complex3.pow((-4.952031310451961E63));
      complex6.INF.multiply((-1648.78));
      complex4.add(complex3);
      complex3.multiply(867.384);
      Complex complex7 = complex4.tan();
      Complex complex8 = Complex.valueOf(867.384, (-1534.3347566839846));
      complex2.nthRoot(2061);
      complex3.asin();
      complex1.sqrt1z();
      Complex complex9 = complex3.sqrt();
      complex9.tanh();
      complex2.tan();
      complex8.exp();
      complex7.asin();
      complex7.reciprocal();
      complex5.multiply(0.12853378801925314);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1.0), (-1.0));
      Complex complex2 = new Complex(2.5707963267948966);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.sqrt1z();
      complex2.readResolve();
      Complex complex5 = Complex.valueOf(20.0, 2065.0);
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = complex0.add(complex4);
      complex1.toString();
      Complex complex8 = new Complex(2.5707963267948966, 2065.0);
      Complex complex9 = complex8.divide(20.0);
      complex6.hashCode();
      complex3.add(0.0);
      complex0.reciprocal();
      complex7.getImaginary();
      complex4.cosh();
      Complex complex10 = complex4.createComplex(0.0, 2.5707963267948966);
      complex0.divide(complex10);
      complex0.abs();
      complex2.equals(complex9);
      complex10.getField();
      Complex complex11 = complex9.sqrt1z();
      complex10.tan();
      Complex complex12 = complex4.multiply(3644.091075432384);
      complex12.acos();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.NaN.conjugate();
      complex2.ZERO.getField();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex3.I.reciprocal();
      complex3.ONE.subtract(complex0);
      complex3.ZERO.hashCode();
      complex2.getArgument();
      complex3.pow(Double.NaN);
      Complex complex5 = Complex.valueOf(4730.1064659053);
      Complex complex6 = complex1.tan();
      complex0.log();
      Complex complex7 = complex5.sin();
      complex7.abs();
      complex4.atan();
      complex5.tan();
      Complex complex8 = complex0.negate();
      Complex complex9 = Complex.valueOf(2637.6986, 3423699.6056250003);
      complex4.tan();
      Complex complex10 = Complex.I;
      complex10.getArgument();
      complex6.asin();
      complex0.divide(2637.6986);
      complex8.tanh();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.2930046425129, 2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      complex2.NaN.conjugate();
      complex1.ONE.hashCode();
      Complex complex3 = complex0.subtract(2.0);
      Complex complex4 = complex3.I.conjugate();
      complex4.ONE.hashCode();
      Complex complex5 = complex3.pow(1.1453864574432373);
      Complex complex6 = complex5.divide(complex4);
      Complex complex7 = complex4.NaN.multiply(complex5);
      complex6.I.multiply(complex5);
      double double0 = (-1423.6840325);
      complex5.divide((-1423.6840325));
      complex7.multiply(1);
      complex6.asin();
      complex6.toString();
      Complex.valueOf(995.9537683708553, 2015.2930046425129);
      complex1.sin();
      try { 
        complex3.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.3183319568634033);
      complex1.INF.atan();
      Complex complex2 = complex0.NaN.conjugate();
      complex2.ZERO.getField();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex3.ONE.subtract(complex0);
      complex3.ZERO.hashCode();
      complex2.getArgument();
      Complex complex6 = complex0.divide(0.0);
      complex6.multiply(1);
      Complex complex7 = complex0.asin();
      complex6.toString();
      complex6.abs();
      Complex complex8 = Complex.NaN;
      complex6.equals(complex8);
      complex4.getField();
      complex7.sqrt1z();
      Complex complex9 = Complex.valueOf(2124.02741499874, 3644.091075432384);
      complex9.tan();
      Complex complex10 = complex5.multiply(2124.02741499874);
      complex3.acos();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.3183319568634033);
      complex1.INF.atan();
      Complex complex2 = complex0.NaN.conjugate();
      complex2.ZERO.getField();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex3.I.reciprocal();
      complex3.ONE.subtract(complex0);
      complex3.ZERO.hashCode();
      Complex.valueOf((-765.1642));
      Complex complex5 = complex4.exp();
      complex5.nthRoot(107);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.pow(2.0);
      Complex complex2 = complex1.divide((-1.134160131581847E-7));
      Complex complex3 = Complex.valueOf(629.6365909257987, 532.6144282);
      complex3.pow((-2884.0));
      complex2.getField();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.NaN;
      complex5.getField();
      complex0.getReal();
      complex5.asin();
      Complex complex6 = complex2.sinh();
      Complex complex7 = Complex.ONE;
      complex6.nthRoot(176447);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.asin();
      complex3.readResolve();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = Complex.INF;
      complex5.negate();
      Complex complex6 = complex2.subtract(1.0);
      Complex complex7 = complex1.subtract(0.0);
      Complex complex8 = complex5.multiply(2964.0);
      complex0.divide(complex5);
      complex7.sqrt();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3533.4));
      complex9.getArgument();
      complex4.reciprocal();
      Complex complex10 = complex3.negate();
      complex1.tanh();
      complex8.negate();
      complex10.subtract(3397.428705659754);
      complex6.getImaginary();
      complex6.getField();
      complex5.getImaginary();
      Complex.valueOf((-20.0), 115.3872837177281);
      complex5.nthRoot(538);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.2930046425129, 2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.NaN.conjugate();
      complex1.ONE.hashCode();
      Complex complex4 = complex0.subtract(2.0);
      Complex complex5 = complex4.I.conjugate();
      complex5.ONE.hashCode();
      Complex complex6 = complex4.pow(1.1453864574432373);
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex5.NaN.multiply(complex6);
      Complex complex9 = complex7.I.multiply(complex6);
      Complex complex10 = complex9.pow(1.1453864574432373);
      Complex complex11 = Complex.valueOf((-5.36108186384227E-9));
      complex8.tan();
      complex8.log();
      Complex complex12 = Complex.INF;
      complex12.sin();
      Complex complex13 = Complex.valueOf(1661.409283, 2015.2930046425129);
      complex13.abs();
      Complex complex14 = Complex.I;
      complex14.atan();
      complex10.tan();
      Complex complex15 = complex9.reciprocal();
      complex13.subtract(complex15);
      complex3.conjugate();
      Complex complex16 = Complex.INF;
      complex15.sqrt();
      try { 
        complex11.nthRoot((-1047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,047
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      complex0.INF.readResolve();
      Complex complex3 = Complex.valueOf(742.8278, 742.8278);
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex3.ZERO.add(complex4);
      complex2.toString();
      Complex complex6 = complex3.INF.divide(1145.6953064689758);
      complex6.I.hashCode();
      complex3.getArgument();
      Complex complex7 = complex1.reciprocal();
      complex2.negate();
      complex7.tanh();
      complex0.negate();
      Complex complex8 = complex1.subtract(1.2247224482958058E115);
      complex5.getImaginary();
      complex8.getField();
      Complex complex9 = Complex.valueOf(1.2247224482958058E115);
      complex9.getImaginary();
      Complex.valueOf(2.0, 0.0);
      Complex complex10 = Complex.ONE;
      complex10.nthRoot(21);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-538.90243));
      Complex complex1 = complex0.ONE.pow(532.6144282);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.add(complex2);
      complex2.toString();
      Complex complex4 = complex1.divide((-538.90243));
      complex1.hashCode();
      complex4.add((-48.8548996348));
      Complex complex5 = complex4.reciprocal();
      complex0.getImaginary();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.createComplex((-722.683), 0.0);
      Complex complex8 = Complex.valueOf(2775.19223560554, 0.0);
      Complex complex9 = Complex.valueOf(0.0);
      complex8.divide(complex9);
      complex7.abs();
      Complex complex10 = Complex.INF;
      Object object0 = complex10.readResolve();
      complex6.equals(object0);
      complex5.getField();
      complex2.sqrt1z();
      Complex complex11 = Complex.valueOf((-48.8548996348));
      complex11.tan();
      complex5.multiply((-722.683));
      complex5.acos();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      Complex.valueOf(742.8278, 742.8278);
      Complex complex3 = Complex.INF;
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.pow(55.235882297465416);
      complex4.getField();
      Complex complex5 = Complex.NaN;
      complex1.getField();
      complex2.getReal();
      complex0.asin();
      complex0.sinh();
      complex3.multiply((-1429));
      try { 
        complex0.nthRoot((-1429));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,429
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1670.86328));
      complex0.readResolve();
      Complex complex1 = complex0.atan();
      complex1.ONE.acos();
      complex1.INF.nthRoot(1786);
      complex1.isNaN();
      Complex complex2 = complex0.tanh();
      complex0.ZERO.sinh();
      Complex complex3 = complex2.subtract((-1670.86328));
      Complex complex4 = Complex.valueOf((double) 1786, (-4552.23240703));
      complex3.INF.add(4612.81308);
      Complex complex5 = complex0.log();
      complex3.isNaN();
      complex4.I.sinh();
      complex1.getField();
      Complex complex6 = complex5.sinh();
      complex6.I.multiply((-1613));
      Complex complex7 = complex2.exp();
      complex0.sin();
      complex7.sinh();
      complex0.tan();
      complex7.sinh();
      complex4.equals("");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-83.5829543544834), (-2575.6119));
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = Complex.valueOf((-2575.6119), (-2408.666511));
      complex0.toString();
      complex2.pow(complex2);
      Complex complex3 = complex1.multiply(0);
      complex1.divide(complex0);
      complex2.hashCode();
      complex1.subtract(complex3);
      Complex complex4 = complex2.sqrt();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-65.4587824148));
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.ONE.toString();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.divide((-65.4587824148));
      complex3.isNaN();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex5.I.asin();
      complex5.NaN.readResolve();
      Complex complex7 = complex3.add(complex4);
      Complex complex8 = complex2.negate();
      complex8.subtract(1698.7145);
      Complex complex9 = complex2.ZERO.subtract(0.0);
      complex9.ONE.multiply(0.0);
      complex4.NaN.divide(complex7);
      Complex complex10 = complex8.ZERO.sqrt();
      complex5.ZERO.getArgument();
      complex10.reciprocal();
      Complex complex11 = complex1.ONE.negate();
      Complex complex12 = complex7.tanh();
      complex12.INF.negate();
      Complex complex13 = complex6.subtract((-65.4587824148));
      complex13.getImaginary();
      complex11.getField();
      complex11.sqrt();
      Complex complex14 = Complex.valueOf(0.0);
      complex14.nthRoot(7);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.2930046425129, 2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.NaN.conjugate();
      complex1.ONE.hashCode();
      Complex complex4 = complex0.subtract(2.0);
      Complex complex5 = complex4.I.conjugate();
      complex0.add(complex5);
      complex4.toString();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide(2015.2930046425129);
      complex1.hashCode();
      complex5.add(2.0);
      Complex complex8 = complex4.reciprocal();
      complex3.getImaginary();
      complex2.cosh();
      complex3.createComplex(1.0, 0.0);
      Complex complex9 = complex8.divide(complex0);
      complex4.abs();
      complex7.equals("(2013.2930046425129, 2.0)");
      complex9.getField();
      complex2.sqrt1z();
      complex8.tan();
      complex5.multiply(2.503544787552691);
      complex6.acos();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-538.90243));
      Complex complex1 = complex0.ONE.pow(532.6144282);
      Complex complex2 = complex1.I.divide((-538.90243));
      complex0.I.hashCode();
      Complex complex3 = complex2.pow((-20.0));
      complex1.multiply(4962);
      Complex complex4 = new Complex((-538.90243), (-20.0));
      complex2.cos();
      complex0.getArgument();
      complex3.reciprocal();
      Complex complex5 = Complex.INF;
      complex3.multiply((-538.90243));
      complex3.multiply((-505.40795314812146));
      complex5.pow((-20.0));
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.asin();
      Complex complex3 = complex1.cosh();
      complex2.createComplex(0.0, 0.0);
      Complex complex4 = Complex.valueOf((-1860.0));
      Complex complex5 = complex4.divide(complex3);
      complex4.abs();
      complex2.equals(complex0);
      complex5.getField();
      complex4.sqrt1z();
      complex3.tan();
      Complex complex6 = new Complex(Double.NaN, Double.NaN);
      complex5.acos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      complex0.INF.readResolve();
      Complex complex3 = Complex.valueOf(742.8278, 742.8278);
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex3.ZERO.add(complex4);
      complex2.toString();
      Complex complex6 = complex3.INF.divide(1145.6953064689758);
      complex6.I.hashCode();
      complex3.add(0.0);
      complex2.ONE.reciprocal();
      complex0.getImaginary();
      complex5.subtract(0.0);
      Complex complex7 = complex2.multiply(complex3);
      complex2.getImaginary();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.2930046425129, 2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.NaN.conjugate();
      complex1.ONE.hashCode();
      Complex complex4 = complex0.subtract(2.0);
      Complex complex5 = complex4.I.conjugate();
      complex5.ONE.hashCode();
      Complex complex6 = complex4.pow(1.1453864574432373);
      Complex complex7 = complex6.divide(complex5);
      complex5.NaN.multiply(complex6);
      Complex complex8 = complex7.I.multiply(complex6);
      complex8.pow(1.1453864574432373);
      Complex.valueOf(1497.5256082);
      Complex complex9 = complex6.tan();
      Complex complex10 = complex0.INF.log();
      complex10.sin();
      complex9.ZERO.abs();
      complex10.INF.atan();
      complex9.tan();
      complex1.reciprocal();
      complex3.subtract(complex7);
      complex8.conjugate();
      Complex complex11 = Complex.INF;
      complex11.sqrt();
      complex4.nthRoot(37);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.valueOf((-735.0));
      Complex complex2 = complex1.negate();
      complex1.conjugate();
      Complex complex3 = new Complex(20.0);
      complex3.getField();
      complex2.getField();
      complex3.ZERO.acos();
      complex2.getReal();
      complex3.asin();
      complex1.sinh();
      Complex complex4 = complex2.multiply(1);
      complex3.sqrt1z();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-538.90243));
      Complex complex1 = complex0.ONE.pow(532.6144282);
      Complex complex2 = complex1.I.divide((-538.90243));
      complex0.I.hashCode();
      Complex complex3 = complex2.pow((-20.0));
      Complex complex4 = complex0.pow((-20.0));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.INF.subtract(complex5);
      complex4.add(complex3);
      Complex complex7 = complex6.ONE.atan();
      Complex complex8 = complex0.NaN.atan();
      complex8.ZERO.add(complex6);
      Complex complex9 = complex2.tanh();
      complex3.acos();
      complex8.reciprocal();
      complex2.subtract(complex9);
      complex5.conjugate();
      complex2.sqrt();
      complex6.nthRoot(213);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-538.90243));
      Complex complex1 = complex0.ONE.pow(532.6144282);
      Complex complex2 = complex1.I.divide((-538.90243));
      complex0.I.hashCode();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = Complex.NaN;
      complex4.asin();
      complex3.readResolve();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex4.negate();
      Complex complex7 = new Complex((-538.90243));
      complex7.subtract(532.6144282);
      Complex complex8 = complex5.subtract(4.966982008364841E-4);
      Complex complex9 = complex5.multiply(Double.NaN);
      complex7.divide(complex6);
      complex2.sqrt();
      complex2.getArgument();
      complex1.reciprocal();
      complex9.negate();
      complex8.tanh();
      complex1.negate();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.subtract((-3.284204788892967E204));
      complex6.getImaginary();
      complex5.getField();
      complex7.getImaginary();
      Complex.valueOf(421.11117250226, Double.NaN);
      complex7.abs();
      complex11.toString();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = (Complex)complex0.INF.readResolve();
      Complex complex4 = complex3.conjugate();
      complex1.hashCode();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = Complex.ONE;
      complex6.multiply(complex2);
      complex5.multiply(complex1);
      Complex complex7 = new Complex((-2168.668));
      complex7.pow(1145.6953064689758);
      Complex complex8 = Complex.valueOf((-2168.668));
      complex2.tan();
      Complex complex9 = complex5.log();
      complex9.ONE.negate();
      complex6.sin();
      complex0.abs();
      Complex complex10 = Complex.I;
      complex2.tan();
      Complex complex11 = complex8.negate();
      Complex.valueOf((-2168.668), (-4679.02));
      complex7.tan();
      complex4.getArgument();
      complex3.asin();
      Complex complex12 = new Complex((-4679.02));
      complex12.divide(2283.33456423);
      complex5.tanh();
      Complex complex13 = Complex.ONE;
      complex13.getArgument();
      try { 
        complex11.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.divide(complex0);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.divide(2.7050414085388184);
      complex0.isNaN();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ZERO.multiply(23);
      Complex complex6 = complex3.createComplex(0.4920966625213623, (-5.905511605694905E-113));
      Complex complex7 = complex4.asin();
      complex7.subtract(complex4);
      complex7.NaN.sqrt1z();
      complex7.add((double) 23);
      Complex complex8 = complex0.multiply(0.4920966625213623);
      complex8.I.negate();
      complex2.ONE.sin();
      complex8.atan();
      Complex complex9 = complex1.acos();
      complex9.getArgument();
      Complex complex10 = complex9.sin();
      Complex complex11 = complex6.tan();
      Complex complex12 = Complex.INF;
      complex11.pow(complex12);
      complex10.nthRoot(23);
      complex2.negate();
      complex5.multiply(complex3);
      complex10.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.acos();
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      complex1.abs();
      complex0.subtract(complex1);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.INF.multiply((-2057));
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.I.subtract((double) (-2057));
      complex1.I.getArgument();
      Complex complex5 = complex4.NaN.cosh();
      complex0.hashCode();
      Complex complex6 = complex0.add(20.0);
      Complex complex7 = complex6.NaN.conjugate();
      complex7.INF.abs();
      Complex complex8 = complex2.pow((double) (-2057));
      Complex complex9 = complex8.ONE.cosh();
      Complex complex10 = complex9.ONE.conjugate();
      Complex complex11 = complex10.sqrt1z();
      complex11.ONE.cosh();
      Object object0 = complex1.ONE.readResolve();
      Complex complex12 = complex2.subtract(complex4);
      complex2.ZERO.cos();
      complex2.INF.multiply(complex12);
      complex1.I.divide(2220.0);
      complex0.readResolve();
      complex1.add(complex5);
      complex3.reciprocal();
      complex3.getArgument();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.NaN.divide(0.0);
      complex4.I.sin();
      complex4.INF.abs();
      Complex complex5 = complex0.I.add(complex2);
      Complex complex6 = complex3.ZERO.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex6.I.sin();
      Complex complex7 = complex3.NaN.sqrt();
      complex2.getImaginary();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex0.sqrt();
      complex0.sqrt();
      complex7.readResolve();
      complex4.I.asin();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex1.cosh();
      complex11.readResolve();
      complex5.abs();
      Complex complex12 = complex4.reciprocal();
      complex12.ONE.add(complex10);
      complex9.abs();
      complex2.cos();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.createComplex(1898.3159609646, 1.8267512321472168);
      complex0.INF.subtract((-2432.0));
      complex0.getImaginary();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.subtract(complex1);
      complex4.divide(complex0);
      complex3.divide(0.0);
      complex2.nthRoot(570);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2015.2930046425129, 2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      complex2.NaN.conjugate();
      complex1.ONE.hashCode();
      Complex complex3 = complex0.subtract(2.0);
      Complex complex4 = complex3.I.conjugate();
      complex4.ONE.hashCode();
      Complex complex5 = complex3.pow(1.1453864574432373);
      Complex complex6 = complex5.divide(complex4);
      complex4.NaN.multiply(complex5);
      Complex complex7 = complex6.I.multiply(complex5);
      complex7.pow(1.1453864574432373);
      Complex.valueOf(1497.5256082);
      Complex complex8 = complex5.tan();
      Complex complex9 = complex0.INF.log();
      complex9.sin();
      complex8.ZERO.abs();
      complex9.INF.atan();
      complex8.tan();
      complex8.negate();
      Complex complex10 = Complex.valueOf(1497.5256082, 1.066575527191162);
      complex10.INF.tan();
      complex4.getArgument();
      complex7.asin();
      complex8.divide((-1.5707963267948966));
      complex7.tanh();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1145.6953064689758, 742.8278);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      complex0.INF.readResolve();
      Complex complex3 = Complex.valueOf(742.8278, 742.8278);
      Complex complex4 = complex1.pow(complex2);
      complex3.ZERO.add(complex4);
      complex2.toString();
      Complex complex5 = complex3.INF.divide(1145.6953064689758);
      complex5.I.hashCode();
      Complex complex6 = complex3.add(0.0);
      complex2.ONE.reciprocal();
      complex0.getImaginary();
      Complex complex7 = complex3.INF.cosh();
      Complex complex8 = complex6.createComplex(0.0, 0.0);
      complex6.NaN.divide(complex1);
      complex2.abs();
      complex8.equals(complex4);
      complex3.getField();
      complex6.sqrt1z();
      complex6.tan();
      complex7.multiply(0.0);
      complex8.acos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1494.33, 1354.44);
      complex0.ZERO.readResolve();
      complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.cos();
      complex2.INF.tan();
      Complex complex3 = complex0.ONE.sqrt1z();
      Complex complex4 = complex0.I.multiply((-834.0));
      Complex complex5 = complex0.tanh();
      complex5.I.getArgument();
      Complex complex6 = Complex.valueOf((-2265.73));
      complex0.toString();
      complex5.INF.sqrt1z();
      Complex complex7 = complex3.ZERO.atan();
      Complex complex8 = complex5.sinh();
      complex8.ZERO.exp();
      complex8.INF.log();
      complex4.exp();
      complex1.getReal();
      complex3.subtract(3340.7);
      complex5.sqrt1z();
      complex7.createComplex(1354.44, (-1.0));
      complex6.cosh();
      Complex.valueOf(3722.17042);
      complex5.negate();
      complex5.tanh();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1345.0));
      Complex complex1 = Complex.valueOf((-1345.0), (-2444.0));
      complex1.NaN.tan();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex3.NaN.pow(0.0);
      complex4.INF.getArgument();
      complex4.I.createComplex((-1545.0), (-1545.0));
      complex0.isNaN();
      complex2.INF.getField();
      Complex complex5 = complex0.pow((-1489.12943368185));
      complex5.I.hashCode();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex0.log();
      complex7.INF.sin();
      complex6.ZERO.subtract(complex5);
      complex7.ZERO.divide(complex6);
      complex6.INF.add((-1345.0));
      complex7.ZERO.multiply(0.0);
      complex6.sqrt1z();
      complex7.getField();
      complex6.multiply((-2444.0));
      Complex complex8 = Complex.INF;
      Complex complex9 = complex2.subtract(complex8);
      Complex complex10 = Complex.valueOf((-1345.0), (-1345.0));
      complex9.ONE.cos();
      Complex complex11 = complex1.sqrt();
      complex11.I.subtract(complex0);
      complex9.divide(complex1);
      Complex complex12 = Complex.NaN;
      complex11.divide(complex12);
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract(2163.108986059);
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.INF.asin();
      complex0.getField();
      Complex complex4 = complex1.NaN.add(complex3);
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = Complex.valueOf(6.283185307179586, (-1327.6));
      complex6.ONE.hashCode();
      complex5.INF.log();
      Complex.valueOf(2163.108986059);
      Complex complex7 = Complex.valueOf(2163.108986059);
      Complex complex8 = complex7.ONE.negate();
      complex8.ZERO.subtract(2163.108986059);
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.ZERO.tanh();
      complex11.ZERO.hashCode();
      complex10.NaN.divide(2163.108986059);
      Complex complex12 = complex2.conjugate();
      complex12.INF.cosh();
      Complex complex13 = complex12.INF.add((-1327.6));
      complex13.multiply(complex3);
      Complex complex14 = complex12.ZERO.createComplex((-1327.6), 6.283185307179586);
      complex10.isInfinite();
      complex2.getImaginary();
      complex3.toString();
      complex3.getArgument();
      complex2.INF.getField();
      complex4.reciprocal();
      Complex complex15 = complex2.asin();
      complex14.readResolve();
      Complex complex16 = complex15.multiply(complex7);
      complex16.I.getArgument();
      complex0.sqrt();
      complex16.sin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex1.INF.reciprocal();
      complex3.I.toString();
      Complex complex4 = complex0.log();
      complex4.sin();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.log();
      complex2.sin();
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex0.INF.pow(4.250734424415339E-289);
      complex1.getField();
      Complex complex5 = complex0.NaN.divide(complex1);
      complex5.ONE.abs();
      Complex complex6 = complex5.I.add(4.250734424415339E-289);
      Complex complex7 = complex6.ZERO.sqrt1z();
      complex7.I.asin();
      complex5.NaN.toString();
      complex0.getField();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.add(4.250734424415339E-289);
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex9.add(complex8);
      complex11.NaN.conjugate();
      complex9.tanh();
      complex9.getReal();
      complex5.INF.tan();
      complex4.acos();
      complex10.negate();
      complex9.hashCode();
      Complex complex12 = Complex.valueOf(4.250734424415339E-289, 1.0);
      complex12.INF.reciprocal();
      complex3.tan();
      complex7.ONE.abs();
      Complex complex13 = complex7.sqrt();
      Complex complex14 = Complex.ONE;
      complex6.subtract(complex14);
      complex13.cosh();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-865.02529), 0.0);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.subtract((-865.02529));
      complex0.ZERO.abs();
      Complex complex2 = complex0.subtract((-841.041460563));
      complex2.INF.subtract(complex1);
      complex1.ZERO.readResolve();
      complex2.isInfinite();
      complex2.getImaginary();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.asin();
      complex4.NaN.atan();
      try { 
        complex3.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.asin();
      complex2.NaN.subtract(0.0);
      complex0.ZERO.multiply(complex1);
      complex0.getImaginary();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(2.3593788146972656, 2.3593788146972656);
      Complex complex1 = complex0.pow(2.3593788146972656);
      Complex complex2 = complex1.NaN.pow(302.197);
      Complex complex3 = complex0.subtract(2.3593788146972656);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.I.cos();
      complex5.ONE.conjugate();
      complex5.ZERO.toString();
      Complex complex6 = complex1.ZERO.multiply(complex4);
      complex3.I.hashCode();
      Complex complex7 = complex3.multiply(6.283185307179586);
      Complex complex8 = complex7.exp();
      complex2.getField();
      Complex complex9 = complex1.I.negate();
      complex9.NaN.exp();
      complex2.pow(complex8);
      Complex.valueOf(2.3593788146972656);
      Complex complex10 = complex1.atan();
      complex10.abs();
      complex4.equals(complex6);
      Complex.valueOf((-1.1623181434592597E-259));
      complex3.pow((-2705.88153));
      Complex.valueOf(925.1214366205448, 1522.7300132145433);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.getArgument();
      double double0 = 1619.5167126480644;
      Complex complex1 = Complex.valueOf(1619.5167126480644, (-9.179458802504127E-9));
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.INF.createComplex(Double.NaN, 0);
      complex0.ZERO.multiply(0);
      double double1 = 1564.4533785083;
      Complex complex3 = complex0.pow(1564.4533785083);
      complex3.getImaginary();
      Complex complex4 = complex0.tan();
      complex4.ONE.log();
      try { 
        complex4.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.I.sqrt();
      Complex.valueOf((-20.0), (-2.382825271750576E144));
      complex2.I.nthRoot(1302);
      Complex complex3 = complex1.I.add((-1.0));
      complex3.ZERO.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.NaN.divide(1.2384658100355657E72);
      complex6.I.tanh();
      complex5.negate();
      complex6.INF.tan();
      complex5.NaN.log();
      Complex complex7 = complex4.subtract(Double.POSITIVE_INFINITY);
      complex7.NaN.tanh();
      Complex complex8 = complex5.exp();
      complex8.ZERO.conjugate();
      Complex complex9 = Complex.valueOf(0.0, (double) 1302);
      Complex complex10 = complex7.subtract(complex9);
      complex10.NaN.atan();
      Complex complex11 = Complex.valueOf((-350.957429251738));
      complex11.INF.acos();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.pow(0.0);
      complex1.NaN.sin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex2.divide(0.0);
      complex0.ZERO.subtract(complex2);
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex5.subtract(0.0);
      complex6.reciprocal();
      Complex complex7 = complex6.negate();
      complex0.ZERO.tan();
      complex3.divide(0.0);
      complex0.log();
      complex1.readResolve();
      complex4.pow(0.0);
      complex0.createComplex(0.0, (-1.2778508303324259E-8));
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-538.90243));
      Complex complex1 = complex0.ONE.pow(532.6144282);
      Complex complex2 = complex1.I.divide((-538.90243));
      complex0.I.hashCode();
      Complex complex3 = complex2.pow((-20.0));
      Complex complex4 = complex0.pow((-20.0));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.INF.subtract(complex5);
      Complex complex7 = complex4.add(complex3);
      complex6.ONE.atan();
      Complex complex8 = complex0.NaN.atan();
      complex8.ZERO.add(complex6);
      Complex complex9 = complex2.tanh();
      complex9.acos();
      complex1.reciprocal();
      complex3.subtract(complex2);
      complex9.conjugate();
      Complex complex10 = complex7.sqrt();
      complex7.nthRoot(7);
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.exp();
      Complex complex1 = complex0.NaN.multiply((-2485.2677050033203));
      Complex complex2 = complex0.NaN.cos();
      complex2.ZERO.readResolve();
      complex2.I.toString();
      Complex complex3 = complex0.INF.tanh();
      Complex.valueOf((-434.0), (-115.05549332653));
      complex3.ZERO.log();
      complex0.cos();
      Complex complex4 = complex1.multiply(1.145412771487496E-7);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.ZERO.add(complex0);
      complex0.getImaginary();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(694.601);
      complex0.ZERO.multiply(complex1);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-83.5829543544834), (-2575.6119));
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = Complex.valueOf((-2575.6119), (-2408.666511));
      complex0.multiply(complex2);
      complex1.multiply((-829.334));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      int int0 = 1;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.INF.conjugate();
      complex1.ONE.pow(complex0);
      int int1 = 0;
      Complex complex3 = complex2.NaN.add((double) 1);
      Complex complex4 = complex3.NaN.multiply(1);
      try { 
        complex4.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586);
      complex0.negate();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = complex1.multiply(1);
      complex4.I.add(complex1);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.ZERO.negate();
      complex0.hashCode();
      complex0.ZERO.toString();
      Complex complex7 = complex3.cosh();
      complex7.createComplex(6.283185307179586, 1090.1);
      complex0.ZERO.nthRoot(1);
      Complex complex8 = complex0.exp();
      complex6.NaN.log();
      Complex complex9 = complex8.subtract(2752.1443137);
      Complex complex10 = complex0.ONE.asin();
      Complex complex11 = complex9.ZERO.exp();
      complex2.getReal();
      complex0.abs();
      complex4.sqrt1z();
      complex11.getArgument();
      complex10.sqrt1z();
      complex9.add(complex6);
      complex10.cosh();
      complex5.pow(1090.1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.readResolve();
      complex0.NaN.toString();
      Complex complex1 = new Complex(0.0, (-1.0));
      complex1.multiply(1205);
      Complex complex2 = complex0.pow(complex1);
      complex1.ZERO.cos();
      Complex complex3 = complex2.reciprocal();
      complex1.hashCode();
      complex2.hashCode();
      Complex complex4 = Complex.valueOf((double) 1205);
      complex3.I.subtract((double) 1205);
      Complex complex5 = complex3.log();
      complex5.ZERO.getArgument();
      Complex complex6 = Complex.valueOf((double) 1205);
      Complex complex7 = complex1.conjugate();
      complex7.I.asin();
      complex0.createComplex((-6.892713087722722E-8), (-871.6537771519658));
      complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1651.012576608);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-65.4587824148));
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.ONE.toString();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.divide((-65.4587824148));
      complex3.isNaN();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex5.I.asin();
      complex5.NaN.readResolve();
      Complex complex7 = complex3.add(complex4);
      Complex complex8 = complex2.negate();
      complex8.subtract(1698.7145);
      Complex complex9 = complex2.ZERO.subtract(0.0);
      complex9.ONE.multiply(0.0);
      complex4.NaN.divide(complex7);
      Complex complex10 = complex8.ZERO.sqrt();
      complex5.ZERO.getArgument();
      Complex complex11 = complex10.reciprocal();
      complex1.ONE.negate();
      Complex complex12 = complex7.tanh();
      complex12.INF.negate();
      Complex complex13 = complex6.subtract((-65.4587824148));
      complex13.getImaginary();
      complex7.getField();
      complex4.getImaginary();
      Complex.valueOf((-1.0), 0.8813735870195428);
      complex11.abs();
      complex0.toString();
      complex12.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 1;
      complex0.nthRoot(1);
      complex0.ZERO.cos();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.ZERO.conjugate();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(1.0);
      complex2.ZERO.acos();
      complex1.subtract(complex2);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex0.ZERO.divide(complex1);
      complex0.NaN.getArgument();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getReal();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4408516883850098);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.conjugate();
      complex0.NaN.getField();
      complex0.getField();
      complex1.getReal();
      Complex complex3 = complex2.asin();
      complex3.ONE.sinh();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3400.899163342002, 357.90270808);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.INF.pow((-1491.999826905642));
      complex0.getArgument();
      Complex complex4 = Complex.valueOf((-2637.69), 357.90270808);
      complex4.divide(complex1);
      complex3.createComplex(3.846720258072078E-173, 1191.4788513610179);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-416.974705));
      Complex complex2 = Complex.ZERO;
      complex1.NaN.subtract(complex2);
      complex0.I.getField();
      complex0.ONE.add(1409.57492553735);
      complex0.isInfinite();
      complex0.acos();
      Complex complex3 = complex1.add(complex0);
      complex3.I.sinh();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(2412.30154, 2412.30154);
      Complex complex1 = Complex.valueOf((double) 1, 2412.30154);
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex2.NaN.divide(complex1);
      complex1.NaN.sinh();
      Complex complex4 = complex2.NaN.add(complex0);
      complex4.INF.readResolve();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.NaN.divide((double) 1);
      Complex complex7 = complex0.INF.multiply(1);
      Complex complex8 = complex0.INF.tan();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex2.pow((double) 1);
      complex10.I.createComplex(2412.30154, 701.6521);
      Complex complex11 = complex2.subtract(complex9);
      complex11.ZERO.acos();
      complex11.ZERO.acos();
      complex7.getField();
      complex9.getArgument();
      complex6.asin();
      complex8.sqrt();
      Complex complex12 = complex4.conjugate();
      complex12.log();
      complex3.multiply(2412.30154);
      complex7.getArgument();
      Complex complex13 = complex8.add(complex7);
      complex6.sqrt1z();
      complex6.toString();
      complex1.getImaginary();
      complex13.divide(701.6521);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(0.0, 5.982180242124184E65);
      complex0.I.readResolve();
      Complex complex1 = complex0.ZERO.atan();
      complex0.NaN.abs();
      complex0.getImaginary();
      complex1.I.toString();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.ONE.exp();
      complex1.toString();
      complex2.asin();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(7);
      Complex complex2 = complex0.subtract(complex1);
      complex1.I.divide((double) 7);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.multiply(7);
      complex5.getReal();
      complex0.exp();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.ONE.sinh();
      complex6.asin();
      complex1.equals(complex6);
      complex5.getImaginary();
      complex0.readResolve();
      Complex complex8 = complex4.sin();
      Complex complex9 = complex1.pow(complex2);
      complex9.ONE.nthRoot(7);
      complex9.getArgument();
      complex5.I.getField();
      Complex complex10 = complex3.sqrt1z();
      complex10.INF.add(7.0);
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex11.negate();
      complex11.INF.log();
      complex6.getReal();
      Complex complex13 = complex3.add(complex12);
      complex13.ONE.hashCode();
      Complex complex14 = complex8.sin();
      complex14.ZERO.add(0.0);
      complex6.negate();
      complex7.multiply((-2069));
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(1794.443528349966);
      List<Complex> list0 = complex0.ZERO.nthRoot(1486);
      assertEquals(1486, list0.size());
      assertFalse(list0.contains(complex0));
      
      complex0.getField();
      Complex complex2 = new Complex(1486, 1486);
      Complex.valueOf((double) 1486);
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.ZERO.tan();
      complex4.NaN.getArgument();
      Complex complex6 = complex4.ONE.negate();
      Complex complex7 = complex0.exp();
      complex7.NaN.cosh();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex7.I.acos();
      Complex complex10 = complex9.ZERO.reciprocal();
      Complex complex11 = complex2.ZERO.atan();
      Complex complex12 = complex4.reciprocal();
      complex10.ZERO.toString();
      Complex complex13 = complex7.sqrt();
      complex13.ZERO.pow(complex7);
      Complex complex14 = Complex.valueOf(Double.NaN);
      Complex complex15 = complex0.add(complex2);
      Complex complex16 = complex14.atan();
      complex16.NaN.pow(complex10);
      complex6.pow((double) 1486);
      complex15.INF.multiply(1486);
      Complex complex17 = complex16.add(complex3);
      Complex complex18 = complex12.conjugate();
      assertSame(complex18, complex1);
      
      complex8.negate();
      Complex complex19 = complex17.sin();
      Complex complex20 = complex15.ONE.sinh();
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      
      complex19.ONE.createComplex(Double.NaN, Double.NaN);
      assertSame(complex19, complex13);
      
      complex15.add(complex12);
      complex10.reciprocal();
      Complex complex21 = complex11.acos();
      assertEquals(1.5707963267948966, complex21.getReal(), 0.01);
      
      Complex complex22 = complex5.subtract(0.0);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex22.getReal(), 0.01);
      assertSame(complex0, complex14);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      complex0.I.cosh();
      Complex complex2 = complex0.multiply(2894.59566524291);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.cos();
      complex4.tanh();
      complex4.negate();
      complex1.atan();
      try { 
        complex1.nthRoot((-3241));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,241
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.3183319568634033);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex0.NaN.conjugate();
      complex3.ZERO.getField();
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex4.I.reciprocal();
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex4.ONE.subtract(complex0);
      complex4.ZERO.hashCode();
      complex3.getArgument();
      Complex complex6 = complex0.divide(0.0);
      complex6.multiply(1);
      Complex complex7 = complex0.asin();
      complex6.toString();
      Complex complex8 = Complex.valueOf(1.3183319568634033, 995.9537683708553);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.INF.divide(complex2);
      assertSame(complex10, complex6);
      
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex11 = complex2.I.acos();
      assertEquals((-0.8813735870195429), complex11.getImaginary(), 0.01);
      
      complex3.toString();
      Complex complex12 = complex3.pow(complex0);
      complex2.multiply(1);
      Complex complex13 = complex2.divide(complex7);
      complex2.hashCode();
      complex13.subtract(complex8);
      complex3.sqrt();
      assertFalse(complex0.equals((Object)complex5));
      
      Complex complex14 = complex4.log();
      assertSame(complex14, complex3);
      assertSame(complex14, complex12);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      assertEquals(1.1752011936438014, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.conjugate();
      assertFalse(complex2.isNaN());
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }
}
