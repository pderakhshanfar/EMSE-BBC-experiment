/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:05:49 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.nthRoot(144);
      Complex.valueOf(1.0973020465397083E-7);
      complex0.subtract((double) 1);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply((-760));
      Complex complex4 = complex2.divide(complex1);
      complex0.toString();
      complex0.tan();
      Complex complex5 = Complex.valueOf(4611.43, 1.876076001514746E-8);
      complex4.multiply(complex5);
      Complex complex6 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.multiply(complex6);
      complex3.sin();
      complex7.subtract(Double.POSITIVE_INFINITY);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.acos();
      Complex complex1 = complex0.pow(1.6038109389511792E-28);
      complex1.asin();
      Complex complex2 = new Complex(1.6038109389511792E-28, Double.POSITIVE_INFINITY);
      complex2.multiply(37);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = 5.89953246760617E-101;
      Complex complex0 = new Complex(5.89953246760617E-101, 5.89953246760617E-101);
      complex0.nthRoot(896);
      Complex complex1 = complex0.subtract(1.5707963267948966);
      complex0.toString();
      Complex complex2 = complex1.ONE.multiply(896);
      Complex complex3 = complex1.sqrt1z();
      complex3.INF.readResolve();
      complex1.tan();
      Complex complex4 = complex3.cos();
      complex4.INF.add((-2.0937429891059164E185));
      complex1.pow(complex0);
      double double1 = (-1019.5148967069873);
      complex3.NaN.pow(complex1);
      complex2.conjugate();
      Complex.valueOf((double) 896);
      Complex complex5 = complex2.createComplex((-1019.5148967069873), 20.0);
      complex5.NaN.divide(complex3);
      try { 
        complex5.ONE.nthRoot((-23));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -23
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(691.0, 20.0);
      Complex complex2 = complex1.tan();
      complex2.pow(691.0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2926.8262), (-2926.8262));
      double double0 = 1.2334070098307164E267;
      Complex complex2 = Complex.valueOf(1.2334070098307164E267);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.tan();
      complex5.nthRoot(270);
      try { 
        complex4.nthRoot((-2535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,535
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(1379.27203, (-1606.8981734));
      Complex complex1 = complex0.tan();
      complex1.ZERO.add(complex0);
      Complex complex2 = new Complex((-1606.8981734));
      complex2.NaN.subtract(0.0038986406289041042);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1914.701343391636), Double.NaN);
      Complex complex2 = Complex.NaN;
      complex0.sin();
      Complex complex3 = Complex.valueOf((-1914.701343391636), 1.0);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-1114.8389), 1106.116528);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.valueOf(20.0, (-678.726346686));
      complex2.NaN.reciprocal();
      Complex complex3 = Complex.valueOf((-987.030246), 2.6346492767333984);
      complex1.I.readResolve();
      Complex complex4 = complex0.sqrt1z();
      complex4.NaN.exp();
      complex4.ZERO.getField();
      complex1.negate();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.atan();
      complex2.negate();
      complex2.tanh();
      complex1.reciprocal();
      complex6.sqrt1z();
      complex3.sinh();
      Complex.valueOf((-678.726346686), (-1110.480635783979));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 1147.0);
      complex1.subtract(1.4190155736490705E-8);
      complex1.tanh();
      complex0.pow(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(763.1621165270991, 763.1621165270991);
      Complex complex2 = complex0.subtract(complex1);
      complex1.I.getArgument();
      Complex complex3 = complex1.ONE.conjugate();
      complex0.atan();
      complex3.ZERO.getField();
      complex3.INF.toString();
      complex2.ONE.exp();
      Complex complex4 = Complex.valueOf(1.5707963267948966);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.NaN.multiply((-1741.70745230792));
      complex5.ONE.tan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex7.NaN.cosh();
      complex0.asin();
      complex7.INF.sin();
      Complex complex9 = complex1.sqrt1z();
      complex8.abs();
      complex9.INF.divide(complex7);
      complex9.multiply(197.9);
      complex6.pow((-20.0));
      Complex complex10 = complex4.multiply(Double.NaN);
      Complex complex11 = complex10.INF.subtract(197.9);
      Complex complex12 = complex11.ZERO.cosh();
      Complex complex13 = complex9.exp();
      complex13.ZERO.add(complex3);
      complex9.negate();
      complex12.abs();
      complex2.readResolve();
      complex10.conjugate();
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.tanh();
      complex1.pow(1.0);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.NaN;
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.acos();
      complex1.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-18.25228196898971));
      complex0.atan();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-18.25228196898971));
      complex1.tanh();
      Complex complex2 = complex1.sqrt();
      complex2.toString();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2112.302264846));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.conjugate();
      complex1.ZERO.tan();
      Complex complex3 = Complex.valueOf((-2112.302264846));
      complex3.INF.hashCode();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex4.sin();
      Complex complex7 = Complex.valueOf((-2112.302264846));
      complex2.pow(complex6);
      Complex complex8 = complex3.acos();
      complex8.ONE.conjugate();
      Complex complex9 = complex8.NaN.pow(0.9946634748370046);
      complex5.toString();
      complex5.sqrt1z();
      complex7.subtract(complex5);
      complex1.getReal();
      complex9.negate();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ZERO;
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-18.25228196898971));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-18.25228196898971));
      complex1.tanh();
      Complex complex2 = complex1.sqrt();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(84.8, (-1709.0));
      Complex complex1 = Complex.valueOf((-1315.3), 84.8);
      Complex complex2 = complex1.INF.add(complex0);
      complex2.multiply(Integer.MAX_VALUE);
      complex1.NaN.subtract(725.6314068);
      complex0.ONE.getField();
      complex0.hashCode();
      complex0.getImaginary();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.ZERO.subtract(2451.247032813241);
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex5.I.acos();
      complex6.cosh();
      complex0.NaN.abs();
      complex5.abs();
      complex5.subtract(complex4);
      complex3.pow(complex4);
      Complex complex7 = complex5.INF.conjugate();
      complex7.ONE.add((-238.850082443805));
      complex0.getReal();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex8.ONE.sin();
      Complex complex10 = complex4.createComplex((-643.231533841), (-643.231533841));
      complex7.abs();
      complex3.conjugate();
      complex3.getImaginary();
      complex10.acos();
      complex6.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2866.3);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(4611.43);
      Complex complex2 = new Complex(1);
      Complex complex3 = complex1.divide(complex0);
      complex3.abs();
      Complex complex4 = complex1.multiply(1);
      complex1.sin();
      complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(3.6149218175202576E-8);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex0.sinh();
      complex1.toString();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(113.34234119418274);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.NaN.subtract(113.34234119418274);
      Complex complex3 = complex1.NaN.add(1108.0105);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.divide(complex1);
      Complex complex6 = complex5.ONE.tanh();
      complex5.ONE.asin();
      complex0.NaN.toString();
      Complex complex7 = complex0.reciprocal();
      complex7.I.reciprocal();
      Complex complex8 = complex2.acos();
      complex8.ZERO.log();
      Complex complex9 = Complex.valueOf(1108.0105, (-3367.1790819366));
      complex5.isInfinite();
      complex4.isInfinite();
      complex2.getImaginary();
      Complex complex10 = complex0.pow(Double.NaN);
      Complex complex11 = complex10.add(complex4);
      Complex complex12 = complex11.divide(Double.NaN);
      complex12.atan();
      Complex.valueOf(1.0);
      Complex.valueOf(1108.0105);
      complex4.multiply(1798);
      complex9.abs();
      complex9.multiply(1798);
      complex6.sqrt();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(1135.66, (-2730.915319));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ONE.divide((-1092.302));
      Complex complex4 = complex3.ZERO.cosh();
      complex4.INF.sqrt1z();
      Complex complex5 = complex0.createComplex((-547.8181942135285), 1135.66);
      complex5.I.asin();
      complex0.ONE.add(complex1);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.subtract(complex1);
      Complex.valueOf((-474.796153683535));
      Complex complex8 = complex7.pow((-547.8181942135285));
      Complex complex9 = complex7.atan();
      Complex complex10 = complex8.pow(complex1);
      complex10.ONE.reciprocal();
      complex10.cosh();
      Complex complex11 = complex9.conjugate();
      complex11.log();
      complex4.getReal();
      complex10.getField();
      complex2.createComplex(Double.NaN, 0.7853981633974483);
      complex6.acos();
      complex1.asin();
      Complex.valueOf(20.0, 96.177811328685);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.tan();
      complex1.multiply(complex0);
      complex0.equals(complex2);
      complex2.isNaN();
      complex1.ZERO.log();
      complex0.getArgument();
      complex1.abs();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(5.709039546124285E-171);
      complex1.add(complex0);
      Complex complex2 = complex0.tan();
      complex2.divide(0.0);
      complex2.tanh();
      Complex complex3 = Complex.valueOf((-1.1843870433971731E201));
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1.198363039426718E-70, 1.198363039426718E-70);
      int int0 = 2049870754;
      // Undeclared exception!
      complex0.nthRoot(2049870754);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(1427.007766584982, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(370.0, 370.0);
      complex0.divide(complex1);
      complex0.I.tanh();
      Complex complex2 = complex1.add(370.0);
      complex2.I.sqrt1z();
      Complex.valueOf(1.3880166914480165E260);
      complex0.abs();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
      Complex complex1 = Complex.valueOf(43.21784147, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = new Complex((-599.05736731));
      complex2.equals(complex3);
      complex3.isNaN();
      complex3.getArgument();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.divide(2.0);
      complex2.I.getArgument();
      Complex complex3 = complex0.subtract(5823.301609511138);
      Complex complex4 = Complex.valueOf(5823.301609511138);
      complex3.NaN.abs();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex0.INF.acos();
      complex5.I.subtract(complex2);
      complex5.isInfinite();
      complex0.add(complex3);
      Complex complex7 = complex4.subtract(Double.NaN);
      complex7.ONE.toString();
      complex1.asin();
      complex6.abs();
      Complex complex8 = Complex.valueOf(2.0, 1.5707963267948966);
      Complex complex9 = complex8.conjugate();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4071.6224649927735);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.add(4071.6224649927735);
      complex3.ZERO.multiply(2864.9843135345786);
      complex0.ZERO.getArgument();
      complex2.ONE.readResolve();
      Complex complex4 = Complex.valueOf(0.0, 0.36494147777557373);
      complex2.NaN.nthRoot(828);
      complex0.getField();
      Complex complex5 = complex0.multiply(0.4537591338157654);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex6.I.divide(complex4);
      Complex complex8 = complex6.tanh();
      complex6.ONE.nthRoot(488);
      complex5.cos();
      complex1.getReal();
      complex0.getReal();
      complex0.NaN.readResolve();
      Complex complex9 = complex0.atan();
      complex1.divide(1.5707963267948966);
      Complex complex10 = complex1.cosh();
      complex10.I.subtract(complex7);
      Complex complex11 = complex9.multiply((double) 828);
      complex3.multiply(37);
      complex11.getImaginary();
      complex8.log();
      complex5.multiply((-272));
      Complex.valueOf(8.021171615975355E-73, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.cosh();
      complex0.divide(1723.286936);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.multiply(complex5);
      complex6.NaN.sinh();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-3.6149218175202596E-8), (-3.6149218175202596E-8));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.reciprocal();
      complex3.reciprocal();
      Complex.valueOf((-1329.9));
      complex0.pow(complex3);
      Complex complex5 = Complex.valueOf((-1329.9), (-1329.9));
      complex4.equals(complex5);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.sqrt();
      complex0.tan();
      Complex complex3 = Complex.valueOf((-3.6149218175202596E-8), (-1329.9));
      Complex complex4 = Complex.ONE;
      complex4.asin();
      Complex complex5 = Complex.valueOf(1380.5538789724812, (-1329.9));
      complex5.reciprocal();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = Complex.valueOf(1380.5538789724812);
      complex0.pow(complex2);
      Complex complex8 = new Complex((-1329.9));
      complex8.equals(complex3);
      complex6.exp();
      complex2.log();
      complex7.atan();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-112.9021907), (-112.9021907));
      Complex complex1 = Complex.valueOf((-112.9021907));
      complex1.getArgument();
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = complex2.divide(complex1);
      complex3.pow(445.45);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(3.141592653589793);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.tanh();
      complex3.sinh();
      Complex complex4 = Complex.valueOf(175.289427475867);
      complex4.multiply(complex3);
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 3.141592653589793);
      complex5.exp();
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.INF;
      complex6.abs();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-1608.0), (-1567.0));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.valueOf(155.94);
      Complex complex6 = Complex.ZERO;
      complex6.divide(complex3);
      complex6.toString();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex4.exp();
      Complex complex9 = complex3.sinh();
      complex9.INF.getField();
      complex7.subtract(complex0);
      complex3.multiply((-1608.0));
      complex0.sqrt();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 1.0);
      complex8.hashCode();
      complex4.negate();
      Complex complex11 = Complex.INF;
      complex2.divide(complex3);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = new Complex((-1567.0), 155.94);
      complex6.createComplex((-1343.5688872707), (-1567.0));
      complex11.cosh();
      complex5.exp();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(2335.17);
      Complex complex1 = complex0.ONE.conjugate();
      complex1.ZERO.abs();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex1.asin();
      complex4.I.hashCode();
      Complex complex5 = Complex.valueOf(2335.17, 0.17506598985571836);
      complex3.getField();
      complex2.NaN.getField();
      complex5.ZERO.createComplex(1911.787824962, (-1206.1398064152));
      Complex complex6 = complex1.NaN.multiply((-3367.5422788577));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.I.subtract(complex7);
      complex0.abs();
      complex5.getImaginary();
      Complex complex9 = complex1.asin();
      complex9.INF.sin();
      complex6.I.sin();
      Complex complex10 = complex6.add(1941.701);
      Complex complex11 = complex7.sinh();
      complex5.INF.abs();
      Complex complex12 = Complex.I;
      complex11.add(complex12);
      complex8.getArgument();
      complex2.sqrt1z();
      complex5.tan();
      complex10.isInfinite();
      Complex.valueOf((-2.356194490192345), 1911.787824962);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.negate();
      complex2.ZERO.readResolve();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex0.multiply(complex4);
      complex1.ZERO.getArgument();
      Complex complex6 = complex4.I.conjugate();
      complex6.ZERO.nthRoot(623);
      complex0.toString();
      Complex complex7 = complex2.divide((-0.9657185980906516));
      complex7.INF.atan();
      Complex complex8 = Complex.ONE;
      complex8.NaN.divide(complex6);
      Complex.valueOf(1.7278449535369873, 0.020993875930142236);
      Complex complex9 = complex7.divide(complex8);
      complex9.NaN.cosh();
      complex4.sin();
      Complex complex10 = Complex.valueOf(1723.286936, (-0.9657185980906516));
      complex10.I.add(0.0);
      complex5.getField();
      Complex complex11 = complex3.reciprocal();
      complex6.multiply(730.0);
      complex11.add(0.020993875930142236);
      complex6.add(2157.406763);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.divide(1.0);
      complex1.INF.abs();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex1.equals(complex3);
      complex3.exp();
      Complex complex4 = complex2.log();
      complex1.abs();
      complex0.equals(complex2);
      complex4.multiply((-325));
      Complex complex5 = new Complex(Double.NaN);
      complex2.multiply(complex5);
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.sinh();
      complex0.multiply(complex0);
      complex0.equals(complex1);
      Complex complex3 = complex0.divide(complex2);
      complex0.add(Double.POSITIVE_INFINITY);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.divide(1723.286936);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex3.multiply(complex4);
      complex6.INF.abs();
      complex5.equals(complex6);
      complex1.exp();
      complex2.equals(complex3);
      Complex complex7 = complex3.cosh();
      complex5.conjugate();
      complex1.add(complex3);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = Complex.valueOf(0.0, 2482.87);
      complex5.toString();
      complex1.sqrt1z();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.sinh();
      Complex complex8 = Complex.NaN;
      complex8.subtract(complex2);
      complex6.multiply(0.0);
      Complex complex9 = complex4.sqrt();
      complex8.hashCode();
      Complex complex10 = complex2.negate();
      complex10.sin();
      complex9.conjugate();
      Complex complex11 = complex10.tanh();
      Complex complex12 = Complex.valueOf(2482.87, 1289.0);
      Complex complex13 = complex11.sin();
      complex13.atan();
      Complex complex14 = complex12.sin();
      complex14.multiply(7.716762345695022E124);
      complex9.conjugate();
      complex8.acos();
      complex6.reciprocal();
      complex2.toString();
      complex7.subtract(288.25051);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
      Complex complex1 = complex0.divide(5.5846006716348844E-8);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.sinh();
      complex3.multiply(complex0);
      complex0.equals(complex2);
      Complex complex4 = complex0.exp();
      complex4.log();
      complex3.abs();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.valueOf(2.6135319493567953E-15, Double.NaN);
      complex5.equals(complex6);
      complex1.cosh();
      complex3.conjugate();
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract((-1211.8716095111372));
      Complex complex3 = complex2.multiply(1);
      Complex complex4 = complex1.conjugate();
      complex4.ZERO.log();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.I;
      complex7.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex8 = Complex.NaN;
      complex8.subtract(complex0);
      complex6.cos();
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      complex0.sqrt();
      Complex complex2 = complex0.tan();
      Complex.valueOf(1.5218427181243896);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex1.sin();
      complex3.tan();
      complex4.cos();
      Complex complex5 = Complex.valueOf((-1608.0), 1.5218427181243896);
      complex5.atan();
      Complex complex6 = complex2.acos();
      Complex complex7 = Complex.valueOf(1.5218427181243896);
      Complex complex8 = complex5.divide(complex7);
      complex4.toString();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex5.exp();
      Complex complex11 = complex0.sinh();
      complex10.subtract(complex11);
      Complex complex12 = complex1.multiply(1.5218427181243896);
      complex8.sqrt();
      Complex complex13 = new Complex(1.5218427181243896, (-1608.0));
      complex13.hashCode();
      Complex complex14 = complex9.negate();
      Complex complex15 = Complex.ONE;
      complex4.divide(complex2);
      Complex complex16 = Complex.ZERO;
      complex16.INF.createComplex(2.6789862192139226E-8, (-1729.0));
      complex12.createComplex((-1608.0), 1.5573703263204683E-94);
      complex16.cosh();
      complex14.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      complex1.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf(1.5218427181243896);
      Complex complex4 = complex2.INF.add(complex3);
      complex1.ONE.sin();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex7.ZERO.divide(complex1);
      complex6.NaN.toString();
      Complex.valueOf(1.5218427181243896);
      Complex complex9 = complex2.pow(complex4);
      complex1.equals(complex6);
      complex8.exp();
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.exp();
      complex1.sinh();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex0.multiply((-1598.4));
      Complex complex7 = Complex.valueOf(1870.1066839655648, 1870.1066839655648);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = Complex.ONE;
      complex9.hashCode();
      Complex complex10 = complex8.negate();
      complex2.sin();
      complex2.conjugate();
      complex3.tanh();
      Complex.valueOf(4.179048560387963E-9, (-3170.5233179789843));
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.sin();
      complex10.atan();
      complex12.sin();
      complex5.multiply(4.179048560387963E-9);
      complex4.conjugate();
      complex12.acos();
      complex0.reciprocal();
      complex6.toString();
      Complex complex13 = Complex.valueOf(221.23112, 4.179048560387963E-9);
      complex13.subtract(1786.538726808192);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-3.6149218175202596E-8), (-3.6149218175202596E-8));
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = Complex.valueOf((-3.6149218175202596E-8));
      complex6.pow(complex5);
      complex4.equals(complex3);
      complex6.exp();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(4611.43);
      Complex complex2 = complex1.subtract((-1211.8716095111372));
      Complex complex3 = complex0.multiply(1);
      complex3.conjugate();
      complex0.NaN.atan();
      complex1.cosh();
      complex0.pow(complex2);
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double double0 = (-4141.728673);
      Complex complex0 = new Complex((-4141.728673));
      Complex complex1 = null;
      complex0.I.subtract((-4141.728673));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.179048566709334E-9), (-4.179048566709334E-9));
      Complex complex1 = new Complex((-4.179048566709334E-9), (-4.179048566709334E-9));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.tan();
      complex2.createComplex(1329.9, (-4.179048566709334E-9));
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.pow((-0.9178771439688442));
      complex3.exp();
      Complex complex7 = Complex.valueOf((-0.9178771439688442));
      complex5.abs();
      complex1.hashCode();
      complex0.negate();
      Complex complex8 = complex3.multiply(37);
      complex8.INF.negate();
      complex2.subtract((-353.557));
      complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.divide(1723.286936);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex3.multiply(complex4);
      complex5.equals(complex6);
      complex1.exp();
      Complex complex7 = complex0.log();
      complex5.abs();
      complex7.equals(complex3);
      complex3.cosh();
      complex5.conjugate();
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex2.divide(complex1);
      complex4.toString();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex1.exp();
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex7.subtract(complex0);
      Complex complex10 = complex2.multiply((-799.2417756521));
      Complex complex11 = complex10.sqrt();
      complex8.hashCode();
      Complex complex12 = complex11.negate();
      Complex complex13 = new Complex(1.0);
      complex13.sin();
      complex12.conjugate();
      complex11.tanh();
      Complex.valueOf((-2201.9368321415727), 1.0);
      complex13.sin();
      Complex complex14 = complex6.atan();
      complex7.sin();
      Complex complex15 = complex11.multiply((-2201.9368321415727));
      complex14.conjugate();
      complex9.acos();
      complex1.reciprocal();
      complex15.toString();
      complex15.subtract((-799.2417756521));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.abs();
      complex0.sinh();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = new Complex(1344.2, (-1211.8716095111372));
      Complex complex4 = complex3.subtract(3625.4);
      complex2.multiply(3634);
      Complex complex5 = complex2.divide((-3994.728011382733));
      complex5.acos();
      Complex complex6 = Complex.valueOf((-1889.86));
      complex0.sin();
      complex6.abs();
      Complex complex7 = complex4.multiply((-1211.8716095111372));
      complex4.multiply(complex3);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.isNaN();
      Complex complex3 = complex0.divide(2375.123);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.acos();
      Complex.valueOf(20.0);
      complex0.sin();
      complex5.abs();
      complex3.cosh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.divide(1.0);
      complex1.multiply((-1627));
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(2549.571130936291, (-2030.34181));
      Complex complex4 = complex1.multiply(0.41421356237309515);
      Complex complex5 = complex4.atan();
      complex3.tan();
      complex4.conjugate();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex6.add(1806.251);
      complex4.tan();
      complex7.multiply((-857.22221875));
      Complex complex8 = Complex.I;
      complex8.multiply(complex6);
      Complex complex9 = Complex.NaN;
      complex9.add(complex8);
      complex6.getReal();
      complex5.multiply(complex2);
      complex1.createComplex(909.5720802055192, 3223.4103628163);
      try { 
        complex7.nthRoot((-1627));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,627
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.multiply(complex1);
      complex3.divide(complex0);
      Complex.valueOf(3232.84, Double.POSITIVE_INFINITY);
      complex4.createComplex((-5078.0978299), 1.0);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(953.59262089, (-5078.0978299));
      complex0.cosh();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.sinh();
      complex0.multiply(complex1);
      complex0.equals(complex2);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.log();
      complex1.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.abs();
      complex3.equals(complex5);
      Complex complex6 = Complex.I;
      complex1.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.divide(1.0);
      complex1.INF.abs();
      Complex complex2 = complex1.multiply(0);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.conjugate();
      complex0.tanh();
      Complex complex5 = Complex.valueOf(0.39686464768179774, Double.NaN);
      complex2.sin();
      complex3.atan();
      Complex complex6 = complex3.sin();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.multiply(0.0);
      complex5.conjugate();
      Complex complex9 = complex8.acos();
      complex9.reciprocal();
      complex6.toString();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.exp();
      Complex complex1 = complex0.exp();
      complex0.abs();
      complex1.I.readResolve();
      Complex complex2 = complex0.createComplex((-57.281902), 0.4132472276687622);
      Complex complex3 = complex2.add(0.4132472276687622);
      complex3.I.readResolve();
      Complex complex4 = complex3.I.multiply(1);
      Complex complex5 = complex1.ZERO.divide(0.0);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex0.I.atan();
      complex7.NaN.getArgument();
      Complex complex8 = complex7.I.divide(complex0);
      Complex complex9 = complex8.INF.atan();
      complex9.I.toString();
      complex9.nthRoot(1);
      Complex complex10 = complex0.multiply(20.0);
      complex2.isNaN();
      Complex complex11 = complex1.log();
      complex11.INF.add(complex9);
      Complex complex12 = Complex.valueOf(20.0);
      complex2.NaN.tanh();
      Complex complex13 = complex12.negate();
      complex13.INF.toString();
      complex0.ZERO.divide(Double.NaN);
      complex2.readResolve();
      complex1.toString();
      complex1.divide(complex6);
      Complex complex14 = complex6.multiply(complex7);
      complex14.asin();
      complex10.multiply(601);
      complex14.multiply(1);
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex1.getImaginary();
      Complex complex2 = complex1.tanh();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.ZERO.divide(20.0);
      Complex complex4 = complex2.multiply((-716.6172));
      complex0.INF.multiply(complex2);
      Complex complex5 = complex2.log();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.subtract(0.0);
      complex7.ONE.multiply(3351);
      complex6.cosh();
      Complex complex8 = complex4.acos();
      complex3.toString();
      complex5.add((-20.0));
      Complex complex9 = Complex.valueOf((-20.0));
      complex9.ONE.multiply((-406.1169626169));
      complex9.atan();
      Complex complex10 = complex1.atan();
      complex2.readResolve();
      complex8.hashCode();
      Complex complex11 = complex5.atan();
      complex11.ZERO.log();
      complex3.readResolve();
      complex10.negate();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-112.9021907));
      Complex complex1 = complex0.INF.tan();
      complex1.INF.multiply((-112.9021907));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.add((-112.9021907));
      complex0.add(complex2);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.pow(complex5);
      complex6.subtract((-112.9021907));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.I.abs();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex3.divide(complex0);
      Complex.valueOf(1.0);
      complex0.readResolve();
      complex3.INF.abs();
      complex2.tan();
      complex0.abs();
      complex3.I.divide((double) 1970);
      complex0.nthRoot(1970);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.I.acos();
      complex5.I.getField();
      Complex complex7 = complex0.subtract(complex3);
      complex7.NaN.subtract(complex6);
      Complex complex8 = complex1.tan();
      complex8.I.nthRoot(1970);
      complex2.isInfinite();
      Complex.valueOf((-3022.053));
      complex1.pow(complex7);
      complex0.equals("");
      complex4.divide(207.02);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-413);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex2.atan();
      complex1.ONE.nthRoot(105);
      complex1.ZERO.multiply((-413));
      complex2.I.sqrt();
      Complex complex3 = complex1.ZERO.asin();
      complex3.NaN.nthRoot(17);
      complex1.NaN.multiply(213);
      try { 
        complex0.I.nthRoot((-413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -413
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.395158290863037, 1.395158290863037);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.INF.acos();
      complex1.readResolve();
      complex3.ZERO.multiply(complex1);
      complex3.NaN.atan();
      complex3.ZERO.asin();
      complex0.getReal();
      Complex complex4 = complex0.asin();
      complex4.ZERO.atan();
      complex4.getArgument();
      complex0.hashCode();
      complex2.getImaginary();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.log();
      complex2.multiply((-82.3740390998274));
      complex0.toString();
      complex2.add((-82.3740390998274));
      complex3.reciprocal();
      complex1.multiply((-2270));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals("zit");
      complex0.INF.atan();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.createComplex(2.0, 2.0);
      complex2.INF.pow(2.0);
      Complex complex3 = Complex.valueOf(2.210442148596269E80, 2.210442148596269E80);
      Complex complex4 = complex0.add(complex3);
      complex4.tan();
      Complex complex5 = complex0.sinh();
      complex0.ZERO.divide(2.210442148596269E80);
      complex5.NaN.asin();
      complex3.abs();
      complex3.pow(2.210442148596269E80);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.I.add(complex2);
      Complex complex5 = complex0.pow(complex1);
      complex1.INF.tan();
      Complex complex6 = complex1.NaN.pow(0.0);
      complex5.I.sin();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.ONE.pow(complex2);
      complex7.ZERO.getArgument();
      complex2.readResolve();
      complex0.getField();
      complex1.sinh();
      complex7.divide(0.0);
      complex5.getImaginary();
      complex8.subtract(complex6);
      complex1.isInfinite();
      Complex complex9 = complex4.reciprocal();
      complex3.sqrt();
      Complex.valueOf(1728.0518455279);
      complex9.multiply(complex5);
      complex7.sqrt1z();
      complex3.isInfinite();
      complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0), 0.0);
      complex0.add(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.multiply(196);
      Complex complex4 = complex3.add(0.0);
      complex4.ZERO.multiply(0.0);
      complex0.multiply(complex2);
      complex4.divide(0.0);
      complex0.multiply(0.0);
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(922.0726644896216);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.createComplex(922.0726644896216, 2.0);
      complex2.ONE.hashCode();
      complex1.INF.getField();
      complex2.ONE.log();
      complex0.pow(complex1);
      complex2.cos();
      complex0.ZERO.pow(0.0);
      complex1.toString();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(1.5218427181243896);
      Complex complex5 = complex3.INF.add(complex4);
      Complex complex6 = complex1.ONE.sin();
      complex6.NaN.tan();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.ZERO.acos();
      complex9.ZERO.divide(complex1);
      complex8.NaN.toString();
      Complex complex10 = complex2.sqrt1z();
      complex10.ONE.exp();
      Complex complex11 = complex10.ONE.sinh();
      complex1.I.subtract(complex11);
      Complex complex12 = complex5.multiply(1.5218427181243896);
      Complex complex13 = complex12.INF.sqrt();
      complex13.I.hashCode();
      Complex complex14 = complex8.negate();
      complex14.ZERO.sin();
      complex0.conjugate();
      complex6.tanh();
      Complex complex15 = Complex.valueOf(1.5218427181243896, 0.0);
      complex15.INF.sin();
      Complex complex16 = complex4.atan();
      complex1.sin();
      Complex complex17 = complex6.multiply(1400.99934);
      complex10.conjugate();
      complex16.acos();
      complex16.reciprocal();
      complex17.toString();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.ZERO.asin();
      complex3.I.multiply(2.0);
      Complex.valueOf(2.0);
      complex3.reciprocal();
      complex0.nthRoot(37);
      complex0.abs();
      Complex complex4 = Complex.valueOf(0.0, (-3.861762510530086E240));
      Complex complex5 = complex4.ZERO.sqrt();
      complex4.ONE.subtract(complex1);
      Complex complex6 = complex1.sinh();
      complex4.abs();
      complex4.INF.toString();
      Complex complex7 = complex6.ZERO.subtract(complex4);
      complex7.ONE.conjugate();
      complex4.ONE.sqrt();
      complex0.nthRoot(1);
      complex2.pow(complex4);
      complex0.negate();
      complex5.createComplex(0.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.sinh();
      complex0.multiply(complex1);
      complex0.equals(complex2);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.log();
      complex4.abs();
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.acos();
      Complex complex1 = complex0.divide(0.0);
      complex1.toString();
      complex0.isNaN();
      complex0.getArgument();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2610.0), (-2610.0));
      Complex complex1 = complex0.ONE.exp();
      complex0.NaN.nthRoot(1);
      Complex complex2 = complex0.tanh();
      complex2.ONE.getField();
      complex0.INF.hashCode();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex2.asin();
      complex6.ONE.readResolve();
      complex6.I.readResolve();
      Complex complex7 = complex1.INF.sqrt();
      Complex complex8 = complex7.INF.add(1908.65);
      complex8.INF.acos();
      complex8.ZERO.conjugate();
      Complex complex9 = complex1.I.sqrt1z();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex0.atan();
      complex11.ONE.multiply(complex0);
      Complex complex12 = Complex.ZERO;
      complex5.ONE.add(complex12);
      complex5.equals("REAL_FORMAT");
      Complex complex13 = complex5.atan();
      complex0.NaN.multiply(1);
      complex13.I.divide(complex6);
      complex1.readResolve();
      complex1.nthRoot(1);
      complex9.getField();
      complex5.getImaginary();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.abs();
      complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      complex2.ZERO.acos();
      Complex complex3 = complex1.ONE.sin();
      complex2.INF.readResolve();
      complex2.equals(complex1);
      Complex.valueOf(1.0);
      complex1.nthRoot(1);
      Complex complex4 = complex3.acos();
      complex4.I.reciprocal();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2.546119213104248);
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = new Complex(2.546119213104248);
      complex2.ONE.multiply(complex3);
      Complex complex4 = complex0.add(2.546119213104248);
      Complex complex5 = complex4.subtract(0.04394212365150452);
      complex5.multiply(complex0);
      Complex complex6 = complex5.pow((-1.0));
      Complex complex7 = complex6.INF.acos();
      complex7.I.abs();
      complex1.cos();
      complex4.sin();
      complex5.getReal();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2331.1320225697, 2331.1320225697);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(20.0);
      Complex complex3 = complex2.ONE.tan();
      complex3.cos();
      Complex complex4 = complex0.cosh();
      complex4.nthRoot(2182);
      Complex complex5 = complex0.multiply(2200.48583412344);
      Complex complex6 = complex1.subtract(2200.48583412344);
      complex6.I.negate();
      complex0.sqrt();
      complex5.isInfinite();
      complex0.sqrt();
      complex0.negate();
      Complex complex7 = complex6.conjugate();
      try { 
        complex7.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.acos();
      Complex complex1 = complex0.sqrt1z();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      complex1.pow(complex0);
      complex1.NaN.nthRoot(57);
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.ONE.getArgument();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = Complex.valueOf((-1550.95812), 2.0358991622924805);
      Complex complex5 = complex4.INF.sinh();
      complex0.ONE.subtract(complex4);
      complex0.exp();
      complex3.sin();
      complex5.subtract((-829.86621068458));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      complex1.NaN.getArgument();
      complex1.getField();
      Complex complex2 = complex0.ZERO.sin();
      complex0.isNaN();
      Complex complex3 = complex0.cos();
      complex3.INF.hashCode();
      Complex complex4 = complex3.conjugate();
      complex2.ZERO.toString();
      complex4.ONE.getField();
      Complex complex5 = complex2.ZERO.reciprocal();
      complex3.ZERO.toString();
      complex5.INF.sin();
      Complex complex6 = complex4.pow(complex2);
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = Complex.valueOf(3.8718282216768776E250, 3.8718282216768776E250);
      complex2.INF.sin();
      complex8.I.pow((-1.6802196396307013E-7));
      complex2.negate();
      Complex complex9 = complex3.tanh();
      complex9.NaN.createComplex(1967.6402160084092, 3.8718282216768776E250);
      Complex complex10 = complex3.pow(Double.NaN);
      complex7.sinh();
      complex1.cos();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.837218213904), 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.NaN.pow((-299.837218213904));
      complex1.acos();
      complex3.I.abs();
      Complex complex4 = complex0.asin();
      complex0.log();
      complex0.isInfinite();
      complex0.I.add(complex4);
      complex2.subtract(complex1);
      complex2.log();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(440.7780125932);
      double double0 = 0.0;
      Complex complex1 = complex0.atan();
      try { 
        complex1.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex3.tan();
      complex4.I.createComplex(0.7853981633974483, 917.0524742298506);
      complex4.sinh();
      complex3.NaN.acos();
      Complex complex5 = complex0.pow(3184.17058042071);
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.INF.abs();
      complex1.abs();
      complex2.hashCode();
      complex6.negate();
      complex6.multiply((-2825));
      complex5.subtract(0.7853981633974483);
      complex7.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex1.cosh();
      complex4.subtract(complex1);
      complex3.pow((-7.049068240916723E166));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2457.682338), 1185.8614598566);
      Complex complex1 = complex0.ONE.sinh();
      complex1.NaN.acos();
      Complex complex2 = complex0.createComplex(1185.8614598566, (-2457.682338));
      complex2.ONE.toString();
      complex2.ONE.divide((-2457.682338));
      complex2.ONE.exp();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex0.NaN.subtract(0.0);
      Complex complex6 = complex4.NaN.add(1.3017010688781738);
      complex5.ZERO.divide(complex3);
      complex6.NaN.add(complex2);
      complex6.NaN.divide(complex0);
      Complex complex7 = complex0.asin();
      complex0.NaN.asin();
      complex3.ONE.negate();
      complex0.tanh();
      complex7.ONE.cosh();
      complex6.tanh();
      Complex complex8 = complex7.pow(complex6);
      complex5.acos();
      complex6.sinh();
      complex8.multiply(1.1339665711932977E-126);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(4611.43);
      complex1.subtract((-1211.8716095111372));
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.divide(3.529920406834134E113);
      complex3.I.acos();
      Complex.valueOf(0.0);
      Complex complex4 = complex3.sin();
      complex2.abs();
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isInfinite();
      Complex complex1 = new Complex(0.0);
      complex1.ONE.add(complex0);
      complex0.add(complex1);
      complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2375.123, 0.0);
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.add(319.350146);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(1.198363039426718E-70, 1.198363039426718E-70);
      Complex complex1 = complex0.subtract((-1.0));
      complex1.getArgument();
      complex1.ONE.divide(complex0);
      complex0.pow((-322.0462483057));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(626.35303446, 626.35303446);
      complex0.I.createComplex(626.35303446, (-1.0));
      complex0.sinh();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.createComplex(626.35303446, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.conjugate();
      complex3.NaN.sqrt1z();
      Complex complex4 = Complex.valueOf((-1.0), (-1.5683631181406778E-7));
      complex4.I.cosh();
      complex0.multiply((-1.5683631181406778E-7));
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1997.037), (-20.0));
      complex0.hashCode();
      Complex complex1 = new Complex((-1214.4));
      complex1.acos();
      Complex complex2 = complex1.I.divide((-20.0));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.INF.pow(complex1);
      complex0.hashCode();
      Complex complex6 = Complex.valueOf(1281.0, 0.0);
      complex1.ZERO.toString();
      complex6.multiply(0);
      complex6.I.exp();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex7.multiply((-20.0));
      complex7.atan();
      complex3.tan();
      Complex complex9 = complex4.conjugate();
      complex9.NaN.divide(complex0);
      Complex complex10 = complex2.add(Double.POSITIVE_INFINITY);
      complex10.INF.tan();
      Complex complex11 = complex8.multiply(Double.POSITIVE_INFINITY);
      complex10.multiply(complex5);
      complex4.add(complex11);
      complex11.getReal();
      complex8.multiply(complex7);
      complex2.createComplex(0.4944818615913391, 6.283185307179586);
      try { 
        complex9.nthRoot((-505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -505
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3323.68474905);
      boolean boolean0 = complex0.equals("|j:9c,/KE");
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals(3323.68474905, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(144);
      assertEquals(144.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.NaN.multiply(7);
      Complex complex4 = complex3.ONE.subtract(complex0);
      complex2.ONE.subtract(0.0);
      complex0.getReal();
      Complex complex5 = complex2.add(complex4);
      assertSame(complex4, complex3);
      assertSame(complex5, complex1);
      
      Complex complex6 = complex2.subtract((-20.0));
      complex6.hashCode();
      assertEquals(20.54030230586814, complex6.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.NaN.multiply(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.INF.abs();
      double double1 = 0.0;
      Complex complex3 = Complex.valueOf(0.0, 0.4374985694885254);
      complex3.NaN.readResolve();
      complex0.abs();
      complex0.ONE.multiply(20.0);
      complex3.pow(0.0);
      try { 
        complex0.nthRoot((-605));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -605
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 1400.911;
      Complex complex0 = new Complex(0.0, 1400.911);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex.valueOf((-408.9910030303115));
      complex2.readResolve();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.subtract(complex3);
      complex4.ONE.asin();
      complex1.getImaginary();
      complex4.INF.log();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.NaN.divide(complex1);
      complex6.ONE.readResolve();
      Complex complex7 = Complex.valueOf(0.0, 1400.911);
      complex7.ONE.pow(complex3);
      complex5.NaN.asin();
      complex7.ZERO.getArgument();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3221.40053), 2700.4838);
      Complex complex1 = complex0.multiply((-3115.578786));
      Complex complex2 = complex0.I.add(complex1);
      assertEquals(1.0036527152477156E7, complex2.getReal(), 0.01);
      assertEquals((-8413569.039216667), complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.multiply((-143));
      Complex complex4 = complex3.ONE.divide((double) (-143));
      Complex complex5 = complex3.ZERO.sqrt();
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex3.NaN.subtract((-1597.5584542112474));
      Complex complex7 = complex6.divide(complex1);
      assertFalse(complex7.equals((Object)complex5));
      
      Complex complex8 = complex3.ZERO.pow(complex0);
      Complex complex9 = complex8.atan();
      complex1.getField();
      Complex complex10 = complex8.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      
      complex0.readResolve();
      complex4.equals(complex9);
      assertEquals((-0.006993006993006993), complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex11 = complex9.tanh();
      assertEquals((-1.4352233828042333E9), complex3.getReal(), 0.01);
      assertEquals(1.2031405156079834E9, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex11, complex8);
      assertTrue(complex8.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.NaN.reciprocal();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.pow(complex3);
      complex3.isNaN();
      Complex complex5 = complex4.conjugate();
      complex5.cosh();
      assertSame(complex5, complex2);
      
      Object object0 = complex3.readResolve();
      boolean boolean0 = complex0.equals(object0);
      assertFalse(boolean0);
      assertTrue(object0.equals((Object)complex3));
      assertFalse(object0.equals((Object)complex1));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertSame(complex0, complex4);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.NaN.pow(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
      
      Complex complex4 = complex0.divide((double) 1);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.subtract(complex3);
      assertSame(complex5, complex3);
      assertTrue(complex3.equals((Object)complex2));
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide(3123.4038910466707);
      Complex complex2 = complex0.subtract(517.90192);
      Complex complex3 = complex0.INF.createComplex(2247.3433888781683, 2247.3433888781683);
      assertFalse(complex3.isInfinite());
      
      complex2.getImaginary();
      Complex complex4 = complex2.reciprocal();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      complex2.getReal();
      Complex complex5 = complex0.log();
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex5.getImaginary(), 0.01);
      assertTrue(complex5.isInfinite());
      assertTrue(complex0.equals((Object)complex2));
  }
}
