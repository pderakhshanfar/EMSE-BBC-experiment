/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:19:21 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0032335349203891);
      Complex complex1 = new Complex(1.0032335349203891, (-5.5299180508885456E281));
      Complex complex2 = complex0.INF.createComplex((-5.5299180508885456E281), 4193.0);
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex0.NaN.multiply(complex1);
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex4.INF.sqrt();
      complex2.ONE.getArgument();
      complex6.acos();
      complex3.INF.multiply(complex5);
      Complex complex7 = complex1.ONE.createComplex((-5.5299180508885456E281), 6.283185307179586);
      complex7.abs();
      Complex complex8 = complex0.reciprocal();
      complex3.sqrt1z();
      Complex complex9 = complex8.sin();
      complex9.I.exp();
      Complex complex10 = complex9.createComplex(0.56684410572052, 0.56684410572052);
      Complex complex11 = Complex.ONE;
      complex9.INF.divide(complex11);
      complex6.negate();
      complex9.cosh();
      complex10.ZERO.pow(complex1);
      complex8.negate();
      complex10.exp();
      complex0.atan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.abs();
      complex0.getField();
      Complex complex1 = new Complex(1.0, 917.47856);
      Complex complex2 = complex1.ONE.add(477370.7469720808);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.NaN.pow(complex1);
      complex4.NaN.tan();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex6.conjugate();
      complex7.ONE.nthRoot(391);
      Complex complex8 = complex0.log();
      complex8.I.multiply(761.9325262839454);
      complex8.I.getField();
      Complex complex9 = Complex.valueOf(1862.619, 4611.43);
      Complex complex10 = Complex.valueOf(1492.27, 611.36);
      complex1.ZERO.subtract(complex3);
      Complex complex11 = complex9.ZERO.multiply(1.0);
      Complex complex12 = complex3.atan();
      complex12.ZERO.getField();
      complex12.ZERO.acos();
      Complex.valueOf(1318.90540588);
      complex5.abs();
      complex2.asin();
      complex11.createComplex(4799.41151546537, 1.0);
      complex10.add(complex8);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex1.tanh();
      complex2.cos();
      complex2.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.NaN.abs();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex3.ONE.acos();
      Complex.valueOf(20.0, 2100.09806646087);
      complex0.INF.getArgument();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.multiply(complex5);
      complex6.tan();
      Complex complex7 = complex6.negate();
      complex7.INF.multiply(604);
      complex6.asin();
      Complex complex8 = complex3.cosh();
      Complex complex9 = complex8.ZERO.sqrt1z();
      complex3.ZERO.sinh();
      Complex complex10 = complex4.sqrt1z();
      complex9.log();
      Complex complex11 = Complex.INF;
      complex10.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.sinh();
      complex3.cosh();
      Complex complex4 = Complex.valueOf((-799.78206), Double.POSITIVE_INFINITY);
      complex2.multiply(complex4);
      Complex complex5 = complex3.exp();
      complex1.abs();
      complex2.readResolve();
      complex3.equals(complex5);
      complex4.nthRoot(2098);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.sinh();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(20.0);
      Complex complex3 = new Complex(20.0);
      complex3.ONE.negate();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(501.749, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex1.sqrt1z();
      complex0.multiply(501.749);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(501.749, Double.POSITIVE_INFINITY);
      complex0.multiply((-2601));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1994.4), Double.POSITIVE_INFINITY);
      complex0.INF.add(complex1);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2617.2756915255));
      Complex complex1 = complex0.ONE.divide((-2617.2756915255));
      Complex complex2 = complex1.NaN.createComplex(3.2681330143024294E14, (-1284.6));
      Complex.valueOf(1.000037622726092, 1.000037622726092);
      complex1.sqrt1z();
      complex1.tan();
      complex2.getArgument();
      Complex complex3 = new Complex(1.000037622726092);
      complex2.acos();
      Complex complex4 = Complex.INF;
      complex4.subtract((-597.59299264));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex0.reciprocal();
      complex1.asin();
      Complex complex2 = Complex.valueOf((-1158.7908168878994), (-1092.9842151525904));
      Complex complex3 = complex2.ZERO.asin();
      complex3.ONE.readResolve();
      complex2.getImaginary();
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply((-688.4268605316));
      complex0.getReal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.5314373779304356E296));
      complex0.divide(2.0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex.valueOf(Double.NaN);
      Complex complex0 = new Complex((-20.0), (-799.78206));
      Complex complex1 = complex0.divide((-20.0));
      Complex complex2 = complex1.tanh();
      complex2.cosh();
      Complex complex3 = complex1.sinh();
      complex1.sqrt1z();
      complex2.toString();
      complex3.getArgument();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(3665);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.subtract(complex0);
      complex1.getArgument();
      complex0.subtract(431.9164);
      complex3.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(1.5218427181243896);
      complex3.INF.add(complex4);
      Complex complex5 = complex1.exp();
      Complex complex6 = Complex.valueOf((-639650.3434978436), (-639650.3434978436));
      complex2.atan();
      complex5.tan();
      Complex complex7 = complex2.conjugate();
      complex7.divide(complex2);
      complex1.add((-2561.6274435));
      complex6.tan();
      Complex complex8 = Complex.NaN;
      complex8.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-799.78206));
      Complex complex2 = Complex.valueOf((-799.78206));
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex0.tan();
      complex2.atan();
      complex4.acos();
      complex0.divide(complex3);
      complex4.toString();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1997.037), (-20.0));
      complex0.hashCode();
      Complex complex1 = new Complex((-1214.4));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.I.divide((-20.0));
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex4.INF.pow(complex1);
      complex0.hashCode();
      complex1.ZERO.toString();
      Complex complex7 = complex0.I.exp();
      Complex complex8 = complex0.tan();
      Complex complex9 = Complex.valueOf((-2067.180201));
      Complex complex10 = Complex.INF;
      complex6.isInfinite();
      Complex complex11 = new Complex(Double.NaN);
      complex11.pow(complex2);
      complex10.asin();
      Complex complex12 = new Complex(641.3, (-3700.9932079093));
      Object object0 = new Object();
      complex4.equals(object0);
      complex0.atan();
      complex9.multiply(complex3);
      complex7.cosh();
      complex0.divide(complex2);
      complex5.add(complex8);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1997.037), (-20.0));
      complex0.hashCode();
      Complex complex1 = new Complex(1.2533141373155001, (-1214.4));
      Complex complex2 = complex1.subtract((-1997.037));
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.divide((-1214.4));
      complex4.I.sinh();
      complex2.pow((-709.479));
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cos();
      complex3.ZERO.negate();
      complex2.cosh();
      Complex complex4 = complex0.INF.tanh();
      Complex complex5 = complex4.ZERO.acos();
      complex4.NaN.readResolve();
      complex0.divide(20.0);
      complex1.getImaginary();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.pow(20.0);
      complex7.NaN.abs();
      complex7.getImaginary();
      Complex.valueOf(2654.489323556935);
      complex0.exp();
      try { 
        complex3.nthRoot((-3753));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,753
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = (Complex)complex1.readResolve();
      complex1.tan();
      Complex complex5 = complex0.conjugate();
      complex5.divide(complex3);
      Complex complex6 = Complex.NaN;
      double double0 = (-3315.9);
      Complex complex7 = complex6.add((-3315.9));
      complex0.tan();
      Complex complex8 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex9.multiply(complex0);
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex10.add(complex7);
      complex10.getReal();
      complex4.multiply(complex2);
      complex5.createComplex(0.4944818615913391, 1823.2130205239);
      try { 
        complex8.nthRoot((-505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -505
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-1214.4));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.I.divide((-20.0));
      complex1.multiply(complex2);
      complex1.readResolve();
      Complex complex3 = new Complex((-1214.4), (-20.0));
      complex3.getReal();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.tanh();
      complex0.sinh();
      Complex complex3 = complex2.multiply(complex1);
      Object object0 = new Object();
      Complex complex4 = new Complex(1.2244183812423448E-7);
      complex2.NaN.cosh();
      Object object1 = complex0.readResolve();
      complex4.equals(object1);
      Complex complex5 = complex4.exp();
      complex3.abs();
      complex5.reciprocal();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.add((-228.784));
      Complex complex3 = Complex.ZERO;
      complex2.sqrt1z();
      complex0.tan();
      Complex.valueOf((-228.784));
      Complex complex4 = Complex.INF;
      complex4.isInfinite();
      Complex complex5 = Complex.ZERO;
      complex2.pow(complex5);
      complex0.asin();
      Complex complex6 = new Complex((-228.784), 1.0);
      Complex complex7 = Complex.NaN;
      complex7.equals(complex5);
      complex5.atan();
      try { 
        complex7.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide((-799.78206));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.sinh();
      complex2.multiply(complex1);
      Object object0 = new Object();
      complex3.equals(object0);
      complex2.exp();
      complex3.log();
      complex2.abs();
      Object object1 = complex0.readResolve();
      complex2.equals(object1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(1329.9, 1329.9);
      Complex complex1 = complex0.subtract(970.0);
      complex1.getArgument();
      Complex complex2 = new Complex(1627.15435209);
      complex0.divide(complex2);
      complex0.pow((-1249.1056266198));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(4611.43);
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = Complex.valueOf(2.65402117447546, (double) 1);
      complex2.atan();
      Complex complex4 = Complex.ONE;
      complex4.tan();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex5.divide(complex1);
      complex0.add(Double.NaN);
      complex6.tan();
      complex3.pow((-322.0462483057));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(1.198363039426718E-70, 1.198363039426718E-70);
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.tanh();
      complex2.toString();
      complex1.conjugate();
      Complex complex3 = Complex.valueOf(2094.11709642);
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf((-0.7615941559557649), (-0.7615941559557649));
      Complex complex6 = complex5.add((-0.7615941559557649));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex7.tan();
      complex8.add(2094.11709642);
      Complex complex10 = Complex.valueOf(1.198363039426718E-70);
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.INF;
      complex5.isInfinite();
      complex6.pow(complex4);
      complex3.asin();
      Complex complex13 = new Complex((-0.7615941559557649), 1.0);
      complex8.equals(complex1);
      complex9.atan();
      complex10.multiply(complex8);
      complex0.cosh();
      complex2.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(4611.43);
      Complex complex2 = complex0.multiply(1);
      complex2.I.divide(complex0);
      Complex complex3 = complex2.divide(3.529920406834134E113);
      complex3.I.acos();
      complex1.log();
      complex0.equals(complex1);
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf(1329.9);
      complex4.reciprocal();
      complex2.nthRoot(37);
      Complex complex5 = Complex.valueOf(1329.9, 2.0);
      complex5.abs();
      complex3.subtract((-3.861762510530086E240));
      complex5.multiply(37);
      Complex.valueOf(3671.9113516724765);
      Complex complex6 = Complex.INF;
      complex6.divide(2.0);
      Complex complex7 = complex1.acos();
      Complex.valueOf((double) 37);
      complex7.sin();
      complex3.abs();
      complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf(988.6784367592624, 3.141592653589793);
      complex4.getField();
      complex4.reciprocal();
      complex1.tanh();
      complex3.toString();
      Complex complex5 = new Complex(3.141592653589793);
      complex5.add(3.141592653589793);
      Complex complex6 = complex2.add(1329.9);
      complex1.divide(complex6);
      complex3.sin();
      Complex complex7 = Complex.valueOf(1329.9, (-558.87996746233));
      complex2.getField();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex7.tanh();
      complex9.I.createComplex(988.6784367592624, 1329.9);
      complex2.toString();
      complex9.divide((-558.87996746233));
      complex7.acos();
      Complex complex10 = Complex.valueOf(3.141592653589793);
      complex1.sin();
      complex10.ONE.negate();
      complex8.abs();
      Complex.valueOf(4.2269712317468864E-156, 1329.9);
      complex10.multiply(988.6784367592624);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.divide(complex1);
      complex1.toString();
      Complex complex5 = complex3.sqrt1z();
      complex2.exp();
      complex4.sinh();
      complex5.subtract(complex4);
      complex2.subtract(Double.NaN);
      complex1.multiply(0);
      Complex complex6 = complex3.divide(0.7615941559557649);
      complex6.acos();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = Complex.I;
      complex8.createComplex((-1.8889614379831606E233), Double.NaN);
      // Undeclared exception!
      complex7.nthRoot(2145493370);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-270.877257822), (-5078.0978299));
      Complex complex1 = complex0.createComplex(2998.64813401349, (-270.877257822));
      complex0.cosh();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(4611.43);
      Complex complex2 = complex0.multiply(1);
      complex2.I.divide(complex0);
      Complex complex3 = complex2.divide(3.529920406834134E113);
      complex3.I.acos();
      complex1.log();
      complex0.equals(complex1);
      Complex complex4 = complex3.reciprocal();
      complex4.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1997.037), (-20.0));
      complex0.hashCode();
      Complex complex1 = new Complex((-1214.4));
      complex1.acos();
      Complex complex2 = complex1.I.divide((-20.0));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.INF.pow(complex1);
      complex0.hashCode();
      complex1.ZERO.toString();
      complex1.multiply(0);
      Complex complex6 = complex0.I.exp();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      complex7.atan();
      complex3.tan();
      Complex complex8 = complex4.conjugate();
      complex8.NaN.divide(complex0);
      Complex complex9 = complex2.add(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.INF.tan();
      Complex complex11 = complex6.multiply(Double.POSITIVE_INFINITY);
      complex9.multiply(complex5);
      complex4.add(complex11);
      complex11.getReal();
      complex4.multiply(complex7);
      Complex complex12 = Complex.INF;
      complex12.multiply(complex7);
      complex10.cosh();
      complex12.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      complex1.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf(1.5218427181243896);
      Complex complex4 = complex2.INF.add(complex3);
      Complex complex5 = complex1.ONE.sin();
      complex5.NaN.tan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.I;
      complex8.nthRoot(243);
      complex8.abs();
      Complex.valueOf((double) 243, 1.5218427181243896);
      complex4.sqrt();
      complex7.subtract(complex0);
      complex7.sinh();
      complex2.toString();
      complex4.subtract(complex8);
      complex8.sqrt();
      Complex complex9 = Complex.valueOf(20.0, (-1199.0));
      complex9.nthRoot(37);
      Complex complex10 = complex7.pow(complex8);
      complex10.negate();
      complex4.createComplex(0.0, 243);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex2.divide(complex5);
      complex6.toString();
      Complex complex9 = complex0.sqrt1z();
      complex3.exp();
      Complex complex10 = complex2.sinh();
      complex7.subtract(complex9);
      Complex complex11 = complex7.subtract((-1333.688094797767));
      complex11.multiply(691);
      complex10.divide((-1333.688094797767));
      complex7.acos();
      Complex.valueOf(0.6430866718292236);
      complex5.sin();
      complex8.abs();
      complex9.multiply((double) 691);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(1.5218427181243896);
      complex3.INF.add(complex4);
      Complex complex5 = complex1.ONE.sin();
      complex5.NaN.tan();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.ZERO.acos();
      complex8.ZERO.divide(complex1);
      complex8.toString();
      Complex complex9 = complex2.sqrt1z();
      complex9.ONE.exp();
      Complex complex10 = complex9.ONE.sinh();
      Complex complex11 = complex1.I.subtract(complex10);
      complex1.subtract(0.7615941559557649);
      complex11.multiply(0);
      complex8.divide((double) 0);
      complex8.acos();
      Complex.valueOf(0.7615941559557649);
      complex10.createComplex(2.0, 0.7615941559557649);
      // Undeclared exception!
      complex5.nthRoot(2145493370);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.divide(1.0);
      complex1.INF.abs();
      Object object0 = complex1.readResolve();
      complex1.equals(complex0);
      Complex complex2 = complex0.exp();
      complex2.I.tanh();
      Complex complex3 = complex0.log();
      complex3.abs();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.ZERO.asin();
      Complex.valueOf(2.0);
      Complex complex4 = complex3.reciprocal();
      complex0.nthRoot(37);
      complex0.abs();
      complex4.subtract(1.0);
      complex4.multiply(37);
      Complex complex5 = Complex.valueOf((-3.861762510530086E240));
      Complex complex6 = complex5.divide(Double.POSITIVE_INFINITY);
      complex2.acos();
      Complex.valueOf(Double.NaN);
      Complex complex7 = complex6.sin();
      complex1.abs();
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf(988.6784367592624, 3.141592653589793);
      complex4.getField();
      Complex complex5 = complex4.reciprocal();
      complex1.tanh();
      complex3.toString();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = Complex.valueOf(3.141592653589793);
      complex7.negate();
      Complex complex8 = complex1.add((-0.7615941559557649));
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex4.tan();
      complex2.I.add(2094.11709642);
      Complex.valueOf((-1077.98686579496));
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.INF;
      complex1.isInfinite();
      complex11.pow(complex10);
      complex1.asin();
      Complex complex14 = new Complex((-1077.98686579496), 1.0);
      complex6.equals(complex14);
      complex8.atan();
      complex10.multiply(complex2);
      complex5.cosh();
      complex2.divide(complex14);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(1329.9);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.sinh();
      complex0.multiply(complex1);
      complex0.equals(complex2);
      complex3.exp();
      Complex complex4 = complex3.log();
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.sinh();
      complex0.multiply(complex1);
      complex0.equals(complex2);
      complex3.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.sin();
      complex0.abs();
      complex0.multiply(1329.9);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1997.037), (-20.0));
      complex0.hashCode();
      Complex complex1 = new Complex((-1214.4));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.add(complex1);
      complex3.I.cos();
      complex3.INF.pow(complex1);
      complex0.hashCode();
      complex2.multiply(complex2);
      complex1.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.log();
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sinh();
      complex0.toString();
      Complex complex3 = complex1.multiply(0);
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.valueOf(0.0, Double.NaN);
      complex5.atan();
      Complex complex6 = complex4.tan();
      complex6.conjugate();
      complex2.divide(complex0);
      Complex complex7 = complex5.add((double) 0);
      complex5.tan();
      Complex complex8 = complex7.multiply((-289.5564204));
      Complex complex9 = complex7.multiply(complex8);
      complex7.add(complex8);
      complex4.getReal();
      complex3.multiply(complex0);
      complex3.createComplex(148.43460259, (-3278.8));
      complex9.nthRoot(727);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.tanh();
      complex0.sinh();
      Complex complex2 = new Complex((-1564.37306), Double.NaN);
      Complex complex3 = complex2.multiply(complex1);
      complex2.equals(complex1);
      Complex complex4 = complex3.exp();
      complex4.log();
      complex4.abs();
      complex4.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-1214.4));
      complex0.acos();
      complex0.I.divide((-20.0));
      Complex complex1 = complex0.tanh();
      complex0.sinh();
      complex1.readResolve();
      complex0.exp();
      Complex complex2 = complex1.log();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = complex0.subtract((-1211.8716095111372));
      Complex complex2 = complex0.multiply(1);
      complex1.conjugate();
      Complex complex3 = complex2.add(0.0);
      complex2.sqrt1z();
      Complex complex4 = complex2.tan();
      complex3.sin();
      Complex complex5 = complex0.add((double) 1);
      complex1.isInfinite();
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = complex0.asin();
      complex6.equals(complex7);
      complex4.atan();
      complex0.multiply(complex4);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.tanh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.I;
      complex4.equals(complex3);
      Complex complex5 = Complex.NaN;
      complex5.exp();
      complex2.log();
      complex3.abs();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = Complex.ZERO;
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(1.5218427181243896);
      complex3.INF.add(complex4);
      Complex complex5 = complex1.ONE.sin();
      complex5.NaN.tan();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.ZERO.acos();
      complex8.ZERO.divide(complex1);
      complex7.NaN.toString();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex9.ONE.exp();
      Complex complex11 = complex9.ONE.sinh();
      Complex complex12 = complex1.I.subtract(complex11);
      Complex complex13 = complex12.add((-821.03174673));
      Complex complex14 = complex13.sqrt1z();
      complex4.tan();
      Complex complex15 = Complex.INF;
      Complex complex16 = complex15.sin();
      complex16.add((-2795.4452));
      complex14.isInfinite();
      complex10.pow(complex4);
      Complex complex17 = new Complex(1.5218427181243896);
      complex17.asin();
      complex5.equals((Object) null);
      complex10.atan();
      try { 
        complex8.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1065.0, 1.291561142865928E207);
      Complex complex1 = Complex.valueOf(6.283185307179586, 6.47023467943241E-26);
      Complex complex2 = complex0.NaN.createComplex(1.291561142865928E207, (-347.3602774911566));
      complex2.I.createComplex(1065.0, 6.283185307179586);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.I.sqrt();
      complex2.INF.sqrt1z();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex1.INF.add(1065.0);
      complex6.sqrt1z();
      complex0.readResolve();
      Complex.valueOf(1.291561142865928E207, 1065.0);
      complex1.multiply((-1353.202746));
      complex3.add((-20.0));
      complex3.sqrt();
      complex5.subtract((-128.49237633));
      complex3.readResolve();
      complex2.negate();
      complex4.getImaginary();
      complex4.add(1848345.5282253206);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(918.822351, 930.1293318531);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.valueOf(5243.92509451519, (-20.0));
      Complex complex5 = complex1.ZERO.negate();
      Complex complex6 = complex4.ZERO.multiply(930.1293318531);
      complex5.NaN.divide(complex1);
      complex4.INF.exp();
      Complex complex7 = complex1.add(918.822351);
      Complex complex8 = complex7.NaN.reciprocal();
      Complex complex9 = complex8.INF.divide(complex5);
      Complex complex10 = complex9.add(complex6);
      complex10.NaN.atan();
      complex10.NaN.getArgument();
      complex6.INF.toString();
      Complex complex11 = complex1.multiply(2131786546);
      complex3.subtract(complex6);
      Complex complex12 = complex7.subtract(complex11);
      Complex complex13 = complex11.createComplex(6.283185307179586, 616.3934683164555);
      complex13.ZERO.toString();
      complex0.cos();
      complex3.getField();
      Complex complex14 = complex8.add(complex2);
      complex12.isInfinite();
      complex8.I.acos();
      Complex complex15 = complex12.pow(Double.NaN);
      complex7.exp();
      complex14.log();
      complex2.getReal();
      complex15.getField();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(4611.43);
      Complex complex2 = complex0.multiply((-2677.01722054));
      Complex complex3 = complex1.sqrt();
      complex3.hashCode();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex4.sin();
      complex4.conjugate();
      complex4.tanh();
      Complex complex6 = Complex.valueOf(4611.43, 47.78187);
      complex2.sin();
      Complex complex7 = complex2.atan();
      complex7.sin();
      complex4.multiply(4611.43);
      complex6.conjugate();
      Complex complex8 = complex4.acos();
      complex8.reciprocal();
      complex5.toString();
      Complex complex9 = Complex.INF;
      complex9.subtract((-2677.01722054));
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex3.I.multiply(2.0);
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = complex3.tanh();
      complex2.multiply(complex0);
      complex1.equals(complex5);
      Complex complex7 = complex4.exp();
      complex6.INF.multiply((double) 37);
      complex3.abs();
      complex7.equals(complex6);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.reciprocal();
      complex0.nthRoot(1092);
      complex1.abs();
      Complex complex2 = Complex.valueOf(755.3949972859, (-4377.95336915086));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex0.sinh();
      complex1.abs();
      Complex.valueOf(755.3949972859, 755.3949972859);
      complex0.toString();
      complex2.subtract(complex4);
      Complex complex6 = complex5.conjugate();
      complex2.sqrt();
      complex0.nthRoot(770);
      complex2.pow(complex0);
      complex3.negate();
      complex6.createComplex(0.4494072198867798, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.abs();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.multiply(complex0);
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex4 = complex2.exp();
      complex1.log();
      complex3.abs();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      complex1.sqrt();
      Complex complex2 = complex0.tan();
      complex1.abs();
      complex1.divide(4154.868);
      complex1.abs();
      complex1.multiply(0);
      complex0.divide(complex2);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 2725.819538906634);
      complex1.createComplex((-4160.21120846), 596.23499932);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      complex1.pow(complex0);
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.I.multiply(2.0);
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex2.reciprocal();
      complex0.nthRoot(37);
      complex0.abs();
      Complex complex6 = Complex.valueOf(0.0, (-3.861762510530086E240));
      complex6.ZERO.sqrt();
      complex6.ONE.subtract(complex1);
      Complex complex7 = complex1.sinh();
      complex6.abs();
      complex6.INF.toString();
      complex7.ZERO.subtract(complex6);
      complex7.sin();
      Complex complex8 = complex2.atan();
      complex8.sin();
      Complex complex9 = Complex.NaN;
      complex3.ZERO.pow(complex9);
      complex5.multiply(1.2953605651855469);
      Complex complex10 = complex1.conjugate();
      complex10.acos();
      complex3.reciprocal();
      complex4.toString();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(1.5218427181243896);
      Complex complex5 = complex3.INF.add(complex4);
      Complex complex6 = complex1.ONE.sin();
      complex6.NaN.tan();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.ZERO.acos();
      complex9.ZERO.divide(complex1);
      complex8.NaN.toString();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex10.ONE.exp();
      Complex complex12 = complex10.ONE.sinh();
      complex1.I.subtract(complex12);
      Complex complex13 = complex5.multiply(1.5218427181243896);
      Complex complex14 = complex13.INF.sqrt();
      complex14.I.hashCode();
      Complex complex15 = complex8.negate();
      complex15.ZERO.sin();
      complex0.conjugate();
      double double0 = 0.0;
      complex6.tanh();
      Complex.valueOf(1.5218427181243896, 0.0);
      complex14.conjugate();
      complex11.sqrt();
      complex5.nthRoot(1);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1997.037), (-20.0));
      complex0.hashCode();
      Complex complex1 = new Complex((-1214.4));
      complex1.acos();
      Complex complex2 = complex1.I.divide((-20.0));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.INF.pow(complex1);
      complex0.hashCode();
      Complex complex6 = Complex.valueOf(1281.0, 0.0);
      complex5.ZERO.hashCode();
      complex1.ZERO.toString();
      complex6.multiply(0);
      Complex complex7 = complex6.I.exp();
      Complex complex8 = Complex.valueOf(Double.NaN, Double.NaN);
      complex8.multiply((-20.0));
      complex8.atan();
      complex3.tan();
      Complex complex9 = complex4.conjugate();
      Complex complex10 = complex9.NaN.divide(complex0);
      complex10.subtract(complex7);
      complex2.conjugate();
      Complex.valueOf(0.0);
      complex4.sqrt();
      complex1.nthRoot(1);
      Complex complex11 = new Complex((-1997.037));
      complex3.pow(complex11);
      complex7.negate();
      complex5.createComplex((-1214.4), 1.5218427181243896);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.ZERO.asin();
      complex3.I.multiply(2.0);
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex3.reciprocal();
      complex0.nthRoot(37);
      complex0.abs();
      Complex complex6 = Complex.valueOf(0.0, (-3.861762510530086E240));
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex6.ONE.subtract(complex1);
      complex1.sinh();
      complex6.abs();
      complex6.INF.toString();
      Complex complex9 = complex3.add((-521.74133004567));
      Complex complex10 = complex9.tan();
      complex4.multiply(1.0);
      complex7.multiply(complex10);
      complex1.add(complex8);
      complex6.getReal();
      complex8.multiply(complex2);
      complex9.createComplex(3.861762510530086E240, 1946.03143);
      try { 
        complex5.nthRoot((-505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -505
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = Complex.valueOf((-0.9657185980906516), 1.3043045862358962);
      complex2.nthRoot(532);
      Complex complex3 = Complex.valueOf(5.709039546124285E-171);
      complex1.subtract((-1211.8716095111372));
      complex3.multiply(1);
      complex0.divide((double) 532);
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf(3.529920406834134E113);
      complex5.sin();
      complex0.abs();
      complex4.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.divide(complex0);
      complex0.toString();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex1.exp();
      Complex complex6 = new Complex((-1.2277120342804144E295));
      complex6.sinh();
      Complex complex7 = complex4.subtract(complex5);
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex3.sqrt();
      complex9.hashCode();
      complex8.negate();
      complex0.sin();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.conjugate();
      complex7.tanh();
      Complex.valueOf((-1.2277120342804144E295), 0.0);
      Complex complex12 = complex2.sin();
      complex9.atan();
      Complex complex13 = complex12.sin();
      Complex complex14 = new Complex(1400.99934, 1474766.3600000003);
      Complex complex15 = complex14.multiply(1.1768108384670781E-7);
      complex11.conjugate();
      complex13.acos();
      complex12.reciprocal();
      complex15.toString();
      complex15.subtract(0.4849066734313965);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      complex1.sqrt();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf(1.5218427181243896);
      Complex complex4 = complex2.INF.add(complex3);
      Complex complex5 = complex1.ONE.sin();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex7.atan();
      complex8.ZERO.acos();
      Complex.valueOf(1.5218427181243896);
      Complex complex9 = Complex.ONE;
      complex9.pow(complex1);
      complex4.isNaN();
      complex4.conjugate();
      complex4.cosh();
      complex3.readResolve();
      complex6.equals(")");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.acos();
      complex0.pow(1132.6587202114843);
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf(0.0);
      complex5.abs();
      complex1.abs();
      complex5.hashCode();
      complex3.negate();
      complex6.multiply((-2825));
      Complex complex7 = Complex.valueOf((-118.16962));
      complex7.subtract(1.5707963267948966);
      complex7.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double double0 = (-112.9021907);
      Complex complex0 = new Complex((-112.9021907), 808.1);
      complex0.I.hashCode();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1997.037), (-20.0));
      complex0.hashCode();
      Complex complex1 = new Complex((-1214.4));
      complex1.acos();
      Complex complex2 = complex1.I.divide((-20.0));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.INF.pow(complex1);
      complex0.hashCode();
      complex1.ZERO.toString();
      complex1.multiply(0);
      Complex complex6 = complex0.I.exp();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      complex7.atan();
      complex3.tan();
      Complex complex8 = complex4.conjugate();
      complex8.NaN.divide(complex0);
      Complex complex9 = complex2.add(Double.POSITIVE_INFINITY);
      complex9.INF.tan();
      Complex complex10 = complex6.multiply(Double.POSITIVE_INFINITY);
      complex9.multiply(complex5);
      complex4.add(complex10);
      complex10.getReal();
      complex4.multiply(complex7);
      complex2.createComplex(0.4944818615913391, 6.283185307179586);
      try { 
        complex8.nthRoot((-505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -505
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.exp();
      Complex complex1 = complex0.exp();
      complex0.abs();
      complex1.I.readResolve();
      Complex complex2 = complex0.createComplex((-57.281902), 0.4132472276687622);
      Complex complex3 = complex2.add(0.4132472276687622);
      complex3.I.readResolve();
      Complex complex4 = complex3.I.multiply(1);
      Complex complex5 = complex1.ZERO.divide(0.0);
      Complex complex6 = complex5.I.log();
      Complex complex7 = complex0.I.atan();
      complex7.NaN.getArgument();
      Complex complex8 = complex7.I.divide(complex0);
      Complex complex9 = complex8.INF.atan();
      complex9.I.toString();
      complex9.nthRoot(1);
      Complex complex10 = complex0.multiply(20.0);
      complex2.isNaN();
      Complex complex11 = complex1.log();
      complex11.INF.add(complex9);
      Complex complex12 = Complex.valueOf(20.0);
      complex2.NaN.tanh();
      Complex complex13 = complex12.negate();
      complex13.INF.toString();
      complex0.ZERO.divide(Double.NaN);
      complex2.readResolve();
      complex1.toString();
      complex1.divide(complex6);
      Complex complex14 = complex6.multiply(complex7);
      complex14.asin();
      complex10.multiply(601);
      complex14.multiply(1);
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex1.getImaginary();
      Complex complex2 = complex1.tanh();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.ZERO.divide(20.0);
      Complex complex4 = complex2.multiply((-716.6172));
      complex0.INF.multiply(complex2);
      Complex complex5 = complex2.log();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.subtract(0.0);
      complex7.ONE.multiply(3351);
      complex6.cosh();
      Complex complex8 = complex4.acos();
      complex3.toString();
      complex5.add((-20.0));
      Complex complex9 = Complex.valueOf((-20.0));
      complex9.ONE.multiply((-406.1169626169));
      complex9.atan();
      Complex complex10 = complex1.atan();
      complex2.readResolve();
      complex8.hashCode();
      Complex complex11 = complex5.atan();
      complex11.ZERO.log();
      complex3.readResolve();
      complex10.negate();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-112.9021907));
      Complex complex1 = complex0.INF.tan();
      complex1.INF.multiply((-112.9021907));
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.add((-112.9021907));
      complex0.add(complex2);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex4.pow(complex5);
      complex6.subtract((-112.9021907));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          Complex complex0 = Complex.ZERO;
          Complex complex1 = Complex.ZERO;
          complex0.I.abs();
          Complex complex2 = complex0.ONE.pow(complex1);
          Complex complex3 = complex2.ZERO.subtract(complex0);
          Complex complex4 = complex3.divide(complex0);
          Complex.valueOf(1.0);
          complex0.readResolve();
          complex3.INF.abs();
          complex2.tan();
          complex0.abs();
          complex3.I.divide((double) 1970);
          complex0.nthRoot(1970);
          Complex complex5 = complex0.tan();
          Complex complex6 = complex5.I.acos();
          complex5.I.getField();
          Complex complex7 = complex0.subtract(complex3);
          complex7.NaN.subtract(complex6);
          Complex complex8 = complex1.tan();
          complex8.I.nthRoot(1970);
          complex2.isInfinite();
          Complex.valueOf((-3022.053));
          complex1.pow(complex7);
          complex0.equals("");
          complex4.divide(207.02);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-413);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex2.atan();
      complex1.ONE.nthRoot(105);
      complex1.ZERO.multiply((-413));
      complex2.I.sqrt();
      Complex complex3 = complex1.ZERO.asin();
      complex3.NaN.nthRoot(17);
      complex1.NaN.multiply(213);
      try { 
        complex0.I.nthRoot((-413));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -413
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.395158290863037, 1.395158290863037);
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.INF.acos();
      complex1.readResolve();
      complex3.ZERO.multiply(complex1);
      complex3.NaN.atan();
      complex3.ZERO.asin();
      complex0.getReal();
      Complex complex4 = complex0.asin();
      complex4.ZERO.atan();
      complex4.getArgument();
      complex0.hashCode();
      complex2.getImaginary();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.log();
      complex2.multiply((-82.3740390998274));
      complex0.toString();
      complex2.add((-82.3740390998274));
      complex3.reciprocal();
      complex1.multiply((-2270));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals("zit");
      complex0.INF.atan();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ZERO.createComplex(2.0, 2.0);
      complex2.INF.pow(2.0);
      Complex complex3 = Complex.valueOf(2.210442148596269E80, 2.210442148596269E80);
      Complex complex4 = complex0.add(complex3);
      complex4.tan();
      Complex complex5 = complex0.sinh();
      complex0.ZERO.divide(2.210442148596269E80);
      complex5.NaN.asin();
      complex3.abs();
      complex3.pow(2.210442148596269E80);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.I.add(complex2);
      Complex complex5 = complex0.pow(complex1);
      complex1.INF.tan();
      Complex complex6 = complex1.NaN.pow(0.0);
      complex5.I.sin();
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.ONE.pow(complex2);
      complex7.ZERO.getArgument();
      complex2.readResolve();
      complex0.getField();
      complex1.sinh();
      complex7.divide(0.0);
      complex5.getImaginary();
      complex8.subtract(complex6);
      complex1.isInfinite();
      Complex complex9 = complex4.reciprocal();
      complex3.sqrt();
      Complex.valueOf(1728.0518455279);
      complex9.multiply(complex5);
      complex7.sqrt1z();
      complex3.isInfinite();
      complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0), 0.0);
      complex0.add(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.NaN.multiply(196);
      Complex complex4 = complex3.add(0.0);
      complex4.ZERO.multiply(0.0);
      complex0.multiply(complex2);
      complex4.divide(0.0);
      complex0.multiply(0.0);
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(922.0726644896216);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.createComplex(922.0726644896216, 2.0);
      complex2.ONE.hashCode();
      complex1.INF.getField();
      complex2.ONE.log();
      complex0.pow(complex1);
      complex2.cos();
      complex0.ZERO.pow(0.0);
      complex1.toString();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(1.5218427181243896);
      Complex complex5 = complex3.INF.add(complex4);
      Complex complex6 = complex1.ONE.sin();
      complex6.NaN.tan();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.ZERO.acos();
      complex9.ZERO.divide(complex1);
      complex8.NaN.toString();
      Complex complex10 = complex2.sqrt1z();
      complex10.ONE.exp();
      Complex complex11 = complex10.ONE.sinh();
      complex1.I.subtract(complex11);
      Complex complex12 = complex5.multiply(1.5218427181243896);
      Complex complex13 = complex12.INF.sqrt();
      complex13.I.hashCode();
      Complex complex14 = complex8.negate();
      complex14.ZERO.sin();
      complex0.conjugate();
      complex6.tanh();
      Complex complex15 = Complex.valueOf(1.5218427181243896, 0.0);
      complex15.INF.sin();
      Complex complex16 = complex4.atan();
      complex1.sin();
      Complex complex17 = complex6.multiply(1400.99934);
      complex10.conjugate();
      complex16.acos();
      complex16.reciprocal();
      complex17.toString();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.ZERO.asin();
      complex3.I.multiply(2.0);
      Complex.valueOf(2.0);
      complex3.reciprocal();
      complex0.nthRoot(37);
      complex0.abs();
      Complex complex4 = Complex.valueOf(0.0, (-3.861762510530086E240));
      Complex complex5 = complex4.ZERO.sqrt();
      complex4.ONE.subtract(complex1);
      Complex complex6 = complex1.sinh();
      complex4.abs();
      complex4.INF.toString();
      Complex complex7 = complex6.ZERO.subtract(complex4);
      complex7.ONE.conjugate();
      complex4.ONE.sqrt();
      complex0.nthRoot(1);
      complex2.pow(complex4);
      complex0.negate();
      complex5.createComplex(0.0, 20.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(1329.9);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.INF.sinh();
      complex0.multiply(complex1);
      complex0.equals(complex2);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.log();
      complex4.abs();
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.acos();
      Complex complex1 = complex0.divide(0.0);
      complex1.toString();
      complex0.isNaN();
      complex0.getArgument();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2610.0), (-2610.0));
      Complex complex1 = complex0.ONE.exp();
      complex0.NaN.nthRoot(1);
      Complex complex2 = complex0.tanh();
      complex2.ONE.getField();
      complex0.INF.hashCode();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex2.asin();
      complex6.ONE.readResolve();
      complex6.I.readResolve();
      Complex complex7 = complex1.INF.sqrt();
      Complex complex8 = complex7.INF.add(1908.65);
      complex8.INF.acos();
      complex8.ZERO.conjugate();
      Complex complex9 = complex1.I.sqrt1z();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex0.atan();
      complex11.ONE.multiply(complex0);
      Complex complex12 = Complex.ZERO;
      complex5.ONE.add(complex12);
      complex5.equals("REAL_FORMAT");
      Complex complex13 = complex5.atan();
      complex0.NaN.multiply(1);
      complex13.I.divide(complex6);
      complex1.readResolve();
      complex1.nthRoot(1);
      complex9.getField();
      complex5.getImaginary();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.I.abs();
      complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      complex2.ZERO.acos();
      Complex complex3 = complex1.ONE.sin();
      complex2.INF.readResolve();
      complex2.equals(complex1);
      Complex.valueOf(1.0);
      complex1.nthRoot(1);
      Complex complex4 = complex3.acos();
      complex4.I.reciprocal();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2.546119213104248);
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = new Complex(2.546119213104248);
      complex2.ONE.multiply(complex3);
      Complex complex4 = complex0.add(2.546119213104248);
      Complex complex5 = complex4.subtract(0.04394212365150452);
      complex5.multiply(complex0);
      Complex complex6 = complex5.pow((-1.0));
      Complex complex7 = complex6.INF.acos();
      complex7.I.abs();
      complex1.cos();
      complex4.sin();
      complex5.getReal();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2331.1320225697, 2331.1320225697);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(20.0);
      Complex complex3 = complex2.ONE.tan();
      complex3.cos();
      Complex complex4 = complex0.cosh();
      complex4.nthRoot(2182);
      Complex complex5 = complex0.multiply(2200.48583412344);
      Complex complex6 = complex1.subtract(2200.48583412344);
      complex6.I.negate();
      complex0.sqrt();
      complex5.isInfinite();
      complex0.sqrt();
      complex0.negate();
      Complex complex7 = complex6.conjugate();
      try { 
        complex7.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.acos();
      Complex complex1 = complex0.sqrt1z();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.exp();
      complex1.pow(complex0);
      complex1.NaN.nthRoot(57);
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.ONE.getArgument();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = Complex.valueOf((-1550.95812), 2.0358991622924805);
      Complex complex5 = complex4.INF.sinh();
      complex0.ONE.subtract(complex4);
      complex0.exp();
      complex3.sin();
      complex5.subtract((-829.86621068458));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.log();
      complex1.NaN.getArgument();
      complex1.getField();
      Complex complex2 = complex0.ZERO.sin();
      complex0.isNaN();
      Complex complex3 = complex0.cos();
      complex3.INF.hashCode();
      Complex complex4 = complex3.conjugate();
      complex2.ZERO.toString();
      complex4.ONE.getField();
      Complex complex5 = complex2.ZERO.reciprocal();
      complex3.ZERO.toString();
      complex5.INF.sin();
      Complex complex6 = complex4.pow(complex2);
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = Complex.valueOf(3.8718282216768776E250, 3.8718282216768776E250);
      complex2.INF.sin();
      complex8.I.pow((-1.6802196396307013E-7));
      complex2.negate();
      Complex complex9 = complex3.tanh();
      complex9.NaN.createComplex(1967.6402160084092, 3.8718282216768776E250);
      Complex complex10 = complex3.pow(Double.NaN);
      complex7.sinh();
      complex1.cos();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-299.837218213904), 0.0);
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.NaN.pow((-299.837218213904));
      complex1.acos();
      complex3.I.abs();
      Complex complex4 = complex0.asin();
      complex0.log();
      complex0.isInfinite();
      complex0.I.add(complex4);
      complex2.subtract(complex1);
      complex2.log();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(440.7780125932);
      double double0 = 0.0;
      Complex complex1 = complex0.atan();
      try { 
        complex1.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex3.tan();
      complex4.I.createComplex(0.7853981633974483, 917.0524742298506);
      complex4.sinh();
      complex3.NaN.acos();
      Complex complex5 = complex0.pow(3184.17058042071);
      Complex complex6 = complex5.INF.exp();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.INF.abs();
      complex1.abs();
      complex2.hashCode();
      complex6.negate();
      complex6.multiply((-2825));
      complex5.subtract(0.7853981633974483);
      complex7.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex1.cosh();
      complex4.subtract(complex1);
      complex3.pow((-7.049068240916723E166));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2457.682338), 1185.8614598566);
      Complex complex1 = complex0.ONE.sinh();
      complex1.NaN.acos();
      Complex complex2 = complex0.createComplex(1185.8614598566, (-2457.682338));
      complex2.ONE.toString();
      complex2.ONE.divide((-2457.682338));
      complex2.ONE.exp();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex0.NaN.subtract(0.0);
      Complex complex6 = complex4.NaN.add(1.3017010688781738);
      complex5.ZERO.divide(complex3);
      complex6.NaN.add(complex2);
      complex6.NaN.divide(complex0);
      Complex complex7 = complex0.asin();
      complex0.NaN.asin();
      complex3.ONE.negate();
      complex0.tanh();
      complex7.ONE.cosh();
      complex6.tanh();
      Complex complex8 = complex7.pow(complex6);
      complex5.acos();
      complex6.sinh();
      complex8.multiply(1.1339665711932977E-126);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.709039546124285E-171);
      complex0.nthRoot(1);
      Complex complex1 = Complex.valueOf(4611.43);
      complex1.subtract((-1211.8716095111372));
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.divide(3.529920406834134E113);
      complex3.I.acos();
      Complex.valueOf(0.0);
      Complex complex4 = complex3.sin();
      complex2.abs();
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isInfinite();
      Complex complex1 = new Complex(0.0);
      complex1.ONE.add(complex0);
      complex0.add(complex1);
      complex1.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2375.123, 0.0);
      complex0.ZERO.divide(complex1);
      Complex complex2 = complex0.add(319.350146);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1.198363039426718E-70, 1.198363039426718E-70);
      Complex complex1 = complex0.subtract((-1.0));
      complex1.getArgument();
      complex1.ONE.divide(complex0);
      complex0.pow((-322.0462483057));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(626.35303446, 626.35303446);
      complex0.I.createComplex(626.35303446, (-1.0));
      complex0.sinh();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.I.createComplex(626.35303446, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.conjugate();
      complex3.NaN.sqrt1z();
      Complex complex4 = Complex.valueOf((-1.0), (-1.5683631181406778E-7));
      complex4.I.cosh();
      complex0.multiply((-1.5683631181406778E-7));
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1997.037), (-20.0));
      complex0.hashCode();
      Complex complex1 = new Complex((-1214.4));
      complex1.acos();
      Complex complex2 = complex1.I.divide((-20.0));
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.INF.pow(complex1);
      complex0.hashCode();
      Complex complex6 = Complex.valueOf(1281.0, 0.0);
      complex1.ZERO.toString();
      complex6.multiply(0);
      complex6.I.exp();
      Complex complex7 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex8 = complex7.multiply((-20.0));
      complex7.atan();
      complex3.tan();
      Complex complex9 = complex4.conjugate();
      complex9.NaN.divide(complex0);
      Complex complex10 = complex2.add(Double.POSITIVE_INFINITY);
      complex10.INF.tan();
      Complex complex11 = complex8.multiply(Double.POSITIVE_INFINITY);
      complex10.multiply(complex5);
      complex4.add(complex11);
      complex11.getReal();
      complex8.multiply(complex7);
      complex2.createComplex(0.4944818615913391, 6.283185307179586);
      try { 
        complex9.nthRoot((-505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -505
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 3323.68474905);
      boolean boolean0 = complex0.equals("|j:9c,/KE");
      assertEquals(3323.68474905, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(144);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(144.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex2.NaN.multiply(7);
      Complex complex4 = complex3.ONE.subtract(complex0);
      complex2.ONE.subtract(0.0);
      complex0.getReal();
      Complex complex5 = complex2.add(complex4);
      assertSame(complex5, complex1);
      assertSame(complex4, complex3);
      
      Complex complex6 = complex2.subtract((-20.0));
      complex6.hashCode();
      assertEquals(0.8414709848078965, complex2.getImaginary(), 0.01);
      assertEquals(20.54030230586814, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.NaN.multiply(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.INF.abs();
      double double1 = 0.0;
      Complex complex3 = Complex.valueOf(0.0, 0.4374985694885254);
      complex3.NaN.readResolve();
      complex0.abs();
      complex0.ONE.multiply(20.0);
      complex3.pow(0.0);
      try { 
        complex0.nthRoot((-605));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -605
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double double0 = 1400.911;
      Complex complex0 = new Complex(0.0, 1400.911);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex.valueOf((-408.9910030303115));
      complex2.readResolve();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.subtract(complex3);
      complex4.ONE.asin();
      complex1.getImaginary();
      complex4.INF.log();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.NaN.divide(complex1);
      complex6.ONE.readResolve();
      Complex complex7 = Complex.valueOf(0.0, 1400.911);
      complex7.ONE.pow(complex3);
      complex5.NaN.asin();
      complex7.ZERO.getArgument();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3221.40053), 2700.4838);
      Complex complex1 = complex0.multiply((-3115.578786));
      Complex complex2 = complex0.I.add(complex1);
      assertEquals((-8413569.039216667), complex2.getImaginary(), 0.01);
      assertEquals(1.0036527152477156E7, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.multiply((-143));
      Complex complex4 = complex3.ONE.divide((double) (-143));
      Complex complex5 = complex3.ZERO.sqrt();
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex3.NaN.subtract((-1597.5584542112474));
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex3.ZERO.pow(complex0);
      Complex complex9 = complex8.atan();
      complex1.getField();
      Complex complex10 = complex8.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      
      Object object0 = complex0.readResolve();
      complex4.equals(complex9);
      assertEquals((-0.006993006993006993), complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex11 = complex9.tanh();
      assertEquals(1.2031405156079834E9, complex3.getImaginary(), 0.01);
      assertNotSame(complex11, complex8);
      assertEquals((-1.4352233828042333E9), complex3.getReal(), 0.01);
      assertFalse(complex9.equals((Object)complex5));
      assertTrue(complex0.equals((Object)object0));
      assertTrue(complex9.equals((Object)complex10));
      assertSame(complex9, complex6);
      assertSame(complex11, complex7);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.NaN.reciprocal();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.pow(complex3);
      complex3.isNaN();
      Complex complex5 = complex4.conjugate();
      complex5.cosh();
      assertSame(complex5, complex2);
      
      Complex complex6 = (Complex)complex3.readResolve();
      boolean boolean0 = complex0.equals(complex6);
      assertFalse(complex6.equals((Object)complex1));
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertSame(complex0, complex4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex0.NaN.pow(complex1);
      List<Complex> list0 = complex0.nthRoot(1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
      
      Complex complex4 = complex0.divide((double) 1);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      
      Complex complex5 = complex2.subtract(complex3);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertSame(complex5, complex3);
      assertTrue(complex0.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide(3123.4038910466707);
      Complex complex2 = complex0.subtract(517.90192);
      Complex complex3 = complex0.INF.createComplex(2247.3433888781683, 2247.3433888781683);
      assertFalse(complex3.isInfinite());
      
      complex2.getImaginary();
      Complex complex4 = complex2.reciprocal();
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex2.getReal();
      Complex complex5 = complex0.log();
      assertTrue(complex5.isInfinite());
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertEquals(0.7853981633974483, complex5.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
  }
}
