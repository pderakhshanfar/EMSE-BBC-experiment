/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:48:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.negate();
      complex1.INF.sqrt1z();
      Complex complex3 = complex0.cosh();
      complex0.INF.abs();
      complex0.ZERO.subtract(complex3);
      Complex complex4 = complex3.ONE.divide((-974.29));
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex3.ZERO.cosh();
      complex6.ZERO.negate();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.INF.exp();
      complex8.NaN.add(complex3);
      complex0.readResolve();
      complex0.NaN.abs();
      Complex complex9 = complex3.reciprocal();
      complex9.I.sqrt1z();
      complex5.atan();
      complex3.conjugate();
      Complex complex10 = complex8.add(complex0);
      complex10.cosh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0008761540741556E-7, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(1642.626, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = new Complex((-20.0), 801.7813434121009);
      Complex complex3 = complex0.pow(complex2);
      complex3.I.toString();
      complex0.ZERO.tanh();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.multiply(complex0);
      complex5.ZERO.getArgument();
      Complex complex6 = complex5.NaN.sqrt();
      complex0.getArgument();
      Complex complex7 = complex0.multiply((-71));
      Complex complex8 = Complex.valueOf((double) (-71));
      Complex complex9 = complex8.divide(complex2);
      Complex complex10 = complex9.ZERO.multiply((-71));
      Complex complex11 = complex4.negate();
      complex4.I.sin();
      complex10.INF.sinh();
      Complex complex12 = complex11.subtract(complex0);
      complex12.ONE.getArgument();
      Complex complex13 = complex7.exp();
      complex1.divide(complex13);
      complex10.pow(801.7813434121009);
      complex0.negate();
      complex5.readResolve();
      complex10.divide(complex3);
      complex9.getField();
      complex6.divide(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(1642.626, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.INF;
      complex3.add(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.sqrt1z();
      complex0.abs();
      Complex complex6 = complex5.divide((-2698219.175876));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.valueOf((-1.0), (-20.0));
      complex8.tan();
      Complex complex9 = Complex.I;
      Complex complex10 = complex4.tan();
      complex4.asin();
      complex10.tanh();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(2.1414301981236817E-8, 1.0008761540741556E-7);
      Complex complex1 = Complex.ZERO;
      complex0.multiply(1073741824);
      Complex complex2 = new Complex((-1698.2), 1073741824);
      complex2.INF.pow(2.1414301981236817E-8);
      complex2.asin();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1281.5809004207858, (-1.7514953095665195E85));
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-3081.32));
      complex0.ONE.negate();
      Complex complex1 = complex0.multiply(568);
      complex1.ONE.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(568, (-3081.32));
      Complex complex4 = Complex.NaN;
      complex3.exp();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(1642.626, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex2.pow(complex4);
      complex1.sqrt1z();
      complex1.abs();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex4.createComplex(Double.POSITIVE_INFINITY, (-1.0017605606469673));
      complex2.abs();
      Complex complex6 = new Complex((-2836.66));
      complex6.divide(Double.POSITIVE_INFINITY);
      complex5.tan();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(1642.626, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.add(complex3);
      complex0.pow(complex1);
      Complex complex5 = complex4.sqrt1z();
      complex0.abs();
      Complex complex6 = complex4.divide(1642.626);
      Complex complex7 = Complex.ZERO;
      complex6.tan();
      Complex.valueOf(6.574128018028633E-24, 6.574128018028633E-24);
      complex0.abs();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 4584;
      Complex complex0 = new Complex(20.0, 4997.131838637);
      Complex complex1 = Complex.valueOf((-3081.32));
      complex0.hashCode();
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = complex1.divide((double) 4584);
      complex1.add(complex2);
      complex2.toString();
      complex2.getField();
      complex0.tanh();
      Complex complex4 = Complex.valueOf((-9494531.942400001));
      complex3.multiply(4848.470024);
      complex4.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(1642.626, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.add(complex1);
      complex2.pow(complex4);
      complex1.sqrt1z();
      complex1.abs();
      Complex complex5 = complex0.divide(40.0);
      Complex complex6 = Complex.ZERO;
      complex6.tan();
      Complex complex7 = Complex.valueOf(1.6503086546628772E-97, 2191.698375);
      complex7.abs();
      complex1.tan();
      complex1.multiply((-902));
      complex5.multiply(1642.626);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 4997.131838637);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf((-3081.32));
      Complex complex3 = complex1.add(complex2);
      complex0.pow(complex2);
      complex3.sqrt1z();
      complex3.abs();
      complex1.divide(20.0);
      Complex complex4 = Complex.ZERO;
      complex0.tan();
      Complex complex5 = complex0.sqrt1z();
      Complex.valueOf(1.0004003032777231, 3077.99644433);
      complex5.abs();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-462.1));
      Complex complex1 = complex0.divide(213.2556);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.createComplex((-462.1), 213.2556);
      complex5.ZERO.add(complex1);
      Complex complex6 = complex5.ONE.createComplex(213.2556, 213.2556);
      Complex complex7 = complex6.ONE.sqrt1z();
      complex7.ZERO.abs();
      complex3.reciprocal();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(4.333766446180635, 3.149267215638608E-187);
      Complex complex1 = Complex.INF;
      complex1.hashCode();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.add(complex1);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.I;
      complex3.add(complex4);
      complex3.toString();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      try { 
        complex5.nthRoot((-4214));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,214
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(1642.626, 1642.626);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex3.createComplex(-0.0, (-2494.9315488));
      complex3.add(complex2);
      complex2.sqrt1z();
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(1642.626, Double.POSITIVE_INFINITY);
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-462.1));
      Complex.valueOf(213.2556, 213.2556);
      Complex complex1 = complex0.divide(213.2556);
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.createComplex((-462.1), 213.2556);
      complex5.ZERO.add(complex1);
      Complex.valueOf(213.2556);
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      Complex complex6 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.abs();
      Complex complex1 = complex0.subtract(Double.NaN);
      complex0.readResolve();
      complex1.sinh();
      complex1.divide(2086.848141);
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex(2086.848141, Double.NaN);
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex.valueOf(0.5472630262374878, 463.1);
      Complex complex0 = Complex.ONE;
      complex0.negate();
      Complex.valueOf((-1798.98587938988), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.atan();
      Complex complex2 = Complex.ZERO;
      complex2.equals(complex0);
      complex2.divide(complex1);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.reciprocal();
      Complex complex2 = Complex.valueOf((double) 0);
      complex0.equals(complex2);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(4.333766446180635, 3.149267215638608E-187);
      Complex complex2 = complex1.divide(3.149267215638608E-187);
      Complex complex3 = new Complex(4.333766446180635, 3.149267215638608E-187);
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.createComplex((-2179.85293), 4.333766446180635);
      Complex complex7 = complex4.add(complex3);
      Complex complex8 = Complex.NaN;
      complex2.sqrt1z();
      complex7.abs();
      complex1.readResolve();
      complex8.divide(0.5472630262374878);
      complex8.tan();
      complex6.divide(316.0);
      Complex complex9 = Complex.NaN;
      complex9.cos();
      complex1.exp();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(3536.1);
      Complex complex1 = complex0.divide(3536.1);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.ZERO;
      complex2.createComplex(3536.1, (-8.009548754642203E231));
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(1.2627736197958951E98, (-1981.652295));
      Complex complex2 = complex1.sin();
      complex2.negate();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.add(complex0);
      complex1.ONE.add((-1981.652295));
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ONE;
      complex2.createComplex((-1981.652295), 2767.5256631);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(4.333766446180635, 3.149267215638608E-187);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.createComplex(2594.3877, 2.214268207550049);
      complex4.INF.toString();
      Complex complex5 = Complex.INF;
      complex5.sqrt1z();
      complex5.createComplex(2594.3877, Double.NaN);
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-1981.652295));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex0.cos();
      complex1.divide(complex0);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.sinh();
      complex2.hashCode();
      Complex complex5 = Complex.ZERO;
      complex5.conjugate();
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex2.multiply(284);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.cos();
      complex0.add(complex9);
      double double0 = (-0.4614923357862553);
      complex8.ONE.multiply((double) 284);
      complex3.divide(Double.NaN);
      complex6.add(complex7);
      complex8.toString();
      try { 
        complex6.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(4.333766446180635, 3.149267215638608E-187);
      Complex complex2 = new Complex(4.333766446180635, 3.149267215638608E-187);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.createComplex(2594.3877, 2.214268207550049);
      complex5.INF.toString();
      Complex complex6 = Complex.INF;
      complex6.sqrt1z();
      complex6.createComplex(3.149267215638608E-187, 401.27793);
      complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(1.2627736197958951E98, (-1981.652295));
      Complex complex2 = complex1.I.tanh();
      complex1.multiply(4557);
      Complex complex3 = Complex.ZERO;
      complex3.I.subtract(complex0);
      complex3.negate();
      complex2.tan();
      Complex complex4 = new Complex(4557, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex0.ONE.add(complex1);
      Complex complex2 = complex1.createComplex(Double.POSITIVE_INFINITY, 1.2627736197958951E98);
      complex2.divide(complex1);
      complex0.multiply((-1017));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.INF;
      complex4.negate();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.2556, (-462.1));
      Complex complex1 = complex0.divide((-462.1));
      Complex complex2 = complex1.ZERO.cos();
      complex2.I.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.createComplex((-462.1), 213.2556);
      Complex complex5 = complex4.ZERO.add(complex1);
      Complex complex6 = complex4.ONE.createComplex(213.2556, 213.2556);
      Complex complex7 = complex6.ONE.sqrt1z();
      complex7.ZERO.abs();
      Complex complex8 = complex0.atan();
      complex6.INF.getField();
      complex8.tanh();
      Complex.valueOf(213.2556);
      complex4.getField();
      complex1.tanh();
      complex1.tanh();
      complex7.cos();
      Complex complex9 = complex7.log();
      complex9.getImaginary();
      complex8.multiply(8.920357371380305E-4);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.2556, (-462.1));
      Complex complex1 = complex0.divide((-462.1));
      Complex complex2 = complex1.ZERO.cos();
      complex2.I.divide(complex1);
      complex0.reciprocal();
      Complex complex3 = complex0.createComplex((-462.1), 213.2556);
      complex3.ZERO.add(complex1);
      complex3.ONE.createComplex(213.2556, 213.2556);
      complex1.getArgument();
      complex3.asin();
      complex1.getReal();
      complex1.reciprocal();
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = Complex.valueOf((-1496.5011309), 199458.17295347026);
      complex5.cosh();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(1590.0201939140238);
      complex2.readResolve();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.exp();
      complex4.divide(2802.47955149677);
      Complex complex5 = complex3.negate();
      complex5.tan();
      complex1.divide((-1025.40892877416));
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex0.multiply(284);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex2.cos();
      complex4.add(complex0);
      Complex complex8 = complex0.divide((-0.4614923357862553));
      Complex complex9 = complex8.add(complex4);
      complex1.toString();
      complex7.nthRoot(2255);
      complex2.asin();
      complex6.add((double) 284);
      complex4.abs();
      Complex complex10 = complex9.add(complex7);
      complex10.reciprocal();
      complex5.hashCode();
      complex2.sqrt1z();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.subtract((-3598.824));
      complex2.ONE.multiply(Double.POSITIVE_INFINITY);
      complex0.ONE.readResolve();
      complex1.ONE.sinh();
      Complex complex3 = complex0.exp();
      complex3.ONE.divide(2086.848141);
      complex1.I.negate();
      complex0.tan();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(4.333766446180635, 3.149267215638608E-187);
      Complex complex2 = new Complex(4.333766446180635, 3.149267215638608E-187);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.createComplex(2594.3877, 2.214268207550049);
      complex5.INF.toString();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex4.pow((-4807.0));
      Complex complex9 = Complex.ZERO;
      complex8.abs();
      complex8.atan();
      complex1.getField();
      Complex complex10 = complex1.tanh();
      complex9.tanh();
      complex3.cos();
      complex8.log();
      complex10.getField();
      complex3.getField();
      complex7.sin();
      complex2.createComplex((-4807.0), -0.0);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      complex1.I.tanh();
      Complex.valueOf(2.0, 2.0);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.INF;
      complex2.reciprocal();
      Complex complex3 = new Complex(926.567004837, 2315.900987952);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex0.createComplex(926.567004837, 2315.900987952);
      complex6.sqrt1z();
      complex6.pow(2315.900987952);
      Complex complex7 = Complex.ZERO;
      complex2.abs();
      complex3.atan();
      complex2.getField();
      Complex complex8 = complex5.tanh();
      complex3.tanh();
      Complex complex9 = Complex.NaN;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.cos();
      complex10.log();
      Complex complex11 = Complex.ZERO;
      complex11.getField();
      complex8.getField();
      complex5.sin();
      complex5.createComplex(Double.POSITIVE_INFINITY, 1.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.asin();
      complex2.ONE.log();
      Complex complex3 = complex2.ZERO.divide((-2102.4673041));
      Complex complex4 = complex2.I.tanh();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.I.conjugate();
      complex6.INF.createComplex(246.3, 246.3);
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex8.ONE.pow(complex7);
      complex9.ZERO.cosh();
      complex1.INF.sqrt();
      complex1.asin();
      Complex complex10 = complex1.multiply(128370.1338079012);
      Complex complex11 = complex8.createComplex(406.04981, 246.3);
      complex8.sinh();
      complex3.multiply(complex0);
      Complex complex12 = complex8.multiply(0.0);
      complex12.NaN.tanh();
      complex4.subtract(complex8);
      complex11.pow(complex10);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-879.731082));
      Complex complex2 = complex0.multiply(1.5699729892963536);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex2.INF.sqrt1z();
      double double0 = 1937.3859513687;
      complex4.multiply(1937.3859513687);
      Complex complex5 = complex2.pow((-879.731082));
      Complex complex6 = complex3.ONE.cosh();
      int int0 = 2740;
      complex6.INF.nthRoot(2740);
      Complex complex7 = complex5.createComplex((-55.9140046260997), 1.5699729892963536);
      Complex complex8 = complex3.tanh();
      complex8.cosh();
      Complex complex9 = Complex.ONE;
      double double1 = 227.7584054;
      complex9.pow(227.7584054);
      Complex complex10 = complex5.add(complex9);
      complex10.NaN.sqrt();
      complex9.toString();
      complex0.cos();
      Complex complex11 = complex3.sqrt();
      complex7.conjugate();
      complex11.asin();
      Complex complex12 = complex10.tanh();
      // Undeclared exception!
      complex12.ZERO.nthRoot(2146343841);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.INF.sqrt();
      complex0.I.readResolve();
      Complex complex3 = Complex.valueOf(3.989519470441919E45);
      Complex complex4 = complex3.NaN.sinh();
      complex3.INF.hashCode();
      complex1.ZERO.conjugate();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex0.multiply(284);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.I.add(complex0);
      complex3.divide(3.989519470441919E45);
      Complex complex9 = complex8.NaN.add(complex4);
      complex9.INF.toString();
      complex7.ONE.nthRoot(284);
      Complex complex10 = complex6.asin();
      complex10.INF.add(0.0);
      complex6.NaN.abs();
      complex5.hashCode();
      complex5.add(complex7);
      complex1.hashCode();
      complex1.sqrt1z();
      Complex complex11 = complex1.subtract(complex2);
      complex11.subtract(complex5);
      complex5.getArgument();
      complex5.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(446.607403603512, 446.607403603512);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.multiply(446.607403603512);
      Complex complex3 = complex2.sqrt();
      complex1.readResolve();
      Complex complex4 = Complex.valueOf(0.7695440871492959);
      Complex complex5 = complex1.sinh();
      complex4.hashCode();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex3.multiply(complex0);
      complex0.multiply((-2201));
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.cos();
      complex9.add(complex7);
      Complex complex11 = complex2.divide((-0.4614923357862553));
      Complex complex12 = complex1.add(complex3);
      complex5.toString();
      complex1.nthRoot(1);
      Complex complex13 = complex12.asin();
      complex12.add((double) 284);
      complex8.abs();
      complex4.add(complex11);
      complex6.I.reciprocal();
      complex4.hashCode();
      complex10.sqrt1z();
      complex6.subtract(complex11);
      complex9.subtract(complex0);
      complex8.readResolve();
      complex13.divide((-0.4614923357862553));
      Complex complex14 = complex8.tan();
      complex14.acos();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.INF.sqrt();
      complex0.I.readResolve();
      Complex complex3 = Complex.valueOf(3.989519470441919E45);
      Complex complex4 = complex3.NaN.sinh();
      complex3.INF.hashCode();
      complex1.ZERO.conjugate();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex0.multiply(284);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.I.add(complex0);
      complex3.divide(3.989519470441919E45);
      Complex complex9 = complex8.NaN.add(complex4);
      complex9.INF.toString();
      complex7.ONE.nthRoot(284);
      Complex complex10 = complex6.asin();
      complex10.INF.add(0.0);
      complex6.NaN.abs();
      complex5.hashCode();
      complex1.hashCode();
      complex1.sqrt1z();
      Complex complex11 = complex1.subtract(complex2);
      complex11.subtract(complex5);
      complex11.INF.subtract(Double.NaN);
      complex11.readResolve();
      complex11.divide(3.989519470441919E45);
      complex3.tan();
      Complex complex12 = complex5.acos();
      complex12.I.add(5.8015881615938497E-8);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(0);
      Complex.valueOf(1.0);
      complex0.equals(complex2);
      complex1.getField();
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.sqrt();
      complex1.multiply(1642.626);
      Complex complex2 = Complex.valueOf((-234.730427994437));
      complex2.log();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.ZERO;
      complex5.divide(complex3);
      Complex complex6 = complex3.multiply(0);
      complex6.sqrt();
      Complex complex7 = complex1.cosh();
      Complex complex8 = Complex.I;
      complex7.multiply(0);
      complex2.isInfinite();
      Complex complex9 = Complex.ZERO;
      complex9.cosh();
      Complex complex10 = Complex.NaN;
      complex10.sqrt1z();
      Complex complex11 = complex1.atan();
      complex8.multiply(0);
      complex2.sqrt();
      complex11.getReal();
      complex3.readResolve();
      complex6.exp();
      complex3.log();
      complex4.pow((double) 0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.2556083668286, (-462.1));
      Complex complex1 = complex0.divide((-462.1));
      Complex complex2 = complex1.ZERO.cos();
      complex2.I.divide(complex1);
      complex0.reciprocal();
      Complex complex3 = complex0.createComplex((-462.1), 213.2556083668286);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex3.ONE.createComplex(213.2556083668286, 213.2556083668286);
      Complex complex6 = complex5.ONE.sqrt1z();
      complex2.createComplex(1.2254085656601853E-156, 1.2254085656601853E-156);
      complex6.ZERO.abs();
      Complex complex7 = complex0.atan();
      complex5.INF.getField();
      complex5.cos();
      complex1.log();
      complex6.getField();
      Complex complex8 = complex0.multiply(1459);
      complex7.sqrt();
      complex8.getReal();
      complex2.readResolve();
      complex4.exp();
      complex5.log();
      complex1.pow(227.7584054);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.multiply(4557);
      complex1.divide((-2117.07));
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.tan();
      complex5.ONE.tan();
      complex1.divide((-1052.959));
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.createComplex((-776.508), 5759743.657946637);
      Complex complex1 = Complex.valueOf((-3327.37142), 0.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.NaN.add(748.77529371178);
      complex3.I.getField();
      Complex complex4 = complex0.pow(complex2);
      complex2.I.acos();
      Complex complex5 = complex4.I.createComplex((-2152.4178024701), (-358.60798548));
      Complex complex6 = complex5.ONE.pow(5759743.657946637);
      complex4.subtract((-1519.0383));
      Complex complex7 = complex1.negate();
      Complex complex8 = complex5.divide(0.0);
      Complex complex9 = complex5.reciprocal();
      complex9.ZERO.divide((-567.14));
      Complex complex10 = complex5.I.subtract(5759743.657946637);
      complex10.I.sqrt();
      complex5.log();
      complex6.conjugate();
      Complex complex11 = complex8.add(0.5403023058681398);
      complex2.acos();
      Complex.valueOf(748.77529371178, (-2152.4178024701));
      complex11.equals(complex7);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.createComplex(1.5392257142577226E220, (-487.2));
      Complex complex2 = complex1.NaN.subtract(1.5392257142577226E220);
      complex2.createComplex(1.5392257142577226E220, (-4.674900007989718E-9));
      Complex complex3 = complex0.atan();
      complex1.equals(complex2);
      complex3.INF.divide((-487.2));
      Complex complex4 = Complex.valueOf((-2791.572231700585), 2698.0000710344843);
      complex4.ZERO.sqrt();
      complex1.INF.divide(1.5392257142577226E220);
      complex2.I.conjugate();
      complex3.reciprocal();
      Complex complex5 = complex2.add(2698.0000710344843);
      complex2.atan();
      Complex complex6 = Complex.valueOf(1.5392257142577226E220);
      Complex complex7 = complex6.ZERO.sqrt();
      Complex complex8 = complex7.cos();
      complex8.ZERO.log();
      complex5.exp();
      complex6.divide(2698.0000710344843);
      complex0.exp();
      try { 
        complex6.INF.nthRoot((-1133));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,133
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.multiply(4557);
      complex0.multiply(4557);
      complex0.sqrt();
      complex3.getReal();
      complex1.readResolve();
      Complex complex4 = complex3.exp();
      complex2.log();
      complex4.pow((double) 3616);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      double double0 = 3536.1;
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      int int0 = 1249;
      Complex complex3 = complex2.multiply(1249);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex1.add(complex4);
      Complex complex6 = complex5.divide((-3458.531252));
      Complex complex7 = complex5.add(complex3);
      complex6.toString();
      try { 
        complex7.nthRoot((-369));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -369
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-2770.485103));
      Complex complex1 = complex0.sqrt();
      complex0.readResolve();
      Complex complex2 = Complex.valueOf((-2770.485103));
      Complex complex3 = complex2.sinh();
      complex3.hashCode();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex1.multiply(1349);
      complex2.cos();
      Complex complex7 = complex6.add(complex0);
      Complex complex8 = complex2.divide((-2134.819739787486));
      Complex complex9 = complex7.add(complex8);
      Complex complex10 = Complex.ZERO;
      complex10.toString();
      complex9.nthRoot(1349);
      complex10.asin();
      complex3.add((-2134.819739787486));
      complex0.abs();
      complex6.hashCode();
      Complex complex11 = Complex.valueOf((-2134.819739787486), (double) 1349);
      complex5.add(complex11);
      complex1.hashCode();
      Complex complex12 = complex11.sqrt1z();
      Complex complex13 = new Complex((-2770.485103), (-2770.485103));
      complex13.subtract(complex10);
      Complex complex14 = complex5.subtract(complex12);
      complex4.readResolve();
      complex1.divide((double) 1349);
      complex8.tan();
      Complex complex15 = Complex.valueOf(2770.485103, (double) 1349);
      complex15.acos();
      complex3.getField();
      complex2.log();
      complex14.negate();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      Complex complex2 = complex1.I.tanh();
      complex1.multiply(4557);
      Complex complex3 = Complex.ONE;
      complex3.negate();
      complex2.tan();
      complex3.divide((-1981.652295));
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      complex2.reciprocal();
      Complex complex3 = complex0.subtract(complex2);
      complex1.multiply(0);
      complex3.atan();
      Complex complex4 = new Complex(463.1, (-1456.82557607));
      complex4.reciprocal();
      complex0.abs();
      Complex.valueOf(20.0, 1.0);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.multiply(5201.6);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex3.multiply(0);
      Complex complex7 = complex3.sqrt();
      complex6.cosh();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.multiply(0);
      complex6.isInfinite();
      complex6.cosh();
      complex7.sqrt1z();
      complex1.atan();
      complex5.divide(complex1);
      complex6.exp();
      Complex complex9 = Complex.INF;
      complex0.divide(complex4);
      complex1.tanh();
      complex8.asin();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.reciprocal();
      complex1.multiply(0);
      Complex complex4 = Complex.valueOf((double) 0);
      complex1.equals(complex4);
      complex3.getField();
      Complex complex5 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.multiply(0);
      Complex complex4 = Complex.valueOf((double) 0);
      complex2.divide((double) 0);
      complex3.negate();
      complex4.tan();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1981.652295));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.createComplex(2594.3877, 2594.3877);
      Complex complex6 = new Complex((-1.0), (-879.731082));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex6.add(complex7);
      Complex complex9 = complex1.createComplex((-1981.652295), (-879.731082));
      complex5.sqrt1z();
      Complex complex10 = complex0.pow((-4807.0));
      Complex complex11 = Complex.ZERO;
      complex11.abs();
      complex4.atan();
      complex5.getField();
      Complex complex12 = complex6.tanh();
      complex12.cos();
      complex7.log();
      complex11.getField();
      complex1.multiply(3616);
      complex6.sqrt();
      complex3.getReal();
      complex8.readResolve();
      complex9.exp();
      complex10.log();
      complex3.pow((-4807.0));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.2556083668286, (-462.1));
      Complex complex1 = Complex.valueOf((-1333.412532334), 20.0);
      complex0.abs();
      Complex complex2 = complex1.createComplex(91.3758152658248, 20.0);
      complex0.tanh();
      Complex complex3 = Complex.valueOf((-3288.24617339), (double) 4557);
      Complex complex4 = complex3.multiply(3854);
      complex4.getField();
      complex2.sin();
      complex0.createComplex(128.4915124148, 508.93453852131734);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.ONE.hashCode();
      Complex complex1 = complex0.log();
      complex1.isNaN();
      complex0.ONE.exp();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.ONE.acos();
      complex2.ZERO.hashCode();
      Complex complex4 = Complex.valueOf(1.0);
      complex3.I.sinh();
      complex2.ONE.subtract(complex3);
      complex1.getImaginary();
      complex2.toString();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.NaN.negate();
      complex3.readResolve();
      complex4.equals(complex1);
      complex3.sin();
      Complex complex7 = complex0.acos();
      complex7.I.add(0.0);
      Complex complex8 = complex6.add(1674.1229);
      complex8.sqrt();
      complex3.sqrt();
      complex4.pow(0.0);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-161.548345821566), (-161.548345821566));
      Complex complex1 = complex0.pow((-161.548345821566));
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex1.multiply((-4101));
      complex3.NaN.getArgument();
      complex0.isInfinite();
      complex0.multiply(7);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.pow((-161.548345821566));
      complex4.tanh();
      complex6.multiply((-435));
      complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-2455.057935289), (-2455.057935289));
      Complex complex1 = complex0.I.sin();
      complex1.I.conjugate();
      double double0 = Double.NaN;
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex2.ZERO.abs();
      Complex complex3 = complex0.NaN.multiply(complex2);
      Complex complex4 = Complex.valueOf(Double.NaN, (-2455.057935289));
      complex2.INF.cosh();
      complex4.ZERO.toString();
      Complex complex5 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.add(complex3);
      complex0.atan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.pow(complex7);
      complex8.ONE.subtract(Double.POSITIVE_INFINITY);
      complex6.ONE.sqrt1z();
      complex5.sqrt();
      try { 
        complex5.NaN.nthRoot((-52));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -52
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-3442.0743416));
      Complex complex1 = complex0.I.divide((-4152.126426));
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = new Complex((-984.6961819), (-3442.0743416));
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.multiply(1);
      complex1.ONE.multiply(1);
      Complex complex6 = complex5.ONE.tanh();
      complex6.NaN.toString();
      Complex complex7 = complex0.INF.exp();
      complex0.atan();
      Complex complex8 = complex7.multiply(complex1);
      Complex complex9 = complex8.INF.add((double) 1);
      complex9.subtract(complex4);
      Complex complex10 = complex4.tanh();
      complex10.NaN.getArgument();
      complex7.pow(complex8);
      complex7.isNaN();
      Complex complex11 = complex0.cosh();
      complex11.hashCode();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.I.abs();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.add(0.0);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.ZERO.subtract(complex1);
      Complex complex6 = complex3.INF.pow(Double.NaN);
      complex5.NaN.multiply(Double.NaN);
      complex3.add(complex4);
      Complex complex7 = complex2.createComplex(0.0, 1.0);
      complex4.getImaginary();
      complex1.acos();
      complex7.multiply(683);
      complex4.subtract(281.470179);
      Complex complex8 = Complex.I;
      complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0965324942770584E171));
      complex0.isInfinite();
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(0.0, 1087.5501803056);
      Complex complex2 = complex1.ZERO.add((-1.0965324942770584E171));
      complex1.NaN.asin();
      complex1.ONE.cos();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex1.I.negate();
      complex2.NaN.divide((-1.0965324942770584E171));
      complex0.equals((Object) null);
      complex2.getArgument();
      complex0.getField();
      complex4.readResolve();
      complex2.acos();
      complex3.asin();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      complex0.ZERO.getField();
      Complex complex1 = complex0.multiply(601);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex1.INF.sqrt1z();
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex3.I.sinh();
      complex8.I.pow(complex5);
      Complex complex9 = new Complex(Double.NaN);
      complex1.INF.divide(complex9);
      Complex complex10 = complex5.I.add(complex4);
      complex10.log();
      Complex complex11 = complex3.I.sqrt1z();
      complex0.divide((double) 601);
      Complex complex12 = complex5.pow(complex1);
      Complex complex13 = complex12.ONE.multiply(245);
      complex12.NaN.hashCode();
      complex3.tan();
      complex6.isNaN();
      Complex complex14 = complex7.sinh();
      complex14.ZERO.sqrt1z();
      complex7.add(complex2);
      complex13.cosh();
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.asin();
      complex3.NaN.sinh();
      complex3.ZERO.getArgument();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.NaN.negate();
      complex3.ONE.cosh();
      complex0.toString();
      Complex complex7 = complex3.reciprocal();
      complex1.toString();
      complex5.ZERO.multiply(0.0);
      Complex complex8 = complex2.cosh();
      complex3.NaN.cos();
      Complex complex9 = complex8.reciprocal();
      complex5.subtract(complex7);
      complex7.sqrt();
      Complex complex10 = complex1.tan();
      complex10.INF.asin();
      complex9.sqrt1z();
      complex2.sqrt();
      complex6.divide(2967.47453);
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.tan();
      complex4.INF.tanh();
      Complex complex5 = complex3.I.multiply(516);
      Complex complex6 = complex1.NaN.multiply(complex3);
      complex6.INF.cos();
      complex5.ZERO.abs();
      Complex complex7 = complex3.NaN.sin();
      complex7.I.hashCode();
      Complex complex8 = complex7.ONE.multiply(0.0);
      complex8.INF.nthRoot(408);
      Complex complex9 = complex2.exp();
      Complex.valueOf(0.0);
      complex7.getReal();
      complex5.NaN.subtract(complex6);
      Complex complex10 = Complex.valueOf((double) 516, 0.0);
      complex3.ZERO.toString();
      complex9.isInfinite();
      complex7.readResolve();
      complex7.isNaN();
      complex5.reciprocal();
      Complex complex11 = complex7.divide((double) 516);
      complex11.ONE.cosh();
      Complex complex12 = complex10.acos();
      complex0.multiply(859.9816798317592);
      complex5.cosh();
      complex12.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.atan();
      complex2.ONE.pow(0.0);
      complex0.ZERO.readResolve();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex0.multiply((-234.730427994437));
      Complex complex5 = complex3.log();
      Complex complex6 = complex0.cos();
      complex6.I.divide(complex0);
      Complex complex7 = complex4.multiply(0);
      complex7.sqrt();
      Complex complex8 = complex3.cosh();
      complex8.ONE.sqrt();
      Complex complex9 = complex6.multiply(0);
      complex3.isInfinite();
      complex0.NaN.cosh();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex9.divide(complex11);
      complex11.ZERO.exp();
      Complex complex13 = Complex.INF;
      complex12.divide(complex13);
      Complex complex14 = complex0.tanh();
      complex14.I.asin();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(2088.88183182754);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(932.167);
      Complex complex3 = complex0.I.multiply(complex2);
      complex3.ONE.multiply(0);
      Complex complex4 = complex0.NaN.multiply(1029);
      complex4.I.conjugate();
      complex1.I.divide(0.0);
      Complex complex5 = complex0.ONE.sqrt();
      Complex complex6 = complex5.INF.tanh();
      complex6.ZERO.multiply(complex0);
      complex1.getArgument();
      Complex complex7 = complex0.divide((-4068.763525));
      complex0.hashCode();
      Complex complex8 = complex7.multiply(Double.NaN);
      complex8.toString();
      complex8.getArgument();
      complex5.abs();
      complex7.multiply(1457);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(136.8167, 136.8167);
      Complex complex1 = complex0.sin();
      complex0.ONE.tanh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.NaN.multiply(136.8167);
      complex3.ZERO.createComplex(1.32472428796441E-9, 136.8167);
      Complex complex4 = Complex.INF;
      complex0.I.reciprocal();
      complex2.multiply(complex4);
      Complex complex5 = complex1.asin();
      complex5.NaN.toString();
      complex0.abs();
      Complex complex6 = complex5.asin();
      complex2.isInfinite();
      complex5.toString();
      complex6.getReal();
      complex2.toString();
      complex0.multiply(complex1);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-4.27932550865546E-8));
      Complex complex1 = new Complex(0.0);
      complex0.ZERO.cos();
      Complex complex2 = complex0.subtract(complex1);
      complex1.add(complex2);
      complex0.divide(6.283185307179586);
      complex0.add(1002.7);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(2377.897576159306);
      Complex complex1 = complex0.NaN.subtract(866.1107);
      Complex complex2 = complex1.ONE.log();
      complex2.ZERO.pow(2377.897576159306);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.multiply(2377.897576159306);
      complex0.pow(complex4);
      Complex complex5 = complex3.multiply(0);
      complex5.add(complex4);
      Complex complex6 = complex3.sinh();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(4.2459748085663055E253, 4.2459748085663055E253);
      Complex complex1 = Complex.INF;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.2556083668286, (-462.1));
      Complex complex1 = complex0.divide((-462.1));
      Complex complex2 = complex1.ZERO.cos();
      complex2.I.divide(complex1);
      complex0.reciprocal();
      Complex complex3 = complex0.createComplex((-462.1), 213.2556083668286);
      complex3.ZERO.add(complex1);
      Complex complex4 = complex3.ONE.createComplex(213.2556083668286, 213.2556083668286);
      Complex complex5 = complex4.ONE.sqrt1z();
      complex5.pow(227.7584054);
      complex5.ZERO.abs();
      Complex complex6 = complex0.atan();
      complex4.INF.getField();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.ZERO.cos();
      Complex complex9 = complex0.log();
      complex6.getField();
      complex9.multiply(3616);
      complex6.ZERO.sqrt();
      complex4.getReal();
      complex8.readResolve();
      complex9.exp();
      complex4.log();
      complex5.pow(227.7584054);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.add(complex1);
      complex1.getField();
      complex1.NaN.toString();
      complex0.ONE.getArgument();
      Complex complex3 = complex0.ZERO.asin();
      complex1.getReal();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.cosh();
      complex4.divide(complex5);
      complex3.cosh();
      Complex complex6 = complex2.multiply((-1024));
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(446.607403603512, 446.607403603512);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.NaN.add(complex3);
      complex0.getImaginary();
      complex2.getArgument();
      Complex complex5 = complex0.subtract(446.607403603512);
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.NaN.cos();
      complex5.exp();
      complex1.sinh();
      Complex complex7 = complex1.acos();
      complex7.NaN.getArgument();
      complex7.reciprocal();
      Complex complex8 = complex4.conjugate();
      complex8.ONE.multiply((-3125));
      Complex.valueOf(Double.NaN);
      complex2.getArgument();
      try { 
        complex3.nthRoot((-260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -260
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.abs();
      Complex complex2 = new Complex(1150.7930960333);
      Complex complex3 = complex0.subtract(complex2);
      complex1.toString();
      Complex complex4 = complex3.NaN.subtract(1150.7930960333);
      Complex complex5 = complex3.tan();
      complex2.isInfinite();
      complex0.isNaN();
      Complex complex6 = complex4.acos();
      complex4.INF.createComplex(Double.POSITIVE_INFINITY, 4948.349);
      complex6.ONE.multiply(0.0);
      complex6.ONE.hashCode();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex5.I.exp();
      Complex complex9 = complex8.I.sqrt1z();
      complex7.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.sinh();
      Complex complex11 = Complex.valueOf((-869.435));
      complex11.INF.hashCode();
      complex10.INF.hashCode();
      complex10.ONE.abs();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex12.ZERO.getArgument();
      Complex complex13 = complex5.add(complex7);
      Complex.valueOf(1150.7930960333, 0.0);
      complex9.getReal();
      complex13.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      complex1.I.tanh();
      Complex complex2 = complex1.multiply(4557);
      complex0.getField();
      complex1.sin();
      complex2.createComplex((-1981.652295), 2.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(2265.7);
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.ONE.multiply((-2773));
      Complex complex2 = complex1.NaN.tanh();
      complex0.ONE.divide((double) (-2773));
      complex2.NaN.subtract((-2390.31718));
      complex2.I.tan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      complex3.readResolve();
      complex0.equals(complex4);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = new Complex((-783.17462440886));
      Complex complex5 = complex0.subtract(complex4);
      complex4.createComplex((-783.17462440886), 0.0);
      Complex complex6 = complex5.ZERO.pow((-783.17462440886));
      complex6.createComplex(0.0, 0.0);
      complex5.ZERO.getField();
      Complex complex7 = complex3.I.divide((-324.262134097));
      complex7.I.log();
      Complex complex8 = Complex.valueOf((-783.17462440886), (-1.1505428993246996E-8));
      Complex complex9 = Complex.valueOf((-783.17462440886), (-783.17462440886));
      Complex complex10 = complex9.ONE.multiply((-473));
      complex9.ONE.readResolve();
      complex9.ZERO.getArgument();
      Complex complex11 = complex8.sin();
      complex11.hashCode();
      Complex complex12 = complex3.sqrt();
      complex2.hashCode();
      Complex complex13 = complex0.conjugate();
      complex13.ONE.readResolve();
      complex1.getArgument();
      complex12.getField();
      complex4.toString();
      complex8.multiply(complex4);
      complex0.exp();
      complex12.getReal();
      Complex.valueOf(0.0, 0.0);
      complex10.multiply(1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(397.25);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.NaN.negate();
      complex0.INF.multiply((-1));
      Complex complex3 = complex2.INF.multiply((-2661.6));
      Complex complex4 = complex3.NaN.acos();
      complex0.ZERO.hashCode();
      complex0.readResolve();
      complex0.getArgument();
      Complex complex5 = complex1.log();
      complex5.I.conjugate();
      Complex.valueOf(0.0);
      Complex.valueOf((-2751.791));
      complex4.multiply((-3506.8643685));
      complex5.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.pow(Double.POSITIVE_INFINITY);
      complex2.I.tan();
      Complex complex3 = complex1.ONE.sin();
      complex3.NaN.createComplex(0.0, 1.0);
      complex1.I.readResolve();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.subtract(1.0);
      complex3.ONE.acos();
      Complex complex6 = complex4.multiply((-1345));
      complex6.ONE.conjugate();
      complex6.ONE.createComplex(Double.POSITIVE_INFINITY, 0.37102460861206055);
      Complex complex7 = complex6.sinh();
      Complex.valueOf(0.0);
      complex7.getArgument();
      Complex complex8 = complex5.add(1.0);
      Complex complex9 = complex8.sqrt();
      complex9.NaN.subtract((-271.8376482970022));
      try { 
        complex9.ONE.nthRoot((-1345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,345
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      double double0 = (-565.0);
      Complex complex0 = new Complex((-565.0));
      double double1 = (-2.105749999899302E-7);
      Complex complex1 = complex0.I.createComplex((-2.105749999899302E-7), 2460.556859562083);
      Complex complex2 = complex1.INF.sin();
      complex2.ZERO.sinh();
      try { 
        complex0.nthRoot((-3370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,370
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.createComplex(1.2715470790863037, 1.2715470790863037);
      complex3.NaN.nthRoot(1541);
      complex0.NaN.createComplex(0.0, (-654.677309773295));
      complex3.ZERO.abs();
      Complex complex4 = complex0.pow(complex1);
      complex0.NaN.cos();
      Complex complex5 = complex4.sin();
      complex5.NaN.multiply((-468.61213));
      complex0.cos();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.NaN.divide(0.0);
      Complex complex8 = Complex.valueOf(1.2715470790863037);
      complex8.sin();
      Complex complex9 = complex2.add(0.0);
      complex0.cosh();
      complex1.conjugate();
      complex3.getReal();
      complex7.log();
      complex8.add(complex9);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = 1176.0;
      Complex complex0 = new Complex(1176.0);
      try { 
        complex0.nthRoot((-925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -925
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.sqrt1z();
      complex0.abs();
      complex2.multiply(complex0);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.NaN.createComplex(2369.24, 2369.24);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow(858.355);
      complex2.conjugate();
      Complex complex3 = complex2.NaN.divide(0.053244516253471375);
      complex3.NaN.sqrt1z();
      Complex complex4 = complex1.sqrt1z();
      complex0.cos();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.add(complex0);
      Complex complex5 = complex4.acos();
      complex5.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.INF.sqrt();
      complex0.I.readResolve();
      Complex complex3 = Complex.valueOf(3.989519470441919E45);
      Complex complex4 = complex3.NaN.sinh();
      complex3.INF.hashCode();
      complex1.ZERO.conjugate();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex0.multiply(1249);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.I.add(complex0);
      complex3.divide(3.989519470441919E45);
      Complex complex9 = complex8.NaN.add(complex4);
      complex9.INF.toString();
      complex7.ONE.nthRoot(1249);
      Complex complex10 = complex6.asin();
      complex10.INF.add(0.0);
      complex6.NaN.abs();
      complex5.hashCode();
      complex5.add(complex7);
      complex1.hashCode();
      complex1.sqrt1z();
      Complex complex11 = complex1.subtract(complex2);
      complex11.subtract(complex5);
      complex11.readResolve();
      complex11.divide(3.989519470441919E45);
      complex3.tan();
      complex5.acos();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.divide(1360.4503325);
      Complex complex1 = complex0.createComplex(4404.250836743, 1360.4503325);
      complex1.add(1360.4503325);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-2770.485103));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.tan();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.sqrt();
      complex4.NaN.cos();
      complex4.NaN.atan();
      Complex complex5 = complex3.reciprocal();
      complex5.abs();
      Complex.valueOf((-1450.616465384), 20.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ZERO.subtract((-3598.824));
      complex0.ONE.readResolve();
      complex1.ONE.sinh();
      Complex complex2 = complex0.exp();
      complex2.ONE.divide(2086.848141);
      complex1.I.negate();
      complex0.tan();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6568518877029419, 0.6568518877029419);
      Complex complex1 = Complex.valueOf(0.6568518877029419);
      complex0.I.multiply(complex1);
      try { 
        complex0.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.ONE.pow(0.0);
      Complex complex4 = complex0.divide(0.0);
      complex4.ZERO.multiply(0.0);
      complex1.ZERO.sqrt1z();
      Complex complex5 = complex4.ZERO.createComplex((-235.0306618), 0.0);
      Complex complex6 = complex0.tan();
      complex4.ZERO.exp();
      complex6.INF.conjugate();
      Complex complex7 = complex6.INF.cos();
      complex6.INF.getField();
      Complex complex8 = complex2.subtract(0.0);
      complex8.ZERO.readResolve();
      Complex complex9 = complex0.add((-235.0306618));
      complex9.INF.conjugate();
      Complex complex10 = new Complex(1.0524719896550007E251, 0.0);
      Complex complex11 = complex10.exp();
      complex11.NaN.getField();
      complex11.ONE.conjugate();
      Complex complex12 = complex5.divide(complex10);
      complex12.NaN.hashCode();
      complex0.hashCode();
      complex0.reciprocal();
      Complex.valueOf(1.0524719896550007E251);
      complex10.isNaN();
      complex7.getImaginary();
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-1225.8413578702), (-1225.8413578702));
      Complex complex1 = Complex.valueOf(1290.65315113);
      Complex complex2 = complex0.createComplex(3073.413271152328, 774.4398047);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex3.ZERO.pow(774.4398047);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex3.ONE.atan();
      Complex complex9 = complex8.I.subtract(774.4398047);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex9.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex8.getReal(), 0.01);
      
      Complex complex10 = complex7.I.add(2466.82434);
      Complex complex11 = complex6.INF.pow((-1225.8413578702));
      Complex complex12 = complex3.NaN.conjugate();
      Object object0 = complex7.readResolve();
      complex3.equals("{z!(Av");
      Complex complex13 = complex0.add(complex6);
      Complex complex14 = complex13.sin();
      assertTrue(complex3.isInfinite());
      assertSame(complex14, complex12);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      
      complex5.equals("P*2v");
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.equals((Object)object0));
      assertEquals(1.1752011936438014, complex5.getReal(), 0.01);
      
      Complex complex15 = complex4.cos();
      Complex complex16 = complex15.exp();
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(0.0);
      String string0 = complex1.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex2 = complex1.NaN.atan();
      double double0 = complex1.ZERO.abs();
      assertSame(complex1, complex2);
      assertEquals(0.0, double0, 0.01);
      
      Complex complex3 = Complex.valueOf(0.0);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1082.0, 1082.0);
      Complex complex1 = complex0.ZERO.conjugate();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = Complex.valueOf((-2043.24187293), 0.0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-2043.24187293), complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.INF.pow(0.0);
      assertTrue(complex3.isNaN());
      
      double double0 = complex0.abs();
      assertEquals(1530.179074487689, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex1.multiply(0);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = Complex.valueOf((double) 0);
      boolean boolean0 = complex4.equals(complex6);
      assertTrue(complex4.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      
      complex6.hashCode();
      complex3.getField();
      assertTrue(complex3.equals((Object)complex5));
      
      Complex complex7 = complex6.sin();
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
  }
}
