/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:09:22 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sin();
      complex2.ZERO.pow(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.NaN.multiply(complex0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.I.tanh();
      complex9.I.sqrt1z();
      Complex complex10 = complex2.NaN.add((-3001.76));
      complex10.NaN.sqrt1z();
      Complex complex11 = Complex.valueOf(1585.2279673217, 2073.0);
      Complex complex12 = complex11.I.conjugate();
      Complex complex13 = complex2.sqrt1z();
      complex3.tanh();
      complex13.INF.toString();
      complex5.nthRoot(665);
      Complex.valueOf(1585.2279673217);
      complex6.add(complex5);
      complex7.multiply(1585.2279673217);
      Complex complex14 = complex5.add(complex13);
      complex14.ZERO.pow(complex13);
      Complex complex15 = complex12.atan();
      complex5.add(complex4);
      complex12.conjugate();
      complex2.createComplex(0.9999999999999977, (-2974.0));
      complex15.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1441.88207271201), 2069.73126768447);
      Complex complex2 = new Complex(2069.73126768447, 191.4068);
      complex1.pow(complex2);
      complex0.exp();
      Complex complex3 = complex1.pow(complex2);
      complex3.ONE.hashCode();
      complex2.NaN.getField();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.I.multiply(complex4);
      Complex complex6 = complex5.I.atan();
      complex6.I.readResolve();
      complex5.ZERO.getField();
      Complex complex7 = complex0.ZERO.add(complex1);
      complex7.I.multiply(complex0);
      Complex complex8 = complex0.subtract(339.513);
      Complex complex9 = complex8.ZERO.cosh();
      Complex complex10 = complex2.conjugate();
      complex10.NaN.exp();
      complex8.negate();
      Complex complex11 = complex8.createComplex((-833.6534253668), Double.POSITIVE_INFINITY);
      complex11.I.sqrt1z();
      Complex complex12 = complex3.pow(complex5);
      Complex complex13 = complex11.multiply(complex5);
      Complex complex14 = complex3.subtract(complex13);
      complex12.pow(complex4);
      complex14.sin();
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3858642.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.acos();
      complex1.pow(Double.POSITIVE_INFINITY);
      complex3.nthRoot(703);
      Complex complex4 = complex2.add(complex1);
      Complex complex5 = Complex.ONE;
      complex4.multiply(1392);
      Complex.valueOf((double) 1392, Double.POSITIVE_INFINITY);
      complex3.multiply((-285));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.pow(complex6);
      complex4.toString();
      complex7.subtract(1788.2551488448032);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(2.0);
      complex1.ZERO.abs();
      complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(2.0, 1.8861808782043154E64);
      complex0.abs();
      complex2.add(complex0);
      complex0.add(complex1);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-14.927531947191312), (-14.927531947191312));
      Complex complex1 = new Complex(4.3266230246175686E-13, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tan();
      Complex complex1 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.ZERO.sinh();
      complex0.INF.conjugate();
      complex0.asin();
      Complex complex3 = complex0.add(complex2);
      try { 
        complex3.ONE.nthRoot((-2416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,416
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-14.927531947191312), (-14.927531947191312));
      Complex complex1 = new Complex(2262.8042, Double.POSITIVE_INFINITY);
      complex0.multiply(2262.8042);
      Complex complex2 = complex0.pow(complex1);
      complex2.add(2262.8042);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(1.0);
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.multiply(50744.04207438878);
      complex5.getArgument();
      complex0.hashCode();
      Complex complex6 = new Complex(0.43661363092076766, Double.NaN);
      complex6.add(complex4);
      Complex complex7 = complex0.sqrt();
      complex2.add(Double.NaN);
      Complex complex8 = new Complex(2770.485103, (-1128.88688350498));
      Complex complex9 = complex8.log();
      complex5.subtract(6.283185307179586);
      complex7.nthRoot(1);
      complex9.abs();
      Complex complex10 = new Complex(8.012928016358254, 1.000000014474444);
      complex10.multiply(complex3);
      Complex complex11 = complex2.exp();
      Complex.valueOf((-1438.18207208638));
      Complex complex12 = complex11.sqrt();
      complex8.multiply((-407.27952));
      complex5.cos();
      complex11.readResolve();
      complex12.asin();
      Complex complex13 = Complex.I;
      complex13.atan();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2383.15011, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.ONE.sqrt();
      complex3.I.multiply(1974.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.ZERO.multiply(0.0);
      complex0.getField();
      Complex complex6 = complex5.I.exp();
      complex0.ZERO.createComplex(2681.1168, 6.283185307179586);
      Complex complex7 = complex6.ONE.multiply((-20.0));
      Complex.valueOf((-20.0), 6.283185307179586);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-17.152597479109478));
      Complex complex1 = complex0.subtract((-17.152597479109478));
      Complex complex2 = new Complex((-17.152597479109478), (-1552.3745600331329));
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.sqrt();
      complex4.readResolve();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex3.subtract((-1552.3745600331329));
      complex5.abs();
      complex5.atan();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.add(Double.POSITIVE_INFINITY);
      Complex complex10 = complex6.conjugate();
      complex1.acos();
      complex7.nthRoot(1035);
      complex10.nthRoot(1031);
      Complex complex11 = complex5.multiply(1031);
      complex7.toString();
      complex2.divide(complex9);
      Complex complex12 = Complex.NaN;
      complex12.conjugate();
      complex9.multiply(0);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 1195.7918);
      complex1.tanh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-14.927531947191312));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.abs();
      complex0.tanh();
      Complex complex2 = new Complex((-1.0), (-1.0));
      complex2.subtract(Double.NaN);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.I;
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt();
      complex2.hashCode();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.subtract(complex2);
      complex5.INF.multiply(837.88898);
      complex0.readResolve();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.NaN;
      complex6.equals(complex4);
      Complex complex8 = Complex.INF;
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.400909028663647E-4, (-2809.71359));
      Complex complex1 = new Complex(5.400909028663647E-4, (-20.0));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.multiply((-248));
      Complex complex4 = Complex.valueOf(1628.26151, (-2809.71359));
      Complex complex5 = complex3.sqrt();
      complex1.hashCode();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.ONE;
      complex5.subtract(complex4);
      complex7.readResolve();
      complex5.divide((-20.0));
      complex1.tan();
      Complex complex8 = Complex.NaN;
      Object object0 = complex8.readResolve();
      complex6.equals(object0);
      Complex complex9 = Complex.INF;
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      Complex complex1 = Complex.valueOf(1495.29419, (-1981.652295));
      Complex complex2 = complex1.tanh();
      Complex complex3 = new Complex((-2253.801132147), Double.POSITIVE_INFINITY);
      Complex.valueOf((-3.314051560952014E-254));
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.sqrt();
      complex2.reciprocal();
      complex3.sqrt1z();
      complex1.subtract(complex3);
      complex3.sqrt1z();
      double double0 = (-20.0);
      Complex complex4 = new Complex(2453.1669047, (-20.0));
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      complex0.pow((-2617.062195450182));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.getField();
      Complex complex2 = complex1.tanh();
      complex2.cos();
      Complex complex3 = complex1.log();
      complex3.getField();
      Complex complex4 = complex2.multiply(3616);
      Complex.valueOf((-2617.062195450182));
      complex4.multiply(complex3);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = new Complex(0.43661363092076766, 0.43661363092076766);
      Complex complex2 = complex1.createComplex(1.7078641226055994E-91, (-20.0));
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.multiply((-1));
      Complex complex5 = Complex.valueOf((-1090.2461601), 0.9994599090971337);
      complex2.sqrt();
      complex3.hashCode();
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.sqrt1z();
      complex1.subtract(complex7);
      complex2.subtract(complex4);
      complex2.readResolve();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.divide((double) 4557);
      Complex complex10 = complex4.tan();
      complex7.acos();
      complex5.add(complex9);
      Complex complex11 = new Complex(2246.60022408623);
      complex8.getField();
      complex6.subtract(0.43661363092076766);
      complex2.subtract((-887.06));
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      complex1.multiply(4557);
      Complex complex2 = complex0.I.pow(complex1);
      complex2.NaN.asin();
      complex0.getField();
      complex0.nthRoot(4557);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.400909028663647E-4, (-2809.71359));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.multiply(4557);
      Complex.valueOf(1452.17978245, 1.1752011936438014);
      Complex complex3 = complex1.add(complex0);
      complex2.hashCode();
      Complex complex4 = Complex.I;
      complex3.sqrt1z();
      Complex complex5 = Complex.ZERO;
      complex2.readResolve();
      complex3.equals(complex5);
      complex5.exp();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.pow(2.0);
      Complex complex2 = complex0.atan();
      complex2.getField();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.cos();
      complex3.multiply(3616);
      Complex complex5 = complex0.sqrt();
      complex2.getReal();
      Object object0 = complex1.readResolve();
      Complex complex6 = complex0.ZERO.divide(complex4);
      complex6.ZERO.sin();
      ((Complex) object0).I.getField();
      Complex complex7 = Complex.I;
      complex7.ONE.multiply((-4.135185828158998E96));
      complex7.ZERO.nthRoot(3616);
      complex7.exp();
      complex4.reciprocal();
      // Undeclared exception!
      complex5.nthRoot(3616);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.exp();
      complex1.INF.negate();
      Complex complex3 = Complex.I;
      complex3.ONE.divide(1966.11695147306);
      complex3.ZERO.getField();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = Complex.valueOf(2.523146871127163E-4, 2.523146871127163E-4);
      complex5.ONE.tan();
      Complex complex6 = complex5.INF.negate();
      complex0.ZERO.getArgument();
      Complex complex7 = complex4.add((-1463.8));
      complex7.getArgument();
      complex4.INF.divide(complex6);
      complex4.cos();
      Complex complex8 = complex3.pow(0.0);
      complex8.INF.cos();
      complex2.abs();
      complex6.divide(2.523146871127163E-4);
      complex0.sin();
      complex6.tan();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      Complex complex1 = Complex.valueOf((-1981.652295), (-1981.652295));
      Complex complex2 = Complex.valueOf((-0.999495370668577), (-1981.652295));
      complex2.pow(complex0);
      complex2.reciprocal();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.sqrt1z();
      complex3.abs();
      Complex.valueOf((-1900.0));
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.divide(complex0);
      Complex.valueOf((-4.930504355434369));
      complex5.reciprocal();
      complex7.sqrt1z();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.400909028663647E-4, (-2809.71359));
      complex0.abs();
      Complex complex1 = new Complex((-20.0), 5.400909028663647E-4);
      Complex complex2 = complex1.createComplex(446.607403603512, 2809.7135900000517);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.cos();
      complex4.log();
      complex4.getField();
      complex3.multiply(955);
      complex4.sqrt();
      complex1.getReal();
      complex4.readResolve();
      Complex complex6 = Complex.I;
      complex3.exp();
      complex4.log();
      Complex complex7 = new Complex(639.9244727184);
      Complex complex8 = complex7.pow((-20.0));
      complex8.asin();
      complex5.multiply(480.92866049424);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf((-1981.652295), 20.0);
      complex1.getField();
      Complex complex2 = Complex.valueOf(20.0, 2.0);
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
      complex2.conjugate();
      Complex complex3 = Complex.ZERO;
      complex2.equals(complex1);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.ZERO.subtract((-3598.824));
      complex0.ONE.readResolve();
      complex1.ONE.sinh();
      Complex complex2 = complex0.exp();
      complex2.ONE.divide(2086.848141);
      Complex complex3 = Complex.ONE;
      complex0.tan();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.createComplex(1927.0, 4401.4530249159);
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.valueOf((double) 4557, (double) 4557);
      complex1.add(complex3);
      complex1.hashCode();
      complex4.ONE.abs();
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.cos();
      complex6.multiply(4557);
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = new Complex(2370.7721808985);
      complex9.ONE.add(complex8);
      complex8.equals(complex9);
      complex7.hashCode();
      complex5.getField();
      Complex complex10 = Complex.ZERO;
      complex4.sin();
      complex6.nthRoot(4557);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      complex1.multiply(complex1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.subtract(complex1);
      Complex complex4 = Complex.INF;
      complex4.multiply(373);
      Complex.valueOf((double) 0);
      complex1.equals(complex1);
      complex2.hashCode();
      complex3.getField();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.tan();
      complex0.add(complex3);
      Complex complex4 = complex2.createComplex(3.3855429446520427E-49, (-2247.22187516));
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.valueOf(1.395158290863037, (-2247.22187516));
      Complex complex7 = complex6.pow(0.012615403160452843);
      complex5.abs();
      Complex complex8 = complex6.atan();
      complex4.getField();
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex10.log();
      complex6.getField();
      complex4.multiply(3616);
      complex5.sqrt();
      complex11.getReal();
      complex9.readResolve();
      Complex complex12 = Complex.I;
      complex12.exp();
      complex3.log();
      complex1.pow((-446.607403603512));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.subtract(complex2);
      complex1.multiply(0);
      complex2.isInfinite();
      complex1.hashCode();
      complex3.getField();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(446.607403603512, 446.607403603512);
      complex0.atan();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex2.log();
      complex4.sqrt();
      complex4.cos();
      complex2.atan();
      complex5.reciprocal();
      Complex complex6 = Complex.ONE;
      complex6.abs();
      Complex.valueOf(20.0, 162754.78125);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      complex2.tan();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.multiply(complex1);
      complex0.sqrt();
      complex4.cos();
      complex3.atan();
      complex4.reciprocal();
      Complex complex5 = Complex.ONE;
      complex5.abs();
      Complex.valueOf((-1450.616465384), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ZERO.subtract((-3598.824));
      complex0.ONE.readResolve();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex0.exp();
      complex3.ONE.divide(2086.848141);
      complex1.I.negate();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf((-3598.824), (-2854.5));
      complex5.getField();
      complex2.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf((-2470.465), (-736.7318936296083));
      Complex complex3 = Complex.valueOf(7.201319954099161E239);
      Complex complex4 = complex3.add(complex0);
      complex1.getImaginary();
      complex1.getArgument();
      complex4.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.cos();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.multiply(17);
      Complex.valueOf(3850.4119256294257);
      Complex complex10 = Complex.INF;
      Object object0 = new Object();
      complex10.equals(object0);
      complex9.hashCode();
      complex2.getField();
      complex7.sin();
      complex5.nthRoot(4557);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      complex1.I.tanh();
      Complex complex2 = complex1.multiply(4557);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 4557);
      complex3.add(complex1);
      complex2.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.sqrt1z();
      complex0.subtract(complex3);
      complex2.subtract(complex5);
      complex2.readResolve();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.tan();
      Complex complex6 = Complex.valueOf(0.043211077506217895);
      complex6.acos();
      Complex complex7 = new Complex((-728.679387764261));
      Complex complex8 = Complex.ZERO;
      complex8.getField();
      complex5.subtract((-3.304167134225169E-8));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(446.607403603512, 446.607403603512);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex1.multiply((-1031));
      Complex complex4 = Complex.valueOf((-1462.0543937469527), 446.607403603512);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.add(complex1);
      complex3.hashCode();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.sqrt1z();
      complex8.subtract(complex4);
      Complex complex9 = complex5.subtract(complex1);
      Complex complex10 = Complex.I;
      complex10.readResolve();
      complex2.divide(Double.NaN);
      complex5.tan();
      Complex complex11 = complex5.acos();
      complex11.pow(complex9);
      Complex complex12 = new Complex(8.248039502976497E-4);
      complex6.getField();
      complex10.subtract((-3.304167134225169E-8));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(446.607403603512, 446.607403603512);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.NaN.add(complex3);
      complex0.getImaginary();
      complex0.ONE.add(446.607403603512);
      complex2.getArgument();
      Complex complex5 = complex0.subtract(446.607403603512);
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.NaN.cos();
      complex4.multiply(37);
      Complex complex7 = Complex.valueOf(0.7853981633974483);
      complex5.equals(complex4);
      complex7.hashCode();
      Complex complex8 = Complex.INF;
      complex8.exp();
      complex4.log();
      complex1.pow(3184.970615177);
      complex7.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.nthRoot(1873);
      Complex complex1 = Complex.valueOf(4733.30822647122, 4733.30822647122);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(1.0);
      complex3.INF.nthRoot(2049162264);
      Complex complex4 = complex1.NaN.multiply(4733.30822647122);
      complex4.I.pow(complex1);
      complex4.INF.sin();
      Complex complex5 = complex0.pow((-635.02440212678));
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex6.add(complex2);
      Complex complex8 = complex2.sinh();
      Complex complex9 = Complex.ZERO;
      complex8.ONE.pow(complex9);
      complex8.sqrt();
      complex7.subtract((-1005.0));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.add(0.5968599319458008);
      complex1.atan();
      Complex complex2 = Complex.valueOf(0.5968599319458008, 0.5968599319458008);
      Complex complex3 = complex2.ZERO.multiply(0.012615403160452843);
      Complex complex4 = complex0.negate();
      Complex.valueOf((-7.839574072711142E-8), 0.012615403160452843);
      complex4.NaN.getField();
      Complex.valueOf(0.5968599319458008, 0.5968599319458008);
      complex4.equals(complex0);
      complex1.conjugate();
      Complex complex5 = Complex.ZERO;
      complex4.equals(complex5);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-2770.485103));
      Complex complex1 = complex0.I.tan();
      complex1.NaN.acos();
      Complex complex2 = complex1.NaN.tan();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.sqrt();
      complex4.NaN.cos();
      complex4.NaN.atan();
      Complex complex5 = complex3.reciprocal();
      complex5.abs();
      complex3.multiply((-2770.485103));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(0.0);
      complex1.INF.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex2.multiply(0);
      Complex.valueOf(3.989519470441919E45);
      complex2.equals((Object) null);
      complex3.hashCode();
      complex5.getField();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.2556083668286, (-462.1));
      Complex complex1 = complex0.divide((-462.1));
      Complex complex2 = complex1.ZERO.cos();
      complex2.I.divide(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.createComplex((-462.1), 213.2556083668286);
      complex4.ZERO.add(complex1);
      Complex complex5 = complex4.ONE.createComplex(213.2556083668286, 213.2556083668286);
      Complex complex6 = complex5.ONE.sqrt1z();
      complex6.pow(227.7584054);
      complex6.ZERO.abs();
      Complex complex7 = complex0.atan();
      complex5.INF.getField();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.ZERO.cos();
      Complex complex10 = complex0.log();
      complex7.getField();
      complex10.multiply(3616);
      complex7.ZERO.sqrt();
      complex5.getReal();
      complex9.readResolve();
      complex10.exp();
      complex5.log();
      complex6.pow(227.7584054);
      complex3.acos();
      complex4.cos();
      complex1.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(446.607403603512, 446.607403603512);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.NaN.add(complex3);
      complex0.getImaginary();
      complex2.getArgument();
      Complex complex5 = complex0.subtract(446.607403603512);
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.NaN.cos();
      complex4.multiply(37);
      Complex complex7 = Complex.valueOf(0.7853981633974483);
      complex5.equals(complex4);
      complex7.hashCode();
      complex5.getField();
      complex1.sin();
      complex1.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.tan();
      complex2.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.sqrt();
      complex6.cos();
      complex4.atan();
      complex0.reciprocal();
      complex6.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY, 20.0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-2770.485103));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex0.getField();
      complex1.toString();
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(1.5707963267948966);
      complex0.getReal();
      Complex complex4 = new Complex((-2770.485103), (-2770.485103));
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.cosh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex0.divide(complex7);
      complex8.NaN.hashCode();
      complex2.cosh();
      complex3.multiply((-1024));
      complex6.getArgument();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      complex1.I.tanh();
      Complex complex2 = complex1.multiply(4557);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 4557);
      complex3.add(complex1);
      complex2.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = complex6.subtract(complex5);
      complex7.readResolve();
      complex0.divide(2.0);
      complex3.tan();
      complex2.acos();
      Complex complex8 = new Complex((-290.889));
      complex8.getField();
      complex6.subtract((-3.304167134225169E-8));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(399.93611795445963, 399.93611795445963);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf((-0.9305115500490392), (-0.9305115500490392));
      Complex complex4 = complex0.NaN.add(complex3);
      complex2.getArgument();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.acos();
      complex6.reciprocal();
      Complex complex7 = complex4.conjugate();
      complex7.ONE.multiply((-3125));
      complex7.getImaginary();
      complex6.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.createComplex((-1.0), Double.NaN);
      Complex complex6 = complex2.add(complex3);
      Complex complex7 = Complex.valueOf((-1.0));
      Complex complex8 = complex7.createComplex((-1.0), (-1.0));
      complex4.sqrt1z();
      complex3.pow(Double.NaN);
      complex5.abs();
      Complex complex9 = complex2.atan();
      complex9.getField();
      Complex complex10 = complex0.tanh();
      complex6.cos();
      Complex complex11 = complex8.log();
      complex5.getField();
      complex3.multiply((-1857));
      complex11.sqrt();
      complex10.getReal();
      complex8.readResolve();
      Complex complex12 = complex6.exp();
      complex12.ONE.tan();
      complex11.log();
      Complex complex13 = new Complex(937.0391096, 3548.0);
      complex13.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.2556083668286, (-462.1));
      Complex complex1 = complex0.divide((-462.1));
      Complex complex2 = complex1.ZERO.cos();
      complex2.getField();
      complex1.toString();
      complex0.getArgument();
      Complex complex3 = new Complex(0.2530004129341353);
      Complex complex4 = complex3.asin();
      complex1.getReal();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.cosh();
      complex1.divide(complex4);
      complex0.cosh();
      complex0.multiply((-1024));
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-2770.485103));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.subtract(complex1);
      complex4.ONE.cosh();
      complex1.multiply(1028);
      Complex complex5 = Complex.valueOf(1034.7);
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      complex5.hashCode();
      complex1.getField();
      Complex complex6 = Complex.INF;
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      complex2.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.sqrt();
      complex4.cos();
      complex2.atan();
      Complex complex5 = complex3.reciprocal();
      complex5.INF.hashCode();
      complex3.abs();
      Complex complex6 = Complex.valueOf(2.1470270439749584E-5, 0.5860490798950195);
      complex6.conjugate();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      complex0.readResolve();
      complex0.asin();
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex0.log();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(0.9999997708223537, 0.9999997708223537);
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = complex3.multiply(1229);
      complex5.sqrt();
      complex4.cosh();
      complex4.sqrt();
      Complex complex6 = new Complex(0.9999997708223537, 0.9999997708223537);
      complex6.multiply((-4152));
      complex0.isInfinite();
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex6.sqrt1z();
      complex4.atan();
      complex6.divide(complex8);
      complex1.exp();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.divide(complex7);
      Complex complex11 = Complex.ONE;
      complex11.tanh();
      complex10.asin();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 0);
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.pow(0.4614923357862553);
      Complex complex5 = Complex.valueOf(0.4614923357862553, 0.4614923357862553);
      complex5.readResolve();
      Complex complex6 = complex5.asin();
      complex3.multiply(3013.7379567237804);
      Complex complex7 = complex6.log();
      Complex complex8 = Complex.valueOf(2.0, 6.283185307179586);
      Complex complex9 = complex8.cos();
      Complex complex10 = Complex.I;
      complex10.multiply(0);
      complex4.sqrt();
      complex10.cosh();
      Complex complex11 = complex8.sqrt();
      complex5.multiply(0);
      complex10.isInfinite();
      Complex complex12 = complex8.cosh();
      complex2.sqrt1z();
      Complex complex13 = complex11.atan();
      complex7.divide(complex12);
      complex6.exp();
      Complex complex14 = Complex.INF;
      complex13.divide(complex4);
      complex9.tanh();
      Complex complex15 = Complex.I;
      complex15.asin();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(2088.88183182754);
      complex0.abs();
      complex0.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex2.hashCode();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.subtract(complex2);
      complex3.subtract(complex2);
      complex0.readResolve();
      Complex complex5 = complex4.divide(2088.88183182754);
      complex3.tan();
      complex5.acos();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(446.607403603512, 446.607403603512);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.NaN.add(complex3);
      complex0.getImaginary();
      complex2.getArgument();
      Complex complex5 = complex3.NaN.sqrt1z();
      complex5.NaN.cos();
      complex2.exp();
      complex1.sinh();
      Complex complex6 = complex1.acos();
      complex6.NaN.getArgument();
      complex6.reciprocal();
      Complex complex7 = complex4.conjugate();
      complex7.ONE.multiply((-3125));
      Complex.valueOf(Double.NaN);
      complex2.getArgument();
      try { 
        complex3.nthRoot((-260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -260
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(2088.88183182754);
      complex0.INF.negate();
      complex0.ONE.asin();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(213.2556083668286, (-462.1));
      Complex complex1 = complex0.divide((-462.1));
      Complex complex2 = complex1.ZERO.cos();
      complex2.I.divide(complex1);
      complex0.reciprocal();
      Complex complex3 = complex0.createComplex((-462.1), 213.2556083668286);
      Complex complex4 = complex3.ZERO.add(complex1);
      Complex complex5 = complex3.ONE.createComplex(213.2556083668286, 213.2556083668286);
      Complex complex6 = complex5.ONE.sqrt1z();
      complex6.pow(227.7584054);
      complex6.ZERO.abs();
      Complex complex7 = complex0.atan();
      complex5.INF.getField();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex8.ZERO.cos();
      complex3.ONE.readResolve();
      Complex complex10 = complex0.log();
      complex7.getField();
      Complex complex11 = complex10.multiply(3616);
      complex9.I.getField();
      complex7.ZERO.sqrt();
      complex5.getReal();
      complex9.readResolve();
      complex10.exp();
      complex5.log();
      complex11.acos();
      complex1.getField();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.getField();
      complex0.ONE.hashCode();
      Complex complex1 = complex0.log();
      complex1.isNaN();
      complex0.ONE.exp();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.ONE.acos();
      complex2.ZERO.hashCode();
      Complex complex4 = Complex.valueOf(1.0);
      complex3.I.sinh();
      complex2.ONE.subtract(complex3);
      complex1.getImaginary();
      complex2.toString();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.NaN.negate();
      complex3.readResolve();
      complex4.equals(complex1);
      complex3.sin();
      Complex complex7 = complex0.acos();
      complex7.I.add(0.0);
      Complex complex8 = complex6.add(1674.1229);
      complex8.sqrt();
      complex3.sqrt();
      complex4.pow(0.0);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-161.548345821566), (-161.548345821566));
      Complex complex1 = complex0.pow((-161.548345821566));
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.NaN.negate();
      Complex complex4 = complex1.multiply((-4101));
      complex3.NaN.getArgument();
      complex0.isInfinite();
      complex0.multiply(7);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex1.pow((-161.548345821566));
      complex4.tanh();
      complex6.multiply((-435));
      complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-2455.057935289), (-2455.057935289));
      Complex complex1 = complex0.I.sin();
      complex1.I.conjugate();
      double double0 = Double.NaN;
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex2.ZERO.abs();
      Complex complex3 = complex0.NaN.multiply(complex2);
      Complex complex4 = Complex.valueOf(Double.NaN, (-2455.057935289));
      complex2.INF.cosh();
      complex4.ZERO.toString();
      Complex complex5 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.I.add(complex3);
      complex0.atan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.pow(complex7);
      complex8.ONE.subtract(Double.POSITIVE_INFINITY);
      complex6.ONE.sqrt1z();
      complex5.sqrt();
      try { 
        complex5.NaN.nthRoot((-52));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -52
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-3442.0743416));
      Complex complex1 = complex0.I.divide((-4152.126426));
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = new Complex((-984.6961819), (-3442.0743416));
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.multiply(1);
      complex1.ONE.multiply(1);
      Complex complex6 = complex5.ONE.tanh();
      complex6.NaN.toString();
      Complex complex7 = complex0.INF.exp();
      complex0.atan();
      Complex complex8 = complex7.multiply(complex1);
      Complex complex9 = complex8.INF.add((double) 1);
      complex9.subtract(complex4);
      Complex complex10 = complex4.tanh();
      complex10.NaN.getArgument();
      complex7.pow(complex8);
      complex7.isNaN();
      Complex complex11 = complex0.cosh();
      complex11.hashCode();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.I.abs();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.add(0.0);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.ZERO.subtract(complex1);
      Complex complex6 = complex3.INF.pow(Double.NaN);
      complex5.NaN.multiply(Double.NaN);
      complex3.add(complex4);
      Complex complex7 = complex2.createComplex(0.0, 1.0);
      complex4.getImaginary();
      complex1.acos();
      complex7.multiply(683);
      complex4.subtract(281.470179);
      Complex complex8 = Complex.I;
      complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0965324942770584E171));
      complex0.isInfinite();
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(0.0, 1087.5501803056);
      Complex complex2 = complex1.ZERO.add((-1.0965324942770584E171));
      complex1.NaN.asin();
      complex1.ONE.cos();
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex1.I.negate();
      complex2.NaN.divide((-1.0965324942770584E171));
      complex0.equals((Object) null);
      complex2.getArgument();
      complex0.getField();
      complex4.readResolve();
      complex2.acos();
      complex3.asin();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      complex0.ZERO.getField();
      Complex complex1 = complex0.multiply(601);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex1.INF.sqrt1z();
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex3.I.sinh();
      complex8.I.pow(complex5);
      Complex complex9 = new Complex(Double.NaN);
      complex1.INF.divide(complex9);
      Complex complex10 = complex5.I.add(complex4);
      complex10.log();
      Complex complex11 = complex3.I.sqrt1z();
      complex0.divide((double) 601);
      Complex complex12 = complex5.pow(complex1);
      Complex complex13 = complex12.ONE.multiply(245);
      complex12.NaN.hashCode();
      complex3.tan();
      complex6.isNaN();
      Complex complex14 = complex7.sinh();
      complex14.ZERO.sqrt1z();
      complex7.add(complex2);
      complex13.cosh();
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.asin();
      complex3.NaN.sinh();
      complex3.ZERO.getArgument();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.NaN.negate();
      complex3.ONE.cosh();
      complex0.toString();
      Complex complex7 = complex3.reciprocal();
      complex1.toString();
      complex5.ZERO.multiply(0.0);
      Complex complex8 = complex2.cosh();
      complex3.NaN.cos();
      Complex complex9 = complex8.reciprocal();
      complex5.subtract(complex7);
      complex7.sqrt();
      Complex complex10 = complex1.tan();
      complex10.INF.asin();
      complex9.sqrt1z();
      complex2.sqrt();
      complex6.divide(2967.47453);
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.I.tan();
      complex4.INF.tanh();
      Complex complex5 = complex3.I.multiply(516);
      Complex complex6 = complex1.NaN.multiply(complex3);
      complex6.INF.cos();
      complex5.ZERO.abs();
      Complex complex7 = complex3.NaN.sin();
      complex7.I.hashCode();
      Complex complex8 = complex7.ONE.multiply(0.0);
      complex8.INF.nthRoot(408);
      Complex complex9 = complex2.exp();
      Complex.valueOf(0.0);
      complex7.getReal();
      complex5.NaN.subtract(complex6);
      Complex complex10 = Complex.valueOf((double) 516, 0.0);
      complex3.ZERO.toString();
      complex9.isInfinite();
      complex7.readResolve();
      complex7.isNaN();
      complex5.reciprocal();
      Complex complex11 = complex7.divide((double) 516);
      complex11.ONE.cosh();
      Complex complex12 = complex10.acos();
      complex0.multiply(859.9816798317592);
      complex5.cosh();
      complex12.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.atan();
      complex2.ONE.pow(0.0);
      complex0.ZERO.readResolve();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex0.multiply((-234.730427994437));
      Complex complex5 = complex3.log();
      Complex complex6 = complex0.cos();
      complex6.I.divide(complex0);
      Complex complex7 = complex4.multiply(0);
      complex7.sqrt();
      Complex complex8 = complex3.cosh();
      complex8.ONE.sqrt();
      Complex complex9 = complex6.multiply(0);
      complex3.isInfinite();
      complex0.NaN.cosh();
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex9.divide(complex11);
      complex11.ZERO.exp();
      Complex complex13 = Complex.INF;
      complex12.divide(complex13);
      Complex complex14 = complex0.tanh();
      complex14.I.asin();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(2088.88183182754);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = Complex.valueOf(932.167);
      Complex complex3 = complex0.I.multiply(complex2);
      complex3.ONE.multiply(0);
      Complex complex4 = complex0.NaN.multiply(1029);
      complex4.I.conjugate();
      complex1.I.divide(0.0);
      Complex complex5 = complex0.ONE.sqrt();
      Complex complex6 = complex5.INF.tanh();
      complex6.ZERO.multiply(complex0);
      complex1.getArgument();
      Complex complex7 = complex0.divide((-4068.763525));
      complex0.hashCode();
      Complex complex8 = complex7.multiply(Double.NaN);
      complex8.toString();
      complex8.getArgument();
      complex5.abs();
      complex7.multiply(1457);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(136.8167, 136.8167);
      Complex complex1 = complex0.sin();
      complex0.ONE.tanh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.NaN.multiply(136.8167);
      complex3.ZERO.createComplex(1.32472428796441E-9, 136.8167);
      Complex complex4 = Complex.INF;
      complex0.I.reciprocal();
      complex2.multiply(complex4);
      Complex complex5 = complex1.asin();
      complex5.NaN.toString();
      complex0.abs();
      Complex complex6 = complex5.asin();
      complex2.isInfinite();
      complex5.toString();
      complex6.getReal();
      complex2.toString();
      complex0.multiply(complex1);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-4.27932550865546E-8));
      Complex complex1 = new Complex(0.0);
      complex0.ZERO.cos();
      Complex complex2 = complex0.subtract(complex1);
      complex1.add(complex2);
      complex0.divide(6.283185307179586);
      complex0.add(1002.7);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(2377.897576159306);
      Complex complex1 = complex0.NaN.subtract(866.1107);
      Complex complex2 = complex1.ONE.log();
      complex2.ZERO.pow(2377.897576159306);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex1.multiply(2377.897576159306);
      complex0.pow(complex4);
      Complex complex5 = complex3.multiply(0);
      complex5.add(complex4);
      Complex complex6 = complex3.sinh();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(4.2459748085663055E253, 4.2459748085663055E253);
      Complex complex1 = Complex.INF;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.ONE.add(complex1);
      complex1.getField();
      complex1.NaN.toString();
      complex0.ONE.getArgument();
      Complex complex3 = complex0.ZERO.asin();
      complex1.getReal();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.cosh();
      complex4.divide(complex5);
      complex3.cosh();
      Complex complex6 = complex2.multiply((-1024));
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(446.607403603512, 446.607403603512);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.NaN.add(complex3);
      complex0.getImaginary();
      complex2.getArgument();
      Complex complex5 = complex0.subtract(446.607403603512);
      Complex complex6 = complex5.NaN.sqrt1z();
      complex6.NaN.cos();
      complex5.exp();
      complex1.sinh();
      Complex complex7 = complex1.acos();
      complex7.NaN.getArgument();
      complex7.reciprocal();
      Complex complex8 = complex4.conjugate();
      complex8.ONE.multiply((-3125));
      Complex.valueOf(Double.NaN);
      complex2.getArgument();
      try { 
        complex3.nthRoot((-260));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -260
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.abs();
      Complex complex2 = new Complex(1150.7930960333);
      Complex complex3 = complex0.subtract(complex2);
      complex1.toString();
      Complex complex4 = complex3.NaN.subtract(1150.7930960333);
      Complex complex5 = complex3.tan();
      complex2.isInfinite();
      complex0.isNaN();
      Complex complex6 = complex4.acos();
      complex4.INF.createComplex(Double.POSITIVE_INFINITY, 4948.349);
      complex6.ONE.multiply(0.0);
      complex6.ONE.hashCode();
      Complex complex7 = complex1.atan();
      Complex complex8 = complex5.I.exp();
      Complex complex9 = complex8.I.sqrt1z();
      complex7.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.sinh();
      Complex complex11 = Complex.valueOf((-869.435));
      complex11.INF.hashCode();
      complex10.INF.hashCode();
      complex10.ONE.abs();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex12.ZERO.getArgument();
      Complex complex13 = complex5.add(complex7);
      Complex.valueOf(1150.7930960333, 0.0);
      complex9.getReal();
      complex13.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.652295), (-1981.652295));
      complex0.INF.abs();
      Complex complex1 = complex0.createComplex(2.0, (-1981.652295));
      complex1.I.tanh();
      Complex complex2 = complex1.multiply(4557);
      complex0.getField();
      complex1.sin();
      complex2.createComplex((-1981.652295), 2.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(2265.7);
      complex0.NaN.reciprocal();
      Complex complex1 = complex0.ONE.multiply((-2773));
      Complex complex2 = complex1.NaN.tanh();
      complex0.ONE.divide((double) (-2773));
      complex2.NaN.subtract((-2390.31718));
      complex2.I.tan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      complex3.readResolve();
      complex0.equals(complex4);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = new Complex((-783.17462440886));
      Complex complex5 = complex0.subtract(complex4);
      complex4.createComplex((-783.17462440886), 0.0);
      Complex complex6 = complex5.ZERO.pow((-783.17462440886));
      complex6.createComplex(0.0, 0.0);
      complex5.ZERO.getField();
      Complex complex7 = complex3.I.divide((-324.262134097));
      complex7.I.log();
      Complex complex8 = Complex.valueOf((-783.17462440886), (-1.1505428993246996E-8));
      Complex complex9 = Complex.valueOf((-783.17462440886), (-783.17462440886));
      Complex complex10 = complex9.ONE.multiply((-473));
      complex9.ONE.readResolve();
      complex9.ZERO.getArgument();
      Complex complex11 = complex8.sin();
      complex11.hashCode();
      Complex complex12 = complex3.sqrt();
      complex2.hashCode();
      Complex complex13 = complex0.conjugate();
      complex13.ONE.readResolve();
      complex1.getArgument();
      complex12.getField();
      complex4.toString();
      complex8.multiply(complex4);
      complex0.exp();
      complex12.getReal();
      Complex.valueOf(0.0, 0.0);
      complex10.multiply(1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(397.25);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.NaN.negate();
      complex0.INF.multiply((-1));
      Complex complex3 = complex2.INF.multiply((-2661.6));
      Complex complex4 = complex3.NaN.acos();
      complex0.ZERO.hashCode();
      complex0.readResolve();
      complex0.getArgument();
      Complex complex5 = complex1.log();
      complex5.I.conjugate();
      Complex.valueOf(0.0);
      Complex.valueOf((-2751.791));
      complex4.multiply((-3506.8643685));
      complex5.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.ZERO.pow(Double.POSITIVE_INFINITY);
      complex2.I.tan();
      Complex complex3 = complex1.ONE.sin();
      complex3.NaN.createComplex(0.0, 1.0);
      complex1.I.readResolve();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.subtract(1.0);
      complex3.ONE.acos();
      Complex complex6 = complex4.multiply((-1345));
      complex6.ONE.conjugate();
      complex6.ONE.createComplex(Double.POSITIVE_INFINITY, 0.37102460861206055);
      Complex complex7 = complex6.sinh();
      Complex.valueOf(0.0);
      complex7.getArgument();
      Complex complex8 = complex5.add(1.0);
      Complex complex9 = complex8.sqrt();
      complex9.NaN.subtract((-271.8376482970022));
      try { 
        complex9.ONE.nthRoot((-1345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,345
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-565.0);
      Complex complex0 = new Complex((-565.0));
      double double1 = (-2.105749999899302E-7);
      Complex complex1 = complex0.I.createComplex((-2.105749999899302E-7), 2460.556859562083);
      Complex complex2 = complex1.INF.sin();
      complex2.ZERO.sinh();
      try { 
        complex0.nthRoot((-3370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,370
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex1.createComplex(1.2715470790863037, 1.2715470790863037);
      complex3.NaN.nthRoot(1541);
      complex0.NaN.createComplex(0.0, (-654.677309773295));
      complex3.ZERO.abs();
      Complex complex4 = complex0.pow(complex1);
      complex0.NaN.cos();
      Complex complex5 = complex4.sin();
      complex5.NaN.multiply((-468.61213));
      complex0.cos();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.NaN.divide(0.0);
      Complex complex8 = Complex.valueOf(1.2715470790863037);
      complex8.sin();
      Complex complex9 = complex2.add(0.0);
      complex0.cosh();
      complex1.conjugate();
      complex3.getReal();
      complex7.log();
      complex8.add(complex9);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      double double0 = 1176.0;
      Complex complex0 = new Complex(1176.0);
      try { 
        complex0.nthRoot((-925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -925
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.sqrt1z();
      complex0.abs();
      complex2.multiply(complex0);
      complex0.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.NaN.createComplex(2369.24, 2369.24);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow(858.355);
      complex2.conjugate();
      Complex complex3 = complex2.NaN.divide(0.053244516253471375);
      complex3.NaN.sqrt1z();
      Complex complex4 = complex1.sqrt1z();
      complex0.cos();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.add(complex0);
      Complex complex5 = complex4.acos();
      complex5.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.INF.sqrt();
      complex0.I.readResolve();
      Complex complex3 = Complex.valueOf(3.989519470441919E45);
      Complex complex4 = complex3.NaN.sinh();
      complex3.INF.hashCode();
      complex1.ZERO.conjugate();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex0.multiply(1249);
      Complex complex7 = complex6.cos();
      Complex complex8 = complex7.I.add(complex0);
      complex3.divide(3.989519470441919E45);
      Complex complex9 = complex8.NaN.add(complex4);
      complex9.INF.toString();
      complex7.ONE.nthRoot(1249);
      Complex complex10 = complex6.asin();
      complex10.INF.add(0.0);
      complex6.NaN.abs();
      complex5.hashCode();
      complex5.add(complex7);
      complex1.hashCode();
      complex1.sqrt1z();
      Complex complex11 = complex1.subtract(complex2);
      complex11.subtract(complex5);
      complex11.readResolve();
      complex11.divide(3.989519470441919E45);
      complex3.tan();
      complex5.acos();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.divide(1360.4503325);
      Complex complex1 = complex0.createComplex(4404.250836743, 1360.4503325);
      complex1.add(1360.4503325);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex((-2770.485103));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.NaN.tan();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.I.sqrt();
      complex4.NaN.cos();
      complex4.NaN.atan();
      Complex complex5 = complex3.reciprocal();
      complex5.abs();
      Complex.valueOf((-1450.616465384), 20.0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(1642.626);
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ZERO.subtract((-3598.824));
      complex0.ONE.readResolve();
      complex1.ONE.sinh();
      Complex complex2 = complex0.exp();
      complex2.ONE.divide(2086.848141);
      complex1.I.negate();
      complex0.tan();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6568518877029419, 0.6568518877029419);
      Complex complex1 = Complex.valueOf(0.6568518877029419);
      complex0.I.multiply(complex1);
      try { 
        complex0.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex0.ONE.pow(0.0);
      Complex complex4 = complex0.divide(0.0);
      complex4.ZERO.multiply(0.0);
      Complex complex5 = complex1.ZERO.sqrt1z();
      Complex complex6 = complex4.ZERO.createComplex((-235.0306618), 0.0);
      Complex complex7 = complex0.tan();
      complex4.ZERO.exp();
      complex7.INF.conjugate();
      Complex complex8 = complex7.INF.cos();
      complex7.INF.getField();
      Complex complex9 = complex2.subtract(0.0);
      complex9.ZERO.readResolve();
      Complex complex10 = complex0.add((-235.0306618));
      complex10.INF.conjugate();
      Complex complex11 = new Complex(1.0524719896550007E251, 0.0);
      Complex complex12 = complex11.exp();
      complex12.NaN.getField();
      complex12.ONE.conjugate();
      Complex complex13 = complex6.divide(complex11);
      complex13.NaN.hashCode();
      assertEquals((-2.2331298515321325E-249), complex13.getReal(), 0.01);
      
      complex0.hashCode();
      Complex complex14 = complex0.reciprocal();
      Complex complex15 = Complex.valueOf(1.0524719896550007E251);
      complex11.isNaN();
      complex8.getImaginary();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      boolean boolean0 = complex2.equals(complex3);
      assertFalse(complex3.equals((Object)complex15));
      assertSame(complex2, complex14);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex2, complex10);
      assertTrue(complex3.equals((Object)complex5));
      assertSame(complex2, complex4);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-1225.8413578702), (-1225.8413578702));
      Complex.valueOf(1290.65315113);
      Complex complex1 = complex0.createComplex(3073.413271152328, 774.4398047);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex3.ONE.sinh();
      Complex complex5 = complex2.ZERO.pow(774.4398047);
      Complex complex6 = complex3.atan();
      Complex complex7 = complex2.ONE.atan();
      Complex complex8 = complex7.I.subtract(774.4398047);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex7.getReal(), 0.01);
      
      Complex complex9 = complex6.I.add(2466.82434);
      assertEquals(2466.82434, complex9.getReal(), 0.01);
      
      Complex complex10 = complex5.INF.pow((-1225.8413578702));
      Complex complex11 = complex2.NaN.conjugate();
      assertTrue(complex11.equals((Object)complex10));
      
      complex6.readResolve();
      complex2.equals("{z!(Av");
      Complex complex12 = complex0.add(complex5);
      complex12.sin();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isInfinite());
      
      complex4.equals("P*2v");
      assertEquals(1.1752011936438014, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex13 = complex3.cos();
      Complex complex14 = complex13.exp();
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex12);
      assertNotSame(complex3, complex8);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(0.0);
      String string0 = complex1.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex2 = complex1.NaN.atan();
      double double0 = complex1.ZERO.abs();
      assertSame(complex1, complex2);
      assertEquals(0.0, double0, 0.01);
      
      Complex complex3 = Complex.valueOf(0.0);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1082.0, 1082.0);
      Complex complex1 = complex0.ZERO.conjugate();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.valueOf((-2043.24187293), 0.0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-2043.24187293), complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.INF.pow(0.0);
      assertTrue(complex3.isNaN());
      
      double double0 = complex0.abs();
      assertEquals(1530.179074487689, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex1.multiply(0);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex6 = Complex.valueOf((double) 0);
      complex4.equals(complex6);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isInfinite());
      
      complex6.hashCode();
      complex3.getField();
      assertTrue(complex3.equals((Object)complex5));
      
      Complex complex7 = complex6.sin();
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.equals((Object)complex0));
      assertEquals(0.0, complex7.getReal(), 0.01);
  }
}
