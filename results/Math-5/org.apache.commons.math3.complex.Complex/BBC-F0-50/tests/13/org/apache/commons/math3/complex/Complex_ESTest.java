/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:05:12 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3245.467036), Double.POSITIVE_INFINITY);
      complex1.sin();
      Complex complex2 = complex0.sqrt();
      complex1.toString();
      complex2.tanh();
      complex1.asin();
      complex0.acos();
      complex1.multiply(816);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-134.416), (-134.416));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.cos();
      complex1.toString();
      Complex complex4 = complex2.tanh();
      complex2.sin();
      complex4.multiply((-94));
      complex4.subtract(complex0);
      complex2.readResolve();
      complex2.abs();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cos();
      complex1.toString();
      Complex complex3 = complex2.tanh();
      complex2.nthRoot(845);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.subtract(complex4);
      complex0.readResolve();
      complex0.abs();
      complex4.acos();
      Complex complex6 = new Complex((-1637.76413), 845);
      Complex complex7 = complex6.divide(complex2);
      complex0.multiply(1132);
      complex2.asin();
      complex7.log();
      complex4.getArgument();
      complex7.tanh();
      complex5.acos();
      Complex complex8 = new Complex(310.1243916595127, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.INF;
      complex9.NaN.divide((-1621.683511144));
      complex8.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.7615941559557649), 4.0);
      complex0.INF.getField();
      complex0.ONE.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.tanh();
      complex2.ONE.hashCode();
      complex0.hashCode();
      Complex complex3 = complex1.add(4.0);
      Complex complex4 = complex3.sqrt();
      complex4.ONE.sin();
      complex4.cosh();
      complex3.reciprocal();
      complex0.toString();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.tanh();
      Complex complex7 = new Complex((-4.768909872963015E232), 20.0);
      complex7.asin();
      complex7.atan();
      complex6.multiply(395.10867);
      Complex complex8 = Complex.valueOf((-0.7615941559557649), 20.0);
      complex8.sin();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.7615941559557649), 4.0);
      complex0.INF.getField();
      complex0.ONE.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.tanh();
      complex2.ONE.hashCode();
      Complex complex3 = complex0.pow((-1366.77575));
      Complex complex4 = complex0.multiply(complex3);
      complex1.subtract((-0.7615941559557649));
      complex0.getArgument();
      complex3.divide(20.0);
      complex4.multiply((-249.26696892));
      Complex complex5 = new Complex(16.419974341614026, (-20.0));
      Complex complex6 = complex1.exp();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex((-0.7615941559557649), (-1366.77575));
      complex3.tanh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      complex9.divide(complex10);
      Complex complex11 = complex10.divide(complex6);
      complex11.getField();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1518.96793, (-20.0));
      Complex complex2 = complex0.divide(complex1);
      complex0.getField();
      complex0.tan();
      complex1.tan();
      Complex complex3 = new Complex(25.52339765613256, (-40.0));
      complex2.multiply(1164);
      complex0.exp();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(278.6041089, (-1946.863));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.pow((-718.0));
      complex5.multiply(complex0);
      Complex complex6 = complex2.subtract((-718.0));
      complex4.getArgument();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex3.multiply(2.0);
      Complex complex7 = new Complex((-0.7615941559557649), Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.exp();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf((-661.4639223707308));
      complex10.tanh();
      complex1.divide(complex6);
      complex0.divide(complex7);
      complex6.getField();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.7615941559557649), 4.0);
      complex0.INF.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.tanh();
      complex2.ONE.hashCode();
      Complex complex3 = complex2.I.add((-0.7615941559557649));
      complex0.I.sqrt();
      Complex complex4 = complex3.cosh();
      complex4.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex((-0.7615941559557649));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.multiply(Double.POSITIVE_INFINITY);
      complex0.nthRoot(581);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-270.5), (-270.5));
      complex1.INF.divide(complex0);
      complex1.readResolve();
      Complex complex2 = new Complex((-270.5));
      complex2.equals(complex1);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-4.0), (-4.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex0.INF.subtract((-4.0));
      complex5.ONE.getArgument();
      complex5.ONE.divide((-4.0));
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.tanh();
      complex3.NaN.pow(0.0);
      complex5.getField();
      complex6.isNaN();
      try { 
        complex8.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-4.0), (-4.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.ONE.pow((double) 2042);
      complex3.multiply(complex2);
      Complex complex5 = complex0.INF.subtract((-4.0));
      complex3.cosh();
      Complex complex6 = complex1.reciprocal();
      complex1.toString();
      complex6.tanh();
      complex6.atan();
      complex1.multiply((-20.0));
      complex5.sin();
      complex6.createComplex((-4.0), 0.0);
      complex4.divide((-4.0));
      complex6.acos();
      complex5.multiply(2708);
      complex1.sin();
      Complex.valueOf((-1.0000000091299346), (double) 2708);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-4.0), (-4.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex1.ONE.pow((double) 2042);
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex0.INF.subtract((-4.0));
      complex6.ONE.getArgument();
      Complex complex7 = complex3.multiply((-4.0));
      complex4.divide((double) 2042);
      Complex complex8 = new Complex((-4.0), 2042);
      Complex complex9 = complex5.exp();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex9.tanh();
      complex8.divide(complex11);
      complex6.getField();
      complex7.tan();
      complex0.nthRoot(2042);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.subtract(complex0);
      int int0 = 2042;
      Complex complex4 = complex2.pow((-20.0));
      Complex complex5 = complex3.multiply(complex4);
      complex5.subtract((double) 2042);
      Complex complex6 = Complex.ZERO;
      complex6.getArgument();
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex3.multiply(0.0);
      complex8.divide((-20.0));
      Complex complex9 = new Complex(2.0, 9.583994718167641E-8);
      complex7.exp();
      Complex complex10 = Complex.ONE;
      complex3.tanh();
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(36.186961);
      complex0.acos();
      Complex complex1 = new Complex((-698.60934125697), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1314.74372, 1314.74372);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(1314.74372);
      complex3.acos();
      complex2.sqrt();
      complex2.multiply(122);
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-4.0), (-4.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sinh();
      complex0.getArgument();
      complex0.subtract(Double.NaN);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(698.14059, 176.6243388584309);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = complex4.multiply(2042);
      Complex complex6 = complex4.pow(698.14059);
      complex5.multiply(complex6);
      Complex complex7 = complex4.subtract((-218.3788));
      complex4.getArgument();
      Complex complex8 = complex3.multiply(322);
      complex7.divide(1529.95495589);
      Complex complex9 = complex8.multiply((-2337.454));
      complex2.I.hashCode();
      Complex complex10 = Complex.valueOf((-2337.454));
      complex10.pow(complex0);
      Complex complex11 = complex5.divide(2870.0);
      Complex complex12 = new Complex(176.6243388584309, 2042);
      complex11.exp();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex1.tanh();
      complex9.add(176.6243388584309);
      Complex complex15 = complex14.divide(complex0);
      complex7.getField();
      complex1.tan();
      complex13.multiply(322);
      complex15.log();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.valueOf((-1.0), 2.4526190464373087E-231);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(0.0);
      complex0.tanh();
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex2.sinh();
      complex3.getImaginary();
      complex1.isNaN();
      Complex complex4 = Complex.NaN;
      complex3.NaN.negate();
      complex2.equals(complex0);
      complex3.readResolve();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-0.7692307692307692));
      Complex complex2 = complex0.multiply((-420.51021075183));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.divide((-420.51021075183));
      complex4.reciprocal();
      Complex complex5 = complex1.tanh();
      complex3.add(1486.2281473571093);
      Complex complex6 = complex0.divide(complex5);
      complex6.getField();
      complex4.tan();
      complex2.multiply((-1185.38252796));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.divide((-2.268889128622553E-8));
      Complex complex5 = complex0.reciprocal();
      complex4.multiply((-3132));
      complex5.reciprocal();
      Complex complex6 = complex3.add((-2.268889128622553E-8));
      Complex complex7 = new Complex(3423.6);
      complex4.divide(complex7);
      complex6.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-4.0), (-4.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.multiply(2042);
      complex4.ONE.pow((double) 2042);
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex0.INF.subtract((-4.0));
      complex6.ONE.getArgument();
      complex6.NaN.getField();
      complex6.ONE.divide(2.0);
      complex1.NaN.multiply((-4.0));
      Complex complex7 = complex4.pow(complex2);
      Complex complex8 = complex7.ZERO.divide(0.0);
      complex8.reciprocal();
      Complex complex9 = complex7.I.exp();
      complex9.NaN.add(complex5);
      Complex complex10 = complex1.tanh();
      complex10.add((-637.0809229507508));
      complex5.divide(complex3);
      complex2.getField();
      Complex complex11 = complex9.tan();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-4.0), (-4.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.NaN.multiply(2042);
      Complex complex5 = complex4.ONE.pow((double) 2042);
      Complex complex6 = complex3.multiply(complex2);
      Complex complex7 = complex0.INF.subtract((-4.0));
      complex7.ONE.getArgument();
      complex7.NaN.getField();
      Complex complex8 = complex0.multiply(153);
      Complex complex9 = complex7.ONE.divide(2.0);
      complex3.multiply(2.0);
      complex5.pow(complex8);
      Complex complex10 = complex9.divide((double) 153);
      Complex complex11 = complex3.reciprocal();
      Complex complex12 = complex6.exp();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex12.tanh();
      complex12.add(1.1518771984292262E146);
      complex11.divide(complex14);
      complex0.getField();
      complex12.tan();
      complex10.multiply((-2456));
      complex9.pow((-0.7624834588972353));
      complex14.isInfinite();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(179);
      Complex complex3 = complex2.pow(1197.6468);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex1.subtract(578.04182333);
      complex2.getArgument();
      complex3.getField();
      complex5.multiply(179);
      complex4.divide(3.426327822115399E-9);
      Complex complex6 = new Complex(1197.6468);
      Complex complex7 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex7.multiply(1197.6468);
      complex4.pow(complex2);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.divide(594.5073938020718);
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex6.exp();
      Complex complex12 = complex1.add(complex11);
      complex12.tanh();
      complex2.add((-1.0));
      complex9.divide(complex10);
      complex4.getField();
      Complex complex13 = complex2.tan();
      complex5.multiply(475);
      complex8.tanh();
      complex7.pow(2.0);
      complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0010156460830330616, 0.0010156460830330616);
      Complex complex1 = Complex.ZERO;
      complex1.ONE.asin();
      Complex complex2 = complex1.divide(0.0010156460830330616);
      Complex complex3 = complex1.NaN.asin();
      Complex complex4 = complex3.pow(6.283185307179586);
      complex1.ZERO.exp();
      complex0.INF.divide(complex1);
      complex0.NaN.pow(complex4);
      complex0.INF.abs();
      Complex complex5 = complex0.add(0.0010156460830330616);
      Complex complex6 = complex1.sqrt1z();
      Complex complex7 = complex6.createComplex(0.0010156460830330616, (-859.052));
      complex7.ZERO.getField();
      Complex complex8 = complex7.log();
      complex8.ONE.multiply((-372));
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.subtract(complex5);
      complex5.pow(Double.POSITIVE_INFINITY);
      complex0.conjugate();
      complex10.divide(6.283185307179586);
      complex2.createComplex((-859.052), Double.POSITIVE_INFINITY);
      Complex complex11 = complex8.divide(complex6);
      try { 
        complex11.nthRoot((-372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -372
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(179);
      Complex complex3 = complex1.pow(1197.6468);
      Complex complex4 = complex0.multiply(complex2);
      complex2.subtract(578.04182333);
      complex3.getArgument();
      complex3.getField();
      Complex complex5 = complex0.multiply(179);
      Complex complex6 = complex3.divide(3.426327822115399E-9);
      Complex complex7 = new Complex(3.426327822115399E-9);
      complex7.multiply((-1488399.0));
      complex2.pow(complex3);
      Complex complex8 = complex4.divide(2.0);
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex5.exp();
      Complex complex11 = complex0.add(complex3);
      Complex complex12 = complex2.tanh();
      complex10.add(1197.6468);
      complex1.divide(complex8);
      complex10.getField();
      complex9.tan();
      complex12.multiply(281);
      complex3.tanh();
      complex6.pow((double) 179);
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.INF;
      complex2.nthRoot(4994);
      Complex complex3 = complex0.subtract(20.0);
      Complex complex4 = complex1.tan();
      complex3.tanh();
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract((-1229.6204551143815));
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.INF;
      complex3.tanh();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.divide(complex1);
      complex2.getField();
      complex5.multiply(670);
      complex2.tanh();
      complex2.pow((-79.32));
      complex3.isInfinite();
      complex3.sinh();
      complex5.multiply((-7.709990443086711E-10));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(0.0);
      Complex.valueOf(0.0);
      Complex complex3 = Complex.ZERO;
      complex3.toString();
      Complex complex4 = complex3.divide(0.0);
      complex2.tanh();
      complex4.sinh();
      Complex complex5 = Complex.INF;
      complex5.getImaginary();
      complex4.isNaN();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.equals(complex7);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.log();
      Complex complex1 = complex0.atan();
      complex1.ONE.createComplex(289.2080927178712, (-1353.17950364));
      Complex complex2 = complex0.exp();
      complex1.sqrt();
      complex2.pow(694.04656078);
      complex2.cos();
      complex1.getReal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.cosh();
      complex4.createComplex((-9.276238757878814E-8), 289.2080927178712);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.ZERO;
      complex2.NaN.toString();
      Complex complex5 = complex0.divide((-492.2979807));
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.sinh();
      complex2.getImaginary();
      complex7.isNaN();
      Complex complex8 = Complex.INF;
      complex4.equals(complex3);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.createComplex(0.0, 0.2607102394104004);
      Complex complex3 = complex1.exp();
      complex2.sqrt();
      Complex complex4 = complex3.pow((-858.0));
      Complex complex5 = Complex.valueOf(2.0, 0.0);
      Complex complex6 = complex5.cos();
      complex4.getReal();
      Complex complex7 = complex6.sin();
      complex5.hashCode();
      complex7.acos();
      complex5.getField();
      complex6.NaN.acos();
      complex7.nthRoot(4994);
      Complex complex8 = Complex.INF;
      complex8.subtract(Double.POSITIVE_INFINITY);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-116.0679059));
      complex1.toString();
      Complex complex3 = Complex.ZERO;
      complex3.reciprocal();
      Complex complex4 = complex1.divide(0.7530770716827642);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.NaN;
      complex8.divide(0.7530770716827642);
      complex1.tanh();
      complex5.multiply((-4674));
      Complex.valueOf(0.7530770716827642, (-403.3218134001));
      Complex complex9 = complex4.asin();
      complex1.subtract(610.304738);
      complex9.divide(complex6);
      Complex complex10 = Complex.I;
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.valueOf(3591.790272847057, (-116.0679059));
      complex12.sinh();
      complex7.getImaginary();
      Complex complex13 = Complex.ONE;
      complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract((-1229.6204551143815));
      Complex complex2 = complex1.NaN.add(0.0);
      complex1.pow(complex0);
      Complex complex3 = complex0.sinh();
      complex2.getImaginary();
      complex2.isNaN();
      complex3.add(Double.NaN);
      Complex.valueOf(548.5067383);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.pow((-1.0));
      complex2.nthRoot(1155);
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.INF.sqrt();
      complex0.acos();
      complex0.isInfinite();
      complex4.cos();
      complex0.ZERO.multiply((-1.0));
      complex1.atan();
      Complex complex5 = complex4.atan();
      complex5.NaN.subtract(4096.94);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3332.2765), 1.666527509689331);
      Complex complex2 = complex0.add(20.0);
      Complex complex3 = complex2.I.pow(complex1);
      complex3.ONE.asin();
      complex2.getField();
      Complex complex4 = complex0.add(complex1);
      complex2.NaN.add(complex1);
      complex4.reciprocal();
      Complex complex5 = complex4.ONE.add(6370289.96156847);
      complex4.asin();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.I.asin();
      Complex complex8 = complex7.INF.multiply(2145404767);
      complex2.sqrt1z();
      Complex complex9 = complex2.multiply(1260056756);
      complex9.NaN.subtract(complex8);
      Complex complex10 = complex9.cos();
      complex10.ONE.tanh();
      complex10.multiply((-492.2979807));
      complex2.pow(complex9);
      Complex complex11 = complex1.sqrt();
      complex1.getReal();
      complex11.readResolve();
      complex7.sqrt();
      complex1.multiply(complex8);
      complex6.subtract(6370289.96156847);
      complex7.getField();
      complex5.getField();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.divide((-1634.187));
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ONE;
      complex4.sinh();
      complex0.getImaginary();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1102.08579967));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.multiply(1032);
      complex1.getArgument();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex4.divide((double) 1032);
      Complex complex7 = Complex.ZERO;
      complex7.log();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex6.divide(3.141592653589793);
      complex9.tanh();
      complex7.multiply(955);
      Complex complex10 = complex6.asin();
      Complex complex11 = complex5.subtract((-20.0));
      complex10.divide(complex1);
      Complex complex12 = Complex.I;
      Complex complex13 = Complex.ONE;
      complex11.sinh();
      Complex complex14 = Complex.valueOf(1684.924672185);
      complex14.getImaginary();
      Complex complex15 = Complex.I;
      complex15.isNaN();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-2002.62844579474));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex1.subtract(0.0);
      complex3.toString();
      complex5.cos();
      complex4.tanh();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex6.acos();
      complex7.readResolve();
      complex0.sinh();
      Complex complex8 = complex1.log();
      complex7.equals(complex5);
      complex6.pow(complex8);
      complex6.getField();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-691.51793));
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.INF.subtract((-3523.822302));
      Complex complex4 = complex2.ONE.subtract(0.0);
      Complex complex5 = complex0.sqrt();
      complex0.hashCode();
      complex4.toString();
      Complex complex6 = complex2.divide(1913.97728252);
      Complex complex7 = complex6.tanh();
      complex7.multiply(Integer.MAX_VALUE);
      Complex.valueOf(0.5162794589996338, 2671.33209);
      complex3.asin();
      Complex complex8 = complex1.subtract((-3523.822302));
      Complex.valueOf((-691.51793));
      Complex complex9 = complex5.divide(complex3);
      Complex complex10 = Complex.INF;
      complex10.sin();
      Complex complex11 = Complex.valueOf(2.201412886580694E275);
      complex11.acos();
      complex7.sinh();
      complex9.getImaginary();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.exp();
      Complex complex1 = complex0.multiply(4991);
      complex0.getArgument();
      Complex complex2 = Complex.valueOf((double) 4991, (double) 4991);
      Complex complex3 = complex1.reciprocal();
      complex1.divide(2.536961912893389E-9);
      Complex complex4 = Complex.ZERO;
      complex0.log();
      Complex complex5 = Complex.NaN;
      complex4.divide(0.0);
      complex2.tanh();
      complex3.multiply(0);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.subtract((double) 0);
      complex5.divide(complex0);
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.ONE;
      complex1.sinh();
      complex7.getImaginary();
      Complex complex10 = Complex.INF;
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.toString();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.log();
      Complex complex6 = Complex.ZERO;
      complex6.toString();
      complex3.divide((-2076.7343554));
      complex2.tanh();
      complex3.multiply(0);
      Complex complex7 = Complex.valueOf((double) 0, (-492.2979807));
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.asin();
      complex7.subtract(6.283185307179586);
      Complex.valueOf(0.696366253940823);
      complex1.divide(complex5);
      complex1.sin();
      complex8.acos();
      complex9.sinh();
      Complex complex10 = Complex.I;
      complex10.getImaginary();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.ONE.hashCode();
      complex0.NaN.divide(complex1);
      double double0 = (-2.268889128622553E-8);
      Complex complex2 = complex1.NaN.divide((-2.268889128622553E-8));
      Complex.valueOf((-4234.9205));
      complex0.add(complex2);
      // Undeclared exception!
      complex0.nthRoot(2146885927);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1914.0002478747917);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = Complex.ZERO;
      complex1.ONE.getArgument();
      Complex complex3 = complex0.sin();
      complex3.log();
      complex1.toString();
      complex0.divide(1914.0002478747917);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.multiply(1032);
      Complex complex6 = Complex.valueOf((-1.0), Double.NaN);
      complex6.asin();
      complex3.subtract((-3543.0));
      Complex complex7 = Complex.valueOf((double) 0);
      Complex complex8 = Complex.valueOf(1.6487212181091309);
      complex5.divide(complex8);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex3.acos();
      complex9.sinh();
      complex7.getImaginary();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.I.add(complex1);
      complex1.NaN.readResolve();
      Complex complex3 = complex0.divide(0.0);
      complex1.add(0.0);
      complex3.negate();
      complex1.subtract(complex2);
      complex1.divide(0.9999993115937755);
      Complex complex4 = new Complex(0.5762182474136353, 0.9999993115937755);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(763.1363434716);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.pow(complex0);
      complex2.NaN.divide(0.0);
      complex0.toString();
      Complex complex3 = complex1.log();
      complex1.readResolve();
      complex2.readResolve();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.multiply(complex2);
      complex1.subtract(1888.54);
      Complex complex6 = complex0.reciprocal();
      complex2.createComplex(0.0, (-1467.353229174));
      complex1.pow(complex6);
      complex2.tanh();
      Complex complex7 = Complex.valueOf(0.0, (-2261.9));
      Complex complex8 = complex3.cos();
      complex8.cos();
      complex7.hashCode();
      complex5.tanh();
      Complex complex9 = new Complex((-1083.05878), (-1083.05878));
      complex3.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.INF.tan();
      complex4.ZERO.abs();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.reciprocal();
      complex7.readResolve();
      Complex complex8 = complex2.sin();
      complex8.ZERO.reciprocal();
      complex8.I.toString();
      complex6.log();
      complex1.toString();
      Complex complex9 = complex2.multiply(complex4);
      complex5.sqrt1z();
      complex8.equals(complex9);
      complex3.cosh();
      complex0.exp();
      complex8.conjugate();
      complex1.sin();
      complex4.sqrt1z();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(763.1363434716);
      Complex complex1 = complex0.cos();
      complex1.I.pow(complex0);
      complex0.hashCode();
      Complex complex2 = complex0.divide(complex1);
      complex0.divide(20.0);
      complex0.reciprocal();
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      Complex complex4 = complex3.multiply((-711));
      complex4.sin();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-280.95996893), 1704.48243);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(3.832548112042945E-4);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex1.cos();
      complex5.toString();
      complex5.multiply(complex3);
      complex4.sqrt1z();
      complex2.equals("(-Infinity, -Infinity)");
      complex2.cosh();
      Complex complex6 = complex4.exp();
      complex6.conjugate();
      Complex complex7 = complex0.sin();
      complex7.sqrt1z();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-691.51793));
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex1.INF.subtract((-3523.822302));
      Complex complex3 = complex2.ONE.subtract(0.0);
      Complex complex4 = complex0.sqrt();
      complex0.hashCode();
      Object object0 = complex0.readResolve();
      ((Complex) object0).INF.add(0.0);
      complex1.atan();
      complex2.ZERO.hashCode();
      complex2.nthRoot(17);
      complex3.isInfinite();
      complex3.getField();
      complex3.getImaginary();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.add(complex3);
      complex6.ZERO.nthRoot(17);
      complex1.exp();
      complex0.sqrt();
      Complex complex7 = complex4.pow(8.408597060399334E-50);
      complex3.conjugate();
      Complex complex8 = complex5.acos();
      Complex complex9 = complex8.pow(complex4);
      Complex complex10 = complex4.add(complex7);
      Complex complex11 = complex4.cos();
      complex11.add(complex0);
      complex10.getArgument();
      Complex complex12 = complex9.cosh();
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(763.1363434716);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.NaN.divide(0.0);
      complex1.hashCode();
      complex0.readResolve();
      complex0.hashCode();
      complex2.nthRoot(17);
      complex2.isInfinite();
      complex0.getField();
      complex0.getImaginary();
      Complex complex4 = Complex.valueOf((double) 17);
      complex4.add(complex3);
      complex3.nthRoot(17);
      Complex complex5 = complex3.exp();
      complex5.sqrt();
      Complex complex6 = complex3.pow(763.1363434716);
      Complex complex7 = complex6.cos();
      complex4.getReal();
      complex3.sin();
      complex2.hashCode();
      complex7.acos();
      complex0.getField();
      complex0.nthRoot(14);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.exp();
      complex2.getReal();
      Complex complex4 = Complex.valueOf(1682.8, 1925.73086349);
      complex4.getArgument();
      Complex complex5 = complex1.conjugate();
      complex2.acos();
      complex3.pow(complex5);
      Complex complex6 = Complex.ONE;
      complex6.add(complex4);
      Complex complex7 = Complex.NaN;
      complex4.add(complex3);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2609.23);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.valueOf(1866.677174708);
      complex4.abs();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex0.reciprocal();
      complex5.readResolve();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex0.reciprocal();
      complex3.toString();
      Complex complex10 = complex6.log();
      complex10.negate();
      complex1.atan();
      Complex.valueOf(1866.677174708, Double.POSITIVE_INFINITY);
      complex10.reciprocal();
      complex1.abs();
      Complex complex11 = complex7.subtract(complex6);
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex9.tanh();
      complex8.atan();
      complex11.cosh();
      Complex complex14 = complex10.multiply(complex0);
      Complex.valueOf(0.0);
      complex12.multiply(complex14);
      complex13.abs();
      complex14.getArgument();
      Complex complex15 = Complex.I;
      complex15.cos();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.INF.subtract((-2114.87092818));
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = Complex.valueOf(0.0);
      complex3.reciprocal();
      complex4.abs();
      Complex complex6 = complex2.subtract(complex0);
      Complex complex7 = Complex.valueOf((-20.0));
      complex7.reciprocal();
      complex0.tanh();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex6.cosh();
      complex1.multiply(complex7);
      Complex complex10 = Complex.valueOf(1892.4716596477458);
      complex10.multiply(complex8);
      complex5.abs();
      Complex complex11 = Complex.I;
      complex11.getArgument();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1888.54);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.NaN.multiply(1032);
      complex1.ONE.getArgument();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.divide(1888.54);
      complex0.log();
      complex1.NaN.readResolve();
      complex4.readResolve();
      Complex.valueOf(1.0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.multiply(complex5);
      complex1.ONE.subtract((-637.3));
      complex5.ZERO.reciprocal();
      Complex complex7 = complex5.I.createComplex(0.0, 1888.54);
      complex1.NaN.pow(complex1);
      complex6.INF.tanh();
      Complex.valueOf((-1083.05878), 0.0);
      complex3.cos();
      Complex complex8 = Complex.I;
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.INF.subtract((-2114.87092818));
      complex0.divide(complex1);
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.valueOf(20.0, (-2114.87092818));
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = Complex.I;
      complex7.abs();
      Complex complex8 = complex7.subtract(complex1);
      complex6.reciprocal();
      complex5.tanh();
      complex4.atan();
      complex8.cosh();
      complex6.multiply(complex7);
      Complex complex9 = Complex.valueOf(978.72655);
      Complex complex10 = complex9.multiply(complex3);
      complex10.abs();
      complex5.getArgument();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      complex1.abs();
      complex0.getReal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.I.divide(complex0);
      Complex complex5 = complex4.NaN.divide(1.0);
      complex5.NaN.multiply(1.0);
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex6.log();
      complex7.ONE.log();
      Complex complex8 = complex3.NaN.subtract(1.0);
      Complex complex9 = complex6.ONE.tanh();
      Complex complex10 = complex6.ONE.multiply(1.0);
      Complex complex11 = complex6.ONE.reciprocal();
      complex9.ZERO.tanh();
      Complex complex12 = complex0.divide(1.0);
      complex4.hashCode();
      complex8.ZERO.subtract(complex10);
      complex3.isNaN();
      Complex complex13 = complex9.divide(complex8);
      Complex complex14 = complex12.add(complex3);
      Complex complex15 = complex13.exp();
      complex14.getReal();
      Complex.valueOf(Double.NaN, 0.0);
      complex14.getArgument();
      complex15.conjugate();
      Complex complex16 = complex1.acos();
      complex6.pow(complex11);
      complex15.add(complex0);
      complex13.cos();
      complex8.add(complex16);
      complex4.getArgument();
      Complex complex17 = new Complex(20.0, 1.0);
      try { 
        complex17.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.cosh();
      complex0.toString();
      complex1.toString();
      Complex complex2 = Complex.valueOf(3197.26, 0.0);
      Complex complex3 = complex2.ONE.negate();
      complex2.ZERO.abs();
      complex0.multiply(complex2);
      complex0.equals("(Infinity, Infinity)");
      complex3.multiply(1825.082054);
      complex1.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.exp();
      complex1.ONE.getArgument();
      complex2.ZERO.divide((-1175.0));
      complex2.conjugate();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex1.ZERO.multiply(Double.NaN);
      Complex complex5 = complex3.NaN.asin();
      complex0.getImaginary();
      complex1.ONE.divide(365.698985);
      complex0.equals("{Px2CK");
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.subtract(773.0397918998304);
      complex4.ONE.abs();
      complex3.exp();
      complex1.atan();
      Complex complex8 = complex3.multiply(complex2);
      complex1.getArgument();
      complex8.I.exp();
      Complex complex9 = complex2.cos();
      complex9.ONE.pow(complex7);
      complex8.hashCode();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex10.multiply(complex5);
      complex6.conjugate();
      complex6.add(Double.NaN);
      complex2.tan();
      complex7.getImaginary();
      Complex complex12 = complex4.asin();
      complex12.NaN.sqrt();
      complex11.multiply((-2043.80054));
      complex6.atan();
      complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3223776943337897E-245, 1.3223776943337897E-245);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.NaN.sqrt();
      complex1.ZERO.getArgument();
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.createComplex(1.3223776943337897E-245, 1.3223776943337897E-245);
      complex1.I.toString();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      complex0.ZERO.cosh();
      Complex complex3 = complex2.sqrt();
      Complex.valueOf(0.0);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.INF.acos();
      complex3.ZERO.cosh();
      Complex complex6 = complex4.INF.subtract(0.0);
      Complex complex7 = complex3.reciprocal();
      complex7.INF.atan();
      complex3.getImaginary();
      complex6.I.readResolve();
      Complex complex8 = complex3.sqrt();
      complex4.I.pow(2796.1817369);
      complex1.hashCode();
      complex6.getImaginary();
      complex8.ZERO.multiply(complex7);
      complex8.cosh();
      complex0.sqrt();
      complex7.divide(complex8);
      complex3.pow((-2018.82975));
      complex5.sinh();
      complex4.conjugate();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(763.1363434716);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.pow(complex0);
      complex2.NaN.divide(0.0);
      complex0.toString();
      complex1.I.log();
      Complex complex3 = complex0.ZERO.divide((-492.2979807));
      Complex complex4 = complex1.tanh();
      complex4.multiply(0);
      complex4.I.asin();
      Complex complex5 = complex4.I.subtract(763.1363434716);
      complex5.ONE.divide(complex0);
      Complex complex6 = complex5.INF.sin();
      complex6.ONE.acos();
      complex1.sinh();
      complex3.getImaginary();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.488041639328003, 2290.7910052123616);
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex0.asin();
      complex2.ZERO.getField();
      Complex complex3 = complex2.INF.log();
      Complex.valueOf(5.4445606140746644E-8, 2290.7910052123616);
      Complex complex4 = complex3.divide(5.4445606140746644E-8);
      complex4.I.multiply(8.696863522320578E-8);
      Complex complex5 = complex4.multiply(5.4445606140746644E-8);
      complex5.NaN.toString();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.I.acos();
      complex2.INF.reciprocal();
      Complex.valueOf((-850.84885983));
      complex2.pow(5.4445606140746644E-8);
      complex7.isNaN();
      complex3.asin();
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.multiply(4265);
      Complex complex3 = complex2.INF.acos();
      complex3.I.exp();
      Complex complex4 = complex0.ONE.multiply(complex1);
      complex4.I.negate();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.NaN.cosh();
      Complex complex7 = complex0.add(2.0);
      complex7.NaN.abs();
      complex7.I.abs();
      complex7.abs();
      complex7.sin();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.tanh();
      complex0.hashCode();
      complex7.pow(0.0);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2504.501982543));
      Complex complex1 = new Complex((-2504.501982543));
      complex1.INF.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = Complex.ZERO;
      complex0.ONE.multiply(0);
      complex1.equals(complex4);
      Complex complex5 = complex2.reciprocal();
      complex5.ONE.toString();
      Complex complex6 = complex5.I.multiply(20.0);
      complex6.ZERO.sin();
      complex2.ZERO.getField();
      complex6.INF.cosh();
      complex3.getArgument();
      Complex complex7 = complex5.negate();
      complex0.divide(complex5);
      complex0.abs();
      Complex complex8 = complex7.divide(complex4);
      complex8.INF.cosh();
      Complex complex9 = complex1.sinh();
      complex9.sinh();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1894.0424559745406);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.asin();
      complex2.INF.tan();
      Complex complex3 = complex1.INF.pow((-4101.0));
      complex0.NaN.getArgument();
      complex3.ZERO.hashCode();
      Complex complex4 = complex0.INF.add((-1958.9732754655));
      complex4.NaN.toString();
      Complex complex5 = complex3.I.acos();
      Complex.valueOf(1894.0424559745406, (-4101.0));
      Complex complex6 = complex1.tan();
      Complex complex7 = complex1.pow(complex0);
      complex0.abs();
      Complex complex8 = complex2.subtract(1894.0424559745406);
      Complex complex9 = complex3.multiply(complex6);
      Complex complex10 = complex8.pow(complex1);
      complex10.INF.conjugate();
      complex9.subtract(complex5);
      complex7.hashCode();
      Complex complex11 = complex4.subtract((-1958.9732754655));
      complex11.ZERO.subtract(complex1);
      complex7.sin();
      Complex complex12 = complex10.subtract((-1958.9732754655));
      complex11.subtract((-4101.0));
      complex12.asin();
      Complex complex13 = Complex.valueOf((-708.4574615));
      complex11.atan();
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-691.51793));
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex1.INF.subtract((-3523.822302));
      Complex complex3 = complex2.ONE.subtract(0.0);
      Complex complex4 = complex0.sqrt();
      complex0.hashCode();
      complex0.readResolve();
      complex2.ZERO.hashCode();
      complex2.nthRoot(17);
      complex3.isInfinite();
      complex3.getField();
      complex3.getImaginary();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.add(complex3);
      complex6.ZERO.nthRoot(17);
      complex1.exp();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex4.pow(8.408597060399334E-50);
      complex8.INF.cos();
      complex4.getReal();
      Complex complex9 = complex4.sin();
      complex9.ZERO.hashCode();
      complex0.acos();
      complex7.getField();
      complex1.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.INF.add(complex1);
      Complex complex2 = complex0.ONE.divide(0.44566190242767334);
      complex0.ONE.add(complex2);
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex3.ZERO.atan();
      complex4.ONE.multiply(421);
      Complex complex5 = complex0.atan();
      complex0.I.multiply(complex2);
      complex2.NaN.reciprocal();
      complex5.NaN.subtract(0.44566190242767334);
      Complex complex6 = complex2.sinh();
      complex6.INF.readResolve();
      complex3.cosh();
      complex5.getArgument();
      complex2.I.sqrt();
      Complex complex7 = complex5.divide(0.0);
      Complex complex8 = complex7.I.multiply((double) 421);
      Complex complex9 = complex6.log();
      complex2.NaN.multiply((-1808));
      Complex complex10 = complex2.subtract(complex9);
      Complex complex11 = complex5.sin();
      complex7.NaN.nthRoot(421);
      complex10.readResolve();
      complex11.multiply((-2494));
      complex0.acos();
      complex9.NaN.sqrt1z();
      Complex complex12 = complex3.divide(complex9);
      complex12.cos();
      Complex complex13 = complex8.cosh();
      complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(0);
      Complex complex2 = complex1.divide((double) 0);
      Complex complex3 = complex1.ONE.multiply(0);
      complex1.NaN.getField();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex4.subtract(complex0);
      Complex complex7 = complex6.multiply((-1713));
      Complex complex8 = complex4.INF.cosh();
      Complex complex9 = complex8.INF.sinh();
      complex1.NaN.getArgument();
      Complex complex10 = complex2.NaN.multiply(527.2);
      Complex complex11 = complex0.sinh();
      complex11.isNaN();
      Complex complex12 = complex3.NaN.divide(complex5);
      complex12.I.sqrt();
      Complex complex13 = complex9.NaN.multiply(1548.442710619);
      Complex complex14 = complex2.sinh();
      Complex complex15 = complex14.ZERO.log();
      complex4.multiply(complex11);
      Complex complex16 = complex9.sqrt();
      Object object0 = complex2.readResolve();
      complex11.equals(object0);
      Complex complex17 = complex10.tanh();
      complex7.acos();
      complex13.cos();
      complex10.getReal();
      complex15.toString();
      complex2.createComplex(0.0, 0.0);
      complex16.createComplex(Double.NaN, (-1713));
      complex17.isNaN();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.multiply((-1078));
      complex1.equals((Object) null);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.conjugate();
      complex0.ZERO.cosh();
      complex0.subtract(complex2);
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-789.88), (-789.88));
      complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf(20.0, 1665.781);
      Complex complex2 = complex1.acos();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.add(0.0);
      complex3.ONE.createComplex((-95.49), 0.0);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.I.log();
      complex5.NaN.abs();
      Complex complex6 = complex1.subtract(1441.12864884);
      complex6.I.pow(complex5);
      complex3.ONE.getArgument();
      Complex complex7 = complex0.createComplex(1252.53749679861, 0.0);
      complex7.pow(2155.71126);
      complex7.ONE.toString();
      complex3.equals(complex2);
      Complex complex8 = complex0.conjugate();
      Complex.valueOf((-20.0));
      complex8.subtract(1.2639113706171572E250);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.nthRoot(19);
      Complex complex1 = complex0.ONE.cos();
      complex0.getField();
      complex0.I.readResolve();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex1.NaN.negate();
      Complex complex4 = complex2.divide((double) 19);
      complex3.I.cosh();
      Complex complex5 = complex2.exp();
      complex5.ONE.abs();
      Complex complex6 = complex0.conjugate();
      complex1.getArgument();
      Complex complex7 = complex3.conjugate();
      complex4.INF.toString();
      Complex complex8 = complex7.I.acos();
      complex2.hashCode();
      complex8.INF.multiply((-689.4124261061578));
      complex6.ONE.subtract(1.0);
      complex4.reciprocal();
      Complex complex9 = complex2.add(complex6);
      Complex complex10 = Complex.ONE;
      complex9.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3587.5232871, (-365.07784155981));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex3.cos();
      complex3.ZERO.toString();
      complex0.ZERO.multiply(complex1);
      complex1.ZERO.sqrt1z();
      complex0.equals(complex1);
      complex3.ONE.cosh();
      Complex complex5 = complex4.exp();
      complex5.conjugate();
      Complex complex6 = complex3.sin();
      complex6.sqrt1z();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.ONE.hashCode();
      Complex complex2 = complex0.NaN.divide(complex1);
      complex1.NaN.divide((-2.268889128622553E-8));
      Complex complex3 = complex2.ZERO.reciprocal();
      complex0.multiply(992);
      complex2.sin();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.sinh();
      complex2.getArgument();
      Complex complex3 = complex0.subtract(complex1);
      complex3.ONE.sqrt1z();
      double double0 = (-1.5723449006087263E-7);
      complex3.ZERO.subtract((-1.5723449006087263E-7));
      complex1.ONE.getField();
      Complex complex4 = complex0.sqrt();
      complex4.I.pow(80.0);
      int int0 = (-3274);
      try { 
        complex4.I.nthRoot((-3274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,274
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex1.I.getArgument();
      complex1.INF.abs();
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.INF.negate();
      complex0.INF.add(complex2);
      complex0.ZERO.getField();
      complex1.toString();
      Complex complex4 = complex0.exp();
      complex4.I.divide(complex0);
      Complex complex5 = complex2.add(complex3);
      complex2.NaN.sin();
      Complex complex6 = complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      complex1.toString();
      Complex complex7 = complex5.ZERO.divide(1.5707963267948966);
      complex2.pow(1.5707963267948966);
      Complex complex8 = complex5.sinh();
      complex2.tanh();
      complex3.divide(4033.58895521476);
      complex2.multiply(1.5707963267948966);
      Complex complex9 = complex4.pow(1229.27083);
      complex9.abs();
      complex8.log();
      complex6.subtract((-3486.93912));
      complex7.pow(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.negate();
      complex4.INF.getField();
      Complex complex5 = complex4.I.pow(complex1);
      Complex complex6 = complex1.I.sin();
      complex6.NaN.cos();
      Complex complex7 = complex2.NaN.divide(4.878798101459259E-8);
      Complex.valueOf(4.878798101459259E-8);
      complex1.ZERO.add(0.0);
      Complex complex8 = complex0.add(complex2);
      Complex complex9 = complex8.ONE.cosh();
      complex2.ONE.exp();
      Complex complex10 = complex9.ONE.divide(0.0);
      Complex complex11 = complex10.NaN.subtract(complex0);
      complex1.getReal();
      Complex complex12 = complex9.NaN.cosh();
      Complex complex13 = complex11.INF.multiply((-93.9932091));
      complex7.isInfinite();
      complex11.conjugate();
      Complex complex14 = complex11.cosh();
      complex3.NaN.conjugate();
      complex12.isInfinite();
      Complex complex15 = complex2.atan();
      complex15.INF.pow(complex7);
      Complex complex16 = complex3.sinh();
      complex16.INF.acos();
      complex5.cos();
      complex0.conjugate();
      complex13.multiply((-2747));
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.toString();
      complex1.toString();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.conjugate();
      complex2.NaN.log();
      complex3.getField();
      complex3.add(complex1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.exp();
      complex1.abs();
      complex0.getReal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex2.I.divide(complex0);
      Complex complex5 = complex4.NaN.divide(1.0);
      complex5.NaN.multiply(1.0);
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex6.log();
      complex7.ONE.log();
      Complex complex8 = complex3.NaN.subtract(1.0);
      Complex complex9 = complex6.ONE.tanh();
      Complex complex10 = complex6.ONE.multiply(1.0);
      Complex complex11 = complex6.ONE.reciprocal();
      complex9.ZERO.tanh();
      Complex complex12 = complex0.divide(1.0);
      complex4.hashCode();
      complex8.ZERO.subtract(complex10);
      complex3.isNaN();
      Complex complex13 = complex9.divide(complex8);
      Complex complex14 = complex12.add(complex3);
      Complex complex15 = complex13.exp();
      complex14.getReal();
      Complex.valueOf(Double.NaN, 0.0);
      complex14.getArgument();
      complex15.conjugate();
      Complex complex16 = complex1.acos();
      complex6.pow(complex11);
      complex15.add(complex0);
      complex13.cos();
      complex8.add(complex16);
      complex4.getArgument();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.conjugate();
      complex2.INF.subtract(270.27);
      Complex complex3 = Complex.ZERO;
      complex3.INF.sqrt();
      complex0.multiply(complex3);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(207.6422, 207.6422);
      Complex complex1 = Complex.NaN;
      complex1.divide((-454.99658));
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.ZERO.divide(1.6218081151910012E-71);
      Complex complex4 = complex3.NaN.divide(complex0);
      complex4.ZERO.negate();
      complex4.I.divide(0.0);
      Complex complex5 = complex4.I.asin();
      complex5.NaN.conjugate();
      Complex complex6 = complex0.add(0.0);
      Complex complex7 = complex6.I.add((-454.99658));
      Complex complex8 = complex1.multiply(complex3);
      Complex complex9 = complex8.NaN.pow(complex7);
      complex0.ONE.createComplex(1.0, 1.0);
      complex9.NaN.abs();
      complex2.isInfinite();
      complex7.createComplex((-1854.0), (-1854.0));
      complex3.hashCode();
      Complex complex10 = complex6.cos();
      Complex complex11 = new Complex(0.0);
      complex10.ONE.pow(complex11);
      Complex.valueOf(0.0, 1.6218081151910012E-71);
      complex2.sinh();
      complex10.sinh();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.NaN.divide((double) 1);
      Complex complex4 = complex1.I.multiply((double) 1);
      Complex complex5 = complex4.INF.multiply(1);
      complex4.ONE.getField();
      Complex complex6 = complex3.ZERO.negate();
      complex3.ONE.cosh();
      complex1.ONE.nthRoot(1);
      Complex complex7 = complex3.ONE.add(complex5);
      complex7.ONE.tanh();
      complex0.getReal();
      complex0.getImaginary();
      Complex complex8 = complex0.divide(complex6);
      complex8.ZERO.readResolve();
      complex4.I.sinh();
      Complex complex9 = Complex.valueOf((double) 1, (-448.6917458334736));
      Complex complex10 = complex2.pow(complex3);
      Complex complex11 = complex9.sqrt();
      Complex complex12 = complex9.INF.sinh();
      Complex complex13 = complex11.I.pow(736.3956514446);
      complex5.subtract(complex6);
      complex11.abs();
      complex6.sqrt();
      complex11.divide(complex12);
      complex2.asin();
      complex4.atan();
      complex4.readResolve();
      complex5.getImaginary();
      complex10.reciprocal();
      complex13.multiply(1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(3560.915, 20.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.pow(3560.915);
      complex2.I.subtract(complex1);
      Complex complex3 = complex1.ONE.reciprocal();
      complex3.INF.toString();
      complex0.NaN.getField();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1581.5944445048187, 1581.5944445048187);
      int int0 = 0;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.NaN.getField();
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1888.54);
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.NaN.multiply(1032);
      complex1.ONE.getArgument();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex0.divide(1888.54);
      Complex complex6 = complex0.log();
      complex1.NaN.readResolve();
      complex5.readResolve();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex2.multiply(complex7);
      complex4.ONE.subtract((-637.3));
      complex7.ZERO.reciprocal();
      Complex complex9 = complex7.I.createComplex(0.0, 1888.54);
      complex1.NaN.pow(complex4);
      complex8.INF.tanh();
      Complex.valueOf((-1083.05878), 0.0);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.cos();
      complex6.hashCode();
      complex9.tanh();
      complex6.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 576.0;
      Complex complex1 = new Complex(576.0, 576.0);
      complex1.ZERO.tanh();
      Complex complex2 = complex0.add(complex1);
      try { 
        complex2.I.nthRoot((-2108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,108
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = (-1346.9);
      Complex complex0 = new Complex((-1346.9));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.NaN.pow(complex1);
      double double1 = 5100.76905991;
      complex2.I.subtract(5100.76905991);
      complex1.I.abs();
      Complex complex3 = complex1.ZERO.sqrt1z();
      try { 
        complex3.NaN.nthRoot((-2224));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,224
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5817.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add(0.0);
      complex2.sqrt1z();
      complex2.ONE.getField();
      complex0.toString();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.sin();
      complex4.INF.divide(3.2921976772303727E158);
      complex4.createComplex(964.08, 0.0);
      Complex complex6 = complex3.pow(0.0);
      Complex complex7 = complex1.conjugate();
      complex7.INF.multiply((-191.339803133));
      Complex complex8 = complex2.subtract((-2334.429989563));
      complex8.atan();
      complex8.NaN.sqrt();
      complex5.log();
      complex2.I.log();
      complex8.sinh();
      Complex complex9 = complex2.subtract(complex1);
      complex6.sin();
      Complex complex10 = Complex.INF;
      complex9.add(complex10);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-1276.98553765072));
      complex1.log();
      complex0.hashCode();
      Complex complex3 = Complex.valueOf(0.0);
      complex2.I.abs();
      Complex complex4 = complex1.asin();
      complex3.I.cos();
      complex4.INF.nthRoot(1079);
      Complex complex5 = complex1.INF.multiply(0.0);
      Complex complex6 = complex1.subtract(20.0);
      complex4.toString();
      Complex complex7 = complex3.NaN.createComplex((-1276.98553765072), 20.0);
      complex3.hashCode();
      complex3.pow(complex1);
      Complex complex8 = complex7.acos();
      complex8.NaN.readResolve();
      Complex complex9 = complex2.cos();
      complex9.ONE.log();
      complex6.getImaginary();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex7.log();
      complex11.ONE.reciprocal();
      complex9.abs();
      complex11.cosh();
      complex6.negate();
      Complex complex12 = Complex.valueOf(0.0);
      complex10.multiply(complex12);
      complex0.subtract(0.0);
      complex5.add(1615.7395675044);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.divide(0.0);
      complex0.getField();
      Complex complex2 = complex0.reciprocal();
      complex0.sqrt();
      complex2.ONE.abs();
      complex0.readResolve();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.acos();
      complex3.ONE.toString();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = complex3.subtract(0.0);
      complex7.subtract(complex5);
      complex7.cosh();
      complex3.abs();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.INF.nthRoot(510);
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.NaN.cos();
      complex3.ONE.sqrt1z();
      complex2.ZERO.cos();
      Complex complex4 = complex0.divide(complex1);
      complex4.ONE.getField();
      complex0.multiply(810);
      Complex complex5 = complex4.multiply(1);
      complex4.nthRoot(510);
      complex1.sqrt();
      complex5.cosh();
      complex4.tan();
      complex0.asin();
      complex1.subtract(2301.3362672821);
      complex4.asin();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.INF.subtract((-2114.87092818));
      complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ZERO.multiply(complex1);
      Complex complex4 = complex1.negate();
      Complex.valueOf((-120.0), 0.0);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex0.INF.tan();
      double double0 = complex4.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.reciprocal();
      complex7.readResolve();
      Complex complex8 = complex2.sin();
      complex8.ZERO.reciprocal();
      String string0 = complex8.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      complex6.log();
      complex0.negate();
      Complex complex9 = complex6.ONE.atan();
      assertEquals(0.7853981633974483, complex9.getReal(), 0.01);
      
      Complex complex10 = Complex.valueOf((-1704.48243), Double.POSITIVE_INFINITY);
      Complex complex11 = complex1.INF.reciprocal();
      double double1 = complex10.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      complex6.subtract(complex3);
      complex10.reciprocal();
      Complex complex12 = complex1.tanh();
      assertSame(complex12, complex7);
      
      Complex complex13 = complex10.atan();
      Complex complex14 = complex13.ZERO.cosh();
      complex14.ZERO.multiply(complex5);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex15 = Complex.valueOf(0.0);
      complex8.multiply(complex15);
      complex4.abs();
      complex8.getArgument();
      assertSame(complex8, complex2);
      
      Complex complex16 = complex15.cos();
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertTrue(complex15.equals((Object)complex11));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3752309224575428E-179);
      double double0 = complex0.getArgument();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.3752309224575428E-179, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.I.divide(0.0);
      Complex complex4 = complex0.negate();
      complex4.INF.negate();
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex5.INF.conjugate();
      assertTrue(complex6.isInfinite());
      
      Complex complex7 = complex5.I.pow(complex1);
      Complex complex8 = complex1.sin();
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex4.pow(complex1);
      complex5.ONE.abs();
      Complex complex10 = complex1.acos();
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex9.divide(complex7);
      assertTrue(complex4.equals((Object)complex8));
      assertSame(complex11, complex3);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract((-1229.6204551143815));
      Complex complex2 = complex1.pow(complex0);
      assertEquals(0.7381912265464712, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(0.6733858606413726, complex2.getReal(), 0.01);
  }
}
