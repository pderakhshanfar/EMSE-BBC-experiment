/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:50:57 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(20.0, 1162.663);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.pow(20.0);
      complex2.getArgument();
      complex0.log();
      complex1.multiply((-3322));
      complex1.tanh();
      try { 
        complex3.nthRoot((-1673));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,673
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4794255495071411);
      Complex complex1 = complex0.multiply(1073741824);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.asin();
      complex3.I.subtract(complex0);
      complex2.NaN.subtract((-1714888.9208188076));
      Complex complex4 = complex1.subtract(complex0);
      complex1.conjugate();
      complex0.exp();
      complex0.log();
      complex4.cosh();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.tan();
      complex1.hashCode();
      complex1.divide(complex0);
      Complex complex2 = Complex.valueOf(6.283185307179586, (-17.39015695420072));
      complex0.acos();
      complex2.tanh();
      complex0.createComplex((-2773.40103701554), (-2013.36));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex3.pow(Double.POSITIVE_INFINITY);
      complex5.getArgument();
      Complex complex6 = complex2.log();
      complex6.I.sin();
      Complex complex7 = new Complex(563.436);
      complex1.divide(complex7);
      complex5.multiply(7);
      complex3.tanh();
      complex2.nthRoot(7);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3610.81455223, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3610.81455223, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(complex0);
      complex2.I.conjugate();
      Complex.valueOf(3610.81455223);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.multiply((-20.0));
      Complex complex3 = complex2.INF.acos();
      complex2.I.nthRoot(346);
      Complex complex4 = new Complex((-965.97));
      Complex complex5 = complex0.INF.createComplex((-965.97), (-20.0));
      complex5.INF.multiply(7.861625501845992E-4);
      complex4.INF.sin();
      Complex complex6 = complex0.INF.multiply(complex4);
      complex0.asin();
      complex6.divide((-831.0));
      Complex complex7 = Complex.valueOf((-965.97));
      complex7.abs();
      complex7.pow((-13.464241963013809));
      Complex complex8 = complex4.subtract((-965.97));
      complex5.multiply(Double.NaN);
      complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0110092718356274E218), (-13.464241963013809));
      Complex complex1 = Complex.valueOf((-13.464241963013809), (-17.39015695420072));
      Complex complex2 = complex1.tan();
      complex2.ONE.multiply(complex0);
      complex0.acos();
      complex0.multiply(3827);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.multiply(1286);
      complex0.INF.divide((double) 1286);
      Complex complex1 = new Complex(3610.81455223, Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      complex0.multiply(800.0);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      complex0.pow(complex0);
      Complex complex2 = Complex.valueOf(Double.NaN, 5.3366470162689076E-8);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2028.4250443893247), (-13.464241963013809));
      complex0.acos();
      Complex complex1 = new Complex((-13.464241963013809), Double.NaN);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3610.81455223, Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      Complex complex2 = complex1.multiply(2.406976727302894E-69);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2032.885953), (-1.1999775811280213));
      Complex complex1 = complex0.tan();
      complex0.hashCode();
      Complex complex2 = new Complex((-1.1999775811280213), (-2032.885953));
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 3610.81455223);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.multiply(complex0);
      complex6.ONE.cos();
      complex6.getArgument();
      Complex complex7 = complex4.log();
      Complex complex8 = complex4.divide(complex0);
      Complex complex9 = complex8.multiply((-3322));
      complex7.tanh();
      complex3.divide(complex2);
      Complex complex10 = Complex.INF;
      complex7.multiply((-1623));
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.000000174368556, 2742.6);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.subtract(16.539252);
      Complex complex3 = complex2.add(complex0);
      complex3.ZERO.divide(2742.6);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.cosh();
      complex2.readResolve();
      complex0.log();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = Complex.valueOf((-1950.8602628));
      Complex complex8 = complex6.I.multiply(complex3);
      Complex complex9 = Complex.valueOf(1.000000174368556);
      complex0.tan();
      Complex complex10 = complex0.ZERO.sin();
      Complex complex11 = complex10.ZERO.subtract(complex6);
      Complex complex12 = complex6.add(2742.6);
      complex12.ZERO.divide((-1210.663021590829));
      complex12.ONE.tanh();
      Complex complex13 = complex0.createComplex(0.6430866718292236, Double.POSITIVE_INFINITY);
      complex7.tanh();
      complex2.divide(1735.1477496608);
      complex13.multiply(4388);
      complex11.tan();
      complex1.tan();
      complex8.asin();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      complex0.hashCode();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(0.0, 2529.86827831718);
      complex2.hashCode();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.divide(939.36975568);
      complex4.equals(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.NaN);
      complex0.subtract(complex1);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex3 = complex0.sqrt1z();
      complex1.subtract(0.0);
      Complex complex4 = complex2.createComplex((-1158.905), (-4473.438560426102));
      Complex.valueOf((-1786.923122862757), 6.283185307179586);
      Complex complex5 = Complex.NaN;
      complex5.hashCode();
      complex4.sinh();
      Complex complex6 = Complex.valueOf((-1266.591884581), 3.720075801577098E-44);
      Complex complex7 = complex6.divide(2.0);
      complex4.log();
      complex7.exp();
      Complex complex8 = complex3.multiply(complex1);
      complex8.reciprocal();
      complex0.multiply(complex5);
      Complex complex9 = Complex.ONE;
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.tan();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.add(1.0493479260117497E-96);
      Complex complex3 = Complex.valueOf((-3.855478664503271E21), (-3.855478664503271E21));
      Complex complex4 = complex3.multiply(1.3328680266667662E237);
      complex2.log();
      Complex complex5 = new Complex(2061.3749);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-2032.885953), 3404.06482818);
      Complex complex1 = Complex.valueOf((-4080.406925571), 3404.06482818);
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.ZERO.getArgument();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex2.createComplex((-1158.905), (-4473.438560426102));
      Complex complex6 = Complex.NaN;
      complex6.hashCode();
      Complex complex7 = complex4.divide(complex1);
      Complex complex8 = complex3.sqrt1z();
      complex3.INF.hashCode();
      complex6.divide(complex7);
      Complex complex9 = complex1.acos();
      complex8.cos();
      complex7.multiply(complex6);
      complex8.getArgument();
      Complex complex10 = complex3.log();
      Complex complex11 = complex10.divide(complex4);
      Complex complex12 = Complex.valueOf(0.1597995031381299, Double.NaN);
      complex9.subtract(complex11);
      complex11.toString();
      complex12.getImaginary();
      Complex complex13 = Complex.INF;
      complex4.getArgument();
      complex10.multiply(complex8);
      complex5.sqrt1z();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(405.029592, 405.029592);
      complex1.I.hashCode();
      Complex complex4 = complex3.sinh();
      Complex complex5 = new Complex(405.029592);
      complex5.log();
      complex0.pow(complex4);
      complex1.divide(2560.4119);
      Complex.valueOf(2560.4119);
      Complex complex6 = complex2.multiply(2560.4119);
      Complex complex7 = Complex.NaN;
      complex7.divide(complex6);
      complex3.getImaginary();
      Complex complex8 = Complex.valueOf((-20.0));
      complex8.tanh();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      complex0.sqrt1z();
      complex0.ONE.divide(complex1);
      Complex complex3 = complex1.subtract(0.0);
      complex2.createComplex((-1158.905), (-4473.438560426102));
      Complex complex4 = Complex.NaN;
      complex4.multiply(37);
      complex3.readResolve();
      complex4.multiply((-4473.438560426102));
      complex1.pow(2.406976727302894E-69);
      complex2.divide(complex0);
      Complex complex5 = Complex.INF;
      complex5.getImaginary();
      Complex.valueOf((-4473.438560426102));
      Complex complex6 = complex2.tanh();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 405.029592);
      complex0.hashCode();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 1900.3368);
      Complex complex5 = complex4.exp();
      complex5.divide(405.029592);
      complex0.multiply(complex3);
      Complex complex6 = complex5.createComplex(405.029592, 0.168555349111557);
      Complex complex7 = complex1.subtract(1109.353985697846);
      Complex complex8 = new Complex((-12.3118));
      complex8.hashCode();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex9.conjugate();
      complex3.reciprocal();
      complex7.divide(4.747229597770176E-177);
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.valueOf((-12.3118), (-947.6095));
      complex10.subtract(complex6);
      complex12.toString();
      complex1.getImaginary();
      Complex complex13 = Complex.INF;
      complex5.getArgument();
      complex2.multiply(complex6);
      complex4.sqrt1z();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      complex1.ZERO.negate();
      Complex complex2 = new Complex((-1.0), 9.704297297526684E31);
      Complex complex3 = complex2.atan();
      complex2.reciprocal();
      Complex complex4 = complex2.multiply(3.3192593301633E-232);
      complex4.log();
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.add(complex2);
      complex1.readResolve();
      complex2.equals(complex3);
      Complex complex4 = Complex.valueOf((-1.0), (-1.0));
      complex2.add(0.0);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      complex1.INF.sqrt1z();
      complex1.NaN.tan();
      Complex complex2 = Complex.valueOf((double) 0, (double) 0);
      complex2.ZERO.abs();
      complex2.sin();
      Complex complex3 = Complex.valueOf((-2705.712924));
      complex2.acos();
      Complex complex4 = complex2.INF.acos();
      Complex complex5 = Complex.valueOf(2727.5909975738778);
      Complex complex6 = complex4.NaN.cosh();
      complex6.ONE.toString();
      Complex complex7 = complex6.I.exp();
      Complex complex8 = complex7.multiply(1);
      complex0.nthRoot(1);
      Complex complex9 = complex2.acos();
      complex9.cos();
      complex0.sinh();
      Complex complex10 = complex3.add(complex5);
      complex10.ZERO.toString();
      Complex complex11 = complex10.asin();
      complex2.multiply(complex11);
      complex1.tan();
      Complex complex12 = complex6.sqrt();
      complex8.isNaN();
      complex0.getReal();
      complex12.cos();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      complex0.hashCode();
      double double0 = 0.0;
      complex0.createComplex(0.0, (-20.0));
      complex0.sqrt1z();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-20.0), (double) (-1951));
      Complex complex3 = complex2.multiply((-1951));
      Complex complex4 = Complex.ONE;
      complex0.cos();
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(779.97298, 779.97298);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.add((-3.52597540499141E189));
      complex0.subtract(complex1);
      complex1.subtract(2918.65205);
      complex4.multiply(2013.6329);
      complex3.pow(1665.13);
      Complex complex5 = complex2.divide(complex1);
      complex3.getImaginary();
      Complex.valueOf(779.97298);
      complex5.tanh();
      complex5.tanh();
      complex0.acos();
      complex5.multiply(3030);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.multiply((-1484));
      Complex complex5 = complex2.atan();
      complex5.multiply(complex3);
      Complex complex6 = complex3.log();
      complex4.pow(complex3);
      Complex complex7 = complex0.divide(1665.13);
      Complex.valueOf(2470.6385);
      complex6.multiply((-5322.9533140168));
      Complex complex8 = complex7.pow(0.8414709848078965);
      complex1.divide(complex3);
      complex8.getImaginary();
      Complex.valueOf(0.8414709848078965);
      complex0.tanh();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      complex0.ZERO.atan();
      Complex complex1 = new Complex((-421.7));
      complex1.atan();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.394097634));
      Complex complex1 = complex0.ZERO.pow((-667.394097634));
      complex1.ZERO.pow((-667.394097634));
      Complex complex2 = complex0.NaN.multiply((-1484));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.multiply((-1484));
      Complex complex7 = complex6.reciprocal();
      complex5.cos();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex4.add(complex8);
      complex5.readResolve();
      complex9.equals(complex7);
      Complex complex10 = Complex.NaN;
      complex4.add((-620.755632848728));
      Complex complex11 = Complex.ONE;
      complex8.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(405.029592, 405.029592);
      complex3.ZERO.multiply(complex1);
      Complex complex4 = Complex.ZERO;
      complex4.createComplex(0.11517547070980072, (-3413.0));
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.ONE;
      complex3.multiply((-1951));
      complex5.reciprocal();
      Complex complex7 = complex3.cos();
      complex3.add(complex7);
      complex3.readResolve();
      Complex complex8 = Complex.I;
      complex6.ZERO.cosh();
      complex2.equals(complex8);
      Complex complex9 = Complex.valueOf((-1.0), (-1243.0));
      Complex complex10 = new Complex(465.7225436);
      complex10.add(405.029592);
      Complex complex11 = Complex.ONE;
      complex6.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2032.885953), (-1.1999775811280213));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex1.subtract(complex2);
      complex1.subtract(0.022212404757738113);
      complex0.multiply(319);
      complex2.reciprocal();
      Complex complex5 = new Complex(0.022212404757738113, 319);
      Complex complex6 = complex5.cos();
      complex3.add(complex2);
      complex5.readResolve();
      complex0.equals(complex1);
      Complex.valueOf((-2032.885953), Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0);
      complex0.getImaginary();
      complex3.log();
      Complex complex7 = complex6.multiply(0.0);
      Object object0 = new Object();
      complex7.equals(object0);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2453.5));
      Complex complex1 = Complex.valueOf((-2453.5), (-2.0697130057384643E245));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex1.add((-2.0697130057384643E245));
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex3.subtract(6.989914264479507E-28);
      complex6.createComplex(315.5429456303, 0.0);
      complex1.hashCode();
      Complex complex7 = complex3.divide(complex6);
      complex5.sqrt1z();
      Complex complex8 = Complex.ONE;
      complex2.divide(complex8);
      Complex complex9 = complex0.acos();
      Complex complex10 = new Complex(0.022212404757738113);
      complex3.cos();
      Complex complex11 = Complex.ONE;
      complex11.multiply(complex4);
      Complex complex12 = new Complex(6.989914264479507E-28);
      complex7.getArgument();
      complex4.log();
      complex5.divide(complex9);
      Complex complex13 = new Complex((-55), 315.5429456303);
      complex13.multiply(828);
      complex3.tanh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(405.029592, 405.029592);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex0.createComplex(0.0, 0.0);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex3.sinh();
      Complex complex7 = Complex.I;
      complex7.multiply(140);
      Complex complex8 = complex6.reciprocal();
      complex4.cos();
      Complex complex9 = Complex.valueOf((double) (-1951), 5.475072932318336E-266);
      complex4.add(complex9);
      complex8.readResolve();
      complex1.equals("t;@eH!<nA<}2Q$6:i");
      Complex.valueOf(405.029592, (double) (-1951));
      Complex complex10 = Complex.valueOf(1950.0690285603375);
      complex5.getImaginary();
      complex2.log();
      complex10.multiply((-1243.0));
      complex6.equals("t;@eH!<nA<}2Q$6:i");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-773.38975288));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.0029967234006183104);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex0.pow(complex2);
      complex2.ZERO.hashCode();
      Complex complex5 = complex4.NaN.exp();
      complex5.ONE.log();
      complex5.I.readResolve();
      Complex complex6 = complex2.NaN.sqrt();
      complex3.INF.hashCode();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex7.ZERO.log();
      Complex complex9 = complex6.INF.multiply(complex8);
      complex9.ONE.sqrt();
      complex4.ONE.log();
      Complex complex10 = complex2.exp();
      complex10.NaN.cos();
      Complex complex11 = complex1.pow((-773.38975288));
      Complex complex12 = Complex.valueOf(0.0029967234006183104, (-2919.3711));
      Complex complex13 = complex12.ZERO.multiply(complex10);
      Complex complex14 = complex4.log();
      Complex complex15 = complex11.divide(complex14);
      complex15.INF.log();
      complex6.acos();
      complex6.readResolve();
      Complex complex16 = complex2.reciprocal();
      complex16.divide(complex8);
      complex3.sqrt();
      complex16.add(607.663665709);
      complex6.tanh();
      complex10.multiply((-773.38975288));
      complex13.log();
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex0.INF.abs();
      complex1.INF.log();
      Complex complex2 = complex0.NaN.pow(2003.5);
      Complex complex3 = complex2.multiply(complex1);
      complex2.NaN.toString();
      complex0.divide(0.0);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex3 = complex0.sqrt1z();
      complex0.sinh();
      Complex complex4 = complex0.ZERO.multiply((-1951));
      complex4.I.multiply((-1462.2));
      Complex complex5 = complex0.reciprocal();
      complex5.NaN.pow(complex2);
      complex5.cos();
      Complex complex6 = complex4.add(complex1);
      Object object0 = complex1.readResolve();
      complex6.equals(object0);
      Complex.valueOf((-1243.0), (-1243.0));
      Complex complex7 = Complex.valueOf(-0.0);
      complex3.getImaginary();
      Complex complex8 = new Complex(Double.NaN);
      complex8.log();
      complex7.multiply(328.19305887113);
      Complex complex9 = Complex.INF;
      complex3.equals(complex9);
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex.valueOf((-89.603));
      Complex complex4 = complex0.add((-1848.33510497131));
      complex2.add((-89.603));
      Complex.valueOf((-1848.33510497131));
      complex0.reciprocal();
      complex3.createComplex((-1848.33510497131), (-329.0));
      complex4.multiply((-1319));
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.cosh();
      complex4.cos();
      Complex complex7 = complex3.acos();
      Complex complex8 = Complex.valueOf((double) (-1319), (-329.0));
      complex8.tanh();
      complex6.reciprocal();
      complex7.sinh();
      Complex complex9 = Complex.valueOf((-1.4255188208147591));
      complex9.sqrt1z();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.sinh();
      complex5.multiply((-1951));
      complex5.reciprocal();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.add(complex4);
      complex1.readResolve();
      complex7.equals(complex2);
      Complex complex8 = Complex.valueOf((-3015.02014483), (-1243.0));
      Complex.valueOf(0.0);
      complex8.getImaginary();
      Complex complex9 = complex6.log();
      complex9.multiply((-3193.348212361962));
      complex8.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.sinh();
      complex3.multiply(428);
      Complex complex4 = Complex.valueOf((double) 428, (-1158.905));
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = Complex.I;
      complex2.equals(complex7);
      Complex.valueOf((-1243.0), (double) 428);
      Complex complex8 = Complex.valueOf((-1288.2791827507453));
      complex6.getImaginary();
      complex8.log();
      complex0.multiply(2.0);
      complex0.equals("fF..TDBTm");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      complex1.ZERO.negate();
      Complex complex2 = Complex.valueOf(405.029592, 405.029592);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.I.hashCode();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.I.divide(Double.POSITIVE_INFINITY);
      complex5.ZERO.log();
      Complex complex6 = complex4.INF.exp();
      Complex complex7 = complex2.multiply(complex0);
      Complex complex8 = complex7.ZERO.divide(complex2);
      Complex complex9 = complex0.atan();
      complex9.INF.pow(405.029592);
      Complex complex10 = complex4.subtract(complex3);
      Complex.valueOf(405.029592);
      Complex complex11 = complex4.log();
      complex10.INF.hashCode();
      Complex.valueOf(405.029592);
      complex11.sin();
      complex9.multiply((-1850.0263700095));
      complex8.pow(0.3831497249319151);
      complex6.divide(complex0);
      complex5.getImaginary();
      Complex.valueOf(405.029592, 0.3831497249319151);
      complex2.tanh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.INF.subtract(complex0);
      Complex complex5 = complex2.multiply(6218);
      complex5.atan();
      Complex complex6 = complex0.multiply(complex1);
      complex1.divide((double) 6218);
      Complex complex7 = complex6.log();
      Complex complex8 = complex0.pow(complex2);
      Complex complex9 = complex2.divide(0.0);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex2.tan();
      complex9.createComplex(2560.4119, Double.POSITIVE_INFINITY);
      Complex complex12 = complex8.subtract(0.17724304424337292);
      complex4.hashCode();
      Complex complex13 = complex11.conjugate();
      complex7.reciprocal();
      complex5.divide(2.0);
      Complex complex14 = complex4.subtract(complex13);
      complex12.getImaginary();
      complex2.getArgument();
      complex1.multiply(complex14);
      complex1.sqrt1z();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1992.462456923165);
      Complex complex2 = complex1.pow(1992.462456923165);
      Complex complex3 = complex1.pow(0.7853981633974483);
      complex2.multiply((-1527));
      complex3.atan();
      Complex complex4 = new Complex((-1834.0));
      complex4.multiply(complex3);
      Complex complex5 = complex0.divide(0.7853981633974483);
      complex3.log();
      Complex complex6 = complex4.pow(complex1);
      complex6.divide(0.0);
      Complex.valueOf(2058.3241);
      complex6.multiply(0.08782485127449036);
      Complex.valueOf(0.08782485127449036);
      complex3.getImaginary();
      Complex.valueOf(0.0);
      complex5.tanh();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2032.885953), (-1.1999775811280213));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex1.subtract(0.022212404757738113);
      Complex complex6 = complex5.createComplex(315.5429456303, 0.0);
      complex3.hashCode();
      complex6.divide(complex0);
      Complex complex7 = complex0.sqrt1z();
      complex6.divide(complex7);
      complex5.acos();
      Complex complex8 = new Complex((-1158.905));
      Complex complex9 = complex8.cos();
      complex9.multiply(complex6);
      Complex complex10 = Complex.ZERO;
      complex10.getArgument();
      Complex complex11 = complex7.log();
      complex6.divide(complex3);
      complex4.multiply((-55));
      complex1.tanh();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.acos();
      complex3.ZERO.abs();
      Complex complex4 = complex1.ZERO.multiply(0.0);
      complex1.readResolve();
      complex4.isNaN();
      complex2.getArgument();
      complex0.pow(0.0);
      Complex complex5 = new Complex(1574.06);
      Complex complex6 = complex5.multiply(Double.POSITIVE_INFINITY);
      complex4.pow(20.0);
      complex0.divide(complex6);
      Complex complex7 = Complex.ZERO;
      complex4.getImaginary();
      Complex.valueOf(Double.NaN);
      complex2.tanh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      complex1.ZERO.negate();
      Complex complex2 = Complex.valueOf(405.029592, 405.029592);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.I.hashCode();
      Complex complex4 = complex2.sinh();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex5.ZERO.log();
      Complex complex6 = complex4.INF.exp();
      Complex complex7 = complex2.multiply(complex0);
      Complex complex8 = complex7.ZERO.divide(complex2);
      complex0.atan();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex4.subtract(complex3);
      Complex.valueOf(405.029592);
      complex4.log();
      complex10.INF.hashCode();
      Complex complex11 = complex4.negate();
      Complex complex12 = complex10.I.tan();
      complex11.I.createComplex(8.849812639395597E201, 405.029592);
      complex6.getArgument();
      Complex complex13 = Complex.NaN;
      complex13.log();
      complex6.divide(complex4);
      complex8.multiply((-55));
      complex12.tanh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = new Complex(594.2449064398, 594.2449064398);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.multiply(2144265933);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.subtract((-258.0));
      complex2.exp();
      complex5.negate();
      complex0.getArgument();
      Complex complex9 = complex4.sqrt1z();
      complex7.divide(complex1);
      complex2.sinh();
      complex9.hashCode();
      Complex complex10 = complex7.pow(0.0);
      complex10.sinh();
      complex3.hashCode();
      complex8.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.reciprocal();
      complex2.ZERO.multiply(1775);
      Complex complex3 = complex1.INF.negate();
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex4.NaN.subtract((double) 1775);
      complex5.I.exp();
      complex0.negate();
      Complex.valueOf((-1.0));
      complex1.ONE.getArgument();
      Complex complex6 = complex2.sqrt1z();
      complex3.multiply(0.0);
      complex5.pow(0.0);
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex(1105.481905717, 0.0);
      Complex complex9 = Complex.I;
      complex7.getImaginary();
      Complex.valueOf(1.7731721919024996E7);
      complex6.tanh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.multiply(1775);
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = complex3.NaN.subtract((double) 1775);
      complex5.I.exp();
      Complex complex6 = complex0.negate();
      complex1.ONE.getArgument();
      complex2.sqrt1z();
      complex6.cosh();
      Complex complex7 = complex0.cos();
      Complex complex8 = Complex.valueOf(0.0, 4210.905);
      complex8.acos();
      Complex complex9 = complex1.tanh();
      Complex complex10 = complex2.reciprocal();
      complex10.sinh();
      complex7.sqrt1z();
      complex4.sqrt();
      complex9.pow((-287.0664961556));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.atan();
      Complex complex1 = complex0.ONE.pow(1012.735);
      complex1.NaN.divide(1012.735);
      double double0 = (-3935.25792973875);
      Complex complex2 = Complex.valueOf((-3935.25792973875));
      complex2.I.add((-1848.33510497131));
      complex2.NaN.add(1012.735);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.getImaginary();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ONE.pow(complex2);
      complex0.getField();
      complex3.tanh();
      Complex.valueOf(0.0);
      Complex complex4 = Complex.ZERO;
      complex4.multiply((-1951));
      complex2.reciprocal();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.cos();
      Complex complex6 = complex2.add(complex1);
      Object object0 = complex5.readResolve();
      complex6.equals(complex5);
      Complex.valueOf((-1243.0), (double) 988);
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex7.getImaginary();
      complex2.log();
      complex2.multiply(4407.909669);
      complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sinh();
      complex1.multiply(131);
      Complex complex4 = Complex.valueOf((-1158.905));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex1.createComplex(1.8995206356048584, 1.8995206356048584);
      complex0.add(complex3);
      Complex complex7 = complex4.sinh();
      complex2.toString();
      complex4.exp();
      complex7.reciprocal();
      Complex complex8 = new Complex((-2649.210693309993), 131);
      complex8.conjugate();
      Complex complex9 = complex4.conjugate();
      complex5.subtract(complex2);
      Complex complex10 = complex6.sqrt1z();
      complex5.negate();
      complex10.cosh();
      complex9.atan();
      Complex complex11 = new Complex(1.0232274785475506);
      complex11.tanh();
      complex8.add((-1900.33434));
      Complex complex12 = Complex.NaN;
      complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = new Complex((-1.0), (-1.0));
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.add(5.2240336371356666E-9);
      Complex complex7 = complex3.createComplex(1.7896699905395508, 3303.842511206);
      complex2.sqrt();
      complex4.isNaN();
      Complex complex8 = complex7.pow(complex2);
      complex8.divide(complex2);
      complex8.add(433.57530606094);
      complex5.sqrt();
      complex7.add(complex5);
      complex4.getImaginary();
      complex7.pow(complex6);
      Complex complex9 = Complex.valueOf((-1798.4901311));
      complex9.subtract(401.2);
      complex4.isInfinite();
      complex5.negate();
      complex1.nthRoot(29);
      complex6.getImaginary();
      Complex.valueOf((double) 1775);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.cos();
      complex0.nthRoot(1193);
      Complex complex3 = Complex.valueOf((double) 1193);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = Complex.valueOf(0.999995509814349, 2343.3029);
      complex5.conjugate();
      Complex complex6 = complex5.subtract(complex3);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.acos();
      complex7.multiply((-1763183520));
      Complex complex9 = Complex.valueOf(1289.8878373857, (double) (-1763183520));
      complex9.cosh();
      Complex complex10 = complex8.asin();
      complex4.divide(complex2);
      complex10.pow(0.999995509814349);
      complex0.getImaginary();
      complex6.asin();
      Complex complex11 = complex9.divide(complex3);
      complex11.abs();
      complex7.multiply((-459));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex2 = complex0.sqrt1z();
      complex0.sinh();
      complex1.conjugate();
      Complex complex3 = new Complex((-1158.905));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex3.add(complex1);
      Object object0 = complex1.readResolve();
      complex6.equals(object0);
      Complex complex7 = Complex.valueOf((-1243.0), (-1243.0));
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = new Complex((-1951), 405.029592);
      complex2.divide(complex9);
      complex5.sinh();
      complex7.readResolve();
      Complex complex10 = Complex.NaN;
      complex8.divide(complex10);
      complex4.add(complex7);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex5.log();
      complex4.pow(complex2);
      complex1.divide((-1158.905));
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = Complex.ZERO;
      complex9.multiply(5.551115123125783E-17);
      Complex complex10 = complex7.pow(0.0);
      Complex complex11 = complex10.divide(complex6);
      complex11.ZERO.subtract(complex8);
      complex10.getImaginary();
      complex1.ZERO.conjugate();
      Complex.valueOf((-2263.51703871634));
      complex3.tanh();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.tan();
      complex3.isInfinite();
      complex2.isNaN();
      complex0.ZERO.sqrt1z();
      complex3.getImaginary();
      Complex complex5 = complex0.reciprocal();
      complex4.divide(-0.0);
      complex2.subtract(complex5);
      Complex complex6 = Complex.valueOf((-5.346), -0.0);
      complex6.getImaginary();
      Complex complex7 = Complex.valueOf(1735.7876914);
      complex7.getArgument();
      Complex complex8 = Complex.NaN;
      complex8.multiply(complex0);
      complex0.sqrt1z();
      complex1.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(405.029592, 405.029592);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      Complex complex5 = complex2.multiply(7);
      Complex complex6 = complex1.atan();
      complex2.multiply(complex0);
      complex4.divide((-3169.0));
      Complex complex7 = complex0.log();
      complex1.pow(complex2);
      complex6.divide(0.0);
      Complex.valueOf(2560.4119);
      Complex complex8 = complex1.multiply(0.0);
      complex7.pow(0.7853981352417436);
      Complex complex9 = complex5.divide(complex8);
      complex9.getImaginary();
      Complex.valueOf((-856.46944));
      complex8.tanh();
      complex6.tanh();
      complex8.add((-3169.0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 1193;
      Complex complex0 = new Complex(0.7615941559557649, (-1.0));
      Complex complex1 = complex0.cos();
      // Undeclared exception!
      complex1.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2107.03527, 2107.03527);
      complex0.atan();
      complex0.reciprocal();
      Complex complex2 = complex1.multiply(2207);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.subtract((double) 2207);
      complex0.exp();
      Complex complex6 = complex0.negate();
      complex3.getArgument();
      Complex complex7 = complex4.sqrt1z();
      complex2.divide(complex5);
      complex7.sinh();
      complex5.hashCode();
      complex4.pow((double) 1775);
      complex6.sinh();
      complex3.hashCode();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      complex1.ZERO.negate();
      Complex complex2 = Complex.valueOf(405.029592, 405.029592);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.I.hashCode();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.I.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.log();
      complex4.INF.exp();
      Complex complex7 = complex2.multiply(complex0);
      complex7.ZERO.divide(complex2);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.INF.pow(405.029592);
      Complex complex10 = complex4.subtract(complex3);
      Complex.valueOf(405.029592);
      Complex complex11 = complex4.log();
      complex10.INF.hashCode();
      Complex complex12 = complex4.negate();
      complex10.I.tan();
      Complex complex13 = complex12.I.createComplex(8.849812639395597E201, 405.029592);
      complex11.ONE.subtract(0.0);
      complex13.I.hashCode();
      Complex complex14 = complex10.ONE.conjugate();
      complex9.reciprocal();
      complex10.divide(8.849812639395597E201);
      Complex complex15 = complex6.subtract(complex0);
      complex15.getImaginary();
      complex11.getArgument();
      complex14.multiply(complex7);
      complex15.sqrt1z();
      complex11.tan();
      Complex complex16 = Complex.valueOf((-4473.438560426102));
      complex6.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = Complex.ZERO;
      complex4.ZERO.subtract((-4473.438560426102));
      Complex complex5 = complex0.INF.createComplex(0.0, (-4473.438560426102));
      complex5.I.hashCode();
      Complex complex6 = complex4.INF.divide(complex0);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex4.divide(complex2);
      complex3.ZERO.acos();
      complex0.sqrt1z();
      Complex complex9 = complex7.divide(complex5);
      complex0.sinh();
      complex9.hashCode();
      Complex complex10 = complex8.pow((-489.25014));
      complex1.sinh();
      complex9.hashCode();
      complex10.divide(complex0);
      complex8.getArgument();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.subtract(Double.NaN);
      complex0.createComplex(6.283185307179586, 1875.0);
      complex2.hashCode();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex4.acos();
      Complex complex8 = Complex.ZERO;
      complex2.cos();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.multiply(complex3);
      complex1.getArgument();
      complex8.isInfinite();
      complex10.log();
      complex8.divide(complex6);
      complex10.multiply(1741);
      complex2.tanh();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(2137.0);
      Complex complex1 = complex0.cos();
      complex1.divide(complex0);
      complex0.tan();
      Complex complex2 = complex0.tanh();
      complex2.ONE.hashCode();
      Complex complex3 = Complex.valueOf(1.4521887058451231E-183, 1.4521887058451231E-183);
      Complex complex4 = Complex.valueOf(2137.0, 878.8659175);
      Complex complex5 = Complex.valueOf(0.0, (-311.271));
      Complex complex6 = complex4.I.pow((-523.4896572806949));
      complex6.ZERO.createComplex(1.4521887058451231E-183, 0.0);
      Complex complex7 = complex3.multiply(1934.9495994599702);
      complex7.multiply(1.4521887058451231E-183);
      complex1.toString();
      complex6.toString();
      complex1.negate();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.INF.acos();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.log();
      complex1.getField();
      complex3.equals(complex1);
      Complex complex4 = complex2.subtract(3257.67);
      complex4.getField();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex3.asin();
      complex6.I.toString();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex8.ONE.sinh();
      complex9.I.add(complex6);
      complex7.ONE.hashCode();
      Complex complex10 = complex7.tan();
      complex7.ZERO.tan();
      complex8.sqrt1z();
      complex10.getField();
      complex6.sqrt();
      complex3.createComplex(480.7428747003975, (-1310.5053776225));
      complex5.createComplex(0.0, (-1310.5053776225));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(395.4432365478);
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(0.5500838756561279, 395.4432365478);
      complex0.getReal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.NaN.pow(complex3);
      complex4.INF.pow(complex0);
      Complex complex5 = complex0.multiply((-354));
      complex0.I.pow(0.0);
      Complex complex6 = complex5.NaN.subtract(complex1);
      complex6.I.readResolve();
      complex5.I.abs();
      complex1.ONE.nthRoot(1);
      Complex complex7 = complex3.negate();
      complex7.sin();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex2.NaN.tan();
      Complex complex6 = complex1.divide(1363.07203714);
      Complex complex7 = complex1.log();
      complex7.hashCode();
      Complex complex8 = complex7.atan();
      complex5.I.add((-1257.4970228));
      Complex complex9 = complex8.I.createComplex(6.283185307179586, 6.283185307179586);
      complex8.sqrt();
      complex6.isNaN();
      Complex complex10 = complex0.pow(complex9);
      complex1.INF.divide(complex8);
      complex2.ONE.add((-2451.3329));
      Complex complex11 = complex0.sqrt();
      complex6.I.add(complex5);
      complex9.getImaginary();
      complex3.pow(complex4);
      complex10.subtract((-1917.5924507));
      complex6.isInfinite();
      complex11.negate();
      complex1.nthRoot(1765);
      complex1.getImaginary();
      Complex.valueOf((-2451.3329));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(5.826233477413577E-8);
      complex0.NaN.subtract(complex1);
      complex0.reciprocal();
      complex0.subtract(49.078921989);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.multiply(1775);
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = complex2.NaN.asin();
      Complex complex6 = complex5.NaN.subtract((double) 1775);
      complex6.I.exp();
      Complex complex7 = complex0.negate();
      complex1.ONE.getArgument();
      complex2.sqrt1z();
      Complex complex8 = complex3.divide(complex7);
      complex8.sinh();
      complex1.hashCode();
      Complex complex9 = complex0.INF.pow(0.0);
      complex9.ONE.sinh();
      complex4.hashCode();
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.divide(0.0);
      Complex complex4 = complex2.ONE.add(0.0);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.ONE.log();
      complex7.NaN.divide((-20.0));
      complex7.INF.reciprocal();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.reciprocal();
      complex9.NaN.multiply(46.0);
      Complex complex10 = complex8.INF.exp();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      complex11.INF.sinh();
      Complex complex12 = complex0.exp();
      complex12.ONE.negate();
      complex1.ZERO.asin();
      Complex complex13 = complex12.I.negate();
      Complex complex14 = complex13.ZERO.add(complex3);
      complex14.I.sin();
      complex13.I.multiply(complex6);
      complex12.toString();
      complex8.getField();
      complex5.multiply(1);
      complex10.multiply(complex8);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.cosh();
      Complex complex1 = complex0.INF.reciprocal();
      complex1.ZERO.add(complex0);
      complex0.multiply(1875);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = Complex.valueOf((double) 1875);
      Complex complex5 = Complex.ONE;
      complex2.INF.acos();
      complex4.ONE.atan();
      Complex complex6 = complex0.subtract(complex5);
      complex6.getArgument();
      Complex complex7 = complex4.ZERO.subtract((double) 1875);
      complex5.abs();
      complex0.isNaN();
      Complex complex8 = complex4.tanh();
      complex3.multiply((-870.0));
      complex8.add(complex1);
      complex5.getField();
      complex7.log();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.getImaginary();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ONE.pow(complex2);
      complex0.getField();
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.I.multiply(988);
      complex4.INF.atan();
      Complex complex6 = complex5.ONE.createComplex(15.8924971120534, 0.0);
      complex6.ONE.add(complex4);
      Complex complex7 = complex2.sinh();
      complex2.toString();
      complex5.NaN.exp();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex5.conjugate();
      complex0.conjugate();
      Complex complex10 = complex8.subtract(complex0);
      complex7.ONE.sqrt1z();
      Complex complex11 = complex10.negate();
      complex11.INF.cosh();
      complex5.atan();
      complex9.tanh();
      complex7.add(0.0);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.sqrt1z();
      complex2.INF.cos();
      complex1.NaN.tan();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = (-1197.27239667945);
      Complex complex0 = new Complex((-1197.27239667945));
      try { 
        complex0.NaN.nthRoot((-3115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,115
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.NaN.multiply(1140);
      Complex complex2 = complex1.I.multiply((double) 1140);
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.log();
      Complex.valueOf((-760.22), (-9.944393412663547E-8));
      Complex.valueOf((-9.944393412663547E-8));
      Complex complex4 = complex3.sin();
      complex4.I.acos();
      complex2.getArgument();
      complex1.getReal();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.394097634));
      Complex complex1 = complex0.ZERO.pow((-667.394097634));
      Complex complex2 = complex1.ZERO.pow((-667.394097634));
      complex0.NaN.multiply((-1484));
      Complex complex3 = complex0.atan();
      complex3.ZERO.multiply(complex2);
      Complex complex4 = complex3.I.divide(0.0);
      Complex complex5 = complex0.log();
      complex5.NaN.pow(complex0);
      complex4.divide(2560.4119);
      Complex.valueOf(0.0);
      complex4.I.multiply(0.0);
      Complex complex6 = complex0.pow((-667.394097634));
      complex6.ZERO.divide(complex2);
      complex4.getImaginary();
      Complex.valueOf((-2263.51703871634));
      complex3.tanh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(378.226, 0.0);
      complex0.getImaginary();
      Complex.valueOf(1.0, 0.40741634368896484);
      Complex complex1 = complex0.tan();
      complex1.abs();
      Complex complex2 = complex0.NaN.divide(0.40741634368896484);
      Complex complex3 = complex2.ONE.negate();
      complex3.ONE.toString();
      complex1.ZERO.cos();
      Complex complex4 = complex1.ONE.subtract((-2042.398253));
      complex0.sin();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      complex2.isNaN();
      complex5.nthRoot(3561);
      Complex complex7 = complex4.ONE.subtract(complex2);
      complex7.I.getArgument();
      Complex complex8 = complex1.subtract(2.86412266394654);
      Complex complex9 = complex4.atan();
      complex9.log();
      complex6.multiply((-2042.398253));
      complex3.negate();
      complex5.add(0.0);
      complex8.cosh();
      complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      complex0.NaN.sinh();
      Complex complex2 = complex1.acos();
      complex2.ZERO.abs();
      Complex complex3 = complex1.ZERO.multiply(0.0);
      Complex.valueOf(2343.3029, 1289.8878373857);
      Complex complex4 = complex3.INF.conjugate();
      complex2.I.subtract(complex4);
      Complex complex5 = complex0.multiply(complex1);
      complex1.acos();
      Complex complex6 = complex5.I.multiply((-33));
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex7.I.asin();
      complex8.ZERO.divide(complex5);
      complex0.pow(0.0);
      complex6.getImaginary();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.valueOf(1.0, 0.0);
      complex1.conjugate();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex3.ONE.exp();
      complex3.ONE.toString();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.multiply((-4086.221168988));
      Complex complex8 = complex7.cosh();
      complex5.I.divide(0.0);
      Complex complex9 = complex8.NaN.reciprocal();
      complex6.getImaginary();
      complex2.isNaN();
      complex0.readResolve();
      complex0.pow(0.0);
      Complex.valueOf(2028.0485);
      complex5.readResolve();
      complex7.pow(complex9);
      Complex.valueOf(0.0, 0.0);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex1.nthRoot(17);
      Complex complex2 = complex1.INF.sqrt();
      complex1.INF.nthRoot(37);
      complex0.I.toString();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.sqrt1z();
      complex3.createComplex(37, (-281.809));
      complex0.INF.sin();
      Complex complex6 = complex4.cosh();
      complex6.ZERO.asin();
      complex5.isInfinite();
      complex5.I.conjugate();
      complex6.equals((Object) null);
      complex2.ZERO.abs();
      Complex complex7 = complex5.pow((double) 37);
      Complex complex8 = complex7.ONE.createComplex(37, 1204.073);
      complex8.NaN.sqrt1z();
      complex7.divide(Double.NaN);
      Complex complex9 = complex5.acos();
      complex6.INF.negate();
      complex9.ONE.sin();
      Complex complex10 = complex6.add(916.0);
      complex3.toString();
      complex0.subtract(complex8);
      Complex complex11 = complex10.multiply(complex3);
      complex2.toString();
      complex9.pow(complex8);
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      complex2.ONE.getArgument();
      Complex complex3 = complex1.INF.divide(0.0);
      Complex complex4 = complex3.NaN.createComplex(0.0, 655.997963325603);
      Complex complex5 = complex3.I.divide(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.ONE.readResolve();
      Complex complex7 = complex5.NaN.add(complex2);
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = complex8.ONE.multiply((-2850.77980256353));
      complex9.toString();
      complex5.ZERO.getArgument();
      Complex complex10 = complex8.add(complex2);
      complex10.INF.getField();
      complex0.equals(complex1);
      complex3.abs();
      Complex complex11 = complex2.ZERO.atan();
      Complex complex12 = complex1.I.multiply(complex2);
      complex3.getField();
      Complex complex13 = complex2.ZERO.reciprocal();
      complex3.getImaginary();
      complex4.NaN.subtract(Double.NaN);
      complex2.getField();
      Complex complex14 = complex12.exp();
      Complex complex15 = complex13.pow(complex14);
      complex11.isNaN();
      complex4.log();
      complex5.abs();
      complex15.isNaN();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-721.313725485), (-4021.8292728));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.ZERO.atan();
      complex4.I.add(complex3);
      complex4.NaN.multiply(complex1);
      complex1.NaN.hashCode();
      Complex complex5 = complex0.ONE.sqrt1z();
      complex0.I.hashCode();
      Complex complex6 = complex1.ZERO.tanh();
      complex5.I.add(0.02412080392241478);
      complex0.sqrt();
      complex5.nthRoot(2611);
      complex5.subtract((-3506.24068428433));
      Complex complex7 = Complex.ZERO;
      complex7.sinh();
      complex7.I.nthRoot(7);
      complex1.add(complex7);
      complex4.getImaginary();
      complex6.multiply(5542.46033842681);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.I.createComplex(0.0, 1.0);
      Complex complex3 = complex0.divide(1028.6601298);
      Complex complex4 = complex0.exp();
      complex4.INF.readResolve();
      Complex complex5 = complex3.ONE.createComplex((-1.0), 1028.6601298);
      complex5.NaN.asin();
      Complex complex6 = complex5.ONE.pow(complex4);
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex0.ONE.sin();
      complex0.NaN.cosh();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.ONE.divide(complex4);
      complex9.ZERO.multiply(2644.0);
      complex9.divide(complex3);
      complex1.add(complex8);
      Complex complex11 = Complex.valueOf(0.0, (-917.63922816671));
      Complex complex12 = complex11.tan();
      complex10.subtract(0.0);
      complex7.hashCode();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3842.2, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      complex0.INF.tan();
      complex1.INF.readResolve();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.multiply(3842.2);
      Complex complex4 = complex3.atan();
      complex4.NaN.createComplex(1522.17169475, 3842.2);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex4.log();
      complex4.NaN.multiply(complex0);
      complex6.NaN.exp();
      Complex.valueOf(0.0);
      Complex complex7 = complex1.negate();
      complex7.ZERO.nthRoot(37);
      complex4.abs();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex2.sin();
      complex9.INF.pow(0.0);
      Complex complex10 = complex8.multiply(3003);
      complex5.sqrt1z();
      Complex complex11 = complex10.cos();
      complex11.getField();
      complex3.reciprocal();
      complex3.negate();
      Complex complex12 = complex1.pow(complex3);
      complex12.NaN.divide((-1.0));
      complex10.abs();
      Complex.valueOf(3842.2);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.ZERO.acos();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.ONE.nthRoot(2772);
      complex0.I.multiply(234);
      Complex complex3 = complex0.negate();
      complex3.INF.add(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.sqrt();
      complex5.exp();
      Complex complex6 = complex3.atan();
      complex4.multiply(complex2);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-22.203));
      Complex complex1 = complex0.ONE.cos();
      complex1.INF.log();
      Complex complex2 = complex0.pow((-873.983));
      complex2.I.hashCode();
      Complex complex3 = complex2.ONE.subtract(1678.5294);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.NaN.hashCode();
      complex4.I.toString();
      complex1.INF.conjugate();
      complex3.ZERO.nthRoot(1);
      Complex complex5 = complex0.sqrt();
      complex1.equals(complex5);
      Complex complex6 = complex5.sin();
      complex3.conjugate();
      Complex complex7 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, 1678.5294);
      complex2.ZERO.sinh();
      Complex complex8 = complex7.I.conjugate();
      complex7.INF.log();
      Complex complex9 = complex6.divide((-2851.599342));
      Complex.valueOf(1.1768108384670781E-7);
      Complex complex10 = complex6.subtract(732.7010006922);
      complex10.sinh();
      complex4.tan();
      complex9.asin();
      complex8.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(842);
      Complex complex1 = complex0.acos();
      complex1.INF.asin();
      complex1.readResolve();
      Complex complex2 = Complex.valueOf((double) 842);
      Complex complex3 = complex1.divide(complex2);
      complex0.createComplex(2.0, 2677.0);
      complex1.add(1073.408154654656);
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-2730.0247), (-2730.0247));
      complex1.NaN.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tan();
      complex4.ONE.multiply(0.0);
      complex3.ZERO.subtract(complex1);
      Complex complex5 = complex4.I.add(0.0);
      complex5.NaN.subtract(0.0);
      Complex complex6 = complex4.INF.reciprocal();
      complex6.divide(complex1);
      complex3.getReal();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.I.tanh();
      complex2.multiply(2.0902045062932175E102);
      Complex complex9 = complex2.multiply(3835);
      complex8.pow(complex5);
      complex9.add(complex8);
      Complex complex10 = complex7.conjugate();
      complex10.I.add(1.261950308999819E-90);
      complex10.I.sinh();
      complex2.hashCode();
      Complex.valueOf((-3.987619123706934E79), (-3067.87));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      complex0.acos();
      Complex complex3 = complex2.sinh();
      complex3.getReal();
      Complex complex4 = complex1.tanh();
      complex4.nthRoot(778);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-719.09319), (-719.09319));
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex0.getField();
      Complex complex2 = new Complex(2045.33149307517, 0.0);
      complex0.I.cos();
      Complex complex3 = complex2.ZERO.subtract((-1831.9547489));
      complex1.I.abs();
      Complex.valueOf((-1831.9547489));
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex1.sinh();
      complex3.readResolve();
      complex5.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.divide(0.0);
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(2.4175248449172035E-87, 2.4175248449172035E-87);
      complex0.INF.createComplex(0.0, 4.135457669031131E282);
      complex2.ZERO.multiply(0.0);
      complex0.INF.subtract(2.4175248449172035E-87);
      complex1.toString();
      complex0.add(0.0);
      complex2.cosh();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex3 = complex0.sqrt1z();
      complex0.sinh();
      Complex complex4 = complex0.ZERO.multiply((-1951));
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex4.add(complex1);
      Object object0 = complex1.readResolve();
      complex7.equals(object0);
      Complex complex8 = Complex.valueOf((-1243.0), (-1243.0));
      Complex.valueOf(1950.0690285603375);
      complex8.getImaginary();
      complex2.log();
      complex4.multiply(5.181801397059486E292);
      complex6.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = Complex.valueOf(693.937813, 1424.012341);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.NaN.sin();
      complex1.ZERO.cos();
      Complex complex6 = complex5.NaN.pow(complex3);
      complex6.add(6.283185307179586);
      Complex complex7 = complex6.NaN.createComplex(2052.503228012, 1424.012341);
      complex7.ZERO.log();
      Complex.valueOf(693.937813, 693.937813);
      complex4.divide(complex1);
      complex4.cosh();
      Complex complex8 = complex7.atan();
      complex8.I.nthRoot(2662);
      complex8.add(complex5);
      complex2.multiply(1);
      Complex.valueOf(1299.614400092);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-755));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.INF.subtract(complex0);
      complex4.ZERO.subtract((-4473.438560426102));
      Complex complex5 = complex0.INF.createComplex(0.0, (-4473.438560426102));
      complex5.I.hashCode();
      complex4.INF.divide(complex0);
      Complex complex6 = complex2.sqrt1z();
      complex4.divide(complex2);
      complex3.ZERO.acos();
      Complex.valueOf(945.61172384506, 0.0);
      complex6.cos();
      Complex complex7 = complex0.multiply(complex1);
      complex7.NaN.getArgument();
      complex2.isInfinite();
      complex3.log();
      Complex complex8 = complex2.divide(complex6);
      complex3.multiply((-55));
      complex8.tanh();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.INF.sqrt();
      complex2.ONE.nthRoot(2528);
      complex1.INF.negate();
      Complex complex3 = complex1.sin();
      complex3.ZERO.sin();
      complex1.I.atan();
      complex1.atan();
      Complex complex4 = complex0.tan();
      complex4.ONE.conjugate();
      Complex complex5 = complex3.INF.createComplex(2528, Double.NaN);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex6.ONE.pow(complex3);
      Complex complex8 = complex7.ONE.add(complex5);
      Complex complex9 = complex0.pow((double) 2528);
      complex9.INF.getArgument();
      complex6.sqrt1z();
      complex2.add(0.0);
      complex8.negate();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tanh();
      complex1.ZERO.pow(265.08971526045013);
      complex1.ONE.acos();
      complex0.ONE.multiply(0);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ONE.pow(1012.735);
      complex2.NaN.divide(1012.735);
      Complex complex3 = Complex.valueOf((-3935.25792973875));
      Complex complex4 = complex3.I.add((-1848.33510497131));
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertEquals((-1848.33510497131), complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.NaN.add(1012.735);
      Complex.valueOf(1012.735);
      Complex complex6 = complex1.reciprocal();
      assertEquals(1.2732395447351628, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      Complex complex8 = complex7.multiply((-1319));
      Complex complex9 = complex0.cosh();
      complex0.cos();
      Complex complex10 = complex9.ZERO.acos();
      Complex complex11 = complex10.NaN.tanh();
      Complex complex12 = complex0.ZERO.reciprocal();
      assertSame(complex12, complex5);
      
      Complex complex13 = complex1.sinh();
      Complex complex14 = complex1.sqrt1z();
      assertEquals(0.618990892446662, complex14.getReal(), 0.01);
      
      complex13.getField();
      complex13.cosh();
      Complex complex15 = complex10.asin();
      assertEquals((-1.0232274785475506), complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex11.add(complex0);
      complex9.conjugate();
      complex16.toString();
      assertTrue(complex9.equals((Object)complex2));
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex17 = complex8.divide(562.79906880385);
      assertEquals(-0.0, complex17.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.cos();
      List<Complex> list0 = complex0.nthRoot(1193);
      assertEquals(1193, list0.size());
      assertFalse(list0.contains(complex1));
      
      Complex complex3 = Complex.valueOf((double) 1193);
      Complex complex4 = complex3.NaN.cosh();
      complex4.NaN.readResolve();
      complex1.isNaN();
      complex1.getArgument();
      Complex complex5 = complex1.pow((double) 1193);
      complex2.getArgument();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex3.tan();
      assertEquals((-1.0404265480029578), complex9.getReal(), 0.01);
      
      Complex complex10 = Complex.valueOf((-1920.6409950563));
      assertEquals((-1920.6409950563), complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      
      boolean boolean0 = complex6.equals((Object) null);
      assertSame(complex1, complex8);
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(boolean0);
      assertSame(complex6, complex7);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      assertFalse(complex2.isInfinite());
      
      Complex complex3 = complex0.add((-2402.89570278));
      complex0.isNaN();
      Complex complex4 = complex3.cosh();
      assertTrue(complex4.isNaN());
      
      Complex complex5 = complex0.negate();
      assertTrue(complex5.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex3));
  }
}
