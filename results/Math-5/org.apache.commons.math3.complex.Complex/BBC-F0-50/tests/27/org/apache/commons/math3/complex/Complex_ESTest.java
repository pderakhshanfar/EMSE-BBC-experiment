/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:20:19 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 1.9445664882659912);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex2.ZERO.createComplex((-590.4815809759681), 20.0);
      Complex complex5 = complex1.sqrt1z();
      complex5.abs();
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex0.tanh();
      complex4.toString();
      complex3.acos();
      complex0.acos();
      complex3.add(complex0);
      Complex complex8 = Complex.valueOf(20.0, 1.5695733063696724);
      complex8.INF.divide(1.5695733063696724);
      complex8.ONE.cosh();
      Complex complex9 = Complex.valueOf(Double.NaN, 20.0);
      Complex complex10 = complex9.add(complex4);
      complex10.tan();
      complex7.add((-1.1030897183911054E-8));
      Complex complex11 = complex5.negate();
      complex11.ZERO.sinh();
      Complex complex12 = complex6.tanh();
      Complex complex13 = complex2.sqrt();
      complex13.add(812.198475112);
      Complex complex14 = complex13.tanh();
      complex14.NaN.getArgument();
      complex12.nthRoot(1348);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.multiply(667.394097634);
      Complex complex2 = complex1.subtract(complex0);
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex0.asin();
      complex3.NaN.cos();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.ZERO.conjugate();
      Complex complex6 = complex0.sinh();
      complex4.INF.add(20.0);
      complex6.I.subtract(complex1);
      complex6.acos();
      complex6.ZERO.sqrt();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex0.multiply(1235);
      complex4.toString();
      complex6.toString();
      complex7.ZERO.getArgument();
      complex7.add(426.51002);
      Complex complex9 = complex8.sqrt();
      complex9.ONE.divide(872.0);
      complex5.add(1.0833697012353316E-7);
      complex8.asin();
      complex0.abs();
      complex6.createComplex((-1.4674011002723395), 872.0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-7.935776668356575E11));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.getField();
      Complex.valueOf(3974.0, 3974.0);
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(227.80350798569972);
      complex0.cosh();
      Complex complex1 = complex0.acos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(405.029592, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.valueOf(405.029592);
      complex1.nthRoot(691);
      Complex complex3 = new Complex(348.0);
      Complex complex4 = complex3.ZERO.atan();
      complex0.multiply(complex2);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-667.394097634), (-667.394097634));
      Complex complex1 = complex0.tanh();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex2.sqrt1z();
      Complex complex3 = complex0.ZERO.atan();
      complex3.I.sqrt();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex.valueOf(405.029592, 405.029592);
      Complex complex0 = Complex.NaN;
      complex0.ZERO.atan();
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      complex1.ONE.multiply(Double.NaN);
      complex1.ZERO.log();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex.valueOf((-667.394097634));
      Complex complex0 = new Complex((-667.394097634), Double.NaN);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.394097634));
      Complex complex1 = complex0.ZERO.pow((-667.394097634));
      Complex complex2 = new Complex((-667.394097634), (-23.238369506803433));
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.tan();
      Complex complex7 = complex1.add(complex6);
      complex7.ZERO.sinh();
      Complex complex8 = new Complex((-667.394097634));
      complex6.isInfinite();
      complex7.multiply((-23.238369506803433));
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(405.029592, 405.029592);
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex(405.029592, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ZERO.log();
      Complex.valueOf(405.029592);
      Complex complex4 = complex1.negate();
      complex4.atan();
      Complex complex5 = complex3.tanh();
      complex2.multiply(1689);
      complex5.subtract(complex1);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1095.0, Double.POSITIVE_INFINITY);
      complex0.sinh();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.negate();
      complex2.NaN.tanh();
      Complex complex3 = Complex.valueOf(405.029592, 405.029592);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex1.I.hashCode();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.I.divide(Double.POSITIVE_INFINITY);
      complex6.ZERO.log();
      Complex complex7 = complex3.multiply(complex0);
      complex7.ZERO.divide(complex3);
      Complex complex8 = complex0.INF.pow(405.029592);
      Complex complex9 = complex5.subtract(complex4);
      Complex.valueOf(405.029592);
      Complex complex10 = complex5.log();
      complex9.INF.hashCode();
      complex8.tan();
      Complex complex11 = complex1.I.createComplex(8.849812639395597E201, 405.029592);
      Complex complex12 = Complex.INF;
      complex12.negate();
      complex10.tanh();
      Complex complex13 = new Complex(3951.2515405);
      complex10.isInfinite();
      complex11.exp();
      complex13.multiply(8.849812639395597E201);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(728.4615481329864, 20.0);
      Complex complex2 = complex0.multiply(complex1);
      complex0.sqrt1z();
      complex2.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(4.23719669792332E-8);
      Complex complex3 = complex0.log();
      complex3.hashCode();
      complex2.atan();
      Complex complex4 = complex2.add((-1257.4970228));
      Complex complex5 = complex0.createComplex((-2620.606), (-1.0));
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.sqrt();
      complex3.isNaN();
      Complex complex8 = complex1.pow(complex7);
      complex4.divide(complex0);
      complex1.sqrt();
      Complex complex9 = complex3.add(complex2);
      complex9.ZERO.reciprocal();
      complex3.getImaginary();
      complex5.pow(complex8);
      complex4.subtract((-2.1706266226554237E-7));
      complex0.isInfinite();
      complex1.negate();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.pow(623.5526823855595);
      complex3.getImaginary();
      complex12.asin();
      complex11.getReal();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(405.029592, 405.029592);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.divide(Double.POSITIVE_INFINITY);
      complex2.ZERO.log();
      Complex complex3 = Complex.valueOf(405.029592);
      Complex complex4 = complex2.cosh();
      Complex.valueOf(4310.587241259456);
      complex3.atan();
      complex4.add(4508.92);
      Complex complex5 = new Complex((-20.0), (-2213.94859275328));
      complex5.tanh();
      Complex complex6 = new Complex((-2411.93));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.tan();
      complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(1.0, 1.0);
      Complex complex5 = complex4.subtract((-2.8477710945673134E65));
      complex1.hashCode();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 1532.172);
      Complex complex7 = complex6.conjugate();
      complex1.reciprocal();
      Complex complex8 = complex7.divide(0.0);
      complex8.subtract(complex3);
      complex8.getImaginary();
      complex8.getArgument();
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.valueOf(1.4469041405297332, Double.NaN);
      complex9.NaN.negate();
      Complex complex11 = complex9.multiply(complex10);
      complex5.sqrt1z();
      Complex complex12 = Complex.ZERO;
      complex12.tan();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2.14168768474935));
      complex0.pow(complex1);
      complex1.getField();
      complex1.tanh();
      Complex complex2 = Complex.I;
      // Undeclared exception!
      complex2.nthRoot(2147481169);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(405.029592, (-3532.719461071483));
      complex1.multiply(complex0);
      complex0.hashCode();
      Complex complex2 = complex0.sinh();
      complex1.sin();
      Complex complex3 = complex1.divide((-154.0));
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.divide(0.0);
      Complex.valueOf((-1.735366061128156E-8));
      complex5.multiply(2560.4119);
      Complex complex6 = complex0.pow(2.3561943156461447);
      complex6.divide(complex1);
      complex4.getImaginary();
      Complex.valueOf((-0.887174263323069));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.394097634));
      Complex complex1 = complex0.ZERO.pow((-667.394097634));
      Complex complex2 = new Complex((-667.394097634), (-20.0));
      Complex complex3 = complex2.exp();
      complex3.reciprocal();
      complex1.INF.multiply(0.7617262217813369);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.add(complex4);
      complex3.pow(complex4);
      Complex complex6 = Complex.ONE;
      complex5.equals(complex0);
      complex1.tanh();
      try { 
        complex6.nthRoot((-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -24
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      complex0.ZERO.atan();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(4.23719669792332E-8);
      Complex complex3 = complex0.log();
      complex3.add(1239.33108716);
      complex0.readResolve();
      complex1.INF.cos();
      complex2.equals(complex3);
      complex1.tanh();
      complex0.nthRoot(1761);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.divide(4.23719669792332E-8);
      Complex complex4 = complex3.multiply((-2572));
      complex4.equals(complex1);
      Complex complex5 = complex2.tanh();
      complex5.INF.toString();
      complex2.nthRoot(17);
      complex0.pow((-2921.0));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.divide(4.23719669792332E-8);
      Complex complex4 = complex0.log();
      complex4.hashCode();
      Complex complex5 = complex1.negate();
      complex4.tan();
      Complex complex6 = complex5.createComplex(0.0, 8.849812639395597E201);
      complex3.subtract(Double.POSITIVE_INFINITY);
      complex4.hashCode();
      Complex complex7 = new Complex(4.23719669792332E-8, 4.588037824983901);
      complex7.conjugate();
      complex4.reciprocal();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.divide(0.3471571207046509);
      Complex complex9 = complex4.subtract(complex6);
      complex2.getImaginary();
      complex3.getArgument();
      Complex complex10 = Complex.I;
      complex10.multiply(complex8);
      complex6.sqrt1z();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5238394737243652);
      Complex complex1 = complex0.I.createComplex(2.5238394737243652, 2.5238394737243652);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.NaN.multiply(862);
      complex3.ONE.subtract(complex2);
      complex2.INF.getField();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ONE.sin();
      complex2.NaN.multiply((-1518500250));
      Complex complex6 = complex0.asin();
      complex1.add((-709.9628018812508));
      complex6.sqrt();
      Complex complex7 = complex2.tanh();
      complex7.cosh();
      complex7.equals(complex5);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(405.029592, 405.029592);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex1.I.hashCode();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.I.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex5.INF.exp();
      Complex complex9 = complex7.add(Double.POSITIVE_INFINITY);
      complex0.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex10 = Complex.ONE;
      complex4.sqrt();
      complex3.isNaN();
      complex0.pow(complex8);
      complex2.divide(complex1);
      Complex complex11 = Complex.ZERO;
      complex11.add(0.999995509814349);
      Complex complex12 = complex3.sqrt();
      complex6.add(complex3);
      complex6.getImaginary();
      complex4.pow(complex5);
      complex12.subtract(47.3889244678);
      complex3.isInfinite();
      complex11.divide(complex9);
      complex2.pow(47.3889244678);
      complex5.getImaginary();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.735366061128156E-8), (-0.999995509814349));
      Complex complex2 = complex1.exp();
      complex2.reciprocal();
      Complex complex3 = Complex.NaN;
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.394097634));
      Complex complex1 = complex0.ZERO.pow((-667.394097634));
      Complex complex2 = complex1.ZERO.pow((-667.394097634));
      Complex complex3 = complex0.NaN.multiply((-1484));
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.ZERO.multiply(complex2);
      Complex complex6 = complex5.log();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.divide(complex4);
      Complex complex9 = Complex.ONE;
      complex9.atan();
      complex0.pow(491.72612);
      complex3.subtract(complex8);
      Complex.valueOf((-675.47951996));
      Complex complex10 = complex0.log();
      complex2.hashCode();
      Complex complex11 = complex7.negate();
      Complex complex12 = new Complex((-0.7615941559557649), 491.72612);
      complex12.tan();
      Complex complex13 = complex6.multiply(561);
      Complex complex14 = complex10.cosh();
      Complex complex15 = Complex.I;
      complex1.asin();
      complex9.divide(complex11);
      complex13.pow(491.72612);
      complex14.getImaginary();
      complex15.asin();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      complex0.hashCode();
      complex0.pow((-88.0759572356));
      Complex complex1 = complex0.pow((-265.43713));
      int int0 = (-1484);
      Complex complex2 = complex1.multiply(1498);
      Complex complex3 = complex0.atan();
      complex3.multiply(complex0);
      double double0 = 0.0;
      Complex complex4 = Complex.valueOf((-88.0759572356));
      double double1 = (-66.84442618645);
      complex4.divide((-66.84442618645));
      complex3.log();
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(405.029592, 405.029592);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex1.I.hashCode();
      Complex complex5 = complex3.sinh();
      complex5.I.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.INF;
      complex5.INF.exp();
      Complex complex7 = complex3.multiply(complex0);
      Complex complex8 = complex7.ZERO.divide(complex3);
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.INF.pow(405.029592);
      complex5.subtract(complex4);
      complex10.pow(complex6);
      complex9.divide(2560.4119);
      Complex complex11 = Complex.valueOf(405.029592);
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex1.pow(0.0);
      complex8.divide(complex4);
      complex11.getImaginary();
      Complex.valueOf((-677.1217940494));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 0.001680873169631167);
      Complex complex1 = complex0.divide(1.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.multiply(complex1);
      Complex complex6 = complex1.divide(complex3);
      Complex complex7 = complex0.atan();
      Complex complex8 = complex7.pow((-954.0));
      Complex complex9 = complex8.subtract(complex7);
      Complex.valueOf((-954.0));
      Complex complex10 = new Complex(0.001680873169631167, 0.001680873169631167);
      complex6.hashCode();
      complex2.negate();
      Complex complex11 = complex5.tan();
      Complex complex12 = complex10.createComplex((-2620.606), (-954.0));
      complex8.subtract(0.5433003902435303);
      complex8.hashCode();
      complex12.conjugate();
      complex3.reciprocal();
      complex11.divide((-1.0));
      Complex complex13 = complex8.subtract(complex3);
      complex13.getImaginary();
      complex9.getArgument();
      Complex complex14 = Complex.INF;
      Complex complex15 = new Complex((-1.0336297442701872E100));
      complex5.sqrt1z();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-667.394097634), (-667.394097634));
      Complex complex1 = complex0.multiply(743);
      Complex complex2 = complex0.NaN.cosh();
      complex2.pow(2189.939);
      complex2.INF.cos();
      Complex complex3 = complex1.ONE.pow(5651.78501728);
      Complex complex4 = Complex.valueOf((double) 743, (double) 743);
      Complex complex5 = complex1.subtract(complex4);
      Complex.valueOf(1.3128328733015537E157);
      complex1.ONE.atan();
      complex1.ONE.toString();
      Complex complex6 = complex1.exp();
      complex6.cosh();
      complex5.divide(complex1);
      complex5.getField();
      complex5.reciprocal();
      complex3.multiply(743);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-719.09319), (-719.09319));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-719.09319), (-719.09319));
      Complex complex3 = complex1.multiply(complex2);
      complex3.hashCode();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.divide((-719.09319));
      Complex complex6 = Complex.ONE;
      complex6.log();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex5.multiply(complex6);
      complex2.divide(complex4);
      complex6.atan();
      Complex complex9 = complex1.pow((-590.0));
      Complex complex10 = complex2.subtract(complex8);
      Complex complex11 = Complex.valueOf((-1221.45584168));
      Complex complex12 = complex9.log();
      complex11.hashCode();
      complex4.negate();
      Complex complex13 = complex9.tan();
      complex3.multiply(1754);
      complex12.cosh();
      Complex complex14 = Complex.I;
      complex14.asin();
      complex10.divide(complex14);
      complex7.pow(0.9999999152560697);
      complex13.getImaginary();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1484));
      Complex complex2 = complex1.atan();
      Complex complex3 = new Complex((-1484), Double.NEGATIVE_INFINITY);
      complex2.multiply(complex3);
      Complex complex4 = complex1.divide((double) (-1484));
      complex4.log();
      Complex complex5 = Complex.valueOf(1783.8946736, 0.0);
      complex2.pow(complex5);
      Complex complex6 = complex5.divide(1783.8946736);
      Complex complex7 = Complex.valueOf(2560.4119);
      Complex complex8 = complex7.multiply((double) (-1484));
      complex2.pow(1745.1);
      complex5.divide(complex6);
      complex8.getImaginary();
      Complex.valueOf(0.0);
      Complex complex9 = complex8.tanh();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.divide(4.23719669792332E-8);
      Complex complex4 = complex0.log();
      complex4.hashCode();
      complex3.atan();
      Complex complex5 = complex3.add((-1257.4970228));
      Complex complex6 = complex0.createComplex((-2620.606), (-1.0));
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.sqrt();
      complex4.isNaN();
      Complex complex9 = complex2.pow(complex8);
      complex5.divide(complex0);
      complex9.add((-1.0));
      complex2.sqrt();
      complex4.add(complex3);
      complex4.getImaginary();
      complex6.pow(complex9);
      complex5.subtract((-2.1706266226554237E-7));
      complex1.isInfinite();
      complex2.negate();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.pow(623.5526823855595);
      complex4.getImaginary();
      complex12.asin();
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-719.09319), (-719.09319));
      complex0.getImaginary();
      Complex complex1 = complex0.tan();
      complex1.pow(complex0);
      complex1.getField();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.valueOf((-719.09319));
      Complex complex4 = complex1.multiply((-4271));
      complex3.atan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.createComplex((-719.09319), Double.NaN);
      complex2.add(complex4);
      complex1.toString();
      complex1.exp();
      Complex complex7 = complex5.reciprocal();
      complex7.conjugate();
      Complex complex8 = complex6.conjugate();
      complex1.subtract(complex8);
      complex2.sqrt1z();
      complex5.negate();
      complex4.cosh();
      Complex.valueOf((double) 988);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.atan();
      Complex complex11 = complex10.tanh();
      complex11.I.add(complex7);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex1.sinh();
      Complex complex2 = new Complex((-1806.43));
      Complex complex3 = complex2.acos();
      complex0.abs();
      Complex complex4 = new Complex((-846.3752), (-846.3752));
      complex4.multiply((-1.0));
      Complex complex5 = Complex.valueOf(1.0, (-2101.520012848517));
      Complex complex6 = complex2.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex0.subtract(complex7);
      complex3.multiply(complex8);
      Complex complex9 = complex4.acos();
      complex0.multiply(0);
      complex2.cosh();
      complex8.asin();
      complex4.divide(complex9);
      complex0.pow((-1.0));
      complex5.getImaginary();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.394097634));
      Complex complex1 = complex0.ZERO.pow((-667.394097634));
      complex0.NaN.multiply((-1484));
      Complex complex2 = complex0.atan();
      complex2.ZERO.multiply(complex1);
      Complex complex3 = complex2.I.divide(0.0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.NaN.pow(complex0);
      complex3.divide(2560.4119);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex3.I.multiply(0.0);
      complex5.asin();
      complex6.divide(complex7);
      complex7.pow(0.01635374718568272);
      complex5.getImaginary();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex0.sqrt1z();
      complex0.sinh();
      Complex complex3 = complex0.ZERO.multiply((-1951));
      Complex complex4 = complex0.reciprocal();
      complex4.cos();
      Complex complex5 = complex3.add(complex1);
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
      Complex.valueOf((-4116.0), (double) (-1951));
      Complex.valueOf(3.4766016960929846E-4);
      complex2.getImaginary();
      Complex complex6 = Complex.NaN;
      complex6.log();
      Complex complex7 = Complex.INF;
      complex7.multiply(Double.NEGATIVE_INFINITY);
      Object object1 = new Object();
      complex1.equals(object1);
      complex2.tanh();
      complex0.divide(258.6);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      complex0.multiply((-2165.2082031424));
      Complex.valueOf(Double.NaN, (-2165.2082031424));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ZERO;
      complex1.subtract(complex2);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.I;
      complex2.acos();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.INF;
      complex4.acos();
      complex0.abs();
      Complex complex5 = Complex.INF;
      Complex.valueOf(2343.3029, 3.185593134822192E16);
      complex3.conjugate();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.subtract(complex1);
      Complex complex8 = complex6.acos();
      complex8.multiply((-33));
      Complex complex9 = new Complex(2343.3029, 3.185593134822192E16);
      complex9.cosh();
      Complex complex10 = complex0.asin();
      complex10.divide(complex7);
      Complex complex11 = Complex.NaN;
      complex11.pow(3751.2);
      complex6.getImaginary();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1172.9074176314045, 1172.9074176314045);
      complex0.I.hashCode();
      Complex complex1 = complex0.log();
      complex0.cos();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ONE.add(complex1);
      complex1.getReal();
      complex2.INF.sqrt1z();
      Complex complex4 = complex1.cos();
      complex1.createComplex(1172.9074176314045, 6.283185307179586);
      complex2.ONE.reciprocal();
      complex1.exp();
      Complex.valueOf(7.413814507968016, Double.POSITIVE_INFINITY);
      complex4.getField();
      complex4.divide(6.283185307179586);
      try { 
        complex3.nthRoot((-486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -486
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(559.067067322197, 2639.62428);
      Complex complex1 = complex0.reciprocal();
      complex1.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.tanh();
      Complex.valueOf(559.067067322197, (-2622.713122749502));
      complex3.I.log();
      Complex.valueOf(6.283185307179586, 559.067067322197);
      complex0.multiply(complex2);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(1034190.0318087523);
      Complex complex1 = complex0.INF.multiply(1034190.0318087523);
      complex1.INF.abs();
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex0.INF.tan();
      Complex complex3 = complex2.NaN.pow(20.0);
      Complex complex4 = complex3.ZERO.add(1034190.0318087523);
      complex3.ONE.exp();
      complex0.readResolve();
      complex2.tan();
      Complex complex5 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.valueOf((-1.0), (-1.0));
      complex0.add(complex5);
      complex6.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-719.09319), (-719.09319));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.acos();
      complex1.abs();
      complex0.multiply(7.973780994623746);
      Complex complex4 = Complex.valueOf(2343.3029, (-719.09319));
      complex3.conjugate();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex3.multiply(complex2);
      complex3.acos();
      complex2.multiply((-33));
      Complex complex7 = complex3.cosh();
      complex6.asin();
      Complex complex8 = complex4.divide(complex5);
      complex3.pow(1.0431875573076199E-7);
      complex8.getImaginary();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.divide(4.23719669792332E-8);
      Complex complex4 = complex0.log();
      complex4.hashCode();
      complex3.atan();
      Complex complex5 = complex3.add((-1257.4970228));
      Complex complex6 = complex0.createComplex((-2620.606), (-1.0));
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.sqrt();
      complex4.isNaN();
      Complex complex9 = complex2.pow(complex8);
      complex5.divide(complex0);
      complex9.add((-1.0));
      complex2.sqrt();
      Complex complex10 = complex4.add(complex3);
      complex4.getImaginary();
      complex6.pow(complex9);
      complex5.subtract((-2.1706266226554237E-7));
      complex1.isInfinite();
      complex2.negate();
      Complex complex11 = Complex.ONE;
      complex11.nthRoot(1765);
      complex10.getImaginary();
      Complex.valueOf(5.58656252899437E-8);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.getImaginary();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.pow(complex0);
      complex0.getField();
      complex1.tanh();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex4.multiply(988);
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.createComplex(1.0, 988);
      complex6.add(complex5);
      complex4.toString();
      complex0.exp();
      complex3.reciprocal();
      Complex complex9 = complex3.conjugate();
      complex8.conjugate();
      complex2.subtract(complex8);
      complex7.sqrt1z();
      complex8.negate();
      complex9.cosh();
      Complex complex10 = Complex.valueOf(15.8924971120534);
      complex10.atan();
      complex10.tanh();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.cos();
      complex0.nthRoot(1193);
      Complex complex3 = Complex.valueOf((double) 1193);
      Complex complex4 = complex3.NaN.cosh();
      complex4.NaN.readResolve();
      complex1.isNaN();
      complex1.getArgument();
      complex1.pow((double) 1193);
      complex2.getArgument();
      Complex complex5 = complex2.cosh();
      complex5.NaN.tanh();
      complex5.sqrt1z();
      Complex complex6 = Complex.valueOf(Double.NaN, 1.0);
      complex6.add((double) 1193);
      complex0.cosh();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(2.4175248449172035E-87, 2.4175248449172035E-87);
      Complex complex3 = complex0.INF.createComplex(0.0, 4.135457669031131E282);
      complex2.ZERO.multiply(0.0);
      complex0.INF.subtract(2.4175248449172035E-87);
      complex1.toString();
      complex3.tan();
      Complex complex4 = Complex.valueOf(31.582346136435);
      complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.394097634));
      Complex complex1 = complex0.ZERO.pow((-667.394097634));
      Complex complex2 = complex1.ZERO.pow((-667.394097634));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      Complex.valueOf(0.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.createComplex(1.0431875573076199E-7, 6.283185307179586);
      Complex complex8 = complex1.multiply(0);
      complex3.cosh();
      complex7.cos();
      Complex complex9 = complex8.acos();
      complex3.tanh();
      Complex complex10 = Complex.valueOf((-268.0161839071854));
      complex10.reciprocal();
      Complex complex11 = Complex.INF;
      complex11.sinh();
      complex10.sqrt1z();
      complex0.getField();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.cosh();
      complex13.asin();
      Complex complex14 = Complex.I;
      complex14.add(complex9);
      complex14.conjugate();
      complex3.toString();
      Complex complex15 = complex4.divide(4017.3502707864);
      complex15.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.atan();
      Complex complex1 = complex0.ONE.pow(1012.735);
      Complex complex2 = complex1.NaN.divide(1012.735);
      Complex complex3 = Complex.valueOf((-3935.25792973875));
      complex3.I.add((-1848.33510497131));
      Complex complex4 = complex3.NaN.add(1012.735);
      Complex complex5 = complex0.divide((-968.17));
      complex5.log();
      complex2.pow(complex4);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.divide((-1848.33510497131));
      Complex.valueOf(4.588037824983901);
      Complex complex8 = Complex.ZERO;
      complex6.ONE.pow(complex1);
      Complex complex9 = complex8.multiply((-0.35157782121607994));
      Complex complex10 = new Complex((-968.17), (-1848.33510497131));
      complex10.pow(0.0);
      Complex complex11 = complex3.divide(complex9);
      complex0.getImaginary();
      Complex.valueOf((-1.0));
      complex6.tanh();
      complex11.tanh();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.atan();
      Complex complex1 = complex0.pow(1012.735);
      Complex complex2 = complex0.divide(2612.335861);
      Complex.valueOf(1012.735);
      Complex complex3 = Complex.valueOf(0.5574077246549021);
      Complex complex4 = complex3.add(0.5574077246549021);
      complex1.add(0.0);
      Complex complex5 = Complex.valueOf((-1848.33510497131));
      complex2.reciprocal();
      Complex complex6 = complex2.createComplex((-2.193190669794277E-108), (-3935.25792973875));
      complex0.NaN.reciprocal();
      Complex complex7 = complex0.multiply((-1319));
      complex7.cosh();
      Complex complex8 = complex2.cos();
      complex8.acos();
      complex0.tanh();
      Complex complex9 = complex4.reciprocal();
      complex6.sinh();
      complex3.sqrt1z();
      complex5.getField();
      Complex complex10 = complex6.cosh();
      complex7.asin();
      Complex complex11 = complex6.add(complex10);
      complex11.ONE.getArgument();
      complex9.conjugate();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.pow(1012.735);
      Complex complex3 = complex0.divide(3280.6927);
      Complex.valueOf(1012.735);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.add((-3935.25792973875));
      complex2.add(2214.4192269244);
      Complex complex6 = Complex.valueOf(3280.6927);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex3.createComplex(20.0, 2.681370735168457);
      Complex complex9 = complex0.multiply(17);
      Complex complex10 = complex7.cosh();
      Complex complex11 = complex5.cos();
      Complex complex12 = complex8.acos();
      complex12.tanh();
      complex1.reciprocal();
      complex10.sinh();
      complex8.sqrt1z();
      complex1.getField();
      complex11.cosh();
      complex9.asin();
      complex2.add(complex9);
      Complex complex13 = new Complex(2214.4192269244, (-1319));
      complex13.conjugate();
      complex6.toString();
      complex11.divide(46.115920172);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.createComplex((-1044.408072983957), 1.747018414872141E-8);
      complex4.hashCode();
      complex0.divide(complex2);
      complex1.sqrt1z();
      complex0.divide(complex4);
      complex1.acos();
      Complex.valueOf(0.0, 1842.54339);
      Complex complex5 = complex1.cos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.multiply(complex2);
      complex3.getArgument();
      complex5.isInfinite();
      Complex complex8 = complex6.log();
      complex8.INF.toString();
      Complex complex9 = complex3.divide(complex6);
      complex6.multiply(5203);
      complex9.tanh();
      complex4.reciprocal();
      Object object0 = complex1.readResolve();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.tan();
      complex0.I.cosh();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.ZERO.subtract((-4473.438560426102));
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.NaN;
      complex5.isInfinite();
      complex4.isNaN();
      Complex complex6 = complex0.sqrt1z();
      complex6.getImaginary();
      Complex complex7 = Complex.ZERO;
      complex7.pow(0.0);
      complex6.subtract(complex7);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.getImaginary();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ONE.pow(complex2);
      complex0.getField();
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.I.multiply(988);
      complex4.INF.atan();
      Complex complex6 = complex5.ONE.createComplex(15.8924971120534, 0.0);
      complex6.ONE.add(complex4);
      complex2.sinh();
      complex2.toString();
      complex5.NaN.exp();
      complex3.reciprocal();
      complex5.conjugate();
      Complex.valueOf(149.629, 7.753690709912764E-96);
      Complex.valueOf(Double.NaN);
      complex3.getImaginary();
      complex6.log();
      complex1.multiply(1.0);
      Complex complex7 = new Complex(0.5403023058681398, 1.0);
      complex7.equals("(0.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      complex0.sqrt1z();
      complex0.sinh();
      Complex complex3 = complex0.ZERO.multiply((-1951));
      Complex complex4 = complex0.reciprocal();
      complex4.cos();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = (Complex)complex1.readResolve();
      complex5.equals(complex6);
      Complex complex7 = complex3.conjugate();
      complex3.subtract(complex5);
      complex0.sqrt1z();
      complex7.negate();
      Complex complex8 = complex6.cosh();
      complex4.atan();
      complex2.tanh();
      complex8.add(906.811646);
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      complex1.ZERO.negate();
      Complex complex2 = Complex.valueOf(405.029592, 405.029592);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.I.hashCode();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.I.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.log();
      complex4.INF.exp();
      Complex complex7 = complex2.multiply(complex0);
      complex7.ZERO.divide(complex2);
      Complex complex8 = complex0.atan();
      complex8.INF.pow(405.029592);
      Complex complex9 = complex4.subtract(complex3);
      Complex.valueOf(405.029592);
      Complex complex10 = complex4.log();
      complex9.INF.hashCode();
      complex4.negate();
      Complex complex11 = complex9.I.tan();
      complex5.multiply(561);
      complex2.cosh();
      Complex complex12 = Complex.I;
      complex12.asin();
      complex10.divide(complex11);
      complex6.pow(Double.POSITIVE_INFINITY);
      complex0.getImaginary();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      complex0.NaN.sinh();
      Complex complex2 = complex1.acos();
      complex2.ZERO.abs();
      Complex complex3 = complex1.ZERO.multiply(0.0);
      Complex complex4 = Complex.valueOf(2343.3029, 1289.8878373857);
      Complex complex5 = complex3.INF.conjugate();
      Complex complex6 = complex2.I.subtract(complex5);
      Complex complex7 = complex0.multiply(complex1);
      complex1.acos();
      Complex complex8 = complex4.createComplex(0.0, 0.0);
      Complex complex9 = complex7.subtract(3193.568185);
      complex1.hashCode();
      Complex complex10 = complex8.conjugate();
      Complex complex11 = Complex.valueOf(20.0);
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = Complex.valueOf(0.0, 2343.3029);
      complex13.subtract(complex8);
      complex6.getImaginary();
      complex9.getArgument();
      complex10.multiply(complex3);
      Complex complex14 = Complex.ZERO;
      complex14.sqrt1z();
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      complex1.NaN.createComplex((-1158.905), 0.0);
      complex0.sqrt1z();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply(0);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.createComplex(0.0, 0.0);
      Complex complex6 = complex3.add(complex5);
      complex2.sinh();
      complex4.toString();
      Complex complex7 = complex1.exp();
      Complex complex8 = Complex.NaN;
      complex8.reciprocal();
      Complex complex9 = complex7.conjugate();
      complex8.conjugate();
      Complex complex10 = Complex.valueOf((double) 0, 503.2755);
      complex3.subtract(complex10);
      complex2.sqrt1z();
      Complex complex11 = Complex.valueOf((-5914.15127116175), (-1183.75));
      complex11.negate();
      complex9.cosh();
      complex6.atan();
      complex3.tanh();
      Complex complex12 = Complex.INF;
      complex12.add((-307.2220419948965));
      Complex complex13 = Complex.NaN;
      complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      complex1.NaN.createComplex((-1158.905), 0.0);
      complex0.sqrt1z();
      Complex complex2 = complex0.sinh();
      Complex complex3 = new Complex((-1158.905), (-1158.905));
      Complex complex4 = complex0.reciprocal();
      complex4.cos();
      Complex complex5 = complex3.add(complex1);
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
      Complex complex6 = Complex.valueOf((-1243.0), (-1243.0));
      Complex.valueOf(1950.0690285603375);
      complex6.getImaginary();
      Complex complex7 = complex2.sinh();
      complex4.readResolve();
      complex7.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-719.09319), (-719.09319));
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex0.getField();
      Complex complex2 = new Complex(2045.33149307517, 0.0);
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex2.ZERO.subtract((-1831.9547489));
      complex1.I.abs();
      complex3.tanh();
      Complex.valueOf((-1831.9547489));
      Complex complex5 = complex0.divide(complex2);
      complex3.log();
      complex5.multiply(5.181801397059486E292);
      complex4.equals(complex0);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.NaN.acos();
      complex2.ZERO.atan();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = Complex.valueOf((-3935.25792973875));
      complex0.add((-3935.25792973875));
      Complex complex5 = complex3.add(2929.6433152);
      Complex.valueOf(2438.170216222946);
      complex2.reciprocal();
      complex0.createComplex((-1.0), (-2650.931779));
      Complex complex6 = complex5.multiply((-1319));
      Complex complex7 = complex0.cosh();
      complex1.cos();
      complex3.acos();
      complex3.tanh();
      Complex complex8 = complex6.reciprocal();
      complex8.sinh();
      Complex complex9 = complex4.sqrt1z();
      complex5.getField();
      complex1.cosh();
      Complex complex10 = Complex.NaN;
      complex10.asin();
      Complex complex11 = Complex.valueOf((-0.7501829062746569));
      Complex complex12 = Complex.I;
      complex11.add(complex12);
      complex11.conjugate();
      complex9.toString();
      complex7.divide(562.79906880385);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(2137.0);
      Complex complex1 = complex0.cos();
      complex1.divide(complex0);
      complex0.tan();
      Complex complex2 = complex0.tanh();
      complex2.ONE.hashCode();
      Complex complex3 = Complex.valueOf(1.4521887058451231E-183, 1.4521887058451231E-183);
      Complex complex4 = Complex.valueOf(2137.0, 878.8659175);
      Complex complex5 = Complex.valueOf(0.0, (-311.271));
      Complex complex6 = complex4.I.pow((-523.4896572806949));
      complex6.ZERO.createComplex(1.4521887058451231E-183, 0.0);
      Complex complex7 = complex3.multiply(1934.9495994599702);
      complex7.multiply(1.4521887058451231E-183);
      complex1.toString();
      complex6.toString();
      complex1.negate();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.INF.acos();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex0.log();
      complex1.getField();
      complex3.equals(complex1);
      Complex complex4 = complex2.subtract(3257.67);
      complex4.getField();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex3.asin();
      complex6.I.toString();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex0.add(complex7);
      Complex complex9 = complex8.ONE.sinh();
      complex9.I.add(complex6);
      complex7.ONE.hashCode();
      Complex complex10 = complex7.tan();
      complex7.ZERO.tan();
      complex8.sqrt1z();
      complex10.getField();
      complex6.sqrt();
      complex3.createComplex(480.7428747003975, (-1310.5053776225));
      complex5.createComplex(0.0, (-1310.5053776225));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(395.4432365478);
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(0.5500838756561279, 395.4432365478);
      complex0.getReal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = complex2.NaN.pow(complex3);
      complex4.INF.pow(complex0);
      Complex complex5 = complex0.multiply((-354));
      complex0.I.pow(0.0);
      Complex complex6 = complex5.NaN.subtract(complex1);
      complex6.I.readResolve();
      complex5.I.abs();
      complex1.ONE.nthRoot(1);
      Complex complex7 = complex3.negate();
      complex7.sin();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.hashCode();
      complex1.ZERO.negate();
      Complex complex2 = Complex.valueOf(405.029592, 405.029592);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      complex1.I.hashCode();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.I.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.ZERO.log();
      complex4.INF.exp();
      Complex complex7 = complex2.multiply(complex0);
      complex7.ZERO.divide(complex2);
      Complex complex8 = complex0.atan();
      Complex complex9 = complex8.INF.pow(405.029592);
      Complex complex10 = complex4.subtract(complex3);
      Complex.valueOf(405.029592);
      Complex complex11 = complex4.log();
      complex10.INF.hashCode();
      Complex complex12 = complex4.negate();
      complex10.I.tan();
      Complex complex13 = complex12.I.createComplex(8.849812639395597E201, 405.029592);
      complex11.ONE.subtract(0.0);
      complex13.I.hashCode();
      Complex complex14 = complex10.ONE.conjugate();
      complex9.reciprocal();
      complex10.divide(8.849812639395597E201);
      Complex complex15 = complex6.subtract(complex0);
      complex15.getImaginary();
      complex11.getArgument();
      complex14.multiply(complex7);
      complex15.sqrt1z();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex2.NaN.tan();
      Complex complex6 = complex1.divide(1363.07203714);
      Complex complex7 = complex1.log();
      complex7.hashCode();
      Complex complex8 = complex7.atan();
      complex5.I.add((-1257.4970228));
      Complex complex9 = complex8.I.createComplex(6.283185307179586, 6.283185307179586);
      complex8.sqrt();
      complex6.isNaN();
      Complex complex10 = complex0.pow(complex9);
      complex1.INF.divide(complex8);
      complex2.ONE.add((-2451.3329));
      Complex complex11 = complex0.sqrt();
      complex6.I.add(complex5);
      complex9.getImaginary();
      complex3.pow(complex4);
      complex10.subtract((-1917.5924507));
      complex6.isInfinite();
      complex11.negate();
      complex1.nthRoot(1765);
      complex1.getImaginary();
      Complex.valueOf((-2451.3329));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(5.826233477413577E-8);
      complex0.NaN.subtract(complex1);
      complex0.reciprocal();
      complex0.subtract(49.078921989);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ZERO.multiply(1775);
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = complex2.NaN.asin();
      Complex complex6 = complex5.NaN.subtract((double) 1775);
      complex6.I.exp();
      Complex complex7 = complex0.negate();
      complex1.ONE.getArgument();
      complex2.sqrt1z();
      Complex complex8 = complex3.divide(complex7);
      complex8.sinh();
      complex1.hashCode();
      Complex complex9 = complex0.INF.pow(0.0);
      complex9.ONE.sinh();
      complex4.hashCode();
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.divide(0.0);
      Complex complex4 = complex2.ONE.add(0.0);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex6.ONE.log();
      complex7.NaN.divide((-20.0));
      complex7.INF.reciprocal();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.reciprocal();
      complex9.NaN.multiply(46.0);
      Complex complex10 = complex8.INF.exp();
      Complex complex11 = Complex.valueOf(0.0, 0.0);
      complex11.INF.sinh();
      Complex complex12 = complex0.exp();
      complex12.ONE.negate();
      complex1.ZERO.asin();
      Complex complex13 = complex12.I.negate();
      Complex complex14 = complex13.ZERO.add(complex3);
      complex14.I.sin();
      complex13.I.multiply(complex6);
      complex12.toString();
      complex8.getField();
      complex5.multiply(1);
      complex10.multiply(complex8);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.cosh();
      Complex complex1 = complex0.INF.reciprocal();
      complex1.ZERO.add(complex0);
      complex0.multiply(1875);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = Complex.valueOf((double) 1875);
      Complex complex5 = Complex.ONE;
      complex2.INF.acos();
      complex4.ONE.atan();
      Complex complex6 = complex0.subtract(complex5);
      complex6.getArgument();
      Complex complex7 = complex4.ZERO.subtract((double) 1875);
      complex5.abs();
      complex0.isNaN();
      Complex complex8 = complex4.tanh();
      complex3.multiply((-870.0));
      complex8.add(complex1);
      complex5.getField();
      complex7.log();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.getImaginary();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ONE.pow(complex2);
      complex0.getField();
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.I.multiply(988);
      complex4.INF.atan();
      Complex complex6 = complex5.ONE.createComplex(15.8924971120534, 0.0);
      complex6.ONE.add(complex4);
      Complex complex7 = complex2.sinh();
      complex2.toString();
      complex5.NaN.exp();
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex5.conjugate();
      complex0.conjugate();
      Complex complex10 = complex8.subtract(complex0);
      complex7.ONE.sqrt1z();
      Complex complex11 = complex10.negate();
      complex11.INF.cosh();
      complex5.atan();
      complex9.tanh();
      complex7.add(0.0);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.sqrt1z();
      complex2.INF.cos();
      complex1.NaN.tan();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = (-1197.27239667945);
      Complex complex0 = new Complex((-1197.27239667945));
      try { 
        complex0.NaN.nthRoot((-3115));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,115
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.NaN.multiply(1140);
      Complex complex2 = complex1.I.multiply((double) 1140);
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.log();
      Complex.valueOf((-760.22), (-9.944393412663547E-8));
      Complex.valueOf((-9.944393412663547E-8));
      Complex complex4 = complex3.sin();
      complex4.I.acos();
      complex2.getArgument();
      complex1.getReal();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.394097634));
      Complex complex1 = complex0.ZERO.pow((-667.394097634));
      Complex complex2 = complex1.ZERO.pow((-667.394097634));
      complex0.NaN.multiply((-1484));
      Complex complex3 = complex0.atan();
      complex3.ZERO.multiply(complex2);
      Complex complex4 = complex3.I.divide(0.0);
      Complex complex5 = complex0.log();
      complex5.NaN.pow(complex0);
      complex4.divide(2560.4119);
      Complex.valueOf(0.0);
      complex4.I.multiply(0.0);
      Complex complex6 = complex0.pow((-667.394097634));
      complex6.ZERO.divide(complex2);
      complex4.getImaginary();
      Complex.valueOf((-2263.51703871634));
      complex3.tanh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(378.226, 0.0);
      complex0.getImaginary();
      Complex.valueOf(1.0, 0.40741634368896484);
      Complex complex1 = complex0.tan();
      complex1.abs();
      Complex complex2 = complex0.NaN.divide(0.40741634368896484);
      Complex complex3 = complex2.ONE.negate();
      complex3.ONE.toString();
      complex1.ZERO.cos();
      Complex complex4 = complex1.ONE.subtract((-2042.398253));
      complex0.sin();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      complex2.isNaN();
      complex5.nthRoot(3561);
      Complex complex7 = complex4.ONE.subtract(complex2);
      complex7.I.getArgument();
      Complex complex8 = complex1.subtract(2.86412266394654);
      Complex complex9 = complex4.atan();
      complex9.log();
      complex6.multiply((-2042.398253));
      complex3.negate();
      complex5.add(0.0);
      complex8.cosh();
      complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      complex0.NaN.sinh();
      Complex complex2 = complex1.acos();
      complex2.ZERO.abs();
      Complex complex3 = complex1.ZERO.multiply(0.0);
      Complex.valueOf(2343.3029, 1289.8878373857);
      Complex complex4 = complex3.INF.conjugate();
      complex2.I.subtract(complex4);
      Complex complex5 = complex0.multiply(complex1);
      complex1.acos();
      Complex complex6 = complex5.I.multiply((-33));
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex7.I.asin();
      complex8.ZERO.divide(complex5);
      complex0.pow(0.0);
      complex6.getImaginary();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.valueOf(1.0, 0.0);
      complex1.conjugate();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.I.sqrt();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex3.ONE.exp();
      complex3.ONE.toString();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.multiply((-4086.221168988));
      Complex complex8 = complex7.cosh();
      complex5.I.divide(0.0);
      Complex complex9 = complex8.NaN.reciprocal();
      complex6.getImaginary();
      complex2.isNaN();
      complex0.readResolve();
      complex0.pow(0.0);
      Complex.valueOf(2028.0485);
      complex5.readResolve();
      complex7.pow(complex9);
      Complex.valueOf(0.0, 0.0);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex1.nthRoot(17);
      Complex complex2 = complex1.INF.sqrt();
      complex1.INF.nthRoot(37);
      complex0.I.toString();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.sqrt1z();
      complex3.createComplex(37, (-281.809));
      complex0.INF.sin();
      Complex complex6 = complex4.cosh();
      complex6.ZERO.asin();
      complex5.isInfinite();
      complex5.I.conjugate();
      complex6.equals((Object) null);
      complex2.ZERO.abs();
      Complex complex7 = complex5.pow((double) 37);
      Complex complex8 = complex7.ONE.createComplex(37, 1204.073);
      complex8.NaN.sqrt1z();
      complex7.divide(Double.NaN);
      Complex complex9 = complex5.acos();
      complex6.INF.negate();
      complex9.ONE.sin();
      Complex complex10 = complex6.add(916.0);
      complex3.toString();
      complex0.subtract(complex8);
      Complex complex11 = complex10.multiply(complex3);
      complex2.toString();
      complex9.pow(complex8);
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      complex2.ONE.getArgument();
      Complex complex3 = complex1.INF.divide(0.0);
      Complex complex4 = complex3.NaN.createComplex(0.0, 655.997963325603);
      Complex complex5 = complex3.I.divide(0.0);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.ONE.readResolve();
      Complex complex7 = complex5.NaN.add(complex2);
      Complex complex8 = complex7.INF.cosh();
      Complex complex9 = complex8.ONE.multiply((-2850.77980256353));
      complex9.toString();
      complex5.ZERO.getArgument();
      Complex complex10 = complex8.add(complex2);
      complex10.INF.getField();
      complex0.equals(complex1);
      complex3.abs();
      Complex complex11 = complex2.ZERO.atan();
      Complex complex12 = complex1.I.multiply(complex2);
      complex3.getField();
      Complex complex13 = complex2.ZERO.reciprocal();
      complex3.getImaginary();
      complex4.NaN.subtract(Double.NaN);
      complex2.getField();
      Complex complex14 = complex12.exp();
      Complex complex15 = complex13.pow(complex14);
      complex11.isNaN();
      complex4.log();
      complex5.abs();
      complex15.isNaN();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-721.313725485), (-4021.8292728));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.ZERO.atan();
      complex4.I.add(complex3);
      complex4.NaN.multiply(complex1);
      complex1.NaN.hashCode();
      Complex complex5 = complex0.ONE.sqrt1z();
      complex0.I.hashCode();
      Complex complex6 = complex1.ZERO.tanh();
      complex5.I.add(0.02412080392241478);
      complex0.sqrt();
      complex5.nthRoot(2611);
      complex5.subtract((-3506.24068428433));
      Complex complex7 = Complex.ZERO;
      complex7.sinh();
      complex7.I.nthRoot(7);
      complex1.add(complex7);
      complex4.getImaginary();
      complex6.multiply(5542.46033842681);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.I.createComplex(0.0, 1.0);
      Complex complex3 = complex0.divide(1028.6601298);
      Complex complex4 = complex0.exp();
      complex4.INF.readResolve();
      Complex complex5 = complex3.ONE.createComplex((-1.0), 1028.6601298);
      complex5.NaN.asin();
      Complex complex6 = complex5.ONE.pow(complex4);
      Complex complex7 = complex6.ONE.negate();
      Complex complex8 = complex0.ONE.sin();
      complex0.NaN.cosh();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex9.ONE.divide(complex4);
      complex9.ZERO.multiply(2644.0);
      complex9.divide(complex3);
      complex1.add(complex8);
      Complex complex11 = Complex.valueOf(0.0, (-917.63922816671));
      Complex complex12 = complex11.tan();
      complex10.subtract(0.0);
      complex7.hashCode();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3842.2, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cosh();
      complex0.INF.tan();
      complex1.INF.readResolve();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.multiply(3842.2);
      Complex complex4 = complex3.atan();
      complex4.NaN.createComplex(1522.17169475, 3842.2);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex4.log();
      complex4.NaN.multiply(complex0);
      complex6.NaN.exp();
      Complex.valueOf(0.0);
      Complex complex7 = complex1.negate();
      complex7.ZERO.nthRoot(37);
      complex4.abs();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex2.sin();
      complex9.INF.pow(0.0);
      Complex complex10 = complex8.multiply(3003);
      complex5.sqrt1z();
      Complex complex11 = complex10.cos();
      complex11.getField();
      complex3.reciprocal();
      complex3.negate();
      Complex complex12 = complex1.pow(complex3);
      complex12.NaN.divide((-1.0));
      complex10.abs();
      Complex.valueOf(3842.2);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.ZERO.acos();
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.ONE.nthRoot(2772);
      complex0.I.multiply(234);
      Complex complex3 = complex0.negate();
      complex3.INF.add(complex1);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.sqrt();
      complex5.exp();
      Complex complex6 = complex3.atan();
      complex4.multiply(complex2);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-22.203));
      Complex complex1 = complex0.ONE.cos();
      complex1.INF.log();
      Complex complex2 = complex0.pow((-873.983));
      complex2.I.hashCode();
      Complex complex3 = complex2.ONE.subtract(1678.5294);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.NaN.hashCode();
      complex4.I.toString();
      complex1.INF.conjugate();
      complex3.ZERO.nthRoot(1);
      Complex complex5 = complex0.sqrt();
      complex1.equals(complex5);
      Complex complex6 = complex5.sin();
      complex3.conjugate();
      Complex complex7 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, 1678.5294);
      complex2.ZERO.sinh();
      Complex complex8 = complex7.I.conjugate();
      complex7.INF.log();
      Complex complex9 = complex6.divide((-2851.599342));
      Complex.valueOf(1.1768108384670781E-7);
      Complex complex10 = complex6.subtract(732.7010006922);
      complex10.sinh();
      complex4.tan();
      complex9.asin();
      complex8.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(842);
      Complex complex1 = complex0.acos();
      complex1.INF.asin();
      complex1.readResolve();
      Complex complex2 = Complex.valueOf((double) 842);
      Complex complex3 = complex1.divide(complex2);
      complex0.createComplex(2.0, 2677.0);
      complex1.add(1073.408154654656);
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-2730.0247), (-2730.0247));
      complex1.NaN.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tan();
      complex4.ONE.multiply(0.0);
      complex3.ZERO.subtract(complex1);
      Complex complex5 = complex4.I.add(0.0);
      complex5.NaN.subtract(0.0);
      Complex complex6 = complex4.INF.reciprocal();
      complex6.divide(complex1);
      complex3.getReal();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.I.tanh();
      complex2.multiply(2.0902045062932175E102);
      Complex complex9 = complex2.multiply(3835);
      complex8.pow(complex5);
      complex9.add(complex8);
      Complex complex10 = complex7.conjugate();
      complex10.I.add(1.261950308999819E-90);
      complex10.I.sinh();
      complex2.hashCode();
      Complex.valueOf((-3.987619123706934E79), (-3067.87));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      complex0.acos();
      Complex complex3 = complex2.sinh();
      complex3.getReal();
      Complex complex4 = complex1.tanh();
      complex4.nthRoot(778);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-719.09319), (-719.09319));
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex0.getField();
      Complex complex2 = new Complex(2045.33149307517, 0.0);
      complex0.I.cos();
      Complex complex3 = complex2.ZERO.subtract((-1831.9547489));
      complex1.I.abs();
      Complex.valueOf((-1831.9547489));
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex1.sinh();
      complex3.readResolve();
      complex5.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.divide(0.0);
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt();
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(2.4175248449172035E-87, 2.4175248449172035E-87);
      complex0.INF.createComplex(0.0, 4.135457669031131E282);
      complex2.ZERO.multiply(0.0);
      complex0.INF.subtract(2.4175248449172035E-87);
      complex1.toString();
      complex0.add(0.0);
      complex2.cosh();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.NaN.createComplex((-1158.905), 0.0);
      Complex complex3 = complex0.sqrt1z();
      complex0.sinh();
      Complex complex4 = complex0.ZERO.multiply((-1951));
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex4.add(complex1);
      Object object0 = complex1.readResolve();
      complex7.equals(object0);
      Complex complex8 = Complex.valueOf((-1243.0), (-1243.0));
      Complex.valueOf(1950.0690285603375);
      complex8.getImaginary();
      complex2.log();
      complex4.multiply(5.181801397059486E292);
      complex6.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = Complex.valueOf(693.937813, 1424.012341);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.NaN.sin();
      complex1.ZERO.cos();
      Complex complex6 = complex5.NaN.pow(complex3);
      complex6.add(6.283185307179586);
      Complex complex7 = complex6.NaN.createComplex(2052.503228012, 1424.012341);
      complex7.ZERO.log();
      Complex.valueOf(693.937813, 693.937813);
      complex4.divide(complex1);
      complex4.cosh();
      Complex complex8 = complex7.atan();
      complex8.I.nthRoot(2662);
      complex8.add(complex5);
      complex2.multiply(1);
      Complex.valueOf(1299.614400092);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-755));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.I.cosh();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.INF.subtract(complex0);
      complex4.ZERO.subtract((-4473.438560426102));
      Complex complex5 = complex0.INF.createComplex(0.0, (-4473.438560426102));
      complex5.I.hashCode();
      complex4.INF.divide(complex0);
      Complex complex6 = complex2.sqrt1z();
      complex4.divide(complex2);
      complex3.ZERO.acos();
      Complex.valueOf(945.61172384506, 0.0);
      complex6.cos();
      Complex complex7 = complex0.multiply(complex1);
      complex7.NaN.getArgument();
      complex2.isInfinite();
      complex3.log();
      Complex complex8 = complex2.divide(complex6);
      complex3.multiply((-55));
      complex8.tanh();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.atan();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.INF.sqrt();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      List<Complex> list0 = complex2.ONE.nthRoot(2528);
      assertFalse(list0.contains(complex1));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(list0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(list0.isEmpty());
      assertEquals(2528, list0.size());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.INF.negate();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertTrue(complex3.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex1.sin();
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotNull(complex4);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.ZERO.sin();
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotNull(complex5);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex1.I.atan();
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex6, complex0);
      assertSame(complex6, complex4);
      assertSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotNull(complex6);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex1.atan();
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex7);
      assertSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertSame(complex7, complex4);
      assertSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex6);
      assertNotNull(complex7);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = complex0.tan();
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotNull(complex8);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(0.7615941559557649, complex8.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      
      Complex complex9 = complex8.ONE.conjugate();
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotNull(complex9);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(0.7615941559557649, complex8.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      
      Complex complex10 = complex4.INF.createComplex(2528, Double.NaN);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex7);
      assertSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex4);
      assertNotNull(complex10);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertEquals(2528.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex7));
      assertTrue(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex1));
      
      Complex complex11 = complex4.conjugate();
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex7);
      assertSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex10);
      assertSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertSame(complex11, complex7);
      assertSame(complex11, complex4);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertSame(complex11, complex1);
      assertNotNull(complex11);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertTrue(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      
      Complex complex12 = complex11.ONE.pow(complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex7);
      assertSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex6);
      assertSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex10);
      assertSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertSame(complex11, complex7);
      assertSame(complex11, complex4);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertSame(complex11, complex1);
      assertSame(complex11, complex12);
      assertSame(complex12, complex6);
      assertSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertSame(complex12, complex7);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex9);
      assertSame(complex12, complex11);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertSame(complex12, complex4);
      assertNotNull(complex12);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertTrue(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      assertTrue(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex5));
      
      Complex complex13 = complex12.ONE.add(complex10);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex1, complex8);
      assertSame(complex1, complex6);
      assertSame(complex1, complex13);
      assertSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertSame(complex4, complex11);
      assertSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex12);
      assertSame(complex4, complex13);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex2);
      assertNotSame(complex11, complex10);
      assertSame(complex11, complex7);
      assertSame(complex11, complex4);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertSame(complex11, complex1);
      assertSame(complex11, complex12);
      assertSame(complex11, complex13);
      assertSame(complex12, complex7);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex0);
      assertSame(complex12, complex13);
      assertSame(complex12, complex6);
      assertSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex3);
      assertSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertSame(complex12, complex4);
      assertSame(complex13, complex4);
      assertSame(complex13, complex7);
      assertSame(complex13, complex12);
      assertSame(complex13, complex1);
      assertNotSame(complex13, complex2);
      assertSame(complex13, complex6);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex3);
      assertSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotNull(complex13);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertEquals(2528.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertTrue(complex13.isNaN());
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertTrue(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex7));
      assertTrue(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex1));
      assertTrue(complex10.equals((Object)complex12));
      assertTrue(complex10.equals((Object)complex11));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      assertTrue(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex5));
      assertTrue(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      
      Complex complex14 = complex0.pow((double) 2528);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotNull(complex14);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex14.isInfinite());
      assertEquals(1.573490117019859E-14, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(1.0, complex14.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      
      double double0 = complex14.INF.getArgument();
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertEquals(0.7853981633974483, double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertFalse(complex14.isInfinite());
      assertEquals(1.573490117019859E-14, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(1.0, complex14.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      
      Complex complex15 = complex11.sqrt1z();
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertSame(complex15, complex12);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex2);
      assertSame(complex15, complex6);
      assertSame(complex15, complex1);
      assertNotSame(complex15, complex5);
      assertSame(complex15, complex4);
      assertSame(complex15, complex13);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex10);
      assertSame(complex15, complex7);
      assertSame(complex15, complex11);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex9);
      assertNotSame(complex1, complex8);
      assertSame(complex1, complex6);
      assertSame(complex1, complex13);
      assertSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex7);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertNotSame(complex4, complex14);
      assertSame(complex4, complex11);
      assertSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex1);
      assertSame(complex4, complex15);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex12);
      assertSame(complex4, complex13);
      assertSame(complex11, complex15);
      assertNotSame(complex11, complex10);
      assertSame(complex11, complex7);
      assertSame(complex11, complex4);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex14);
      assertSame(complex11, complex1);
      assertSame(complex11, complex12);
      assertSame(complex11, complex13);
      assertNotNull(complex15);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex14));
      assertTrue(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex0));
      assertTrue(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex8));
      assertTrue(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex14));
      
      Complex complex16 = complex2.add(0.0);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex16, complex14);
      assertSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex5);
      assertSame(complex16, complex6);
      assertSame(complex16, complex1);
      assertSame(complex16, complex13);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex10);
      assertSame(complex16, complex15);
      assertNotSame(complex16, complex8);
      assertSame(complex16, complex4);
      assertSame(complex16, complex7);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex9);
      assertSame(complex16, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotNull(complex16);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertTrue(complex16.isNaN());
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex10));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertTrue(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex14));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex7));
      
      Complex complex17 = complex13.negate();
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex1, complex8);
      assertSame(complex1, complex17);
      assertSame(complex1, complex6);
      assertSame(complex1, complex16);
      assertSame(complex1, complex13);
      assertSame(complex1, complex12);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertSame(complex1, complex11);
      assertSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex7);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex10);
      assertSame(complex17, complex16);
      assertNotSame(complex17, complex10);
      assertSame(complex17, complex13);
      assertNotSame(complex17, complex8);
      assertSame(complex17, complex4);
      assertSame(complex17, complex6);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex2);
      assertSame(complex17, complex1);
      assertSame(complex17, complex12);
      assertNotSame(complex17, complex14);
      assertSame(complex17, complex11);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex9);
      assertSame(complex17, complex7);
      assertSame(complex17, complex15);
      assertNotSame(complex4, complex14);
      assertSame(complex4, complex11);
      assertSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertSame(complex4, complex17);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex1);
      assertSame(complex4, complex15);
      assertNotSame(complex4, complex2);
      assertSame(complex4, complex16);
      assertSame(complex4, complex12);
      assertSame(complex4, complex13);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex17);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex16);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex2);
      assertSame(complex11, complex15);
      assertNotSame(complex11, complex10);
      assertSame(complex11, complex7);
      assertSame(complex11, complex17);
      assertSame(complex11, complex4);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex14);
      assertSame(complex11, complex1);
      assertSame(complex11, complex12);
      assertSame(complex11, complex16);
      assertSame(complex11, complex13);
      assertSame(complex12, complex15);
      assertSame(complex12, complex7);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex14);
      assertSame(complex12, complex16);
      assertSame(complex12, complex13);
      assertSame(complex12, complex6);
      assertSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex3);
      assertSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertSame(complex12, complex17);
      assertSame(complex12, complex4);
      assertSame(complex13, complex4);
      assertSame(complex13, complex7);
      assertSame(complex13, complex15);
      assertSame(complex13, complex12);
      assertSame(complex13, complex16);
      assertSame(complex13, complex1);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex2);
      assertSame(complex13, complex17);
      assertSame(complex13, complex6);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex3);
      assertSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotNull(complex17);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertTrue(complex17.isNaN());
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertEquals(2528.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertTrue(complex13.isNaN());
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex14));
      assertTrue(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex0));
      assertTrue(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex8));
      assertTrue(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex11));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex14));
      assertTrue(complex10.equals((Object)complex7));
      assertTrue(complex10.equals((Object)complex13));
      assertTrue(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex16));
      assertTrue(complex10.equals((Object)complex1));
      assertTrue(complex10.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex14));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      assertTrue(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex14));
      assertTrue(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex5));
      assertTrue(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex9));
      
      Complex complex18 = complex2.pow(0.0);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex16);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertSame(complex18, complex12);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex2);
      assertSame(complex18, complex6);
      assertSame(complex18, complex1);
      assertNotSame(complex18, complex14);
      assertSame(complex18, complex17);
      assertSame(complex18, complex4);
      assertNotSame(complex18, complex8);
      assertSame(complex18, complex16);
      assertNotSame(complex18, complex10);
      assertSame(complex18, complex13);
      assertSame(complex18, complex7);
      assertSame(complex18, complex15);
      assertSame(complex18, complex11);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex0);
      assertNotNull(complex18);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertTrue(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex16));
      assertTrue(complex2.equals((Object)complex15));
      assertTrue(complex2.equals((Object)complex16));
      assertTrue(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex17));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex14));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex14));
      assertTrue(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex9));
      assertTrue(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertNotNull(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.ZERO.tanh();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.pow(265.08971526045013);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(complex2);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.ONE.acos();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotNull(complex3);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.ONE.multiply(0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotNull(complex4);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex3));
      
      double double0 = complex0.getArgument();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertEquals(0.7853981633974483, double0, 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ONE.pow(1012.735);
      complex2.NaN.divide(1012.735);
      Complex complex3 = Complex.valueOf((-3935.25792973875));
      complex3.I.add((-1848.33510497131));
      Complex complex4 = complex3.NaN.add(1012.735);
      Complex.valueOf(1012.735);
      Complex complex5 = complex1.reciprocal();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.2732395447351628, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.createComplex(0.0, 0.0);
      Complex complex7 = complex6.multiply((-1319));
      Complex complex8 = complex0.cosh();
      complex0.cos();
      Complex complex9 = complex8.ZERO.acos();
      Complex complex10 = complex9.NaN.tanh();
      Complex complex11 = complex0.ZERO.reciprocal();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex1.sqrt1z();
      assertEquals(0.618990892446662, complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex12.getField();
      Complex complex14 = complex12.cosh();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex9.asin();
      assertEquals((-1.0232274785475506), complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex10.add(complex0);
      Complex complex17 = complex8.conjugate();
      assertTrue(complex17.equals((Object)complex2));
      
      complex16.toString();
      assertSame(complex10, complex11);
      assertSame(complex10, complex4);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      Complex complex18 = complex7.divide(562.79906880385);
      assertEquals(-0.0, complex18.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.cos();
      List<Complex> list0 = complex0.nthRoot(1193);
      assertFalse(list0.contains(complex1));
      assertEquals(1193, list0.size());
      
      Complex complex3 = Complex.valueOf((double) 1193);
      Complex complex4 = complex3.NaN.cosh();
      complex4.NaN.readResolve();
      complex1.isNaN();
      complex1.getArgument();
      Complex complex5 = complex1.pow((double) 1193);
      complex2.getArgument();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.NaN.tanh();
      Complex complex8 = complex6.sqrt1z();
      assertSame(complex8, complex5);
      
      Complex complex9 = complex3.tan();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals((-1.0404265480029578), complex9.getReal(), 0.01);
      
      Complex complex10 = Complex.valueOf((-1920.6409950563));
      assertFalse(complex10.isInfinite());
      assertEquals((-1920.6409950563), complex10.getReal(), 0.01);
      
      complex6.equals((Object) null);
      assertSame(complex1, complex7);
      assertSame(complex6, complex5);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      assertFalse(complex2.isInfinite());
      
      Complex complex3 = complex0.add((-2402.89570278));
      complex0.isNaN();
      Complex complex4 = complex3.cosh();
      assertTrue(complex4.isNaN());
      
      Complex complex5 = complex0.negate();
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex5.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
  }
}
