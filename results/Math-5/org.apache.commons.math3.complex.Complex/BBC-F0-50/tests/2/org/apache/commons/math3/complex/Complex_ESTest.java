/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:04:30 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.createComplex(1755.56597, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 3630.88941);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf((-0.38109784554181547));
      Complex complex7 = complex3.tanh();
      Complex complex8 = Complex.INF;
      complex3.pow(complex8);
      complex2.add((-3717.8879));
      complex5.abs();
      Complex complex9 = complex5.pow(2.0);
      complex6.tan();
      complex7.nthRoot(596);
      complex1.abs();
      complex3.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.createComplex(2400.3, (-20.0));
      Complex complex2 = Complex.valueOf(834.4, 20.0);
      Complex complex3 = Complex.valueOf(1885.77696525);
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex4.tanh();
      Complex complex6 = new Complex(1779.9766937613679, 3215.9241803);
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex7.add(1885.77696525);
      complex1.tan();
      complex2.abs();
      Complex complex9 = complex8.pow(0.7615941559557649);
      complex3.getField();
      complex5.tan();
      complex9.nthRoot(998);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = Complex.valueOf(20.0);
      complex0.tanh();
      complex1.pow(complex2);
      Complex complex3 = complex0.add(3630.88941);
      Complex complex4 = complex0.tan();
      complex4.abs();
      Complex complex5 = complex3.pow((-110.54517737289643));
      complex1.getField();
      complex1.tan();
      complex5.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.createComplex(1755.56597, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.add(1755.56597);
      complex3.isNaN();
      Complex complex4 = complex1.tan();
      complex1.multiply(complex2);
      Complex complex5 = Complex.ZERO;
      complex4.pow(1.7844345569610596);
      complex2.multiply(840);
      Complex complex6 = Complex.valueOf(3630.88941);
      complex6.abs();
      complex6.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(2712.5);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-1160.5090277106), Double.NaN);
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.ONE.subtract((-1160.5090277106));
      complex5.NaN.multiply(2.3472546699189522E-8);
      complex5.ZERO.add(complex3);
      complex3.NaN.tanh();
      Complex complex6 = complex3.sin();
      complex6.ZERO.pow(Double.NaN);
      Complex complex7 = Complex.valueOf(841.836045103127);
      Complex complex8 = complex0.conjugate();
      complex7.atan();
      complex3.cos();
      complex2.conjugate();
      complex2.sin();
      Complex.valueOf(Double.NaN);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf(1755.56597, 1755.56597);
      Complex complex3 = complex1.createComplex(1755.56597, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 3630.88941);
      complex4.reciprocal();
      Complex complex5 = complex0.tanh();
      complex0.ONE.add(complex3);
      complex3.pow(complex2);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.add(Double.POSITIVE_INFINITY);
      complex7.isNaN();
      complex3.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      complex0.add(Double.NaN);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ONE;
      complex3.tanh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add((-0.9999998503057853));
      complex2.isNaN();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(4.940883275207154E117, 1.3588667124268436);
      Complex complex1 = new Complex(1.3588667124268436, 4.940883275207154E117);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex5.NaN.sin();
      complex6.ZERO.readResolve();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.ZERO.pow(5.814040618670345E-62);
      complex8.ONE.conjugate();
      Complex.valueOf(0.0, 4.940883275207154E117);
      Complex complex9 = complex7.negate();
      complex9.ONE.hashCode();
      complex3.getField();
      Complex complex10 = complex3.reciprocal();
      Complex complex11 = complex5.add(complex7);
      complex11.ZERO.add(0.0);
      Complex complex12 = complex11.ONE.conjugate();
      complex3.exp();
      complex2.subtract(0.0);
      complex2.ONE.readResolve();
      complex4.pow(complex5);
      complex10.tan();
      complex12.toString();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex.valueOf(1755.56597, 1755.56597);
      Complex complex2 = complex1.createComplex(1755.56597, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 1755.56597);
      complex0.getArgument();
      complex1.asin();
      complex2.multiply(1073741824);
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(3490.05256, 2296.1);
      Complex complex3 = complex2.asin();
      complex2.toString();
      complex0.asin();
      complex1.toString();
      Complex complex4 = new Complex(3490.05256, (-20.0));
      complex1.tan();
      complex4.tan();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex.valueOf(0.999997606735758, 0.999997606735758);
      complex0.createComplex(Double.POSITIVE_INFINITY, 1343.1);
      Complex complex2 = Complex.valueOf(9.599214853681978E245, 0.999997606735758);
      complex1.reciprocal();
      complex2.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = Complex.NaN;
      complex4.pow(complex3);
      Complex complex5 = complex1.exp();
      complex5.add(8.831699889789037E154);
      complex0.isNaN();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf(1755.56597, 1755.56597);
      complex2.createComplex(1835.967032265, 1755.56597);
      Complex complex3 = Complex.valueOf(1835.967032265, Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.sqrt1z();
      Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex5.tanh();
      complex5.add(complex3);
      Complex complex6 = complex2.pow(complex3);
      Complex complex7 = Complex.valueOf(0.44691193103790283, 1835.967032265);
      complex7.exp();
      complex1.add((-391.04830359596));
      complex3.isNaN();
      complex6.tan();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.ONE.abs();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.sqrt();
      complex0.sinh();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex3.add(complex0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.ONE.abs();
      Complex complex2 = complex1.multiply(complex0);
      complex1.equals(complex1);
      complex0.sin();
      complex0.sqrt1z();
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.subtract(2927.21167219);
      complex2.readResolve();
      Complex complex3 = complex1.divide(complex2);
      complex1.negate();
      complex2.abs();
      Complex complex4 = Complex.valueOf(2927.21167219, Double.POSITIVE_INFINITY);
      complex4.pow(complex3);
      Complex complex5 = complex4.divide((-1936.786589));
      complex2.tan();
      complex5.multiply((-651.1500375199105));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      complex0.readResolve();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.sqrt1z();
      complex4.ONE.asin();
      double double0 = (-1149.15868);
      Complex complex5 = Complex.valueOf((-1149.15868), Double.NaN);
      complex5.asin();
      complex4.toString();
      complex0.negate();
      Complex complex6 = complex1.sqrt1z();
      try { 
        complex6.nthRoot((-2145675903));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,145,675,903
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.ONE;
      complex0.I.multiply(418);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.multiply((double) 418);
      complex5.ONE.add(1.6027019366032E7);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex1.sqrt();
      complex2.multiply((-420595.2174646963));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-717.3));
      Complex complex1 = Complex.I;
      complex1.ONE.abs();
      Complex.valueOf(2.0, 8.373506261705188E-5);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.ZERO;
      complex2.equals(complex3);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.I.atan();
      complex4.sqrt();
      complex5.createComplex(1.0221444699709537E-4, 6.283185307179586);
      complex5.pow((-5.23735298540578E-9));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(0.9951848357847671, Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex(3490.05256, 2093.724);
      Complex complex3 = complex1.reciprocal();
      complex0.sqrt();
      Complex complex4 = complex2.sinh();
      complex1.multiply(3490.05256);
      Complex complex5 = complex4.sinh();
      complex2.multiply(Double.NaN);
      complex5.add(complex3);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.sinh();
      complex1.multiply(1);
      Complex complex3 = Complex.valueOf((-260.3), (double) 1);
      complex3.toString();
      Complex complex4 = complex3.multiply(complex2);
      complex4.I.divide(1.4385227981629147E-8);
      complex2.equals(complex3);
      complex2.sin();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.NaN.createComplex((-166.98), (-2529.317094));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex1.I.divide(complex0);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.pow(0.40285754203796387);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex2.multiply((-266));
      Complex complex7 = complex4.pow(complex0);
      Complex complex8 = complex2.exp();
      complex1.log();
      Complex complex9 = complex5.conjugate();
      complex8.sqrt1z();
      complex6.abs();
      complex9.conjugate();
      complex0.asin();
      complex2.toString();
      complex7.log();
      complex4.sqrt1z();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(complex0);
      complex2.hashCode();
      Complex complex3 = Complex.NaN;
      Complex.valueOf(2.0, (-356.1707781));
      Complex complex4 = complex1.createComplex(2.718281828459045, 2.718281828459045);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex4.pow(complex5);
      Complex complex9 = Complex.valueOf(744.548558446959);
      Complex complex10 = complex9.exp();
      complex10.add((-356.1707781));
      complex3.isNaN();
      complex8.tan();
      complex7.log();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getArgument();
      complex0.NaN.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex2.multiply(3377);
      Complex complex9 = Complex.valueOf(1.908818244934082, (double) (-168));
      complex9.equals(complex0);
      Object object0 = complex4.readResolve();
      complex8.equals(object0);
      Complex complex10 = Complex.INF;
      complex10.conjugate();
      Complex complex11 = new Complex(Double.NaN, (-168));
      Complex complex12 = complex7.sqrt1z();
      complex3.exp();
      complex10.isNaN();
      complex8.tan();
      complex12.multiply(complex3);
      complex10.pow(3166.265);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(351.4415590596, 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-2174.62953686098), (-2174.62953686098));
      Complex complex4 = complex1.createComplex(20.0, 351.4415590596);
      Complex complex5 = complex1.exp();
      complex2.reciprocal();
      complex3.nthRoot(455);
      Complex complex6 = complex4.tanh();
      Complex.valueOf(1060.0, (-1.0));
      Complex.valueOf(0.04138083136440067, (-3321.2414125053992));
      complex2.sin();
      complex6.multiply(455);
      Complex complex7 = Complex.INF;
      complex5.divide(complex3);
      complex5.getField();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-2639.26723256));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      complex2.I.multiply(complex0);
      Complex complex3 = complex2.I.log();
      complex1.INF.cosh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.subtract(complex0);
      complex4.tanh();
      complex0.multiply((-184));
      Complex complex6 = Complex.valueOf((-2639.26723256), (-2639.26723256));
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      Complex complex7 = Complex.I;
      Object object1 = complex7.readResolve();
      complex5.equals(object1);
      complex1.conjugate();
      Complex complex8 = new Complex(6.283185307179586, (-2534.7413726704));
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = Complex.INF;
      complex3.exp();
      Complex.valueOf(6.283185307179586);
      complex0.tan();
      complex3.multiply(complex5);
      complex9.pow((double) (-184));
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(1650.54009302426);
      complex0.ONE.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.tan();
      complex3.ONE.asin();
      complex0.toString();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.pow(0.0);
      Complex complex6 = complex5.NaN.multiply((-3548));
      complex1.divide(complex4);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-3620.8383786780387), 717.3);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.NaN.createComplex(1.1759889125823975, 1.1759889125823975);
      complex2.INF.conjugate();
      List<Complex> list0 = complex0.nthRoot(1667);
      complex0.NaN.add(complex2);
      Complex complex4 = complex1.log();
      complex4.NaN.asin();
      Complex complex5 = complex0.subtract(7.145787619369324E129);
      Complex complex6 = complex1.cos();
      complex6.ONE.conjugate();
      Complex complex7 = complex5.multiply(complex6);
      Complex complex8 = complex5.multiply(1667);
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex9.INF.log();
      Complex.valueOf((-3620.8383786780387));
      complex0.exp();
      Complex complex11 = complex7.multiply(6.283185307179586);
      complex11.ONE.divide((-20.0));
      complex3.cos();
      complex8.equals(list0);
      complex10.sqrt();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      complex0.cosh();
      Complex.valueOf(Double.NaN, (-319.013917661407));
      Complex complex1 = Complex.valueOf(Double.NaN, (-351.4415590596));
      complex0.sin();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = Complex.ONE;
      complex3.divide(complex1);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2997.1, (-886.8288));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.divide(complex0);
      complex3.ZERO.multiply(complex2);
      complex3.negate();
      Complex complex4 = Complex.valueOf(2997.1, 2997.1);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex1.subtract(complex0);
      complex5.tanh();
      Complex complex7 = complex0.multiply((-1183));
      complex1.equals("");
      complex6.equals((Object) null);
      Complex complex8 = new Complex(1072.0, 744.19844351);
      complex8.conjugate();
      complex7.nthRoot(672);
      Complex.valueOf((double) 672);
      Complex.valueOf(744.19844351);
      Complex.valueOf((-886.8288), (-1591.4));
      Complex.valueOf(1072.0);
      complex4.createComplex(672, 0.568016264106175);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2927.21167219);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.subtract(2664.144729522683);
      complex2.readResolve();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.I;
      complex5.subtract(complex3);
      complex4.tanh();
      complex6.multiply((-184));
      Complex complex8 = Complex.valueOf(2664.144729522683, (double) (-184));
      complex8.equals(complex5);
      Complex complex9 = Complex.I;
      complex1.equals(complex9);
      complex9.conjugate();
      Complex complex10 = new Complex(1.2550633697348567E-8, (-2575.52292521402));
      complex4.sqrt1z();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.exp();
      Complex complex13 = Complex.valueOf((double) (-184));
      complex13.isNaN();
      Complex complex14 = complex6.tan();
      complex12.multiply(complex2);
      complex14.pow(2.414213562373095);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.valueOf(351.4415590596, 0.0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex2.atan();
      complex6.cosh();
      Complex complex7 = complex4.subtract(complex5);
      Complex complex8 = Complex.valueOf(2.0);
      Complex complex9 = complex8.tanh();
      Complex complex10 = complex7.multiply((-184));
      Object object0 = new Object();
      complex9.equals(object0);
      Complex complex11 = (Complex)complex10.readResolve();
      complex2.equals(complex11);
      Complex complex12 = Complex.ONE;
      complex7.nthRoot(751);
      complex4.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.divide(complex0);
      complex1.INF.sin();
      complex0.getArgument();
      complex0.getReal();
      complex0.isInfinite();
      Complex complex3 = Complex.valueOf(2556.63088);
      Complex.valueOf(5084.040666129);
      Complex.valueOf((-682.69904), (-886.8288));
      Complex.valueOf(419.868288802);
      complex3.createComplex(Double.POSITIVE_INFINITY, 2544.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(351.4415590596, 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.multiply(complex2);
      complex3.multiply(complex2);
      complex2.atan();
      complex0.tanh();
      complex1.atan();
      complex0.sinh();
      complex3.multiply((-1003));
      complex3.getArgument();
      Complex complex5 = new Complex(1424.32, (-3729.844989756));
      complex5.sin();
      complex1.divide(0.0);
      complex5.sin();
      complex4.subtract((-0.5113252103366475));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-2639.26723256));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      complex1.createComplex(348.2, 2.0);
      Complex complex5 = complex4.exp();
      complex3.reciprocal();
      Complex complex6 = complex3.tanh();
      complex5.pow(complex4);
      complex3.exp();
      Complex complex7 = Complex.INF;
      complex2.add(complex6);
      complex7.add(1.7844345569610596);
      complex0.sqrt1z();
      Complex complex8 = Complex.I;
      complex8.exp();
      complex4.isNaN();
      complex2.tan();
      Complex complex9 = Complex.ZERO;
      complex0.multiply(complex9);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.ONE;
      complex11.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = Complex.valueOf((-2387.57), (-2387.57));
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.asin();
      Complex.valueOf((-2118.05), 1755.56597);
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.NaN;
      complex5.reciprocal();
      Complex complex8 = complex1.tanh();
      complex3.pow(complex7);
      complex0.exp();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex8.add(complex6);
      complex1.conjugate();
      complex1.pow(complex4);
      complex10.sqrt();
      Complex complex11 = Complex.NaN;
      complex11.reciprocal();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(2927.21167219);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.pow(complex0);
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(0.0);
      complex1.abs();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex((-4034.125342));
      Complex complex8 = complex7.atan();
      complex4.toString();
      complex8.hashCode();
      Complex complex9 = complex7.multiply((-1675.23144241));
      Complex complex10 = complex7.cos();
      complex5.conjugate();
      Complex complex11 = complex6.negate();
      complex3.add(complex4);
      complex8.hashCode();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex12.pow(complex2);
      Complex complex13 = complex1.acos();
      complex11.getField();
      complex11.sqrt1z();
      complex13.equals(complex10);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 1209.662775;
      double double1 = 6.283185307179586;
      Complex complex0 = Complex.valueOf(1209.662775, 6.283185307179586);
      complex0.readResolve();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = Complex.ONE;
      complex3.subtract(42.55498795676013);
      complex1.readResolve();
      Complex complex4 = complex1.reciprocal();
      complex0.cos();
      complex1.multiply(complex2);
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1810.927));
      complex0.getField();
      complex0.toString();
      Complex complex1 = complex0.sqrt();
      complex1.log();
      complex1.readResolve();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex0.tanh();
      complex3.NaN.conjugate();
      Complex complex4 = complex2.add(1072.0);
      complex4.INF.log();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.atan();
      complex6.ONE.sinh();
      Complex complex7 = complex6.sqrt1z();
      complex7.getField();
      complex0.add((-20.0));
      complex5.add(complex6);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(2927.21167219);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.subtract(2664.1835);
      complex2.INF.readResolve();
      Complex complex3 = complex1.I.reciprocal();
      complex3.ONE.cos();
      Complex complex4 = complex1.ONE.multiply(complex0);
      complex4.NaN.pow(complex1);
      Complex complex5 = complex0.multiply(2927.21167219);
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf(2927.21167219, (-509.7429566));
      complex5.readResolve();
      complex0.pow(complex7);
      Complex complex8 = complex6.cosh();
      complex8.NaN.subtract(2664.1835);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.divide(complex0);
      complex1.INF.sin();
      complex0.getArgument();
      complex0.getReal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.subtract(0.7853981633974483);
      Complex complex5 = complex0.log();
      complex1.equals((Object) null);
      complex0.isInfinite();
      complex1.add(2986.6);
      Complex complex6 = complex1.sqrt1z();
      complex5.exp();
      complex1.isNaN();
      complex5.tan();
      complex0.multiply(complex6);
      complex4.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(1030.4);
      complex0.I.readResolve();
      Complex complex1 = Complex.valueOf((-1628.4792012), 1.4105560402194033);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex0.INF.negate();
      complex2.I.atan();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex2.subtract(complex1);
      complex2.tanh();
      Complex.valueOf((double) (-184), (double) (-184));
      complex3.isInfinite();
      complex5.equals(complex4);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex1.negate();
      complex8.ZERO.exp();
      complex0.getField();
      Complex complex9 = complex6.multiply(complex7);
      Complex.valueOf(1.4105560402194033, (-1628.4792012));
      Complex complex10 = Complex.valueOf(1.4105560402194033, 1030.4);
      complex10.NaN.multiply(complex4);
      Complex.valueOf(1030.4);
      complex9.atan();
      complex1.getImaginary();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(351.4415590596, 0.0);
      complex0.pow(complex1);
      complex1.INF.conjugate();
      complex0.multiply(1115);
      Complex complex2 = Complex.valueOf(348.2, 2.0);
      Complex complex3 = complex0.createComplex(1755.56597, 1755.56597);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.reciprocal();
      complex3.tanh();
      complex2.pow(complex5);
      complex0.exp();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex(1514.4526608309);
      complex6.ONE.pow(complex7);
      complex4.add(complex2);
      complex1.conjugate();
      Complex complex8 = complex1.pow(complex0);
      complex5.sqrt();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(351.4415590596, 0.0);
      Complex complex2 = complex0.pow(complex1);
      complex2.asin();
      Complex complex3 = Complex.valueOf(348.2, 2.0);
      complex0.createComplex(1755.56597, 1755.56597);
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.reciprocal();
      complex3.tanh();
      complex5.pow(complex0);
      complex1.exp();
      Complex complex7 = Complex.INF;
      complex1.add(complex6);
      complex4.conjugate();
      complex1.pow(complex6);
      complex6.sqrt();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex4.NaN.multiply(complex1);
      Complex complex6 = complex5.pow(complex3);
      complex3.getArgument();
      Complex complex7 = Complex.valueOf(-0.0);
      complex0.abs();
      complex5.tanh();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex0.subtract(0.0);
      Complex complex10 = complex9.atan();
      complex6.toString();
      complex9.hashCode();
      Complex complex11 = complex8.multiply(0.0);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex13 = complex12.cos();
      complex11.conjugate();
      complex4.negate();
      complex1.add(complex6);
      complex11.hashCode();
      Complex complex14 = Complex.valueOf(0.0);
      complex5.pow(complex12);
      complex14.atan();
      complex0.acos();
      complex10.getField();
      Complex.valueOf(7.630849300334927);
      complex2.sqrt1z();
      complex13.sinh();
      Complex complex15 = complex4.add(complex7);
      complex15.divide((-1.650155887561251E-8));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(1030.4);
      Complex complex1 = new Complex(1030.4, 1030.4);
      Complex complex2 = Complex.valueOf((-1628.4792012), 0.0);
      Complex complex3 = complex0.acos();
      complex0.I.divide(complex3);
      complex0.INF.negate();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex3.cosh();
      complex4.subtract(complex2);
      complex3.tanh();
      complex4.getArgument();
      complex5.getReal();
      complex4.isInfinite();
      Complex complex6 = Complex.ZERO;
      complex3.getField();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1209.662775, 6.283185307179586);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.valueOf((-1628.4792012), (-20.0));
      Complex complex3 = complex1.divide(complex1);
      Complex complex4 = complex3.negate();
      complex1.atan();
      complex0.cosh();
      complex1.subtract(complex1);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.multiply(4770);
      complex4.equals(complex6);
      complex0.equals(complex5);
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex3.negate();
      complex7.exp();
      Complex complex9 = Complex.I;
      complex9.getField();
      complex3.multiply(complex8);
      Complex.valueOf(461.594338532332, 0.6480542736638855);
      complex1.add(461.594338532332);
      complex5.multiply(complex1);
      Complex.valueOf((-20.0));
      complex2.atan();
      complex4.getImaginary();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-2639.26723256));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.I.multiply(complex0);
      double double0 = (-1514.0);
      double double1 = 20.0;
      Complex complex4 = new Complex((-1514.0), 20.0);
      Complex complex5 = complex4.multiply(complex1);
      complex2.ZERO.conjugate();
      Complex complex6 = complex4.pow((-2282.2445));
      complex6.INF.multiply(complex4);
      complex5.nthRoot(1);
      // Undeclared exception!
      complex3.nthRoot(944679875);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.divide(complex0);
      complex2.NaN.hashCode();
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.cosh();
      complex1.getField();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex2.multiply(1);
      complex3.pow(complex6);
      complex8.exp();
      complex1.log();
      Complex complex9 = complex4.conjugate();
      complex8.sqrt1z();
      complex6.abs();
      complex6.conjugate();
      complex0.asin();
      complex9.toString();
      complex5.log();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1209.662775, 6.283185307179586);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = Complex.ONE;
      complex3.NaN.pow(complex4);
      complex2.getArgument();
      Complex complex5 = Complex.I;
      complex0.abs();
      Complex complex6 = complex5.ONE.tanh();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex5.INF.subtract(1209.662775);
      complex7.NaN.atan();
      complex0.ONE.toString();
      complex0.hashCode();
      complex0.multiply(1209.679092833428);
      Complex complex9 = complex8.cos();
      complex0.conjugate();
      complex2.negate();
      Complex complex10 = complex1.add(complex4);
      complex8.hashCode();
      Complex.valueOf(1209.679092833428);
      complex9.pow(complex10);
      Complex complex11 = Complex.valueOf((-1923.2093));
      complex11.atan();
      complex6.acos();
      complex3.getField();
      Complex.valueOf((-1727.38142915172));
      complex6.sqrt1z();
      Complex complex12 = complex10.sinh();
      Complex complex13 = complex12.add(complex0);
      complex13.divide(1209.679092833428);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex3.ONE.tan();
      complex4.NaN.multiply(complex1);
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex5.ONE.negate();
      complex6.sin();
      Complex complex7 = complex0.NaN.divide(complex1);
      Complex complex8 = complex2.NaN.createComplex(0.0, 0.0);
      Complex complex9 = complex2.sinh();
      complex1.divide(complex2);
      complex9.I.tan();
      complex7.hashCode();
      Complex complex10 = complex2.atan();
      Complex complex11 = complex1.multiply(0.0);
      complex11.I.hashCode();
      complex11.I.readResolve();
      Complex complex12 = complex10.NaN.log();
      complex1.isNaN();
      Complex complex13 = complex5.subtract(0.0);
      complex12.NaN.log();
      complex3.equals(complex13);
      complex9.isInfinite();
      complex0.conjugate();
      complex11.pow(complex8);
      Complex complex14 = complex11.sqrt();
      Complex complex15 = Complex.valueOf((-369.3049609668725));
      complex15.reciprocal();
      complex14.pow(5.773102661099307E-214);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex((-2639.26723256));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      complex2.I.multiply(complex0);
      complex2.I.log();
      Complex complex3 = complex1.INF.cosh();
      complex3.NaN.getField();
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex4.ZERO.sqrt();
      complex5.nthRoot(1);
      complex4.nthRoot(1789);
      Complex.valueOf(51.19732256278148);
      Complex.valueOf((double) 1);
      Complex.valueOf((-2639.26723256), (-2639.26723256));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(1030.4);
      complex0.I.readResolve();
      Complex complex1 = Complex.valueOf((-1628.4792012), 0.0);
      Complex complex2 = complex0.acos();
      complex0.I.divide(complex2);
      Complex complex3 = complex0.INF.negate();
      complex2.I.atan();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex2.subtract(complex1);
      complex2.tanh();
      complex4.ONE.multiply((-184));
      complex0.equals((Object) null);
      complex4.equals(complex3);
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex1.negate();
      complex7.ZERO.exp();
      complex0.getField();
      Complex complex8 = complex5.multiply(complex6);
      Complex.valueOf(0.0, (-1628.4792012));
      Complex complex9 = complex8.add((-3355.2756783475784));
      complex9.NaN.multiply(complex3);
      Complex.valueOf(1030.4);
      complex8.atan();
      complex1.getImaginary();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1209.662775, 6.283185307179586);
      complex0.readResolve();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.NaN.pow(complex3);
      complex1.getArgument();
      Complex complex5 = Complex.valueOf(6.283185307179586);
      complex0.abs();
      complex5.ONE.tanh();
      Complex complex6 = complex5.atan();
      complex5.INF.subtract(1209.662775);
      complex6.NaN.atan();
      complex0.ONE.toString();
      complex0.hashCode();
      Complex complex7 = complex0.multiply(1209.679092833428);
      complex7.cos();
      Complex complex8 = complex1.conjugate();
      complex8.ZERO.negate();
      complex4.NaN.add(complex6);
      complex5.hashCode();
      Complex complex9 = Complex.valueOf(0.6456501483917236);
      Complex complex10 = complex3.pow(complex9);
      Complex complex11 = complex10.I.atan();
      Complex complex12 = complex11.NaN.acos();
      complex12.getField();
      Complex complex13 = Complex.valueOf((-1491.7770554));
      complex13.I.sqrt1z();
      complex13.INF.sinh();
      complex4.add(complex10);
      complex9.divide(1209.662775);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.toString();
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex0.ONE.divide(2182.28660727496);
      Complex complex3 = complex2.I.pow(4.5374504961394207E266);
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex0.ONE.negate();
      complex5.NaN.createComplex(2.458162307739258, 2.458162307739258);
      Complex complex6 = complex0.conjugate();
      Complex complex7 = Complex.NaN;
      complex2.NaN.divide(complex7);
      Complex complex8 = Complex.valueOf(4.5374504961394207E266);
      complex4.INF.multiply((double) 1);
      Complex complex9 = complex4.ZERO.conjugate();
      Complex complex10 = complex9.NaN.multiply(0.0);
      complex10.NaN.cos();
      complex0.add(complex6);
      complex3.I.multiply(4.5374504961394207E266);
      complex1.sin();
      Complex complex11 = complex2.ZERO.sin();
      Complex complex12 = complex4.exp();
      complex2.equals(complex8);
      complex6.tanh();
      complex4.add(complex12);
      complex10.add(2182.28660727496);
      complex10.getImaginary();
      complex3.pow(2.458162307739258);
      complex9.divide(complex2);
      complex5.sqrt();
      complex4.multiply(1);
      complex11.hashCode();
      Complex.valueOf(1621.4, 2182.28660727496);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.I.multiply(789.613262531);
      Complex complex4 = Complex.valueOf(0.0);
      complex0.ONE.getField();
      complex0.I.hashCode();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex1.subtract(complex0);
      Complex complex8 = complex1.divide(0.0);
      complex8.I.hashCode();
      complex7.abs();
      complex8.INF.exp();
      Complex complex9 = complex2.pow(complex1);
      Complex complex10 = complex9.I.subtract(complex1);
      complex10.I.abs();
      complex7.I.sin();
      Complex complex11 = complex0.INF.asin();
      Complex.valueOf((-3177.6869305359223), (-3177.6869305359223));
      complex5.equals(object0);
      complex7.sqrt();
      Complex.valueOf((-3177.6869305359223));
      complex6.asin();
      complex4.add(complex11);
      complex1.log();
      complex2.multiply(1368.52812791693);
      complex11.negate();
      Complex complex12 = complex3.asin();
      complex12.add(complex4);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add(0.0);
      complex1.INF.tanh();
      Complex complex2 = complex0.ONE.subtract(0.0);
      complex0.isNaN();
      Complex complex3 = complex0.NaN.log();
      complex3.INF.toString();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.exp();
      complex4.ONE.cos();
      Complex complex7 = complex6.subtract(0.0);
      complex7.I.multiply(3166.940019327682);
      complex2.equals(complex6);
      complex6.getArgument();
      Complex complex8 = Complex.valueOf(1.0);
      complex1.getArgument();
      Complex.valueOf(3166.940019327682, 0.0);
      complex2.getImaginary();
      Complex complex9 = complex6.multiply((-744.48468017507));
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex10.INF.divide(complex7);
      complex8.negate();
      complex2.add(0.0);
      complex10.divide((-744.48468017507));
      complex8.pow(complex11);
      complex7.isNaN();
      complex5.hashCode();
      complex0.sqrt1z();
      complex0.multiply(5.745586744591196E-8);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.I.multiply(complex0);
      complex3.INF.multiply(complex2);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.tanh();
      complex2.atan();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.multiply((-1003));
      complex5.getArgument();
      complex0.sin();
      complex4.divide(0.0);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = complex3.INF.multiply(0);
      complex5.INF.pow(complex4);
      complex5.ZERO.hashCode();
      Complex complex6 = complex3.NaN.conjugate();
      complex0.hashCode();
      complex0.multiply(0.21687394380569458);
      complex1.negate();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex2.tanh();
      complex2.I.sqrt();
      complex7.toString();
      complex2.multiply(complex4);
      Complex complex9 = complex5.multiply((double) 0);
      complex0.getImaginary();
      Object object0 = complex1.readResolve();
      complex6.equals(object0);
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.sqrt();
      complex8.getField();
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.sqrt();
      complex0.ZERO.add(complex2);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex0.ONE.cosh();
      Complex complex6 = complex5.I.negate();
      complex6.ZERO.getArgument();
      Complex complex7 = complex5.ZERO.add(0.0);
      complex1.hashCode();
      Complex complex8 = complex1.multiply(0.0);
      Complex complex9 = complex8.NaN.acos();
      complex9.ZERO.sqrt();
      complex8.ZERO.pow(0.0);
      Complex complex10 = complex0.NaN.sin();
      Complex complex11 = complex10.INF.divide(complex5);
      complex1.isInfinite();
      ComplexField complexField0 = complex8.getField();
      complex8.getField();
      complex0.equals(complex8);
      complex1.getArgument();
      complex6.equals((Object) null);
      complex5.abs();
      complex7.toString();
      complex11.hashCode();
      Complex complex12 = complex8.atan();
      complex12.hashCode();
      complex12.atan();
      complex11.toString();
      complex4.equals(complexField0);
      Complex complex13 = complex2.divide(0.0);
      complex13.I.cosh();
      complex4.exp();
      complex13.log();
      complex9.multiply(401.4587623);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.ONE.divide(complex0);
      complex1.INF.sin();
      complex0.getArgument();
      complex0.getReal();
      complex0.isInfinite();
      complex0.tan();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.readResolve();
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.I.multiply(0.0);
      Complex complex4 = complex3.INF.log();
      complex1.equals(complexField0);
      Complex complex5 = complex0.ZERO.sin();
      complex1.ZERO.sin();
      Complex complex6 = complex5.NaN.tanh();
      Complex complex7 = complex6.I.add(complex1);
      complex0.toString();
      complex0.readResolve();
      complex5.INF.readResolve();
      complex1.nthRoot(1444);
      complex0.getField();
      Complex complex8 = complex5.tanh();
      complex0.getImaginary();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.INF.exp();
      complex10.INF.hashCode();
      complex8.divide((double) 1444);
      complex6.I.subtract(complex2);
      complex8.sqrt();
      complex6.negate();
      complex7.atan();
      Complex.valueOf((double) 1444);
      complex8.sqrt();
      complex4.cos();
      complex4.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
      Complex complex1 = complex0.createComplex((-2897.5622626242), 2.0);
      Complex complex2 = complex1.cosh();
      complex2.INF.getArgument();
      Complex complex3 = complex1.cosh();
      complex3.cos();
      complex3.reciprocal();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-610.7139165878));
      Complex complex2 = complex1.multiply(776);
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex3.NaN.reciprocal();
      Complex complex5 = complex3.ONE.subtract(complex2);
      complex5.NaN.add((-610.7139165878));
      complex4.ZERO.tan();
      complex0.getReal();
      Complex complex6 = complex0.multiply(1368);
      Complex.valueOf(Double.NaN);
      complex6.ONE.multiply(7);
      complex0.toString();
      Complex complex7 = complex2.subtract(Double.NaN);
      Complex complex8 = complex3.sqrt1z();
      complex8.pow(complex5);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex7.log();
      Complex complex11 = complex10.divide(0.0);
      complex10.pow(complex9);
      complex8.cos();
      complex7.equals("");
      complex6.getImaginary();
      complex10.cosh();
      Complex.valueOf((-610.7139165878));
      complex11.pow(complex3);
      complex7.abs();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      try { 
        complex3.ONE.nthRoot((-1441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,441
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-886.8288));
      Complex complex2 = complex1.I.sin();
      complex0.ZERO.divide(complex2);
      Complex complex3 = Complex.valueOf(2997.1, (-1474.53128878842));
      Complex complex4 = complex0.divide(complex3);
      complex4.NaN.tanh();
      Complex complex5 = complex4.tanh();
      complex5.I.multiply(complex4);
      Complex complex6 = complex0.pow(complex2);
      complex6.subtract(complex5);
      complex1.asin();
      complex1.divide((-1331.0436511673993));
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      complex0.readResolve();
      Complex complex2 = complex0.I.add(6.283185307179586);
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.sqrt1z();
      complex5.ONE.asin();
      complex4.NaN.toString();
      complex4.ZERO.subtract(complex3);
      complex0.subtract(complex1);
      complex4.negate();
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-730));
      Complex complex2 = complex1.ZERO.subtract(2086.1775412338393);
      Complex complex3 = complex1.sqrt1z();
      complex3.NaN.add(complex0);
      complex0.acos();
      Complex complex4 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ZERO.multiply(0);
      complex5.I.add((double) 0);
      complex5.INF.log();
      Complex complex6 = Complex.valueOf((-1659.4411), (double) (-730));
      Complex complex7 = Complex.INF;
      complex6.ZERO.add(complex7);
      complex2.getImaginary();
      Complex complex8 = complex2.pow(2086.1775412338393);
      complex3.getField();
      complex8.multiply(complex3);
      complex7.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-3072.6265736802734), (-3072.6265736802734));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex1.INF.acos();
      Complex complex4 = complex3.INF.atan();
      complex3.I.nthRoot(1);
      complex3.ONE.createComplex((-3072.6265736802734), 0.0);
      Complex complex5 = Complex.valueOf((-632.236));
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.ZERO.subtract((-632.236));
      Complex complex8 = complex7.ONE.multiply(complex4);
      complex8.I.sinh();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.ONE.asin();
      Complex complex11 = complex10.I.reciprocal();
      complex10.NaN.getField();
      complex9.getImaginary();
      complex2.abs();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex11.reciprocal();
      complex13.NaN.divide(0.0);
      Complex complex14 = complex9.asin();
      complex14.INF.divide(0.0);
      Complex complex15 = complex12.tan();
      Complex complex16 = complex10.divide(complex15);
      complex6.isInfinite();
      Complex complex17 = complex2.cos();
      complex17.exp();
      complex13.cos();
      complex16.sqrt1z();
      Complex.valueOf(1073.62);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(600.198);
      Complex complex1 = complex0.add((-1231.826246912));
      complex1.INF.pow(complex0);
      Complex complex2 = complex0.ZERO.subtract(0.0);
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = Complex.valueOf((-1231.826246912), 600.198);
      complex0.getArgument();
      complex1.toString();
      Complex complex5 = complex0.sqrt();
      complex2.ZERO.negate();
      complex1.getReal();
      complex4.I.pow(complex3);
      complex5.toString();
      complex5.reciprocal();
      Complex complex6 = complex3.multiply(complex4);
      complex5.getReal();
      Complex complex7 = complex6.tan();
      complex7.I.createComplex((-631.628246912), (-1231.826246912));
      complex2.reciprocal();
      complex7.divide(600.198);
      complex5.atan();
      complex3.cosh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 0.27786844968795776);
      complex0.getArgument();
      complex0.createComplex(1.9888195459082551E-274, 0.27786844968795776);
      Complex.valueOf(1.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(1.9888195459082551E-274);
      Complex complex3 = complex0.createComplex(0.27103102515768324, 1.0);
      complex3.INF.multiply(2317);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex2.NaN.add(complex4);
      Complex complex6 = complex5.NaN.conjugate();
      complex6.ONE.sqrt1z();
      complex2.pow(1.0);
      Complex complex7 = complex2.INF.sinh();
      complex7.ONE.cosh();
      Complex complex8 = complex2.ZERO.multiply(complex0);
      complex2.sqrt();
      complex8.equals((Object) null);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-2639.26723256));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      complex2.I.multiply(complex0);
      complex2.I.log();
      Complex complex3 = complex1.INF.cosh();
      complex3.NaN.getField();
      Complex complex4 = complex0.INF.negate();
      complex4.ZERO.sqrt();
      complex4.INF.asin();
      Complex complex5 = complex3.ONE.multiply(1);
      Complex complex6 = complex5.ONE.pow(complex1);
      complex6.INF.exp();
      Complex complex7 = complex3.NaN.log();
      Complex complex8 = complex7.NaN.conjugate();
      complex8.ZERO.sqrt1z();
      complex0.abs();
      Complex complex9 = complex0.conjugate();
      Complex complex10 = complex9.asin();
      complex10.INF.toString();
      Complex complex11 = complex9.log();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.cos();
      complex0.cos();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex1.hashCode();
      Complex complex2 = complex1.ONE.createComplex(0.0, 6.283185307179586);
      complex2.INF.readResolve();
      complex0.isInfinite();
      Complex complex3 = complex0.log();
      complex0.tanh();
      complex3.NaN.conjugate();
      Complex complex4 = Complex.valueOf(0.0, 20.0);
      complex4.INF.tanh();
      complex0.NaN.log();
      complex4.asin();
      complex3.reciprocal();
      complex0.abs();
      Complex.valueOf(0.0, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.toString();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.exp();
      complex0.ONE.hashCode();
      complex1.nthRoot(37);
      Complex complex4 = complex1.I.divide(1.0);
      complex4.sin();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.ZERO.divide(21.29467518);
      complex6.ONE.tan();
      complex2.isInfinite();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex5.subtract(complex7);
      Complex complex9 = complex7.conjugate();
      complex3.negate();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex9.log();
      complex10.acos();
      Complex complex12 = complex10.negate();
      complex11.getArgument();
      complex6.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex3.ONE.tan();
      complex4.NaN.multiply(complex1);
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex5.ONE.negate();
      complex6.sin();
      Complex complex7 = complex0.NaN.divide(complex1);
      complex2.NaN.createComplex(0.0, 0.0);
      Complex complex8 = complex2.sinh();
      complex1.divide(complex2);
      complex8.I.tan();
      complex7.hashCode();
      Complex complex9 = complex2.atan();
      Complex complex10 = complex1.multiply(0.0);
      complex10.I.hashCode();
      complex10.I.readResolve();
      Complex complex11 = complex9.NaN.log();
      complex1.isNaN();
      Complex complex12 = complex5.subtract(0.0);
      complex11.NaN.log();
      complex3.equals(complex12);
      complex8.isInfinite();
      complex9.add(0.0);
      complex8.sqrt1z();
      complex11.exp();
      complex0.isNaN();
      complex8.tan();
      complex7.multiply(complex4);
      complex9.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide((-1478.6430746));
      complex0.I.cosh();
      Complex complex2 = complex1.INF.createComplex((-1478.6430746), (-1478.6430746));
      Complex complex3 = complex0.NaN.divide((-1478.6430746));
      Complex complex4 = complex0.I.divide(complex2);
      complex4.INF.getArgument();
      complex3.divide((-1478.6430746));
      Complex complex5 = complex0.atan();
      Complex complex6 = complex5.I.pow((-530.158112909869));
      Complex complex7 = complex6.NaN.atan();
      complex6.NaN.add(complex7);
      Complex complex8 = complex7.I.multiply((-1));
      complex1.getReal();
      complex0.pow(complex1);
      complex6.ONE.getArgument();
      Complex complex9 = complex2.multiply(complex5);
      Complex complex10 = complex7.cosh();
      complex9.isNaN();
      Complex complex11 = complex3.multiply(Double.NEGATIVE_INFINITY);
      complex10.tan();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex3.divide(complex12);
      complex13.INF.multiply(complex7);
      complex12.divide(complex5);
      Complex complex14 = complex11.tan();
      complex8.multiply(complex12);
      complex14.getImaginary();
      complex9.getArgument();
      complex11.hashCode();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      complex1.NaN.nthRoot(2454);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.NaN.log();
      complex3.multiply(0.0);
      Complex complex4 = complex2.ONE.pow(0.0);
      Complex complex5 = complex2.divide(complex0);
      Complex complex6 = complex5.multiply((double) 2454);
      complex1.abs();
      Complex complex7 = Complex.valueOf(0.0, (-112.22));
      complex6.ZERO.pow(0.5952457189559937);
      Complex complex8 = complex6.pow(0.0);
      complex7.INF.negate();
      Complex complex9 = complex7.conjugate();
      complex9.ZERO.sqrt();
      Complex complex10 = complex9.createComplex((-1507.78), 0.0);
      complex10.sqrt();
      Complex complex11 = complex0.tanh();
      complex7.toString();
      complex4.getArgument();
      complex8.nthRoot(1624);
      Complex complex12 = complex2.exp();
      complex12.ONE.sqrt1z();
      complex11.sin();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.readResolve();
      complex0.ZERO.toString();
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.NaN.exp();
      complex2.ONE.exp();
      complex2.I.sin();
      Complex complex3 = complex0.NaN.add(complex1);
      complex1.hashCode();
      Complex complex4 = complex3.ZERO.exp();
      complex3.NaN.multiply((-502.342652));
      Complex.valueOf((-502.342652), 0.0);
      complex0.conjugate();
      complex4.INF.multiply(4.505432606253564E64);
      complex0.readResolve();
      Complex complex5 = complex0.sin();
      complex5.I.multiply(complex1);
      int int0 = 0;
      try { 
        complex3.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-1333.27144246438), 540.2635608488843);
      complex0.I.readResolve();
      Complex complex1 = new Complex(0.0, 2040.5188867872);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.tan();
      complex2.INF.getArgument();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex2.I.conjugate();
      complex4.I.multiply(0);
      complex2.ONE.abs();
      complex3.ZERO.multiply((-1.650155887561251E-8));
      complex3.multiply((-1.650155887561251E-8));
      complex1.getReal();
      complex3.getField();
      complex1.sinh();
      complex1.toString();
      Complex.valueOf(0.0, 0.0);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.negate();
      complex2.NaN.multiply(37);
      complex2.ZERO.subtract((-1.0));
      complex1.getImaginary();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.cosh();
      complex1.ONE.tan();
      complex1.INF.log();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-8.291832428736212E-8), (-8.291832428736212E-8));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.NaN.conjugate();
      complex0.sinh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ONE.sqrt();
      complex0.add(0.0);
      Complex complex2 = null;
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = complex1.divide(complex0);
      complex2.INF.cos();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex((-3655.2111795325754), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.pow((-2029.326001));
      Complex complex4 = complex3.INF.asin();
      complex2.ZERO.abs();
      complex2.NaN.toString();
      Complex complex5 = complex0.atan();
      Object object0 = complex0.readResolve();
      Complex complex6 = complex0.ZERO.multiply(complex1);
      complex6.ONE.getField();
      complex5.INF.multiply(complex6);
      complex2.equals(object0);
      complex5.exp();
      Complex complex7 = complex0.atan();
      complex3.conjugate();
      Complex complex8 = complex7.NaN.asin();
      complex8.NaN.conjugate();
      complex2.abs();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex3.ONE.pow(complex9);
      Complex complex11 = complex7.sqrt1z();
      complex6.INF.exp();
      complex1.divide(727.0);
      complex4.tan();
      complex4.isInfinite();
      complex10.I.toString();
      complex10.tan();
      complex6.log();
      complex10.cosh();
      complex11.toString();
      complex9.getImaginary();
      complex7.subtract(complex10);
      complex7.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.I.createComplex(Double.NaN, Double.NaN);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.NaN.createComplex(Double.NaN, Double.NaN);
      complex1.ZERO.abs();
      Complex complex5 = complex1.ZERO.asin();
      complex0.isNaN();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex0.ZERO.acos();
      Complex complex9 = complex7.I.log();
      Complex complex10 = complex9.subtract(483.1943849);
      Complex complex11 = complex7.INF.log();
      Complex complex12 = complex5.sin();
      Complex complex13 = complex1.sqrt1z();
      Complex.valueOf(Double.NaN);
      complex13.ZERO.divide(complex8);
      Complex complex14 = complex12.divide(complex13);
      Complex complex15 = complex10.ZERO.pow(complex14);
      Complex complex16 = complex15.I.conjugate();
      complex12.conjugate();
      Complex complex17 = complex10.pow(Double.NaN);
      Complex complex18 = complex0.multiply(complex17);
      Complex complex19 = complex18.ZERO.log();
      complex19.I.pow(0.0);
      complex8.abs();
      complex7.pow(0.0);
      complex1.toString();
      complex11.isInfinite();
      complex17.readResolve();
      complex16.abs();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(351.4415590596, 0.0);
      complex0.pow(complex1);
      Complex.valueOf(348.2, 2.0);
      Complex complex2 = complex0.createComplex(1755.56597, 1755.56597);
      Complex complex3 = complex0.exp();
      complex3.ONE.reciprocal();
      complex0.NaN.tanh();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex0.exp();
      Complex complex6 = Complex.INF;
      complex0.ONE.add(complex6);
      complex4.ONE.conjugate();
      complex5.pow(complex4);
      complex4.sqrt();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.0724295693252266E89);
      Complex complex1 = complex0.I.log();
      complex1.ZERO.negate();
      complex0.abs();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex4.ZERO.pow(complex3);
      complex5.I.createComplex(0.0, 0.0);
      Complex complex6 = complex0.multiply(complex2);
      Complex complex7 = complex0.cosh();
      complex6.getImaginary();
      complex4.getReal();
      complex7.tanh();
      complex2.cos();
      complex3.subtract(1.0724295693252266E89);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-1263.49556), (-1263.49556));
      Complex complex1 = Complex.valueOf(0.0, 1.0);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(2826.468569887543);
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf((-1562.138));
      Complex complex4 = complex2.NaN.pow(2826.468569887543);
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.divide(complex0);
      complex7.I.atan();
      complex1.getReal();
      Complex complex8 = Complex.valueOf((-1668.0));
      Complex complex9 = Complex.valueOf(2756.54, (-1668.0));
      Complex complex10 = complex8.atan();
      complex9.getReal();
      complex1.add(complex3);
      complex9.tanh();
      complex10.multiply(1264);
      complex5.atan();
      complex3.asin();
      complex10.ONE.tan();
      complex1.getReal();
      complex2.add(complex10);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.I.divide(complex0);
      complex2.NaN.hashCode();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex3.pow(0.40285754203796387);
      complex4.ONE.nthRoot(1684);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1789);
      assertFalse(list0.contains(complex2));
      assertEquals(1789, list0.size());
      
      Complex.valueOf(1194.8843704927126);
      Complex complex5 = Complex.valueOf(0.40285754203796387);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = Complex.valueOf((-847.5264712), (-1503.0));
      assertEquals((-847.5264712), complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.sinh();
      Complex complex4 = complex3.ZERO.cos();
      complex1.INF.pow(complex4);
      int int0 = 0;
      try { 
        complex3.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex0.ZERO.atan();
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      String string0 = complex2.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.I.cosh();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.atan();
      complex8.I.getArgument();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex2.divide(complex6);
      Object object0 = complex6.readResolve();
      assertTrue(object0.equals((Object)complex10));
      
      Complex complex11 = new Complex(3021.7, 0.0);
      Complex complex12 = complex3.multiply(complex11);
      complex12.NaN.tan();
      complex4.isInfinite();
      assertSame(complex4, complex9);
      
      complex2.getImaginary();
      Complex complex13 = complex0.sqrt1z();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = Complex.valueOf(0.0);
      assertTrue(complex14.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(354.462315);
      Complex complex1 = complex0.atan();
      assertEquals((-5.551115123125783E-17), complex1.getImaginary(), 0.01);
      assertEquals(1.5679751599044067, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(1.5518584251403809);
      Complex complex1 = complex0.ZERO.multiply(1.5518584251403809);
      complex1.ZERO.tan();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.add(1.5518584251403809);
      complex0.NaN.readResolve();
      Complex complex6 = complex2.subtract(1.5518584251403809);
      complex2.I.multiply(1.5518584251403809);
      complex6.I.divide(0.0);
      complex3.multiply((-37));
      Complex complex7 = complex5.sin();
      complex6.getImaginary();
      try { 
        complex7.nthRoot((-849));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -849
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
