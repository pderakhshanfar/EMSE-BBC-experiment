/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:07:26 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-3006.664053251), (-1.0965324942770584E171));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(645.818994602284, (-2.016525972830718E-8));
      Complex complex2 = new Complex((-908.84801), 1757.157873703);
      complex0.subtract(complex1);
      complex1.nthRoot(1304);
      Complex complex3 = complex0.multiply(1.224646799147353E-15);
      Complex complex4 = Complex.valueOf(1757.157873703, 1.224646799147353E-15);
      Complex complex5 = Complex.valueOf((double) 4957);
      complex5.getField();
      complex5.multiply((-579));
      Complex complex6 = complex0.log();
      complex2.cosh();
      complex6.subtract(1757.157873703);
      Complex complex7 = complex1.add(20.0);
      complex1.hashCode();
      Complex complex8 = complex3.cos();
      complex4.cos();
      Complex complex9 = Complex.ONE;
      Complex complex10 = new Complex((-579), Double.POSITIVE_INFINITY);
      complex9.multiply(complex10);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.abs();
      complex2.sqrt();
      complex8.add((-2674.0));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-34.85885636133715));
      Complex complex1 = new Complex(696.1824, (-908.84801));
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex2.ZERO.nthRoot(4957);
      Complex complex3 = complex2.I.multiply(2.7658129956910624E-15);
      Complex.valueOf(696.1824, 2.7658129956910624E-15);
      Complex complex4 = complex1.I.multiply(4957);
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.cosh();
      complex2.NaN.subtract(complex1);
      complex1.I.hashCode();
      complex1.cos();
      complex0.cos();
      complex3.abs();
      Complex complex7 = complex5.sqrt();
      complex7.I.sinh();
      complex5.NaN.pow(complex7);
      Complex complex8 = complex7.add((double) 4957);
      complex8.ZERO.multiply(complex4);
      complex3.tanh();
      complex8.getReal();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1316.1861300127969);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.subtract(20.0);
      Complex complex4 = new Complex((-1154.61));
      complex4.hashCode();
      Complex complex5 = complex3.cos();
      complex0.cos();
      Complex complex6 = complex1.multiply(complex5);
      Complex.valueOf((-1154.61));
      complex6.abs();
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.add((-981.898));
      complex3.tanh();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.0, 1.0);
      complex1.getReal();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex3.isInfinite();
      Complex complex5 = complex1.subtract(complex3);
      complex3.NaN.abs();
      complex3.subtract(complex4);
      complex3.multiply(complex2);
      Complex complex6 = complex2.divide(complex5);
      complex6.exp();
      Complex complex7 = Complex.valueOf(1.0, 1.0);
      complex3.toString();
      complex2.tanh();
      complex7.getReal();
      Complex.valueOf(1.0, 2877.6);
      complex0.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(20.0);
      complex1.acos();
      complex0.atan();
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(722.806828762, 1226392.9401167925);
      Complex complex1 = complex0.INF.log();
      complex1.readResolve();
      complex1.getReal();
      complex0.atan();
      complex1.log();
      Complex complex2 = Complex.valueOf(1226392.9401167925, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.tan();
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2551.5896028799266, (-20.0));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.log();
      complex3.readResolve();
      complex2.getReal();
      complex1.atan();
      complex0.log();
      Complex.valueOf((-20.0), (-20.0));
      complex3.asin();
      complex1.tan();
      complex1.sqrt1z();
      complex2.createComplex(0.007838091185636855, (-20.0));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
      Complex complex2 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      complex1.NaN.add((double) 7);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getReal();
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.multiply(complex2);
      complex3.multiply((-459.7));
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.reciprocal();
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      complex3.subtract(complex5);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.getReal();
      Complex complex2 = complex1.add(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex3 = Complex.ONE;
      complex3.NaN.add(complex2);
      Complex complex4 = complex0.sqrt();
      complex3.sqrt1z();
      complex1.add(Double.NaN);
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.getReal();
      Complex complex2 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      complex1.getReal();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex4.isInfinite();
      Complex complex5 = Complex.valueOf(1.0);
      complex3.NaN.abs();
      Complex complex6 = complex3.subtract(complex4);
      Complex complex7 = complex3.multiply(complex2);
      Complex complex8 = complex5.exp();
      complex7.acos();
      complex4.atan();
      complex8.getField();
      complex1.tan();
      complex2.divide(complex3);
      complex4.getField();
      complex3.tanh();
      complex0.tanh();
      complex6.multiply(3219);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.I.multiply(complex0);
      complex3.NaN.toString();
      complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.nthRoot(7);
      Complex complex4 = complex1.conjugate();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1987770.8970306641, (-9.481088691357648E229));
      complex0.subtract(complex1);
      Complex complex2 = complex1.multiply((-9.481088691357648E229));
      Complex.valueOf(Double.POSITIVE_INFINITY, 5172.3);
      Complex complex3 = new Complex(20.0);
      complex0.log();
      complex1.hashCode();
      Complex complex4 = new Complex(2.7658129956910624E-15);
      complex2.sqrt();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.987228872666507E-7);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.createComplex(1.987228872666507E-7, (-34.85885636133715));
      Complex complex4 = Complex.valueOf(1.987228872666507E-7);
      Complex complex5 = complex1.divide(1.987228872666507E-7);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex1.multiply(1278.898);
      complex0.pow(complex7);
      Complex complex8 = complex1.multiply(1278.898);
      complex4.log();
      complex8.exp();
      Complex complex9 = new Complex(20.0, (-1.0));
      Complex complex10 = complex9.acos();
      complex0.atan();
      complex10.getField();
      complex3.tan();
      Complex complex11 = Complex.I;
      complex1.divide(complex6);
      complex1.getField();
      Complex complex12 = Complex.valueOf(-0.0);
      complex12.tanh();
      Complex complex13 = complex6.tanh();
      complex5.sin();
      complex1.sqrt();
      Complex complex14 = Complex.NaN;
      complex14.exp();
      complex4.abs();
      complex13.atan();
      complex4.nthRoot(323);
      complex14.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2883.0), (-2691.09213507));
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      complex1.subtract(complex2);
      complex2.tan();
      complex0.divide((-2691.09213507));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.getReal();
      Complex complex2 = complex1.add(Double.POSITIVE_INFINITY);
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(2721.227, (-3180.78));
      Complex complex1 = complex0.sqrt();
      complex1.NaN.divide(complex0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(192.800821);
      Complex complex1 = complex0.asin();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.negate();
      complex0.getImaginary();
      Complex complex3 = complex2.multiply(192.800821);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex2.multiply((-1.0));
      Complex complex6 = complex5.multiply(192.800821);
      Complex complex7 = complex3.tanh();
      complex0.negate();
      complex7.sinh();
      complex7.NaN.sqrt1z();
      complex7.I.abs();
      Complex complex8 = complex2.multiply(complex3);
      complex8.ONE.sqrt1z();
      complex8.I.tan();
      complex0.tan();
      Complex complex9 = Complex.valueOf(0.0, 192.800821);
      Complex complex10 = complex3.subtract(complex6);
      Complex complex11 = complex10.multiply(complex6);
      complex11.ONE.multiply((-1645.95760861701));
      Complex complex12 = complex4.reciprocal();
      complex12.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex13 = complex7.subtract(complex8);
      complex10.log();
      complex13.multiply(complex8);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      complex0.ZERO.toString();
      Complex complex2 = complex0.add(86.8);
      Complex complex3 = complex2.add(6.009097048930175E-70);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.INF.asin();
      Complex complex4 = complex2.NaN.tanh();
      complex4.NaN.reciprocal();
      Complex complex5 = complex1.sqrt();
      complex5.I.cosh();
      complex1.NaN.createComplex(86.8, 559.0);
      Complex complex6 = complex1.add(complex0);
      complex6.subtract(6.009097048930175E-70);
      Complex.valueOf(2512.0881355441);
      Complex.valueOf(2512.0881355441, 2512.0881355441);
      complex0.toString();
      complex5.negate();
      Complex.valueOf(780.9005040627308, 6.009097048930175E-70);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(832.5127, 832.5127);
      Complex complex1 = Complex.valueOf(832.5127, (-449.0));
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.subtract(0.3594330038102771);
      Complex complex5 = complex4.ZERO.tan();
      complex3.ZERO.pow(0.012503903806688754);
      complex5.NaN.asin();
      complex5.tanh();
      Complex complex6 = complex1.divide(0.3594330038102771);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ZERO.add(26.730417016038807);
      complex6.toString();
      Complex complex9 = complex4.sin();
      complex9.NaN.getArgument();
      complex9.negate();
      complex2.add(complex0);
      complex8.pow((-449.0));
      complex3.asin();
      complex3.divide(complex1);
      complex8.sqrt1z();
      complex2.pow(26.730417016038807);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.0);
      complex1.getReal();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex4.exp();
      complex3.isInfinite();
      complex1.subtract(complex3);
      complex3.NaN.abs();
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex3.multiply(complex2);
      complex2.getReal();
      Complex complex7 = complex5.multiply(Double.POSITIVE_INFINITY);
      complex7.sqrt1z();
      complex5.divide(Double.NaN);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(2669.248);
      complex0.getReal();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.subtract(complex0);
      complex1.isInfinite();
      Complex complex5 = complex2.subtract(complex3);
      complex5.abs();
      Complex complex6 = Complex.ZERO;
      complex6.subtract(complex4);
      Complex complex7 = Complex.valueOf((-5165.2475));
      complex5.multiply(complex7);
      complex5.divide(complex2);
      Complex complex8 = Complex.NaN;
      complex2.divide(216.136);
      Complex complex9 = new Complex(3490.2, Double.NaN);
      complex9.toString();
      Complex complex10 = Complex.I;
      complex10.getArgument();
      complex9.tanh();
      Complex complex11 = Complex.valueOf((-579.0), 20.0);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.48488348499207495, 0.48488348499207495);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.ONE;
      complex3.nthRoot(4957);
      Complex complex4 = complex2.multiply(0.8414709848078965);
      Complex.valueOf((-2821.51782620494), Double.NaN);
      Complex complex5 = Complex.valueOf(0.8414709848078965);
      complex5.multiply(4957);
      complex5.log();
      Complex complex6 = Complex.ONE;
      complex6.cosh();
      complex4.hashCode();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.cos();
      complex8.cos();
      Complex complex9 = Complex.valueOf((-2821.51782620494));
      complex6.abs();
      complex8.sqrt();
      complex8.add(2.8614950293715483E-8);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex0.INF.tan();
      complex0.divide(1675.85165);
      Complex complex2 = Complex.INF;
      complex1.reciprocal();
      complex1.add(complex0);
      Complex.valueOf((-73.23668066874826));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(401.0, 2361.01403376758);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.subtract(complex2);
      complex3.isInfinite();
      complex1.subtract(complex3);
      complex1.abs();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.ONE;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = new Complex((-3250.97), 1.8487854656676722E-177);
      Complex complex2 = complex1.subtract(complex0);
      complex2.nthRoot(1658);
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3250.97));
      complex2.multiply((-2147069575));
      Complex complex5 = complex1.log();
      Complex complex6 = complex4.cosh();
      complex5.hashCode();
      Complex complex7 = complex6.cos();
      complex2.cos();
      Complex.valueOf(2.7658129956910624E-15);
      complex3.abs();
      complex7.sqrt();
      complex0.add(1.8487854656676722E-177);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.0);
      complex1.getReal();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex3.isInfinite();
      Complex complex5 = complex1.subtract(complex3);
      complex3.NaN.abs();
      complex3.subtract(complex4);
      complex3.multiply(complex2);
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex6.exp();
      complex6.divide(1.0);
      complex3.toString();
      Complex complex8 = complex7.add((-1.4255188208147591));
      Complex complex9 = Complex.valueOf((-1.4255188208147591));
      complex9.multiply(1.0);
      complex8.getReal();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.subtract(2251.7671967983);
      Complex complex3 = complex2.multiply(complex0);
      Complex.valueOf((-20.0));
      Complex complex4 = complex0.sqrt();
      complex3.asin();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.ONE;
      complex0.equals(complex6);
      Complex complex7 = complex1.multiply((-2083.287));
      Complex complex8 = new Complex((-6.751434891261518E-56), (-6.751434891261518E-56));
      complex8.conjugate();
      Complex complex9 = complex7.log();
      Complex complex10 = Complex.ONE;
      complex9.readResolve();
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = Complex.valueOf(1182.8713380943575, 1182.8713380943575);
      complex6.I.cosh();
      complex2.tanh();
      complex0.ONE.divide(20.0);
      Complex complex7 = complex2.pow(1182.8713380943575);
      complex0.multiply(1182.8713380943575);
      complex4.getField();
      Complex complex8 = complex3.createComplex(20.0, 20.0);
      Complex complex9 = complex8.ONE.subtract(1182.8713380943575);
      complex9.pow(complex7);
      complex3.subtract(complex5);
      complex5.conjugate();
      complex7.conjugate();
      complex6.abs();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(696.1824, (-34.85885636133715));
      Complex complex1 = new Complex(696.1824, (-908.84801));
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.I.multiply(2.7658129956910624E-15);
      Complex complex4 = Complex.valueOf(696.1824, 2.7658129956910624E-15);
      complex2.I.getField();
      complex4.ZERO.getField();
      Complex complex5 = complex1.I.multiply((-579));
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = new Complex((-579));
      complex7.abs();
      complex4.multiply(complex2);
      complex4.tan();
      Complex complex8 = complex6.tan();
      Complex complex9 = Complex.valueOf((-4135.864), (-380.9843027401736));
      complex8.subtract(complex3);
      Complex complex10 = complex5.multiply(complex9);
      Complex complex11 = Complex.INF;
      complex11.reciprocal();
      Complex complex12 = new Complex(2.7658129956910624E-15);
      Complex complex13 = complex12.subtract(complex10);
      complex10.log();
      Complex complex14 = Complex.NaN;
      complex14.multiply(complex6);
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.0);
      complex1.getReal();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex4.isInfinite();
      Complex complex5 = complex1.subtract(complex4);
      complex3.abs();
      Complex complex6 = complex2.subtract(complex1);
      complex5.multiply(complex4);
      complex0.divide(complex2);
      complex6.exp();
      complex3.divide(1.0);
      Complex complex7 = Complex.NaN;
      complex7.toString();
      Complex complex8 = complex2.multiply((-690));
      complex4.getArgument();
      complex4.tanh();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2721.227, (-5165.2475));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(2721.227);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-5165.2475), 2721.227);
      Complex complex5 = complex0.multiply(complex2);
      complex5.multiply(complex1);
      Complex.valueOf(248.446998988);
      complex4.sqrt();
      Complex complex6 = new Complex((-385.7), 2721.227);
      complex6.asin();
      complex2.tanh();
      complex4.pow(5442.453960081586);
      Complex complex7 = complex3.createComplex(248.446998988, 5.259099728747367E-8);
      Complex complex8 = complex2.tanh();
      complex4.log();
      complex8.log();
      complex7.equals(complex1);
      complex2.subtract((-3811.00725542));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(1675.85165);
      double double0 = 2427.4099828;
      Complex complex3 = complex0.divide(2427.4099828);
      Complex complex4 = complex3.subtract((-2083.287));
      complex4.multiply(complex2);
      Complex complex5 = Complex.valueOf((-1.4255188208147591));
      Complex complex6 = complex5.sqrt();
      complex0.asin();
      complex1.tanh();
      try { 
        complex6.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1109.6385294), (-1109.6385294));
      Complex complex1 = complex0.I.atan();
      complex1.INF.hashCode();
      complex0.add((-1109.6385294));
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.ONE;
      Complex.valueOf((-1109.6385294));
      Complex complex4 = complex3.pow(5.259099728747367E-8);
      Complex complex5 = complex4.createComplex((-1470.030266017582), (-1109.6385294));
      complex5.tanh();
      complex5.log();
      Complex complex6 = complex2.log();
      Complex complex7 = Complex.I;
      complex7.equals("");
      complex6.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(1675.85165);
      Complex complex3 = complex0.divide(2427.4099828);
      Complex complex4 = complex3.subtract((-2083.287));
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = Complex.valueOf((-1.4255188208147591));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.tanh();
      complex8.equals(complex9);
      complex7.multiply(1675.85165);
      complex6.conjugate();
      complex5.log();
      Complex.valueOf(1005.7288821);
      complex5.readResolve();
      complex1.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.0);
      complex1.getReal();
      Complex complex2 = complex0.subtract(complex1);
      complex2.nthRoot(4957);
      Complex complex3 = complex2.multiply(2123.487200132346);
      Complex.valueOf(1727.2365905886, 3491279.95637355);
      complex1.getField();
      Complex complex4 = complex2.multiply((-579));
      Complex complex5 = complex4.log();
      complex5.cosh();
      Complex complex6 = complex2.subtract(1727.2365905886);
      Complex complex7 = new Complex(1727.2365905886, 0.9999999999979128);
      complex7.hashCode();
      Complex complex8 = complex3.cos();
      complex4.cos();
      Complex complex9 = Complex.valueOf((-1031036.1599999999));
      complex9.multiply(complex2);
      Complex.valueOf(3491279.95637355);
      complex6.abs();
      complex8.sqrt();
      complex6.add(2123.487200132346);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(696.1824, (-34.85885636133715));
      Complex complex1 = new Complex(696.1824, (-908.84801));
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex2.ZERO.nthRoot(4957);
      Complex complex3 = complex2.I.multiply(2.7658129956910624E-15);
      Complex.valueOf(696.1824, 2.7658129956910624E-15);
      complex2.I.getField();
      Complex complex4 = complex1.I.multiply((-579));
      Complex complex5 = complex4.log();
      complex0.cosh();
      Complex complex6 = complex1.subtract((-34.85885636133715));
      complex1.I.hashCode();
      complex6.cos();
      complex6.cos();
      complex4.multiply(complex1);
      Complex.valueOf(696.1824);
      complex3.abs();
      Complex complex7 = complex5.sqrt();
      complex7.add((double) (-579));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.cos();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.sin();
      Complex complex8 = complex0.add(complex4);
      complex0.getArgument();
      complex5.getField();
      complex4.reciprocal();
      Complex complex9 = complex5.negate();
      Complex complex10 = complex7.atan();
      Complex complex11 = complex4.negate();
      complex8.ONE.pow(complex10);
      complex6.sqrt();
      complex10.subtract(0.0);
      Complex complex12 = complex6.pow(0.0);
      complex8.acos();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex13.acos();
      complex12.divide(complex11);
      complex14.divide(0.0);
      complex4.add(complex3);
      complex1.readResolve();
      Complex complex15 = complex8.multiply(0.0);
      complex15.I.reciprocal();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(1675.85165);
      Complex complex3 = complex0.divide(2427.4099828);
      Complex complex4 = complex3.subtract((-2083.287));
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = Complex.valueOf((-1.4255188208147591));
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.tanh();
      complex5.pow(5.259099728747367E-8);
      Complex complex10 = complex4.createComplex(2427.4099828, Double.NaN);
      complex4.tanh();
      Complex complex11 = complex8.log();
      complex11.ZERO.log();
      complex7.equals(complex9);
      complex10.subtract(5.259099728747367E-8);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.I.sqrt1z();
      complex1.I.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex5 = complex4.reciprocal();
      complex3.subtract(complex1);
      Complex complex6 = complex4.log();
      complex1.multiply(complex4);
      complex0.subtract(complex6);
      // Undeclared exception!
      complex5.nthRoot(1575028746);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.INF.pow(0.0);
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.multiply((-10.52382228));
      Complex complex4 = complex3.acos();
      complex1.I.multiply(0);
      Complex complex5 = Complex.valueOf((-8.571477929711754E-270));
      Complex complex6 = complex5.reciprocal();
      complex6.ONE.reciprocal();
      Complex complex7 = complex6.NaN.divide(complex4);
      complex1.multiply(complex4);
      complex1.sinh();
      complex2.readResolve();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.NaN.add((-236.9738568177454));
      complex8.NaN.subtract(1.0);
      Complex complex10 = complex3.multiply(complex1);
      complex10.NaN.cosh();
      complex1.isInfinite();
      complex8.getArgument();
      Complex complex11 = complex5.cos();
      Complex complex12 = complex11.sqrt1z();
      complex3.sin();
      complex10.equals(complex12);
      Complex.valueOf(Double.NaN);
      Complex complex13 = complex0.sin();
      complex9.log();
      complex13.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(192.800821);
      Complex complex1 = complex0.asin();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.negate();
      complex0.getImaginary();
      Complex complex3 = complex2.multiply(192.800821);
      Complex complex4 = complex3.ONE.tan();
      Complex complex5 = complex2.multiply((-1.0));
      Complex complex6 = complex5.multiply(192.800821);
      Complex complex7 = complex3.tanh();
      complex0.negate();
      complex7.sinh();
      complex7.NaN.sqrt1z();
      complex7.I.abs();
      Complex complex8 = complex2.multiply(complex3);
      complex8.ONE.sqrt1z();
      complex8.I.tan();
      complex0.tan();
      Complex complex9 = Complex.valueOf(0.0, 192.800821);
      Complex complex10 = complex3.subtract(complex6);
      Complex complex11 = complex10.multiply(complex6);
      complex11.ONE.multiply((-1645.95760861701));
      complex4.reciprocal();
      Complex complex12 = complex7.subtract(complex8);
      complex10.log();
      complex12.multiply(complex8);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(321.0);
      complex0.toString();
      Complex complex3 = complex2.exp();
      complex0.subtract(complex2);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = new Complex(321.0, 321.0);
      complex2.getArgument();
      Complex complex7 = Complex.INF;
      complex6.negate();
      complex5.atan();
      complex1.sqrt();
      Complex complex8 = complex6.multiply(complex0);
      Complex complex9 = Complex.valueOf((-3.141592653589793));
      Complex complex10 = complex7.sqrt();
      complex8.asin();
      complex9.hashCode();
      complex5.tanh();
      complex2.pow((-3.141592653589793));
      Complex complex11 = new Complex(6.283185307179586, 6.283185307179586);
      complex11.createComplex((-3.141592653589793), (-1.0));
      complex10.tanh();
      complex4.log();
      Object object0 = new Object();
      complex9.equals(object0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1109.6385294), (-1109.6385294));
      Complex complex1 = complex0.I.atan();
      complex1.INF.hashCode();
      Complex complex2 = complex0.add((-1109.6385294));
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.subtract(complex0);
      complex0.abs();
      complex0.subtract(complex4);
      Complex complex5 = new Complex(1569.2658576092163);
      Complex complex6 = complex5.multiply(complex4);
      Complex complex7 = Complex.INF;
      complex7.divide(complex5);
      complex2.exp();
      Complex complex8 = complex6.divide((-2821.7));
      Complex complex9 = Complex.ONE;
      complex9.toString();
      complex5.multiply(943);
      complex5.getArgument();
      complex3.tanh();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(192.800821);
      Complex complex1 = complex0.asin();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      Complex complex3 = complex1.negate();
      complex0.getImaginary();
      Complex complex4 = complex3.multiply(192.800821);
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex3.multiply((-1.0));
      Complex complex7 = complex6.multiply(192.800821);
      complex4.divide(complex7);
      Complex complex8 = Complex.valueOf(0.0, 2261.8);
      complex1.multiply(complex8);
      Complex complex9 = Complex.NaN;
      complex9.sinh();
      complex6.readResolve();
      complex2.negate();
      Complex complex10 = complex2.add(192.800821);
      complex8.subtract(2261.8);
      complex2.multiply(complex0);
      complex10.cosh();
      complex7.isInfinite();
      complex0.getArgument();
      complex1.cos();
      complex5.sqrt1z();
      complex1.sin();
      Complex complex11 = Complex.NaN;
      complex3.equals(complex11);
      Complex.valueOf(0.0);
      complex0.sin();
      complex0.log();
      complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      complex0.ZERO.sqrt();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = Complex.valueOf(20.0, (double) 1);
      complex3.isInfinite();
      Complex complex4 = complex2.subtract(complex3);
      complex2.abs();
      complex4.NaN.divide(complex2);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = complex0.multiply(complex5);
      complex5.divide(complex4);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex6.divide(Double.NaN);
      complex6.toString();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.subtract(complex7);
      complex10.multiply(1264);
      complex3.getArgument();
      Complex complex11 = complex8.tanh();
      complex8.acos();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2721.227, (-5165.2475));
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(2721.227);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf((-5165.2475), 2721.227);
      Complex complex5 = complex0.multiply(complex2);
      complex3.sqrt1z();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex0.tan();
      Complex complex8 = Complex.valueOf(0.9842031291929904, 308.5626);
      Complex complex9 = complex6.subtract(complex3);
      complex1.multiply(complex5);
      complex1.abs();
      complex7.multiply(1);
      complex9.getField();
      complex4.pow((-5165.2475));
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(192.800821);
      Complex complex1 = complex0.asin();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.negate();
      complex0.getImaginary();
      Complex complex3 = complex2.multiply(192.800821);
      complex3.ONE.tan();
      Complex complex4 = complex2.multiply(0.42608439922332764);
      Complex complex5 = complex4.multiply(192.800821);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex6.NaN.sqrt1z();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.multiply(complex8);
      complex4.divide(complex3);
      Complex complex12 = complex10.exp();
      Complex complex13 = complex5.divide(0.0);
      complex11.toString();
      complex13.subtract(complex7);
      complex12.multiply(943);
      complex10.getArgument();
      complex9.tanh();
      Complex complex14 = new Complex(0.7853981633974483);
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-63.2959), (-63.2959));
      complex1.atan();
      complex0.hashCode();
      complex1.add((-151.42476237910276));
      complex0.log();
      Complex complex2 = Complex.ONE;
      Complex.valueOf((-151.42476237910276));
      Complex complex3 = Complex.valueOf((-63.2959), (-151.42476237910276));
      complex3.equals(complex0);
      complex1.multiply((-1064.486166096));
      complex3.conjugate();
      complex0.log();
      Complex.valueOf(3287.2959430884);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(5.259099728747365E-8);
      complex0.INF.nthRoot(1164);
      Complex complex1 = complex0.multiply(970);
      Complex complex2 = complex0.asin();
      complex1.ZERO.getArgument();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.negate();
      complex4.ZERO.atan();
      complex4.NaN.sqrt();
      Complex complex5 = complex3.I.multiply(complex1);
      Complex complex6 = Complex.valueOf(0.0);
      complex6.ZERO.sqrt();
      complex5.ONE.asin();
      complex2.hashCode();
      complex3.tanh();
      Complex complex7 = complex5.pow(5.259099728747365E-8);
      Complex complex8 = complex7.ZERO.createComplex(6.283185307179586, 1164);
      Complex complex9 = Complex.INF;
      complex9.getArgument();
      complex8.tanh();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(192.800821, 192.800821);
      Complex complex1 = complex0.asin();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.negate();
      complex1.I.sqrt();
      complex0.getImaginary();
      Complex complex3 = complex2.multiply(192.800821);
      complex3.ONE.tan();
      Complex complex4 = complex2.multiply((-1.0));
      Complex complex5 = complex4.multiply(192.800821);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex0.negate();
      complex6.sinh();
      Complex complex8 = complex6.NaN.sqrt1z();
      complex6.I.abs();
      Complex complex9 = complex2.multiply(complex3);
      Complex complex10 = complex9.ONE.sqrt1z();
      Complex complex11 = complex9.I.tan();
      Complex complex12 = Complex.NaN;
      Complex.valueOf(192.800821, 192.800821);
      Complex complex13 = complex3.subtract(complex5);
      complex11.INF.multiply(259);
      Complex.valueOf((-1.0));
      complex13.abs();
      complex8.multiply(1);
      complex11.getField();
      complex11.pow((-20.0));
      complex7.getReal();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(192.800821);
      Complex complex1 = complex0.asin();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      Complex complex3 = complex1.negate();
      complex0.getImaginary();
      Complex complex4 = complex3.multiply(192.800821);
      Complex complex5 = complex4.ONE.tan();
      Complex complex6 = complex3.multiply((-1.0));
      complex6.multiply(192.800821);
      Complex complex7 = complex4.tanh();
      complex0.negate();
      complex7.sinh();
      complex7.NaN.sqrt1z();
      complex7.I.abs();
      Complex complex8 = complex3.multiply(complex4);
      complex8.ONE.sqrt1z();
      complex8.I.tan();
      complex4.asin();
      complex1.hashCode();
      Complex complex9 = Complex.NaN;
      complex9.tanh();
      complex5.pow(4.735781872502109E-8);
      complex8.createComplex((-2292.947327385), (-2292.947327385));
      complex2.tanh();
      Complex complex10 = Complex.valueOf(2462595.331857989);
      complex10.log();
      Complex complex11 = new Complex(4.735781872502109E-8, 4.735781872502109E-8);
      complex11.equals("");
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex1.isNaN();
      complex1.NaN.abs();
      complex0.exp();
      complex1.toString();
      Complex complex2 = new Complex(Double.NaN, Double.NaN);
      complex2.ZERO.abs();
      complex2.ZERO.multiply(943);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = Complex.ZERO;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex3.INF.negate();
      Complex.valueOf((-1598.3));
      Complex complex5 = complex4.sqrt();
      complex2.NaN.atan();
      complex0.hashCode();
      Complex complex6 = complex1.divide((-1.0));
      Complex complex7 = Complex.valueOf((-1.0), (-1.0));
      complex7.ZERO.toString();
      Complex complex8 = complex0.I.add((-1.0));
      complex8.ZERO.sinh();
      Complex complex9 = complex0.NaN.sinh();
      complex9.INF.multiply(complex6);
      Complex complex10 = complex0.multiply((-731.667198103));
      complex10.NaN.readResolve();
      Complex complex11 = complex3.add(complex1);
      complex11.I.multiply(complex5);
      complex0.getImaginary();
      Complex complex12 = complex2.asin();
      Complex complex13 = complex7.subtract((-731.667198103));
      complex12.add(complex9);
      Complex.valueOf(2608.43072);
      complex11.ONE.hashCode();
      complex13.sqrt();
      Complex complex14 = complex4.add(complex11);
      complex14.readResolve();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-63.2959), (-63.2959));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.add((-63.2959));
      Complex complex4 = complex0.NaN.divide(complex1);
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex5.INF.multiply((-63.2959));
      Complex complex7 = complex5.createComplex(0.0, (-968.84));
      complex2.NaN.getArgument();
      complex7.ZERO.exp();
      Complex complex8 = complex2.NaN.createComplex((-63.2959), (-702.9818425976306));
      complex0.ZERO.toString();
      Complex complex9 = complex8.INF.divide((-702.9818425976306));
      complex2.NaN.conjugate();
      complex9.ZERO.conjugate();
      complex0.equals(complex2);
      Complex complex10 = complex9.cosh();
      complex10.ONE.acos();
      complex9.ZERO.log();
      complex0.isInfinite();
      complex5.NaN.cosh();
      Complex complex11 = Complex.valueOf((-1098.400572037));
      complex11.NaN.multiply(complex7);
      Complex complex12 = complex0.multiply((-63.2959));
      complex12.add(complex6);
      Complex complex13 = complex9.asin();
      complex0.readResolve();
      complex13.NaN.abs();
      complex13.NaN.log();
      Complex complex14 = complex0.cosh();
      complex14.I.toString();
      complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-2065.554));
      Complex complex1 = complex0.log();
      complex1.NaN.hashCode();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.createComplex(2939.589012562237, 0.0);
      complex2.INF.add(0.0);
      complex2.ZERO.exp();
      Complex complex3 = complex1.sqrt();
      complex3.pow(0.0);
      Complex complex4 = complex0.exp();
      complex4.hashCode();
      complex3.negate();
      complex4.getImaginary();
      complex0.divide(5.543727690168612E-237);
      Complex.valueOf(5.543727690168612E-237, 0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-2.4591344661022708E-8), 2.2845563888549805);
      complex0.getField();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.NaN.tan();
      complex0.toString();
      complex0.getImaginary();
      Complex complex4 = complex1.INF.exp();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex6.ZERO.subtract(5595.485893762313);
      complex7.ONE.negate();
      complex5.toString();
      complex0.I.createComplex(5595.485893762313, 5595.485893762313);
      complex3.divide((-2.4591344661022708E-8));
      Complex complex8 = complex0.pow(2.2845563888549805);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.ONE.divide(complex9);
      Complex complex11 = complex6.cosh();
      complex11.INF.tanh();
      Complex complex12 = complex8.sin();
      complex2.readResolve();
      Complex complex13 = complex6.multiply(0);
      complex13.INF.readResolve();
      complex5.reciprocal();
      complex8.multiply(complex10);
      complex9.toString();
      complex7.hashCode();
      complex12.tanh();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.ZERO.log();
      complex3.INF.subtract(complex1);
      complex3.ZERO.atan();
      Complex complex4 = complex0.subtract(complex1);
      complex4.acos();
      complex2.atan();
      complex2.NaN.atan();
      double double0 = (-1014.1403138);
      Complex.valueOf((-1014.1403138));
      complex0.NaN.sqrt1z();
      complex0.ONE.reciprocal();
      try { 
        complex2.INF.nthRoot((-2041));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,041
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.NaN.tan();
      Complex complex4 = complex3.divide(complex2);
      complex4.NaN.divide(complex0);
      complex0.divide((-2.5316384477288628E8));
      Complex complex5 = Complex.valueOf((-2.5316384477288628E8), (-2.5316384477288628E8));
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex6.I.reciprocal();
      complex6.INF.cosh();
      Complex complex8 = complex0.createComplex((-2.5316384477288628E8), (-2.5316384477288628E8));
      complex8.INF.readResolve();
      Complex complex9 = complex7.asin();
      complex9.INF.add((-2.5316384477288628E8));
      complex9.NaN.multiply(1);
      complex9.NaN.sin();
      Complex complex10 = Complex.valueOf((-2.5316384477288628E8));
      Object object0 = complex10.readResolve();
      complex10.ONE.getArgument();
      complex6.equals(object0);
      complex10.sqrt1z();
      Complex complex11 = complex8.tan();
      complex11.getField();
      complex8.subtract((-2.5316384477288628E8));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1311.6593, 0.0);
      Complex complex1 = Complex.valueOf((-20.0), 0.0);
      Complex complex2 = complex1.I.conjugate();
      complex0.I.toString();
      complex2.getField();
      complex0.I.getArgument();
      Complex complex3 = complex0.tan();
      complex2.ONE.conjugate();
      Complex complex4 = complex3.INF.sinh();
      complex3.INF.readResolve();
      complex1.getReal();
      Complex complex5 = Complex.valueOf((-20.0));
      Complex complex6 = Complex.valueOf(1311.6593, 1.5707963267948966);
      Complex complex7 = complex0.divide(complex6);
      complex6.subtract(1.5707963267948966);
      Complex complex8 = Complex.valueOf((-20.0), 0.0);
      Complex complex9 = complex2.asin();
      Complex complex10 = complex5.createComplex(1311.6593, 0.0);
      Complex complex11 = complex10.ZERO.sinh();
      complex11.NaN.exp();
      Complex complex12 = complex2.ONE.exp();
      complex12.INF.getArgument();
      complex5.nthRoot(619);
      complex8.reciprocal();
      complex2.multiply(619);
      Complex complex13 = complex8.atan();
      complex13.I.multiply(complex7);
      complex9.multiply(0.0);
      complex4.multiply(complex2);
      complex11.acos();
      complex9.nthRoot(619);
      complex3.multiply(1171);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.nthRoot(1);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.ZERO.multiply(1234);
      complex3.INF.asin();
      Complex complex4 = complex1.ZERO.atan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.multiply(complex5);
      Complex complex7 = complex6.sqrt1z();
      complex1.reciprocal();
      complex7.NaN.subtract(complex4);
      complex3.log();
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2136.03442551043));
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.add((-20.0));
      Complex complex4 = complex3.ZERO.add(complex0);
      complex0.I.readResolve();
      complex1.INF.pow(complex3);
      complex0.getArgument();
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.ZERO.divide(3.141592653589793);
      complex6.NaN.acos();
      complex6.INF.abs();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex0.isInfinite();
      complex1.toString();
      Complex complex8 = complex1.atan();
      complex2.hashCode();
      Complex complex9 = complex7.subtract((-4.6753408714233723E244));
      Complex complex10 = complex9.I.sin();
      Complex complex11 = complex9.INF.sqrt1z();
      complex4.NaN.toString();
      Complex complex12 = complex11.sinh();
      complex12.exp();
      complex5.getField();
      complex7.hashCode();
      complex8.negate();
      complex4.tanh();
      Complex complex13 = complex8.multiply(311);
      Complex.valueOf(0.0, (-2136.03442551043));
      Complex complex14 = complex13.tan();
      complex14.INF.exp();
      Complex complex15 = complex5.multiply(complex2);
      complex15.atan();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(192.800821);
      Complex complex1 = complex0.asin();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.negate();
      complex0.getImaginary();
      Complex complex3 = complex2.multiply(192.800821);
      complex3.ONE.tan();
      Complex complex4 = complex2.multiply((-1.0));
      Complex complex5 = complex4.multiply(192.800821);
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex0.negate();
      complex6.sinh();
      Complex complex8 = complex6.NaN.sqrt1z();
      complex6.I.abs();
      Complex complex9 = complex2.multiply(complex3);
      complex9.ONE.sqrt1z();
      Complex complex10 = complex9.I.tan();
      complex0.tan();
      Complex.valueOf(0.0, 192.800821);
      Complex complex11 = complex3.subtract(complex5);
      complex11.multiply(complex5);
      complex11.abs();
      complex8.multiply(1);
      complex10.getField();
      complex10.pow((-20.0));
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex1.ONE.divide((-1.0));
      complex1.tanh();
      complex4.ONE.multiply(1);
      Complex complex6 = complex1.sqrt();
      complex4.isNaN();
      Complex complex7 = complex4.divide(Double.POSITIVE_INFINITY);
      complex7.I.multiply(2999);
      complex3.getReal();
      Complex complex8 = complex5.pow(Double.NaN);
      complex5.nthRoot(1);
      complex8.ZERO.sqrt();
      Complex complex9 = complex6.sqrt1z();
      complex9.I.multiply((-1241));
      Complex complex10 = complex8.createComplex(1, 1);
      complex10.ONE.multiply(complex0);
      complex2.isInfinite();
      complex3.reciprocal();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.INF.pow(0.0);
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex0.multiply((-10.52382228));
      Complex complex4 = complex3.acos();
      complex1.I.multiply(0);
      Complex complex5 = Complex.valueOf((-8.571477929711754E-270));
      Complex complex6 = complex5.reciprocal();
      complex6.ONE.reciprocal();
      complex6.NaN.divide(complex4);
      Complex complex7 = Complex.valueOf(1.0, (-8.571477929711754E-270));
      complex1.multiply(complex4);
      complex1.sinh();
      complex7.readResolve();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.NaN.add((-236.9738568177454));
      complex8.NaN.subtract(1.0);
      Complex complex10 = complex3.multiply(complex1);
      complex10.NaN.cosh();
      complex1.isInfinite();
      complex8.getArgument();
      Complex complex11 = complex5.cos();
      Complex complex12 = complex11.sqrt1z();
      complex7.sin();
      complex10.equals(complex12);
      Complex.valueOf(3.141592653589793);
      Complex complex13 = complex0.sin();
      complex9.log();
      complex13.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex((-6.751434891261518E-56), (-6.751434891261518E-56));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cosh();
      complex0.atan();
      try { 
        complex2.nthRoot((-1170));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,170
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow(6.533561982617909E-227);
      complex0.hashCode();
      complex0.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.exp();
      complex3.negate();
      Complex complex4 = complex3.I.cos();
      complex4.ONE.conjugate();
      complex4.divide(complex1);
      complex2.abs();
      Complex complex5 = complex2.asin();
      complex5.NaN.readResolve();
      Complex complex6 = Complex.I;
      complex5.INF.toString();
      complex6.NaN.log();
      complex6.ONE.readResolve();
      Complex complex7 = complex6.asin();
      complex7.ONE.sqrt1z();
      complex5.divide(complex6);
      complex5.subtract(Double.NaN);
      complex6.atan();
      try { 
        complex2.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-141.64402391924));
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex0.ZERO.sqrt();
      complex3.subtract((-2189.3489562));
      Complex complex4 = complex1.INF.divide((-2189.3489562));
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.valueOf((-141.64402391924));
      complex5.multiply((-141.64402391924));
      Complex complex7 = complex5.NaN.cos();
      Complex complex8 = complex6.INF.cosh();
      Complex.valueOf((-2189.3489562), 726.1);
      complex8.NaN.conjugate();
      complex5.ZERO.hashCode();
      complex5.I.divide(20.0);
      complex0.multiply(complex5);
      complex5.sinh();
      complex0.abs();
      Complex complex9 = complex0.divide((-141.64402391924));
      complex9.NaN.sinh();
      Complex complex10 = complex4.pow(complex1);
      complex10.isInfinite();
      Complex.valueOf(0.0);
      complex10.getArgument();
      complex7.toString();
      complex2.tanh();
      complex1.getField();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      complex0.createComplex(1066.9, 1066.9);
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.asin();
      complex2.ONE.createComplex(0.0, 0.0);
      complex0.getImaginary();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.toString();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex2.I.acos();
      complex1.INF.conjugate();
      Complex complex4 = complex1.divide((-31.59205716481024));
      complex4.ONE.asin();
      Complex complex5 = complex0.createComplex((-31.59205716481024), (-31.59205716481024));
      complex5.pow(complex3);
      Complex complex6 = complex0.tan();
      complex0.conjugate();
      complex2.pow(complex6);
      Complex.valueOf(5.941927186144745E123);
      complex3.add(complex6);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.751460509863465E-258);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.I.readResolve();
      Complex complex2 = complex1.log();
      complex2.INF.cosh();
      Complex complex3 = complex2.NaN.sin();
      complex0.hashCode();
      Complex complex4 = Complex.valueOf(0.0, (-2201.8240672));
      Complex complex5 = complex1.cos();
      complex1.sin();
      complex4.INF.multiply((-2001));
      Complex complex6 = complex5.pow(0.0);
      complex4.reciprocal();
      complex6.getField();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1109.6385294), (-1109.6385294));
      Complex complex1 = complex0.I.atan();
      complex1.INF.hashCode();
      Complex complex2 = complex0.add((-1109.6385294));
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.ONE;
      Complex.valueOf((-1109.6385294));
      complex3.equals(complex4);
      complex4.multiply((-1109.6385294));
      complex2.conjugate();
      complex4.log();
      Complex.valueOf(1773.3431067398);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ONE.log();
      complex2.NaN.subtract((-1.0));
      Complex complex3 = complex0.divide(1176.03);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.subtract(2.1906094551086426);
      complex6.ONE.add(1176.03);
      complex6.I.asin();
      complex5.acos();
      complex3.divide(2.1906094551086426);
      Complex complex7 = complex1.exp();
      complex3.reciprocal();
      complex2.getReal();
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-112.96000306));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.0);
      complex1.getReal();
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex3.isInfinite();
      Complex complex5 = complex1.subtract(complex3);
      complex3.NaN.abs();
      Complex complex6 = complex3.subtract(complex4);
      complex3.multiply(complex2);
      Complex complex7 = complex2.divide(complex5);
      complex7.exp();
      complex7.divide(1.0);
      complex3.toString();
      Complex complex8 = complex0.subtract(complex3);
      complex8.ZERO.multiply(943);
      complex2.getArgument();
      complex2.tanh();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.subtract(1.0);
      complex0.log();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(1436);
      complex2.ONE.cosh();
      Complex complex3 = complex1.NaN.add(1.450735092163086);
      complex3.INF.reciprocal();
      complex1.hashCode();
      Complex complex4 = complex3.NaN.cosh();
      complex0.INF.hashCode();
      Complex complex5 = complex0.ZERO.tan();
      complex5.NaN.reciprocal();
      Complex.valueOf((-2146.2234585533383), 1.450735092163086);
      Complex complex6 = complex4.ONE.pow((-2146.2234585533383));
      complex6.I.sin();
      complex3.sinh();
      complex3.multiply((-4058));
      complex3.pow((double) (-4058));
      complex0.acos();
      Complex complex7 = complex5.conjugate();
      complex7.readResolve();
      complex0.equals("Ux0K59VCT{DdU/T");
      complex5.sin();
      Complex complex8 = complex0.reciprocal();
      complex6.getImaginary();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex((-705.90291192904));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.subtract((-705.90291192904));
      Complex complex4 = complex2.INF.sin();
      complex0.NaN.subtract(complex3);
      complex3.INF.getField();
      complex3.INF.toString();
      complex0.isInfinite();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex0.pow(complex2);
      complex6.acos();
      complex0.NaN.multiply((-931));
      Complex complex7 = complex5.sqrt();
      complex1.readResolve();
      complex4.log();
      complex3.reciprocal();
      complex3.multiply((double) (-931));
      complex6.subtract(0.0);
      complex0.NaN.conjugate();
      complex7.ONE.divide(0.0);
      try { 
        complex6.nthRoot((-931));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -931
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2871.598750251173, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.reciprocal();
      complex1.ZERO.getField();
      Complex complex4 = complex0.I.conjugate();
      complex4.ONE.tanh();
      complex3.ZERO.divide((double) 1053);
      Complex complex5 = complex1.multiply(1053);
      complex2.subtract(complex5);
      Complex complex6 = Complex.valueOf(0.0, 2871.598750251173);
      Complex complex7 = complex1.ZERO.tan();
      complex7.I.subtract(0.0);
      Complex complex8 = complex5.pow(6.147655179898435E-277);
      Complex complex9 = complex2.createComplex(2871.598750251173, 1053);
      complex1.abs();
      complex9.INF.nthRoot(703);
      complex8.ZERO.exp();
      Complex complex10 = complex6.subtract(0.0);
      complex6.nthRoot(1053);
      complex5.abs();
      complex10.conjugate();
      complex6.getReal();
      complex3.negate();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1277.4775416874);
      Complex complex1 = complex0.acos();
      complex1.INF.sqrt();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = new Complex(1277.4775416874);
      Complex complex5 = complex2.I.pow(complex4);
      Complex complex6 = complex0.INF.log();
      complex3.I.getField();
      complex6.ZERO.getArgument();
      complex0.isInfinite();
      Complex complex7 = complex2.NaN.pow(complex4);
      complex6.ZERO.exp();
      complex6.INF.tan();
      Complex complex8 = complex6.pow(1277.4775416874);
      complex6.isInfinite();
      complex6.negate();
      complex1.acos();
      complex1.isNaN();
      Complex complex9 = complex5.acos();
      Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex9.NaN.multiply(1277.4775416874);
      complex10.INF.add(complex3);
      complex0.INF.sinh();
      complex8.tanh();
      complex1.sinh();
      complex7.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex1.ONE.pow(0.0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex5.I.log();
      complex5.negate();
      complex1.I.abs();
      complex6.ONE.atan();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex6.ONE.divide(0.0);
      complex2.abs();
      complex4.abs();
      Complex.valueOf((-1071.8), 0.0);
      complex7.I.sin();
      complex5.add(0.0);
      complex8.NaN.nthRoot(1);
      complex7.add(complex4);
      complex8.isNaN();
      complex1.sinh();
      complex7.divide((double) 1);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(1.5762965679168701, (-4042.2306));
      Complex.valueOf((-4042.2306), 0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1825.2165902, 0.0);
      complex0.I.getArgument();
      complex0.cos();
      Complex complex1 = complex0.NaN.createComplex(0.0, 0.0);
      complex0.ZERO.toString();
      Complex complex2 = complex0.tan();
      complex0.INF.nthRoot(17);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = complex2.subtract(complex0);
      complex2.isInfinite();
      Complex complex6 = complex1.atan();
      complex3.INF.sinh();
      Complex complex7 = complex2.asin();
      complex7.ZERO.getArgument();
      Complex complex8 = complex6.sqrt();
      complex8.ZERO.tan();
      complex7.hashCode();
      Complex complex9 = complex4.pow(complex5);
      complex9.pow((double) 17);
      Complex complex10 = complex4.atan();
      complex4.createComplex((-456.565), 17);
      complex10.pow(1698.6450557588);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2259.764895, 2.047863006591797);
      complex0.ONE.divide(2259.764895);
      Complex complex1 = complex0.ONE.createComplex((-1290.4149849), (-20.0));
      complex0.getField();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.pow(complex2);
      complex3.I.multiply(1);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.subtract((-506.77458));
      complex5.I.log();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex6.I.multiply((-1290.4149849));
      Complex complex8 = complex1.subtract(complex3);
      Complex complex9 = complex8.INF.add(complex7);
      Complex complex10 = complex3.NaN.asin();
      complex10.INF.subtract(complex2);
      complex8.NaN.atan();
      Complex complex11 = complex8.I.exp();
      complex11.NaN.hashCode();
      Complex complex12 = complex0.add(complex2);
      Complex.valueOf((double) 1, (-1290.4149849));
      Complex complex13 = Complex.valueOf((-20.0));
      complex13.NaN.subtract(complex4);
      complex2.multiply(complex12);
      complex9.subtract((double) 1);
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2721.227, (-5165.2475));
      complex0.asin();
      Complex.valueOf(2721.227);
      Complex complex1 = complex0.tan();
      Complex.valueOf((-5165.2475), 2721.227);
      complex1.abs();
      complex0.getReal();
      Complex complex2 = complex0.add(0.0);
      complex2.I.multiply(0.0);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-1347.9043905778));
      Complex complex1 = complex0.ZERO.tanh();
      complex0.ONE.getField();
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.INF.multiply(1289);
      complex3.INF.pow((-1347.9043905778));
      Complex complex4 = complex1.ZERO.tanh();
      complex0.getImaginary();
      complex0.isNaN();
      complex1.getImaginary();
      Complex complex5 = Complex.valueOf((-1347.9043905778));
      complex4.getField();
      complex5.reciprocal();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.cos();
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex1.ONE.sin();
      Complex complex5 = complex4.INF.negate();
      complex5.NaN.hashCode();
      Complex complex6 = complex0.ONE.reciprocal();
      complex6.I.divide((-4178.189529871116));
      complex0.abs();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex3.readResolve();
      Complex complex8 = complex4.I.subtract((-4178.189529871116));
      complex8.ONE.sqrt1z();
      complex8.ONE.sinh();
      Complex complex9 = complex8.add(0.0);
      complex9.ZERO.sin();
      complex9.I.readResolve();
      Complex complex10 = complex4.multiply(complex7);
      complex10.hashCode();
      complex7.pow((-782.10515524));
      complex7.abs();
      complex7.getField();
      complex3.getImaginary();
      complex1.subtract(complex10);
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(1219.3420853873517);
      complex0.getField();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.ONE.divide(1219.3420853873517);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex7.NaN.multiply(complex1);
      complex8.asin();
      complex8.ZERO.divide(complex4);
      Complex complex9 = complex1.add(1219.3420853873517);
      Complex complex10 = Complex.valueOf(1219.3420853873517);
      Complex complex11 = complex2.I.subtract(complex6);
      complex11.sqrt();
      complex0.ZERO.sinh();
      complex4.NaN.acos();
      complex5.I.sqrt1z();
      Complex complex12 = Complex.valueOf(1219.3420853873517);
      complex9.readResolve();
      complex3.asin();
      complex5.add((-1681.8932658413));
      Complex complex13 = complex2.createComplex(1219.3420853873517, 2049.876799471);
      complex13.ZERO.hashCode();
      complex13.reciprocal();
      Complex complex14 = complex5.log();
      complex12.tan();
      complex14.add(complex10);
      try { 
        complex14.nthRoot((-2386));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,386
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(321.0);
      complex0.toString();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex0.subtract(complex2);
      complex3.INF.log();
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex3.ZERO.sin();
      Complex complex7 = complex6.add(complex4);
      complex6.ZERO.getArgument();
      complex1.getField();
      Complex complex8 = complex4.I.reciprocal();
      assertEquals((-1.0), complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex3.negate();
      complex9.I.atan();
      Complex complex10 = complex1.negate();
      Complex complex11 = complex2.ONE.sqrt();
      Complex complex12 = complex4.ZERO.subtract(0.0);
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = complex5.add(0.0);
      Complex complex14 = complex13.I.pow(0.0);
      assertTrue(complex14.equals((Object)complex11));
      
      complex13.NaN.acos();
      Complex complex15 = complex13.acos();
      assertSame(complex15, complex13);
      
      complex2.divide(complex10);
      Complex complex16 = complex7.divide(321.0);
      Complex complex17 = complex16.add(complex9);
      assertEquals(1.0031152647975077, complex17.getReal(), 0.01);
      
      complex3.readResolve();
      Complex complex18 = complex9.multiply((-3064.5517021911));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(1.196294929025518E-136, complex18.getReal(), 0.01);
      
      complex2.hashCode();
      assertTrue(complex1.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex11));
  }
}
