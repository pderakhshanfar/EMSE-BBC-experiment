/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:05:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.I.getArgument();
      Complex complex2 = complex0.multiply(complex1);
      complex0.toString();
      Complex complex3 = complex2.ZERO.multiply((-1715));
      Complex complex4 = Complex.valueOf(1.5707963267948966);
      Complex complex5 = complex4.ZERO.pow(complex1);
      complex5.NaN.atan();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex1.createComplex(1.5707963267948966, 1.5707963267948966);
      complex6.NaN.toString();
      complex8.ZERO.getArgument();
      complex7.NaN.cosh();
      complex8.ONE.getField();
      Complex complex9 = complex7.divide(1.5707963267948966);
      complex2.sin();
      Complex complex10 = Complex.valueOf(2168.3684591787, 2168.3684591787);
      complex0.reciprocal();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex11.log();
      Complex complex13 = complex7.sin();
      complex13.subtract(complex8);
      complex3.log();
      complex12.toString();
      Complex.valueOf((double) (-1715));
      complex9.subtract((-1978.24620329927));
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.INF.createComplex(1.0936951652149128E14, 1.0);
      Complex complex3 = Complex.INF;
      complex0.pow(complex3);
      Complex complex4 = complex1.negate();
      complex4.pow(complex1);
      Complex complex5 = complex2.asin();
      complex5.NaN.divide(complex1);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(0);
      complex0.INF.divide(complex1);
      Complex complex2 = new Complex(0.0, (-897.52272745));
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.ONE.subtract(0.0);
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex2.tanh();
      complex7.exp();
      complex2.ZERO.abs();
      complex3.readResolve();
      complex2.equals(complex1);
      Complex.valueOf((-897.52272745), 901.593374);
      Complex complex8 = complex4.multiply(complex2);
      Complex complex9 = complex4.log();
      complex4.subtract(1.0010529668998112E38);
      Complex complex10 = complex8.I.createComplex((-1970.154367089), 901.593374);
      Complex complex11 = complex9.multiply(1855.65104879);
      complex11.ZERO.subtract(complex8);
      complex8.multiply(0);
      Complex.valueOf(0.0);
      complex8.sinh();
      complex6.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3691.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf((-465.99968373723));
      complex1.NaN.divide(complex4);
      Complex complex5 = complex3.I.multiply((-3691.0));
      complex5.ONE.tanh();
      Complex complex6 = complex0.add(complex3);
      Complex complex7 = complex1.asin();
      complex2.reciprocal();
      complex2.divide(complex6);
      Complex complex8 = complex7.cos();
      complex8.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf(20.0, (-20.0));
      Complex complex4 = complex2.sqrt1z();
      complex4.pow((-20.0));
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.sin();
      Complex complex7 = new Complex(401.4139);
      complex4.getField();
      complex1.asin();
      Complex complex8 = complex3.tan();
      complex6.nthRoot(1);
      complex8.exp();
      Complex complex9 = complex0.add(complex3);
      complex2.multiply(1);
      complex0.sin();
      complex9.reciprocal();
      complex0.cosh();
      Complex complex10 = complex4.negate();
      Complex complex11 = complex8.sqrt();
      Complex complex12 = Complex.I;
      complex12.tanh();
      complex11.sqrt1z();
      complex10.sqrt();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.4794255495071411);
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3270.65));
      Complex complex1 = complex0.I.sinh();
      complex1.INF.pow((-20.0));
      Complex complex2 = Complex.valueOf((-20.0));
      complex1.ZERO.toString();
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex3.subtract(complex1);
      complex0.isNaN();
      complex3.ZERO.readResolve();
      Complex complex5 = complex0.pow((-20.0));
      complex3.getReal();
      complex2.isNaN();
      complex0.ONE.log();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex7.sinh();
      Complex.valueOf(Double.NaN);
      Complex complex9 = complex6.add((-3896.8));
      complex3.getField();
      complex9.isNaN();
      complex4.multiply((-979.4353848163382));
      complex5.tan();
      complex8.createComplex((-3896.8), (-20.0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(2340.17811166);
      Complex complex2 = complex1.multiply(718);
      complex0.createComplex(6.283185307179586, Double.NaN);
      complex2.divide(813.65235962027);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.log();
      complex1.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.INF.createComplex(1.6023339607737848E-7, 1.6023339607737848E-7);
      Object object0 = new Object();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ZERO;
      complex2.equals(complex3);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.log();
      complex2.INF.abs();
      Complex complex3 = new Complex(0.0, 0.0);
      complex0.getReal();
      complex2.tanh();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.equals(complex1);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex(3900.0, (-2350.51820999));
      complex1.getReal();
      complex2.tanh();
      Object object0 = new Object();
      Complex complex4 = Complex.ONE;
      complex2.equals(complex4);
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex2.log();
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex(368.4731597361739, 1.787936839336077E7);
      complex2.getReal();
      complex1.tanh();
      Complex complex5 = Complex.ONE;
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex complex1 = Complex.valueOf((-4887.31669));
      complex0.NaN.getArgument();
      complex1.tanh();
      Complex complex2 = complex0.acos();
      complex1.sqrt1z();
      Complex complex3 = complex2.asin();
      complex3.I.pow(complex0);
      complex0.multiply(1513.0827037);
      Object object0 = new Object();
      complex1.hashCode();
      complex3.equals("]D");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex complex1 = Complex.valueOf((-4887.31669));
      complex0.tanh();
      Complex complex2 = complex0.acos();
      complex0.getReal();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.multiply((-4887.31669));
      Object object0 = new Object();
      complex5.hashCode();
      complex1.sqrt1z();
      Object object1 = complex0.readResolve();
      complex2.equals(object1);
      complex0.getField();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(Double.NaN);
      Complex complex2 = complex1.log();
      Complex complex3 = new Complex((-2105.1821227), Double.NaN);
      complex2.getReal();
      complex0.tanh();
      complex2.cosh();
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(2929);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.NaN.add((-1.0));
      Complex complex5 = complex3.pow(complex0);
      complex5.ONE.getField();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ONE.multiply(2929);
      complex7.ZERO.readResolve();
      complex6.INF.multiply(complex2);
      Complex complex8 = complex0.sinh();
      complex8.hashCode();
      Complex complex9 = complex3.acos();
      complex8.createComplex((-1.0), 2929);
      complex5.cosh();
      complex5.I.sinh();
      complex5.tanh();
      complex5.multiply((-1.0));
      complex4.sqrt1z();
      complex9.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      complex0.cos();
      complex0.divide(20.0);
      Complex complex1 = new Complex(3038.54559296831, 1804);
      Complex complex2 = new Complex(20.0, 20.0);
      complex2.sinh();
      complex2.equals(complex1);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex complex1 = Complex.valueOf((-4887.31669));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.acos();
      complex1.getReal();
      complex1.sqrt1z();
      complex3.asin();
      Complex complex4 = complex0.multiply(1513.0827037);
      Object object0 = new Object();
      complex1.hashCode();
      complex2.getField();
      complex1.sqrt1z();
      Complex complex5 = complex4.tan();
      complex4.getField();
      complex4.hashCode();
      Complex complex6 = complex4.pow(1.3961255018698695E-220);
      complex6.acos();
      complex3.reciprocal();
      complex5.sqrt();
      complex6.pow(1989.36909385911);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2408.27445256), 3013.7);
      complex0.ZERO.add((-2408.27445256));
      Complex complex1 = Complex.valueOf(637.7689833, 5.1152814194210805E-5);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.NaN.cos();
      complex5.I.abs();
      complex3.I.getField();
      int int0 = (-1712);
      complex0.I.pow(complex1);
      complex0.ONE.getField();
      complex0.ONE.multiply((-1712));
      try { 
        complex4.I.nthRoot((-1712));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,712
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4887.31669), (-4887.31669));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.acos();
      complex0.getReal();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex3.multiply(Double.NaN);
      Object object0 = new Object();
      complex3.hashCode();
      complex5.getField();
      Complex complex6 = complex2.sqrt1z();
      complex2.tan();
      complex6.getField();
      complex4.hashCode();
      Complex complex7 = Complex.I;
      complex7.pow(1.0160071259930585E-7);
      complex2.acos();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1208.884389458, 1208.884389458);
      Complex complex1 = complex0.add(20.653010622367244);
      complex0.getField();
      complex1.cos();
      Complex complex2 = complex1.NaN.divide(20.0);
      complex1.readResolve();
      complex1.exp();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(808.04098252);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = complex4.atan();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex3.add(2523.7);
      complex1.getArgument();
      complex5.createComplex((-2625.866873945619), Double.POSITIVE_INFINITY);
      complex6.getField();
      Complex complex8 = complex0.cos();
      Complex complex9 = complex4.pow((-2625.866873945619));
      Complex complex10 = complex2.log();
      Complex complex11 = complex7.sqrt1z();
      Complex.valueOf(0.0);
      complex4.divide(complex8);
      complex2.subtract(complex6);
      complex11.pow(1778.0);
      complex9.conjugate();
      complex7.nthRoot(3881);
      complex6.divide((double) 1);
      complex4.asin();
      complex1.divide((-1.0001736928410025));
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1209.438265750951);
      Complex complex1 = complex0.divide(4316.276940125492);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2.9799530867659274), 1441.30850029817);
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.NaN.tan();
      complex2.I.sqrt1z();
      complex1.NaN.createComplex((-2462.558), (-1.0));
      Complex complex3 = complex1.NaN.sqrt();
      Complex complex4 = Complex.valueOf((-436.9157056));
      Complex complex5 = complex4.acos();
      complex4.equals(complex0);
      Complex complex6 = complex4.subtract(2833.0);
      complex4.NaN.createComplex(1441.30850029817, 2833.0);
      complex6.ZERO.getArgument();
      complex0.pow(complex6);
      complex1.abs();
      complex5.tanh();
      complex3.exp();
      complex0.divide(complex1);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex.valueOf((-4887.31669));
      complex0.tanh();
      Complex complex1 = complex0.acos();
      complex0.getReal();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.asin();
      Object object0 = new Object();
      Complex complex4 = Complex.ONE;
      complex4.sqrt1z();
      complex3.nthRoot(37);
      complex2.divide((-4887.31669));
      complex3.equals(":'zVh+7l#Lg.%^[p");
      Complex complex5 = Complex.INF;
      complex5.getField();
      Complex complex6 = complex1.sqrt1z();
      complex1.tan();
      Complex complex7 = Complex.valueOf(2.0780820846557617, 9.704297297526684E31);
      Complex complex8 = complex7.cos();
      complex6.atan();
      Complex.valueOf(0.3296205318449036, 0.0);
      complex8.isInfinite();
      complex6.pow(0.6102112531661987);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2146986417);
      complex1.acos();
      Complex complex2 = new Complex(2146986417);
      complex2.abs();
      complex0.abs();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0642823992403076E208);
      complex0.equals("(");
      Complex complex1 = Complex.ONE;
      complex1.hashCode();
      complex0.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.cos();
      complex4.NaN.divide(complex1);
      complex3.ZERO.atan();
      Complex complex5 = Complex.I;
      complex3.atan();
      complex1.equals((Object) null);
      Complex complex6 = Complex.ONE;
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex0.NaN.acos();
      complex2.abs();
      complex0.abs();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = new Complex(Double.NaN, 1.0);
      complex2.log();
      complex3.atan();
      complex0.getReal();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex5.cosh();
      complex7.divide(Double.NaN);
      complex2.equals(complex6);
      complex2.hashCode();
      complex2.getField();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = complex0.tan();
      complex3.cos();
      complex9.atan();
      complex5.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.INF.abs();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = Complex.valueOf((-2.4591344661022708E-8));
      complex0.NaN.abs();
      complex0.sqrt();
      complex4.abs();
      Complex complex5 = complex2.pow(complex0);
      Complex complex6 = complex3.negate();
      complex6.subtract(Double.NaN);
      Complex complex7 = Complex.valueOf(302.3595, Double.NaN);
      Complex complex8 = complex5.sqrt1z();
      complex7.INF.multiply(1300);
      complex7.NaN.divide((-2.4591344661022708E-8));
      complex7.log();
      Complex complex9 = complex8.tan();
      complex7.abs();
      complex8.toString();
      complex6.getField();
      complex1.readResolve();
      complex8.isInfinite();
      complex2.getField();
      complex5.toString();
      Complex complex10 = complex3.conjugate();
      complex9.add(2166.0493001841355);
      complex10.abs();
      complex0.sqrt1z();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
      Complex complex1 = complex0.acos();
      complex0.abs();
      complex1.abs();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = Complex.NaN;
      complex5.reciprocal();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.sin();
      Complex complex8 = Complex.valueOf(0.0);
      complex2.readResolve();
      Object object0 = new Object();
      Object object1 = complex3.readResolve();
      complex0.equals(object1);
      complex4.hashCode();
      complex2.getField();
      Complex complex9 = complex5.sqrt1z();
      complex5.tan();
      complex8.cos();
      complex1.atan();
      complex9.equals("");
      complex9.divide(2757.1691198981);
      try { 
        complex7.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex0.NaN.acos();
      complex2.abs();
      complex0.abs();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = complex2.log();
      complex5.I.reciprocal();
      complex4.sin();
      Complex.valueOf(717428.5322062823);
      complex1.readResolve();
      Object object0 = new Object();
      complex1.equals(object0);
      // Undeclared exception!
      complex3.nthRoot(2049162264);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex complex1 = Complex.valueOf((-4887.31669));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.acos();
      complex0.getReal();
      Complex complex4 = complex3.sqrt1z();
      complex2.log();
      complex3.reciprocal();
      Complex complex5 = complex1.sin();
      Complex.valueOf((-1940.36));
      complex0.readResolve();
      Object object0 = new Object();
      complex5.equals(complex4);
      complex0.hashCode();
      complex4.getField();
      complex4.sqrt1z();
      complex0.tan();
      Complex complex6 = Complex.INF;
      complex6.cos();
      Complex complex7 = complex2.atan();
      complex7.equals("too many regressors ({0}) specified, only {1} in the model");
      complex0.createComplex(2034.2293125606939, 1825.8);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex0.NaN.acos();
      complex2.abs();
      complex0.abs();
      complex2.I.sin();
      Complex complex3 = new Complex(Double.NaN, 1.0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.I.reciprocal();
      complex3.sin();
      Complex complex6 = Complex.valueOf(717428.5322062823);
      complex1.readResolve();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.hashCode();
      complex4.getField();
      complex6.sqrt1z();
      complex5.tan();
      complex5.cos();
      Complex complex7 = complex0.atan();
      complex7.equals("");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex.valueOf((-4887.31669));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.acos();
      complex0.getReal();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.multiply((-1416.7596073109858));
      complex4.ONE.add((-815.9435762025));
      Complex complex6 = complex3.sqrt1z();
      complex1.tanh();
      complex4.pow(1469.8274883773731);
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = Complex.ONE;
      complex6.getField();
      complex0.reciprocal();
      Object object0 = complex7.readResolve();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.atan();
      complex2.getReal();
      Complex complex4 = complex0.tanh();
      complex0.sqrt1z();
      complex2.cosh();
      Complex complex5 = complex3.divide(438.8241013537542);
      complex3.sqrt();
      complex4.atan();
      complex2.sinh();
      Complex.valueOf((-1327.45851006), 0.6312094926834106);
      complex4.toString();
      complex1.cos();
      complex5.getArgument();
      complex5.tanh();
      complex3.sqrt1z();
      Complex complex6 = complex2.acos();
      complex6.INF.pow(complex4);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex complex1 = complex0.multiply(564);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.ONE;
      complex0.getArgument();
      Complex complex5 = complex0.conjugate();
      complex1.nthRoot(7);
      Complex.valueOf((-20.0));
      complex1.readResolve();
      complex5.equals(complex3);
      complex5.hashCode();
      complex4.getField();
      complex4.sqrt1z();
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.ZERO;
      complex1.atan();
      complex6.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0642823992403076E208);
      Complex complex1 = Complex.valueOf((-951.055));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.sin();
      Complex complex6 = Complex.valueOf((-5.8846316709255E16));
      complex2.readResolve();
      Object object0 = new Object();
      complex6.equals(complex1);
      complex1.hashCode();
      complex5.getField();
      complex1.sqrt1z();
      Complex complex7 = complex3.tan();
      complex4.cos();
      Complex complex8 = Complex.I;
      complex8.atan();
      complex7.equals("");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex0.NaN.acos();
      complex2.abs();
      complex0.abs();
      Complex complex3 = complex2.I.sin();
      complex1.getArgument();
      Complex complex4 = complex3.add(1.5707963267948966);
      complex4.INF.log();
      complex0.getField();
      complex4.hashCode();
      complex4.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1);
      complex0.abs();
      complex0.abs();
      complex1.I.sin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex2.sin();
      Complex.valueOf(717428.5322062823);
      complex0.tanh();
      complex4.pow(1.0);
      complex1.sqrt1z();
      Complex complex5 = Complex.ONE;
      complex5.getField();
      complex3.reciprocal();
      Complex complex6 = Complex.ONE;
      complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1765.54427));
      Complex complex1 = complex0.ZERO.negate();
      complex1.ONE.multiply((-1125));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = Complex.ONE;
      complex4.ZERO.getArgument();
      Complex complex5 = complex4.I.conjugate();
      complex4.ZERO.nthRoot(7);
      Complex.valueOf(0.0);
      complex5.pow(0.23275426644090702);
      complex3.sqrt1z();
      Complex complex6 = Complex.ONE;
      complex3.getField();
      Complex complex7 = complex1.reciprocal();
      complex7.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-2588.2));
      complex1.NaN.hashCode();
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.NaN.atan();
      complex0.getReal();
      complex3.tanh();
      complex2.sqrt1z();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex1.divide(438.8241013537542);
      Complex complex7 = complex6.ZERO.sqrt();
      complex5.atan();
      Complex complex8 = complex1.I.sinh();
      complex4.hashCode();
      complex4.getField();
      complex8.sqrt1z();
      Complex complex9 = complex8.tan();
      complex7.cos();
      complex6.atan();
      complex9.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.792046157580119E-8), 438.577);
      complex0.getField();
      complex0.INF.pow(438.577);
      Complex complex1 = complex0.divide(3386.0796053267);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.hashCode();
      complex1.hashCode();
      Complex complex2 = complex0.pow(0.0);
      complex2.log();
      Complex complex3 = complex0.atan();
      complex1.getReal();
      complex0.tanh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.cosh();
      complex0.divide(173.0838953685);
      complex6.sqrt();
      complex6.atan();
      Complex complex7 = complex2.sinh();
      Complex complex8 = Complex.valueOf(438.8241013537542, 1361.80392313283);
      complex0.subtract(1650.177130965697);
      Complex complex9 = Complex.NaN;
      complex9.toString();
      Complex complex10 = complex7.cos();
      complex9.getArgument();
      complex8.tanh();
      Complex complex11 = new Complex(1361.80392313283);
      complex11.sqrt1z();
      complex4.add(complex10);
      complex3.acos();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1765.54427));
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.multiply((-1125));
      complex0.exp();
      Complex complex3 = complex2.pow((double) (-1125));
      Complex complex4 = complex2.asin();
      complex0.sinh();
      Complex complex5 = complex1.cosh();
      Complex.valueOf(644.0);
      Complex complex6 = complex5.sinh();
      complex1.abs();
      complex4.pow(0.0);
      complex6.getReal();
      Complex complex7 = Complex.I;
      complex7.nthRoot(617);
      Complex complex8 = complex4.divide(complex7);
      Complex complex9 = complex0.atan();
      complex9.log();
      complex8.getReal();
      Complex.valueOf(1.1752011936438014);
      complex3.isNaN();
      complex8.reciprocal();
      complex2.nthRoot(1623);
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.tan();
      complex1.NaN.hashCode();
      complex0.hashCode();
      Complex complex3 = complex2.asin();
      complex2.divide(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex((-87.0));
      complex5.reciprocal();
      Complex complex6 = Complex.valueOf(1.0953559364080034, 1.0953559364080034);
      complex6.sqrt();
      complex0.sqrt();
      complex2.sqrt();
      complex1.sin();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-371.666849533766), (-371.666849533766));
      Object object0 = complex2.ONE.readResolve();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ZERO.pow((-371.666849533766));
      complex4.ONE.readResolve();
      complex4.tanh();
      Complex complex5 = Complex.valueOf((-371.666849533766));
      Complex complex6 = complex5.sqrt1z();
      complex4.conjugate();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex6.divide(438.8241013537542);
      Complex complex9 = Complex.valueOf(3390.0, (-371.666849533766));
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex7.atan();
      Complex complex12 = complex10.sinh();
      Complex.valueOf(438.8241013537542, (-1778.58543213428));
      complex11.subtract((-661.3842377574));
      object0.toString();
      complex6.cos();
      complex10.getArgument();
      Complex complex13 = Complex.ONE;
      complex13.tanh();
      complex10.sqrt1z();
      complex0.add(complex12);
      complex6.acos();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(2036954998);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex1.pow((double) 2036954998);
      complex5.NaN.getField();
      Complex complex6 = complex4.sqrt1z();
      complex6.getField();
      complex1.reciprocal();
      complex3.equals("");
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-847.0121204600807));
      complex0.I.getField();
      Complex complex1 = complex0.acos();
      complex1.ONE.nthRoot(1);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.exp();
      complex6.tanh();
      Complex complex7 = Complex.ONE;
      complex1.getArgument();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = Complex.valueOf((double) 1);
      complex7.readResolve();
      complex5.equals("V]q5 _Wu");
      complex7.hashCode();
      complex2.getField();
      complex9.sqrt1z();
      complex8.tan();
      complex3.cos();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.acos();
      complex1.abs();
      complex0.abs();
      Complex complex2 = complex1.I.sin();
      complex1.add(complex0);
      Complex complex3 = complex1.log();
      complex3.I.reciprocal();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.I;
      complex4.ZERO.add(1.0);
      complex5.getField();
      Complex complex6 = Complex.I;
      complex6.reciprocal();
      complex6.equals(complex4);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0642823992403076E208);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(53.80976942759091, (-2399.2));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.multiply(1.0642823992403076E208);
      Complex complex5 = complex4.multiply(complex0);
      complex1.cosh();
      complex5.readResolve();
      complex3.equals(complex0);
      Complex complex6 = complex0.log();
      complex3.readResolve();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.cosh();
      Object object1 = new Object();
      Complex complex7 = Complex.valueOf(0.0, 28.863526603618155);
      complex6.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex complex1 = Complex.valueOf((-4887.31669));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.acos();
      complex0.getReal();
      Complex complex4 = complex3.ONE.sqrt1z();
      complex2.hashCode();
      complex3.asin();
      complex1.divide(complex3);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.multiply(complex5);
      complex3.subtract(complex1);
      Complex complex7 = Complex.valueOf(1.206860599814453E82, (-4887.31669));
      Complex complex8 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex6.multiply(complex1);
      complex2.cosh();
      Complex complex10 = Complex.valueOf((-4887.31669));
      complex10.readResolve();
      complex8.equals(complex9);
      complex5.log();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.readResolve();
      complex5.equals(complex10);
      complex8.cosh();
      Object object0 = new Object();
      complex4.equals("BCljd#$}A+");
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1);
      complex0.abs();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.add(complex0);
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      Complex complex5 = complex3.multiply(complex2);
      Complex complex6 = complex0.subtract(complex3);
      Complex complex7 = complex1.multiply(complex1);
      complex7.cosh();
      complex5.readResolve();
      complex5.equals(complex7);
      Complex complex8 = complex1.log();
      complex6.readResolve();
      complex6.equals(complex8);
      complex1.cosh();
      Object object0 = new Object();
      complex4.equals((Object) null);
      complex5.divide((double) 1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex0.NaN.acos();
      complex2.abs();
      complex0.abs();
      complex2.I.sin();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.I.reciprocal();
      complex3.sin();
      Complex complex6 = Complex.valueOf(717428.5322062823);
      complex1.readResolve();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.hashCode();
      complex4.getField();
      complex6.sqrt1z();
      complex5.tan();
      complex5.cos();
      Complex complex7 = complex0.atan();
      complex7.equals("");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 746.67070162);
      complex0.ZERO.atan();
      Complex complex1 = complex0.tan();
      complex1.ZERO.toString();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex2.NaN.tan();
      complex3.getArgument();
      complex3.INF.readResolve();
      complex2.ONE.hashCode();
      Complex complex4 = complex2.tanh();
      complex1.ONE.sqrt();
      Complex complex5 = complex1.multiply(0);
      complex4.abs();
      complex5.isNaN();
      complex4.divide(complex1);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.subtract((-3996.720127));
      Complex complex2 = complex0.acos();
      complex1.abs();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex0.ZERO.createComplex(1.9848570823669434, (-787.88));
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.multiply(2154);
      Complex complex8 = complex6.multiply(1163);
      Complex complex9 = complex8.NaN.pow(complex3);
      complex9.ZERO.cos();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex10.INF.add(complex2);
      Object object0 = new Object();
      complex10.equals(object0);
      complex2.INF.reciprocal();
      complex7.acos();
      complex11.INF.subtract(complex3);
      complex5.createComplex(6.1694117899971836E-201, 1163);
      complex4.subtract(Double.POSITIVE_INFINITY);
      complex11.negate();
      complex0.subtract(0.0);
      complex8.readResolve();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1439.60124377, 0.0);
      complex0.INF.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      complex0.getReal();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.divide(complex3);
      complex0.abs();
      Complex complex5 = complex1.multiply(0);
      complex3.getField();
      Complex complex6 = Complex.valueOf(1439.60124377, 0.0);
      Complex complex7 = complex6.INF.multiply(complex5);
      Complex complex8 = complex7.INF.sin();
      Complex complex9 = complex8.INF.negate();
      complex3.NaN.createComplex(1439.60124377, 0.0);
      Complex complex10 = complex2.tan();
      Complex complex11 = complex10.NaN.subtract(complex2);
      complex11.I.divide(complex9);
      Complex complex12 = complex0.log();
      Complex complex13 = complex12.sqrt();
      Complex complex14 = complex5.subtract(complex12);
      complex14.tan();
      complex13.sinh();
      complex4.asin();
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1765.54427));
      Complex complex1 = complex0.ZERO.negate();
      complex1.ONE.multiply((-1125));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = Complex.ONE;
      complex4.ZERO.getArgument();
      complex4.I.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      complex4.INF.readResolve();
      complex2.equals(complex4);
      complex0.hashCode();
      complex2.getField();
      Complex complex6 = complex0.sqrt1z();
      complex6.I.tan();
      complex3.cos();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5411510467529297, 0.0);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.NaN.multiply(complex0);
      complex0.equals(complex1);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(0);
      complex0.INF.divide(complex1);
      Complex complex2 = new Complex(0.0, (-897.52272745));
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.ONE.subtract(0.0);
      complex5.ZERO.log();
      Complex complex6 = complex2.tanh();
      complex6.exp();
      complex2.ZERO.abs();
      complex3.readResolve();
      complex2.equals(complex1);
      Complex.valueOf((-897.52272745), 901.593374);
      Complex complex7 = complex4.multiply(complex2);
      Complex complex8 = complex4.log();
      complex4.subtract(1.0010529668998112E38);
      complex7.I.createComplex((-1970.154367089), 901.593374);
      complex8.multiply(1855.65104879);
      complex7.multiply(0);
      Complex.valueOf(0.0);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow((-1160.668967));
      Complex complex2 = complex1.ONE.atan();
      complex0.nthRoot(2365);
      complex0.INF.nthRoot(2365);
      complex2.I.pow(complex0);
      complex1.subtract(complex0);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.cos();
      complex4.INF.cosh();
      complex3.negate();
      complex2.cos();
      complex0.sinh();
      complex4.multiply(2365);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.sqrt();
      complex2.ZERO.exp();
      try { 
        complex2.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.conjugate();
      complex0.I.sqrt1z();
      complex0.divide(complex1);
      complex1.divide((-147.42654919));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1236.5926), (-1236.5926));
      Complex complex1 = complex0.NaN.add((-0.09088450866185192));
      Complex complex2 = Complex.INF;
      complex2.NaN.exp();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.INF.multiply(complex2);
      complex2.ONE.hashCode();
      complex1.readResolve();
      Complex complex5 = complex4.I.add(2.579867270991543E291);
      Complex complex6 = complex4.ONE.acos();
      complex6.ONE.hashCode();
      complex0.readResolve();
      complex2.getReal();
      Complex complex7 = complex3.tan();
      Complex complex8 = complex3.sqrt1z();
      complex7.divide(complex8);
      Complex complex9 = complex8.NaN.asin();
      complex7.ZERO.hashCode();
      complex8.sin();
      complex0.multiply(complex7);
      Complex complex10 = complex0.negate();
      complex1.sqrt();
      Complex complex11 = complex5.negate();
      complex10.negate();
      Complex.valueOf((-0.09088450866185192), (-1236.5926));
      complex0.subtract(complex11);
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3270.65));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.INF.pow((-20.0));
      Complex complex3 = complex2.I.cosh();
      complex1.ZERO.toString();
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex4.subtract(complex1);
      complex0.isNaN();
      complex4.ZERO.readResolve();
      Complex complex6 = complex0.pow((-20.0));
      complex4.getReal();
      complex3.isNaN();
      complex0.ONE.log();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex8.sinh();
      Complex.valueOf(Double.NaN);
      Complex complex10 = complex7.add((-3896.8));
      complex4.getField();
      complex10.isNaN();
      complex5.multiply((-979.4353848163382));
      complex6.tan();
      complex9.createComplex((-3896.8), (-20.0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-4887.31669), (-4887.31669));
      Complex complex1 = Complex.valueOf((-4887.31669));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.INF.acos();
      complex0.getReal();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex1.asin();
      complex2.NaN.multiply((-4887.31669));
      Complex complex6 = complex5.sqrt1z();
      complex3.INF.tanh();
      complex5.INF.cosh();
      Complex complex7 = complex3.ZERO.asin();
      complex2.I.acos();
      complex0.subtract(1343.0);
      Complex complex8 = complex3.add(complex1);
      complex0.createComplex((-4887.31669), 1343.0);
      complex5.tanh();
      complex6.getArgument();
      Complex complex9 = complex4.tan();
      complex9.ZERO.cosh();
      complex7.tan();
      Object object0 = complex8.readResolve();
      complex3.equals(object0);
      Complex.valueOf((-4887.31669), (-4887.31669));
      complex6.createComplex(0.16744143990125382, 1315.147453417283);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.ONE.acos();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.getImaginary();
      Complex complex3 = complex1.cos();
      complex3.ONE.getArgument();
      Complex complex4 = complex0.cosh();
      complex2.ONE.divide(853.051555);
      Complex complex5 = complex2.multiply(2761);
      complex5.I.sin();
      complex5.ONE.negate();
      complex0.multiply(2761);
      complex0.add(complex4);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex1.I.pow((-1354.31809007566));
      Complex complex4 = complex0.exp();
      complex4.INF.getArgument();
      Complex complex5 = complex4.ONE.reciprocal();
      Complex complex6 = complex4.INF.pow(complex1);
      complex4.ONE.tan();
      Complex.valueOf((-239.758394885), (-2757.858159380191));
      complex4.ONE.toString();
      complex0.getField();
      complex0.exp();
      complex5.NaN.acos();
      Complex complex7 = complex5.divide(6.283185307179586);
      complex5.getReal();
      complex6.reciprocal();
      complex7.add(0.7853981633974483);
      complex0.acos();
      complex3.divide((-448.0));
      complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.abs();
      complex0.INF.hashCode();
      Complex complex1 = complex0.conjugate();
      complex0.I.getField();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.I.divide(complex2);
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex5.asin();
      complex6.ONE.pow(complex1);
      complex1.getArgument();
      Complex complex7 = complex2.add(complex1);
      Complex complex8 = complex7.INF.sin();
      complex8.ZERO.sinh();
      complex7.ONE.hashCode();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex2.pow(complex9);
      Complex complex11 = complex10.ONE.subtract(1.0);
      complex9.ONE.createComplex(0.0, 1.0);
      complex3.abs();
      complex11.getImaginary();
      complex4.hashCode();
      complex1.tanh();
      complex4.toString();
      complex11.readResolve();
      complex8.getImaginary();
      complex5.hashCode();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.toString();
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.sinh();
      Complex complex2 = complex0.ONE.multiply(complex1);
      try { 
        complex2.I.nthRoot((-1615));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,615
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex1.NaN.asin();
      Complex complex5 = complex4.I.negate();
      complex5.INF.getArgument();
      complex0.abs();
      Complex complex6 = complex1.multiply((-1431));
      complex3.ZERO.reciprocal();
      Complex complex7 = complex4.createComplex((-1431), 0.0);
      complex7.INF.conjugate();
      complex6.INF.sqrt1z();
      complex1.INF.multiply(2465.11230856);
      complex4.exp();
      Complex complex8 = complex6.sqrt1z();
      complex8.I.hashCode();
      complex3.sinh();
      Object object0 = complex5.readResolve();
      complex8.equals(object0);
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-966.6851705098666), (-293.88596633912));
      Complex complex1 = complex0.tanh();
      complex1.divide(0.0);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex2.subtract(complex0);
      Complex complex3 = complex1.pow(20.0);
      complex2.sqrt1z();
      complex3.getField();
      complex2.reciprocal();
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.ZERO.tan();
      complex1.NaN.hashCode();
      complex0.hashCode();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.divide(complex2);
      Complex complex5 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.INF.multiply(complex5);
      complex3.subtract(complex0);
      Complex complex7 = complex6.ONE.multiply(20.0);
      complex2.multiply(complex4);
      Complex complex8 = complex2.cosh();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex complex9 = complex8.log();
      complex6.readResolve();
      complex5.equals(complex8);
      complex9.cosh();
      Object object1 = new Object();
      complex7.equals(object1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.reciprocal();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getImaginary();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add(complex0);
      complex2.NaN.abs();
      complex0.ZERO.pow(1.6016578405624026E-8);
      Complex complex3 = complex0.NaN.subtract(complex1);
      Complex.valueOf(0.0);
      Complex complex4 = Complex.valueOf(1.6016578405624026E-8);
      complex1.I.pow(complex0);
      complex2.I.pow(complex1);
      complex1.isNaN();
      complex1.getField();
      complex0.cos();
      complex0.getArgument();
      Complex complex5 = Complex.valueOf(0.0);
      complex0.exp();
      complex0.hashCode();
      complex5.INF.asin();
      complex2.subtract(complex5);
      complex4.sqrt1z();
      complex3.sin();
      complex5.add(complex2);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
      double double0 = 1.7617425105337704E-87;
      complex0.NaN.asin();
      Complex complex1 = Complex.valueOf(1.7617425105337704E-87, (-1229.3544029));
      complex1.INF.conjugate();
      complex0.I.toString();
      Complex complex2 = complex0.subtract(complex1);
      try { 
        complex2.NaN.nthRoot((-1493));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,493
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-2588.2));
      complex1.NaN.hashCode();
      complex1.ONE.hashCode();
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.log();
      complex0.NaN.atan();
      complex0.getReal();
      complex3.tanh();
      Complex complex4 = complex2.sqrt1z();
      complex4.conjugate();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex1.divide(438.8241013537542);
      complex6.ZERO.sqrt();
      Complex complex7 = complex5.atan();
      complex1.I.sinh();
      Complex.valueOf(1999.183, 1863.60153738);
      complex6.NaN.subtract(0.0);
      complex0.toString();
      Complex complex8 = complex5.cos();
      complex6.getArgument();
      complex5.tanh();
      Complex complex9 = complex3.sqrt1z();
      complex9.add(complex8);
      complex6.acos();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1523));
      Complex complex2 = complex1.pow((double) (-1523));
      complex2.INF.pow(complex0);
      Complex complex3 = complex2.ONE.atan();
      complex1.ZERO.getField();
      Complex complex4 = complex2.exp();
      complex4.subtract(complex1);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(116.412618753, Double.POSITIVE_INFINITY);
      complex0.ONE.hashCode();
      Complex complex1 = complex0.sqrt1z();
      complex1.ZERO.createComplex(2.6789862192139226E-8, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide((-1510.3973));
      Complex complex3 = complex1.multiply(3536);
      complex2.INF.tanh();
      Complex complex4 = complex3.ZERO.multiply((-1026.3155209103406));
      Complex complex5 = Complex.valueOf(116.412618753, (double) 3536);
      complex5.ONE.asin();
      complex1.sqrt();
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.ZERO.log();
      complex4.I.cosh();
      complex1.getArgument();
      complex1.ONE.add(complex4);
      Complex complex8 = complex0.multiply((-308.4191109));
      complex8.toString();
      Complex complex9 = complex0.cosh();
      complex6.cos();
      complex3.getArgument();
      complex7.createComplex((-308.4191109), 0.0);
      complex9.getArgument();
      complex2.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf((-371.666849533766), (-371.666849533766));
      complex2.ONE.readResolve();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ZERO.pow((-371.666849533766));
      complex4.ONE.readResolve();
      complex2.NaN.acos();
      complex2.toString();
      Complex complex5 = complex3.acos();
      complex2.sqrt();
      complex0.toString();
      complex5.INF.add(complex2);
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.acos();
      complex8.ONE.subtract(complex1);
      complex2.toString();
      complex1.subtract(0.0);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.readResolve();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.I.sinh();
      Complex complex5 = complex4.NaN.log();
      complex0.NaN.toString();
      complex1.NaN.subtract(complex0);
      complex4.abs();
      complex0.getImaginary();
      Complex.valueOf(0.0);
      complex5.isNaN();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.NaN.tanh();
      complex1.ONE.divide(complex2);
      complex0.acos();
      Complex complex3 = complex1.acos();
      complex3.acos();
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.979956357126066E-10, (-567.907138209));
      Complex complex1 = complex0.subtract((-567.907138209));
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = Complex.valueOf(7.979956357126066E-10);
      complex3.exp();
      complex1.ONE.atan();
      Complex complex4 = complex1.pow((-567.907138209));
      Complex complex5 = complex0.sqrt();
      complex5.INF.add(7.979956357126066E-10);
      complex4.readResolve();
      Complex complex6 = Complex.valueOf(7.979956357126066E-10, 703.162228079737);
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex0.ONE.tanh();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex3.log();
      Complex complex11 = complex10.INF.negate();
      complex11.INF.cosh();
      complex7.getArgument();
      Complex complex12 = complex2.negate();
      complex9.conjugate();
      complex12.acos();
      complex0.sin();
      complex1.add(complex6);
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 0.0);
      Complex complex1 = complex0.ONE.sinh();
      complex1.INF.getArgument();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.I.tanh();
      complex3.ZERO.log();
      complex1.sinh();
      complex0.hashCode();
      complex1.ZERO.sqrt();
      complex2.sqrt1z();
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.multiply((-1.0));
      complex5.ZERO.subtract(complex1);
      Complex complex6 = complex1.divide((-1.0));
      complex6.asin();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.multiply(1);
      Complex complex1 = complex0.NaN.acos();
      complex1.abs();
      complex0.abs();
      complex1.I.sin();
      complex1.add(complex0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.I.reciprocal();
      Complex.valueOf(0.0, 4970.79786261445);
      complex3.INF.sqrt();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.sqrt();
      complex5.sin();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3022.5533768752), (-3022.5533768752));
      complex0.INF.toString();
      Complex complex1 = complex0.NaN.add(1659.46);
      Complex complex2 = complex1.sin();
      complex2.pow(complex1);
      complex1.ONE.readResolve();
      complex0.cos();
      Complex complex3 = complex0.conjugate();
      complex0.toString();
      Complex complex4 = complex0.NaN.cosh();
      complex4.ONE.reciprocal();
      Complex complex5 = complex3.I.sin();
      complex5.INF.multiply((-3022.5533768752));
      complex3.I.subtract(complex1);
      complex3.toString();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex6.NaN.sin();
      Complex complex8 = complex7.ONE.cos();
      complex8.I.pow((-3022.5533768752));
      complex0.getImaginary();
      complex3.hashCode();
      complex3.sin();
      complex2.sinh();
      try { 
        complex6.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1208.884389458);
      Complex complex1 = complex0.ONE.divide(2.0);
      complex0.NaN.multiply(complex1);
      complex0.multiply(181.9944690757);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.I.add(complex1);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex4.ZERO.multiply(230);
      complex6.NaN.getField();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.ONE.sqrt();
      complex7.nthRoot(167);
      complex4.NaN.readResolve();
      complex3.cosh();
      Complex.valueOf((-1388.602692099));
      Complex complex9 = complex6.INF.negate();
      Complex complex10 = complex6.createComplex(0.0, (-852.1453881377938));
      complex6.NaN.hashCode();
      complex5.INF.cos();
      complex1.pow(762.6536512061);
      complex10.add((double) 167);
      complex9.ONE.negate();
      Complex complex11 = complex2.log();
      complex9.toString();
      complex2.pow(8.979279989292184E-9);
      complex2.getReal();
      complex6.divide(complex5);
      complex8.createComplex(230, 0.0);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(498.889027521);
      Complex complex1 = Complex.ZERO;
      complex0.NaN.subtract(complex1);
      Complex complex2 = Complex.valueOf((-1253.18235));
      Complex complex3 = complex0.multiply(complex2);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.getField();
      Complex complex2 = complex0.NaN.log();
      complex1.I.negate();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex3.NaN.cosh();
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.I.sinh();
      complex0.abs();
      complex0.pow(0.0);
      complex2.getReal();
      complex9.ONE.nthRoot(341);
      Complex complex10 = complex6.divide(complex3);
      Complex complex11 = complex1.atan();
      complex11.I.log();
      complex9.getReal();
      Complex.valueOf(0.0);
      complex8.isNaN();
      complex7.reciprocal();
      complex10.nthRoot(1623);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add((-564.04454));
      complex0.hashCode();
      Complex complex1 = complex0.ONE.multiply(257);
      Complex complex2 = complex1.INF.createComplex(4020.33579, 4020.33579);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.NaN.pow(complex3);
      complex4.I.toString();
      Complex complex6 = complex1.NaN.subtract(4020.33579);
      complex5.NaN.divide(complex6);
      complex0.getArgument();
      Complex complex7 = Complex.NaN;
      complex4.I.pow((double) 257);
      Complex complex8 = complex7.NaN.sinh();
      complex4.NaN.pow(complex6);
      Complex complex9 = Complex.valueOf(0.0, (-1608.5246866882599));
      complex4.I.add(complex9);
      Complex complex10 = complex3.subtract(complex7);
      complex5.subtract(Double.NaN);
      complex5.hashCode();
      complex5.multiply((double) 257);
      Complex complex11 = complex3.ONE.divide(complex8);
      Complex.valueOf(0.0, 4020.33579);
      complex0.ONE.sinh();
      Complex complex12 = complex11.ZERO.acos();
      complex12.INF.multiply(257);
      Complex complex13 = complex2.multiply(complex8);
      complex13.I.tanh();
      complex10.isInfinite();
      complex3.subtract(Double.NaN);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-847.0121204600807));
      complex0.I.getField();
      Complex complex1 = complex0.acos();
      complex1.ONE.nthRoot(1);
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.sqrt1z();
      complex3.I.nthRoot(2390);
      complex0.toString();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.ONE.multiply(complex2);
      complex3.getReal();
      complex3.isNaN();
      Complex complex7 = complex4.asin();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex2.divide(complex8);
      complex9.INF.pow(complex0);
      Complex complex10 = complex9.INF.asin();
      complex10.ONE.subtract(complex5);
      Complex complex11 = Complex.valueOf((-1615.0), (-847.0121204600807));
      complex9.add((double) 2390);
      complex0.getArgument();
      complex8.subtract(0.0);
      complex6.isNaN();
      complex3.subtract(0.0);
      complex11.log();
      complex6.multiply(complex7);
      Complex complex12 = complex2.reciprocal();
      complex12.negate();
      complex8.sqrt();
      Object object0 = new Object();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.divide((-1.1594886810010702E-7));
      complex0.I.getArgument();
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.ONE.tan();
      assertEquals(1.557407724654902, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.ZERO.multiply(1618);
      Complex complex8 = complex7.INF.multiply(0.0);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      
      complex0.I.createComplex(1.5707963267948966, (-1.1594886810010702E-7));
      complex1.toString();
      Complex complex9 = complex1.add((-1.0));
      complex9.ONE.getArgument();
      complex9.tanh();
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex1.sinh();
      Complex complex12 = complex4.cos();
      Complex complex13 = complex12.ZERO.acos();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex12.INF.tanh();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertSame(complex14, complex10);
      
      Complex complex15 = complex1.subtract(complex9);
      complex2.getImaginary();
      complex15.reciprocal();
      Complex complex16 = complex7.sin();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertSame(complex2, complex11);
      assertFalse(complex7.equals((Object)complex13));
      
      Complex complex17 = Complex.valueOf((double) 1618);
      assertFalse(complex17.equals((Object)complex13));
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0642823992403076E208);
      complex0.getArgument();
      Complex complex1 = complex0.add(0.0);
      complex1.getField();
      complex1.hashCode();
      Complex complex2 = complex1.pow(449.12495136463);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(1.0642823992403076E208, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
  }
}
