/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:43:30 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.544673396032028E296);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(150102.0, 150102.0);
      Complex complex2 = complex0.acos();
      complex0.isInfinite();
      complex2.sinh();
      Complex complex3 = Complex.ONE;
      complex1.readResolve();
      Complex complex4 = Complex.valueOf(20.0, 150102.0);
      complex2.isInfinite();
      Complex complex5 = new Complex(4.807835528861618E-15);
      complex5.acos();
      complex1.isNaN();
      Complex complex6 = Complex.ONE;
      complex6.tan();
      complex4.log();
      Complex complex7 = new Complex(0.0);
      complex7.sinh();
      complex4.tanh();
      Complex complex8 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5075.55091246), Double.POSITIVE_INFINITY);
      complex0.multiply((-2341.154682101245));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-460.9434615), 20.0);
      Complex complex2 = complex0.tanh();
      complex2.nthRoot(37);
      complex1.sqrt();
      complex1.tan();
      complex2.atan();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-1445.8), Double.POSITIVE_INFINITY);
      complex0.multiply((-3186));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), (-763.026202603));
      complex1.tanh();
      Complex complex2 = Complex.NaN;
      complex2.sqrt();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(complex0);
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex0.isNaN();
      Complex complex2 = Complex.NaN;
      Complex complex3 = new Complex((-20.0), (-20.0));
      complex3.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.log();
      Complex.valueOf(260.987851474621);
      Complex complex7 = complex1.tanh();
      complex7.asin();
      Complex complex8 = new Complex(787.05758379, (-1187.11046746));
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(6.933855730431659E-8, 2311);
      Complex.valueOf(6.933855730431659E-8);
      complex0.getArgument();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.6680249558712994), 34.38);
      Complex complex1 = complex0.atan();
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.NaN.divide(complex2);
      Complex complex5 = new Complex(189.015993053832, 34.38);
      Complex complex6 = complex0.add(complex5);
      complex6.I.readResolve();
      Complex complex7 = complex1.subtract(complex5);
      complex6.I.readResolve();
      Complex complex8 = complex6.reciprocal();
      complex8.readResolve();
      complex0.NaN.hashCode();
      Complex.valueOf((-2270.367));
      Complex complex9 = complex7.multiply(88.84);
      Complex complex10 = complex5.cos();
      Complex complex11 = complex9.I.add(complex7);
      Complex complex12 = complex9.exp();
      complex12.ONE.reciprocal();
      complex9.multiply(complex12);
      complex9.cosh();
      Complex complex13 = complex10.multiply(2311.0);
      complex13.negate();
      complex4.pow(complex9);
      Complex complex14 = complex9.conjugate();
      complex14.reciprocal();
      complex11.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex1.getArgument();
      Complex complex2 = complex1.NaN.divide(1294.6662136894495);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.ONE.subtract(complex2);
      complex4.ZERO.divide(Double.NaN);
      complex4.INF.sin();
      Complex complex5 = complex3.multiply((-1163.41928523053));
      Complex complex6 = complex3.INF.acos();
      complex6.INF.subtract(Double.NaN);
      Complex complex7 = complex0.createComplex((-2730.3228), (-2730.3228));
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.ONE.add(complex2);
      Complex complex10 = complex1.exp();
      Complex complex11 = complex10.INF.exp();
      complex11.NaN.sin();
      Complex complex12 = complex3.multiply(17);
      Complex complex13 = complex2.exp();
      complex6.multiply(1965);
      Complex complex14 = Complex.valueOf(1695.74);
      complex13.createComplex(1695.74, (-2.0764122246389383E-9));
      complex5.readResolve();
      complex13.acos();
      complex9.cos();
      complex12.multiply((-2.0764122246389383E-9));
      complex14.acos();
      complex13.readResolve();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9999999306614427);
      complex0.NaN.subtract((-2.870168560029448E-284));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.reciprocal();
      complex1.readResolve();
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.acos();
      complex2.cosh();
      Complex complex5 = Complex.valueOf(Double.NaN, (-3286.2643108987163));
      complex1.isInfinite();
      complex5.acos();
      complex4.isNaN();
      complex4.isNaN();
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex6.tan();
      Complex complex7 = Complex.I;
      complex4.log();
      Complex complex8 = new Complex((-3286.2643108987163), Double.NaN);
      complex8.sinh();
      complex3.tanh();
      Complex complex9 = Complex.ZERO;
      complex9.asin();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-172.827346));
      complex0.add((-172.827346));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Double.NaN;
      Complex complex0 = new Complex(Double.NaN);
      complex0.ZERO.nthRoot(3464);
      Complex complex1 = complex0.ZERO.add(Double.NaN);
      complex1.I.acos();
      complex0.INF.readResolve();
      try { 
        complex0.ZERO.nthRoot((-1303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,303
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(191.59512, 191.59512);
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex(191.59512, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.acos();
      complex0.isInfinite();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.ONE;
      complex1.readResolve();
      Complex complex6 = Complex.valueOf(191.59512, 0.0);
      complex0.isInfinite();
      Complex complex7 = complex3.acos();
      complex1.isNaN();
      complex6.isNaN();
      complex7.tan();
      complex4.log();
      complex7.sinh();
      complex6.tanh();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.add((-20.0));
      complex1.ZERO.pow(complex0);
      complex0.divide(complex1);
      Complex complex2 = complex0.sinh();
      complex1.tanh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(6.933855730431659E-8, 6.933855730431659E-8);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.reciprocal();
      complex2.readResolve();
      complex0.log();
      Complex complex3 = complex1.acos();
      complex0.cosh();
      Complex complex4 = new Complex(3598.0);
      complex3.pow(complex4);
      complex4.divide(complex2);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1165.5893782744758), (-1165.5893782744758));
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.reciprocal();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf((-1165.5893782744758));
      complex1.acos();
      complex2.sinh();
      complex1.createComplex(619.8227539, (-1165.5893782744758));
      complex1.cos();
      complex3.multiply(1);
      complex3.acos();
      complex4.sinh();
      Complex complex5 = Complex.ONE;
      Object object0 = complex5.readResolve();
      Complex complex6 = Complex.valueOf(0.041666663879186654, 0.8414709848078965);
      Complex complex7 = complex6.tanh();
      complex7.NaN.getArgument();
      complex7.equals(complex3);
      Complex complex8 = Complex.INF;
      complex0.sqrt1z();
      complex2.divide(complex6);
      Complex complex9 = Complex.I;
      object0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.reciprocal();
      complex1.readResolve();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ONE;
      complex4.createComplex(619.8227539, 619.8227539);
      Complex complex7 = complex2.cos();
      complex7.multiply(632);
      complex7.acos();
      Complex complex8 = complex4.sinh();
      Complex complex9 = Complex.ONE;
      complex5.readResolve();
      Complex.valueOf((-20.0), 4484.839882);
      Complex complex10 = Complex.NaN;
      complex1.isNaN();
      complex4.isNaN();
      Complex complex11 = Complex.NaN;
      complex10.tan();
      complex8.log();
      Complex complex12 = Complex.ONE;
      complex5.tan();
      Complex complex13 = Complex.ZERO;
      complex3.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2223.8152940153477, 704.09484);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.acos();
      complex0.sinh();
      Complex complex6 = new Complex(2223.8152940153477, 704.09484);
      complex2.cos();
      complex1.multiply(1);
      complex5.acos();
      complex3.sinh();
      Complex complex7 = Complex.ONE;
      complex0.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY, 704.09484);
      Complex complex8 = Complex.NaN;
      complex7.isNaN();
      complex5.isNaN();
      Complex complex9 = Complex.NaN;
      complex7.tan();
      complex4.log();
      Complex complex10 = Complex.valueOf(0.7853981633974483);
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      complex0.I.sinh();
      Complex complex2 = Complex.ZERO;
      complex2.getField();
      Complex complex3 = complex0.exp();
      double double0 = 0.9999862631566009;
      Complex complex4 = new Complex(0.9999862631566009);
      Complex complex5 = complex0.cos();
      double double1 = 0.0;
      Complex complex6 = complex3.multiply(0.9999862631566009);
      complex1.getArgument();
      Complex complex7 = Complex.ZERO;
      complex7.tanh();
      complex5.sqrt1z();
      complex0.multiply(0.9999862631566009);
      Complex complex8 = complex6.asin();
      double double2 = 2401.30907;
      complex8.divide(2401.30907);
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(507.8876458);
      Complex complex1 = complex0.INF.subtract(complex0);
      complex1.add(507.8876458);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.getImaginary();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      complex0.I.sinh();
      Complex complex2 = Complex.ZERO;
      complex2.getField();
      Complex complex3 = complex0.exp();
      Complex complex4 = new Complex(0.9999862631566009);
      complex1.subtract(complex4);
      complex0.cos();
      Complex complex5 = complex3.multiply(0.9999862631566009);
      complex1.getArgument();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.tanh();
      complex0.sqrt1z();
      complex5.multiply(0.0);
      complex5.asin();
      complex7.divide(0.9999862631566009);
      complex0.divide((-507.8876458));
      complex2.getImaginary();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = complex0.ONE.multiply(Double.POSITIVE_INFINITY);
      complex1.I.log();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.NaN;
      complex2.isNaN();
      complex1.isNaN();
      Complex.valueOf((-20.0), 1329.730905499879);
      complex0.log();
      Complex complex4 = Complex.INF;
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      complex1.NaN.atan();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.readResolve();
      complex2.conjugate();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.ZERO.toString();
      Complex complex4 = complex0.subtract(complex1);
      complex0.isNaN();
      Complex complex5 = complex4.INF.subtract(0.0);
      complex1.nthRoot(7);
      complex1.cos();
      Complex complex6 = Complex.I;
      complex1.tanh();
      complex6.equals(complex3);
      Complex complex7 = Complex.INF;
      complex6.sqrt1z();
      complex5.divide(complex6);
      complex6.atan();
      Complex complex8 = Complex.I;
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-1163.41928523053));
      complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((-1163.41928523053), (-1003.0));
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.reciprocal();
      complex1.createComplex(0.0, 4.438921624363781E-8);
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.multiply((-2788));
      Complex complex8 = complex7.acos();
      complex5.isInfinite();
      Complex complex9 = complex0.sinh();
      Complex complex10 = new Complex(2.0780820846557617, (-1003.0));
      complex1.readResolve();
      Complex.valueOf(4.438921624363781E-8, 0.0);
      Complex complex11 = Complex.INF;
      complex9.sqrt1z();
      complex8.divide(complex2);
      Complex complex12 = complex3.multiply((-152.64799));
      complex12.atan();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex(Double.POSITIVE_INFINITY, (-47.52406202797262));
      Complex complex3 = complex0.multiply((-929));
      complex3.acos();
      complex1.readResolve();
      Complex.valueOf(145444.5399801456, 2433.3206125234);
      Complex complex4 = Complex.NaN;
      complex2.log();
      complex4.sinh();
      Complex.valueOf(Double.NaN, 2.0);
      Complex.valueOf((-47.52406202797262), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.I.sinh();
      complex2.ZERO.multiply(complex0);
      Complex complex3 = Complex.ZERO;
      complex3.getField();
      Complex complex4 = complex0.exp();
      Complex complex5 = new Complex(0.9999862631566009);
      complex1.subtract(complex5);
      complex0.cos();
      Complex complex6 = complex4.multiply(0.9999862631566009);
      complex1.getArgument();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.tanh();
      complex0.sqrt1z();
      Complex complex9 = complex6.multiply(0.0);
      complex6.asin();
      complex8.divide(0.9999862631566009);
      Complex complex10 = complex9.pow(complex8);
      Complex complex11 = Complex.I;
      Complex complex12 = Complex.valueOf(0.9999862631566009, 3365.8);
      complex12.abs();
      Complex complex13 = complex10.multiply((-1934));
      Complex complex14 = complex6.multiply(3365.800148549009);
      complex9.isInfinite();
      complex4.acos();
      complex9.isNaN();
      complex4.isNaN();
      complex14.tan();
      complex13.log();
      complex7.log();
      complex3.sinh();
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1177.3780093180205));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.log();
      complex0.I.acos();
      Complex complex5 = complex1.NaN.cosh();
      complex0.reciprocal();
      complex2.createComplex((-1177.3780093180205), 0.0);
      Complex complex6 = complex3.cos();
      Complex complex7 = complex4.multiply(17);
      complex4.acos();
      complex5.isInfinite();
      complex7.sinh();
      Complex complex8 = new Complex((-1359.3762926315221), 1.1752011936438014);
      complex8.readResolve();
      Complex.valueOf(0.0, (double) 17);
      Complex complex9 = Complex.INF;
      complex9.sqrt1z();
      complex2.divide(complex6);
      Complex complex10 = Complex.NaN;
      complex1.atan();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      complex1.INF.reciprocal();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.log();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex2.createComplex(145444.5399801456, 5.399227989109673E44);
      complex4.cos();
      complex5.add(264.0);
      Complex complex6 = complex2.divide(5.399227989109673E44);
      complex6.getImaginary();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.NaN.asin();
      Complex.valueOf(2.0, 2.0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.ONE.createComplex((-755.8781), (-2529.0));
      complex3.nthRoot(2746);
      complex1.getArgument();
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.atan();
      complex2.readResolve();
      Complex complex5 = complex2.log();
      Complex complex6 = complex1.acos();
      complex4.cosh();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex5.createComplex(0.0, (-20.0));
      complex3.cos();
      Complex complex9 = complex0.multiply((-998));
      complex8.acos();
      complex6.isInfinite();
      complex1.sinh();
      Complex complex10 = new Complex(1.1752011936438014, 0.0);
      complex1.readResolve();
      Complex.valueOf(1.1752011936438014, (-2250.0));
      Complex complex11 = Complex.INF;
      complex6.sqrt1z();
      Complex complex12 = complex9.divide(complex7);
      complex11.multiply(187.974294619022);
      complex1.atan();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      complex1.INF.reciprocal();
      Complex complex2 = Complex.valueOf((-1165.2027144548879), (-1165.2027144548879));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex2.sqrt();
      complex6.hashCode();
      complex1.pow(complex5);
      Complex.valueOf(830.7731962192);
      complex6.createComplex(248.51881511227185, 2.427240455243201E-202);
      complex1.multiply(complex3);
      Complex complex7 = Complex.valueOf(0.5551414489746094, 0.5551414489746094);
      try { 
        complex7.nthRoot((-543));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -543
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.log();
      complex0.I.acos();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.reciprocal();
      complex2.createComplex((-1163.41928523053), 0.0);
      Complex complex6 = Complex.INF;
      complex5.tanh();
      Complex complex7 = complex0.createComplex((-1378.613903), 20.0);
      complex6.nthRoot(1507);
      complex1.add(complex0);
      complex3.nthRoot(1136);
      complex7.cosh();
      complex1.isNaN();
      complex7.sqrt();
      complex1.abs();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.reciprocal();
      complex0.readResolve();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.acos();
      complex1.cosh();
      Complex complex5 = complex1.reciprocal();
      complex1.subtract(complex5);
      complex3.hashCode();
      Complex complex6 = Complex.valueOf((-1163.41928523053), 264.0);
      Complex complex7 = complex6.pow(complex4);
      Complex.valueOf(264.0);
      complex6.tanh();
      complex7.createComplex(5.436563491821289, 5.436563491821289);
      int int0 = (-2559);
      try { 
        complex3.nthRoot((-1710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,710
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.toString();
      complex0.subtract(complex1);
      complex0.isNaN();
      complex0.tanh();
      Complex complex6 = complex0.createComplex((-1.0), 1.709383487701416);
      complex3.nthRoot(7);
      Complex complex7 = complex6.add(complex0);
      complex7.I.tanh();
      complex2.nthRoot(114);
      Complex complex8 = complex4.cosh();
      complex6.isNaN();
      complex7.sqrt();
      complex0.abs();
      complex8.sqrt();
      Complex.valueOf(1283849.4332463173, 1283849.4332463173);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.nthRoot(2435);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf((-1274.64949));
      Complex complex4 = complex2.pow(complex3);
      complex1.acos();
      complex1.tanh();
      Complex complex5 = complex2.createComplex((-1274.64949), (-1274.64949));
      complex5.nthRoot(2435);
      Complex complex6 = Complex.ZERO;
      complex6.add(complex4);
      // Undeclared exception!
      complex0.nthRoot(2435);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.atan();
      Complex.valueOf(830.7731962192, 830.7731962192);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex1.sqrt();
      complex0.hashCode();
      complex6.pow(complex7);
      double double0 = 2.1859533890937697E-19;
      Complex complex8 = Complex.valueOf(2.1859533890937697E-19);
      Complex complex9 = complex8.createComplex(2.1859533890937697E-19, 830.7731962192);
      Complex complex10 = complex9.multiply(complex6);
      complex10.I.cos();
      Complex.valueOf(5520.57, 1101.2508207);
      try { 
        complex3.nthRoot((-543));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -543
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(507.8876458);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf((-0.9999999999987867));
      complex5.toString();
      complex0.subtract(complex3);
      Complex complex6 = Complex.I;
      complex6.isNaN();
      complex0.INF.conjugate();
      complex4.subtract(4.748140799544371E-10);
      complex6.nthRoot(127);
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.I;
      Complex complex9 = complex5.tanh();
      complex8.equals(complex3);
      Complex complex10 = Complex.NaN;
      complex1.pow(complex10);
      Complex complex11 = Complex.I;
      complex9.divide(complex1);
      complex7.asin();
      Complex complex12 = Complex.INF;
      complex0.add(complex12);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.I.acos();
      Complex complex6 = complex1.NaN.cosh();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex4.subtract(complex1);
      complex8.I.hashCode();
      Complex complex9 = complex6.createComplex((-1.0), 145444.5399801456);
      Complex complex10 = complex3.cos();
      complex5.multiply(1073741824);
      complex1.acos();
      complex7.isInfinite();
      complex0.sinh();
      complex4.readResolve();
      Complex complex11 = Complex.valueOf((-1.0), (-639.1));
      Complex complex12 = Complex.NaN;
      complex10.sqrt1z();
      complex7.divide(complex2);
      complex9.multiply(5.399227989109673E44);
      Complex complex13 = Complex.valueOf(264.0, (-145592.37731505808));
      complex13.atan();
      complex7.abs();
      Complex complex14 = Complex.ONE;
      complex11.multiply(complex14);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getArgument();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.reciprocal();
      complex1.ONE.toString();
      complex3.ONE.getField();
      Complex complex4 = complex3.cos();
      complex4.INF.subtract(0.0);
      complex1.NaN.cos();
      complex4.atan();
      complex2.toString();
      complex2.abs();
      complex0.ZERO.log();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex5.ONE.pow(complex2);
      complex5.ONE.getArgument();
      complex3.negate();
      Complex complex7 = complex5.subtract((-1.0));
      complex7.nthRoot(2379);
      complex6.reciprocal();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.389055650151022, (-0.8414709848078965));
      Complex complex1 = complex0.I.cosh();
      complex0.toString();
      Complex complex2 = Complex.valueOf(5.5996586041611455E262);
      Complex complex3 = Complex.valueOf(1283849.4332463173);
      Complex complex4 = complex0.add(complex2);
      complex4.ZERO.pow((-3.78334));
      complex3.INF.nthRoot(1750);
      Complex complex5 = complex3.subtract(2.0);
      complex5.atan();
      Complex complex6 = complex0.log();
      complex6.NaN.multiply(complex0);
      complex6.NaN.getArgument();
      complex1.divide((-0.8414709848078965));
      Complex complex7 = complex6.cos();
      Complex complex8 = complex0.sqrt();
      complex8.INF.asin();
      complex7.sqrt1z();
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(507.8876458);
      Complex complex1 = complex0.INF.subtract(complex0);
      Complex complex2 = complex0.atan();
      complex2.add(507.8876458);
      complex1.NaN.add((-98.06335744195019));
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      complex3.getImaginary();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.6464973968536);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(504.6464973968536, 504.6464973968536);
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex0.sqrt1z();
      Complex.valueOf((-330.26612), 504.6464973968536);
      complex5.ONE.getArgument();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.negate();
      complex7.sinh();
      complex7.divide(complex1);
      complex3.subtract((-2023.5482057));
      complex1.tanh();
      Complex complex8 = complex7.sqrt1z();
      complex2.getImaginary();
      complex8.readResolve();
      Complex complex9 = complex3.tanh();
      Complex.valueOf((-717.4239));
      complex6.hashCode();
      complex9.ZERO.acos();
      complex2.createComplex(0.0, (-2011.79));
      complex2.isNaN();
      complex9.getReal();
      complex0.pow(9.529727908157224E95);
      complex4.subtract((-717.4239));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.log();
      complex0.I.acos();
      complex1.NaN.cosh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex4.subtract(complex1);
      complex6.I.hashCode();
      complex5.pow(complex4);
      Complex.valueOf((-1163.41928523053));
      Complex complex7 = new Complex((-1003.0), (-1163.41928523053));
      complex2.multiply(complex1);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-98.0), (-98.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.subtract(complex2);
      complex2.hashCode();
      Complex complex4 = Complex.INF;
      complex3.pow(complex4);
      Complex complex5 = Complex.valueOf((-6.655106680680314E-8));
      Complex complex6 = complex2.createComplex((-98.0), 333238.51508);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.multiply(complex5);
      Complex.valueOf((-98.0), 1666.39946274);
      complex1.multiply(955);
      Complex complex9 = Complex.I;
      complex9.nthRoot(1);
      complex6.getArgument();
      Complex complex10 = Complex.ONE;
      complex10.add(893.34);
      complex0.createComplex(955, (-6.655106680680314E-8));
      complex8.createComplex(1143.22, 1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.5);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(504.5, 504.5);
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex0.sqrt1z();
      complex3.INF.atan();
      complex5.ONE.getArgument();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.negate();
      complex7.sinh();
      complex7.divide(complex1);
      complex3.subtract((-2023.5482057));
      complex1.tanh();
      Complex complex8 = complex7.sqrt1z();
      complex2.getImaginary();
      complex8.readResolve();
      Complex complex9 = complex3.tanh();
      Complex.valueOf((-717.4239));
      complex6.hashCode();
      complex9.ZERO.acos();
      complex2.createComplex(0.0, (-2011.79));
      complex2.isNaN();
      complex9.getReal();
      complex0.pow(9.529727908157224E95);
      complex4.subtract((-717.4239));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.toString();
      Complex complex6 = Complex.I;
      complex0.isNaN();
      complex6.INF.subtract(0.0);
      complex1.nthRoot(7);
      Complex complex7 = complex1.cos();
      Complex complex8 = Complex.I;
      complex8.INF.tanh();
      complex6.equals(complex8);
      Complex complex9 = complex8.pow(complex0);
      Complex complex10 = Complex.I;
      Complex.valueOf((double) 7, (double) 7);
      Complex complex11 = complex0.divide(complex10);
      complex11.asin();
      complex2.add(complex4);
      complex9.add(3756.7411414153);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.I.sinh();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(830.7731962192, 830.7731962192);
      Complex complex4 = complex3.I.sqrt1z();
      complex4.NaN.sinh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.subtract(complex3);
      complex6.hashCode();
      Complex complex7 = Complex.valueOf(830.7731962192);
      Complex complex8 = complex3.pow(complex7);
      Complex.valueOf(830.7731962192);
      complex0.createComplex((-540.870714019), 167.60524500145);
      Complex complex9 = complex2.multiply(complex8);
      Complex.valueOf(830.7731962192, (-1.17260039161597E-7));
      complex2.multiply((-1343));
      complex1.nthRoot(1371);
      complex9.getArgument();
      complex4.add(19.0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.log();
      complex0.I.acos();
      Complex complex5 = complex1.NaN.cosh();
      complex0.reciprocal();
      complex2.createComplex((-1163.41928523053), 0.0);
      Complex complex6 = complex3.cos();
      Complex complex7 = complex4.multiply(17);
      complex4.acos();
      complex5.isInfinite();
      complex7.sinh();
      Complex complex8 = new Complex((-1359.3762926315221), 1.1752011936438014);
      complex8.readResolve();
      Complex.valueOf(0.0, (double) 17);
      Complex complex9 = Complex.INF;
      complex9.sqrt1z();
      complex2.divide(complex6);
      complex5.multiply(187.974294619022);
      complex1.atan();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.NaN.multiply(1277);
      complex0.abs();
      complex0.getImaginary();
      Complex complex2 = complex1.exp();
      complex2.I.nthRoot(75);
      complex2.ZERO.add(1.0);
      complex2.NaN.getArgument();
      complex0.getImaginary();
      Complex complex3 = complex0.multiply(Double.NaN);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.divide(Double.NaN);
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex((-0.45405555228235084), 3107.61);
      Complex complex9 = new Complex((-3536368.5620830567));
      Complex complex10 = complex8.subtract(complex9);
      complex6.abs();
      complex1.multiply(2424);
      complex3.multiply(0.0);
      complex7.isInfinite();
      complex2.acos();
      complex10.isNaN();
      Complex complex11 = Complex.I;
      complex11.isNaN();
      complex8.tan();
      complex4.log();
      complex2.sinh();
      Complex complex12 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.7182817459106445);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.ONE.pow(3653.70502707248);
      complex2.ONE.nthRoot(2435);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex1.divide((double) 2435);
      Complex complex7 = Complex.valueOf(3653.70502707248, 2.7182817459106445);
      complex7.pow(complex1);
      Complex complex8 = Complex.I;
      Complex complex9 = complex1.subtract(complex5);
      complex2.abs();
      complex9.multiply((-1720));
      Complex complex10 = complex2.multiply((-360.3469694106));
      complex1.isInfinite();
      complex10.acos();
      complex2.isNaN();
      complex4.isNaN();
      complex6.tan();
      complex7.log();
      complex3.sinh();
      Complex complex11 = Complex.valueOf(2.7182817459106445);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(1329.730905499879, 1329.730905499879);
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.atan();
      complex2.getArgument();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.negate();
      complex2.sinh();
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = complex3.subtract(1571.8742);
      complex1.tanh();
      complex0.sqrt1z();
      complex0.getImaginary();
      complex6.readResolve();
      Complex complex7 = complex4.tanh();
      Complex complex8 = Complex.valueOf(1329.730905499879);
      complex0.hashCode();
      complex7.acos();
      complex5.createComplex((-717.4239), 0.6173312283870106);
      Complex complex9 = Complex.I;
      complex9.isNaN();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.5);
      complex0.ONE.tan();
      Complex complex1 = Complex.valueOf(504.5, 504.5);
      Complex complex2 = complex0.sinh();
      complex0.INF.getField();
      Complex complex3 = (Complex)complex0.readResolve();
      complex1.multiply(504.5);
      Complex complex4 = complex3.log();
      complex3.sqrt();
      complex2.sqrt();
      complex1.nthRoot(1);
      complex4.acos();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.5);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      complex0.readResolve();
      Complex complex4 = complex0.sqrt1z();
      complex3.INF.atan();
      complex4.ONE.getArgument();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.sinh();
      complex7.NaN.sinh();
      complex6.divide(complex1);
      Complex complex8 = Complex.NaN;
      complex1.tanh();
      Complex complex9 = complex6.sqrt1z();
      complex2.getImaginary();
      complex9.readResolve();
      Complex complex10 = complex3.tanh();
      Complex.valueOf((-717.4239));
      complex5.hashCode();
      complex2.createComplex(0.0, (-2011.79));
      complex2.isNaN();
      complex5.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.5);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(504.5, 504.5);
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      complex0.readResolve();
      Complex complex4 = complex0.sqrt1z();
      complex3.INF.atan();
      complex4.ONE.getArgument();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.sinh();
      complex6.divide(complex1);
      complex3.subtract((-2023.5482057));
      complex1.tanh();
      Complex complex8 = complex6.sqrt1z();
      complex2.getImaginary();
      complex8.readResolve();
      Complex complex9 = complex3.tanh();
      Complex.valueOf((-717.4239));
      complex5.hashCode();
      complex9.ZERO.acos();
      complex2.createComplex(0.0, (-2011.79));
      complex2.isNaN();
      complex9.getReal();
      complex6.getImaginary();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      complex1.INF.reciprocal();
      complex0.readResolve();
      Complex complex2 = complex0.log();
      complex0.I.acos();
      complex1.NaN.cosh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.subtract(complex1);
      complex4.I.hashCode();
      complex3.pow(complex2);
      Complex.valueOf((-1163.41928523053));
      complex2.tanh();
      double double0 = 107.0;
      complex4.createComplex(107.0, 264.0);
      try { 
        complex0.nthRoot((-2559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,559
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      complex1.INF.reciprocal();
      complex0.readResolve();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex2.subtract(complex1);
      complex6.sqrt();
      complex6.I.hashCode();
      Complex complex7 = complex5.pow(complex2);
      Complex.valueOf((-1163.41928523053));
      Complex complex8 = Complex.valueOf(1362.754853);
      complex8.nthRoot(61);
      Complex complex9 = complex2.cos();
      complex9.sqrt();
      Complex complex10 = Complex.I;
      Complex complex11 = complex0.tanh();
      complex11.equals(complex4);
      Complex complex12 = complex1.pow(complex3);
      Complex complex13 = Complex.I;
      Complex complex14 = Complex.valueOf((double) 61, 264.0);
      complex13.divide(complex14);
      complex12.asin();
      complex7.add(complex8);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.5);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(504.5, 504.5);
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      complex0.readResolve();
      Complex complex4 = complex0.sqrt1z();
      complex3.INF.atan();
      complex4.ONE.getArgument();
      complex4.exp();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.sinh();
      complex5.divide(complex1);
      complex3.subtract((-2023.5482057));
      complex1.tanh();
      Complex complex7 = complex5.sqrt1z();
      complex2.getImaginary();
      complex1.sinh();
      complex6.readResolve();
      Complex.valueOf(504.5, (-1.0));
      complex7.sqrt1z();
      Complex complex8 = Complex.valueOf(2699.03872832, 1.0);
      complex0.divide(complex8);
      Complex complex9 = complex1.multiply((-1.0));
      complex9.atan();
      complex2.abs();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf(830.7731962192, 830.7731962192);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex5.NaN.sinh();
      complex6.I.createComplex(830.7731962192, (-1359.3762926315221));
      complex3.cos();
      Complex complex7 = complex3.ZERO.multiply(1);
      Complex complex8 = new Complex((-1359.3762926315221), 1);
      complex8.isInfinite();
      complex7.readResolve();
      complex4.tanh();
      Complex.valueOf(2.2860509143963117E-8);
      complex7.hashCode();
      complex1.acos();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.createComplex((-2011.79), 20.0);
      complex2.isNaN();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.I.sinh();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(830.7731962192, 830.7731962192);
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.NaN.sinh();
      complex5.I.createComplex(830.7731962192, (-1359.3762926315221));
      Complex complex6 = complex2.cos();
      Complex complex7 = complex2.ZERO.multiply(1);
      Complex complex8 = complex7.INF.acos();
      complex6.isInfinite();
      complex6.sinh();
      complex3.INF.readResolve();
      Complex complex9 = Complex.valueOf((double) 1, 830.7731962192);
      complex9.NaN.sqrt1z();
      complex3.divide(complex9);
      complex7.multiply(1.378919824418909E-7);
      complex8.atan();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.NaN.multiply(1277);
      complex0.abs();
      complex0.getImaginary();
      Complex complex2 = complex1.exp();
      complex2.I.nthRoot(75);
      Complex complex3 = complex2.ZERO.add(1.0);
      complex2.NaN.getArgument();
      complex0.getImaginary();
      Complex complex4 = complex2.I.negate();
      complex2.ONE.hashCode();
      complex1.getArgument();
      complex2.getImaginary();
      Complex complex5 = complex1.I.asin();
      complex5.ONE.multiply(Double.NaN);
      Complex complex6 = complex0.divide(complex2);
      complex1.multiply(complex6);
      Complex complex7 = complex4.sinh();
      complex3.NaN.log();
      Complex complex8 = complex7.reciprocal();
      complex4.subtract(complex6);
      complex7.sqrt();
      complex3.cosh();
      complex1.abs();
      complex2.isNaN();
      complex5.tan();
      Complex complex9 = complex6.sinh();
      complex9.sqrt();
      complex8.abs();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-323.0));
      complex0.INF.exp();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      complex2.ONE.divide(0.0);
      try { 
        complex1.nthRoot((-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -545
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-98.0), (-98.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-6.655106680680314E-8), 2.0);
      complex2.I.sqrt1z();
      complex1.getImaginary();
      Complex complex3 = complex0.divide(92.9565409971084);
      Complex complex4 = complex3.log();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.nthRoot(93);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.multiply(1);
      complex2.ZERO.getArgument();
      Complex complex3 = complex2.ZERO.pow((double) 93);
      Complex complex4 = complex1.add((double) 1);
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex5.ZERO.tan();
      complex6.ONE.acos();
      Complex complex7 = complex1.sqrt1z();
      complex0.getImaginary();
      Complex complex8 = complex3.sin();
      complex8.createComplex(0.0, 0.0);
      Complex complex9 = complex8.pow((double) 1);
      Complex complex10 = complex7.multiply((double) 93);
      complex7.divide(complex5);
      complex10.hashCode();
      Complex complex11 = complex10.cosh();
      complex11.INF.multiply(1);
      int int0 = 0;
      complex9.ZERO.asin();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.reciprocal();
      complex0.readResolve();
      Complex complex3 = complex0.log();
      complex0.I.acos();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex3.subtract(complex1);
      complex6.I.hashCode();
      complex5.pow(complex3);
      Complex complex7 = Complex.valueOf((-1163.41928523053));
      complex7.NaN.createComplex(831.53273834, 831.53273834);
      complex2.multiply(complex1);
      Complex complex8 = Complex.valueOf(831.53273834, (-20.0));
      complex8.ZERO.multiply(955);
      complex5.nthRoot(1371);
      complex7.getArgument();
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1357.83663859);
      Complex complex1 = complex0.INF.multiply((-4859));
      complex1.I.cos();
      Complex complex2 = complex1.asin();
      complex1.INF.readResolve();
      Complex complex3 = complex0.INF.negate();
      complex0.NaN.hashCode();
      complex0.abs();
      Complex complex4 = complex1.pow(complex0);
      complex4.exp();
      complex4.abs();
      Complex complex5 = complex2.multiply((-4307));
      Complex complex6 = complex5.ZERO.reciprocal();
      complex0.toString();
      Complex complex7 = complex3.add(1357.83663859);
      complex6.negate();
      complex1.getArgument();
      complex3.acos();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(191.59512, 191.59512);
      Complex complex1 = complex0.sin();
      complex1.reciprocal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 618.11);
      complex0.ONE.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.multiply((-1.0));
      complex2.INF.sin();
      Complex complex3 = complex0.divide(complex1);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.ONE.add(0.5290185213088989);
      Complex complex5 = complex1.I.pow(3452.309542793801);
      Complex complex6 = complex0.ONE.cos();
      complex6.ONE.sin();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.ONE.atan();
      complex8.conjugate();
      complex5.ONE.readResolve();
      Complex complex9 = complex7.INF.cosh();
      complex7.ONE.toString();
      complex5.INF.sqrt1z();
      Complex complex10 = complex7.I.pow(0.0);
      complex10.ONE.conjugate();
      Complex complex11 = complex5.add(complex0);
      complex11.NaN.getArgument();
      complex9.abs();
      complex6.multiply(3452.309542793801);
      Complex complex12 = complex11.pow(0.0);
      complex9.multiply(complex7);
      complex3.asin();
      complex0.sqrt1z();
      complex9.readResolve();
      complex4.cos();
      complex6.cos();
      Complex complex13 = Complex.I;
      complex4.pow(complex13);
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex1.ZERO.multiply(0);
      complex2.ONE.multiply((double) 0);
      Complex complex7 = complex6.INF.pow(3506.0581713);
      Complex.valueOf(0.0);
      complex0.getImaginary();
      Complex complex8 = complex2.I.subtract(complex1);
      Complex complex9 = complex8.NaN.atan();
      complex1.conjugate();
      Complex complex10 = complex0.multiply((-1007));
      Complex complex11 = complex10.asin();
      complex11.I.add(complex5);
      complex11.ZERO.acos();
      complex10.NaN.reciprocal();
      complex2.toString();
      complex2.getReal();
      complex1.isNaN();
      Complex complex12 = complex1.acos();
      complex0.getReal();
      complex9.sin();
      complex12.atan();
      Complex complex13 = Complex.valueOf((double) (-1007));
      Complex complex14 = Complex.ZERO;
      complex13.I.add(complex14);
      complex7.atan();
      complex3.sinh();
      Complex.valueOf((-331.6196137748562), Double.POSITIVE_INFINITY);
      Complex.valueOf((double) (-1007), (double) (-1007));
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(507.8876458);
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.abs();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.NaN.pow(complex1);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = Complex.NaN;
      complex5.sin();
      complex0.multiply(complex5);
      complex3.sinh();
      complex3.createComplex((-20.0), 2022.438528573);
      Complex complex6 = complex4.divide(0.0);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.NaN.pow(complex1);
      complex3.INF.multiply(0.0);
      complex3.ZERO.createComplex(Double.NaN, (-132.26));
      complex0.ONE.cosh();
      complex1.reciprocal();
      complex2.sqrt();
      Complex complex4 = Complex.valueOf((-2531.90771790382));
      complex4.NaN.tan();
      complex4.ZERO.negate();
      Complex complex5 = complex1.subtract(0.0);
      complex2.multiply(0.0);
      complex2.reciprocal();
      int int0 = 7;
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.log();
      complex2.ZERO.getField();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex4.ZERO.cos();
      complex3.multiply(0.0);
      complex3.ONE.getArgument();
      Complex complex6 = complex0.INF.tanh();
      complex6.I.sqrt1z();
      complex3.ONE.multiply(0.0);
      complex4.asin();
      Complex complex7 = complex3.divide(0.0);
      complex7.pow(complex4);
      Complex complex8 = Complex.I;
      complex1.subtract(complex8);
      complex3.INF.abs();
      complex2.NaN.multiply((-1934));
      Complex complex9 = complex8.multiply(556.239);
      complex1.isInfinite();
      complex5.acos();
      complex9.isNaN();
      complex5.isNaN();
      complex8.tan();
      complex3.log();
      complex4.sinh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.toString();
      Complex complex6 = complex0.subtract(complex1);
      complex0.isNaN();
      complex6.INF.subtract(0.0);
      complex1.nthRoot(7);
      complex1.cos();
      Complex complex7 = Complex.I;
      complex7.INF.tanh();
      complex6.equals(complex7);
      complex7.pow(complex0);
      Complex complex8 = Complex.I;
      Complex complex9 = complex0.divide(complex8);
      complex9.asin();
      complex2.add(complex4);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.pow((-1092.92208));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.I.acos();
      complex4.ONE.tanh();
      Complex complex5 = complex0.add((-1.0));
      complex0.equals(complex5);
      Complex complex6 = complex5.acos();
      complex5.ZERO.toString();
      complex6.createComplex((-1.0), 1308.3242027);
      complex2.conjugate();
      complex3.exp();
      complex4.multiply(1720.28379946872);
      complex1.sqrt();
      complex5.sqrt();
      Complex.valueOf((-1.0));
      complex3.sqrt1z();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(903.637);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.multiply(1);
      complex3.ONE.toString();
      Complex complex4 = complex3.divide((double) 1);
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = Complex.valueOf((double) 1, 3285.907);
      Complex complex7 = complex3.exp();
      complex3.ONE.subtract(1160.3);
      complex4.INF.sqrt1z();
      complex7.ONE.divide((-4979.7238));
      complex6.createComplex(5944.290745641276, 0.25694090127944946);
      Complex complex8 = complex6.negate();
      complex8.I.multiply(903.637);
      complex3.createComplex(1, 1);
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex5.multiply(920);
      complex1.isNaN();
      complex2.reciprocal();
      complex11.sqrt();
      complex10.createComplex(2.0, 403.215215498705);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex3.ZERO.add(complex2);
      complex4.ONE.readResolve();
      complex0.hashCode();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.INF.createComplex(0.0, 0.0);
      complex6.INF.conjugate();
      Complex complex7 = Complex.valueOf((-2116.90383004), (-2116.90383004));
      complex7.ZERO.exp();
      complex3.readResolve();
      Complex complex8 = complex0.divide(complex3);
      complex8.conjugate();
      complex0.getReal();
      complex8.equals(complex1);
      complex1.equals("NOT_STRICTLY_INCREASING_SEQUENCE");
      complex1.INF.pow((-3181.66261158));
      try { 
        complex7.nthRoot((-2129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,129
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ONE.log();
      complex1.negate();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex2.NaN.divide(1225.0);
      Complex complex4 = complex0.divide(1225.0);
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex3.ZERO.sinh();
      complex6.INF.toString();
      Complex complex7 = complex1.multiply(1225.0);
      complex7.ZERO.nthRoot(1162);
      complex4.NaN.getField();
      complex7.getImaginary();
      complex5.multiply(complex4);
      complex2.I.subtract(0.0);
      Complex complex8 = Complex.valueOf(20.0);
      Complex complex9 = complex3.log();
      complex8.getReal();
      complex1.tan();
      complex8.readResolve();
      Complex.valueOf(1225.0);
      complex0.sqrt();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex9.multiply(complex0);
      complex3.multiply((-1011));
      complex10.pow(complex11);
      complex5.multiply(complex2);
      complex7.sqrt();
      complex0.reciprocal();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.INF.acos();
      complex1.ONE.divide(0.0);
      Complex complex2 = complex0.ZERO.createComplex((-2833.7879321098), (-2833.7879321098));
      Complex complex3 = Complex.valueOf((-2833.7879321098));
      Complex complex4 = complex3.INF.acos();
      complex0.I.subtract(complex3);
      complex4.I.getField();
      Complex.valueOf((-2270.28307346362), 0.0);
      complex0.readResolve();
      complex4.hashCode();
      complex4.toString();
      Complex complex5 = complex1.log();
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(1192.78);
      Complex complex1 = complex0.I.subtract(1192.78);
      complex1.I.add(complex0);
      Complex complex2 = complex1.NaN.multiply(1192.78);
      Complex complex3 = complex0.pow((-3896.6279212));
      Complex complex4 = complex0.reciprocal();
      complex4.ONE.asin();
      Complex.valueOf((-2.512551));
      Complex.valueOf((-288.6464847));
      complex4.conjugate();
      complex0.cosh();
      Complex complex5 = Complex.valueOf(0.32341301441192627, 0.32341301441192627);
      Complex complex6 = complex0.INF.sqrt();
      complex6.I.toString();
      complex5.I.add((-2.512551));
      Complex complex7 = complex4.I.negate();
      Complex complex8 = complex3.multiply(complex4);
      Complex complex9 = complex0.reciprocal();
      complex9.ZERO.tanh();
      Complex complex10 = complex2.pow(complex8);
      complex10.I.reciprocal();
      Complex complex11 = complex10.pow(1192.78);
      complex5.isNaN();
      Complex complex12 = complex7.atan();
      complex12.negate();
      Complex complex13 = complex0.createComplex(0.32341301441192627, 2.0);
      complex13.INF.multiply(848);
      complex8.atan();
      complex2.divide(0.32341301441192627);
      complex4.isNaN();
      complex11.tan();
      complex0.multiply(848);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.7182817459106445);
      complex0.sqrt1z();
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.ONE.pow(3653.70502707248);
      complex1.ONE.nthRoot(2435);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.pow(complex2);
      complex0.INF.acos();
      complex2.ZERO.tanh();
      Complex complex4 = complex3.createComplex(2435, 2435);
      int int0 = (-2559);
      try { 
        complex4.nthRoot((-2559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,559
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.NaN.pow(complex2);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.atan();
      complex6.NaN.abs();
      Complex complex7 = complex1.INF.createComplex(1629.32978177132, 1629.32978177132);
      complex7.I.reciprocal();
      complex0.getField();
      Complex complex8 = complex2.NaN.multiply(complex4);
      complex5.divide((-1497.2823047856284));
      Complex complex9 = complex2.reciprocal();
      complex9.conjugate();
      Complex complex10 = complex8.pow(4490.25821);
      complex10.getReal();
      Complex complex11 = Complex.valueOf(3753.449, Double.NaN);
      complex2.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1537.979, 1537.979);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.createComplex(0.0, 1537.979);
      complex1.NaN.exp();
      complex0.readResolve();
      complex0.INF.createComplex(1537.979, 1537.979);
      Complex complex3 = complex1.sin();
      complex3.ZERO.createComplex((-9.879317845E-315), 0.0);
      complex3.ONE.sqrt1z();
      Complex complex4 = complex1.conjugate();
      complex4.INF.multiply(0.0);
      Complex complex5 = complex2.divide(complex1);
      complex5.NaN.log();
      complex1.NaN.asin();
      Complex complex6 = complex2.exp();
      complex6.toString();
      Complex complex7 = complex2.pow(0.0);
      complex7.ONE.divide(1537.979);
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex8.ONE.pow((-2379.0));
      Complex.valueOf(1537.979);
      complex1.getImaginary();
      complex5.reciprocal();
      Complex complex10 = complex0.sqrt();
      complex9.exp();
      complex4.isInfinite();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3299.7548, (-4.556583652800433E-8));
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.getArgument();
      complex0.isInfinite();
      complex0.I.conjugate();
      complex0.getArgument();
      Complex complex2 = complex1.divide(0.0);
      complex2.ZERO.subtract(complex1);
      Complex complex3 = complex1.asin();
      complex0.readResolve();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex5.INF.atan();
      complex6.ONE.log();
      complex1.ZERO.add(complex6);
      complex5.ONE.acos();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.ZERO.subtract(complex0);
      complex1.ONE.createComplex((-1.3808855290703516E-11), 1.42436589329759E250);
      complex2.divide(complex3);
      Complex complex9 = complex7.tan();
      Complex complex10 = complex3.divide((-1.3808855290703516E-11));
      complex6.pow(2975.33783383);
      complex8.NaN.divide(complex7);
      complex3.equals("");
      complex9.divide(complex8);
      Complex.valueOf(0.0, (-205.3498));
      complex10.getReal();
      complex3.sqrt1z();
      complex0.hashCode();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.conjugate();
      complex0.abs();
      Complex complex4 = complex1.ZERO.createComplex(0.0, (-2657.858074145868));
      Complex complex5 = complex3.NaN.pow((-1936.4751646733));
      Complex complex6 = complex5.NaN.sqrt1z();
      complex1.divide(complex0);
      Complex complex7 = complex4.ZERO.asin();
      complex7.ONE.multiply(complex4);
      Complex complex8 = complex6.I.createComplex(0.0, (-3655.0));
      Complex.valueOf(0.0);
      complex2.getImaginary();
      Complex complex9 = complex0.multiply((-725));
      complex9.NaN.multiply(complex4);
      Complex complex10 = Complex.valueOf((-2657.858074145868), 0.0);
      complex6.ZERO.tan();
      complex10.createComplex(0.6379399299621582, 0.6379399299621582);
      complex5.pow(complex9);
      complex0.negate();
      Complex complex11 = complex5.pow(complex4);
      Complex complex12 = complex11.NaN.multiply((-725));
      complex12.ONE.getArgument();
      Complex complex13 = complex2.cosh();
      complex8.log();
      complex6.divide(0.0);
      complex2.sin();
      try { 
        complex13.nthRoot((-1649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,649
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      complex1.NaN.conjugate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.multiply(complex0);
      complex2.ZERO.cos();
      complex1.getArgument();
      Complex complex4 = complex2.subtract(complex0);
      complex0.ZERO.divide(complex4);
      Complex complex5 = complex4.log();
      complex0.readResolve();
      complex5.INF.abs();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex3.ONE.conjugate();
      complex8.cos();
      Complex complex9 = complex5.multiply(0.6000806093215942);
      Complex complex10 = complex7.divide(1.2949980563724296E-100);
      complex4.NaN.cosh();
      complex10.INF.log();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex6.atan();
      complex11.toString();
      complex1.pow(complex9);
      complex11.sinh();
      Complex.valueOf(1379.56);
      complex10.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.I.sqrt1z();
      complex2.ONE.abs();
      complex1.NaN.sqrt1z();
      complex1.ONE.nthRoot(532);
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex3.exp();
      complex0.getArgument();
      Complex complex5 = complex4.sinh();
      complex1.NaN.createComplex(4243.73648403558, 3.2345523990372546E-222);
      Complex complex6 = Complex.valueOf((-1322.894884205453), 0.0);
      complex0.ONE.conjugate();
      Complex complex7 = complex6.NaN.multiply(1.0);
      complex7.NaN.sqrt();
      complex5.ONE.getArgument();
      try { 
        complex5.nthRoot((-528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -528
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(246.026);
      complex0.ZERO.conjugate();
      Complex complex1 = complex0.I.sqrt1z();
      int int0 = (-1);
      complex1.INF.add(complex0);
      Complex.valueOf((double) (-1), 246.026);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-255.25142923314345), (-255.25142923314345));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex1.INF.multiply((-4.801131671405377E-10));
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex5.INF.cosh();
      complex0.getArgument();
      complex1.NaN.abs();
      Complex complex7 = Complex.valueOf((-255.25142923314345), (-255.25142923314345));
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex7.I.cosh();
      complex3.atan();
      complex0.equals(complex8);
      complex3.reciprocal();
      Complex complex10 = complex2.divide(6.283185307179586);
      complex6.INF.log();
      complex10.I.sin();
      Complex complex11 = complex10.NaN.negate();
      complex11.NaN.divide(complex6);
      Complex complex12 = complex3.createComplex(0.0, (-255.25142923314345));
      Complex complex13 = complex4.subtract((-4.801131671405377E-10));
      complex13.ZERO.readResolve();
      complex3.pow(complex2);
      Complex complex14 = complex12.tan();
      complex14.sinh();
      complex7.subtract(1.075991153717041);
      complex4.getReal();
      Complex complex15 = complex4.multiply(complex11);
      complex9.tan();
      complex15.getReal();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex0.divide(complex1);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      complex1.multiply(194);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.ONE.add((-1645.429887890424));
      Complex complex4 = complex0.divide(1115.0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.divide((-2705.9088266711));
      Complex complex7 = complex2.multiply((-809));
      complex7.add(5.662033727488754E-22);
      complex7.getField();
      Complex complex8 = complex0.divide((-2705.9088266711));
      complex8.NaN.add(1115.0);
      Complex complex9 = complex0.divide(complex6);
      complex3.toString();
      complex4.createComplex((-2705.9088266711), (-1214.33));
      complex9.divide(1076.8);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.INF.reciprocal();
      complex3.INF.createComplex((-20.0), (-4316.0));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.sin();
      complex4.getImaginary();
      Complex complex6 = complex2.divide(-0.0);
      Complex complex7 = complex6.ONE.multiply((-4316.0));
      complex4.INF.multiply(complex6);
      complex6.ONE.negate();
      Complex complex8 = complex5.tanh();
      complex5.I.getField();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.I.multiply(126);
      complex10.NaN.getField();
      Complex complex11 = complex1.acos();
      Complex.valueOf(-0.0, 1265.0);
      Complex complex12 = complex8.multiply(-0.0);
      complex11.divide(complex8);
      complex11.isNaN();
      Complex complex13 = complex8.subtract(1265.0);
      complex12.subtract(601.644488525408);
      complex2.isNaN();
      Complex complex14 = complex13.multiply((-3275.57082));
      complex7.readResolve();
      complex7.add(-0.0);
      complex14.isInfinite();
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      complex0.INF.readResolve();
      List<Complex> list0 = complex0.ONE.nthRoot(1795);
      assertTrue(list0.contains(complex0));
      assertEquals(1795, list0.size());
      
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sin();
      complex3.INF.cosh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex4.ZERO.pow(complex3);
      Complex complex7 = complex6.INF.pow((-8.939932297357388E-58));
      complex2.INF.negate();
      complex7.I.getArgument();
      Complex complex8 = complex3.createComplex(1795, 1795);
      complex8.INF.cos();
      String string0 = complex5.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex9 = complex1.multiply((-1118));
      complex5.isInfinite();
      Complex complex10 = complex2.divide((-3717.316285091851));
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex0.reciprocal();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      complex1.hashCode();
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      
      Complex complex12 = complex6.tanh();
      assertTrue(complex12.equals((Object)complex7));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex12, complex7);
      
      complex5.getImaginary();
      assertTrue(complex0.equals((Object)complex11));
      assertSame(complex5, complex9);
      assertEquals(1.557407724654902, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.createComplex((-591.7757), 0.0);
      String string0 = complex1.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.pow(481.44370162397433);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex3.I.subtract(1783.82399);
      assertFalse(complex7.isInfinite());
      assertEquals(1.0, complex7.getImaginary(), 0.01);
      assertEquals((-1783.82399), complex7.getReal(), 0.01);
      
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex4.conjugate();
      assertSame(complex4, complex8);
      assertSame(complex9, complex5);
      
      double double0 = complex6.getArgument();
      assertSame(complex6, complex2);
      assertTrue(complex6.equals((Object)complex3));
      assertNotSame(complex6, complex3);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.valueOf((-2945.34661));
      Object object0 = complex0.ONE.readResolve();
      Complex complex3 = complex0.INF.sqrt1z();
      complex3.I.readResolve();
      Complex complex4 = complex1.ZERO.log();
      complex0.getField();
      complex0.hashCode();
      Complex complex5 = complex1.sqrt1z();
      complex5.INF.log();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertTrue(complex5.equals((Object)object0));
      
      Complex complex6 = complex1.NaN.tanh();
      Complex complex7 = complex4.subtract(0.0);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.asin();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertNotSame(complex10, complex3);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertSame(complex10, complex8);
      assertSame(complex10, complex6);
      
      complex0.getField();
      Complex complex11 = complex2.sqrt1z();
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(2945.346440240688, complex11.getImaginary(), 0.01);
  }
}
