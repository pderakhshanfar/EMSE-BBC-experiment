/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:05:07 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1346, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.multiply(2052282830);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.exp();
      complex0.nthRoot(1277);
      complex3.getArgument();
      complex1.getImaginary();
      Complex complex4 = complex2.negate();
      complex1.hashCode();
      complex3.getArgument();
      complex3.getImaginary();
      Complex complex5 = complex2.asin();
      complex5.ONE.conjugate();
      Complex complex6 = complex4.multiply(0.0);
      Complex complex7 = complex3.divide(complex2);
      complex4.multiply(complex0);
      Complex complex8 = complex1.sinh();
      complex8.I.divide(complex3);
      complex8.I.add(0.0);
      complex0.reciprocal();
      Complex complex9 = Complex.ZERO;
      complex1.subtract(complex4);
      complex4.NaN.subtract(complex8);
      Complex complex10 = complex6.sqrt();
      complex10.ONE.tan();
      complex0.cosh();
      complex7.abs();
      complex4.isNaN();
      complex6.tan();
      complex6.sinh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(191.6366284324218, 191.6366284324218);
      complex0.sin();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-2319.5827064));
      complex1.divide(complex0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3870.1631), Double.POSITIVE_INFINITY);
      complex0.multiply((-1937));
      Complex complex1 = new Complex(2.5301573702240453E9);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.exp();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex2.ONE.sin();
      complex3.I.atan();
      complex0.sin();
      Complex complex4 = complex1.sqrt();
      complex4.conjugate();
      Complex.valueOf(2468.5053008809386);
      complex2.cos();
      complex1.sqrt();
      complex4.abs();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.8006241790192544E7, (-20.0));
      Complex complex2 = complex0.exp();
      complex1.nthRoot(7);
      complex1.NaN.log();
      complex2.hashCode();
      complex1.getImaginary();
      complex0.negate();
      complex0.acos();
      Object object0 = new Object();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2854.0498503288), (-2854.0498503288));
      Complex complex1 = complex0.NaN.add((-2854.0498503288));
      complex1.ONE.negate();
      Complex complex2 = complex0.pow(6.283185307179586);
      complex2.cos();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(Double.NaN);
      complex0.I.sqrt();
      complex0.add(Double.POSITIVE_INFINITY);
      complex0.multiply(3050);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-3.292458622014749E252), (-1496.27));
      Complex complex1 = complex0.acos();
      complex1.INF.toString();
      Object object0 = new Object();
      complex0.equals(complex1);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.tan();
      complex3.sqrt1z();
      complex2.multiply(2175.28266279459);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(1907.115464, 2079683.6966666959);
      Complex complex1 = new Complex(1907.115464, 1907.115464);
      Complex complex2 = complex0.acos();
      Object object0 = new Object();
      Complex complex3 = new Complex(1907.115464);
      complex3.equals("p3c&,eN0");
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.tan();
      complex5.sqrt1z();
      Complex complex6 = complex0.multiply(1907.115464);
      complex6.multiply(51);
      complex6.pow((double) 51);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.ZERO.pow(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex2.createComplex((-258.501962128673), (-1701.6219));
      complex3.ONE.getArgument();
      complex2.ONE.abs();
      Complex complex4 = complex1.divide(Double.NaN);
      complex4.I.atan();
      complex2.INF.tan();
      complex0.subtract(complex2);
      Complex complex5 = Complex.valueOf((-258.501962128673));
      Complex complex6 = complex5.ONE.multiply((-2.5414506605892315E143));
      Complex.valueOf(1.0);
      Complex complex7 = complex6.ZERO.tanh();
      complex6.ZERO.negate();
      complex2.getField();
      complex3.sqrt();
      complex1.conjugate();
      Complex complex8 = complex7.tanh();
      complex8.ZERO.readResolve();
      Complex complex9 = complex6.add((-1701.6219));
      complex9.I.createComplex(1.0, Double.NaN);
      Complex complex10 = complex0.createComplex((-2.5414506605892315E143), 1.544673396032028E296);
      Complex complex11 = complex10.negate();
      complex11.cos();
      complex4.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(1907.115464, 2079683.6966666959);
      Complex complex1 = new Complex(1907.115464, 2079683.6966666959);
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.valueOf((-2546.05357));
      Object object0 = new Object();
      Complex complex4 = new Complex(1907.115464);
      complex4.equals("p3c&,eN0");
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.tan();
      complex6.sqrt1z();
      complex0.multiply(1907.115464);
      Complex complex7 = Complex.NaN;
      complex7.ONE.readResolve();
      Complex complex8 = Complex.INF;
      complex3.divide(complex8);
      Complex.valueOf(2079683.6966666959);
      complex3.nthRoot(2544);
      complex3.asin();
      complex0.tanh();
      Complex complex9 = complex6.log();
      complex1.toString();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2.0000000000002314);
      Complex complex2 = Complex.NaN;
      complex2.isInfinite();
      Complex complex3 = new Complex(0.0, 333.2262489521564);
      Complex complex4 = new Complex((-1472.28), 1.3477088714353158E-4);
      Complex complex5 = new Complex((-2546.05357), (-1.9638236426544609E-4));
      Complex complex6 = complex5.acos();
      Complex.valueOf(1.9638236426544609E-4);
      Object object0 = new Object();
      complex2.equals((Object) null);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex5.tan();
      complex8.sqrt1z();
      Complex complex9 = complex0.multiply(3.3972241102415988E81);
      Complex complex10 = Complex.NaN;
      Complex complex11 = new Complex(2525.741249, (-1.9638236426544609E-4));
      complex11.divide(complex4);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.nthRoot(37);
      complex9.asin();
      complex6.tanh();
      complex0.log();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply((-4578.4));
      Complex complex3 = complex0.divide(complex2);
      complex3.isNaN();
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.valueOf((-4353.815415));
      complex1.equals(complex2);
      Complex complex6 = complex3.tan();
      complex5.multiply(Double.NaN);
      Complex complex7 = Complex.ONE;
      complex6.pow(complex7);
      complex3.divide(complex1);
      Complex complex8 = complex3.asin();
      complex8.atan();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.NaN.createComplex(Double.NaN, 9.25896798127602E-242);
      Complex complex2 = complex1.ONE.subtract((-659.168946965255));
      Complex complex3 = new Complex(Double.NaN, (-659.168946965255));
      complex3.atan();
      complex0.INF.createComplex(2611.33828, 2611.33828);
      Complex complex4 = complex3.ONE.tan();
      complex4.exp();
      Complex.valueOf(1164.1265, 1164.1265);
      Complex complex5 = complex3.ZERO.add(complex0);
      Complex complex6 = complex5.ONE.pow((-3879.0));
      Complex complex7 = complex0.add(complex3);
      Complex complex8 = complex6.I.negate();
      complex8.INF.tanh();
      complex7.pow(complex0);
      complex6.ONE.exp();
      Complex complex9 = Complex.valueOf(251.6827);
      complex6.divide(Double.NaN);
      complex6.pow(complex2);
      Complex.valueOf(1.0, 0.6075552701950073);
      complex1.acos();
      complex9.add(1164.1265);
      complex8.multiply((-35));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.subtract(complex1);
      complex1.multiply(3691);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(191.59512, 191.59512);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply((-515.214006888));
      Complex complex3 = complex0.divide(complex1);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex4 = complex3.sin();
      complex4.asin();
      Complex complex5 = complex1.subtract(complex2);
      Complex complex6 = complex0.subtract(complex3);
      complex5.abs();
      complex6.negate();
      Complex complex7 = complex5.conjugate();
      complex3.add(complex0);
      complex0.add(complex7);
      Complex complex8 = complex7.tanh();
      complex1.cosh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.acos();
      Complex complex11 = complex8.divide(complex1);
      complex5.acos();
      complex7.sqrt1z();
      Complex complex12 = complex2.divide(Double.POSITIVE_INFINITY);
      complex8.hashCode();
      complex1.add(complex10);
      complex8.multiply(complex0);
      complex11.divide(complex0);
      Complex complex13 = complex3.asin();
      complex13.I.hashCode();
      complex12.log();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int int0 = 3710;
      Complex complex0 = Complex.valueOf((-1.0482571326594316E-8), (double) 3710);
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide((double) 466);
      Complex complex3 = new Complex((-273.113784288677), 6.10759370208E12);
      complex3.getField();
      Complex complex4 = complex0.multiply(1268);
      complex0.multiply(256.8068086319229);
      complex3.isInfinite();
      Complex complex5 = new Complex(9.789866978468824E30, Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex(2976, 466);
      complex6.acos();
      Complex complex7 = Complex.valueOf((-35.7));
      complex2.equals(complex4);
      Complex complex8 = Complex.INF;
      complex0.tan();
      complex7.multiply(0.5433003902435303);
      complex7.pow(complex5);
      complex4.divide(complex8);
      complex6.asin();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.getField();
      Complex complex2 = complex0.multiply((double) 2134);
      complex1.isInfinite();
      Complex complex3 = new Complex((-1356.70630723), 20.0);
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf(2179.72028587);
      Complex complex6 = Complex.I;
      complex3.equals(complex6);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.atan();
      complex3.ZERO.subtract(complex8);
      Complex complex9 = complex3.tan();
      complex9.I.sqrt();
      Complex complex10 = complex4.multiply(Double.NaN);
      Complex complex11 = Complex.INF;
      complex11.pow(complex5);
      complex7.divide(complex9);
      complex10.asin();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex1.getField();
      complex1.multiply((-2660.759420226335));
      complex1.isInfinite();
      double double0 = (-0.7615941559557649);
      Complex complex2 = new Complex((-0.7615941559557649), 1143.9);
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(1143.9);
      complex0.ZERO.sqrt1z();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      Complex complex5 = Complex.INF;
      complex3.atan();
      complex4.tan();
      double double1 = 1145.223018207;
      complex5.multiply(1145.223018207);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.INF.add((-1.0482571326594316E-8));
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.NaN.createComplex((-1.0482571326594316E-8), (-1.0482571326594316E-8));
      complex1.I.nthRoot(3710);
      Complex complex4 = complex1.ONE.divide(complex0);
      complex4.NaN.pow((double) 3710);
      Complex complex5 = Complex.valueOf((-1.0482571326594316E-8), (double) 3710);
      Complex complex6 = complex1.I.sqrt();
      complex0.equals(object0);
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.I.asin();
      complex8.ZERO.subtract(complex1);
      complex6.ZERO.subtract(complex5);
      complex1.abs();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex7.add(complex9);
      Complex complex12 = complex6.add(complex10);
      complex10.NaN.tanh();
      complex6.NaN.cosh();
      complex2.INF.acos();
      complex11.divide(complex6);
      complex9.NaN.acos();
      Complex complex13 = complex12.divide(Double.POSITIVE_INFINITY);
      complex11.ZERO.hashCode();
      complex6.add(complex13);
      Complex complex14 = complex3.multiply(complex11);
      complex14.ONE.exp();
      complex14.multiply((-1.0482571326594316E-8));
      Complex.valueOf((-379.2228863498162), (-379.2228863498162));
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0013048304606968486, 0.0013048304606968486);
      complex0.ONE.divide(complex1);
      Complex complex2 = Complex.valueOf(0.0013048304606968486, (-2337.45));
      Complex complex3 = complex0.ONE.subtract(complex2);
      complex3.cos();
      complex0.reciprocal();
      complex0.exp();
      complex3.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.exp();
      complex1.ZERO.getArgument();
      complex0.add((-1.889488909834863E-8));
      Complex complex2 = Complex.INF;
      complex0.divide(complex2);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.multiply(2.9523117314586467E-6);
      try { 
        complex4.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.getField();
      complex0.multiply((double) 2134);
      complex1.isInfinite();
      Complex complex2 = new Complex(67.78187988006307, (-1577));
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(2.3547754287719727);
      complex1.equals(complex3);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.atan();
      complex3.tan();
      complex6.multiply((-3641.7303331));
      complex4.pow(complex2);
      Complex complex7 = Complex.valueOf(0.0, (-3641.7303331));
      complex1.divide(complex7);
      complex4.asin();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply(1096);
      Complex complex3 = complex0.multiply(1.8518879652136628E-8);
      complex2.isInfinite();
      Complex complex4 = new Complex(2134, 2134);
      complex1.acos();
      Complex.valueOf(2.7534439209375705E-4);
      complex0.equals(complex4);
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex((-1020.06724529), 2134.0000000000005);
      complex6.tan();
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.pow(complex6);
      complex7.divide(complex4);
      complex3.nthRoot(1096);
      complex3.asin();
      Complex complex8 = Complex.NaN;
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(2250052.897635845, (-1.0));
      complex0.nthRoot(1131);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex(2284.62588363758, 2250052.897635845);
      complex2.tanh();
      Complex complex3 = Complex.I;
      complex3.equals(complex1);
      complex2.pow(complex3);
      complex0.divide(complex3);
      complex1.nthRoot(1131);
      Complex complex4 = complex2.asin();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.multiply(2052282830);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf((-20.0), 838.1807162777505);
      Complex complex3 = complex0.multiply((double) 1277);
      Complex complex4 = complex2.divide(complex1);
      complex0.multiply(complex2);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.ZERO;
      complex3.subtract(complex6);
      complex2.sqrt();
      Complex complex8 = new Complex(1277, 1277);
      complex8.cosh();
      complex3.abs();
      complex3.isNaN();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.sinh();
      complex9.NaN.cos();
      complex10.tan();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(191.59512, 191.59512);
      Complex complex1 = complex0.sin();
      complex0.asin();
      Complex complex2 = complex1.conjugate();
      complex2.exp();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf((-20.0), 838.1807162777505);
      Complex complex2 = Complex.ZERO;
      complex0.nthRoot(1277);
      Complex complex3 = Complex.ZERO;
      complex2.getArgument();
      complex1.negate();
      complex0.hashCode();
      complex3.isInfinite();
      Complex complex4 = new Complex((-2.2239222395888823E-8), 2052282815);
      complex2.acos();
      complex4.isNaN();
      complex1.isNaN();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.log();
      Complex complex7 = new Complex(370.3822984);
      complex7.sinh();
      complex1.tanh();
      complex6.add((-809.54155001));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2250052.897635845, 2250052.897635845);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex0.ZERO.tan();
      complex5.I.add(2250052.897635845);
      Complex complex6 = complex1.createComplex((-1661.14), (-1254.60105315));
      Complex complex7 = complex6.I.sin();
      Complex.valueOf(2250052.897635845);
      complex5.readResolve();
      complex1.getField();
      Complex complex8 = complex2.divide(complex3);
      complex8.INF.readResolve();
      complex1.reciprocal();
      complex1.subtract((-1254.60105315));
      complex6.abs();
      complex0.subtract(2524.126218595939);
      complex4.sqrt1z();
      complex7.nthRoot(229);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.multiply(2052282830);
      complex0.getImaginary();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.valueOf((double) 1277);
      complex1.toString();
      Complex complex4 = Complex.valueOf(101.0);
      complex4.isNaN();
      Complex complex5 = Complex.ZERO;
      complex5.subtract((-495.92376518855));
      complex0.nthRoot(1256);
      Complex complex6 = Complex.I;
      complex1.tanh();
      complex3.equals("(2.05228283E9, 0.0)");
      Complex complex7 = Complex.valueOf(0.7071067811865475, (-495.92376518855));
      complex7.pow(complex2);
      complex3.divide(complex2);
      // Undeclared exception!
      complex1.nthRoot(2052282830);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.sqrt();
      complex0.ONE.createComplex(0.2631967508008401, (-1731.42));
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(82.18);
      complex0.atan();
      complex2.ZERO.readResolve();
      Complex complex3 = complex0.ONE.add(complex1);
      complex0.readResolve();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.multiply((-3039));
      Complex complex7 = complex4.multiply(2.8829871423339434E201);
      Complex complex8 = complex7.INF.subtract(complex4);
      complex4.NaN.multiply((-3134));
      complex5.I.pow(871.5612572694548);
      complex6.INF.sqrt1z();
      Complex complex9 = complex4.createComplex((-4.9489938500591624E216), 20.0);
      complex1.toString();
      complex6.subtract(complex5);
      complex6.multiply(complex3);
      complex9.toString();
      complex4.multiply(complex8);
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.pow(6.007922084557054E-9);
      Complex complex1 = complex0.NaN.multiply((-1145));
      complex1.createComplex(6.007922084557054E-9, (-1145));
      complex1.ZERO.toString();
      double double0 = 3.436860020483706E-308;
      Complex complex2 = complex0.divide(3.436860020483706E-308);
      complex2.NaN.tan();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(6.007922084557054E-9, 1.6720955586129425E-9);
      complex4.INF.pow(6.007922084557054E-9);
      complex4.ONE.add(6.007922084557054E-9);
      complex4.abs();
      Complex complex5 = complex3.sqrt1z();
      complex5.ONE.toString();
      complex5.pow(complex0);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(2250052.897635845, (-1.0));
      complex0.pow(complex0);
      complex0.add(1.0317435264587402);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.multiply(2052282830);
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf((-20.0), 838.1807162777505);
      Complex complex3 = complex2.exp();
      complex0.nthRoot(1277);
      Complex complex4 = complex2.add((double) 1277);
      complex3.getArgument();
      complex4.getImaginary();
      Complex complex5 = complex2.negate();
      complex1.hashCode();
      complex3.getArgument();
      complex3.getImaginary();
      Complex complex6 = complex4.asin();
      complex5.multiply(0.0);
      Complex complex7 = complex3.divide(complex2);
      Complex complex8 = complex5.multiply(complex0);
      complex1.sinh();
      Complex complex9 = complex6.multiply(2052282830);
      Complex complex10 = complex2.multiply(2.718281828459045);
      complex8.isInfinite();
      Complex complex11 = complex1.acos();
      complex10.isNaN();
      complex11.isNaN();
      complex2.tan();
      Complex complex12 = complex7.log();
      complex9.sinh();
      complex12.tanh();
      complex8.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(264.0, 264.0);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.I.acos();
      Complex complex6 = complex1.NaN.cosh();
      complex0.reciprocal();
      Complex complex7 = complex4.subtract(complex1);
      complex7.divide(0.0);
      Complex complex8 = new Complex(0.0);
      Complex complex9 = Complex.ZERO;
      complex8.pow(complex9);
      Complex complex10 = Complex.I;
      Complex complex11 = complex3.subtract(complex8);
      complex11.abs();
      complex3.multiply((-1934));
      complex3.multiply((-94.316884375633));
      complex6.isInfinite();
      complex10.acos();
      complex5.isNaN();
      complex6.isNaN();
      complex10.tan();
      complex4.log();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(0.0);
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex2.divide(complex0);
      complex2.multiply(complex5);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex3.multiply(17);
      complex5.multiply((-417.93753));
      complex5.isInfinite();
      Complex complex8 = new Complex(1609.738045259681, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.INF;
      complex9.acos();
      complex6.isNaN();
      complex0.isNaN();
      complex7.tan();
      complex8.log();
      complex8.sinh();
      complex4.tanh();
      complex9.add((double) 17);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
      Complex complex1 = complex0.sqrt1z();
      complex1.nthRoot(3001);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.tanh();
      Complex complex4 = new Complex(3001);
      complex4.equals("[MW5|3\"KjeDa&E<");
      Complex complex5 = Complex.INF;
      complex4.pow(complex5);
      complex3.divide(complex2);
      complex5.nthRoot(3001);
      complex5.asin();
      Complex complex6 = Complex.ZERO;
      complex6.asin();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.2327411123173475E49, 2.718281828459045);
      complex0.getReal();
      complex0.subtract(417.84);
      Complex complex1 = complex0.acos();
      complex1.INF.multiply(106);
      complex0.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex((-98.0), (-98.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = new Complex((-2107186.3207222647));
      Complex complex4 = complex3.divide((-98.0));
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = Complex.I;
      complex3.subtract(complex1);
      complex0.abs();
      complex2.multiply((-793));
      Complex complex8 = complex5.multiply((-1.0));
      complex6.isInfinite();
      complex5.acos();
      complex6.isNaN();
      complex0.isNaN();
      complex4.tan();
      complex7.log();
      complex8.sinh();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.NaN.multiply(1277);
      complex1.abs();
      complex0.getImaginary();
      Complex complex2 = complex1.exp();
      complex2.I.nthRoot(75);
      Complex complex3 = complex2.ZERO.add(Double.NaN);
      complex2.NaN.getArgument();
      complex0.getImaginary();
      complex2.I.negate();
      complex2.ONE.hashCode();
      complex1.getArgument();
      complex2.getImaginary();
      Complex complex4 = complex0.divide(complex2);
      complex3.NaN.log();
      complex4.reciprocal();
      Complex complex5 = complex4.sqrt();
      complex3.cosh();
      complex0.abs();
      complex5.isNaN();
      complex0.tan();
      complex3.sqrt();
      complex4.abs();
      Complex complex6 = Complex.ZERO;
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = Complex.valueOf(8.013559094431017);
      complex1.getImaginary();
      Complex complex2 = complex0.exp();
      complex0.nthRoot(75);
      Complex complex3 = complex1.add(0.0);
      complex2.getArgument();
      complex3.getImaginary();
      Complex complex4 = complex2.negate();
      complex4.hashCode();
      complex3.getImaginary();
      complex0.divide(complex2);
      Complex complex5 = complex4.multiply(complex1);
      complex3.sinh();
      Complex complex6 = complex5.log();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex2.sqrt();
      complex1.cosh();
      complex6.abs();
      complex0.isNaN();
      complex1.tan();
      complex7.sinh();
      complex1.sqrt();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.valueOf(830.7731962192, 830.7731962192);
      Complex complex6 = complex5.I.sqrt1z();
      Complex complex7 = complex6.NaN.sinh();
      complex7.I.createComplex(830.7731962192, (-1359.3762926315221));
      Complex complex8 = complex4.cos();
      Complex complex9 = complex4.ZERO.multiply((-35));
      complex9.INF.acos();
      complex8.isInfinite();
      Complex complex10 = complex8.sinh();
      complex5.INF.readResolve();
      complex3.multiply(830.7731962192);
      complex8.isInfinite();
      complex0.acos();
      complex3.isNaN();
      Complex complex11 = new Complex((-1359.3762926315221));
      complex11.isNaN();
      complex10.tan();
      complex7.log();
      Complex complex12 = complex1.sinh();
      complex2.tanh();
      complex12.negate();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-98.0), (-98.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-6.655106680680314E-8), 2.0);
      Complex complex3 = complex2.I.sqrt1z();
      complex1.getImaginary();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.divide(complex3);
      Complex complex6 = complex3.multiply((-378.9559698459859));
      Complex complex7 = complex6.atan();
      complex5.abs();
      complex3.add(complex7);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.5);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(504.5, 504.5);
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      complex0.readResolve();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex3.INF.atan();
      complex4.ONE.getArgument();
      complex4.exp();
      Complex complex6 = complex4.negate();
      complex6.sinh();
      Complex complex7 = complex6.divide(complex1);
      complex2.asin();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.multiply(504.5);
      complex0.divide(complex9);
      Complex complex10 = complex9.multiply(complex2);
      complex5.sinh();
      complex5.log();
      Complex complex11 = Complex.ONE;
      complex11.reciprocal();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = new Complex(0.0);
      complex11.subtract(complex13);
      Complex complex14 = Complex.NaN;
      complex14.sqrt();
      complex6.cosh();
      complex7.abs();
      complex8.isNaN();
      complex10.tan();
      complex5.sinh();
      complex10.sqrt();
      complex10.abs();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.multiply(2052282830);
      complex0.abs();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf((-20.0), 838.1807162777505);
      Complex complex3 = complex2.exp();
      complex0.nthRoot(1277);
      Complex complex4 = complex2.add((double) 1277);
      complex3.getArgument();
      complex4.getImaginary();
      Complex complex5 = complex2.negate();
      complex1.hashCode();
      complex3.getArgument();
      complex3.getImaginary();
      Complex complex6 = complex0.subtract((-2023.5482057));
      complex5.tanh();
      complex3.sqrt1z();
      Complex complex7 = Complex.valueOf(817.3290380809739);
      complex7.getImaginary();
      complex0.readResolve();
      complex0.tanh();
      Complex complex8 = Complex.valueOf(531.755909);
      complex6.atan();
      complex2.hashCode();
      complex6.isNaN();
      complex8.sqrt();
      complex3.abs();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3653.70502707248, (-179.4092415398451));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(3653.70502707248);
      complex0.toString();
      Complex complex3 = complex2.subtract(complex1);
      complex2.isNaN();
      complex3.subtract((-255.79));
      complex3.nthRoot(7);
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex((-179.4092415398451), 3653.70502707248);
      Complex complex6 = complex5.tanh();
      complex3.equals(complex2);
      complex6.pow(complex5);
      Complex complex7 = Complex.INF;
      complex7.divide(complex4);
      complex6.nthRoot(7);
      complex6.asin();
      Complex complex8 = Complex.ONE;
      complex7.add(complex8);
      complex3.asin();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.NaN.multiply(1277);
      complex0.abs();
      complex0.getImaginary();
      Complex complex2 = complex1.exp();
      complex2.I.nthRoot(75);
      complex2.ZERO.add(1.0);
      complex2.NaN.getArgument();
      complex0.getImaginary();
      Complex complex3 = complex2.I.negate();
      complex2.ONE.hashCode();
      complex1.getArgument();
      complex2.getImaginary();
      complex1.I.asin();
      Complex complex4 = new Complex(75, Double.NaN);
      complex4.tanh();
      Complex complex5 = complex2.sqrt1z();
      complex2.getImaginary();
      complex3.readResolve();
      Complex complex6 = complex2.tanh();
      Complex.valueOf((-1653.0));
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.atan();
      complex3.hashCode();
      complex7.isNaN();
      complex8.sqrt();
      complex5.abs();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.7182817459106445, 0.3416208028793335);
      Complex complex1 = complex0.reciprocal();
      complex0.readResolve();
      Complex complex2 = new Complex(2.7182817459106445);
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex(0.3416208028793335);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex0.subtract(complex6);
      complex5.divide(0.0);
      Complex complex8 = new Complex(2.7182817459106445);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.I;
      Complex complex11 = complex3.pow(complex10);
      Complex complex12 = Complex.I;
      Complex complex13 = Complex.INF;
      Complex complex14 = complex11.subtract(complex13);
      complex5.abs();
      complex5.multiply((-1934));
      Complex complex15 = complex7.multiply(0.0);
      complex13.isInfinite();
      complex14.acos();
      complex15.isNaN();
      complex8.isNaN();
      complex3.tan();
      complex1.log();
      complex5.sinh();
      Complex complex16 = new Complex((-1384.3708830644), 2479.128);
      complex16.tanh();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(75.93);
      Complex complex1 = Complex.valueOf(75.93);
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex4.NaN.cos();
      complex1.ONE.subtract(complex5);
      complex2.ZERO.abs();
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.sqrt();
      complex7.INF.cos();
      complex3.subtract(75.93);
      complex0.add(75.93);
      Complex complex8 = Complex.valueOf(0.0, 75.93);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex8.I.add(0.0);
      complex8.ONE.divide(complex1);
      complex8.ZERO.readResolve();
      complex10.divide((-2.0406580894051073E243));
      complex0.NaN.atan();
      complex1.NaN.exp();
      complex7.ONE.asin();
      complex10.NaN.divide(2.0);
      complex0.cosh();
      complex7.divide((-2705.9088266711));
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt1z();
      complex0.reciprocal();
      Complex complex2 = complex1.pow(3653.70502707248);
      Complex complex3 = Complex.NaN;
      complex3.nthRoot(1586);
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.pow(complex3);
      complex5.ONE.exp();
      complex1.acos();
      complex2.tanh();
      Complex complex6 = complex2.createComplex(1586, 2435);
      complex6.ZERO.log();
      complex3.nthRoot(2435);
      Complex complex7 = Complex.I;
      complex4.add(complex7);
      Complex complex8 = Complex.ONE;
      complex8.nthRoot(2435);
      Complex complex9 = complex0.cosh();
      complex9.isNaN();
      complex8.sqrt();
      complex7.abs();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.7182817459106445);
      complex0.nthRoot(1553);
      Complex complex1 = complex0.multiply((-2148));
      complex1.abs();
      complex1.getImaginary();
      complex1.exp();
      try { 
        complex0.nthRoot((-2148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,148
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.I.sinh();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(830.7731962192, 830.7731962192);
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.I.createComplex(830.7731962192, (-1359.3762926315221));
      Complex complex7 = complex2.cos();
      Complex complex8 = complex2.ZERO.multiply(1);
      complex8.INF.acos();
      complex7.isInfinite();
      Complex complex9 = complex7.sinh();
      complex3.INF.readResolve();
      Complex.valueOf((double) 1, 830.7731962192);
      complex4.sqrt1z();
      Complex complex10 = Complex.ZERO;
      complex10.divide(complex0);
      complex3.multiply((-1359.3762926315221));
      complex8.atan();
      complex9.abs();
      complex9.add(complex6);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-98.0), (-98.0));
      Complex complex1 = Complex.valueOf((-98.0), 2.0);
      Complex complex2 = complex1.I.sqrt1z();
      complex0.getImaginary();
      complex1.add(complex2);
      complex1.divide((-98.0));
      complex0.sinh();
      complex2.toString();
      complex2.tan();
      complex2.createComplex((-20.0), (-98.0));
      complex0.divide(0.7071067811865475);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-98.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.pow((-98.0));
      complex0.nthRoot(2435);
      Complex complex4 = Complex.I;
      complex1.pow(complex3);
      Complex complex5 = complex3.acos();
      complex4.tanh();
      complex5.createComplex(Double.POSITIVE_INFINITY, (-98.0));
      try { 
        complex0.nthRoot((-1337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,337
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.reciprocal();
      complex0.readResolve();
      Complex complex3 = complex0.log();
      complex0.I.acos();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex3.subtract(complex1);
      complex6.I.hashCode();
      complex5.pow(complex3);
      Complex complex7 = Complex.valueOf((-1163.41928523053));
      complex4.INF.divide((-1231.5121));
      complex7.NaN.createComplex(831.53273834, 831.53273834);
      complex2.multiply(complex1);
      Complex complex8 = Complex.valueOf(831.53273834, (-20.0));
      complex8.ZERO.multiply(955);
      complex5.nthRoot(1371);
      complex7.getArgument();
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(539.166854);
      Complex complex1 = complex0.sqrt1z();
      complex0.reciprocal();
      Complex complex2 = complex0.pow(1.0);
      complex1.nthRoot(1312);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = new Complex(3653.70502707248, 3131.7382992456);
      Complex complex6 = complex5.acos();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.tanh();
      complex0.createComplex(0.21046364712247514, 8.082792416221215E-30);
      Complex complex9 = Complex.NaN;
      complex9.nthRoot(2437);
      complex2.add(complex6);
      complex7.nthRoot(2435);
      complex4.cosh();
      complex7.isNaN();
      complex2.sqrt();
      complex8.abs();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.multiply(1277);
      complex0.abs();
      complex0.getImaginary();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf((double) 75, 1.470705509185791);
      complex3.nthRoot(1277);
      Complex complex4 = complex3.add(1982.0);
      complex0.getArgument();
      complex0.getImaginary();
      Complex complex5 = complex0.negate();
      complex4.hashCode();
      complex4.getArgument();
      complex5.getImaginary();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.multiply((-1017.0));
      complex2.divide(complex4);
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex5.sinh();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.log();
      complex1.reciprocal();
      complex6.subtract(complex4);
      Complex complex12 = Complex.ONE;
      complex12.sqrt();
      complex9.cosh();
      complex11.abs();
      complex7.isNaN();
      complex11.tan();
      complex0.sinh();
      complex1.sqrt();
      complex11.abs();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.multiply(2052282830);
      complex0.abs();
      complex0.getImaginary();
      Complex complex2 = Complex.valueOf((-20.0), 838.1807162777505);
      Complex complex3 = complex2.exp();
      complex0.nthRoot(1277);
      Complex complex4 = complex2.add((double) 1277);
      complex3.getArgument();
      complex4.getImaginary();
      Complex complex5 = complex2.negate();
      complex1.hashCode();
      complex3.getArgument();
      complex3.getImaginary();
      Complex complex6 = complex4.asin();
      Complex complex7 = complex5.multiply(0.0);
      complex1.divide(complex3);
      complex7.multiply(complex2);
      Complex complex8 = complex3.sinh();
      Complex complex9 = complex4.log();
      complex9.reciprocal();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.subtract(complex3);
      Complex complex12 = complex5.sqrt();
      complex8.cosh();
      complex11.abs();
      complex10.isNaN();
      complex1.tan();
      complex4.sinh();
      complex9.sqrt();
      complex12.abs();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-98.0), (-98.0));
      Complex complex1 = complex0.acos();
      complex0.readResolve();
      complex1.sqrt1z();
      Complex complex2 = complex0.atan();
      complex0.getArgument();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex3.sinh();
      Complex complex6 = Complex.NaN;
      complex4.divide(complex6);
      Complex complex7 = complex2.subtract((-2.356194490192345));
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex7.sqrt1z();
      complex5.getImaginary();
      complex9.readResolve();
      complex8.tanh();
      Complex complex10 = Complex.valueOf((-717.4239));
      complex6.hashCode();
      complex10.acos();
      complex8.createComplex(1.955993890762329, 346.0);
      complex10.isNaN();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.5);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(504.5, 504.5);
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex0.sqrt1z();
      complex3.INF.atan();
      complex5.ONE.getArgument();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex7.divide(complex1);
      complex3.subtract((-2023.5482057));
      complex1.tanh();
      Complex complex10 = complex6.multiply(complex2);
      complex4.sinh();
      complex10.log();
      Complex complex11 = complex6.reciprocal();
      complex11.subtract(complex9);
      Complex.valueOf(504.5);
      Complex complex12 = complex11.cosh();
      complex1.abs();
      complex8.isInfinite();
      complex12.tan();
      complex3.sinh();
      complex4.sqrt();
      complex7.abs();
      Complex complex13 = new Complex((-330.26612));
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.NaN.multiply(1277);
      complex0.abs();
      complex0.getImaginary();
      Complex complex2 = complex1.exp();
      complex2.I.nthRoot(75);
      Complex complex3 = complex2.ZERO.add(1.0);
      complex2.NaN.getArgument();
      complex0.getImaginary();
      complex2.I.negate();
      complex2.ONE.hashCode();
      complex1.getArgument();
      complex2.getImaginary();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex4.ONE.multiply(Double.NaN);
      complex0.divide(complex2);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf((double) 75, (-1.0));
      complex7.getImaginary();
      complex4.readResolve();
      complex1.tanh();
      Complex complex8 = Complex.valueOf(1.0);
      complex5.hashCode();
      Complex complex9 = Complex.ONE;
      complex9.acos();
      complex6.createComplex((-1.0), Double.NaN);
      complex8.isNaN();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.7182817459106445);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.reciprocal();
      complex0.nthRoot(1);
      Complex complex3 = complex1.add(92.9565409971084);
      complex3.getArgument();
      complex0.getImaginary();
      Complex complex4 = complex2.negate();
      complex2.hashCode();
      complex2.getArgument();
      Complex complex5 = new Complex((-257.92));
      complex5.getImaginary();
      Complex complex6 = complex2.asin();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.multiply((-257.92));
      Complex complex9 = complex0.divide(complex7);
      Complex complex10 = complex4.multiply(complex6);
      Complex complex11 = complex9.sinh();
      Complex complex12 = complex7.log();
      Complex complex13 = complex7.reciprocal();
      complex4.subtract(complex0);
      complex8.sqrt();
      Complex complex14 = complex10.cosh();
      complex14.acos();
      complex12.abs();
      complex0.isNaN();
      complex13.tan();
      Complex complex15 = complex1.sinh();
      complex15.sqrt();
      complex6.abs();
      complex7.exp();
      complex11.createComplex((-1269.3516194), (-257.92));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.NaN.multiply(1277);
      complex0.abs();
      complex0.getImaginary();
      complex1.exp();
      Complex complex2 = complex1.pow((-3417.199381186159));
      Complex complex3 = new Complex(2435);
      complex3.nthRoot(466);
      Complex complex4 = Complex.I;
      complex3.pow(complex1);
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex4.createComplex(7.393196131284108E-271, 0.0);
      complex0.nthRoot(466);
      Complex complex8 = complex7.add(complex5);
      complex6.nthRoot(1277);
      complex8.cosh();
      complex0.isNaN();
      complex1.sqrt();
      complex2.abs();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.toString();
      Complex complex6 = complex0.subtract(complex1);
      complex0.isNaN();
      complex6.INF.subtract(0.0);
      complex1.nthRoot(7);
      Complex complex7 = Complex.I;
      complex7.INF.tanh();
      complex6.equals(complex7);
      complex7.pow(complex0);
      Complex complex8 = complex0.divide(complex0);
      complex8.I.nthRoot(2699);
      complex8.asin();
      complex2.add(complex4);
      complex1.asin();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.I.sinh();
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(830.7731962192, 830.7731962192);
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex4.NaN.sinh();
      complex5.I.createComplex(830.7731962192, (-1359.3762926315221));
      Complex complex6 = complex2.cos();
      Complex complex7 = complex2.ZERO.multiply(1);
      Complex complex8 = complex7.INF.acos();
      complex6.isInfinite();
      complex6.sinh();
      complex3.INF.readResolve();
      Complex complex9 = Complex.valueOf((double) 1, 830.7731962192);
      complex9.NaN.sqrt1z();
      complex3.divide(complex9);
      complex7.multiply(1.378919824418909E-7);
      complex8.atan();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.nthRoot(466);
      Complex complex1 = complex0.NaN.multiply(1277);
      complex0.abs();
      complex0.getImaginary();
      Complex complex2 = complex1.exp();
      complex2.I.nthRoot(75);
      Complex complex3 = complex2.ZERO.add(1.0);
      complex2.NaN.getArgument();
      complex0.getImaginary();
      Complex complex4 = complex2.I.negate();
      complex2.ONE.hashCode();
      complex1.getArgument();
      complex2.getImaginary();
      Complex complex5 = complex1.I.asin();
      complex5.ONE.multiply(Double.NaN);
      Complex complex6 = complex0.divide(complex2);
      complex1.multiply(complex6);
      Complex complex7 = complex4.sinh();
      complex3.NaN.log();
      Complex complex8 = complex7.reciprocal();
      complex4.subtract(complex6);
      complex7.sqrt();
      complex3.cosh();
      complex1.abs();
      complex2.isNaN();
      complex5.tan();
      Complex complex9 = complex6.sinh();
      complex9.sqrt();
      complex8.abs();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-323.0));
      complex0.INF.exp();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      complex2.ONE.divide(0.0);
      try { 
        complex1.nthRoot((-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -545
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-98.0), (-98.0));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf((-6.655106680680314E-8), 2.0);
      complex2.I.sqrt1z();
      complex1.getImaginary();
      Complex complex3 = complex0.divide(92.9565409971084);
      Complex complex4 = complex3.log();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.nthRoot(93);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.multiply(1);
      complex2.ZERO.getArgument();
      Complex complex3 = complex2.ZERO.pow((double) 93);
      Complex complex4 = complex1.add((double) 1);
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex5.ZERO.tan();
      complex6.ONE.acos();
      Complex complex7 = complex1.sqrt1z();
      complex0.getImaginary();
      Complex complex8 = complex3.sin();
      complex8.createComplex(0.0, 0.0);
      Complex complex9 = complex8.pow((double) 1);
      Complex complex10 = complex7.multiply((double) 93);
      complex7.divide(complex5);
      complex10.hashCode();
      Complex complex11 = complex10.cosh();
      complex11.INF.multiply(1);
      int int0 = 0;
      complex9.ZERO.asin();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(264.0, (-1163.41928523053));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.reciprocal();
      complex0.readResolve();
      Complex complex3 = complex0.log();
      complex0.I.acos();
      Complex complex4 = complex1.NaN.cosh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex3.subtract(complex1);
      complex6.I.hashCode();
      complex5.pow(complex3);
      Complex complex7 = Complex.valueOf((-1163.41928523053));
      complex7.NaN.createComplex(831.53273834, 831.53273834);
      complex2.multiply(complex1);
      Complex complex8 = Complex.valueOf(831.53273834, (-20.0));
      complex8.ZERO.multiply(955);
      complex5.nthRoot(1371);
      complex7.getArgument();
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(1357.83663859);
      Complex complex1 = complex0.INF.multiply((-4859));
      complex1.I.cos();
      Complex complex2 = complex1.asin();
      complex1.INF.readResolve();
      Complex complex3 = complex0.INF.negate();
      complex0.NaN.hashCode();
      complex0.abs();
      Complex complex4 = complex1.pow(complex0);
      complex4.exp();
      complex4.abs();
      Complex complex5 = complex2.multiply((-4307));
      Complex complex6 = complex5.ZERO.reciprocal();
      complex0.toString();
      Complex complex7 = complex3.add(1357.83663859);
      complex6.negate();
      complex1.getArgument();
      complex3.acos();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(191.59512, 191.59512);
      Complex complex1 = complex0.sin();
      complex1.reciprocal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 618.11);
      complex0.ONE.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.multiply((-1.0));
      complex2.INF.sin();
      Complex complex3 = complex0.divide(complex1);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.ONE.add(0.5290185213088989);
      Complex complex5 = complex1.I.pow(3452.309542793801);
      Complex complex6 = complex0.ONE.cos();
      complex6.ONE.sin();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.ONE.atan();
      complex8.conjugate();
      complex5.ONE.readResolve();
      Complex complex9 = complex7.INF.cosh();
      complex7.ONE.toString();
      complex5.INF.sqrt1z();
      Complex complex10 = complex7.I.pow(0.0);
      complex10.ONE.conjugate();
      Complex complex11 = complex5.add(complex0);
      complex11.NaN.getArgument();
      complex9.abs();
      complex6.multiply(3452.309542793801);
      Complex complex12 = complex11.pow(0.0);
      complex9.multiply(complex7);
      complex3.asin();
      complex0.sqrt1z();
      complex9.readResolve();
      complex4.cos();
      complex6.cos();
      Complex complex13 = Complex.I;
      complex4.pow(complex13);
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.NaN.pow(complex1);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex1.ZERO.multiply(0);
      complex2.ONE.multiply((double) 0);
      Complex complex7 = complex6.INF.pow(3506.0581713);
      Complex.valueOf(0.0);
      complex0.getImaginary();
      Complex complex8 = complex2.I.subtract(complex1);
      Complex complex9 = complex8.NaN.atan();
      complex1.conjugate();
      Complex complex10 = complex0.multiply((-1007));
      Complex complex11 = complex10.asin();
      complex11.I.add(complex5);
      complex11.ZERO.acos();
      complex10.NaN.reciprocal();
      complex2.toString();
      complex2.getReal();
      complex1.isNaN();
      Complex complex12 = complex1.acos();
      complex0.getReal();
      complex9.sin();
      complex12.atan();
      Complex complex13 = Complex.valueOf((double) (-1007));
      Complex complex14 = Complex.ZERO;
      complex13.I.add(complex14);
      complex7.atan();
      complex3.sinh();
      Complex.valueOf((-331.6196137748562), Double.POSITIVE_INFINITY);
      Complex.valueOf((double) (-1007), (double) (-1007));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(507.8876458);
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.abs();
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex2.NaN.pow(complex1);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = Complex.NaN;
      complex5.sin();
      complex0.multiply(complex5);
      complex3.sinh();
      complex3.createComplex((-20.0), 2022.438528573);
      Complex complex6 = complex4.divide(0.0);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.NaN.pow(complex1);
      complex3.INF.multiply(0.0);
      complex3.ZERO.createComplex(Double.NaN, (-132.26));
      complex0.ONE.cosh();
      complex1.reciprocal();
      complex2.sqrt();
      Complex complex4 = Complex.valueOf((-2531.90771790382));
      complex4.NaN.tan();
      complex4.ZERO.negate();
      Complex complex5 = complex1.subtract(0.0);
      complex2.multiply(0.0);
      complex2.reciprocal();
      int int0 = 7;
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.log();
      complex2.ZERO.getField();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.subtract(complex0);
      Complex complex5 = complex4.ZERO.cos();
      complex3.multiply(0.0);
      complex3.ONE.getArgument();
      Complex complex6 = complex0.INF.tanh();
      complex6.I.sqrt1z();
      complex3.ONE.multiply(0.0);
      complex4.asin();
      Complex complex7 = complex3.divide(0.0);
      complex7.pow(complex4);
      Complex complex8 = Complex.I;
      complex1.subtract(complex8);
      complex3.INF.abs();
      complex2.NaN.multiply((-1934));
      Complex complex9 = complex8.multiply(556.239);
      complex1.isInfinite();
      complex5.acos();
      complex9.isNaN();
      complex5.isNaN();
      complex8.tan();
      complex3.log();
      complex4.sinh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.ZERO.toString();
      Complex complex6 = complex0.subtract(complex1);
      complex0.isNaN();
      complex6.INF.subtract(0.0);
      complex1.nthRoot(7);
      complex1.cos();
      Complex complex7 = Complex.I;
      complex7.INF.tanh();
      complex6.equals(complex7);
      complex7.pow(complex0);
      Complex complex8 = Complex.I;
      Complex complex9 = complex0.divide(complex8);
      complex9.asin();
      complex2.add(complex4);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.pow((-1092.92208));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.I.acos();
      complex4.ONE.tanh();
      Complex complex5 = complex0.add((-1.0));
      complex0.equals(complex5);
      Complex complex6 = complex5.acos();
      complex5.ZERO.toString();
      complex6.createComplex((-1.0), 1308.3242027);
      complex2.conjugate();
      complex3.exp();
      complex4.multiply(1720.28379946872);
      complex1.sqrt();
      complex5.sqrt();
      Complex.valueOf((-1.0));
      complex3.sqrt1z();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(903.637);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.multiply(1);
      complex3.ONE.toString();
      Complex complex4 = complex3.divide((double) 1);
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = Complex.valueOf((double) 1, 3285.907);
      Complex complex7 = complex3.exp();
      complex3.ONE.subtract(1160.3);
      complex4.INF.sqrt1z();
      complex7.ONE.divide((-4979.7238));
      complex6.createComplex(5944.290745641276, 0.25694090127944946);
      Complex complex8 = complex6.negate();
      complex8.I.multiply(903.637);
      complex3.createComplex(1, 1);
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex5.multiply(920);
      complex1.isNaN();
      complex2.reciprocal();
      complex11.sqrt();
      complex10.createComplex(2.0, 403.215215498705);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex3.ZERO.add(complex2);
      complex4.ONE.readResolve();
      complex0.hashCode();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.INF.createComplex(0.0, 0.0);
      complex6.INF.conjugate();
      Complex complex7 = Complex.valueOf((-2116.90383004), (-2116.90383004));
      complex7.ZERO.exp();
      complex3.readResolve();
      Complex complex8 = complex0.divide(complex3);
      complex8.conjugate();
      complex0.getReal();
      complex8.equals(complex1);
      complex1.equals("NOT_STRICTLY_INCREASING_SEQUENCE");
      complex1.INF.pow((-3181.66261158));
      try { 
        complex7.nthRoot((-2129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,129
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ONE.log();
      complex1.negate();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex2.NaN.divide(1225.0);
      Complex complex4 = complex0.divide(1225.0);
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex3.ZERO.sinh();
      complex6.INF.toString();
      Complex complex7 = complex1.multiply(1225.0);
      complex7.ZERO.nthRoot(1162);
      complex4.NaN.getField();
      complex7.getImaginary();
      complex5.multiply(complex4);
      complex2.I.subtract(0.0);
      Complex complex8 = Complex.valueOf(20.0);
      Complex complex9 = complex3.log();
      complex8.getReal();
      complex1.tan();
      complex8.readResolve();
      Complex.valueOf(1225.0);
      complex0.sqrt();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex9.multiply(complex0);
      complex3.multiply((-1011));
      complex10.pow(complex11);
      complex5.multiply(complex2);
      complex7.sqrt();
      complex0.reciprocal();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.INF.acos();
      complex1.ONE.divide(0.0);
      Complex complex2 = complex0.ZERO.createComplex((-2833.7879321098), (-2833.7879321098));
      Complex complex3 = Complex.valueOf((-2833.7879321098));
      Complex complex4 = complex3.INF.acos();
      complex0.I.subtract(complex3);
      complex4.I.getField();
      Complex.valueOf((-2270.28307346362), 0.0);
      complex0.readResolve();
      complex4.hashCode();
      complex4.toString();
      Complex complex5 = complex1.log();
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(1192.78);
      Complex complex1 = complex0.I.subtract(1192.78);
      complex1.I.add(complex0);
      Complex complex2 = complex1.NaN.multiply(1192.78);
      Complex complex3 = complex0.pow((-3896.6279212));
      Complex complex4 = complex0.reciprocal();
      complex4.ONE.asin();
      Complex.valueOf((-2.512551));
      Complex.valueOf((-288.6464847));
      complex4.conjugate();
      complex0.cosh();
      Complex complex5 = Complex.valueOf(0.32341301441192627, 0.32341301441192627);
      Complex complex6 = complex0.INF.sqrt();
      complex6.I.toString();
      complex5.I.add((-2.512551));
      Complex complex7 = complex4.I.negate();
      Complex complex8 = complex3.multiply(complex4);
      Complex complex9 = complex0.reciprocal();
      complex9.ZERO.tanh();
      Complex complex10 = complex2.pow(complex8);
      complex10.I.reciprocal();
      Complex complex11 = complex10.pow(1192.78);
      complex5.isNaN();
      Complex complex12 = complex7.atan();
      complex12.negate();
      Complex complex13 = complex0.createComplex(0.32341301441192627, 2.0);
      complex13.INF.multiply(848);
      complex8.atan();
      complex2.divide(0.32341301441192627);
      complex4.isNaN();
      complex11.tan();
      complex0.multiply(848);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.7182817459106445);
      complex0.sqrt1z();
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.ONE.pow(3653.70502707248);
      complex1.ONE.nthRoot(2435);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.pow(complex2);
      complex0.INF.acos();
      complex2.ZERO.tanh();
      Complex complex4 = complex3.createComplex(2435, 2435);
      int int0 = (-2559);
      try { 
        complex4.nthRoot((-2559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,559
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.NaN.pow(complex2);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex4.atan();
      complex6.NaN.abs();
      Complex complex7 = complex1.INF.createComplex(1629.32978177132, 1629.32978177132);
      complex7.I.reciprocal();
      complex0.getField();
      Complex complex8 = complex2.NaN.multiply(complex4);
      complex5.divide((-1497.2823047856284));
      Complex complex9 = complex2.reciprocal();
      complex9.conjugate();
      Complex complex10 = complex8.pow(4490.25821);
      complex10.getReal();
      Complex complex11 = Complex.valueOf(3753.449, Double.NaN);
      complex2.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1537.979, 1537.979);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.ONE.createComplex(0.0, 1537.979);
      complex1.NaN.exp();
      complex0.readResolve();
      complex0.INF.createComplex(1537.979, 1537.979);
      Complex complex3 = complex1.sin();
      complex3.ZERO.createComplex((-9.879317845E-315), 0.0);
      complex3.ONE.sqrt1z();
      Complex complex4 = complex1.conjugate();
      complex4.INF.multiply(0.0);
      Complex complex5 = complex2.divide(complex1);
      complex5.NaN.log();
      complex1.NaN.asin();
      Complex complex6 = complex2.exp();
      complex6.toString();
      Complex complex7 = complex2.pow(0.0);
      complex7.ONE.divide(1537.979);
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex8.ONE.pow((-2379.0));
      Complex.valueOf(1537.979);
      complex1.getImaginary();
      complex5.reciprocal();
      Complex complex10 = complex0.sqrt();
      complex9.exp();
      complex4.isInfinite();
      complex10.getArgument();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3299.7548, (-4.556583652800433E-8));
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.getArgument();
      complex0.isInfinite();
      complex0.I.conjugate();
      complex0.getArgument();
      Complex complex2 = complex1.divide(0.0);
      complex2.ZERO.subtract(complex1);
      Complex complex3 = complex1.asin();
      complex0.readResolve();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex3.ONE.asin();
      Complex complex6 = complex5.INF.atan();
      complex6.ONE.log();
      complex1.ZERO.add(complex6);
      complex5.ONE.acos();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.ZERO.subtract(complex0);
      complex1.ONE.createComplex((-1.3808855290703516E-11), 1.42436589329759E250);
      complex2.divide(complex3);
      Complex complex9 = complex7.tan();
      Complex complex10 = complex3.divide((-1.3808855290703516E-11));
      complex6.pow(2975.33783383);
      complex8.NaN.divide(complex7);
      complex3.equals("");
      complex9.divide(complex8);
      Complex.valueOf(0.0, (-205.3498));
      complex10.getReal();
      complex3.sqrt1z();
      complex0.hashCode();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.conjugate();
      complex0.abs();
      Complex complex4 = complex1.ZERO.createComplex(0.0, (-2657.858074145868));
      Complex complex5 = complex3.NaN.pow((-1936.4751646733));
      Complex complex6 = complex5.NaN.sqrt1z();
      complex1.divide(complex0);
      Complex complex7 = complex4.ZERO.asin();
      complex7.ONE.multiply(complex4);
      Complex complex8 = complex6.I.createComplex(0.0, (-3655.0));
      Complex.valueOf(0.0);
      complex2.getImaginary();
      Complex complex9 = complex0.multiply((-725));
      complex9.NaN.multiply(complex4);
      Complex complex10 = Complex.valueOf((-2657.858074145868), 0.0);
      complex6.ZERO.tan();
      complex10.createComplex(0.6379399299621582, 0.6379399299621582);
      complex5.pow(complex9);
      complex0.negate();
      Complex complex11 = complex5.pow(complex4);
      Complex complex12 = complex11.NaN.multiply((-725));
      complex12.ONE.getArgument();
      Complex complex13 = complex2.cosh();
      complex8.log();
      complex6.divide(0.0);
      complex2.sin();
      try { 
        complex13.nthRoot((-1649));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,649
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      complex1.NaN.conjugate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.multiply(complex0);
      complex2.ZERO.cos();
      complex1.getArgument();
      Complex complex4 = complex2.subtract(complex0);
      complex0.ZERO.divide(complex4);
      Complex complex5 = complex4.log();
      complex0.readResolve();
      complex5.INF.abs();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex3.ONE.conjugate();
      complex8.cos();
      Complex complex9 = complex5.multiply(0.6000806093215942);
      Complex complex10 = complex7.divide(1.2949980563724296E-100);
      complex4.NaN.cosh();
      complex10.INF.log();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex6.atan();
      complex11.toString();
      complex1.pow(complex9);
      complex11.sinh();
      Complex.valueOf(1379.56);
      complex10.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.I.sqrt1z();
      complex2.ONE.abs();
      complex1.NaN.sqrt1z();
      complex1.ONE.nthRoot(532);
      Complex complex3 = complex0.ONE.conjugate();
      Complex complex4 = complex3.exp();
      complex0.getArgument();
      Complex complex5 = complex4.sinh();
      complex1.NaN.createComplex(4243.73648403558, 3.2345523990372546E-222);
      Complex complex6 = Complex.valueOf((-1322.894884205453), 0.0);
      complex0.ONE.conjugate();
      Complex complex7 = complex6.NaN.multiply(1.0);
      complex7.NaN.sqrt();
      complex5.ONE.getArgument();
      try { 
        complex5.nthRoot((-528));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -528
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(246.026);
      complex0.ZERO.conjugate();
      Complex complex1 = complex0.I.sqrt1z();
      int int0 = (-1);
      complex1.INF.add(complex0);
      Complex.valueOf((double) (-1), 246.026);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-255.25142923314345), (-255.25142923314345));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex1.INF.multiply((-4.801131671405377E-10));
      Complex complex4 = complex0.ONE.acos();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex5.INF.cosh();
      complex0.getArgument();
      complex1.NaN.abs();
      Complex complex7 = Complex.valueOf((-255.25142923314345), (-255.25142923314345));
      Complex complex8 = complex1.pow(complex7);
      Complex complex9 = complex7.I.cosh();
      complex3.atan();
      complex0.equals(complex8);
      complex3.reciprocal();
      Complex complex10 = complex2.divide(6.283185307179586);
      complex6.INF.log();
      complex10.I.sin();
      Complex complex11 = complex10.NaN.negate();
      complex11.NaN.divide(complex6);
      Complex complex12 = complex3.createComplex(0.0, (-255.25142923314345));
      Complex complex13 = complex4.subtract((-4.801131671405377E-10));
      complex13.ZERO.readResolve();
      complex3.pow(complex2);
      Complex complex14 = complex12.tan();
      complex14.sinh();
      complex7.subtract(1.075991153717041);
      complex4.getReal();
      Complex complex15 = complex4.multiply(complex11);
      complex9.tan();
      complex15.getReal();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-330.26612), 504.5);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(504.5, 504.5);
      Complex complex3 = complex0.sinh();
      complex0.INF.getField();
      complex0.readResolve();
      Complex complex4 = complex0.sqrt1z();
      complex3.INF.atan();
      complex4.ONE.getArgument();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.negate();
      complex6.sinh();
      complex6.divide(complex1);
      complex3.subtract((-2023.5482057));
      complex1.tanh();
      Complex complex7 = complex6.sqrt1z();
      complex2.getImaginary();
      complex7.readResolve();
      Complex complex8 = complex3.tanh();
      Complex.valueOf((-717.4239));
      complex5.hashCode();
      complex8.ZERO.acos();
      complex2.createComplex(0.0, (-2011.79));
      complex2.isNaN();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex0.divide(complex1);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      complex1.multiply(194);
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.ONE.add((-1645.429887890424));
      Complex complex4 = complex0.divide(1115.0);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.divide((-2705.9088266711));
      Complex complex7 = complex2.multiply((-809));
      complex7.add(5.662033727488754E-22);
      complex7.getField();
      Complex complex8 = complex0.divide((-2705.9088266711));
      complex8.NaN.add(1115.0);
      Complex complex9 = complex0.divide(complex6);
      complex3.toString();
      complex4.createComplex((-2705.9088266711), (-1214.33));
      complex9.divide(1076.8);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.INF.reciprocal();
      complex3.INF.createComplex((-20.0), (-4316.0));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.sin();
      complex4.getImaginary();
      Complex complex6 = complex2.divide(-0.0);
      Complex complex7 = complex6.ONE.multiply((-4316.0));
      complex4.INF.multiply(complex6);
      complex6.ONE.negate();
      Complex complex8 = complex5.tanh();
      complex5.I.getField();
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex9.I.multiply(126);
      complex10.NaN.getField();
      Complex complex11 = complex1.acos();
      Complex.valueOf(-0.0, 1265.0);
      Complex complex12 = complex8.multiply(-0.0);
      complex11.divide(complex8);
      complex11.isNaN();
      Complex complex13 = complex8.subtract(1265.0);
      complex12.subtract(601.644488525408);
      complex2.isNaN();
      Complex complex14 = complex13.multiply((-3275.57082));
      complex7.readResolve();
      complex7.add(-0.0);
      complex14.isInfinite();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      complex0.INF.readResolve();
      List<Complex> list0 = complex0.ONE.nthRoot(1795);
      assertTrue(list0.contains(complex0));
      assertEquals(1795, list0.size());
      
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sin();
      complex3.INF.cosh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.INF.multiply(complex0);
      Complex complex6 = complex4.ZERO.pow(complex3);
      Complex complex7 = complex6.INF.pow((-8.939932297357388E-58));
      complex2.INF.negate();
      complex7.I.getArgument();
      Complex complex8 = complex3.createComplex(1795, 1795);
      Complex complex9 = complex8.INF.cos();
      String string0 = complex5.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex10 = complex1.multiply((-1118));
      complex5.isInfinite();
      Complex complex11 = complex2.divide((-3717.316285091851));
      assertEquals((-4.1510609172636375E-4), complex11.getReal(), 0.01);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex0.reciprocal();
      complex1.hashCode();
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex1.getImaginary(), 0.01);
      
      Complex complex13 = complex6.tanh();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex13, complex9);
      assertNotSame(complex6, complex13);
      assertTrue(complex13.equals((Object)complex7));
      assertNotSame(complex13, complex7);
      
      double double0 = complex5.getImaginary();
      assertTrue(complex0.equals((Object)complex12));
      assertSame(complex5, complex10);
      assertEquals(1.557407724654902, complex4.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.createComplex((-591.7757), 0.0);
      String string0 = complex1.ONE.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.pow(481.44370162397433);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = complex2.cos();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex3.I.subtract(1783.82399);
      assertEquals(1.0, complex7.getImaginary(), 0.01);
      assertEquals((-1783.82399), complex7.getReal(), 0.01);
      
      Complex complex8 = complex4.tanh();
      assertSame(complex8, complex2);
      
      Complex complex9 = complex4.conjugate();
      assertSame(complex9, complex5);
      assertFalse(complex3.isInfinite());
      
      double double0 = complex6.getArgument();
      assertTrue(complex6.equals((Object)complex3));
      assertNotSame(complex6, complex3);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.valueOf((-2945.34661));
      complex0.ONE.readResolve();
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = (Complex)complex3.I.readResolve();
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      
      Complex complex5 = complex1.ZERO.log();
      complex0.getField();
      complex0.hashCode();
      Complex complex6 = complex1.sqrt1z();
      complex6.INF.log();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.NaN.tanh();
      Complex complex8 = complex5.subtract(0.0);
      Complex complex9 = complex8.acos();
      assertSame(complex9, complex7);
      
      Complex complex10 = complex8.tan();
      Complex complex11 = complex10.asin();
      assertFalse(complex11.equals((Object)complex8));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex10.equals((Object)complex3));
      
      complex0.getField();
      Complex complex12 = complex2.sqrt1z();
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(2945.346440240688, complex12.getImaginary(), 0.01);
  }
}
