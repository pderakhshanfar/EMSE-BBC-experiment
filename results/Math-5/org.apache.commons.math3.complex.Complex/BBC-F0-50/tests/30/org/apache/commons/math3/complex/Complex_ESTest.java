/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:24:04 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 183);
      Complex complex1 = new Complex((-6.414337408955734E-8), 2.414213562373095);
      complex1.INF.log();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(2.35517168886351E-254);
      complex0.sqrt();
      Complex complex1 = new Complex(2.35517168886351E-254, (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex0.divide(complex1);
      complex0.nthRoot(2204);
      Complex complex3 = complex1.tanh();
      complex2.cosh();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, (-20.0));
      complex0.sqrt();
      Complex.valueOf((-20.0));
      Complex complex2 = Complex.ZERO;
      complex0.tan();
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex2.multiply(1332);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.I.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.multiply(complex1);
      complex3.createComplex(8.006778743052707E-8, 8.006778743052707E-8);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.I.abs();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.atan();
      complex3.ONE.sin();
      Complex complex4 = complex3.ZERO.subtract(complex2);
      Complex complex5 = complex2.sqrt();
      complex1.I.acos();
      Complex complex6 = complex2.INF.sqrt();
      Complex complex7 = complex5.multiply(complex1);
      complex5.ONE.getArgument();
      complex0.nthRoot(1073741824);
      complex2.reciprocal();
      complex0.nthRoot(1073741824);
      Complex complex8 = complex2.divide(complex6);
      Complex complex9 = complex8.exp();
      complex7.toString();
      complex6.sin();
      complex6.acos();
      complex5.negate();
      complex1.divide((double) 1073741824);
      Complex complex10 = complex4.atan();
      complex4.divide(complex10);
      complex6.pow(0.0);
      complex9.pow(complex7);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5738.10925));
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1022.600598263277));
      Complex complex3 = complex1.add(Double.NaN);
      complex3.multiply((-3707));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.divide(1081.979478958476);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.ZERO;
      complex5.tan();
      complex4.multiply(complex3);
      Complex complex6 = new Complex((-16), 1081.979478958476);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(0);
      Complex complex1 = new Complex(0);
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5738.10925));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.tan();
      complex1.ZERO.divide((-5738.10925));
      Complex.valueOf(Double.NaN);
      complex2.getField();
      complex1.divide(58.6354258);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt1z();
      complex1.subtract(complex2);
      Complex complex3 = Complex.NaN;
      complex0.INF.getArgument();
      complex0.nthRoot(1788);
      complex0.acos();
      complex1.getImaginary();
      Complex complex4 = Complex.valueOf(1081.979478958476, Double.POSITIVE_INFINITY);
      complex3.multiply((-16));
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(7);
      Complex complex2 = complex1.multiply(2.0);
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex3.NaN.sqrt1z();
      complex4.NaN.readResolve();
      Complex complex5 = new Complex((-266.183880716), (-5.419984702257646E-4));
      Complex complex6 = complex5.NaN.subtract(complex0);
      complex0.NaN.abs();
      Complex complex7 = complex0.pow(complex5);
      Complex complex8 = complex7.ONE.acos();
      complex5.atan();
      complex6.createComplex((-5.419984702257646E-4), (-5.419984702257646E-4));
      Complex complex9 = complex1.exp();
      complex2.abs();
      complex5.subtract(Double.NaN);
      Complex complex10 = complex6.I.cosh();
      complex10.add(complex1);
      complex6.getField();
      complex6.tanh();
      complex0.abs();
      complex9.cosh();
      complex8.sinh();
      complex4.add(0.39157733228126257);
      complex4.multiply((-5.419984702257352E-4));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.add(complex1);
      complex2.ONE.readResolve();
      complex0.sinh();
      Complex complex3 = complex2.NaN.tanh();
      complex0.abs();
      Complex complex4 = complex1.sinh();
      complex3.ONE.getArgument();
      complex0.INF.sqrt1z();
      Complex complex5 = complex4.ZERO.multiply(295);
      complex0.add(Double.POSITIVE_INFINITY);
      complex4.abs();
      Complex complex6 = complex3.divide(Double.POSITIVE_INFINITY);
      complex6.I.conjugate();
      Complex complex7 = complex5.divide(complex1);
      complex7.I.acos();
      complex5.pow(Double.NaN);
      complex7.NaN.conjugate();
      Complex complex8 = complex2.reciprocal();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex3.sin();
      Complex complex9 = complex4.log();
      Complex complex10 = complex8.conjugate();
      complex10.I.subtract(complex9);
      complex10.ONE.hashCode();
      complex7.tanh();
      complex0.tanh();
      Complex complex11 = complex1.sinh();
      complex10.add(0.0);
      complex7.acos();
      Complex complex12 = complex11.add(5082.66757);
      complex4.readResolve();
      complex12.sinh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.acos();
      complex1.ONE.getArgument();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex1.ONE.cosh();
      Complex complex6 = complex5.INF.negate();
      complex6.INF.divide(0.0);
      complex0.ZERO.abs();
      complex1.nthRoot(7);
      Complex complex7 = complex4.log();
      complex7.NaN.sin();
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.I.negate();
      Complex complex10 = Complex.INF;
      complex3.I.add(complex10);
      complex9.INF.sin();
      complex9.ZERO.getField();
      Complex complex11 = complex3.sqrt();
      complex2.I.log();
      Complex complex12 = complex11.multiply(0.0);
      complex12.I.toString();
      complex8.NaN.negate();
      complex7.exp();
      complex8.pow(complex7);
      complex9.nthRoot(7);
      complex9.multiply((-1518500250));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = Complex.NaN;
      complex0.nthRoot(1788);
      complex2.isNaN();
      complex0.acos();
      complex1.getImaginary();
      complex4.add(complex3);
      Complex complex5 = Complex.valueOf(1081.979478958476, Double.POSITIVE_INFINITY);
      complex4.multiply((-16));
      Complex.valueOf((-0.9852866695372031));
      Complex complex6 = Complex.ZERO;
      complex6.atan();
      complex5.multiply(669.7834864);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-755.56404049), (-755.56404049));
      complex0.I.nthRoot(1152);
      Complex complex2 = complex1.I.add((-755.56404049));
      complex0.getReal();
      complex2.tanh();
      complex0.sqrt1z();
      complex2.divide((-755.56404049));
      Complex complex3 = new Complex(1152);
      Complex complex4 = Complex.valueOf((-755.56404049), (double) 1152);
      complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-2.718281828459045));
      Complex complex1 = complex0.atan();
      complex0.getField();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.INF;
      complex3.sinh();
      complex2.pow(complex1);
      Complex.valueOf(2.0, (-1553.5436));
      complex3.multiply((-16));
      Complex.valueOf((double) (-16));
      complex3.divide(Double.POSITIVE_INFINITY);
      complex3.sqrt();
      complex0.tan();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.atan();
      complex3.ONE.pow((-955.691075));
      complex0.toString();
      complex3.getField();
      Complex complex4 = Complex.INF;
      complex1.divide(complex4);
      Complex complex5 = Complex.ONE;
      complex5.readResolve();
      Complex complex6 = Complex.INF;
      complex0.sin();
      complex2.readResolve();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double double0 = (-1506.89);
      Complex complex0 = Complex.valueOf((-1506.89), (-1506.89));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.atan();
      complex2.readResolve();
      complex1.toString();
      complex2.getReal();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = Complex.NaN;
      complex1.nthRoot(1);
      complex5.isNaN();
      complex3.acos();
      complex5.getImaginary();
      Complex complex6 = complex4.add(complex2);
      Complex complex7 = Complex.valueOf((-141.2473), (-20.0));
      Complex complex8 = complex2.pow(complex3);
      complex7.multiply((-3020));
      Complex.valueOf((double) (-3020));
      complex6.divide(Double.NaN);
      complex0.sqrt();
      complex6.tan();
      complex6.getField();
      try { 
        complex8.nthRoot((-2185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,185
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.getReal();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = Complex.NaN;
      complex0.nthRoot(1788);
      Complex complex5 = complex3.add(complex0);
      complex1.divide((double) 1788);
      complex5.toString();
      complex5.cosh();
      Complex.valueOf((-1469.1777));
      Complex complex6 = Complex.ONE;
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0070909418550386E152, 1.0070909418550386E152);
      complex0.INF.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.ZERO.asin();
      complex3.isNaN();
      complex0.acos();
      complex1.getImaginary();
      complex2.add(complex3);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 84.16);
      Complex complex5 = new Complex(1.985773325073412E-7, 5.799080912675435E-9);
      complex5.multiply(1784);
      Complex complex6 = Complex.valueOf((-588.2096562490995));
      complex4.divide(1.0);
      complex4.sqrt();
      complex1.tan();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0070909418550386E152, 1.0070909418550386E152);
      complex0.INF.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.ZERO.asin();
      complex3.INF.add(complex1);
      Complex complex4 = complex0.I.divide(Double.POSITIVE_INFINITY);
      complex4.I.toString();
      complex0.cosh();
      Complex complex5 = Complex.ONE;
      Complex.valueOf(1.0070909418550386E152, 2.0);
      complex2.tanh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.sqrt1z();
      complex2.divide(2.0);
      Complex complex8 = new Complex(Double.NaN);
      complex8.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex0.cos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.createComplex(434.537, 434.537);
      complex0.subtract(complex1);
      Complex complex6 = complex3.tanh();
      Complex complex7 = Complex.ONE;
      complex6.tan();
      Complex complex8 = complex2.divide(complex1);
      complex6.nthRoot(533);
      Complex complex9 = complex4.sin();
      complex8.toString();
      complex5.reciprocal();
      Complex complex10 = complex3.conjugate();
      complex9.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = 0;
      Complex complex1 = complex0.I.multiply(0);
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0070909418550386E152, 1.0070909418550386E152);
      complex0.INF.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.ZERO.asin();
      complex3.INF.add(complex1);
      Complex complex4 = complex0.I.divide(Double.POSITIVE_INFINITY);
      complex4.I.toString();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.createComplex(1.0070909418550386E152, (-2.3105188606976847E-7));
      Complex complex7 = complex6.pow(complex5);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex7.INF.multiply(complex8);
      complex9.ZERO.conjugate();
      complex8.NaN.log();
      complex9.multiply(4504318.152393209);
      complex6.tanh();
      complex6.divide(1400.993793);
      Complex complex10 = complex1.divide((-1.0));
      Complex.valueOf(0.0, 869.0734246753798);
      complex10.tan();
      complex1.createComplex(Double.POSITIVE_INFINITY, 1.0070909418550386E152);
      Complex.valueOf((-3364.51313101), 2120.807144370995);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      double double0 = (-3.609949022969024E295);
      Complex complex2 = new Complex((-3.609949022969024E295), 0.0);
      Complex complex3 = complex2.asin();
      complex3.readResolve();
      complex1.getReal();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.sqrt1z();
      complex2.subtract(complex5);
      Complex complex6 = Complex.NaN;
      int int0 = 1788;
      try { 
        complex3.nthRoot((-3029));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,029
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.atan();
      complex3.toString();
      complex4.getField();
      Complex complex5 = Complex.INF;
      complex1.divide(complex5);
      complex5.toString();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.ONE;
      Complex.valueOf(0.32270604372024536, 0.3847018800277559);
      Complex complex9 = new Complex(0.3847018800277559, 0.3847018800277559);
      Complex complex10 = complex6.conjugate();
      Complex complex11 = Complex.ONE;
      complex11.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1526.9227061482127, 1474.966);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      complex0.getReal();
      complex1.NaN.exp();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = Complex.NaN;
      complex6.nthRoot(1788);
      Complex complex7 = Complex.I;
      complex7.isNaN();
      Complex complex8 = complex5.acos();
      Complex complex9 = Complex.I;
      complex9.getImaginary();
      Complex complex10 = Complex.valueOf(1474.966);
      Complex complex11 = complex10.add(complex4);
      Complex.valueOf(1526.9227061482127, 2492.0);
      complex7.multiply(1788);
      Complex.valueOf(1526.9227061482127);
      complex7.divide((-8.324100783330331E-109));
      complex11.sqrt();
      Complex complex12 = complex0.tan();
      complex11.subtract(complex8);
      Complex.valueOf(2492.0, (-3337.18904014));
      complex12.subtract(complex11);
      complex12.multiply(271440.0);
      complex10.log();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-2759.43533701108), 4.5909386437919143E-48);
      complex0.toString();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(760);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex4.divide(complex0);
      complex1.multiply(1569);
      complex4.pow(complex3);
      Complex complex6 = complex5.divide(complex4);
      complex6.divide(complex5);
      complex5.divide((-521.8873));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      complex1.INF.toString();
      Complex complex2 = complex1.ONE.negate();
      complex2.getArgument();
      complex1.I.toString();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.createComplex((-3.141592653589793), (-3.141592653589793));
      Complex complex5 = complex4.I.pow(complex2);
      complex1.subtract(complex3);
      Complex complex6 = Complex.valueOf(8.35372028767317, 2749.421573);
      Complex complex7 = complex6.atan();
      complex0.I.getField();
      complex5.ZERO.hashCode();
      Complex complex8 = Complex.valueOf(2397.0);
      Complex complex9 = complex8.ONE.subtract(2397.0);
      complex8.reciprocal();
      complex5.exp();
      Complex complex10 = complex5.divide((-3.141592653589793));
      complex0.ZERO.atan();
      complex4.pow(complex1);
      Complex complex11 = new Complex(2749.421573);
      complex11.sqrt();
      complex2.add(complex11);
      complex10.conjugate();
      complex7.toString();
      complex9.add(complex6);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.NaN;
      complex1.equals(complex1);
      Complex complex2 = complex0.cosh();
      complex2.conjugate();
      Complex complex3 = complex1.atan();
      complex2.toString();
      complex3.getField();
      Complex complex4 = Complex.INF;
      complex1.divide(complex4);
      complex4.toString();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ONE;
      Complex.valueOf(0.32270604372024536, 0.3847018800277559);
      Complex complex8 = new Complex(0.3847018800277559, 0.3847018800277559);
      complex4.multiply(0.06458804341850229);
      Complex complex9 = Complex.I;
      complex1.log();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1804.209550126535);
      Complex complex1 = complex0.multiply(0.802704385704528);
      complex1.getImaginary();
      Complex complex2 = complex1.acos();
      complex1.divide(0.802704385704528);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.conjugate();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.atan();
      complex3.toString();
      complex4.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.divide(complex5);
      complex5.toString();
      Complex complex7 = Complex.I;
      complex4.getImaginary();
      complex4.add(complex1);
      complex2.multiply((-1));
      complex7.sqrt();
      complex2.tan();
      Complex complex8 = new Complex(0.0, Double.NaN);
      complex7.subtract(complex8);
      Complex.valueOf(0.2919265817264288, (-889.564));
      complex3.subtract(complex0);
      complex0.multiply(0.0);
      complex6.sqrt1z();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-3248.0), (-3248.0));
      Complex complex2 = complex1.cos();
      complex2.isInfinite();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex4.createComplex(434.537, 0.9999998463982783);
      complex0.subtract(complex5);
      Complex complex6 = complex2.tanh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.tan();
      complex2.nthRoot(361);
      complex0.add(complex6);
      Complex complex9 = complex0.sin();
      complex7.reciprocal();
      complex9.acos();
      complex2.createComplex(361, 434.537);
      Complex complex10 = Complex.ZERO;
      complex8.add(0.9999998463982783);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(4273.8);
      Complex complex1 = Complex.valueOf(4273.8, 0.0);
      complex0.exp();
      Complex complex2 = complex1.atan();
      complex2.toString();
      Complex complex3 = Complex.NaN;
      complex3.getField();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.sinh();
      complex3.sqrt1z();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ZERO;
      complex7.divide(complex4);
      complex4.toString();
      Complex complex8 = Complex.valueOf(1.0, 0.0);
      complex2.pow(complex6);
      complex5.tanh();
      complex1.acos();
      complex5.sinh();
      complex4.cos();
      Complex complex9 = complex2.createComplex((-6.3890560989306495), 0.0);
      complex8.add(916.875);
      Complex complex10 = Complex.ZERO;
      complex2.reciprocal();
      complex1.tanh();
      complex9.log();
      complex6.negate();
      complex0.createComplex((-321.8304), (-0.38109784554181547));
      Complex complex11 = new Complex((-6.3890560989306495), (-321.8304));
      complex11.subtract(702.0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.atan();
      complex4.toString();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex5.sqrt1z();
      complex7.subtract(complex6);
      Complex complex8 = Complex.NaN;
      int int0 = 1788;
      int int1 = 2146280717;
      // Undeclared exception!
      complex1.nthRoot(2146280717);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      double double0 = 1526.9227061482127;
      double double1 = 1474.966;
      Complex complex0 = Complex.valueOf((-472.9737863), (-2501.69861167));
      Complex complex1 = complex0.asin();
      complex1.atan();
      complex1.readResolve();
      complex1.getReal();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.sqrt1z();
      complex2.subtract(complex3);
      Complex complex4 = Complex.NaN;
      try { 
        complex3.nthRoot((-851));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -851
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1804.209550126535);
      complex0.ZERO.readResolve();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.tan();
      complex2.I.cosh();
      Complex complex3 = complex1.I.multiply(1804.209550126535);
      Complex complex4 = complex0.exp();
      complex4.ONE.nthRoot(313);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.valueOf(8.35372028767317, Double.NaN);
      complex7.acos();
      Complex complex8 = Complex.valueOf(8.35372028767317);
      complex8.createComplex(1.2182829050172777, 601.869722);
      complex7.sinh();
      complex1.add((-1316.081909805));
      complex6.sin();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(9.704997606668411E204);
      Complex.valueOf(3247.35831, 1320.17408441373);
      Complex complex1 = Complex.valueOf(1320.17408441373, 3247.35831);
      Complex complex2 = complex1.multiply(2.0);
      complex2.pow(3247.35831);
      complex2.acos();
      complex0.acos();
      complex2.ONE.cos();
      complex2.multiply((-1010));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1526.9227061482127, 1474.966);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      complex0.getReal();
      complex1.NaN.exp();
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex4.NaN.subtract(complex2);
      Complex complex6 = Complex.NaN;
      complex5.NaN.nthRoot(1788);
      complex1.isNaN();
      Complex complex7 = complex0.acos();
      complex7.getImaginary();
      complex7.nthRoot(199);
      complex3.add(complex7);
      Complex complex8 = Complex.valueOf((-1.0), (-3.6897084415718804E137));
      Complex complex9 = complex8.sin();
      Complex complex10 = Complex.valueOf((double) 371, 1278.0);
      Complex complex11 = complex9.reciprocal();
      complex11.acos();
      complex10.createComplex((-1.0), 1323.2111491870635);
      complex5.sinh();
      complex10.add(952.10013);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(155967.2493949812, 155967.2493949812);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sin();
      complex1.getReal();
      complex2.readResolve();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.sinh();
      complex3.ONE.sin();
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex5.ZERO.subtract((-1532.7984996302));
      complex2.ZERO.getArgument();
      complex3.ZERO.readResolve();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex7.asin();
      complex7.ZERO.getArgument();
      complex9.nthRoot(1755);
      Complex complex10 = complex8.tan();
      Complex complex11 = complex10.add(complex4);
      complex6.divide(complex4);
      complex10.INF.divide((double) 1755);
      Complex complex12 = complex11.multiply(complex1);
      complex12.I.multiply(870);
      complex7.abs();
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.readResolve();
      complex0.NaN.readResolve();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ZERO.divide((-5195.921));
      complex0.abs();
      complex0.ONE.multiply(complex2);
      complex0.tanh();
      Complex complex4 = complex1.sinh();
      complex2.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.I.sin();
      complex5.atan();
      complex5.INF.negate();
      Complex complex6 = complex5.ONE.divide((-538.2766758384));
      complex1.multiply(1179399891);
      complex1.sqrt();
      complex3.conjugate();
      complex6.add(13.411135823728289);
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(4273.8);
      Complex complex1 = Complex.valueOf(4273.8, 0.0);
      Complex complex2 = new Complex((-2267.4));
      Complex complex3 = complex0.INF.subtract((-1455.73660668));
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex0.INF.pow(complex2);
      Complex complex6 = complex5.ONE.sin();
      complex0.toString();
      complex6.I.getField();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.INF.sinh();
      complex8.ONE.sqrt1z();
      Complex complex9 = complex0.divide(complex7);
      complex2.toString();
      Complex complex10 = complex7.pow(complex5);
      Complex complex11 = complex10.ZERO.tanh();
      complex11.ONE.acos();
      complex5.sinh();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex5.subtract(complex4);
      complex8.multiply((-1000.8521934248));
      complex1.log();
      complex9.sqrt1z();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-3248.0));
      Complex complex2 = complex1.conjugate();
      Complex.valueOf((-4.989318918773146E108));
      complex0.getArgument();
      Complex complex3 = complex2.pow((-4.989318918773146E108));
      Complex complex4 = new Complex((-2555.2301319098556), 2.0);
      complex4.tan();
      complex0.nthRoot(93);
      complex2.add(complex3);
      complex4.sin();
      Complex complex5 = complex0.reciprocal();
      complex3.createComplex(93, (-4.989318918773146E108));
      complex0.sinh();
      Complex complex6 = complex5.add((-2459.6194));
      complex1.sin();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.add(complex0);
      complex2.ONE.cos();
      complex0.isInfinite();
      Complex complex3 = complex1.sqrt1z();
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex1.createComplex(434.537, 434.537);
      complex4.ONE.subtract(complex0);
      Complex complex5 = complex0.ONE.tanh();
      complex3.equals(complex0);
      complex4.add(complex3);
      Complex complex6 = complex2.pow(complex4);
      complex6.cos();
      complex1.createComplex((-145.24772139868665), 434.537);
      complex4.add(177.0);
      Complex complex7 = Complex.valueOf(0.0, (-145.24772139868665));
      complex7.tanh();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1526.9227061482127, 1474.966);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      complex0.getReal();
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex0.INF.sqrt1z();
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = Complex.NaN;
      complex6.NaN.nthRoot(1788);
      complex1.isNaN();
      Complex complex8 = complex0.acos();
      complex8.getImaginary();
      complex5.ZERO.add(complex4);
      complex8.multiply((-1));
      Complex complex9 = Complex.valueOf((double) 1788);
      Complex complex10 = complex2.sqrt();
      complex1.tan();
      Complex complex11 = complex9.NaN.subtract(complex2);
      Complex.valueOf(0.0, 1.0);
      complex4.subtract(complex3);
      complex10.multiply((double) 1788);
      complex11.log();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.divide(complex0);
      Complex.valueOf(0.0);
      complex2.hashCode();
      Complex complex3 = complex2.negate();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.INF.tanh();
      complex5.toString();
      complex4.equals(complex1);
      complex4.negate();
      complex3.sqrt1z();
      complex3.multiply(934);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ONE.cos();
      complex0.isInfinite();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.I.pow(complex3);
      Complex complex6 = complex1.createComplex(434.537, 434.537);
      Complex complex7 = complex6.ONE.subtract(complex0);
      Complex complex8 = complex0.ONE.tanh();
      complex5.conjugate();
      complex4.getArgument();
      Complex complex9 = complex1.pow(614.0);
      Complex complex10 = complex7.divide(complex5);
      complex0.toString();
      Complex complex11 = complex1.pow(complex9);
      complex9.tanh();
      complex2.acos();
      Complex complex12 = complex8.sinh();
      Complex complex13 = complex0.cos();
      complex6.createComplex(Double.NaN, (-1305.349153664586));
      complex10.add(6.283185307179586);
      complex11.reciprocal();
      complex12.tanh();
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(9.704997606668411E204);
      Complex complex1 = Complex.valueOf(3247.35831, 1320.17408441373);
      Complex complex2 = new Complex((-2.718281828459045));
      complex0.subtract((-2267.4));
      Complex complex3 = new Complex((-1455.73660668));
      Complex complex4 = complex3.atan();
      complex1.pow(complex2);
      complex3.sin();
      complex1.toString();
      complex2.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.INF;
      complex6.sinh();
      Complex complex7 = complex0.sqrt1z();
      complex6.divide(complex1);
      complex7.toString();
      Complex complex8 = complex5.pow(complex4);
      complex0.tanh();
      complex8.acos();
      complex5.sinh();
      Complex complex9 = new Complex(1320.17408441373);
      complex9.cos();
      complex2.createComplex((-529.771538), 0.0);
      complex1.add((-2182.55));
      Complex complex10 = complex3.reciprocal();
      complex10.add(complex9);
      complex2.tanh();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0011091330925855833);
      complex0.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(4273.8);
      Complex complex6 = complex1.sin();
      complex1.acos();
      Complex complex7 = complex6.conjugate();
      Complex.valueOf(0.0011091330925855833);
      complex2.getArgument();
      Complex complex8 = complex5.pow(0.0011091330925855833);
      Complex complex9 = Complex.valueOf(0.0011091330925855833);
      complex9.tan();
      complex0.nthRoot(371);
      Complex complex10 = complex9.add(complex8);
      complex5.sin();
      Complex complex11 = Complex.valueOf(4273.8, (-801.29349129658));
      complex10.reciprocal();
      complex11.acos();
      complex7.createComplex(4628.608663037877, 4273.8);
      complex3.sinh();
      complex0.add((-20.0));
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.sin();
      complex4.acos();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.getArgument();
      complex5.pow((-20.0));
      complex4.nthRoot(371);
      complex1.add(complex0);
      Complex complex7 = complex2.sin();
      Complex.valueOf(0.0, 5.728490121672743E74);
      complex4.reciprocal();
      complex7.acos();
      complex7.createComplex(1.1253517584464134E-7, 1.073186581170719E-8);
      complex7.sinh();
      complex0.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1804.209550126535);
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.subtract(1804.209550126535);
      complex1.exp();
      complex6.atan();
      Complex complex7 = complex6.divide(1804.209550126535);
      complex3.hashCode();
      complex3.cosh();
      Complex complex8 = Complex.valueOf(6.3890560989306495);
      complex8.exp();
      complex6.nthRoot(495);
      Complex complex9 = complex7.asin();
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.valueOf(1.828536033630371, 0.0);
      complex11.subtract(complex2);
      complex5.multiply(6.3890560989306495);
      complex10.log();
      complex9.sqrt1z();
      complex4.multiply(219);
      Complex.valueOf(1804.209550126535, (-6.3890560989306495));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ONE.cos();
      complex0.isInfinite();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.I.pow(complex3);
      Complex complex6 = complex1.createComplex(434.537, 434.537);
      Complex complex7 = complex6.ONE.subtract(complex0);
      complex0.ONE.tanh();
      Complex complex8 = complex5.conjugate();
      complex4.getArgument();
      complex1.pow(614.0);
      Complex complex9 = Complex.ONE;
      complex9.tan();
      complex9.nthRoot(533);
      Complex complex10 = complex0.add(complex7);
      complex10.sin();
      complex3.reciprocal();
      complex9.acos();
      Complex complex11 = complex5.createComplex((-935.4756), 3531.06011);
      complex11.sinh();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ONE.cos();
      complex0.isInfinite();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.I.pow(complex3);
      Complex complex6 = complex1.createComplex(434.537, 434.537);
      Complex complex7 = complex6.ONE.subtract(complex0);
      Complex complex8 = complex0.ONE.tanh();
      complex8.subtract(complex1);
      complex5.conjugate();
      complex4.getArgument();
      Complex complex9 = complex1.pow(614.0);
      Complex complex10 = new Complex(614.0);
      Complex complex11 = new Complex((-585.156759), Double.POSITIVE_INFINITY);
      complex10.equals(complex11);
      Complex complex12 = complex6.add(complex7);
      Complex complex13 = Complex.valueOf((-1138.54713256443));
      complex13.pow(complex9);
      complex11.cos();
      complex7.createComplex(Double.POSITIVE_INFINITY, 2422.4014476623547);
      complex12.add(4184.97337);
      Complex complex14 = complex7.reciprocal();
      complex5.tanh();
      complex14.log();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(3247.35831, (-1.0));
      complex0.I.multiply(3247.35831);
      Complex complex1 = complex0.ZERO.exp();
      complex0.multiply(621);
      complex0.tan();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.tan();
      complex0.nthRoot(1070);
      Complex complex4 = complex0.divide((-3374.8));
      Complex complex5 = complex4.INF.reciprocal();
      Complex.valueOf((-922.0230258), (-922.0230258));
      complex3.createComplex((-3374.8), (-1.0));
      Complex.valueOf((-922.0230258));
      complex0.abs();
      complex5.getReal();
      Complex complex6 = complex3.asin();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(4.678982327128295, (-216.3));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      complex2.abs();
      complex1.readResolve();
      complex0.pow(complex1);
      complex2.multiply(1099);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(172.8298960540516);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex.valueOf(518.587);
      complex2.I.atan();
      Complex complex3 = complex0.I.cos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.ONE.negate();
      Complex complex6 = complex0.I.divide(complex5);
      Complex complex7 = complex6.INF.multiply(2522.3760529);
      Complex.valueOf((-214.917458), 172.8298960540516);
      Complex complex8 = complex6.NaN.asin();
      complex7.ONE.pow((-1736.810345758972));
      complex6.INF.subtract(complex5);
      Complex complex9 = complex8.I.cos();
      complex9.NaN.pow((-1677.91403668528));
      complex9.toString();
      Complex complex10 = complex0.divide(2522.3760529);
      complex10.ZERO.abs();
      Complex complex11 = complex0.sinh();
      Complex complex12 = complex11.log();
      Complex complex13 = complex12.INF.tanh();
      complex0.abs();
      complex12.sqrt1z();
      complex1.reciprocal();
      complex7.reciprocal();
      complex5.abs();
      Complex complex14 = complex6.reciprocal();
      Complex complex15 = complex14.subtract(complex13);
      complex4.nthRoot(1110);
      complex15.readResolve();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1526.9227061482127, 1474.966);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = Complex.INF;
      complex0.getReal();
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex0.INF.sqrt1z();
      Complex complex6 = complex5.NaN.subtract(complex2);
      Complex complex7 = complex6.I.sqrt1z();
      complex6.NaN.nthRoot(1788);
      complex1.isNaN();
      Complex complex8 = complex0.acos();
      complex8.getImaginary();
      complex4.toString();
      Complex complex9 = complex7.pow(complex2);
      complex8.tanh();
      complex8.acos();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex4.asin();
      Complex.valueOf((-8.353720287727567));
      Complex complex12 = complex3.cosh();
      complex11.abs();
      complex10.equals(complex5);
      Complex complex13 = complex6.subtract(complex7);
      complex0.abs();
      complex13.add(complex12);
      complex0.nthRoot(1788);
      Complex complex14 = new Complex(4376.433072695146);
      complex14.divide(complex8);
      complex6.negate();
      complex14.asin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-489.136), 1.0);
      Complex complex1 = complex0.ONE.multiply((-463.44327530776));
      Complex complex2 = Complex.INF;
      complex2.pow((-5447.1548835));
      Complex complex3 = complex0.sqrt();
      complex2.getField();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.subtract(complex0);
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.reciprocal();
      Complex.valueOf(0.0);
      Complex complex4 = complex0.INF.cos();
      complex0.readResolve();
      complex0.add((-1.0));
      complex4.abs();
      complex0.hashCode();
      complex4.sqrt1z();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply((-2248.1484334));
      Complex complex1 = complex0.createComplex((-1179.846581), (-1179.846581));
      Complex complex2 = complex1.NaN.conjugate();
      complex2.pow((-2248.1484334));
      Complex complex3 = complex1.sqrt();
      complex1.getField();
      Complex complex4 = Complex.valueOf(1949.16);
      complex3.equals(complex4);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(4273.8);
      Complex.valueOf(4273.8, 0.0);
      Complex complex1 = new Complex((-2267.4));
      Complex complex2 = complex0.INF.subtract((-1455.73660668));
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.INF.pow(complex1);
      Complex complex5 = complex4.ONE.sin();
      complex0.toString();
      complex5.I.getField();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.INF.sinh();
      Complex complex8 = complex7.ONE.sqrt1z();
      Complex complex9 = complex0.divide(complex6);
      complex1.toString();
      Complex complex10 = complex6.pow(complex4);
      Complex complex11 = complex10.ZERO.tanh();
      Complex complex12 = complex11.ONE.acos();
      Complex complex13 = complex4.sinh();
      complex13.cos();
      complex5.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex8.add(6.283185307179586);
      complex12.reciprocal();
      complex9.tanh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1526.9227061482127, 1474.966);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.atan();
      complex2.ZERO.readResolve();
      complex0.getReal();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex4.NaN.subtract(complex2);
      complex5.I.sqrt1z();
      complex5.NaN.nthRoot(1788);
      complex1.isNaN();
      Complex complex6 = complex0.acos();
      complex6.getImaginary();
      complex4.ZERO.add(complex3);
      complex6.multiply(513);
      Complex complex7 = Complex.valueOf((double) 1788);
      complex2.sqrt();
      complex1.tan();
      complex7.NaN.subtract(complex2);
      complex7.pow(6.283185307179586);
      Complex complex8 = complex5.divide(0.0);
      Complex complex9 = Complex.valueOf((double) 513, 1770.521757239527);
      complex9.divide(complex5);
      complex8.sinh();
      complex4.negate();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-3248.0));
      complex0.getImaginary();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.acos();
      complex2.ONE.asin();
      Complex complex3 = complex1.INF.divide(20.0);
      complex0.conjugate();
      Complex complex4 = complex0.multiply(complex3);
      complex4.add((-3248.0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ZERO.divide(0.0);
      complex0.ZERO.hashCode();
      complex4.cosh();
      complex5.exp();
      complex3.nthRoot(1762);
      Complex complex6 = complex3.asin();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.valueOf(6.283185307179586, 20.0);
      complex7.subtract(complex8);
      Complex complex9 = complex6.multiply(6.283185307179586);
      complex9.log();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1804.209550126535);
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.tanh();
      complex2.tan();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(1804.209550126535);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex3.acos();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = Complex.valueOf(1804.209550126535);
      complex9.getArgument();
      complex6.pow((-20.0));
      complex8.tan();
      complex6.nthRoot(371);
      complex1.add(complex5);
      Complex complex10 = complex2.sin();
      Complex complex11 = Complex.valueOf(271440.0, (-2459.6194));
      complex11.reciprocal();
      complex1.acos();
      complex6.createComplex((-20.0), 1.1253517584464134E-7);
      Complex complex12 = complex10.sinh();
      complex10.add(1.1253517584464134E-7);
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ZERO.divide(0.0);
      complex0.ZERO.hashCode();
      Complex complex6 = complex2.ZERO.conjugate();
      Complex complex7 = complex6.NaN.subtract(0.0);
      Complex complex8 = complex5.ONE.sin();
      complex8.INF.acos();
      Complex complex9 = new Complex(0.0);
      complex4.equals(complex9);
      Complex complex10 = complex5.add(complex8);
      Complex complex11 = complex10.pow(complex7);
      complex6.cos();
      complex9.createComplex(0.0, 0.0);
      complex2.add((-669.73923));
      complex11.tanh();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ONE.cos();
      complex0.isInfinite();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex1.I.pow(complex3);
      Complex complex6 = complex1.createComplex(434.537, 434.537);
      Complex complex7 = complex6.ONE.subtract(complex0);
      complex0.ONE.tanh();
      complex5.conjugate();
      complex4.getArgument();
      Complex complex8 = complex1.pow(614.0);
      Complex complex9 = Complex.ONE;
      complex9.tan();
      complex9.nthRoot(533);
      Complex complex10 = complex0.add(complex7);
      complex10.sin();
      complex3.reciprocal();
      complex9.acos();
      Complex complex11 = complex5.createComplex((-935.4756), 3531.06011);
      complex11.sinh();
      complex3.add((-20.0));
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(4273.8);
      Complex.valueOf(4273.8, 0.0);
      Complex complex1 = new Complex((-2267.4));
      Complex complex2 = complex0.INF.subtract((-1455.73660668));
      complex2.I.atan();
      Complex complex3 = complex0.INF.pow(complex1);
      complex3.ONE.sin();
      complex0.toString();
      complex0.hashCode();
      complex0.conjugate();
      Complex complex4 = complex1.tanh();
      complex4.createComplex(4273.8, (-4504318.152393209));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(198.780364, 198.780364);
      Complex complex1 = complex0.NaN.pow(0.0);
      complex0.getReal();
      complex0.exp();
      Complex complex2 = complex1.multiply((-1227));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.multiply((-1115.08));
      complex4.ONE.multiply((-1227));
      complex4.nthRoot(2320);
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(521.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sinh();
      complex2.INF.subtract(1108.8);
      Complex complex3 = complex0.ONE.sqrt1z();
      complex0.pow(complex1);
      Complex complex4 = complex3.INF.multiply(548);
      complex4.ZERO.hashCode();
      complex3.INF.divide(complex0);
      complex1.createComplex(521.0, 1465.011);
      Complex complex5 = complex1.pow(1465.011);
      Complex complex6 = complex3.I.acos();
      complex6.ZERO.cosh();
      complex5.INF.negate();
      complex5.ZERO.negate();
      Complex complex7 = complex3.multiply(17);
      complex4.reciprocal();
      Complex.valueOf(521.0, 1465.011);
      complex1.equals(complex5);
      complex0.sqrt1z();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1804.209550126535);
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex0.exp();
      complex4.ONE.nthRoot(313);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex0.subtract(complex5);
      complex3.multiply(1804.209550126535);
      complex6.log();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-755.56404049), (-755.56404049));
      complex1.I.add((-755.56404049));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.asin();
      Complex complex1 = complex0.ONE.add(352.811245);
      complex1.INF.conjugate();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.NaN.add(1469.954435348749);
      Complex complex4 = complex2.ZERO.log();
      complex4.ZERO.sqrt1z();
      complex3.NaN.multiply(complex0);
      complex2.INF.pow(607.3988);
      complex0.sin();
      Complex complex5 = complex3.acos();
      complex3.I.multiply(complex5);
      try { 
        complex1.nthRoot((-1272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,272
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.ONE.atan();
      Complex complex2 = complex1.INF.divide(complex0);
      complex2.I.log();
      complex2.ONE.abs();
      Complex complex3 = complex0.conjugate();
      complex3.ONE.reciprocal();
      complex0.INF.sqrt1z();
      Complex complex4 = complex3.sinh();
      complex4.NaN.tan();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.negate();
      complex0.I.divide(complex1);
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.INF.tanh();
      complex5.ZERO.abs();
      complex5.ONE.hashCode();
      complex4.log();
      complex4.sin();
      complex2.sqrt();
      complex6.acos();
      complex3.acos();
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex2.NaN.subtract(complex1);
      Complex complex3 = complex2.sin();
      complex3.I.reciprocal();
      complex3.ZERO.negate();
      Complex.valueOf(0.0);
      Complex complex4 = complex1.INF.cos();
      complex0.readResolve();
      complex1.add((-1.0));
      complex4.abs();
      complex0.hashCode();
      Complex complex5 = complex4.sqrt1z();
      complex5.nthRoot(350);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4.203159541613745E-8);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.NaN.multiply((-1038));
      Complex complex3 = complex0.ONE.add(complex1);
      complex3.ZERO.readResolve();
      complex0.NaN.toString();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.acos();
      complex5.INF.log();
      complex5.ZERO.abs();
      complex1.sin();
      Complex complex6 = complex0.multiply((-1446));
      complex6.sin();
      complex0.NaN.nthRoot(973);
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.INF.acos();
      complex8.pow(2169.4981659846);
      complex7.I.toString();
      complex6.INF.reciprocal();
      Complex complex9 = complex0.pow(complex3);
      Complex complex10 = complex3.cosh();
      complex4.INF.hashCode();
      complex10.subtract(complex9);
      complex0.divide(complex4);
      complex1.asin();
      complex1.asin();
      Complex complex11 = complex6.tanh();
      complex11.NaN.atan();
      complex9.hashCode();
      complex9.divide((double) 973);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.ONE.cos();
      complex0.isInfinite();
      Complex complex4 = complex1.sqrt1z();
      complex1.I.pow(complex3);
      Complex complex5 = complex1.createComplex(434.537, 434.537);
      complex5.ONE.subtract(complex0);
      complex0.ONE.tanh();
      complex4.equals(complex0);
      complex5.add(complex4);
      Complex complex6 = complex2.pow(complex5);
      Complex complex7 = complex6.cos();
      complex1.createComplex((-145.24772139868665), 434.537);
      complex5.add(177.0);
      Complex complex8 = complex7.reciprocal();
      complex8.tanh();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-3248.0));
      complex0.getImaginary();
      Complex complex1 = complex0.sinh();
      complex1.acos();
      Complex complex2 = complex1.INF.divide(20.0);
      complex0.conjugate();
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1526.9227061482127, 1474.966);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.atan();
      complex2.ZERO.readResolve();
      complex0.getReal();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex4.NaN.subtract(complex2);
      complex5.I.sqrt1z();
      complex5.NaN.nthRoot(1788);
      complex1.isNaN();
      Complex complex6 = complex0.acos();
      complex6.getImaginary();
      complex4.ZERO.add(complex3);
      complex6.multiply(1);
      Complex complex7 = Complex.valueOf((double) 1788);
      complex2.sqrt();
      complex1.tan();
      Complex complex8 = complex7.NaN.subtract(complex2);
      complex7.pow(6.283185307179586);
      Complex complex9 = complex5.divide(0.0);
      Complex complex10 = Complex.valueOf((double) 1, 1770.521757239527);
      complex10.divide(complex5);
      complex9.sinh();
      complex8.asin();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(1248.18035297239);
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = complex2.NaN.reciprocal();
      Complex complex4 = complex3.ONE.add(complex2);
      complex4.NaN.hashCode();
      Complex complex5 = complex1.cos();
      complex5.hashCode();
      int int0 = (-1126);
      Complex complex6 = complex5.I.multiply((-1126));
      complex6.INF.add(complex1);
      try { 
        complex0.nthRoot((-357));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -357
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 956.14845967);
      Complex complex1 = complex0.sqrt();
      complex1.divide(complex0);
      Complex complex2 = Complex.valueOf(956.14845967);
      complex2.createComplex(0.0, (-2330.0));
      complex1.INF.sinh();
      complex1.toString();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.exp();
      Complex complex4 = complex1.log();
      complex4.subtract(956.14845967);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2175.24335), (-2175.24335));
      Complex complex1 = Complex.valueOf((-2175.24335));
      complex0.NaN.getField();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.INF.sinh();
      complex3.ZERO.add(complex0);
      complex2.ZERO.multiply(complex3);
      complex1.ZERO.getArgument();
      Complex complex4 = complex2.ONE.reciprocal();
      complex4.getArgument();
      complex4.ONE.readResolve();
      Complex complex5 = complex2.negate();
      complex5.INF.multiply(0.0);
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.cos();
      complex0.ONE.add(0.0);
      Complex complex3 = complex2.conjugate();
      complex3.INF.nthRoot(1725);
      Complex complex4 = complex2.I.sin();
      complex4.I.createComplex(1725, 3768.3094253437234);
      Complex complex5 = complex3.INF.asin();
      complex5.NaN.toString();
      Complex complex6 = complex1.add(54.59815216064453);
      Complex complex7 = complex6.INF.subtract((double) 1725);
      complex7.ONE.asin();
      Complex complex8 = complex3.I.cosh();
      Complex complex9 = complex1.multiply(1726.4003672);
      complex9.I.toString();
      complex9.I.getArgument();
      complex0.getArgument();
      Complex complex10 = complex0.ZERO.atan();
      complex1.getArgument();
      Complex complex11 = complex1.sinh();
      complex11.ONE.conjugate();
      complex3.getArgument();
      Complex complex12 = complex11.NaN.createComplex(0.7853981633974483, 1.5707963267948966);
      complex1.reciprocal();
      complex11.cos();
      complex11.NaN.cosh();
      complex10.asin();
      complex12.getImaginary();
      complex7.getImaginary();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ZERO.cosh();
      complex2.ZERO.abs();
      Complex complex3 = complex0.NaN.tan();
      Complex complex4 = complex3.INF.pow(800.41);
      Complex complex5 = complex1.ONE.multiply(0);
      complex4.log();
      complex0.exp();
      complex1.getField();
      Complex complex6 = complex1.ONE.multiply(complex3);
      complex6.INF.toString();
      complex1.asin();
      Complex complex7 = complex5.multiply(complex0);
      complex7.I.acos();
      complex2.tanh();
      complex0.acos();
      complex4.isNaN();
      Complex complex8 = complex6.log();
      Complex complex9 = new Complex(4460.5, (-3924.12653752765));
      complex8.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1506.89), (-1506.89));
      Complex complex1 = Complex.valueOf((-386.664279657));
      complex1.ZERO.multiply(complex0);
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.sinh();
      complex3.ONE.readResolve();
      Complex complex4 = complex2.acos();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(4273.8);
      Complex.valueOf(4273.8, 0.0);
      Complex complex1 = new Complex((-2267.4));
      Complex complex2 = complex0.INF.subtract((-1455.73660668));
      complex2.I.atan();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex3.ONE.sin();
      complex0.toString();
      complex4.I.getField();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.INF.sinh();
      complex6.ONE.sqrt1z();
      complex0.divide(complex5);
      complex1.toString();
      Complex complex7 = complex5.pow(complex3);
      Complex complex8 = complex7.ZERO.tanh();
      Complex complex9 = complex8.ONE.acos();
      complex3.sinh();
      complex1.INF.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex3.cosh();
      complex10.INF.abs();
      complex4.equals("(4273.8, 0.0)");
      Complex complex11 = complex2.subtract(complex5);
      complex11.I.abs();
      complex3.add(complex9);
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-2248.1484334));
      Complex complex2 = complex0.createComplex((-1179.846581), (-1179.846581));
      Complex complex3 = complex2.NaN.conjugate();
      complex3.ONE.pow(0.0);
      complex0.INF.sqrt();
      complex0.getField();
      complex2.equals(complex1);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getField();
      Complex complex1 = complex0.ZERO.atan();
      complex1.ONE.multiply((-996.69));
      Complex complex2 = complex0.NaN.atan();
      complex2.I.multiply(complex1);
      complex2.exp();
      complex0.INF.hashCode();
      complex0.add(1834.86809);
      complex2.asin();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4709796905517578, (-1.0));
      complex0.abs();
      complex0.multiply((-1127.0));
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.NaN.readResolve();
      Complex complex3 = complex0.subtract(2938.520193801);
      complex3.ONE.multiply(2938.520193801);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex4.pow(complex0);
      complex0.ONE.toString();
      complex6.I.multiply(complex0);
      complex0.multiply(2938.520193801);
      complex0.isNaN();
      complex5.tanh();
      complex5.ONE.pow(complex3);
      complex5.equals("");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(549.0);
      Complex complex1 = complex0.INF.conjugate();
      complex1.ZERO.sqrt1z();
      Complex complex2 = complex0.ZERO.log();
      complex2.hashCode();
      int int0 = (-1);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ONE.sinh();
      complex1.ONE.subtract((-404.62));
      complex2.ZERO.abs();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.subtract(complex3);
      complex1.INF.multiply((-939.747427744));
      Complex complex5 = complex1.ONE.subtract(0.0);
      Complex complex6 = complex4.atan();
      complex2.hashCode();
      Complex complex7 = complex0.atan();
      complex6.ZERO.getField();
      Complex complex8 = complex7.ONE.add(complex6);
      Complex complex9 = complex8.NaN.sqrt1z();
      complex6.cos();
      complex6.subtract(complex5);
      complex4.getField();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex10.add(0.0);
      complex11.ONE.toString();
      complex9.tanh();
      complex9.hashCode();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-489.136), 1.0);
      Complex complex1 = complex0.ONE.multiply((-463.44327530776));
      Complex complex2 = complex0.pow(724.2057458758251);
      complex2.ZERO.acos();
      complex0.acos();
      complex1.multiply((-1010));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-740.211901571591));
      Complex complex2 = complex1.I.sin();
      complex2.ONE.multiply(complex0);
      complex0.I.acos();
      complex1.ZERO.atan();
      try { 
        complex1.ONE.nthRoot((-2051));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,051
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(499.4849435);
      complex0.pow(complex1);
      complex0.getReal();
      Complex complex2 = Complex.NaN;
      complex0.add(complex2);
      try { 
        complex2.ZERO.nthRoot((-660));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -660
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.log();
      complex0.ZERO.readResolve();
      complex0.ZERO.readResolve();
      Complex complex2 = Complex.valueOf(1028.7643362933);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.add(complex3);
      complex0.getReal();
      Complex complex5 = Complex.valueOf(1794.7518032, 1028.7643362933);
      Complex complex6 = complex2.NaN.divide(complex5);
      Complex complex7 = complex6.INF.multiply(1794.7518032);
      Complex complex8 = complex3.atan();
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex0.pow(complex1);
      complex10.ONE.hashCode();
      Complex complex11 = complex10.acos();
      Complex complex12 = Complex.valueOf(1.0);
      Complex complex13 = complex12.ONE.multiply(complex2);
      complex13.ONE.add(1794.7518032);
      complex13.ZERO.abs();
      complex4.I.abs();
      Complex complex14 = complex11.INF.tanh();
      complex10.tanh();
      Complex complex15 = complex0.multiply(complex9);
      Complex complex16 = complex15.INF.cosh();
      Complex complex17 = complex16.I.createComplex((-733.362462818639), 1.0);
      complex17.ONE.acos();
      complex4.log();
      complex0.tan();
      complex14.add(1.0);
      complex11.ZERO.multiply(complex7);
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(931.2);
      complex0.ZERO.getArgument();
      complex0.INF.conjugate();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ONE.multiply(1144);
      complex2.ZERO.pow(complex0);
      int int0 = 4104;
      Complex complex3 = complex0.multiply(4104);
      complex3.hashCode();
      Complex complex4 = complex3.divide(931.2);
      Complex complex5 = complex4.NaN.sqrt1z();
      complex3.ONE.tanh();
      complex5.NaN.cosh();
      Complex complex6 = complex1.subtract(0.0);
      complex6.pow(complex3);
      complex4.I.divide(complex3);
      try { 
        complex3.INF.nthRoot((-293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -293
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.I.pow(0.0);
      Complex complex3 = complex2.I.sin();
      Object object0 = complex1.readResolve();
      complex2.ONE.tanh();
      Complex complex4 = complex1.ZERO.divide(complex2);
      complex4.ONE.createComplex(0.0, 99.9160372);
      complex1.equals(object0);
      Complex complex5 = complex1.divide(0.0);
      Complex complex6 = complex0.negate();
      complex2.ZERO.pow(complex6);
      Complex complex7 = complex6.INF.log();
      complex1.I.add(2458.21268047);
      complex2.ONE.createComplex(0.0, 2458.21268047);
      Complex complex8 = complex6.NaN.sin();
      complex5.tan();
      complex8.readResolve();
      Complex complex9 = complex5.reciprocal();
      complex8.subtract(complex3);
      Complex complex10 = complex5.pow(complex0);
      complex10.multiply((-3309));
      complex9.isNaN();
      complex7.pow(721.7235);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.sin();
      complex3.getImaginary();
      complex2.isInfinite();
      complex0.getField();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.add(1.1752011936438014);
      complex6.ZERO.multiply(1.1752011936438014);
      Complex complex7 = complex5.INF.asin();
      complex7.add(1.1752011936438014);
      complex4.negate();
      complex5.getImaginary();
      complex5.createComplex((-2106.2134946051), 1.1752011936438014);
      complex5.add(1.1752011936438014);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.ZERO.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.multiply(50);
      Complex complex3 = complex1.NaN.sqrt1z();
      complex3.ONE.hashCode();
      complex3.reciprocal();
      complex1.INF.multiply(3044.74567287009);
      Complex complex4 = complex1.acos();
      complex4.ONE.pow((double) 50);
      complex4.ZERO.readResolve();
      complex0.hashCode();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.676190774054103E-143);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex3.I.tanh();
      complex2.I.nthRoot(353);
      complex2.ONE.sinh();
      Complex complex4 = complex0.ZERO.conjugate();
      complex0.exp();
      Complex complex5 = complex0.NaN.reciprocal();
      Complex.valueOf((-2117.3540874252), 0.0);
      complex4.NaN.sqrt1z();
      Complex complex6 = complex4.divide((-2117.3540874252));
      Complex complex7 = complex6.ONE.createComplex(0.0, 353);
      Complex complex8 = complex4.sin();
      complex8.NaN.subtract(0.0);
      complex6.log();
      complex5.tan();
      complex7.readResolve();
      complex1.divide((-2374.141128997064));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3503.2455, 3503.2455);
      complex0.ZERO.abs();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex2.NaN.divide(20.0);
      Complex complex4 = Complex.valueOf(3503.2455, (-6.887556547891059E-9));
      Complex complex5 = complex4.I.tan();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex2.I.divide(complex1);
      List<Complex> list0 = complex0.nthRoot(4392);
      assertEquals(4392, list0.size());
      
      Complex complex7 = complex1.add(complex0);
      Complex complex8 = complex7.add(314.56069249);
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex9.INF.subtract(20.0);
      complex4.INF.reciprocal();
      complex2.hashCode();
      Complex complex11 = complex3.tanh();
      assertSame(complex11, complex6);
      
      complex10.createComplex(4392, (-547.3));
      Complex complex12 = complex0.sqrt();
      complex0.abs();
      complex8.asin();
      complex10.nthRoot(4392);
      complex2.hashCode();
      complex4.toString();
      complex9.asin();
      complex12.multiply(complex7);
      assertSame(complex7, complex3);
      assertEquals(26.93595922203732, complex12.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.multiply(584.0051877);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.add(1752.204);
      assertEquals(1753.204, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = new Complex(584.0051877, 0.0);
      Complex complex6 = complex3.pow(complex5);
      assertSame(complex6, complex3);
      
      Complex complex7 = complex2.negate();
      assertEquals((-584.0051877), complex7.getReal(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex4.I.pow((-37.36262383));
      String string0 = complex0.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex6 = complex5.NaN.log();
      Object object0 = complex0.readResolve();
      complex1.getField();
      Complex complex7 = complex0.multiply(1246);
      Complex complex8 = complex7.ONE.multiply(complex0);
      assertSame(complex8, complex7);
      
      complex6.createComplex((-1686.2462), 0.0);
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex6.acos();
      assertEquals(0.8414709848078965, complex4.getImaginary(), 0.01);
      assertSame(complex10, complex9);
      assertEquals((-0.539302133824466), complex5.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertTrue(complex6.equals((Object)object0));
      assertSame(complex1, complex3);
      assertFalse(complex5.isInfinite());
      assertEquals((-0.8421123490677344), complex5.getImaginary(), 0.01);
  }
}
