/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:20:39 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.sqrt();
      Complex complex2 = new Complex((-1.54434478239181E-8), Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
      Complex complex3 = new Complex((-473.4), (-1884.1083348399754));
      complex3.ZERO.add(complex2);
      complex3.nthRoot(1137);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = complex0.negate();
      complex1.atan();
      Complex complex2 = new Complex((-423.013252368));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(1.0529405753876252E-9, (-20.0));
      complex1.add(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.sqrt();
      Complex.valueOf(1.0529405753876252E-9);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex2.sqrt();
      complex8.multiply(complex2);
      complex7.nthRoot(133);
      Complex complex9 = Complex.ZERO;
      complex5.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-689.69683221), (-689.69683221));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.createComplex(2.829168201470791E294, (-1117.5013366));
      complex0.sqrt();
      complex2.tan();
      complex1.multiply(548);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2.15118540381809E-4, 2.15118540381809E-4);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.createComplex(2614.531278018, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.sqrt();
      complex5.cos();
      Complex complex6 = new Complex(2.15118540381809E-4, 814.6);
      complex1.tan();
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      complex1.ONE.divide(20.0);
      complex0.sqrt();
      complex1.cos();
      Complex complex2 = new Complex(2003665.0, 2003665.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(20.0, 20.0);
      complex1.tan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex3.multiply(2649);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.negate();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-4.6694407626686244E235), (-706.36087));
      Complex complex2 = complex1.sqrt();
      complex2.I.reciprocal();
      Complex complex3 = Complex.NaN;
      complex3.cos();
      Complex complex4 = new Complex((-1.0), 0.0);
      complex4.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add((-2699.030244));
      Complex complex1 = complex0.log();
      complex1.tanh();
      Complex complex2 = Complex.valueOf((-46.0823117), (-1044.309324981535));
      complex2.cosh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex1.tanh();
      complex6.getArgument();
      complex4.conjugate();
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex3.tan();
      Complex complex4 = complex3.multiply(0.0);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.I;
      complex3.exp();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex7.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex1.sqrt();
      complex8.multiply(complex0);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      complex1.INF.sqrt();
      complex1.divide(Double.NaN);
      complex0.nthRoot(1308);
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      double double0 = 240.4867044662638;
      Complex complex0 = Complex.valueOf(240.4867044662638, 240.4867044662638);
      double double1 = (-1051.0);
      Complex complex1 = Complex.NaN;
      complex0.subtract(complex1);
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex2.divide(complex1);
      Complex complex3 = Complex.INF;
      complex2.sqrt1z();
      Complex complex4 = Complex.NaN;
      complex4.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.sqrt();
      complex3.cos();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 7.241626420445137E-206);
      complex4.tan();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.readResolve();
      complex0.equals(complex0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.I;
      complex4.exp();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.divide(complex4);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex6.createComplex(0.0, 959.1208352033);
      complex2.sqrt();
      complex4.cos();
      Complex complex8 = new Complex((-2943.07713337943), Double.POSITIVE_INFINITY);
      complex8.tan();
      complex0.equals(complex3);
      complex7.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex4.tanh();
      Complex complex8 = complex6.createComplex(0.0, 959.1208352033);
      complex1.sqrt();
      Complex complex9 = complex3.cos();
      Complex complex10 = new Complex((-2943.07713337943), Double.POSITIVE_INFINITY);
      complex9.tanh();
      complex0.isInfinite();
      complex3.sqrt();
      complex8.exp();
      complex5.divide(complex6);
      complex10.sqrt1z();
      Complex complex11 = complex7.tanh();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.negate();
      complex2.exp();
      Complex complex3 = Complex.valueOf((-2324.3));
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = Complex.valueOf((-2324.3));
      complex6.getReal();
      Complex complex7 = complex5.tanh();
      complex0.asin();
      Complex complex8 = Complex.NaN;
      complex8.cosh();
      complex3.getArgument();
      complex7.sqrt();
      Complex.valueOf(1.0, 2391.89867997);
      // Undeclared exception!
      complex4.nthRoot(683936689);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.negate();
      complex2.exp();
      Complex complex3 = Complex.valueOf((-2324.3));
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex2.exp();
      complex2.NaN.tan();
      Complex complex6 = complex4.divide(Double.POSITIVE_INFINITY);
      complex4.getField();
      complex6.nthRoot(3745);
      complex5.sin();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.negate();
      complex2.exp();
      Complex complex3 = Complex.valueOf((-2324.3));
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex4.NaN.tanh();
      Complex complex6 = complex1.I.sqrt1z();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex0.asin();
      Complex complex9 = Complex.NaN;
      complex9.getArgument();
      Complex complex10 = Complex.I;
      complex0.INF.multiply(Double.NaN);
      Complex complex11 = Complex.NaN;
      complex3.cosh();
      Complex complex12 = Complex.I;
      Complex complex13 = Complex.ZERO;
      complex13.subtract(complex5);
      complex8.sqrt1z();
      complex7.divide(complex11);
      complex6.sqrt1z();
      complex7.tanh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.divide((-4.1900132227036916E-73));
      complex2.getField();
      complex3.nthRoot(1267);
      Complex complex4 = new Complex((-4.1900132227036916E-73), (-4.1900132227036916E-73));
      complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, (-410.8107393932));
      Complex complex2 = Complex.ZERO;
      complex2.subtract(6.283185307179586);
      Complex complex3 = complex0.multiply(6.283185307179586);
      complex3.add(0.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.tanh();
      complex2.abs();
      complex2.readResolve();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(9.03071952023965E12);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.ONE.subtract(9.03071952023965E12);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.I.reciprocal();
      complex1.toString();
      complex1.log();
      Complex complex6 = Complex.valueOf((-4.860415338336282E-70), 1.1168024085164686E112);
      complex6.I.add(complex0);
      Complex complex7 = complex5.multiply(complex6);
      complex6.abs();
      complex7.ZERO.hashCode();
      Complex complex8 = Complex.valueOf(0.5723689794540405, (-4.860415338336282E-70));
      Complex complex9 = complex4.subtract(complex8);
      Complex complex10 = complex7.divide(9.03071952023965E12);
      complex10.ONE.hashCode();
      complex8.negate();
      complex7.divide(1440.0579837758355);
      complex7.sin();
      complex9.subtract((-4.860415338336282E-70));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      complex0.divide(complex0);
      complex0.sqrt1z();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.multiply(2443);
      complex3.isNaN();
      complex2.createComplex(0.0, (-1337.345));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex complex2 = complex1.exp();
      complex2.divide(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(3.0);
      complex4.getReal();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-723.53429677));
      Complex complex7 = complex6.tanh();
      complex1.asin();
      Complex complex8 = Complex.NaN;
      complex5.getArgument();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = Complex.valueOf(40.29279419757214, (-2377.724));
      complex10.multiply(complex9);
      complex7.subtract(6.184953843236509E-8);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf((-2124937.589699948), (-2124937.589699948));
      complex1.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = new Complex((-2513.0));
      Complex complex5 = Complex.I;
      complex5.sqrt1z();
      Complex complex6 = complex5.divide(complex3);
      complex6.sqrt1z();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.tanh();
      complex8.conjugate();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(848.539735846);
      Complex complex2 = complex0.tanh();
      complex2.abs();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide(complex1);
      complex2.sqrt();
      complex0.tanh();
      complex2.sqrt1z();
      Complex complex3 = complex2.tanh();
      complex0.createComplex(1684.5413687999535, (-3666.772738783844));
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.INF;
      complex4.tan();
      Complex complex6 = complex3.negate();
      complex0.sin();
      Complex complex7 = new Complex(Double.NaN, 1.1090631484985352);
      complex6.isInfinite();
      Complex complex8 = Complex.valueOf((-4.1900132227036916E-73));
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = Complex.I;
      complex4.tanh();
      complex3.sqrt1z();
      complex0.tanh();
      Complex complex5 = Complex.INF;
      complex5.createComplex(Double.POSITIVE_INFINITY, (-1170.0));
      Complex complex6 = complex3.sqrt();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex2.tan();
      complex0.negate();
      Complex complex9 = new Complex((-689.69683221), Double.POSITIVE_INFINITY);
      complex7.isInfinite();
      Complex.valueOf(1.0);
      Complex complex10 = complex6.multiply(complex8);
      complex10.I.cos();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex complex2 = complex1.exp();
      complex2.divide(complex0);
      Complex complex3 = new Complex((-689.69683221));
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(3.0);
      complex4.getReal();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-723.53429677));
      complex6.tanh();
      complex1.asin();
      Complex complex7 = Complex.NaN;
      complex5.getArgument();
      complex6.sqrt();
      Complex complex8 = Complex.valueOf((-2513.0), Double.POSITIVE_INFINITY);
      complex3.cosh();
      Complex complex9 = Complex.I;
      complex6.subtract(complex3);
      Complex complex10 = new Complex(0.0);
      complex10.sqrt1z();
      Complex complex11 = complex2.divide(complex5);
      complex10.sqrt1z();
      complex11.tanh();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex2.tanh();
      complex2.sqrt1z();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex0.asin();
      Complex complex8 = Complex.NaN;
      complex7.getArgument();
      complex3.sqrt();
      Complex.valueOf((-1345.283463991), 1231.8);
      complex5.cosh();
      Complex complex9 = Complex.I;
      Complex complex10 = new Complex(1372.8, Double.NaN);
      Complex complex11 = complex10.subtract(complex6);
      complex4.sqrt1z();
      Complex complex12 = Complex.valueOf(1486.8306, (-446.6));
      complex9.divide(complex12);
      complex11.sqrt1z();
      Complex complex13 = new Complex(3432.03, 20.0);
      complex13.tanh();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex.valueOf(1.0);
      complex0.NaN.nthRoot(1214);
      Complex complex2 = complex1.I.divide(complex0);
      complex0.subtract(complex1);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf(1.0, (-2.508780889911577E-4));
      complex3.cosh();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.subtract(complex6);
      complex7.subtract((-689.69683221));
      complex6.sqrt1z();
      complex7.divide(complex4);
      complex6.sqrt1z();
      Complex complex8 = complex7.tanh();
      complex8.conjugate();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex2.tanh();
      complex2.sqrt1z();
      complex5.tanh();
      complex3.createComplex((-689.69683221), (-689.69683221));
      complex2.tanh();
      complex4.asin();
      complex0.cosh();
      Complex complex6 = Complex.NaN;
      complex3.getArgument();
      complex2.sqrt();
      complex2.add((-1000.13320369));
      Complex complex7 = new Complex((-732.259908), (-689.69683221));
      Complex complex8 = Complex.INF;
      try { 
        complex8.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-1993));
      Complex complex2 = Complex.I;
      complex2.divide(complex0);
      Complex complex3 = Complex.INF;
      complex3.sqrt();
      Complex complex4 = new Complex((-1993), 9.390740355567705E62);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex4.createComplex(Double.POSITIVE_INFINITY, (-1993));
      complex7.sqrt();
      Complex complex9 = Complex.INF;
      complex1.tan();
      complex2.negate();
      complex3.tanh();
      complex5.isInfinite();
      Complex complex10 = new Complex((-1993));
      complex8.exp();
      complex9.multiply((-6.211446256095131));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex.valueOf(1.0);
      complex0.NaN.nthRoot(1214);
      Complex complex2 = complex1.I.divide(complex0);
      complex0.subtract(complex1);
      complex1.INF.exp();
      Complex complex3 = Complex.valueOf((-2146.65131504252), (-2146.65131504252));
      complex3.ONE.atan();
      Complex complex4 = complex1.acos();
      complex4.isInfinite();
      complex0.tan();
      complex2.sinh();
      complex2.log();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.divide(complex0);
      complex2.sqrt();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.sqrt1z();
      complex4.tanh();
      complex3.createComplex((-689.69683221), (-689.69683221));
      Complex complex6 = complex0.sqrt();
      Complex complex7 = Complex.INF;
      complex1.tan();
      complex7.negate();
      Complex complex8 = complex6.tanh();
      complex8.isInfinite();
      Complex complex9 = new Complex((-689.69683221));
      complex5.exp();
      Complex complex10 = Complex.ZERO;
      complex10.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex.valueOf(1.0);
      complex0.NaN.nthRoot(1214);
      complex1.I.divide(complex0);
      Complex complex2 = complex0.subtract(complex1);
      complex1.INF.exp();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf((-689.69683221));
      Complex complex4 = complex2.divide(complex0);
      complex2.sqrt();
      Complex complex5 = complex2.tanh();
      complex2.sqrt1z();
      complex5.tanh();
      Complex complex6 = complex4.createComplex((-689.69683221), (-689.69683221));
      complex0.sqrt();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.tan();
      complex0.negate();
      Complex complex9 = complex0.tanh();
      complex9.isInfinite();
      Complex complex10 = new Complex((-689.69683221));
      complex8.exp();
      complex6.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(951363.4407210179, (-2.15118540381809E-4));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((-0.5403023058681398));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.sqrt();
      complex3.tanh();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex4.createComplex(1780.5478590953, 690.69683221);
      complex6.sqrt();
      Complex complex8 = Complex.INF;
      complex2.tan();
      complex2.negate();
      Complex complex9 = Complex.valueOf(2295.876574813549, (-7.836327226971707E174));
      complex9.tanh();
      complex5.isInfinite();
      Complex complex10 = new Complex((-0.9999997665352292));
      complex0.exp();
      complex7.acos();
      complex6.isInfinite();
      Complex complex11 = Complex.ZERO;
      complex5.tan();
      complex1.sinh();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      complex0.abs();
      Complex complex1 = complex0.createComplex((-2926.8758046418), (-2926.8758046418));
      complex1.atan();
      Complex complex2 = Complex.valueOf(3.0);
      complex2.getReal();
      complex2.tanh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.cosh();
      complex4.exp();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex3.sinh();
      complex6.toString();
      complex0.acos();
      Complex complex7 = complex2.pow(complex1);
      Complex complex8 = new Complex((-2926.8758046418));
      complex8.asin();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      complex0.abs();
      Complex complex1 = complex0.createComplex((-2926.8758046418), (-2926.8758046418));
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.valueOf(3.0);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex0.createComplex(1337.12, 236.64201374102);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex4.cos();
      complex3.tan();
      complex5.negate();
      complex5.tanh();
      complex7.isInfinite();
      complex4.sqrt();
      complex8.exp();
      complex6.acos();
      complex4.isInfinite();
      complex0.tan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      complex0.NaN.nthRoot(1214);
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
      complex0.toString();
      complex0.acos();
      complex0.pow(complex3);
      complex2.asin();
      complex1.multiply(1214);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      complex0.abs();
      Complex complex1 = complex0.createComplex((-2926.8758046418), (-2926.8758046418));
      complex1.atan();
      Complex complex2 = Complex.valueOf(3.0);
      complex2.getReal();
      complex2.tanh();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.NaN;
      complex5.getArgument();
      Complex complex6 = complex4.sqrt();
      complex6.add((-732.259908));
      Complex complex7 = new Complex((-2926.8758046418), 3.0);
      complex3.divide(complex7);
      complex2.reciprocal();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = complex0.INF.tanh();
      complex2.NaN.abs();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.valueOf(5.370131904567218E-8, Double.NaN);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex1.negate();
      complex6.subtract(complex1);
      complex2.sqrt1z();
      complex5.divide(complex6);
      Complex complex7 = Complex.valueOf(2003.9);
      Complex complex8 = complex7.sqrt1z();
      complex0.tanh();
      complex6.conjugate();
      complex1.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      complex1.ZERO.exp();
      complex1.INF.reciprocal();
      Complex complex2 = Complex.valueOf((-176.05271932218687), 697.67164);
      complex1.ZERO.abs();
      Complex complex3 = complex0.multiply((-1693666955));
      complex2.asin();
      Complex complex4 = Complex.valueOf(1088.934254646);
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      complex0.ONE.conjugate();
      complex1.NaN.abs();
      Complex complex2 = new Complex(Double.NaN);
      complex0.equals(complex2);
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      complex3.ZERO.divide(Double.NaN);
      complex0.getImaginary();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73));
      complex0.reciprocal();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.subtract(20.0);
      complex2.subtract(20.0);
      Complex complex6 = new Complex((-269.70488960446), 0.0);
      complex6.getField();
      complex6.tan();
      complex5.tan();
      Complex complex7 = complex3.divide(complex4);
      complex7.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex8.isNaN();
      complex2.acos();
      Complex complex9 = complex4.asin();
      complex9.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex.valueOf(0.5447861340387996, 20.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.cosh();
      Complex.valueOf(0.5447861340387996);
      complex2.add((-0.999658338785654));
      Complex complex3 = Complex.valueOf(0.5447861340387996, 0.0);
      complex3.divide(complex0);
      complex0.reciprocal();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.toString();
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex2 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.divide((-4.1900132227036916E-73));
      complex4.ZERO.nthRoot(1182);
      complex3.acos();
      complex1.sinh();
      complex2.toString();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-1993));
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((-3473.17915907818));
      complex1.reciprocal();
      complex3.cosh();
      Complex complex4 = complex2.divide((double) (-1993));
      complex1.nthRoot(7);
      complex2.acos();
      Complex complex5 = Complex.I;
      complex5.sinh();
      Complex complex6 = complex5.acos();
      complex4.pow(complex3);
      complex6.asin();
      complex1.multiply(7);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex complex2 = Complex.valueOf(1.0);
      complex0.NaN.nthRoot(1214);
      complex1.I.divide(complex0);
      complex0.subtract(complex1);
      complex1.INF.exp();
      Complex complex3 = Complex.valueOf((-2146.65131504252), (-2146.65131504252));
      complex3.negate();
      complex2.subtract(complex0);
      Complex complex4 = complex1.sqrt1z();
      complex1.divide(complex2);
      complex4.sqrt1z();
      complex0.tanh();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.tan();
      complex0.toString();
      complex0.nthRoot(2013);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.acos();
      complex2.sinh();
      complex2.toString();
      Complex complex5 = complex1.acos();
      complex4.pow(complex5);
      Complex complex6 = complex5.asin();
      complex6.multiply(2448);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(865.47200757548);
      Complex complex1 = complex0.I.atan();
      complex0.NaN.abs();
      Complex complex2 = complex1.I.multiply(865.47200757548);
      complex2.ZERO.add(complex1);
      complex0.abs();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.I.tan();
      complex5.NaN.sqrt();
      complex0.I.multiply(1182.9);
      complex3.NaN.atan();
      Complex.valueOf(1182.9, 865.47200757548);
      complex4.atan();
      complex5.getReal();
      Complex complex6 = Complex.NaN;
      complex6.log();
      Complex complex7 = Complex.ZERO;
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.readResolve();
      Complex complex1 = complex0.INF.tanh();
      complex0.ONE.conjugate();
      complex1.NaN.abs();
      Complex complex2 = new Complex(Double.NaN);
      complex0.equals(complex2);
      Complex complex3 = Complex.valueOf((-3.286964881802063E-8), (-3.286964881802063E-8));
      complex3.ZERO.divide((-3.286964881802063E-8));
      complex0.getImaginary();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      Complex complex1 = complex0.atan();
      complex0.toString();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.subtract((-473.22814791));
      complex3.subtract(1306.656);
      Complex complex5 = Complex.valueOf(1306.656);
      complex5.getField();
      complex1.tan();
      Complex complex6 = complex4.tan();
      complex1.divide(complex6);
      Complex complex7 = complex0.reciprocal();
      complex6.isNaN();
      complex4.acos();
      Complex complex8 = complex7.asin();
      complex8.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.798489141298457E-208);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.ZERO.cosh();
      Complex complex4 = Complex.NaN;
      complex4.readResolve();
      complex3.equals("");
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1.0180490545927503E-7));
      complex2.divide(3.0);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.I.pow((-4920.9));
      complex3.pow(complex0);
      complex3.I.tan();
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = Complex.INF;
      complex5.INF.getField();
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex0.reciprocal();
      complex7.NaN.sinh();
      complex6.sinh();
      Complex complex8 = complex4.multiply(0);
      Complex complex9 = complex8.INF.createComplex(0, (-4920.9));
      complex6.conjugate();
      complex5.divide(complex2);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(865.47200757548);
      Complex complex1 = complex0.I.atan();
      complex0.NaN.abs();
      Complex complex2 = complex1.I.multiply(865.47200757548);
      complex2.ZERO.add(complex1);
      complex0.abs();
      Complex complex3 = complex0.cosh();
      complex0.I.tanh();
      Complex complex4 = complex0.I.tan();
      complex4.NaN.sqrt();
      Complex complex5 = complex0.I.multiply(1182.9);
      complex3.NaN.atan();
      complex5.I.createComplex(0.0, 865.47200757548);
      complex3.I.sqrt();
      complex1.pow(865.47200757548);
      complex0.sqrt();
      Complex.valueOf(865.47200757548, 1182.9);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.negate();
      complex2.exp();
      Complex complex3 = Complex.valueOf((-2324.3));
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex4.NaN.tanh();
      complex1.I.sqrt1z();
      complex2.NaN.tanh();
      Complex complex6 = complex0.createComplex((-2324.3), (-4572.1968409));
      Complex complex7 = complex6.sqrt();
      complex5.cos();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.ZERO.negate();
      complex6.tanh();
      complex0.isInfinite();
      complex9.sqrt();
      complex0.exp();
      complex5.acos();
      complex3.isInfinite();
      complex8.tan();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      complex1.INF.tan();
      complex0.toString();
      complex0.getField();
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      Complex complex1 = complex0.multiply((-3671.412298696052));
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.INF.multiply(complex2);
      complex0.multiply(0.0);
      complex3.INF.sqrt();
      Complex complex5 = Complex.valueOf(0.0, (-59.98463422096739));
      complex3.I.subtract((-3671.412298696052));
      Complex complex6 = Complex.valueOf((-1829.872190223671), (-3671.412298696052));
      Complex complex7 = complex6.ONE.pow(complex4);
      Complex complex8 = complex4.reciprocal();
      complex8.pow(complex4);
      complex0.I.abs();
      Complex complex9 = complex3.sqrt1z();
      complex3.divide((-3671.412298696052));
      Complex complex10 = complex9.ZERO.atan();
      complex5.getImaginary();
      complex0.sin();
      complex2.acos();
      complex9.I.subtract((-59.98463422096739));
      Complex complex11 = complex6.multiply(7);
      complex11.toString();
      complex6.toString();
      complex5.getImaginary();
      complex9.conjugate();
      complex7.add(complex11);
      complex10.divide((-59.98463422096739));
      complex6.subtract(complex1);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.sinh();
      complex3.toString();
      Complex complex4 = complex0.I.tanh();
      complex4.I.reciprocal();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = Complex.valueOf(20.0, 20.0);
      complex1.hashCode();
      complex6.pow(complex3);
      Complex complex7 = complex2.multiply((-190));
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex5.cos();
      complex8.ZERO.abs();
      complex9.divide(1600.453279);
      Complex complex10 = complex8.add(complex2);
      Complex complex11 = complex8.ZERO.cosh();
      complex10.ONE.negate();
      Complex.valueOf((-839.27775705), (-1332.803844647455));
      complex10.NaN.getField();
      complex2.toString();
      Complex complex12 = complex7.tan();
      Complex complex13 = complex12.asin();
      complex6.abs();
      Complex complex14 = complex2.sqrt();
      complex14.INF.getArgument();
      complex6.getReal();
      complex1.getArgument();
      Complex complex15 = complex13.subtract(0.17922431230545044);
      complex1.getImaginary();
      complex11.tanh();
      complex15.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.asin();
      complex2.I.cos();
      Complex complex4 = complex0.createComplex(2389.375, 2389.375);
      complex4.INF.add(2389.375);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.valueOf(2389.375, 2389.375);
      Complex complex7 = complex5.ZERO.conjugate();
      Complex complex8 = complex7.I.add(2389.375);
      complex1.asin();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex2.log();
      complex6.cos();
      complex9.getArgument();
      Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex4.sin();
      complex11.I.cos();
      Complex.valueOf(0.0);
      complex10.readResolve();
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.multiply(complex8);
      Complex.valueOf(2389.375);
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex.valueOf(1.0);
      complex0.NaN.nthRoot(1214);
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
      complex1.INF.exp();
      Complex complex4 = Complex.valueOf((-2146.65131504252), (-2146.65131504252));
      complex4.ONE.atan();
      complex3.getReal();
      complex3.log();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3226.879497395));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ONE.acos();
      complex2.ZERO.cosh();
      Complex complex3 = Complex.valueOf((-3226.879497395), (-999.219115943936));
      complex3.I.multiply(0);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.INF.divide((-999.219115943936));
      complex5.INF.divide(7.6);
      complex3.getReal();
      complex3.readResolve();
      complex0.sqrt1z();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1675.661176), (-2010.5047997974168));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.sinh();
      complex1.getArgument();
      Complex complex4 = complex0.reciprocal();
      complex4.readResolve();
      Complex complex5 = complex1.INF.tanh();
      complex5.ONE.sqrt1z();
      complex4.NaN.hashCode();
      Complex complex6 = complex0.acos();
      complex2.isInfinite();
      complex3.subtract(complex0);
      Complex complex7 = complex6.I.add(complex0);
      complex0.getArgument();
      complex7.ZERO.negate();
      complex6.exp();
      complex4.isNaN();
      complex6.readResolve();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex1.atan();
      complex3.ONE.toString();
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex1.subtract(0.0);
      Complex complex7 = complex6.subtract(1306.656);
      complex0.getField();
      Complex complex8 = complex5.tan();
      complex0.tan();
      complex0.divide(complex4);
      complex8.reciprocal();
      complex7.isNaN();
      Complex complex9 = complex6.acos();
      complex9.ONE.asin();
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.592721454922832E-15);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.tanh();
      complex0.ZERO.negate();
      Complex complex3 = complex0.createComplex(0.0, 2.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.asin();
      complex0.INF.getField();
      complex5.ONE.getField();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.I.log();
      complex7.NaN.createComplex(0.0, 2.0);
      Complex complex8 = complex7.ONE.add(2.592721454922832E-15);
      complex8.INF.tanh();
      complex6.ONE.asin();
      Complex complex9 = complex3.divide(2.0);
      complex9.I.exp();
      complex1.ZERO.nthRoot(493);
      Complex complex10 = complex1.cosh();
      complex10.NaN.pow(2.592721454922832E-15);
      complex10.ONE.conjugate();
      Complex complex11 = complex1.createComplex(2438.6988652292775, 2.592721454922832E-15);
      complex11.NaN.hashCode();
      complex4.subtract(complex0);
      complex3.getArgument();
      Complex complex12 = complex0.log();
      complex12.sinh();
      complex1.getArgument();
      complex9.subtract(1425.1534483);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(2750.985315365432);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.tanh();
      complex1.INF.pow(0.0);
      Complex complex6 = complex5.ONE.multiply(2750.985315365432);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.I.exp();
      complex7.NaN.pow(complex2);
      complex5.pow(2750.985315365432);
      Complex complex9 = complex4.sin();
      complex9.NaN.abs();
      Complex complex10 = complex9.cosh();
      complex10.toString();
      Complex complex11 = complex3.add(168.4344410449);
      Complex complex12 = Complex.valueOf(168.4344410449, 2750.985315365432);
      Complex complex13 = complex12.ZERO.subtract(Double.NaN);
      complex11.tan();
      Complex complex14 = complex6.multiply(complex13);
      complex13.ONE.multiply(complex5);
      complex3.add(4652.372034280361);
      Complex complex15 = complex2.cosh();
      complex15.I.multiply(complex8);
      complex5.pow(complex10);
      complex4.add(complex8);
      complex14.getField();
      complex2.reciprocal();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.ONE.sqrt();
      complex2.I.subtract(0.0);
      complex2.ZERO.toString();
      complex3.ZERO.atan();
      complex1.readResolve();
      complex2.equals(complex1);
      Complex complex4 = complex1.ONE.reciprocal();
      complex1.nthRoot(455);
      complex2.isInfinite();
      complex3.conjugate();
      complex1.getArgument();
      complex4.equals(complex3);
      complex4.pow((-1158.0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3017010688781738, 1331.3508);
      complex0.getReal();
      Complex complex1 = complex0.cosh();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-1993));
      Complex complex2 = complex0.tan();
      complex2.I.abs();
      Complex complex3 = complex1.ONE.createComplex((-1993), (-3473.17915907818));
      complex3.INF.atan();
      Complex complex4 = Complex.valueOf(2.0);
      complex0.getReal();
      complex0.tanh();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.I.cosh();
      complex6.getArgument();
      complex5.sqrt();
      Complex complex7 = Complex.valueOf((-4213.53058289443), 0.0);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex6.NaN.negate();
      complex0.ONE.subtract(complex9);
      Complex complex10 = complex1.sqrt1z();
      complex10.divide(complex6);
      complex4.sqrt1z();
      complex8.tanh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.multiply(1);
      complex3.ONE.getField();
      Complex complex4 = complex3.ZERO.subtract(2.61726605666378E-211);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ZERO.tanh();
      complex0.hashCode();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex2.cos();
      complex3.readResolve();
      complex0.getReal();
      Complex complex9 = complex8.INF.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.ONE.getArgument();
      complex7.pow(Double.POSITIVE_INFINITY);
      complex8.abs();
      complex5.reciprocal();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex6.multiply(0.0);
      complex10.isInfinite();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.INF.subtract(0.5341835021972656);
      Complex complex2 = complex0.NaN.multiply(0.5341835021972656);
      complex2.INF.sqrt1z();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex1.ONE.sqrt1z();
      complex4.readResolve();
      Complex complex5 = complex4.INF.add(complex2);
      complex1.I.reciprocal();
      complex1.I.abs();
      Complex complex6 = complex2.ZERO.createComplex(0.5341835021972656, Double.NaN);
      complex0.ZERO.readResolve();
      complex0.cos();
      complex1.sqrt1z();
      complex5.divide(0.5341835021972656);
      complex3.tanh();
      complex0.multiply(Double.NaN);
      Object object0 = complex6.readResolve();
      complex5.equals(object0);
      complex4.multiply(0.5341835021972656);
      Complex complex7 = Complex.valueOf(3.0891604448087654E-25, 1.0);
      complex6.sqrt1z();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex((-1797.81), 2283.3);
      Complex complex2 = complex1.ONE.pow(complex0);
      complex0.I.conjugate();
      Complex complex3 = complex0.I.reciprocal();
      complex3.ZERO.getArgument();
      Complex complex4 = complex3.INF.conjugate();
      complex4.NaN.negate();
      complex4.ZERO.negate();
      Complex complex5 = complex0.pow(1.0);
      complex0.nthRoot(17);
      complex0.hashCode();
      complex1.NaN.pow(complex0);
      complex2.I.divide(1768.1761640407);
      Complex complex6 = complex5.subtract((-1.0));
      complex0.hashCode();
      Complex complex7 = complex6.divide((-1.0));
      complex1.cos();
      complex2.readResolve();
      complex1.toString();
      complex7.multiply(17);
      Complex complex8 = complex0.divide(0.0);
      Complex.valueOf(1768.1761640407);
      Complex complex9 = complex3.sin();
      complex9.ZERO.multiply(complex0);
      complex8.log();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.I.createComplex(6.283185307179586, (-748.9714169166746));
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.createComplex(4996, 0.0);
      Complex complex4 = Complex.valueOf((double) 4996);
      complex4.I.sin();
      complex3.ONE.cos();
      complex1.NaN.abs();
      complex0.nthRoot(4996);
      complex1.asin();
      complex0.conjugate();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.subtract(complex5);
      complex6.exp();
      complex0.pow(complex6);
      Complex.valueOf(0.0);
      Complex complex7 = complex2.log();
      complex7.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-20.0));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.tanh();
      complex3.isInfinite();
      complex2.getField();
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = Complex.valueOf(1.3407295326570417E-236);
      complex8.ONE.tanh();
      Complex.valueOf(1.3407295326570417E-236);
      complex6.NaN.getArgument();
      complex4.INF.exp();
      complex0.add(complex4);
      complex1.isInfinite();
      complex3.isInfinite();
      Complex complex9 = complex5.multiply(7);
      Complex complex10 = complex2.divide((double) 7);
      complex2.pow(complex3);
      complex9.I.conjugate();
      complex7.divide((-1054.448804));
      complex4.NaN.divide(0.0);
      Complex complex11 = complex5.exp();
      complex9.sin();
      complex4.subtract(complex11);
      complex0.pow(complex1);
      complex9.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.NaN.subtract((-1.0));
      Complex complex3 = Complex.valueOf((-1136.3990281461));
      Complex complex4 = complex2.ONE.subtract(770.329052);
      complex4.ZERO.toString();
      complex0.hashCode();
      Complex complex5 = complex1.INF.conjugate();
      complex5.NaN.abs();
      complex5.getField();
      complex2.NaN.getArgument();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.NaN.pow(complex2);
      complex1.pow(564.9140316740693);
      complex1.isNaN();
      complex0.atan();
      complex6.divide(complex3);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.subtract(1078.765221);
      complex1.ONE.hashCode();
      complex0.ZERO.pow(complex1);
      complex0.isInfinite();
      Complex complex3 = complex1.conjugate();
      complex2.add(complex3);
      complex3.isInfinite();
      complex2.subtract(641.3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.multiply((-5.156097914033476E-8));
      complex0.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.cosh();
      complex0.readResolve();
      complex1.getReal();
      Complex complex3 = complex0.tanh();
      complex0.asin();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.798489141298457E-208);
      complex0.add(complex1);
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = Complex.ONE;
      complex3.add((-973.1));
      complex0.divide(complex3);
      complex2.reciprocal();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 748.0436583);
      complex0.INF.add(complex1);
      complex0.isNaN();
      Complex.valueOf(3348.28);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1486.595007);
      int int0 = (-167);
      try { 
        complex0.ONE.nthRoot((-167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -167
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.ONE.getArgument();
      Complex complex1 = complex0.NaN.add((-321.226));
      Complex complex2 = complex1.cos();
      complex2.ONE.hashCode();
      complex1.I.abs();
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.ZERO.abs();
      complex0.I.atan();
      complex0.hashCode();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = Complex.valueOf((-359.8469), (-321.226));
      complex5.ZERO.abs();
      Complex complex7 = complex6.ONE.cos();
      complex7.INF.atan();
      complex3.INF.multiply((-321.226));
      complex5.ONE.acos();
      complex2.nthRoot(1);
      Complex complex8 = Complex.valueOf(1.0, (-321.226));
      complex0.multiply(1);
      complex3.acos();
      complex2.toString();
      complex6.add(complex2);
      complex0.getField();
      complex0.subtract(0.0);
      complex1.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex((-2765.6343104));
      Complex complex1 = new Complex((-2765.6343104));
      Complex complex2 = complex1.I.cos();
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ONE.sqrt();
      complex4.add(complex1);
      Complex complex6 = complex4.ONE.add(complex1);
      Complex complex7 = complex0.cos();
      complex1.subtract((-2765.6343104));
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.divide(7.64416021682279E-9);
      complex7.ONE.asin();
      Complex complex10 = complex7.tanh();
      complex7.readResolve();
      complex3.getArgument();
      Complex complex11 = Complex.INF;
      complex8.I.subtract(complex11);
      Complex complex12 = complex5.add(complex11);
      complex10.hashCode();
      complex12.INF.pow(0.0);
      complex8.sqrt1z();
      Complex complex13 = complex6.add(7.64416021682279E-9);
      complex13.multiply(887);
      complex5.subtract(complex13);
      complex6.sqrt();
      complex12.tanh();
      complex11.add(complex9);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(2.1128692626953125, 0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.tanh();
      complex0.ZERO.divide(0.0);
      complex2.ZERO.sqrt();
      complex0.ZERO.pow(0.0);
      complex2.ZERO.sinh();
      Complex complex3 = complex1.I.tanh();
      complex3.ONE.tan();
      complex1.readResolve();
      complex3.ONE.getArgument();
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.pow(complex1);
      complex3.ONE.readResolve();
      Complex complex7 = complex0.sqrt1z();
      complex7.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.getArgument();
      complex2.exp();
      complex6.multiply(complex3);
      Complex.valueOf(0.0);
      complex5.abs();
      Complex.valueOf(7.89187408872514E284, 88.7144181551431);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      String string0 = complex0.INF.toString();
      assertNotNull(string0);
      assertEquals("(Infinity, Infinity)", string0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73));
      assertNotNull(complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-4.1900132227036916E-73), complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.reciprocal();
      assertNotNull(complex2);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals((-2.3866273132062565E72), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.cosh();
      assertNotNull(complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      
      Complex complex4 = complex3.I.divide((-4.1900132227036916E-73));
      assertNotNull(complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals((-2.3866273132062565E72), complex4.getImaginary(), 0.01);
      
      List<Complex> list0 = complex4.ZERO.nthRoot(1182);
      assertNotNull(list0);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(list0.contains(complex0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals((-2.3866273132062565E72), complex4.getImaginary(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(1182, list0.size());
      
      Complex complex5 = complex3.acos();
      assertNotNull(complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      
      Complex complex6 = complex1.sinh();
      assertNotNull(complex6);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-4.1900132227036916E-73), complex1.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals((-4.1900132227036916E-73), complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      String string1 = complex2.toString();
      assertNotNull(string1);
      assertEquals("(-2.3866273132062565E72, -0.0)", string1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals((-2.3866273132062565E72), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex7 = complex2.acos();
      assertNotNull(complex7);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals((-2.3866273132062565E72), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals((-167.3491550794197), complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex7.I.pow(complex2);
      assertNotNull(complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals((-2.3866273132062565E72), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals((-167.3491550794197), complex7.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals((-0.1167141345268302), complex8.getReal(), 0.01);
      assertEquals(0.9931655505511924, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      
      Complex complex9 = complex8.NaN.asin();
      assertNotNull(complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertTrue(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-4.1900132227036916E-73), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals((-2.3866273132062565E72), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals((-167.3491550794197), complex7.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals((-0.1167141345268302), complex8.getReal(), 0.01);
      assertEquals(0.9931655505511924, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertTrue(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      
      Complex complex10 = complex1.multiply(1452);
      assertNotNull(complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-4.1900132227036916E-73), complex1.getReal(), 0.01);
      assertEquals((-6.08389919936576E-70), complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(1324.3283, 1.6649010181427002);
      assertNotNull(complex0);
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.ONE.multiply(1);
      assertNotNull(complex1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.ZERO.pow((-1039.25052));
      assertNotNull(complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      
      Complex complex3 = complex0.pow(1324.3283);
      assertNotNull(complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      
      ComplexField complexField0 = complex3.NaN.getField();
      assertNotNull(complexField0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.conjugate();
      assertNotNull(complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1324.3283, complex4.getReal(), 0.01);
      assertEquals((-1.6649010181427002), complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      
      Complex complex5 = complex0.divide((-441.376618));
      assertNotNull(complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.003772064378232877), complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals((-3.000449606961282), complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.tanh();
      assertNotNull(complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex1));
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      boolean boolean0 = complex1.isNaN();
      assertFalse(boolean0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex6));
      assertEquals(1324.3283, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.6649010181427002, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.619992971420288);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.conjugate();
      complex1.NaN.add(complex2);
      List<Complex> list0 = complex2.ZERO.nthRoot(2250);
      assertFalse(list0.contains(complex1));
      assertEquals(2250, list0.size());
      
      Complex.valueOf((-855.3), 20.0);
      Complex complex3 = complex1.add(20.0);
      Complex complex4 = complex3.add((-855.3));
      double double0 = complex2.getReal();
      assertEquals(1.619992971420288, double0, 0.01);
      
      Complex complex5 = complex4.negate();
      Complex complex6 = complex3.multiply(complex0);
      Complex complex7 = complex6.ONE.acos();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = complex8.tan();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex3, complex1);
      assertSame(complex9, complex5);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-3441.06424566973), (-3441.06424566973));
      complex0.getArgument();
      Complex complex1 = complex0.NaN.sqrt();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      assertTrue(list0.contains(complex1));
      
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.reciprocal();
      assertEquals((-0.009245519426299446), complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.pow(0.0);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.readResolve();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      double double0 = complex1.NaN.abs();
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex3 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex3);
      assertTrue(boolean0);
      assertTrue(complex3.isInfinite());
      
      Complex complex4 = Complex.valueOf((-3.286964881802063E-8), (-3.286964881802063E-8));
      Complex complex5 = complex4.ZERO.divide(1777.5837078289);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-3.286964881802063E-8), complex4.getImaginary(), 0.01);
      assertFalse(complex5.equals((Object)complex2));
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals((-3.286964881802063E-8), complex4.getReal(), 0.01);
      
      double double1 = complex0.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 2493.30425573962;
      Complex complex0 = Complex.valueOf(2493.30425573962, 2493.30425573962);
      Complex complex1 = null;
      Complex complex2 = complex0.NaN.cosh();
      complex2.ONE.sin();
      complex2.reciprocal();
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(4414.73925);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.ZERO.add((-1.0));
      complex0.ZERO.hashCode();
      complex3.ONE.pow(complex2);
      complex3.INF.reciprocal();
      complex1.isInfinite();
      Complex complex4 = complex0.multiply(4414.73925);
      Complex complex5 = complex4.ZERO.conjugate();
      complex2.toString();
      complex4.negate();
      complex4.pow((-1804.63460481));
      int int0 = 0;
      try { 
        complex5.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4113.5));
      complex0.log();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.ONE.asin();
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      String string0 = complex1.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex4 = complex0.pow(complex1);
      assertEquals(5.037584608292635E-13, complex4.getImaginary(), 0.01);
      assertEquals((-4113.499999999998), complex4.getReal(), 0.01);
      
      complex0.getField();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.tanh();
      complex2.INF.subtract(815.5);
      complex1.INF.cos();
      Complex complex3 = complex0.subtract(4.8182788286170926E89);
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex4.INF.createComplex(996.07956453801, 996.07956453801);
      Complex complex5 = complex3.add(4.8182788286170926E89);
      Complex complex6 = complex5.I.pow(4.8182788286170926E89);
      complex5.NaN.exp();
      double double0 = complex6.INF.abs();
      assertFalse(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.9875572297430439, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex5.subtract(complex3);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.exp();
      assertSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertSame(complex1, complex4);
  }
}
