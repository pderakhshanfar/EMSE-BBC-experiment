/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:50:22 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((double) 3122, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1682026251371384E-8, 3.5306502960727705E247);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.add(1.1682026251371384E-8);
      Complex complex4 = complex3.ZERO.asin();
      complex0.NaN.subtract(complex2);
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex4.ONE.multiply(1.1682026251371384E-8);
      Complex complex7 = complex2.NaN.multiply(complex0);
      complex7.NaN.exp();
      complex3.ONE.multiply(complex0);
      Complex complex8 = complex3.sqrt1z();
      complex1.ZERO.abs();
      complex2.NaN.abs();
      complex1.log();
      Complex complex9 = complex1.multiply(complex8);
      complex9.ONE.reciprocal();
      complex2.conjugate();
      complex2.cosh();
      Complex complex10 = complex1.sqrt();
      Complex.valueOf(Double.NaN, 4.734855270704757E-4);
      complex10.I.multiply(3.5306502960727705E247);
      complex1.pow(complex6);
      complex5.log();
      complex2.createComplex(Double.NaN, 1.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 2787.0340925);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.add(3597945.8671997264);
      complex3.I.add(0.0);
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex2.sinh();
      complex5.sinh();
      Complex complex6 = complex5.multiply(1155);
      Complex complex7 = Complex.ONE;
      complex7.divide(complex6);
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex1.negate();
      complex2.acos();
      Complex complex3 = complex2.tan();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.multiply((-1071));
      complex3.cosh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.negate();
      Complex complex6 = complex2.log();
      Complex.valueOf(1.189509202959016E-5, (-2045.0));
      complex5.hashCode();
      complex5.getField();
      Complex complex7 = Complex.ONE;
      complex5.abs();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.multiply(61.3137);
      complex3.nthRoot(2020);
      Complex complex10 = Complex.INF;
      complex10.sqrt1z();
      complex9.asin();
      Complex complex11 = new Complex(3.9904382022898837E-56, 1568.0);
      complex6.multiply(complex9);
      complex8.divide(1.285159987981792E19);
      Complex.valueOf((double) (-1071), 3.9904382022898837E-56);
      complex0.asin();
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, 20.0);
      complex0.multiply(20.0);
      complex1.sqrt();
      Complex complex2 = new Complex((-1132.289235326), 20.0);
      Complex.valueOf(1942.3095328980794);
      Complex complex3 = Complex.I;
      complex3.isInfinite();
      complex1.tan();
      complex0.multiply((-1785.322415031735));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-298.6372252));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      Complex complex3 = new Complex((-298.6372252), Double.POSITIVE_INFINITY);
      complex2.tanh();
      complex1.ONE.getArgument();
      complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(20.0, (-4012344.5110560004));
      Complex complex7 = Complex.valueOf(2337.0);
      complex4.acos();
      complex2.isInfinite();
      Complex complex8 = complex1.tan();
      complex5.abs();
      complex8.conjugate();
      complex7.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((double) (-2036459809));
      Complex complex2 = complex1.sqrt();
      complex2.multiply((-2036459809));
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-5.156097914033476E-8));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.createComplex((-4.608112855795952E276), (-5.156097914033476E-8));
      complex2.atan();
      complex0.getReal();
      complex3.tanh();
      Complex complex4 = Complex.INF;
      complex4.asin();
      complex4.cosh();
      Complex complex5 = Complex.valueOf(3321.314);
      Complex complex6 = Complex.INF;
      complex6.negate();
      Complex complex7 = Complex.INF;
      complex4.isNaN();
      complex3.acos();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73), (-4.1900132227036916E-73));
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.isInfinite();
      Complex.valueOf(20.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = new Complex(0.9601956320572334, 226.05128879);
      Complex complex5 = Complex.valueOf(6.283185307179586);
      Complex complex6 = Complex.NaN;
      complex6.isInfinite();
      complex6.tan();
      complex5.toString();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      complex0.ONE.reciprocal();
      Complex complex1 = new Complex(8422459.871012, (-2602.0));
      Complex.valueOf((-2602.0));
      complex0.multiply((-2324.3));
      complex0.isInfinite();
      Complex complex2 = Complex.valueOf(115.33003724);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = new Complex((-2630.86750732744), (-2324.3));
      complex2.NaN.sin();
      Complex complex5 = Complex.valueOf(226.05128879);
      complex4.acos();
      complex3.isInfinite();
      complex2.tan();
      complex5.toString();
      complex0.abs();
      complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.valueOf(0.9166666666666666);
      complex0.getReal();
      complex0.toString();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.createComplex((-2324.3), 3321.314);
      Complex complex4 = complex3.atan();
      complex4.getReal();
      complex4.tanh();
      complex1.asin();
      complex1.cosh();
      Complex complex5 = Complex.valueOf((-2324.3));
      complex2.cosh();
      Complex complex6 = complex3.negate();
      Complex complex7 = Complex.INF;
      complex1.isNaN();
      complex6.acos();
      complex5.abs();
      complex1.createComplex((-1.5706548900663375), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      complex1.NaN.abs();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.equals(complex3);
      complex0.toString();
      complex0.divide(Double.NaN);
      complex3.divide(Double.NaN);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.multiply(1217);
      Complex complex1 = Complex.ZERO;
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, (-4572.1968409));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tan();
      complex2.getReal();
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.ONE;
      complex6.asin();
      complex4.cosh();
      Complex.valueOf(6.283185307179586);
      Complex.valueOf(0.46608972549438477, 721.92);
      complex3.cosh();
      complex5.negate();
      Complex complex7 = Complex.INF;
      complex0.isNaN();
      complex5.acos();
      Complex complex8 = new Complex(2682.109616022944);
      complex8.asin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      complex1.NaN.abs();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.equals(complex3);
      Complex complex4 = Complex.ZERO;
      complex2.reciprocal();
      complex3.pow(complex4);
      Complex.valueOf(479.43307176, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(733.559700081333, (-4.1900132227036916E-73));
      Complex complex1 = complex0.tanh();
      complex1.ONE.getField();
      Complex complex2 = complex0.conjugate();
      complex2.abs();
      complex0.readResolve();
      complex0.equals(complex2);
      Complex.valueOf((-4.1900132227036916E-73), 0.0);
      Complex complex3 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      complex1.NaN.abs();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = new Complex(3052.0, Double.NaN);
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.valueOf((-2324.3));
      Complex complex6 = Complex.INF;
      complex6.acos();
      complex6.isInfinite();
      complex1.tan();
      complex4.toString();
      Complex complex7 = Complex.valueOf(Double.NaN);
      Complex complex8 = Complex.ONE;
      complex7.pow(complex8);
      complex3.sinh();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      complex1.getField();
      Complex complex2 = Complex.valueOf(0.9166666666666666);
      complex0.getReal();
      complex0.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.toString();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      complex3.multiply(1197);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.NaN.abs();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.equals(complex2);
      Complex complex3 = new Complex(Double.NaN, (-3.286964881802063E-8));
      Complex complex4 = Complex.valueOf((-3765.522547022577));
      complex2.acos();
      complex3.isInfinite();
      complex4.tan();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-5.156097914033476E-8));
      complex0.getField();
      complex0.getReal();
      complex1.tanh();
      Complex.valueOf(Double.NaN, (-20.0));
      complex0.toString();
      Complex.valueOf(3572.52, 4172.111516);
      complex1.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex.valueOf((-4.1900132227036916E-73));
      Complex complex0 = Complex.valueOf(2.0);
      complex0.getReal();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.createComplex((-3344.5201534160465), 66.8034);
      complex1.cosh();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.valueOf((-3344.5201534160465), Double.POSITIVE_INFINITY);
      complex2.cosh();
      complex4.negate();
      Complex complex6 = Complex.INF;
      complex4.isNaN();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex6.asin();
      complex7.reciprocal();
      complex8.negate();
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, (-4572.1968409));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tan();
      Complex complex5 = new Complex((-4572.1968409));
      Complex complex6 = Complex.valueOf(1379.4267211084752);
      complex0.isInfinite();
      complex3.NaN.reciprocal();
      complex0.sqrt();
      complex0.exp();
      complex6.acos();
      complex4.isInfinite();
      complex4.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.conjugate();
      complex2.abs();
      complex0.readResolve();
      complex0.equals(complex2);
      Complex.valueOf((-3.286964881802063E-8), 2003.9181639665);
      Complex complex3 = Complex.INF;
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex0.ONE.conjugate();
      complex1.NaN.abs();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex2 = Complex.valueOf((-3.286964881802063E-8), (-3.286964881802063E-8));
      Complex complex3 = Complex.INF;
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.1900132227036916E-73));
      complex0.INF.toString();
      Complex complex1 = new Complex((-4.1900132227036916E-73), (-4.1900132227036916E-73));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.ZERO;
      complex2.sin();
      Complex complex4 = complex0.exp();
      complex0.I.sinh();
      complex4.divide(2263.30605901);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      complex2.ZERO.getField();
      complex1.NaN.abs();
      Complex complex3 = (Complex)complex0.readResolve();
      complex1.NaN.divide(complex0);
      complex0.nthRoot(362);
      Complex complex4 = Complex.ONE;
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, (-4572.1968409));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tan();
      complex0.negate();
      Complex complex5 = complex1.multiply(1379.4267211084752);
      complex4.isInfinite();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = new Complex(2263.30605901, Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.exp();
      Complex complex9 = Complex.valueOf(0.9999999999999973);
      Complex complex10 = Complex.I;
      complex10.acos();
      complex8.isInfinite();
      Complex complex11 = complex9.tan();
      complex11.ZERO.sinh();
      complex6.toString();
      complex9.sinh();
      Complex complex12 = complex4.tan();
      complex12.createComplex(1379.4267211084752, (-4572.1968409));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3384.3422));
      complex0.I.cos();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-5.156097914033476E-8));
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf((-5.156097914033476E-8), (-777.885070326));
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex1.cosh();
      complex4.tan();
      Complex complex6 = Complex.valueOf((-5.156097914033476E-8), (-5.156097914033476E-8));
      complex3.negate();
      Complex complex7 = complex6.tanh();
      Complex complex8 = Complex.I;
      complex8.multiply((-5.156097914033476E-8));
      complex5.isInfinite();
      complex7.sqrt();
      Complex complex9 = new Complex((-2003.084), (-777.885070326));
      complex4.exp();
      Complex complex10 = Complex.valueOf((-1251.1582));
      Complex complex11 = complex4.acos();
      complex0.isInfinite();
      complex11.tan();
      complex10.toString();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex1 = Complex.ONE;
      complex1.sqrt();
      int int0 = 11170720;
      // Undeclared exception!
      complex0.nthRoot(11170720);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.toString();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.tanh();
      complex0.exp();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.sinh();
      complex3.toString();
      Complex complex5 = new Complex(2066.30278471848, 2066.30278471848);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex2.pow(complex5);
      complex6.asin();
      complex4.tan();
      Complex complex8 = complex7.cos();
      complex8.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1966.1813895), (-637.1477182677));
      complex0.add((-1966.1813895));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.toString();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.cosh();
      complex2.divide(1805.3959839305);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.sinh();
      complex4.toString();
      Complex complex5 = complex0.acos();
      complex5.ZERO.add(complex0);
      Complex complex6 = Complex.I;
      complex6.pow(complex2);
      complex4.asin();
      Complex complex7 = Complex.valueOf(1805.3959839305, 1805.3959839305);
      complex7.tan();
      complex0.cos();
      Complex complex8 = Complex.valueOf(1319.2570397);
      complex8.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.divide((-4.1900132227036916E-73));
      complex4.acos();
      complex1.sinh();
      complex2.toString();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.I.pow(complex2);
      Complex complex7 = complex6.NaN.asin();
      complex6.asin();
      complex2.INF.abs();
      Complex complex8 = complex5.tan();
      complex1.cos();
      complex7.subtract(complex8);
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      Complex.valueOf((-4.1900132227036916E-73));
      complex0.reciprocal();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.divide((-4.1900132227036916E-73));
      Complex complex3 = Complex.valueOf((-4.1900132227036916E-73));
      complex3.cosh();
      Complex complex4 = complex2.sqrt();
      Complex.valueOf((-1088.87), (-4.1900132227036916E-73));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.cosh();
      Complex complex7 = new Complex(629.804, (-4.1900132227036916E-73));
      complex7.negate();
      Complex complex8 = Complex.INF;
      complex3.reciprocal();
      complex5.isNaN();
      complex6.acos();
      Complex complex9 = complex7.asin();
      complex9.multiply(complex4);
      Complex complex10 = Complex.INF;
      Complex.valueOf(762.69148415903, (-804.862));
      Object object0 = complex2.readResolve();
      complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.createComplex((-2324.3), 3321.314);
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf((-3344.5201534160465));
      Complex.valueOf((-3344.5201534160465), 3321.314);
      Complex complex7 = complex4.negate();
      complex5.tanh();
      complex6.multiply((-2818.189265377));
      complex2.isInfinite();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = new Complex((-1680.0), (-2003.084));
      complex7.exp();
      Complex complex10 = Complex.valueOf((-2818.189265377));
      Complex complex11 = complex10.acos();
      complex8.isInfinite();
      complex9.tan();
      complex11.toString();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply((-5.156097914033476E-8));
      Complex complex2 = complex1.createComplex((-5.156097914033476E-8), (-5.156097914033476E-8));
      complex0.sqrt();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.valueOf((-932.52734));
      complex2.tanh();
      complex1.isInfinite();
      complex5.sqrt();
      Complex complex7 = complex6.exp();
      complex1.acos();
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.ONE;
      complex9.isInfinite();
      complex8.tan();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, (-4572.1968409));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.tan();
      complex4.log();
      complex0.negate();
      Complex complex5 = Complex.valueOf(1379.4267211084752);
      complex5.tanh();
      complex0.isInfinite();
      complex0.sqrt();
      complex0.exp();
      Complex complex6 = Complex.INF;
      complex2.getField();
      Complex.valueOf(3.624694650170568E-4, 9.46452492584643E-8);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      complex1.divide(0.0);
      complex1.ONE.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex1.subtract(0.0);
      complex4.subtract(1306.656);
      complex0.getField();
      Complex complex5 = complex3.tan();
      Complex complex6 = Complex.I;
      complex0.divide(complex2);
      Complex complex7 = complex5.subtract(complex2);
      complex6.sqrt1z();
      Complex complex8 = new Complex((-2128.93870887226));
      complex7.divide(complex4);
      complex7.sqrt1z();
      Complex complex9 = Complex.INF;
      Complex complex10 = Complex.valueOf((-20.0));
      complex10.tanh();
      Complex complex11 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(4.744571892885607E94);
      complex1.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.createComplex(2867.21305388653, 4.744571892885607E94);
      Complex complex6 = complex3.atan();
      Complex complex7 = Complex.valueOf((-2504.0848843755));
      complex3.getReal();
      complex1.tanh();
      complex2.asin();
      complex5.cosh();
      Complex complex8 = Complex.ONE;
      complex8.sqrt();
      Complex.valueOf(2.0, 20.0);
      complex0.cosh();
      Complex complex9 = complex6.negate();
      complex4.subtract(complex9);
      Complex complex10 = Complex.valueOf(3321.314);
      complex10.sqrt1z();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.INF;
      complex12.divide(complex6);
      complex1.sqrt1z();
      Complex complex13 = Complex.INF;
      complex7.tanh();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      complex0.ONE.reciprocal();
      Complex complex1 = complex0.INF.negate();
      complex1.exp();
      Complex complex2 = new Complex(7.523374196797555E105, (-848.5671773687));
      complex1.subtract(0.0);
      complex0.multiply((-2324.3));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      complex1.divide(0.0);
      complex1.ONE.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.NaN;
      complex3.cosh();
      complex3.divide((-879.0));
      int int0 = 0;
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.atan();
      complex3.subtract((-4.1900132227036916E-73));
      Complex complex4 = complex1.subtract(109.780655448318);
      complex4.getField();
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex3.divide(complex2);
      complex3.reciprocal();
      complex1.isNaN();
      complex7.acos();
      complex1.asin();
      complex5.multiply(complex4);
      complex2.equals("");
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex2 = complex0.createComplex((-1640.0674977), (-4.1900132227036916E-73));
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex5 = Complex.valueOf(401.23, 1013.702522);
      complex5.getReal();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.cosh();
      complex4.sqrt();
      Complex complex9 = Complex.valueOf((-1640.0674977), 4113.5);
      complex1.cosh();
      complex4.negate();
      complex6.subtract(complex9);
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = new Complex((-2034.8146040638));
      complex10.divide(complex4);
      complex8.sqrt1z();
      Complex complex12 = Complex.INF;
      complex4.tanh();
      complex2.conjugate();
      complex6.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 2787.0340925);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex4.multiply(1155);
      Complex complex7 = Complex.ONE;
      complex7.createComplex(3176.3629, 2787.0340925);
      complex5.conjugate();
      complex7.divide(complex6);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.sqrt1z();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.add(Double.NaN);
      Complex complex3 = complex2.divide(complex1);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.createComplex((-2324.3), 3321.314);
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf((-3344.5201534160465));
      complex5.getReal();
      complex5.tanh();
      Complex complex7 = complex2.asin();
      complex6.cosh();
      complex6.sqrt();
      Complex.valueOf(629.804, 2.0);
      Complex complex8 = complex3.cosh();
      complex4.negate();
      complex1.subtract(complex8);
      complex7.sqrt1z();
      Complex complex9 = new Complex((-2324.3));
      complex9.divide(complex1);
      complex6.sqrt1z();
      Complex complex10 = Complex.INF;
      complex10.tanh();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.798489141298457E-208);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.INF;
      complex5.subtract(1.798489141298457E-208);
      Complex complex6 = complex4.subtract(1.798489141298457E-208);
      complex5.getField();
      complex4.tan();
      Complex complex7 = complex2.tan();
      Complex complex8 = Complex.INF;
      complex8.divide(complex7);
      complex6.reciprocal();
      complex4.isNaN();
      Complex complex9 = complex5.acos();
      complex9.asin();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      complex1.divide(0.0);
      complex1.ONE.toString();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex4.subtract(1306.656);
      complex0.getField();
      Complex complex6 = complex3.tan();
      Complex complex7 = Complex.I;
      complex0.divide(complex2);
      complex6.reciprocal();
      complex5.isNaN();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex8.ONE.asin();
      complex9.ONE.multiply(complex7);
      complex3.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1415.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf(0.15643446504076622);
      complex2.divide(complex3);
      Complex complex5 = new Complex(1058.462296846446, 1058.462296846446);
      complex5.tanh();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex5.tanh();
      complex6.createComplex((-4.1900132227036916E-73), 2437.242254400354);
      complex1.cos();
      Complex complex8 = Complex.valueOf(0.5, 1058.462296846446);
      Complex complex9 = complex8.tan();
      complex7.negate();
      complex9.tanh();
      complex8.isInfinite();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.sqrt();
      complex11.exp();
      complex0.acos();
      complex2.isInfinite();
      complex11.tan();
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.I.pow((-4920.9));
      complex3.pow(complex0);
      complex3.I.tan();
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = Complex.INF;
      complex5.INF.getField();
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex0.reciprocal();
      complex7.NaN.sinh();
      complex6.sinh();
      Complex complex8 = complex4.multiply(0);
      Complex complex9 = complex8.INF.createComplex(0, (-4920.9));
      complex6.conjugate();
      complex5.divide(complex2);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(865.47200757548);
      Complex complex1 = complex0.I.atan();
      complex0.NaN.abs();
      Complex complex2 = complex1.I.multiply(865.47200757548);
      complex2.ZERO.add(complex1);
      complex0.abs();
      Complex complex3 = complex0.cosh();
      complex0.I.tanh();
      Complex complex4 = complex0.I.tan();
      complex4.NaN.sqrt();
      Complex complex5 = complex0.I.multiply(1182.9);
      complex3.NaN.atan();
      complex5.I.createComplex(0.0, 865.47200757548);
      complex3.I.sqrt();
      complex1.pow(865.47200757548);
      complex0.sqrt();
      Complex.valueOf(865.47200757548, 1182.9);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2324.3));
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex0.INF.negate();
      complex2.exp();
      Complex complex3 = Complex.valueOf((-2324.3));
      Complex complex4 = complex3.I.divide(complex1);
      Complex complex5 = complex4.NaN.tanh();
      complex1.I.sqrt1z();
      complex2.NaN.tanh();
      Complex complex6 = complex0.createComplex((-2324.3), (-4572.1968409));
      Complex complex7 = complex6.sqrt();
      complex5.cos();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.ZERO.negate();
      complex6.tanh();
      complex0.isInfinite();
      complex9.sqrt();
      complex0.exp();
      complex5.acos();
      complex3.isInfinite();
      complex8.tan();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.asin();
      complex1.INF.tan();
      complex0.toString();
      complex0.getField();
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      Complex complex1 = complex0.multiply((-3671.412298696052));
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex0.INF.multiply(complex2);
      complex0.multiply(0.0);
      complex3.INF.sqrt();
      Complex complex5 = Complex.valueOf(0.0, (-59.98463422096739));
      complex3.I.subtract((-3671.412298696052));
      Complex complex6 = Complex.valueOf((-1829.872190223671), (-3671.412298696052));
      Complex complex7 = complex6.ONE.pow(complex4);
      Complex complex8 = complex4.reciprocal();
      complex8.pow(complex4);
      complex0.I.abs();
      Complex complex9 = complex3.sqrt1z();
      complex3.divide((-3671.412298696052));
      Complex complex10 = complex9.ZERO.atan();
      complex5.getImaginary();
      complex0.sin();
      complex2.acos();
      complex9.I.subtract((-59.98463422096739));
      Complex complex11 = complex6.multiply(7);
      complex11.toString();
      complex6.toString();
      complex5.getImaginary();
      complex9.conjugate();
      complex7.add(complex11);
      complex10.divide((-59.98463422096739));
      complex6.subtract(complex1);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.ONE.add(complex0);
      Complex complex3 = complex0.sinh();
      complex3.toString();
      Complex complex4 = complex0.I.tanh();
      complex4.I.reciprocal();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = Complex.valueOf(20.0, 20.0);
      complex1.hashCode();
      complex6.pow(complex3);
      Complex complex7 = complex2.multiply((-190));
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex5.cos();
      complex8.ZERO.abs();
      complex9.divide(1600.453279);
      Complex complex10 = complex8.add(complex2);
      Complex complex11 = complex8.ZERO.cosh();
      complex10.ONE.negate();
      Complex.valueOf((-839.27775705), (-1332.803844647455));
      complex10.NaN.getField();
      complex2.toString();
      Complex complex12 = complex7.tan();
      Complex complex13 = complex12.asin();
      complex6.abs();
      Complex complex14 = complex2.sqrt();
      complex14.INF.getArgument();
      complex6.getReal();
      complex1.getArgument();
      Complex complex15 = complex13.subtract(0.17922431230545044);
      complex1.getImaginary();
      complex11.tanh();
      complex15.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.asin();
      complex2.I.cos();
      Complex complex4 = complex0.createComplex(2389.375, 2389.375);
      complex4.INF.add(2389.375);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.valueOf(2389.375, 2389.375);
      Complex complex7 = complex5.ZERO.conjugate();
      Complex complex8 = complex7.I.add(2389.375);
      complex1.asin();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex2.log();
      complex6.cos();
      complex9.getArgument();
      Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex4.sin();
      complex11.I.cos();
      Complex.valueOf(0.0);
      complex10.readResolve();
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.multiply(complex8);
      Complex.valueOf(2389.375);
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-689.69683221), (-689.69683221));
      Complex.valueOf(1.0);
      complex0.NaN.nthRoot(1214);
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex0.subtract(complex1);
      complex1.INF.exp();
      Complex complex4 = Complex.valueOf((-2146.65131504252), (-2146.65131504252));
      complex4.ONE.atan();
      complex3.getReal();
      complex3.log();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3226.879497395));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex2.ONE.acos();
      complex2.ZERO.cosh();
      Complex complex3 = Complex.valueOf((-3226.879497395), (-999.219115943936));
      complex3.I.multiply(0);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.INF.divide((-999.219115943936));
      complex5.INF.divide(7.6);
      complex3.getReal();
      complex3.readResolve();
      complex0.sqrt1z();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1675.661176), (-2010.5047997974168));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex1.ONE.sinh();
      complex1.getArgument();
      Complex complex4 = complex0.reciprocal();
      complex4.readResolve();
      Complex complex5 = complex1.INF.tanh();
      complex5.ONE.sqrt1z();
      complex4.NaN.hashCode();
      Complex complex6 = complex0.acos();
      complex2.isInfinite();
      complex3.subtract(complex0);
      Complex complex7 = complex6.I.add(complex0);
      complex0.getArgument();
      complex7.ZERO.negate();
      complex6.exp();
      complex4.isNaN();
      complex6.readResolve();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(0.0);
      Complex complex3 = complex1.atan();
      complex3.ONE.toString();
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex1.subtract(0.0);
      Complex complex7 = complex6.subtract(1306.656);
      complex0.getField();
      Complex complex8 = complex5.tan();
      complex0.tan();
      complex0.divide(complex4);
      complex8.reciprocal();
      complex7.isNaN();
      Complex complex9 = complex6.acos();
      complex9.ONE.asin();
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.592721454922832E-15);
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.tanh();
      complex0.ZERO.negate();
      Complex complex3 = complex0.createComplex(0.0, 2.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.asin();
      complex0.INF.getField();
      complex5.ONE.getField();
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.I.log();
      complex7.NaN.createComplex(0.0, 2.0);
      Complex complex8 = complex7.ONE.add(2.592721454922832E-15);
      complex8.INF.tanh();
      complex6.ONE.asin();
      Complex complex9 = complex3.divide(2.0);
      complex9.I.exp();
      complex1.ZERO.nthRoot(493);
      Complex complex10 = complex1.cosh();
      complex10.NaN.pow(2.592721454922832E-15);
      complex10.ONE.conjugate();
      Complex complex11 = complex1.createComplex(2438.6988652292775, 2.592721454922832E-15);
      complex11.NaN.hashCode();
      complex4.subtract(complex0);
      complex3.getArgument();
      Complex complex12 = complex0.log();
      complex12.sinh();
      complex1.getArgument();
      complex9.subtract(1425.1534483);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(2750.985315365432);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.tanh();
      complex1.INF.pow(0.0);
      Complex complex6 = complex5.ONE.multiply(2750.985315365432);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.I.exp();
      complex7.NaN.pow(complex2);
      complex5.pow(2750.985315365432);
      Complex complex9 = complex4.sin();
      complex9.NaN.abs();
      Complex complex10 = complex9.cosh();
      complex10.toString();
      Complex complex11 = complex3.add(168.4344410449);
      Complex complex12 = Complex.valueOf(168.4344410449, 2750.985315365432);
      Complex complex13 = complex12.ZERO.subtract(Double.NaN);
      complex11.tan();
      Complex complex14 = complex6.multiply(complex13);
      complex13.ONE.multiply(complex5);
      complex3.add(4652.372034280361);
      Complex complex15 = complex2.cosh();
      complex15.I.multiply(complex8);
      complex5.pow(complex10);
      complex4.add(complex8);
      complex14.getField();
      complex2.reciprocal();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.ONE.sqrt();
      complex2.I.subtract(0.0);
      complex2.ZERO.toString();
      complex3.ZERO.atan();
      complex1.readResolve();
      complex2.equals(complex1);
      Complex complex4 = complex1.ONE.reciprocal();
      complex1.nthRoot(455);
      complex2.isInfinite();
      complex3.conjugate();
      complex1.getArgument();
      complex4.equals(complex3);
      complex4.pow((-1158.0));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3017010688781738, 1331.3508);
      complex0.getReal();
      Complex complex1 = complex0.cosh();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.multiply((-1993));
      Complex complex2 = complex0.tan();
      complex2.I.abs();
      Complex complex3 = complex1.ONE.createComplex((-1993), (-3473.17915907818));
      complex3.INF.atan();
      Complex complex4 = Complex.valueOf(2.0);
      complex0.getReal();
      complex0.tanh();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.I.cosh();
      complex6.getArgument();
      complex5.sqrt();
      Complex complex7 = Complex.valueOf((-4213.53058289443), 0.0);
      Complex complex8 = complex7.ZERO.cosh();
      Complex complex9 = complex6.NaN.negate();
      complex0.ONE.subtract(complex9);
      Complex complex10 = complex1.sqrt1z();
      complex10.divide(complex6);
      complex4.sqrt1z();
      complex8.tanh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.multiply(1);
      complex3.ONE.getField();
      Complex complex4 = complex3.ZERO.subtract(2.61726605666378E-211);
      Complex complex5 = complex4.log();
      Complex complex6 = complex5.ZERO.tanh();
      complex0.hashCode();
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex2.cos();
      complex3.readResolve();
      complex0.getReal();
      Complex complex9 = complex8.INF.log();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.ONE.getArgument();
      complex7.pow(Double.POSITIVE_INFINITY);
      complex8.abs();
      complex5.reciprocal();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex6.multiply(0.0);
      complex10.isInfinite();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.INF.subtract(0.5341835021972656);
      Complex complex2 = complex0.NaN.multiply(0.5341835021972656);
      complex2.INF.sqrt1z();
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex1.ONE.sqrt1z();
      complex4.readResolve();
      Complex complex5 = complex4.INF.add(complex2);
      complex1.I.reciprocal();
      complex1.I.abs();
      Complex complex6 = complex2.ZERO.createComplex(0.5341835021972656, Double.NaN);
      complex0.ZERO.readResolve();
      complex0.cos();
      complex1.sqrt1z();
      complex5.divide(0.5341835021972656);
      complex3.tanh();
      complex0.multiply(Double.NaN);
      Object object0 = complex6.readResolve();
      complex5.equals(object0);
      complex4.multiply(0.5341835021972656);
      Complex complex7 = Complex.valueOf(3.0891604448087654E-25, 1.0);
      complex6.sqrt1z();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.createComplex((-1797.81), 2283.3);
      Complex complex2 = complex1.ONE.pow(complex0);
      complex0.I.conjugate();
      Complex complex3 = complex0.I.reciprocal();
      complex3.ZERO.getArgument();
      Complex complex4 = complex3.INF.conjugate();
      complex4.NaN.negate();
      complex4.ZERO.negate();
      Complex complex5 = complex0.pow(1.0);
      complex0.nthRoot(17);
      complex0.hashCode();
      complex1.NaN.pow(complex0);
      complex2.I.divide(1768.1761640407);
      Complex complex6 = complex5.subtract((-1.0));
      complex0.hashCode();
      Complex complex7 = complex6.divide((-1.0));
      complex1.cos();
      complex2.readResolve();
      complex1.toString();
      complex7.multiply(17);
      Complex complex8 = complex0.divide(0.0);
      Complex.valueOf(1768.1761640407);
      Complex complex9 = complex3.sin();
      complex9.ZERO.multiply(complex0);
      complex8.log();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.I.createComplex(6.283185307179586, (-748.9714169166746));
      Complex complex2 = complex1.INF.log();
      Complex complex3 = complex1.createComplex(4996, 0.0);
      Complex complex4 = Complex.valueOf((double) 4996);
      complex4.I.sin();
      complex3.ONE.cos();
      complex1.NaN.abs();
      complex0.nthRoot(4996);
      complex1.asin();
      complex0.conjugate();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.subtract(complex5);
      complex6.exp();
      complex0.pow(complex6);
      Complex.valueOf(0.0);
      Complex complex7 = complex2.log();
      complex7.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-20.0));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.tanh();
      complex3.isInfinite();
      complex2.getField();
      Complex complex6 = complex4.subtract(complex5);
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = Complex.valueOf(1.3407295326570417E-236);
      complex8.ONE.tanh();
      Complex.valueOf(1.3407295326570417E-236);
      complex6.NaN.getArgument();
      complex4.INF.exp();
      complex0.add(complex4);
      complex1.isInfinite();
      complex3.isInfinite();
      Complex complex9 = complex5.multiply(7);
      Complex complex10 = complex2.divide((double) 7);
      complex2.pow(complex3);
      complex9.I.conjugate();
      complex7.divide((-1054.448804));
      complex4.NaN.divide(0.0);
      Complex complex11 = complex5.exp();
      complex9.sin();
      complex4.subtract(complex11);
      complex0.pow(complex1);
      complex9.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 6.283185307179586);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.NaN.subtract((-1.0));
      Complex complex3 = Complex.valueOf((-1136.3990281461));
      Complex complex4 = complex2.ONE.subtract(770.329052);
      complex4.ZERO.toString();
      complex0.hashCode();
      Complex complex5 = complex1.INF.conjugate();
      complex5.NaN.abs();
      complex5.getField();
      complex2.NaN.getArgument();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.NaN.pow(complex2);
      complex1.pow(564.9140316740693);
      complex1.isNaN();
      complex0.atan();
      complex6.divide(complex3);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.subtract(1078.765221);
      complex1.ONE.hashCode();
      complex0.ZERO.pow(complex1);
      complex0.isInfinite();
      Complex complex3 = complex1.conjugate();
      complex2.add(complex3);
      complex3.isInfinite();
      complex2.subtract(641.3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.multiply((-5.156097914033476E-8));
      complex0.getField();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.cosh();
      complex0.readResolve();
      complex1.getReal();
      Complex complex3 = complex0.tanh();
      complex0.asin();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(1.798489141298457E-208);
      complex0.add(complex1);
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = Complex.ONE;
      complex3.add((-973.1));
      complex0.divide(complex3);
      complex2.reciprocal();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 748.0436583);
      complex0.INF.add(complex1);
      complex0.isNaN();
      Complex.valueOf(3348.28);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1486.595007);
      int int0 = (-167);
      try { 
        complex0.ONE.nthRoot((-167));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -167
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.ONE.getArgument();
      Complex complex1 = complex0.NaN.add((-321.226));
      Complex complex2 = complex1.cos();
      complex2.ONE.hashCode();
      complex1.I.abs();
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.ZERO.abs();
      complex0.I.atan();
      complex0.hashCode();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = Complex.valueOf((-359.8469), (-321.226));
      complex5.ZERO.abs();
      Complex complex7 = complex6.ONE.cos();
      complex7.INF.atan();
      complex3.INF.multiply((-321.226));
      complex5.ONE.acos();
      complex2.nthRoot(1);
      Complex complex8 = Complex.valueOf(1.0, (-321.226));
      complex0.multiply(1);
      complex3.acos();
      complex2.toString();
      complex6.add(complex2);
      complex0.getField();
      complex0.subtract(0.0);
      complex1.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-2765.6343104));
      Complex complex1 = new Complex((-2765.6343104));
      Complex complex2 = complex1.I.cos();
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ONE.sqrt();
      complex4.add(complex1);
      Complex complex6 = complex4.ONE.add(complex1);
      Complex complex7 = complex0.cos();
      complex1.subtract((-2765.6343104));
      Complex complex8 = complex7.cos();
      Complex complex9 = complex8.divide(7.64416021682279E-9);
      complex7.ONE.asin();
      Complex complex10 = complex7.tanh();
      complex7.readResolve();
      complex3.getArgument();
      Complex complex11 = Complex.INF;
      complex8.I.subtract(complex11);
      Complex complex12 = complex5.add(complex11);
      complex10.hashCode();
      complex12.INF.pow(0.0);
      complex8.sqrt1z();
      Complex complex13 = complex6.add(7.64416021682279E-9);
      complex13.multiply(887);
      complex5.subtract(complex13);
      complex6.sqrt();
      complex12.tanh();
      complex11.add(complex9);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(2.1128692626953125, 0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ONE.tanh();
      complex0.ZERO.divide(0.0);
      complex2.ZERO.sqrt();
      complex0.ZERO.pow(0.0);
      complex2.ZERO.sinh();
      Complex complex3 = complex1.I.tanh();
      complex3.ONE.tan();
      complex1.readResolve();
      complex3.ONE.getArgument();
      Complex complex4 = complex0.INF.sqrt();
      Complex complex5 = complex4.ONE.asin();
      Complex complex6 = complex0.pow(complex1);
      complex3.ONE.readResolve();
      Complex complex7 = complex0.sqrt1z();
      complex7.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.getArgument();
      complex2.exp();
      complex6.multiply(complex3);
      Complex.valueOf(0.0);
      complex5.abs();
      Complex.valueOf(7.89187408872514E284, 88.7144181551431);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-4.1900132227036916E-73));
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf((-4.1900132227036916E-73));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.divide((-4.1900132227036916E-73));
      complex4.ZERO.nthRoot(1182);
      complex3.acos();
      complex1.sinh();
      complex2.toString();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.I.pow(complex2);
      complex6.NaN.asin();
      complex1.multiply(1452);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(1324.3283, 1.6649010181427002);
      Complex complex1 = complex0.ONE.multiply(1);
      complex0.ZERO.pow((-1039.25052));
      Complex complex2 = complex0.pow(1324.3283);
      complex2.NaN.getField();
      complex0.conjugate();
      complex0.divide((-441.376618));
      complex0.tanh();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.619992971420288);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.NaN.add(complex2);
      List<Complex> list0 = complex2.ZERO.nthRoot(2250);
      assertEquals(2250, list0.size());
      
      Complex complex4 = Complex.valueOf((-855.3), 20.0);
      assertEquals((-855.3), complex4.getReal(), 0.01);
      
      Complex complex5 = complex1.add(20.0);
      Complex complex6 = complex5.add((-855.3));
      complex2.getReal();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex7 = complex6.negate();
      Complex complex8 = complex5.multiply(complex0);
      Complex complex9 = complex8.ONE.acos();
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex10.tan();
      assertSame(complex11, complex7);
      assertSame(complex10, complex3);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-3441.06424566973), (-3441.06424566973));
      complex0.getArgument();
      Complex complex1 = complex0.NaN.sqrt();
      List<Complex> list0 = complex0.NaN.nthRoot(1);
      assertTrue(list0.contains(complex1));
      
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.reciprocal();
      assertEquals((-0.009245519426299446), complex3.getReal(), 0.01);
      assertEquals(0.10810310575531519, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.pow(0.0);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.readResolve();
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.ONE.conjugate();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      
      double double0 = complex1.NaN.abs();
      assertTrue(complex1.isNaN());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex3 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex3);
      assertTrue(complex3.isInfinite());
      assertTrue(boolean0);
      
      Complex complex4 = Complex.valueOf((-3.286964881802063E-8), (-3.286964881802063E-8));
      Complex complex5 = complex4.ZERO.divide(1777.5837078289);
      assertEquals((-3.286964881802063E-8), complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.equals((Object)complex2));
      assertEquals((-3.286964881802063E-8), complex4.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      
      double double1 = complex0.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = 2493.30425573962;
      Complex complex0 = Complex.valueOf(2493.30425573962, 2493.30425573962);
      Complex complex1 = null;
      Complex complex2 = complex0.NaN.cosh();
      complex2.ONE.sin();
      complex2.reciprocal();
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(4414.73925);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.ZERO.add((-1.0));
      complex0.ZERO.hashCode();
      complex3.ONE.pow(complex2);
      complex3.INF.reciprocal();
      complex1.isInfinite();
      Complex complex4 = complex0.multiply(4414.73925);
      Complex complex5 = complex4.ZERO.conjugate();
      complex2.toString();
      complex4.negate();
      complex4.pow((-1804.63460481));
      int int0 = 0;
      try { 
        complex5.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4113.5));
      complex0.log();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.ONE.asin();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex3.getReal(), 0.01);
      
      String string0 = complex1.NaN.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex4 = complex0.pow(complex1);
      assertEquals(5.037584608292635E-13, complex4.getImaginary(), 0.01);
      
      complex0.getField();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.tanh();
      complex2.INF.subtract(815.5);
      complex1.INF.cos();
      Complex complex3 = complex0.subtract(4.8182788286170926E89);
      Complex complex4 = complex3.NaN.subtract(complex0);
      complex4.INF.createComplex(996.07956453801, 996.07956453801);
      Complex complex5 = complex3.add(4.8182788286170926E89);
      Complex complex6 = complex5.I.pow(4.8182788286170926E89);
      complex5.NaN.exp();
      double double0 = complex6.INF.abs();
      assertEquals((-0.15726003300980435), complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0.9875572297430439, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex5.subtract(complex3);
      assertTrue(complex5.isInfinite());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex8.exp();
      assertSame(complex9, complex2);
  }
}
