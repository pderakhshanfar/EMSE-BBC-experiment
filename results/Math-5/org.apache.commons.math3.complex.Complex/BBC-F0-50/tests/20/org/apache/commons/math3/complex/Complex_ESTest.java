/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:05:45 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(1.6844747839686189E-9);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.NaN.createComplex(1.6844747839686189E-9, 1.6844747839686189E-9);
      Complex complex3 = Complex.valueOf(1.6844747839686189E-9, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.multiply(2.406976727302894E-69);
      complex0.multiply((-1.0));
      Complex complex5 = complex4.log();
      Complex complex6 = Complex.valueOf(1978.49288279, (-2255.74341257182));
      complex6.atan();
      complex5.nthRoot(3777);
      complex3.multiply(3777);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(4.912153192981816E-63, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex.valueOf(6.1407711078356886E265);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.valueOf(6.1407711078356886E265);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.add(complex4);
      complex0.INF.getArgument();
      complex2.ZERO.atan();
      complex0.ONE.createComplex(2.5312442779541016, 2.5312442779541016);
      Complex complex6 = Complex.valueOf(6.1407711078356886E265, 1.279910496643312E214);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.acos();
      complex8.ONE.multiply(2389);
      Complex complex9 = complex2.sinh();
      complex9.hashCode();
      Complex complex10 = Complex.valueOf((-880.0222136751));
      Complex complex11 = complex5.add(complex0);
      Complex complex12 = Complex.valueOf(301.2492000930029);
      Complex complex13 = complex12.sinh();
      complex10.sqrt();
      complex13.nthRoot(615);
      complex11.sqrt1z();
      complex2.negate();
      complex4.asin();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.cosh();
      complex1.INF.tan();
      complex0.NaN.nthRoot(7);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.ZERO.sqrt();
      complex4.INF.cosh();
      complex4.hashCode();
      complex0.NaN.add((-1686.1255195099498));
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex1.multiply((-392));
      complex3.multiply(complex6);
      Complex complex7 = complex5.reciprocal();
      complex7.ONE.reciprocal();
      complex6.exp();
      complex7.divide(complex2);
      complex3.cosh();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(203.584257913881);
      Complex complex2 = Complex.valueOf((-2388.12417), 0.5534584522247314);
      Complex complex3 = complex1.log();
      complex3.sqrt();
      complex3.tanh();
      complex2.subtract((-1.4379095864E-313));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply(2254.7413219);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.tan();
      Complex complex4 = new Complex((-1224.09));
      Complex complex5 = new Complex((-1224.09), 1198.490590301891);
      complex0.multiply(complex2);
      Complex complex6 = new Complex(2.2146463141049024E8, 5.82190887044604E-84);
      Complex complex7 = complex6.pow(0.0);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex6.multiply(1.0667524445105459E-7);
      Complex.valueOf(2254.7413219);
      Complex complex10 = new Complex(-0.0, Double.POSITIVE_INFINITY);
      complex3.equals(complex9);
      complex9.divide(complex1);
      Complex complex11 = new Complex(832.686766088565);
      complex11.pow(complex8);
      complex1.pow(2.2146463141049024E8);
      Complex.valueOf((-507.95037453103), 2968.7127518197326);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.I.createComplex(1.0, 1.0);
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex3.INF.negate();
      complex6.NaN.getArgument();
      Complex complex7 = complex1.ONE.tan();
      complex7.add(496.0);
      Complex complex8 = complex0.multiply(1);
      complex0.readResolve();
      Complex complex9 = complex0.add(complex3);
      complex9.INF.tanh();
      Complex complex10 = Complex.valueOf((-1939.09481340375), (-1939.09481340375));
      complex10.INF.exp();
      complex10.I.asin();
      Complex complex11 = Complex.valueOf(Double.NaN);
      complex11.ZERO.negate();
      complex11.INF.conjugate();
      complex8.abs();
      complex4.sin();
      Complex complex12 = complex2.conjugate();
      complex12.asin();
      complex12.ONE.sinh();
      complex2.I.multiply((-1939.09481340375));
      Complex complex13 = complex4.createComplex(Double.NaN, 924.853328088);
      Complex.valueOf(1569.953);
      complex5.toString();
      Complex.valueOf(924.853328088, (-18.7198090014952));
      complex13.pow(496.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex2.sin();
      complex3.NaN.getArgument();
      complex2.ONE.add(complex1);
      Complex complex4 = complex0.NaN.sinh();
      Complex complex5 = complex0.sin();
      complex1.ONE.multiply(complex4);
      complex5.ZERO.abs();
      complex0.ZERO.subtract((-567.8624534));
      Complex complex6 = complex5.ZERO.log();
      complex5.ONE.cosh();
      complex5.multiply(complex1);
      complex6.I.negate();
      complex4.divide(complex5);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex4.asin();
      Complex.valueOf((-3677.7264570722837), (-3677.7264570722837));
      Complex complex9 = complex4.sinh();
      complex8.ONE.sqrt1z();
      Complex complex10 = complex9.NaN.sqrt();
      complex8.abs();
      Complex complex11 = complex6.tan();
      complex7.tanh();
      complex7.getField();
      complex10.subtract(complex11);
      complex1.pow(7.925820852258308);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(2.2146463032468638E8);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.ZERO.createComplex(2.2146463032468638E8, 2.2146463032468638E8);
      complex0.multiply(2.2146463032468638E8);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.conjugate();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.divide((-2143.7));
      Complex complex2 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(948.22017);
      Complex.valueOf((-1.00405741016829), 1057.271);
      Complex complex1 = Complex.INF;
      complex1.NaN.asin();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.divide(948.22017);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-1.00405741016829));
      Complex complex1 = complex0.divide((-1.00405741016829));
      complex1.cos();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1.6844747839686189E-9);
      Complex complex1 = complex0.sqrt();
      complex1.INF.pow(complex0);
      Complex complex2 = Complex.valueOf(1.6844747839686189E-9, 2040797.959225);
      Complex complex3 = complex2.multiply(2.406976727302894E-69);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.tan();
      Complex complex6 = new Complex(3.924684840144564E16, 0.0);
      Complex complex7 = complex0.multiply(complex4);
      complex5.pow(2.2146463048385474E8);
      Complex complex8 = complex7.multiply(832.4807059412149);
      Complex complex9 = new Complex(1642.552410235331, Double.NaN);
      complex8.equals(complex5);
      complex6.divide(complex9);
      complex3.pow(complex6);
      complex3.pow(1758.249963336614);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1431655765);
      Complex.valueOf((double) 1431655765);
      complex1.readResolve();
      complex1.equals(complex0);
      complex1.pow((double) 1431655765);
      Complex complex2 = new Complex(2410.75);
      complex2.exp();
      Complex complex3 = Complex.ZERO;
      complex3.cosh();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-986.0543506269), 611.6851644382);
      Complex complex1 = complex0.ZERO.exp();
      complex1.NaN.getArgument();
      complex1.multiply(complex0);
      Complex.valueOf(Double.NaN, Double.NaN);
      complex0.isNaN();
      Complex complex2 = complex0.divide(611.6851644382);
      Complex complex3 = Complex.valueOf(611.6851644382);
      Complex complex4 = complex2.add(complex3);
      complex4.ZERO.sin();
      complex3.getField();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.divide(complex2);
      complex1.sqrt1z();
      complex2.isNaN();
      Complex complex5 = new Complex((-1009.65));
      complex3.acos();
      Complex complex6 = new Complex(2.0);
      complex4.multiply(Double.NaN);
      Complex complex7 = Complex.I;
      complex7.divide((-745.097090648566));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.subtract(1517.244854236565);
      Complex complex3 = Complex.valueOf(1517.244854236565, 20.0);
      complex3.tan();
      Complex complex4 = complex2.tanh();
      complex1.abs();
      complex0.multiply(0.09672962129116058);
      complex4.divide((-2176.304188660009));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex1.sqrt1z();
      complex2.isNaN();
      Complex complex6 = new Complex((-1009.65));
      complex3.acos();
      Complex complex7 = Complex.valueOf(145.0, 189.29141624287485);
      complex1.multiply(145.0);
      complex4.cosh();
      Complex complex8 = complex2.tan();
      complex7.tan();
      Complex complex9 = new Complex((-432.7573725385666), 2190.03573142);
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.multiply(complex3);
      Complex complex12 = complex8.pow(3.141592653589793);
      complex8.multiply(189.29141624287485);
      Complex.valueOf(2410.75);
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      Complex complex13 = complex11.pow((-1009.65));
      Complex complex14 = complex13.sqrt1z();
      complex12.exp();
      complex4.cosh();
      complex14.getReal();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = Complex.valueOf(1428.565, (-1830.4626356855));
      double double1 = 2.0;
      Complex complex1 = complex0.createComplex((-1830.4626356855), 2.0);
      Complex complex2 = complex1.cosh();
      complex1.multiply(complex2);
      complex0.createComplex((-1830.4626356855), (-1.0));
      complex2.INF.negate();
      Complex complex3 = Complex.I;
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-194.67531497975295));
      Complex complex3 = complex2.ONE.multiply(13);
      complex3.ZERO.asin();
      complex0.I.asin();
      complex0.tan();
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex0.pow((double) 13);
      Complex complex6 = complex4.tanh();
      complex3.abs();
      complex6.multiply(Double.POSITIVE_INFINITY);
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      complex0.I.sqrt1z();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.I.sqrt1z();
      complex4.isNaN();
      Complex complex6 = new Complex((-20.0));
      complex1.acos();
      Complex complex7 = Complex.valueOf(20.0, 3.924684840144564E16);
      Complex complex8 = complex3.multiply(0.7615941559557649);
      complex8.cosh();
      Complex complex9 = complex3.tan();
      complex9.tan();
      Complex complex10 = new Complex(3.924684840144564E16, 20.0);
      complex5.multiply(complex6);
      Complex complex11 = complex7.pow(189.29141624287485);
      complex11.multiply((-985.32462561));
      Complex.valueOf(4.062894701808608E154);
      complex0.equals(complex6);
      complex6.pow(1.3280021798948244E-8);
      Complex complex12 = complex10.sqrt1z();
      complex12.exp();
      complex0.cosh();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cos();
      complex2.nthRoot(362);
      Complex complex3 = Complex.ONE;
      complex1.abs();
      Complex complex4 = complex1.multiply(1803.0);
      complex3.nthRoot(362);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.pow((double) 362);
      Complex.valueOf(1094.097105947217, 1803.0);
      complex1.cosh();
      complex6.isNaN();
      complex0.toString();
      Complex complex7 = complex4.log();
      Complex complex8 = (Complex)complex0.readResolve();
      complex0.exp();
      Complex complex9 = Complex.valueOf(2.0);
      complex7.negate();
      complex6.tanh();
      complex8.abs();
      complex9.tan();
      complex7.sin();
      Complex complex10 = complex9.pow((-1041.8532));
      Complex complex11 = Complex.valueOf(1.096019026243815E274);
      complex11.acos();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex((-195.99620292063253), 1.7827257129423813E-8);
      Complex complex3 = complex2.add(complex1);
      complex2.multiply(1869.37);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, (-195.99620292063253));
      Complex complex5 = complex4.subtract(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = complex6.atan();
      Complex complex8 = Complex.valueOf((-195.99620292063253), 0.41421356237309515);
      Complex complex9 = complex3.sqrt();
      complex7.getArgument();
      complex8.sinh();
      complex2.getArgument();
      complex9.divide(1869.37);
      Complex complex10 = complex2.reciprocal();
      complex10.INF.add((-1.0));
      Complex complex11 = Complex.I;
      complex11.sqrt1z();
      complex1.exp();
      complex4.cosh();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1428.565);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.reciprocal();
      complex0.ONE.tanh();
      complex2.multiply(1869.37);
      complex0.subtract(453.12987575886183);
      Complex complex3 = Complex.ONE;
      complex3.readResolve();
      Complex complex4 = Complex.valueOf(0.7853981633974483);
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.I;
      complex6.atan();
      Complex complex7 = Complex.valueOf(2123.1830985, Double.POSITIVE_INFINITY);
      complex7.sqrt();
      Complex complex8 = Complex.INF;
      complex8.getArgument();
      complex4.sinh();
      complex5.getArgument();
      Complex complex9 = complex2.divide(2.2146462948385474E8);
      Complex complex10 = complex2.reciprocal();
      complex4.sqrt1z();
      complex10.exp();
      Complex complex11 = Complex.valueOf(1263.91, 1428.565);
      complex11.cosh();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.add(complex0);
      complex1.NaN.multiply(1869.37);
      Complex complex3 = complex1.I.subtract(1869.37);
      complex1.readResolve();
      complex0.divide(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.add(complex0);
      complex5.divide(complex2);
      complex3.sqrt1z();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-194.67531497975295));
      Complex complex3 = complex2.ONE.multiply(13);
      complex3.ZERO.asin();
      Complex complex4 = complex0.I.asin();
      complex0.tan();
      complex1.multiply(complex2);
      Complex complex5 = complex0.pow((double) 13);
      complex5.NaN.multiply((-1.0));
      Complex complex6 = complex3.tanh();
      complex2.abs();
      Complex complex7 = Complex.valueOf((-194.67531497975295));
      complex4.tanh();
      complex5.abs();
      complex1.tan();
      complex6.sin();
      complex7.pow((-1885551.6305120492));
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      complex0.I.sqrt1z();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.I.sqrt1z();
      complex4.isNaN();
      Complex complex6 = new Complex((-20.0));
      Complex complex7 = complex1.acos();
      Complex complex8 = Complex.valueOf(20.0, 3.924684840144564E16);
      Complex complex9 = complex3.multiply(0.7615941559557649);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex3.tan();
      complex11.tan();
      Complex complex12 = new Complex(3.924684840144564E16, 20.0);
      complex0.tan();
      complex5.getArgument();
      complex1.sinh();
      Complex complex13 = Complex.INF;
      Complex complex14 = Complex.valueOf(2544.6839745, 3.924684840144564E16);
      complex14.getArgument();
      Complex complex15 = complex3.divide(189.29141624287485);
      complex7.reciprocal();
      Complex complex16 = Complex.ONE;
      complex16.sqrt1z();
      complex15.exp();
      complex10.cosh();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.I.sqrt1z();
      complex5.isNaN();
      Complex complex7 = complex1.acos();
      complex7.NaN.getField();
      complex6.NaN.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex5.INF.add((-136.27876516007));
      complex5.equals(object0);
      Complex complex9 = complex1.sin();
      Complex complex10 = complex9.I.subtract(complex3);
      complex10.ONE.multiply(3683);
      Complex complex11 = complex10.pow(complex9);
      complex2.NaN.cosh();
      complex7.I.readResolve();
      complex5.sin();
      Complex complex12 = complex4.pow(complex1);
      complex12.ONE.acos();
      complex6.getArgument();
      complex4.readResolve();
      Complex complex13 = complex7.atan();
      complex13.ONE.getField();
      Complex complex14 = complex10.conjugate();
      complex14.getReal();
      complex1.tanh();
      complex11.isInfinite();
      Complex.valueOf((-20.0));
      complex3.isNaN();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = Complex.INF;
      complex3.add(complex0);
      Complex complex4 = complex3.NaN.multiply(1869.37);
      complex3.I.subtract(1869.37);
      complex3.readResolve();
      Complex complex5 = complex0.divide(complex3);
      Complex complex6 = complex4.atan();
      Complex complex7 = Complex.valueOf(1869.37, 1869.37);
      Complex complex8 = complex7.sqrt();
      complex5.toString();
      Complex complex9 = complex7.sinh();
      complex8.getArgument();
      Complex.valueOf(0.0, 1869.37);
      Complex complex10 = complex2.ONE.negate();
      Complex complex11 = Complex.ZERO;
      complex6.abs();
      complex10.createComplex(0.684319257736206, 1275.0);
      complex1.pow(complex7);
      complex9.readResolve();
      Complex complex12 = Complex.ZERO;
      complex12.conjugate();
      complex12.isNaN();
      complex8.tanh();
      complex8.isInfinite();
      Complex.valueOf((-1164.6), Double.NaN);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1428.565);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide(0.9999995659755377);
      complex0.nthRoot(362);
      Complex complex3 = complex0.exp();
      Complex complex4 = new Complex((-4032.605243797111));
      complex4.abs();
      complex4.multiply(3080.64545);
      complex0.nthRoot(3814);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.pow(2857.130350001361);
      complex5.abs();
      complex0.createComplex(63.5106703145, (-3779.958865353589));
      complex4.pow(complex2);
      complex1.readResolve();
      complex3.conjugate();
      complex6.isNaN();
      complex5.tanh();
      Complex complex7 = Complex.I;
      complex7.isInfinite();
      Complex.valueOf((double) 3814, (-13.110410268800615));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1428.565);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.reciprocal();
      complex0.ONE.tanh();
      Complex complex3 = new Complex(63.5106703145);
      Complex complex4 = complex3.acos();
      complex0.readResolve();
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex2.atan();
      Complex.valueOf(1428.565, (-2152.723023));
      complex5.sqrt();
      complex5.getArgument();
      complex6.sinh();
      complex3.getArgument();
      Complex complex7 = Complex.valueOf(1428.565);
      Complex complex8 = complex7.divide(63.5106703145);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.reciprocal();
      complex10.sqrt1z();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.exp();
      complex8.cosh();
      complex12.getReal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = Complex.INF;
      complex1.add(complex0);
      Complex complex2 = complex1.NaN.multiply(1869.37);
      Complex complex3 = complex1.I.subtract(1869.37);
      complex1.readResolve();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.valueOf(1869.37, 1869.37);
      complex6.sqrt();
      Complex complex7 = new Complex(Double.NaN, Double.NaN);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = new Complex(Double.NaN, (-3503.66));
      complex8.multiply(complex9);
      complex5.pow(178.0958);
      Complex complex10 = complex6.multiply((-1664.48992132343));
      complex6.tanh();
      complex4.abs();
      complex6.tan();
      complex10.sin();
      complex3.pow(1090.5398627587);
      Complex.valueOf((-2.2146463048385474E8));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.sqrt1z();
      complex2.ONE.divide(complex1);
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.I.sqrt1z();
      complex4.isNaN();
      Complex complex6 = complex1.acos();
      complex6.NaN.getField();
      Complex complex7 = complex5.NaN.conjugate();
      Object object0 = complex1.readResolve();
      complex4.INF.add((-136.27876516007));
      complex4.equals(object0);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex8.I.subtract(complex3);
      complex9.ZERO.sqrt1z();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex4.tan();
      Complex complex12 = new Complex((-20.0), (-918.8));
      complex11.multiply(complex3);
      complex8.pow(5.041914939880371);
      Complex.valueOf((-20.0));
      complex7.tanh();
      complex0.abs();
      complex4.tan();
      Complex complex13 = Complex.valueOf(28.284271247461902);
      complex13.sin();
      Complex complex14 = Complex.valueOf((-136.27876516007));
      complex14.pow(5.041914939880371);
      Complex.valueOf((-20.0));
      complex10.acos();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(847.9245029173654);
      Complex complex3 = complex2.ONE.multiply(13);
      complex3.ZERO.asin();
      Complex complex4 = complex0.I.asin();
      complex0.tan();
      complex1.multiply(complex2);
      Complex complex5 = complex0.pow((double) 13);
      complex5.NaN.multiply((-1.0));
      complex3.tanh();
      complex2.abs();
      Complex complex6 = complex4.tan();
      complex1.sin();
      complex2.pow((-3231.2992304258));
      Complex.valueOf(847.9245029173654);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(2497.592875351, 3.364479292758305E-9);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.multiply(3325);
      complex0.multiply(complex1);
      Complex complex4 = complex3.createComplex(1470.03603, (-219.3));
      complex1.nthRoot(3325);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex4.log();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = Complex.ZERO;
      complex8.pow(complex9);
      complex1.abs();
      complex6.subtract(3.364479292758305E-9);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-986.0543506269), 611.6851644382);
      Complex complex1 = complex0.ZERO.exp();
      complex1.NaN.getArgument();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.add(Double.NaN);
      complex2.equals(complex3);
      Complex complex4 = Complex.valueOf(23.0722182850183, (-136.27876516007));
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex4.multiply(2119);
      complex2.INF.sinh();
      complex4.pow(complex5);
      complex3.cosh();
      complex2.readResolve();
      Complex complex8 = complex6.sin();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex7.pow(complex9);
      complex6.acos();
      complex7.getArgument();
      complex5.readResolve();
      complex7.atan();
      complex4.getField();
      Complex complex11 = complex6.conjugate();
      complex10.getReal();
      complex11.tanh();
      complex8.isInfinite();
      Complex.valueOf(1159.0);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3017.098804), (-3017.098804));
      Complex complex1 = complex0.createComplex(1.0, (-3017.098804));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.ONE.multiply(3325);
      complex3.INF.subtract((-3017.098804));
      complex1.I.multiply(complex0);
      complex0.createComplex(0.0, 1470.03603);
      complex1.nthRoot(35);
      Complex complex4 = Complex.ZERO;
      complex1.cosh();
      Complex complex5 = complex1.log();
      Complex complex6 = complex2.sqrt1z();
      complex6.NaN.divide(complex0);
      complex6.NaN.pow(complex1);
      complex5.abs();
      complex5.subtract(1470.03603);
      complex0.createComplex(0.0, (-2196.86603));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 3303.431429187;
      Complex complex0 = Complex.valueOf(3303.431429187, (-1.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cos();
      complex2.divide(591.07751);
      complex0.nthRoot(346);
      Complex complex3 = complex1.exp();
      complex3.abs();
      Complex complex4 = complex1.multiply(2.718281828459045);
      int int0 = 1413843;
      // Undeclared exception!
      complex4.nthRoot(1413843);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex0.pow((-1652.188346722502));
      Complex complex3 = complex2.negate();
      complex3.asin();
      complex1.multiply(1);
      complex0.log();
      complex1.tan();
      Complex complex4 = new Complex(629.7401531972192);
      complex4.sinh();
      complex4.pow(Double.NaN);
      Complex.valueOf((-4573.4), 116.06391383216);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1160.53721), (-1445.44));
      complex0.createComplex((-174.9102472447), (-174.9102472447));
      complex1.cosh();
      complex1.multiply(3325);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.createComplex(1.0, (-174.9102472447));
      complex3.nthRoot(35);
      Complex complex4 = Complex.valueOf((double) 35, 1.0);
      complex4.conjugate();
      complex4.cosh();
      complex2.log();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = Complex.ZERO;
      complex5.pow(complex6);
      complex0.abs();
      complex3.subtract((-174.9102472447));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.NaN.multiply(1869.37);
      Complex complex5 = complex2.I.subtract(1869.37);
      complex2.readResolve();
      Complex complex6 = complex0.divide(complex2);
      complex4.atan();
      Complex complex7 = Complex.valueOf(1869.37, 1869.37);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex7.sinh();
      complex8.getArgument();
      Complex complex10 = Complex.valueOf(0.0, 1869.37);
      complex1.ONE.negate();
      complex10.tanh();
      complex1.sqrt1z();
      Complex complex11 = complex3.cosh();
      complex8.isNaN();
      complex9.INF.toString();
      Complex complex12 = complex5.log();
      Complex complex13 = (Complex)complex12.ONE.readResolve();
      complex3.exp();
      Complex complex14 = complex8.ZERO.pow(0.0);
      complex13.negate();
      complex7.equals(complex1);
      Complex complex15 = complex4.pow(0.0);
      Complex complex16 = complex15.cosh();
      complex11.sqrt1z();
      complex13.pow(complex14);
      complex16.abs();
      try { 
        complex6.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3017.098804), (-3017.098804));
      Complex complex1 = complex0.createComplex(1.0, (-3017.098804));
      complex1.INF.cosh();
      complex0.ONE.multiply(3325);
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.tan();
      complex3.multiply(complex1);
      Complex complex4 = complex3.pow(8.012051042638957);
      Complex complex5 = complex3.multiply(1.0);
      complex2.tanh();
      complex0.abs();
      Complex complex6 = new Complex((-1.0));
      Complex complex7 = complex6.tan();
      complex7.sin();
      Complex complex8 = complex4.pow(1738.9);
      Complex.valueOf((-20.0));
      complex5.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1428.565);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = new Complex(63.5106703145);
      complex5.acos();
      Complex.valueOf(189.29141624287485, 0.7615941559557649);
      Complex complex6 = complex2.multiply(63.5106703145);
      Complex complex7 = complex5.cosh();
      complex4.tan();
      Complex complex8 = complex0.sinh();
      complex8.abs();
      Complex complex9 = new Complex(189.29141624287485, 1428.565);
      complex9.asin();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.multiply(1264);
      complex8.toString();
      complex4.multiply(0.7615941559557649);
      complex11.reciprocal();
      complex1.tan();
      complex7.log();
      Complex complex12 = complex6.exp();
      complex12.reciprocal();
      complex11.nthRoot(1170);
      complex10.acos();
      Complex complex13 = Complex.I;
      complex13.exp();
      complex3.tan();
      complex11.hashCode();
      complex4.pow(63.5106703145);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.divide(820.12437);
      complex2.nthRoot(362);
      Complex complex4 = complex3.exp();
      complex1.abs();
      Complex complex5 = complex3.multiply(1803.0);
      complex4.nthRoot(362);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.pow((double) 362);
      complex3.abs();
      Complex complex8 = complex2.createComplex((-1.4814446205238232), 0.684319257736206);
      complex6.pow(complex7);
      complex3.readResolve();
      Complex complex9 = complex8.conjugate();
      complex5.isNaN();
      complex9.tanh();
      complex9.isInfinite();
      Complex.valueOf(6.728957550102869E-8);
      Complex complex10 = Complex.ONE;
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      complex0.ZERO.sin();
      Complex complex1 = Complex.INF;
      complex1.add(complex0);
      Complex complex2 = complex1.NaN.multiply(1869.37);
      complex1.I.subtract(1869.37);
      Complex complex3 = (Complex)complex1.readResolve();
      complex0.divide(complex1);
      complex2.atan();
      Complex complex4 = Complex.valueOf(1869.37, 1869.37);
      Complex complex5 = complex4.sqrt();
      complex5.ONE.getArgument();
      Complex complex6 = complex4.sinh();
      complex5.getArgument();
      Complex complex7 = complex6.divide(1869.37);
      complex7.ZERO.reciprocal();
      complex3.sqrt1z();
      complex4.exp();
      complex4.cosh();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-20.0));
      Complex complex4 = Complex.INF;
      complex4.negate();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex0.cosh();
      complex7.isNaN();
      complex5.toString();
      complex1.log();
      Object object0 = complex7.readResolve();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex2.pow(2279.4249705);
      Complex complex10 = complex2.negate();
      complex6.equals(object0);
      complex10.pow(1555.87);
      Complex complex11 = complex9.cosh();
      complex10.divide((-468.889666374825));
      complex5.reciprocal();
      Complex complex12 = Complex.INF;
      complex12.negate();
      complex8.sin();
      complex3.subtract(complex11);
      complex10.readResolve();
      complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3017.098804), (-3017.098804));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex0.log();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = Complex.valueOf((-3017.098804), (-3017.098804));
      complex6.sqrt1z();
      complex1.isInfinite();
      complex4.negate();
      complex3.add((-17.766252));
      complex5.tan();
      complex3.subtract(1869.37);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3017.098804), (-3017.098804));
      Complex complex1 = complex0.createComplex(1.0, (-3017.098804));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.ONE.multiply(3325);
      complex1.I.multiply(complex0);
      complex0.createComplex(0.0, 1470.03603);
      complex2.cosh();
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.pow(complex3);
      complex5.acos();
      complex4.getArgument();
      complex3.readResolve();
      complex0.atan();
      complex5.getField();
      complex6.conjugate();
      Complex complex8 = Complex.ZERO;
      complex8.getReal();
      complex7.atan();
      complex6.isNaN();
      complex1.multiply((-1202803773));
      complex7.divide(complex1);
      complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 1428.565;
      Complex complex0 = new Complex((-1.0), 1428.565);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = new Complex(1428.565, 1428.565);
      Complex complex3 = complex2.exp();
      complex3.ONE.tanh();
      complex1.INF.cos();
      complex1.divide(1428.565);
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex3.pow(complex1);
      complex2.ZERO.cos();
      complex2.INF.acos();
      Complex complex5 = Complex.valueOf(189.29141624287485, 189.29141624287485);
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex7.tan();
      complex8.ONE.getField();
      Complex complex9 = complex0.sinh();
      complex4.ONE.divide(complex1);
      complex9.NaN.abs();
      complex6.NaN.asin();
      int int0 = 1;
      Complex complex10 = complex1.multiply(1);
      complex1.toString();
      complex2.multiply(0.0);
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex11.log();
      complex12.reciprocal();
      complex5.exp();
      Complex complex13 = complex6.reciprocal();
      try { 
        complex13.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.cosh();
      complex1.atan();
      complex0.I.sqrt1z();
      int int0 = 1026;
      Complex complex2 = complex1.multiply(1026);
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.I.sqrt1z();
      complex5.isNaN();
      Complex complex7 = complex1.acos();
      complex7.NaN.getField();
      complex6.NaN.conjugate();
      Complex complex8 = (Complex)complex1.readResolve();
      complex5.INF.add((-136.27876516007));
      complex5.equals(complex8);
      complex4.multiply(complex3);
      Complex complex9 = complex7.pow((-20.0));
      complex9.multiply((-20.0));
      complex5.tanh();
      complex1.abs();
      complex8.tan();
      Complex complex10 = complex2.sin();
      complex10.pow(685.1097760416);
      Complex.valueOf(7.434082736089939);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3017.098804), (-3017.098804));
      Complex complex1 = complex0.createComplex(1.0, (-3017.098804));
      Complex complex2 = complex1.INF.cosh();
      complex0.ONE.multiply(3325);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(1.0, (-113.384867));
      complex4.asin();
      Complex complex5 = new Complex((-113.384867), (-113.384867));
      complex5.multiply((-1));
      complex2.log();
      complex3.tan();
      complex0.sinh();
      complex5.pow((-113.384867));
      Complex.valueOf(0.0, (-3017.098804));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.NaN.multiply((-1715));
      complex1.INF.nthRoot(1);
      complex1.isNaN();
      complex0.hashCode();
      complex0.readResolve();
      Complex complex3 = complex2.INF.reciprocal();
      complex3.ZERO.getField();
      complex3.I.hashCode();
      complex2.abs();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.negate();
      complex4.getArgument();
      complex3.readResolve();
      complex5.multiply(691.5873325938);
      complex3.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-195.99620292063253));
      Complex complex3 = complex2.ONE.multiply(37);
      complex3.ZERO.asin();
      Complex complex4 = complex0.I.asin();
      complex0.tan();
      complex1.multiply(complex2);
      Complex complex5 = complex0.pow((double) 37);
      complex5.NaN.multiply((-1.0));
      complex3.tanh();
      complex2.abs();
      complex4.tan();
      complex1.sin();
      complex2.pow((-3231.2992304258));
      Complex.valueOf(195.99620292063253);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-809.55060523431));
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.add(complex0);
      complex3.NaN.exp();
      Complex complex4 = complex3.ZERO.subtract((-707.7140312068908));
      complex4.INF.getArgument();
      Complex complex5 = complex4.NaN.pow((-707.7140312068908));
      complex5.NaN.readResolve();
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = new Complex((-1941.30488386712), (-809.55060523431));
      complex7.INF.atan();
      complex1.pow(complex7);
      complex3.isNaN();
      complex6.INF.getField();
      complex2.getArgument();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(686.72, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.NaN.getArgument();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex4.ZERO.conjugate();
      Complex complex7 = complex3.cos();
      complex5.multiply(0.0);
      Complex complex8 = complex1.atan();
      complex8.ONE.abs();
      complex6.readResolve();
      complex1.getArgument();
      complex0.conjugate();
      complex7.divide(complex3);
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.readResolve();
      complex0.NaN.readResolve();
      complex0.INF.readResolve();
      Complex complex1 = complex0.multiply(0.0);
      Complex.valueOf((-1.0), (-1345.7490287943244));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.asin();
      complex3.INF.exp();
      Complex complex4 = complex1.add(complex2);
      complex2.INF.add(2318.423935530628);
      Complex complex5 = complex4.I.pow(2318.423935530628);
      Complex complex6 = complex2.tan();
      complex6.createComplex(1529.4720009419336, 0.0);
      complex5.sinh();
      complex6.log();
      complex5.cos();
      complex6.subtract(2198.182);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(2.167203426361084, 2.167203426361084);
      Complex complex1 = Complex.valueOf(2.167203426361084, 0.0);
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.multiply((-1231));
      Object object0 = new Object();
      Complex complex5 = complex2.INF.sqrt();
      complex4.I.readResolve();
      complex4.equals(object0);
      Complex complex6 = complex4.multiply(complex3);
      Complex complex7 = complex6.ZERO.cos();
      complex6.I.multiply(1006.861522516);
      Complex complex8 = complex5.I.subtract(complex4);
      complex8.conjugate();
      complex5.subtract(2977.53981);
      Complex complex9 = complex3.exp();
      complex7.getField();
      complex0.hashCode();
      complex0.multiply(4.90334700062756E236);
      complex0.cos();
      complex9.divide(1.2715470790863037);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex1.INF.divide((-1.0));
      Complex complex3 = complex0.ZERO.negate();
      Complex complex4 = complex3.I.exp();
      complex2.INF.tanh();
      Complex complex5 = Complex.valueOf(0.0, 1.0);
      complex0.INF.multiply(1.8976664543151855);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.ONE.divide(complex2);
      complex7.I.createComplex(1.8976664543151855, (-2175.237278));
      complex0.log();
      Complex complex8 = Complex.valueOf((-1955.7236484));
      complex8.ZERO.atan();
      complex8.hashCode();
      complex4.exp();
      complex5.subtract((-305.64317650766));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.I.subtract(complex0);
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.INF.log();
      complex0.ZERO.conjugate();
      Complex complex3 = complex0.sqrt1z();
      complex0.isInfinite();
      complex3.negate();
      Complex complex4 = complex3.add(3.706956710275979E-120);
      complex3.tan();
      complex4.subtract(1.2097692489624023);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      double double0 = 1428.565;
      Complex complex0 = new Complex((-1.0), 1428.565);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.exp();
      complex3.ONE.tanh();
      complex1.INF.cos();
      complex1.divide(1428.565);
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1856);
      Complex complex2 = Complex.valueOf((-858.7003111356));
      Complex complex3 = complex2.INF.multiply(1856);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.ONE.multiply(1856);
      complex8.NaN.nthRoot(1217);
      complex1.exp();
      complex7.sqrt();
      Complex complex9 = complex0.tan();
      complex9.ZERO.multiply((-858.7003111356));
      complex9.I.nthRoot(1217);
      complex8.ZERO.cos();
      Complex complex10 = complex6.subtract((double) 1217);
      complex10.NaN.subtract(complex6);
      complex10.INF.asin();
      Complex complex11 = complex8.subtract(complex0);
      Complex complex12 = complex11.multiply(0.0);
      complex12.ZERO.conjugate();
      complex6.isInfinite();
      complex3.acos();
      complex5.getImaginary();
      complex2.multiply(20.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex2.ONE.divide(complex1);
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.I.sqrt1z();
      complex5.isNaN();
      Complex complex7 = complex1.acos();
      complex7.NaN.getField();
      complex6.NaN.conjugate();
      Object object0 = complex1.readResolve();
      Complex complex8 = complex5.INF.add((-136.27876516007));
      complex5.equals(object0);
      Complex complex9 = complex1.sin();
      Complex complex10 = complex9.I.subtract(complex3);
      complex10.ONE.multiply(3683);
      Complex complex11 = complex10.pow(complex9);
      complex2.NaN.cosh();
      complex7.I.readResolve();
      complex5.sin();
      Complex complex12 = complex4.pow(complex1);
      complex12.ONE.acos();
      complex6.getArgument();
      complex4.readResolve();
      Complex complex13 = complex7.atan();
      complex13.ONE.getField();
      Complex complex14 = complex10.conjugate();
      complex14.getReal();
      complex0.atan();
      complex3.isNaN();
      complex8.multiply(3683);
      complex11.divide(complex0);
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex2.ONE.conjugate();
      complex3.atan();
      Complex complex4 = complex1.ZERO.conjugate();
      Complex complex5 = complex4.ZERO.acos();
      Complex complex6 = complex5.ONE.sqrt1z();
      complex6.exp();
      complex5.INF.createComplex((-2519.0), (-2519.0));
      Complex complex7 = complex0.exp();
      Complex complex8 = complex7.INF.multiply(complex1);
      Complex complex9 = complex0.subtract(complex4);
      complex7.ZERO.hashCode();
      Complex complex10 = complex2.tan();
      Complex complex11 = complex10.sin();
      complex11.hashCode();
      complex11.cosh();
      Complex complex12 = complex10.createComplex(107.89468569, 107.89468569);
      complex4.getArgument();
      complex2.multiply(complex9);
      Complex complex13 = complex12.add(107.89468569);
      complex0.isNaN();
      Complex complex14 = complex2.sqrt();
      Complex complex15 = complex8.tan();
      Complex complex16 = complex12.conjugate();
      Complex complex17 = complex16.divide(complex7);
      complex14.conjugate();
      Complex complex18 = complex1.multiply(0);
      complex13.sqrt1z();
      complex17.divide(complex14);
      complex18.cosh();
      complex15.add(complex11);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.NaN.multiply(1869.37);
      Complex complex5 = complex2.I.subtract(1869.37);
      complex2.readResolve();
      complex0.divide(complex2);
      complex4.atan();
      Complex complex6 = Complex.valueOf(1869.37, 1869.37);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex6.sinh();
      complex7.getArgument();
      Complex complex9 = Complex.valueOf(0.0, 1869.37);
      complex1.ONE.negate();
      Complex complex10 = complex9.tanh();
      complex1.sqrt1z();
      complex3.cosh();
      complex7.isNaN();
      complex8.INF.toString();
      Complex complex11 = complex5.log();
      complex11.ONE.readResolve();
      Complex complex12 = complex3.exp();
      complex7.ZERO.pow(0.0);
      complex12.I.negate();
      complex2.equals(complex0);
      complex1.pow(0.39269908169872414);
      complex8.cosh();
      complex9.divide((-468.889666374825));
      Complex complex13 = complex10.reciprocal();
      complex13.negate();
      Complex complex14 = complex2.sin();
      complex12.subtract(complex7);
      complex4.readResolve();
      complex14.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1573.53916);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex0.acos();
      complex0.divide(0.4788752794265747);
      complex1.sin();
      Complex complex4 = complex0.sqrt1z();
      complex4.atan();
      Complex complex5 = complex1.divide(1573.53916);
      complex4.isInfinite();
      complex3.add(0.0);
      complex3.toString();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.NaN.sinh();
      complex3.pow(complex1);
      complex2.ZERO.cos();
      complex2.INF.acos();
      Complex complex4 = Complex.valueOf(189.29141624287485, 189.29141624287485);
      Complex complex5 = complex1.multiply(0.0);
      Complex complex6 = complex5.ONE.cosh();
      complex6.tan();
      Complex complex7 = complex0.sinh();
      complex7.NaN.abs();
      complex5.NaN.asin();
      int int0 = 1;
      Complex complex8 = complex1.multiply(1);
      complex1.toString();
      complex2.multiply(0.0);
      Complex complex9 = complex8.reciprocal();
      complex9.log();
      complex4.exp();
      Complex complex10 = complex5.reciprocal();
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-925.7095506837), (-925.7095506837));
      Complex complex2 = complex1.ZERO.subtract((-925.7095506837));
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex0.subtract(complex1);
      complex4.ZERO.readResolve();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.tan();
      complex6.ONE.exp();
      complex6.I.atan();
      complex0.nthRoot(2994);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex1.sqrt1z();
      complex8.I.hashCode();
      Complex complex9 = complex8.I.tanh();
      complex9.NaN.tan();
      Complex complex10 = complex5.acos();
      complex7.reciprocal();
      complex10.sin();
      complex3.multiply(531.750204213774);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1004.2481));
      complex0.getField();
      complex0.hashCode();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      complex1.ZERO.abs();
      Complex complex3 = complex0.INF.add((-1004.2481));
      Complex complex4 = complex2.pow(0.0);
      complex4.INF.asin();
      complex4.INF.readResolve();
      Complex complex5 = complex4.ZERO.tanh();
      complex5.I.pow(complex1);
      complex5.I.cos();
      Complex complex6 = complex1.sin();
      complex1.cosh();
      Complex complex7 = complex6.ZERO.cos();
      complex6.I.add(0.0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex6.atan();
      complex7.conjugate();
      complex8.isNaN();
      Complex complex9 = complex3.atan();
      complex9.ONE.createComplex((-422.98773), (-422.98773));
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.I.add((-5.7169586962345785E-8));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.I.divide(complex1);
      complex5.ZERO.atan();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex0.divide(1.0);
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex6.ONE.asin();
      Complex complex9 = complex0.divide((-1611.64537724));
      complex9.ZERO.atan();
      Complex complex10 = complex2.I.asin();
      complex10.INF.getArgument();
      complex7.createComplex(2878.51, 2878.51);
      Complex complex11 = complex2.log();
      complex11.ZERO.getArgument();
      complex7.divide(0.0);
      complex2.createComplex((-1611.64537724), 191.550634);
      Complex.valueOf(191.550634);
      complex10.isInfinite();
      Complex complex12 = complex8.divide(0.0);
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(203.634741);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.sinh();
      complex0.toString();
      Complex complex2 = Complex.NaN;
      complex0.NaN.pow(complex2);
      complex0.isNaN();
      complex1.exp();
      complex1.tanh();
      complex2.equals("&{'[|a/&y@$Z`Kqy}0");
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.9205810725333715E-8);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.negate();
      complex3.multiply(3.9205810725333715E-8);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.NaN.tan();
      complex5.reciprocal();
      complex1.ZERO.sqrt();
      complex5.ONE.divide(complex4);
      complex1.getReal();
      complex0.sqrt();
      Complex complex6 = complex0.negate();
      Complex complex7 = complex6.subtract(0.0);
      Complex complex8 = complex7.asin();
      complex8.atan();
      Complex complex9 = complex1.add(0.0);
      Complex complex10 = complex0.subtract(0.0);
      complex10.negate();
      Complex.valueOf(0.0, 0.0);
      Complex complex11 = complex10.atan();
      complex9.getArgument();
      complex9.getArgument();
      complex7.isNaN();
      complex10.add(complex1);
      complex0.add(1370.2002482643);
      Complex complex12 = complex8.atan();
      Complex complex13 = complex12.INF.tanh();
      complex13.exp();
      complex11.negate();
      complex0.isNaN();
      complex3.multiply(1570);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.ONE.subtract(complex1);
      Complex complex2 = complex0.INF.divide(6.283185307179586);
      complex2.ONE.sqrt1z();
      complex0.exp();
      complex0.cosh();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.sqrt();
      complex2.NaN.readResolve();
      Complex complex3 = complex2.I.multiply((-416.5286462903354));
      complex3.sqrt1z();
      complex1.I.sin();
      complex1.getImaginary();
      complex0.sqrt1z();
      complex1.subtract(-0.0);
      Complex complex4 = complex0.cosh();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.multiply(complex1);
      complex2.ONE.reciprocal();
      double double0 = 3007.18338849;
      Complex complex3 = Complex.valueOf((-157.97667004), 3007.18338849);
      complex3.NaN.hashCode();
      Complex complex4 = complex0.I.createComplex((-1.0), 3186.5687533158343);
      complex0.INF.negate();
      complex4.NaN.hashCode();
      complex1.pow(0.0);
      int int0 = (-309);
      try { 
        complex1.ONE.nthRoot((-309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -309
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2009.28786), (-2009.28786));
      Complex complex1 = Complex.valueOf((-348.653010191));
      Complex complex2 = Complex.valueOf((-1670.20629179), (-1077.655885));
      Complex.valueOf((-1.0));
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.NaN.exp();
      complex5.NaN.acos();
      Complex complex6 = complex2.I.subtract(complex0);
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex1.pow(complex6);
      Complex complex9 = complex7.divide(1982.0);
      complex8.readResolve();
      complex9.multiply((-1077.655885));
      Complex complex10 = complex4.subtract(complex9);
      complex7.getField();
      complex6.isInfinite();
      Complex complex11 = complex8.atan();
      complex11.ZERO.getField();
      Complex complex12 = complex9.I.divide(complex8);
      complex1.atan();
      Complex complex13 = complex5.add((-1.0));
      complex13.pow(complex10);
      complex4.multiply((-63));
      Complex complex14 = complex13.multiply(complex5);
      complex12.ONE.pow(complex0);
      complex14.NaN.log();
      try { 
        complex2.nthRoot((-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -63
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex0.pow((-1652.188346722502));
      Complex complex3 = complex2.negate();
      complex3.asin();
      complex1.multiply(1);
      Complex complex4 = complex1.log();
      complex4.I.tan();
      Complex complex5 = complex0.sinh();
      complex5.pow(116.06391383216);
      Complex.valueOf((-1652.188346722502), 0.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex((-171.3), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.cos();
      complex2.divide(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex2.ONE.asin();
      complex4.I.add(0.0);
      Complex complex5 = complex0.NaN.pow(complex2);
      Complex complex6 = complex0.createComplex(0.0, 0.0);
      complex6.ONE.log();
      complex6.hashCode();
      Complex complex7 = complex5.subtract(complex2);
      complex7.NaN.getArgument();
      complex7.INF.getField();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex5.multiply(Double.POSITIVE_INFINITY);
      complex9.getArgument();
      complex3.multiply(complex6);
      complex5.getImaginary();
      complex8.sqrt();
      complex4.abs();
      Complex complex10 = complex3.divide(Double.NaN);
      complex4.add(0.0);
      complex10.cosh();
      complex9.sqrt1z();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2519.5731514525883, 0.0);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.I.sinh();
      complex3.ZERO.subtract(2519.5731514525883);
      Complex complex4 = complex0.INF.add(complex1);
      Complex complex5 = complex4.I.subtract(complex3);
      complex5.I.abs();
      complex4.NaN.sin();
      complex0.toString();
      complex0.getReal();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      complex1.ONE.multiply(1);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ZERO.sinh();
      complex1.getField();
      Complex complex4 = complex0.tanh();
      complex0.isInfinite();
      Complex complex5 = complex2.add(0.0);
      Complex complex6 = complex2.cosh();
      complex3.ONE.readResolve();
      Complex complex7 = complex6.tan();
      complex7.ONE.tan();
      complex1.NaN.sqrt();
      complex5.I.subtract(complex6);
      Complex.valueOf(0.0);
      complex5.hashCode();
      complex3.getImaginary();
      Complex complex8 = complex6.multiply(complex4);
      complex8.I.subtract(complex1);
      complex0.multiply(0.0);
      complex1.pow(4677.613486284);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4296.0, 1600.47056962347);
      complex0.createComplex(1600.47056962347, 0.0);
      Complex complex1 = complex0.I.pow(4296.0);
      Complex complex2 = complex1.INF.exp();
      complex2.multiply(7);
      complex2.NaN.subtract(4296.0);
      complex0.INF.abs();
      complex0.multiply(0.0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = Complex.valueOf(4.538983468118194E-9, 4296.0);
      complex4.sqrt();
      complex5.readResolve();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-761.0), 47.033);
      Complex complex1 = complex0.I.reciprocal();
      String string0 = complex1.toString();
      assertEquals("(0.0, -1.0)", string0);
      
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex1.I.acos();
      complex1.NaN.multiply((-724));
      complex3.negate();
      Complex complex4 = complex0.I.sqrt();
      complex4.getField();
      complex0.getArgument();
      complex0.getImaginary();
      complex2.NaN.multiply(47.033);
      Complex complex5 = complex1.ZERO.atan();
      Complex complex6 = complex0.I.multiply((-792));
      Complex complex7 = Complex.valueOf((double) (-792));
      assertEquals((-792.0), complex7.getReal(), 0.01);
      
      Complex complex8 = complex6.I.pow(complex4);
      complex8.NaN.multiply((-1502.1));
      assertEquals(0.14622397238366855, complex8.getReal(), 0.01);
      assertEquals(0.2950783198318938, complex8.getImaginary(), 0.01);
      
      complex0.getField();
      complex0.isInfinite();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = (Complex)complex2.readResolve();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertTrue(complex10.equals((Object)complex5));
      
      complex3.getField();
      Complex complex11 = complex4.subtract(47.033);
      assertEquals(0.7071067811865475, complex11.getImaginary(), 0.01);
      assertEquals((-46.325893218813455), complex11.getReal(), 0.01);
      
      complex0.asin();
      Complex complex12 = complex3.ONE.atan();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      
      complex3.negate();
      complex3.hashCode();
      complex3.getField();
      assertFalse(complex3.equals((Object)complex10));
      
      Complex complex13 = Complex.valueOf(47.033, 3.0798669611403007);
      complex0.ONE.hashCode();
      Complex complex14 = complex13.asin();
      assertEquals(4.546024508999318, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex9.reciprocal();
      assertEquals(0.0012626252561722393, complex15.getReal(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3017.098804), (-3017.098804));
      Complex complex1 = complex0.createComplex(1.0, (-3017.098804));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex0.ONE.multiply(3325);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(3325.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.I.multiply(complex0);
      assertEquals((-3017.098804), complex4.getImaginary(), 0.01);
      assertEquals(3017.098804, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.createComplex(0.0, 1470.03603);
      List<Complex> list0 = complex1.nthRoot(35);
      assertEquals(35, list0.size());
      
      complex5.conjugate();
      Complex complex6 = complex1.cosh();
      assertEquals((-1.0820014193272385), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.log();
      Complex complex8 = complex2.sqrt1z();
      complex8.NaN.pow(complex1);
      double double0 = complex7.abs();
      assertEquals((-1.5704648825736944), complex7.getImaginary(), 0.01);
      assertEquals(8.164516021005115, double0, 0.01);
      
      Complex complex9 = complex8.pow(complex1);
      assertSame(complex9, complex8);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      Complex complex1 = complex0.divide(0.0);
      complex1.INF.hashCode();
      complex1.ZERO.readResolve();
      Complex complex2 = Complex.ZERO;
      complex2.I.acos();
      Complex complex3 = complex1.ONE.add(complex2);
      complex3.readResolve();
      Complex complex4 = complex0.INF.divide(complex1);
      complex4.ONE.readResolve();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-986.0543506269), 611.6851644382);
      Complex complex1 = complex0.ZERO.exp();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.subtract(Double.NaN);
      assertTrue(complex3.isNaN());
      
      complex0.isNaN();
      Complex complex4 = complex0.divide(611.6851644382);
      Complex complex5 = Complex.valueOf(611.6851644382);
      Complex complex6 = complex4.add(complex5);
      assertEquals(610.0731352310955, complex6.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex2));
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      
      complex5.getField();
      Complex complex7 = complex5.cosh();
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sinh();
      try { 
        complex1.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.pow(complex0);
      assertEquals(-0.0, complex1.getReal(), 0.01);
      
      Complex complex3 = complex0.atan();
      assertTrue(complex3.equals((Object)complex2));
      assertNotSame(complex3, complex2);
      
      Complex complex4 = complex0.cos();
      assertEquals(1.5430806348152437, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      complex0.getImaginary();
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.ZERO.exp();
      double double0 = 0.04207121580839157;
      complex1.NaN.subtract(0.04207121580839157);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.asin();
      complex3.I.divide((-87.886153));
      complex1.I.cosh();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.negate();
      Complex complex6 = complex2.pow(20.0);
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex1.subtract(complex6);
      complex1.multiply(complex8);
      complex4.ONE.acos();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
