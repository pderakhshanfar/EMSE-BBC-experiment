/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:49:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1906.864793, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex.valueOf(253.8441453405);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.log();
      complex0.multiply((-397.666190552497));
      Complex complex2 = complex0.tan();
      complex0.reciprocal();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.valueOf(482.813585, Double.POSITIVE_INFINITY);
      complex3.pow(complex4);
      complex2.pow(Double.POSITIVE_INFINITY);
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex4.nthRoot(676);
      Complex complex5 = new Complex((-208.48758291732), 486.954100430959);
      try { 
        complex5.nthRoot((-2039));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,039
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.divide(7.393196131284108E-271);
      Complex complex2 = complex0.multiply(7.393196131284108E-271);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.I;
      complex2.pow(complex3);
      Complex complex5 = complex0.subtract(Double.NaN);
      complex5.add(complex1);
      complex4.nthRoot(90);
      Complex complex6 = complex5.sin();
      complex6.divide((double) 90);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(3727.11);
      complex2.getField();
      Complex complex3 = Complex.valueOf(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.multiply(complex1);
      complex0.divide(complex4);
      complex2.add((-741.439597));
      complex1.createComplex(501.5599474, (-741.439597));
      complex0.sqrt();
      Complex complex5 = complex0.tanh();
      complex5.subtract(complex1);
      complex4.multiply(3085);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-6.0893829005035E-8), 20.0);
      Complex complex2 = Complex.NaN;
      complex1.hashCode();
      Complex complex3 = Complex.valueOf((-6.0893829005035E-8), (-6.0893829005035E-8));
      complex2.pow(complex3);
      Complex complex4 = complex1.tan();
      complex4.subtract((-2423.0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.multiply((-1980.98));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1.5430806348152437, Double.POSITIVE_INFINITY);
      complex0.createComplex((-129.7685950028), 1.5430806348152437);
      Complex complex1 = complex0.NaN.add(313.18411106735);
      complex1.I.tan();
      complex0.multiply((-1073741824));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add(Double.POSITIVE_INFINITY);
      complex1.tan();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.13670018315315247, 0.13670018315315247);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf(0.13670018315315247, 1401.51574);
      Complex complex4 = complex1.multiply(1);
      complex4.ZERO.getField();
      Complex complex5 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex5.INF.pow((double) 1);
      complex6.I.nthRoot(1);
      Complex complex8 = complex1.ZERO.cosh();
      complex8.INF.getField();
      Complex complex9 = complex3.NaN.conjugate();
      complex1.nthRoot(1);
      complex4.log();
      complex7.atan();
      complex3.negate();
      Complex complex10 = complex2.cosh();
      complex3.sqrt1z();
      Complex complex11 = complex5.acos();
      complex11.NaN.getArgument();
      complex10.exp();
      Complex complex12 = complex8.negate();
      complex9.createComplex(0.13670018315315247, Double.NaN);
      complex7.abs();
      Complex complex13 = complex12.subtract(Double.NaN);
      complex13.I.acos();
      complex2.cosh();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-401.236188428));
      Complex complex1 = complex0.exp();
      complex1.INF.readResolve();
      Complex complex2 = complex1.INF.asin();
      complex2.NaN.sinh();
      complex2.INF.hashCode();
      Complex complex3 = complex0.conjugate();
      complex3.ONE.conjugate();
      Complex complex4 = complex3.ONE.log();
      complex1.INF.multiply(1076);
      complex4.ONE.subtract(0.3388410806655884);
      Complex complex5 = complex1.reciprocal();
      complex3.multiply(1064.1);
      Complex complex6 = complex5.asin();
      complex0.divide(1064.1);
      complex6.sinh();
      complex3.log();
      complex2.sqrt();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4089.3353668), 6.283185307179586);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.multiply(6.283185307179586);
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex3.pow(complex0);
      Complex.valueOf(9.049543313665034E115);
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3740.47085), Double.NaN);
      complex1.multiply(4773);
      Complex complex2 = Complex.valueOf((-2.2934896740542648E-8));
      complex2.nthRoot(4773);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      complex2.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.multiply(Double.NaN);
      complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      complex2.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.multiply((-1741.6992912));
      Complex.valueOf((-2240.3476), (-380.0));
      complex1.multiply((-2240.3476));
      complex3.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = new Complex((-1741.6992912), (-20.0));
      Complex complex6 = Complex.valueOf((-1116.0), 1274.4408703871);
      complex5.pow(complex6);
      Complex complex7 = Complex.INF;
      complex5.exp();
      complex3.asin();
      complex0.multiply(complex7);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-158.868024734458);
      Complex complex0 = Complex.valueOf((-158.868024734458), (-158.868024734458));
      complex0.I.nthRoot(1);
      Complex complex1 = complex0.log();
      complex0.I.hashCode();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.multiply((-158.868024734458));
      Complex complex4 = complex1.multiply((-3692.865916779408));
      complex2.abs();
      Complex complex5 = Complex.I;
      complex0.pow(complex5);
      Complex complex6 = Complex.INF;
      complex6.exp();
      complex3.asin();
      Complex complex7 = complex4.sin();
      try { 
        complex7.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1606.76492495228));
      complex0.toString();
      complex0.sin();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.NaN;
      complex2.tan();
      Complex complex3 = Complex.ZERO;
      complex3.multiply(Double.NaN);
      complex1.reciprocal();
      Complex.valueOf((-75.4289));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.subtract(20.0);
      complex1.getField();
      Complex complex5 = Complex.valueOf(20.0, 0.0);
      complex2.divide(complex1);
      Complex complex6 = complex5.add(0.0);
      complex3.sqrt();
      complex4.add(2895.271767);
      complex6.tanh();
      Complex complex7 = new Complex(20.0);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.log();
      complex3.subtract(20.0);
      complex1.getField();
      Complex complex4 = Complex.valueOf(20.0, 0.0);
      complex2.divide(complex1);
      Complex complex5 = complex4.add(0.0);
      complex5.sqrt();
      complex5.add(20.0);
      complex4.tanh();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.subtract(20.0);
      complex1.getField();
      Complex complex5 = Complex.valueOf(20.0, 0.0);
      Complex complex6 = Complex.ONE;
      complex5.add(0.0);
      complex1.sqrt();
      complex6.NaN.add(0.0);
      Complex complex7 = complex4.tanh();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.log();
      complex3.subtract(20.0);
      complex1.getField();
      Complex.valueOf(20.0, 0.0);
      complex2.divide(complex1);
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.reciprocal();
      Complex complex1 = new Complex(Double.NaN, (-3525.57));
      Complex complex2 = Complex.ONE;
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.subtract(1.0972476870931676E-268);
      complex4.getField();
      Complex.valueOf((-3886.85927), 1.0972476870931676E-268);
      Complex complex5 = complex3.add(Double.NaN);
      Complex complex6 = Complex.ONE;
      complex6.hashCode();
      complex1.sqrt();
      complex5.add(0.41421356237309515);
      Complex complex7 = complex5.tanh();
      complex7.asin();
      complex7.isNaN();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1127.22569, 1127.22569);
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
      complex0.conjugate();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.INF.getField();
      complex1.isInfinite();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1127.22569, 1127.22569);
      complex0.sinh();
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1127.22569, 1127.22569);
      Complex complex1 = complex0.conjugate();
      complex0.readResolve();
      Complex complex2 = new Complex(1127.22569);
      complex2.I.acos();
      complex2.equals(complex1);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.868024734458), (-158.868024734458));
      Complex complex1 = complex0.I.sqrt();
      complex1.I.multiply(complex0);
      complex1.tanh();
      Complex complex2 = complex0.add((-158.868024734458));
      complex0.exp();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(3374.6950085, (-2408.8741246));
      Complex complex1 = Complex.valueOf(1083.23042481273);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.readResolve();
      complex0.multiply(1);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.log();
      complex3.toString();
      complex2.I.toString();
      complex3.sin();
      Complex complex4 = complex0.negate();
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.log();
      complex1.hashCode();
      Complex complex4 = complex3.subtract(20.0);
      complex1.getField();
      Complex.valueOf(20.0, 0.0);
      complex2.divide(complex1);
      complex0.sin();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.conjugate();
      complex5.isNaN();
      complex6.tan();
      Complex complex7 = Complex.NaN;
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.multiply(1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.log();
      complex2.subtract((double) 1);
      complex2.getField();
      Complex complex5 = Complex.valueOf((double) 1, (-1017.54643));
      Complex complex6 = complex5.divide(complex4);
      complex4.add((-576.91361144381));
      complex1.sqrt();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.add(194.993);
      complex8.tanh();
      complex6.multiply(complex2);
      complex6.multiply((-1.0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.negate();
      complex1.getField();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.ONE.pow(complex2);
      complex3.equals(complex2);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-335.8731), 2.2951597845188004E-8);
      Complex complex2 = complex0.divide(complex1);
      Object object0 = complex0.readResolve();
      Complex complex3 = new Complex(640.0);
      complex1.log();
      complex2.getArgument();
      complex2.reciprocal();
      Complex complex4 = new Complex((-335.8731), 2.2951597845188004E-8);
      Complex complex5 = complex4.multiply(complex1);
      complex5.negate();
      Complex.valueOf(67.16921, Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex(6.283185307179586);
      Complex complex7 = complex6.createComplex(Double.NaN, 0.0997506234413965);
      complex7.conjugate();
      complex1.equals(object0);
      complex7.createComplex(256.4, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3603.92418441, (-335.8731));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sin();
      complex2.add(3603.92418441);
      Complex complex4 = complex2.conjugate();
      complex1.isNaN();
      complex4.tan();
      Complex complex5 = Complex.NaN;
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.divide(1609.63);
      complex1.multiply(1609.63);
      Complex complex3 = Complex.valueOf(1114.960657312, (-2580.2010936630863));
      Complex complex4 = complex2.log();
      complex0.tan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.conjugate();
      complex6.tan();
      complex3.sqrt1z();
      complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.NaN;
      complex2.hashCode();
      Complex complex4 = complex1.subtract(0.0);
      complex3.getField();
      Complex complex5 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex0.divide(complex1);
      complex4.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.add(20.0);
      complex0.sqrt();
      Complex complex7 = complex6.exp();
      complex5.add(7.402515147337309E-4);
      Complex complex8 = new Complex(20.0);
      complex3.getReal();
      complex4.tanh();
      Complex complex9 = new Complex(2360.581, (-2485.33));
      complex9.subtract(complex7);
      complex1.createComplex((-1.3810978455418157), 2.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-335.8731), 2.2951597845188004E-8);
      Complex complex2 = complex0.divide(complex1);
      complex0.log();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.add(2.2951597845188004E-8);
      complex4.ZERO.conjugate();
      complex4.isNaN();
      complex0.NaN.getField();
      Complex complex5 = complex2.tan();
      Complex complex6 = Complex.NaN;
      complex6.NaN.cos();
      complex2.createComplex(274538.8919645292, 632.1619542);
      complex5.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex((-2182.4525229));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.valueOf(0.7071067811865475, Double.NaN);
      complex4.multiply(complex0);
      complex1.abs();
      Complex complex5 = complex1.log();
      complex5.getArgument();
      complex3.reciprocal();
      complex1.multiply(complex5);
      Complex.valueOf(0.0, 1.0);
      complex1.createComplex(Double.NaN, 0.7071067811865475);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.868024734458), (-158.868024734458));
      Complex complex1 = complex0.I.sqrt();
      complex0.I.nthRoot(1);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.multiply((-158.868024734458));
      Complex complex5 = complex2.multiply((-3692.865916779408));
      complex2.toString();
      complex4.toString();
      Complex complex6 = complex1.sin();
      complex4.readResolve();
      Complex complex7 = complex5.negate();
      Complex complex8 = complex1.log();
      complex6.getArgument();
      complex8.reciprocal();
      Complex complex9 = Complex.valueOf(1746.676994);
      complex9.multiply(complex7);
      Complex.valueOf((-1430.469406), (-1068.536228));
      complex8.createComplex((-3263.0), 0.6190821081743221);
      complex3.conjugate();
      Complex complex10 = Complex.ONE;
      complex10.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.868024734458), (-158.868024734458));
      complex0.I.sqrt();
      complex0.divide((double) 1);
      complex0.multiply(1.8939638137817383);
      Complex complex1 = Complex.valueOf(0.9238795325112867, (-523.9644506242));
      complex0.log();
      complex0.tan();
      Complex complex2 = Complex.I;
      complex2.conjugate();
      complex2.tan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-335.8731), 2.2951597845188004E-8);
      complex0.divide(complex1);
      Complex complex2 = complex0.log();
      Complex complex3 = new Complex((-335.8731), 0.2386477291584015);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.add((-1320.49));
      complex5.conjugate();
      complex4.isNaN();
      complex0.tan();
      Complex complex6 = Complex.NaN;
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.log();
      complex4.toString();
      complex3.I.toString();
      complex1.NaN.toString();
      Complex complex5 = complex3.ZERO.sin();
      Complex complex6 = (Complex)complex2.readResolve();
      complex0.ONE.negate();
      complex3.log();
      complex1.getArgument();
      complex3.reciprocal();
      complex3.multiply(complex0);
      Complex.valueOf(Double.NaN, 1615.92);
      complex6.createComplex(1811.9513273, 1);
      complex5.conjugate();
      complex6.equals(object0);
      Complex.valueOf(Double.NaN);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(37);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf((-1606.76492495228));
      Complex complex4 = complex1.multiply(0.0);
      Complex complex5 = complex0.multiply((-3692.865916779408));
      complex2.add((double) 37);
      complex2.log();
      complex1.abs();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.pow(complex2);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex2.exp();
      complex8.INF.tan();
      complex9.hashCode();
      Complex complex10 = Complex.valueOf((-2197.063126765758), 4092.0);
      Complex complex11 = complex10.asin();
      Complex complex12 = complex7.sinh();
      Complex complex13 = complex4.sqrt();
      Complex complex14 = complex11.subtract(complex3);
      complex5.getArgument();
      complex12.tanh();
      complex5.divide(complex8);
      complex6.pow(3535.0);
      complex14.abs();
      complex8.multiply(17);
      complex13.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-335.8731), 2.2951597845188004E-8);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.NaN;
      complex2.pow(complex4);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.exp();
      complex6.hashCode();
      complex2.asin();
      Complex complex7 = complex1.sinh();
      complex6.sqrt();
      complex2.subtract(complex7);
      complex7.getArgument();
      Complex complex8 = complex2.tanh();
      complex3.divide(complex5);
      complex4.pow(2.2951597845188004E-8);
      complex8.abs();
      complex3.multiply((-2146466499));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.log();
      complex1.hashCode();
      Complex complex5 = complex4.subtract(20.0);
      complex1.getField();
      Complex complex6 = Complex.valueOf(20.0, 0.0);
      Complex complex7 = complex3.divide(complex2);
      complex7.add(0.0);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex5.exp();
      complex6.add(1.5430806348152437);
      complex7.tanh();
      complex7.getReal();
      complex7.tanh();
      complex8.subtract(complex9);
      complex10.createComplex((-1.0), Double.POSITIVE_INFINITY);
      complex7.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-335.8731), 2.2951597845188004E-8);
      Complex complex2 = complex0.divide(complex1);
      complex0.log();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.add(2.2951597845188004E-8);
      complex4.ZERO.conjugate();
      complex4.isNaN();
      complex2.tan();
      Complex complex5 = Complex.NaN;
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.log();
      complex1.hashCode();
      Complex complex5 = complex4.subtract(20.0);
      complex1.getField();
      Complex complex6 = Complex.valueOf(20.0, 0.0);
      Complex complex7 = complex3.divide(complex2);
      complex3.add((-191.528906146325));
      complex6.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.sqrt();
      complex8.I.exp();
      complex7.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex5.tanh();
      complex7.getReal();
      complex2.tanh();
      complex9.subtract(complex5);
      complex5.createComplex((-1.3810978455418157), (-5113.26157));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(3114.6440723832293);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(3114.6440723832293);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex1.divide(3114.6440723832293);
      Complex complex8 = complex6.acos();
      complex5.abs();
      Complex complex9 = complex0.pow(complex7);
      complex9.exp();
      Complex complex10 = Complex.ZERO;
      complex10.hashCode();
      complex8.asin();
      complex4.sinh();
      Complex complex11 = complex7.sqrt();
      complex2.subtract(complex10);
      complex9.getArgument();
      complex8.tanh();
      complex1.divide(complex9);
      Complex complex12 = complex5.pow(8120.468025592274);
      complex12.abs();
      complex11.multiply(1076);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1695.9281857));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.NaN.multiply(complex1);
      complex0.NaN.abs();
      complex2.equals(complex3);
      complex0.sqrt1z();
      int int0 = 134217729;
      complex0.multiply(134217729);
      complex3.divide(1034.976308);
      double double0 = 0.0;
      Complex complex4 = Complex.valueOf((-961.045247), (-3.8207793300052055E-8));
      // Undeclared exception!
      complex4.nthRoot(134217729);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.readResolve();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.log();
      complex4.toString();
      complex3.I.toString();
      complex1.NaN.toString();
      complex3.ZERO.sin();
      Complex complex5 = (Complex)complex2.readResolve();
      complex0.ONE.negate();
      complex3.log();
      complex1.getArgument();
      Complex complex6 = complex3.reciprocal();
      complex3.multiply(complex0);
      Complex.valueOf((-1.5707963267948966), 1615.92017157);
      complex5.createComplex(2.94326601494077E272, 1811.9513273);
      Complex complex7 = complex0.conjugate();
      complex7.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.868024734458), (-158.868024734458));
      Complex complex1 = complex0.I.sqrt();
      complex0.I.nthRoot(1);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.multiply((-158.868024734458));
      Complex complex5 = complex2.multiply((-3692.865916779408));
      complex5.ZERO.add((-2197.063126765758));
      Complex complex6 = complex5.log();
      complex2.ONE.hashCode();
      Complex complex7 = complex0.subtract((-3692.865916779408));
      complex0.I.getField();
      Complex complex8 = complex7.ZERO.multiply(complex4);
      Complex complex9 = complex8.ZERO.divide(complex2);
      Complex complex10 = complex2.add((-3692.865916779408));
      Complex complex11 = complex10.createComplex((-76.70230985), (-158.868024734458));
      complex11.sqrt();
      Complex complex12 = complex11.tanh();
      complex10.getReal();
      Complex complex13 = complex6.tanh();
      complex6.subtract(complex3);
      complex7.createComplex((-2197.063126765758), 0.0);
      complex2.pow(1.7227904796600342);
      complex13.abs();
      complex12.sinh();
      complex9.getImaginary();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.divide(0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.9999999999999998);
      Complex complex3 = complex2.log();
      complex3.tan();
      Complex complex4 = Complex.NaN;
      complex4.conjugate();
      complex3.tan();
      complex1.sqrt1z();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.toString();
      complex1.toString();
      complex1.toString();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.NaN;
      complex3.readResolve();
      Complex complex4 = complex1.negate();
      complex2.equals((Object) null);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = Complex.I;
      complex6.multiply(2429);
      complex0.divide((-1870.191233827));
      Complex.valueOf((-1632.90444), (double) 2429);
      complex6.nthRoot(459);
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.INF;
      complex7.equals(complex8);
      complex5.acos();
      Complex complex9 = complex8.pow((double) 2429);
      Complex complex10 = Complex.valueOf(3064.1662129758224);
      complex10.sin();
      complex9.acos();
      complex9.sqrt1z();
      Complex complex11 = Complex.valueOf(2.414213562373095);
      complex11.multiply(2429);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.multiply(1);
      Complex complex4 = complex3.multiply(396.17003557806);
      Complex complex5 = complex1.subtract(complex4);
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex4.cos();
      Complex complex8 = Complex.valueOf((-964.746130288), (-964.746130288));
      complex8.cosh();
      complex3.divide(0.7080734182735711);
      Complex complex9 = complex7.acos();
      complex3.abs();
      Complex complex10 = complex6.pow(complex4);
      Complex complex11 = complex9.exp();
      complex11.hashCode();
      complex6.asin();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.sinh();
      Complex complex14 = complex13.sqrt();
      Complex complex15 = complex5.subtract(complex12);
      complex14.getArgument();
      complex5.tanh();
      Complex complex16 = complex5.divide(complex10);
      complex16.pow(1428.96276);
      complex15.abs();
      complex11.multiply(2087);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1606.76492495228));
      Complex complex1 = Complex.ZERO;
      complex0.subtract(complex1);
      Complex complex2 = complex0.divide((-2083.35));
      complex0.pow(complex2);
      Complex complex3 = Complex.ONE;
      Complex.valueOf((-1606.76492495228), (-2083.35));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.868024734458), (-158.868024734458));
      Complex complex1 = complex0.I.sqrt();
      complex0.I.nthRoot(1);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(0.0);
      complex1.multiply((-158.868024734458));
      Complex complex4 = complex2.multiply((-3692.865916779408));
      Complex complex5 = complex4.ZERO.add((-2197.063126765758));
      complex4.log();
      complex3.abs();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.pow(complex6);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.exp();
      complex8.hashCode();
      complex5.asin();
      complex9.sinh();
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex7.subtract(complex10);
      complex7.getArgument();
      complex9.tanh();
      complex9.divide(complex1);
      complex10.pow(0.0);
      complex11.abs();
      complex0.multiply((-2146466499));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2144.065, 1341.3842467);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add(1341.3842467);
      complex1.isNaN();
      complex2.tan();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-1.145160459652136E283));
      Complex complex1 = complex0.multiply(1774.55778830325);
      Complex complex2 = new Complex((-3692.865916779408));
      Complex complex3 = complex2.multiply((-1487.52442));
      Complex complex4 = complex2.add(1582.586759413);
      Complex complex5 = complex4.log();
      complex2.hashCode();
      Complex complex6 = complex0.subtract((-2197.063126765758));
      complex3.getField();
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex0.divide(complex1);
      complex7.add(3.4742610108480497E-91);
      complex0.createComplex((-1487.52442), (-76.70230985));
      Complex complex9 = Complex.I;
      complex9.sqrt();
      complex6.tanh();
      complex4.getReal();
      complex5.tanh();
      complex8.subtract(complex3);
      complex0.createComplex(3.493427277593156E19, (-2166.50472));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.868024734458), (-158.868024734458));
      Complex complex1 = complex0.I.sqrt();
      complex0.I.nthRoot(1);
      complex0.log();
      complex1.cos();
      Complex complex2 = new Complex(1, 1);
      Complex complex3 = new Complex((-8.146080588190463E-9), 4.0962906236847E-236);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex1.I.multiply(0.0);
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.INF.log();
      Complex complex3 = complex0.tan();
      complex3.INF.conjugate();
      Complex complex4 = complex3.tan();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      complex1.getField();
      complex0.I.getArgument();
      complex1.cosh();
      complex0.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(1.5707963267948966);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex5.log();
      complex6.NaN.asin();
      Complex complex7 = complex6.NaN.sqrt1z();
      complex7.tanh();
      complex2.cosh();
      complex3.readResolve();
      try { 
        complex4.nthRoot((-800));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -800
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(3.3576783010266685E-8);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = Complex.valueOf((-367.7200073));
      Complex complex4 = complex2.NaN.multiply(172);
      Complex complex5 = complex4.ONE.subtract((double) 172);
      Complex complex6 = complex0.pow(complex1);
      complex1.abs();
      Complex complex7 = new Complex((-367.7200073), (-367.7200073));
      Complex complex8 = complex1.ONE.multiply(complex7);
      complex6.readResolve();
      Complex complex9 = complex2.sqrt1z();
      Complex complex10 = complex6.acos();
      Complex complex11 = complex0.sqrt1z();
      complex6.ONE.multiply(complex10);
      complex1.getArgument();
      Complex complex12 = complex3.add(complex6);
      complex12.conjugate();
      Complex complex13 = complex11.divide(2336.0);
      complex9.getArgument();
      complex5.add(complex13);
      Complex.valueOf((-794.27841924), (-367.7200073));
      complex0.createComplex((-2626.0), 0.0);
      Complex complex14 = complex8.multiply(3490.9);
      complex14.INF.cosh();
      Complex complex15 = complex14.INF.exp();
      complex14.subtract(2.1987686050231372E-7);
      complex13.tan();
      complex15.isInfinite();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(585.1555262735094, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.cosh();
      complex0.ZERO.cos();
      complex2.tanh();
      Complex complex3 = complex0.sinh();
      complex3.I.subtract(1.7602040767669678);
      Complex complex4 = complex3.acos();
      complex3.exp();
      int int0 = 0;
      Complex complex5 = complex4.createComplex(0.0, 0.0);
      complex5.NaN.reciprocal();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1773.601219226), 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.atan();
      complex3.ONE.atan();
      complex0.getReal();
      complex1.ZERO.reciprocal();
      complex1.ZERO.createComplex((-1807.83750599), 0.0);
      Complex complex4 = complex0.exp();
      complex4.I.exp();
      Complex complex5 = complex4.NaN.pow(complex2);
      complex4.abs();
      Complex complex6 = complex0.multiply(1);
      complex5.acos();
      Complex complex7 = complex5.sqrt1z();
      complex6.createComplex((-1.8791776732592608E-7), 0.0);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1579.82162329016), (-1579.82162329016));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.tan();
      complex0.I.cosh();
      Complex complex3 = complex1.ONE.createComplex((-1773.3271249), (-1579.82162329016));
      complex0.NaN.acos();
      Complex complex4 = complex3.createComplex((-1579.82162329016), (-2237.0));
      Complex complex5 = complex0.ZERO.sinh();
      Complex complex6 = complex5.ZERO.add((-267.5733));
      Complex complex7 = Complex.valueOf((-267.5733), (-414.0));
      Complex complex8 = complex7.add(complex1);
      complex2.abs();
      complex8.atan();
      complex4.createComplex((-1579.82162329016), 0.0);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(3251.304437, 0.0);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ZERO.sinh();
      complex2.NaN.multiply(584);
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(3251.304437, (-191.736));
      Complex complex4 = complex3.ONE.add(complex1);
      complex3.ONE.abs();
      complex3.exp();
      Complex complex5 = complex2.multiply(0);
      complex5.NaN.multiply(complex2);
      complex2.sqrt();
      complex4.tan();
      complex0.toString();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-19.25));
      Complex complex1 = complex0.ONE.multiply((-626));
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.INF.multiply(complex3);
      Complex complex5 = complex0.log();
      complex5.I.divide((-19.25));
      complex5.ONE.readResolve();
      complex5.NaN.getArgument();
      complex3.ONE.tan();
      Complex complex6 = complex4.exp();
      complex6.abs();
      complex6.sin();
      Complex complex7 = complex0.subtract((-19.25));
      Complex complex8 = complex3.asin();
      complex8.NaN.getField();
      complex8.ZERO.negate();
      complex0.exp();
      Object object0 = new Object();
      complex4.I.getField();
      complex2.equals(object0);
      Complex.valueOf(0.0);
      Complex complex9 = complex6.cos();
      complex9.getField();
      complex7.reciprocal();
      complex7.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf(Double.NaN, 418.652587);
      complex0.ONE.pow(complex1);
      Complex complex3 = Complex.valueOf(4.848934634563382E279);
      complex3.ZERO.subtract(0.2409527599811554);
      complex0.createComplex(0.0, 0.0);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1540.884));
      complex0.NaN.reciprocal();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.nthRoot(2919);
      Complex complex1 = complex0.cos();
      complex0.isInfinite();
      complex1.multiply((-3060.204936));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.cos();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1632.82678166);
      Complex complex1 = Complex.ONE;
      complex0.ZERO.subtract(complex1);
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.cosh();
      complex1.INF.sinh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.INF.reciprocal();
      complex4.ONE.sqrt();
      Complex complex5 = complex3.divide(complex0);
      complex3.equals(complex0);
      complex0.ONE.negate();
      complex3.getField();
      complex5.toString();
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.NaN.divide(6.283185307179586);
      Complex complex1 = Complex.INF;
      complex0.toString();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.INF.divide(6.283185307179586);
      complex3.INF.acos();
      Complex complex4 = complex2.ZERO.divide(2.4509711265563965);
      complex4.ONE.divide(2.4509711265563965);
      Complex complex5 = complex0.divide(6.283185307179586);
      complex5.INF.add(complex3);
      complex0.getImaginary();
      Complex complex6 = complex1.pow(complex0);
      complex6.tan();
      complex6.createComplex((-1818.72), 2.4509711265563965);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex5.add(complex7);
      complex2.exp();
      complex8.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.NaN.log();
      complex0.I.pow(0.0);
      Complex complex2 = complex0.multiply(572.12);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.ZERO.tanh();
      complex4.INF.cos();
      Complex complex5 = complex0.cosh();
      complex5.ZERO.divide(20.0);
      Complex complex6 = complex5.acos();
      complex3.I.abs();
      complex5.pow(complex0);
      Complex complex7 = complex0.exp();
      complex6.NaN.hashCode();
      Complex complex8 = complex6.NaN.asin();
      complex8.sinh();
      Complex complex9 = complex7.ZERO.sqrt();
      complex9.ZERO.subtract(complex2);
      complex7.getArgument();
      Complex complex10 = complex6.tanh();
      complex3.divide(complex6);
      Complex complex11 = complex10.pow(0.0);
      complex11.NaN.abs();
      complex5.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.I.pow((-2.9114757102866277E50));
      Complex complex2 = Complex.valueOf(2391.2302528989);
      complex2.INF.toString();
      complex2.INF.multiply(4.455504920700703E157);
      complex0.divide(complex2);
      complex2.exp();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.readResolve();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.log();
      complex4.toString();
      complex3.I.toString();
      complex1.NaN.toString();
      Complex complex5 = complex3.ZERO.sin();
      Object object0 = complex2.readResolve();
      complex0.ONE.negate();
      complex1.equals(object0);
      Complex complex6 = complex0.sqrt1z();
      complex6.I.multiply(1);
      Complex complex7 = complex3.divide(3376.8415649538);
      Complex.valueOf(0.0, 0.0);
      complex7.NaN.nthRoot(1);
      complex6.equals((Object) null);
      complex3.acos();
      complex5.pow((double) 1);
      complex1.sin();
      complex2.acos();
      complex2.sqrt1z();
      Complex.valueOf(0.0);
      complex6.multiply(2371);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cosh();
      complex1.INF.pow((-1440.33239830769));
      Complex.valueOf((-1440.33239830769), (-20.0));
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex0.ONE.readResolve();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.I.cosh();
      complex3.NaN.getField();
      Complex complex5 = complex3.I.pow(complex0);
      Complex complex6 = complex5.I.log();
      complex5.INF.tan();
      Complex complex7 = complex0.createComplex(0.0, 0.0);
      Complex complex8 = complex7.multiply(0.0);
      Complex complex9 = Complex.valueOf(646.521, 646.521);
      complex3.toString();
      complex0.INF.log();
      Complex complex10 = complex7.conjugate();
      complex2.getArgument();
      complex10.NaN.divide((-2338.25661216));
      complex9.getImaginary();
      complex10.multiply(complex8);
      Complex complex11 = complex4.asin();
      Complex complex12 = new Complex(0.0);
      complex0.INF.multiply(complex12);
      complex11.ONE.exp();
      complex11.createComplex((-3657.20022), 486.14642502);
      complex7.tanh();
      complex9.sqrt1z();
      complex6.getImaginary();
      complex4.sinh();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1.0), (-1.0));
      Complex complex2 = complex1.sin();
      complex1.getArgument();
      complex1.I.add(complex2);
      Complex complex3 = complex0.INF.multiply(complex1);
      Complex complex4 = complex0.I.add(967.2620769127246);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.atan();
      complex6.NaN.multiply(776);
      Complex complex7 = complex6.I.createComplex(20.0, (-1.0));
      complex7.I.cosh();
      Complex complex8 = complex5.pow(complex0);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex0.atan();
      complex10.ZERO.divide(complex8);
      complex5.pow(967.2620769127246);
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex4.multiply(complex0);
      complex11.asin();
      complex3.equals(complex5);
      complex5.sqrt1z();
      complex9.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1606.76492495228));
      Complex complex1 = complex0.divide((-2083.35));
      complex1.getArgument();
      complex0.divide(235.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(3114.6440723832293);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.divide(complex1);
      complex1.ONE.log();
      Complex complex3 = complex0.sin();
      complex3.ZERO.add(355.7669843);
      complex2.isNaN();
      Complex complex4 = complex2.tan();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ONE.pow(complex0);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.sin();
      complex3.INF.negate();
      complex0.ZERO.hashCode();
      complex3.I.abs();
      complex0.tan();
      complex3.hashCode();
      complex1.hashCode();
      complex2.createComplex(0.0, 0.0);
      complex1.cosh();
      complex4.add(complex2);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1695.9281857));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.reciprocal();
      complex0.NaN.multiply(complex1);
      complex0.NaN.abs();
      Complex complex3 = complex0.log();
      complex0.getArgument();
      Complex complex4 = complex3.I.reciprocal();
      complex4.ONE.multiply(complex0);
      Complex.valueOf((-2.7883635712109803E-8), (-1695.9281857));
      complex3.createComplex(1804.970330809637, 0.0);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.INF.pow((-669.889844547));
      complex1.atan();
      Complex complex4 = complex3.ONE.log();
      complex0.toString();
      complex1.isNaN();
      Complex complex5 = complex1.multiply(3671);
      complex5.I.abs();
      complex2.INF.divide((-183.123));
      Complex complex6 = complex1.multiply(591);
      Complex complex7 = complex6.I.tanh();
      Complex complex8 = complex6.INF.pow(complex5);
      complex0.getReal();
      Complex complex9 = complex0.sqrt1z();
      complex6.I.subtract(complex7);
      complex9.NaN.divide((double) 3671);
      complex9.ONE.sin();
      Complex complex10 = complex9.ZERO.add(complex5);
      Complex complex11 = complex0.I.cosh();
      complex11.divide(complex1);
      complex2.getArgument();
      Complex complex12 = complex3.cos();
      complex8.isNaN();
      complex7.multiply(3671);
      complex10.divide(complex3);
      complex4.conjugate();
      complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8702183451052442E149, (-1557.2335454722804));
      Complex complex1 = complex0.pow((-1895.22065));
      complex1.NaN.hashCode();
      Complex complex2 = complex0.negate();
      complex1.negate();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = (-1416);
      try { 
        complex0.ONE.nthRoot((-1416));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,416
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1338.8));
      complex0.INF.hashCode();
      Complex complex1 = complex0.tanh();
      complex0.ONE.sin();
      Complex complex2 = complex1.I.createComplex(6655.0, 6655.0);
      complex2.NaN.readResolve();
      Complex complex3 = complex0.createComplex(2.262354850769043, (-1338.8));
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex4.INF.multiply(complex1);
      complex5.ZERO.createComplex(2.0, 6655.0);
      complex5.ONE.toString();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex1.multiply(complex6);
      complex7.ONE.nthRoot(3620);
      Complex complex8 = Complex.valueOf(1676.8688375);
      complex8.INF.tanh();
      complex8.INF.pow((-497.114479828));
      Complex complex9 = complex3.subtract((-1457.38071965));
      complex9.ONE.sqrt1z();
      Complex complex10 = Complex.valueOf(5001.0694722);
      // Undeclared exception!
      complex10.I.nthRoot(3620);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.asin();
      Complex complex1 = complex0.divide(0.0);
      complex1.INF.nthRoot(7);
      Complex complex2 = complex1.ZERO.pow(0.0);
      Complex complex3 = complex0.atan();
      complex3.getField();
      complex1.tanh();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(989.428336999, 989.428336999);
      complex0.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex3.pow(989.428336999);
      complex0.ZERO.toString();
      complex0.abs();
      Complex complex5 = complex3.NaN.add(complex1);
      Complex complex6 = complex5.exp();
      complex6.INF.toString();
      complex2.I.subtract(0.0);
      complex1.ONE.hashCode();
      Complex complex7 = complex1.multiply(1);
      complex2.ZERO.asin();
      complex7.sqrt1z();
      complex1.readResolve();
      Complex complex8 = complex0.pow((-3601.781518));
      complex4.conjugate();
      complex8.subtract(0.0);
      complex4.sinh();
      complex7.getImaginary();
      Complex complex9 = complex7.multiply(989.428336999);
      complex9.add(3966.791);
      Complex complex10 = Complex.valueOf(0.7853981633974483);
      complex10.acos();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-1.957497997726303E-8), (-1.957497997726303E-8));
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ZERO.multiply(1863);
      complex0.NaN.cosh();
      complex1.I.toString();
      Complex complex3 = complex1.NaN.multiply((-2384));
      complex0.ZERO.acos();
      complex2.I.createComplex(1863, 1.511427628805191E111);
      Complex complex4 = complex0.negate();
      complex4.NaN.hashCode();
      complex3.ZERO.getArgument();
      Complex complex5 = complex3.subtract((double) (-2384));
      complex5.ZERO.divide(complex2);
      complex1.sqrt1z();
      complex1.ZERO.conjugate();
      complex5.sin();
      complex1.divide((-1.957497997726303E-8));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex.valueOf(0.0, (-726.53825117));
      complex0.INF.tan();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex0.sqrt1z();
      complex0.I.getField();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex4.sqrt();
      complex4.ONE.getField();
      complex2.hashCode();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex3.INF.multiply(complex2);
      List<Complex> list0 = complex2.nthRoot(944);
      boolean boolean0 = complex0.equals(list0);
      assertTrue(list0.contains(complex2));
      assertFalse(boolean0);
      
      Complex complex8 = complex6.pow(complex3);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex3.asin();
      complex10.ZERO.sqrt1z();
      complex1.add(complex10);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = Complex.valueOf(898.59803, 5.920972420778763E47);
      assertEquals(898.59803, complex11.getReal(), 0.01);
      
      double double0 = complex9.getReal();
      assertEquals(1.557407724654902, double0, 0.01);
      
      Complex complex12 = complex3.exp();
      Complex complex13 = complex7.add(1.557407724654902);
      assertTrue(complex13.isInfinite());
      
      Complex complex14 = complex12.add(complex5);
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(1.8013068176013047, complex14.getReal(), 0.01);
      
      complex7.getField();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertTrue(complex7.equals((Object)complex13));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2951597845188004E-8);
      boolean boolean0 = complex0.isNaN();
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2.2951597845188004E-8, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.INF.log();
      complex1.subtract(20.0);
      complex0.I.nthRoot(1);
      Complex complex4 = complex3.subtract(20.0);
      complex1.I.add(0.0);
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = Complex.valueOf((-849.734028558), 0.0);
      Complex complex3 = complex2.sinh();
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.I.multiply(0.0);
      assertEquals(4.47213595499958, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex4.multiply((-20.0));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex7.equals((Object)complex3));
      
      Complex complex8 = complex0.divide((-849.734028558));
      assertEquals(0.02353677660048525, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1604.80477287844);
      Complex complex2 = complex0.ONE.pow(complex1);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.pow(complex3);
      assertSame(complex4, complex3);
  }
}
