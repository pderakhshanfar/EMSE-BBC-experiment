/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:00:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.05079238074188207, Double.POSITIVE_INFINITY);
      complex0.INF.toString();
      Complex complex2 = complex0.multiply(complex0);
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-642.64863));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf(1.6089565753936768, Double.POSITIVE_INFINITY);
      complex0.pow(complex3);
      complex3.multiply(1002.692672391784);
      complex2.tan();
      Complex complex4 = complex3.sqrt1z();
      complex4.tanh();
      Complex complex5 = complex0.multiply(1371);
      complex5.nthRoot(780);
      complex0.multiply(809);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(4.135457669031131E282, 4.135457669031131E282);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.divide(4.135457669031131E282);
      Complex.valueOf(129.0969478);
      Complex complex3 = new Complex(4.135457669031131E282, (-2549.07));
      complex3.abs();
      Complex complex4 = Complex.valueOf(4.135457669031131E282);
      Complex complex5 = Complex.I;
      complex5.sqrt();
      complex4.pow(complex1);
      Complex complex6 = complex4.multiply(129.0969478);
      complex2.tan();
      Complex complex7 = complex6.sqrt1z();
      complex7.multiply(473);
      complex2.nthRoot(471);
      Complex.valueOf((-707.40671614));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4.135457669031131E282, 4.135457669031131E282);
      complex0.pow(complex1);
      complex0.multiply(46);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.I.subtract(complex2);
      complex2.NaN.reciprocal();
      Complex complex4 = new Complex(4.135457669031131E282);
      Complex complex5 = complex4.ONE.multiply(complex2);
      Complex complex6 = complex2.asin();
      complex6.INF.add(complex3);
      complex1.sqrt();
      complex5.nthRoot(201);
      Complex complex7 = Complex.I;
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(51.26447544730592);
      Complex complex2 = new Complex(3476.3462753753834, (-120.825091));
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(1881.7899885);
      complex1.nthRoot(1);
      complex3.conjugate();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex4.pow(complex1);
      complex5.multiply(complex6);
      complex5.toString();
      Complex complex7 = Complex.NaN;
      complex7.multiply(1193);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      complex0.I.hashCode();
      complex0.acos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-20.0), (-1297.0));
      Complex complex3 = new Complex((-20.0));
      Complex complex4 = complex2.tanh();
      complex4.readResolve();
      Complex complex5 = new Complex(774.0906974688111, 20.0);
      try { 
        complex0.nthRoot((-2613));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,613
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4.135457669031131E282);
      complex0.sqrt();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.tan();
      complex2.sqrt1z();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex4.subtract((-20.0));
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex7.I.acos();
      Complex complex9 = complex2.multiply(complex4);
      complex9.ONE.cosh();
      complex9.ZERO.nthRoot(1118);
      complex2.readResolve();
      complex8.ZERO.pow((-20.0));
      Complex complex10 = complex3.sqrt();
      complex10.exp();
      complex8.readResolve();
      complex6.add((-20.0));
      complex6.abs();
      complex5.nthRoot(1118);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      Complex complex1 = complex0.log();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.tanh();
      complex1.INF.divide(490.8302);
      complex5.ONE.toString();
      Complex complex6 = complex0.divide(Double.POSITIVE_INFINITY);
      complex6.I.sin();
      complex6.tanh();
      complex6.ONE.sqrt();
      Complex complex7 = complex2.pow(complex4);
      complex0.INF.reciprocal();
      complex3.toString();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex3.multiply((-1135.3352261));
      complex9.NaN.negate();
      complex9.ZERO.cosh();
      Complex complex10 = complex1.acos();
      complex8.sin();
      complex9.conjugate();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.log();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex1.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(2076.300860946, 1318.22242);
      Complex complex1 = complex0.divide(3565.887122845);
      complex1.toString();
      Complex complex2 = complex0.multiply(2076.300860946);
      complex0.abs();
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = new Complex(40.19140625, 1173.895484100079);
      complex4.add((-160.84224));
      Complex complex5 = new Complex(Double.NaN);
      Complex complex6 = Complex.valueOf(3783.36, 40.19140625);
      complex3.tan();
      Complex complex7 = new Complex(1.4807934761047363, Double.NaN);
      complex6.tanh();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.sin();
      Complex.valueOf(2226.6894828);
      Complex complex3 = complex2.sqrt();
      complex3.NaN.tan();
      Complex complex4 = Complex.ONE;
      complex1.pow(complex4);
      Complex complex5 = Complex.valueOf(2226.6894828);
      complex5.multiply(17);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.abs();
      Complex complex1 = new Complex(Double.NaN, 1.0);
      Complex complex2 = complex1.divide((-2845.9797021322));
      complex0.toString();
      Complex complex3 = complex0.multiply((-160.84224));
      complex1.abs();
      Complex complex4 = complex1.subtract(complex3);
      complex1.toString();
      Complex complex5 = complex2.add(38.47841760435743);
      complex0.hashCode();
      complex0.multiply(1.0);
      complex2.add(complex4);
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = Complex.ONE;
      complex7.sqrt();
      complex1.readResolve();
      Complex complex8 = complex5.subtract((-4061.9053976709));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.sin();
      Complex complex11 = complex8.subtract(complex9);
      complex6.negate();
      complex1.multiply(Double.NaN);
      complex2.tanh();
      complex10.abs();
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2076.300860946, 2076.300860946);
      Complex complex1 = complex0.divide((-160.84224));
      Complex complex2 = Complex.I;
      complex2.toString();
      Complex complex3 = complex1.multiply(2886.2529688333243);
      complex3.abs();
      Complex complex4 = complex1.subtract(complex0);
      complex4.toString();
      Complex complex5 = complex1.add(2886.2529688333243);
      complex2.hashCode();
      Complex complex6 = complex5.multiply(52691.37863667558);
      Complex complex7 = complex6.add(complex2);
      complex5.pow(complex2);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex3.abs();
      Complex complex9 = complex7.tan();
      complex9.ZERO.atan();
      Complex.valueOf(52691.37863667558, (-808.0));
      Complex complex10 = new Complex((-1.4015110811648513E195));
      complex10.tan();
      Complex complex11 = Complex.INF;
      complex8.getReal();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.multiply(1577695624);
      Complex.valueOf((-808.0));
      complex13.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(212.08011);
      Complex complex1 = complex0.tan();
      complex1.pow(4.135457669031131E282);
      Complex complex2 = complex1.divide(4.135457669031131E282);
      Complex complex3 = Complex.valueOf(212.08011, 985.0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex2.sin();
      Complex.valueOf((-1813.2083), (-1813.2083));
      complex4.tanh();
      Complex complex6 = new Complex((-1113.79494197351), Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.negate();
      Complex complex8 = complex4.tan();
      complex8.asin();
      complex5.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(2076.300860946, 2076.300860946);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.conjugate();
      complex2.subtract(870.82385176);
      Complex complex3 = complex0.pow(complex1);
      complex2.log();
      Complex complex4 = new Complex(2076.300860946);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.INF;
      complex6.readResolve();
      complex2.pow(complex4);
      complex0.createComplex((-1348.68495148), (-1348.68495148));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = new Complex(6.283185307179586);
      complex5.abs();
      complex1.abs();
      Complex complex9 = complex3.atan();
      complex5.getArgument();
      Complex complex10 = complex9.tanh();
      complex9.tan();
      Complex.valueOf(610.63378, 1923.009565324);
      complex10.log();
      Complex complex11 = complex4.acos();
      complex11.isNaN();
      Complex complex12 = new Complex(0.7853981054066029, (-160.84224));
      complex12.tan();
      complex8.getReal();
      Complex complex13 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.createComplex((-235.9252435688537), (-1806.049407));
      complex0.tanh();
      Complex complex3 = complex1.multiply(1.0);
      Complex complex4 = complex3.divide(2.60770320892334E-8);
      Complex complex5 = complex4.atan();
      complex4.getArgument();
      Complex complex6 = complex3.tanh();
      complex0.tan();
      Complex.valueOf(Double.NaN, (-235.9252435688537));
      Complex complex7 = complex2.acos();
      complex7.isNaN();
      complex6.tan();
      complex5.getReal();
      Complex complex8 = complex3.multiply((-970));
      complex8.multiply(complex3);
      complex4.createComplex((-970), (-235.9252435688537));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-121.434), (-2184.3859));
      complex0.conjugate();
      Complex complex1 = complex0.atan();
      complex0.abs();
      Complex complex2 = complex1.atan();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex3.NaN.tan();
      Complex.valueOf(6.663175904917432E40, (-235.9252435688537));
      Complex complex4 = complex3.exp();
      complex4.getArgument();
      Complex complex5 = complex4.negate();
      try { 
        complex5.ZERO.nthRoot((-377));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -377
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex1.divide((-2691.618208205));
      complex1.sin();
      Complex complex3 = complex2.sin();
      complex0.reciprocal();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.multiply(655);
      Complex complex6 = Complex.ONE;
      complex4.add(complex5);
      complex3.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.0, 1741.48653243637);
      complex0.pow(complex1);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.subtract((-2240.74611928));
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = new Complex(1741.48653243637);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sqrt1z();
      complex1.readResolve();
      complex7.pow(complex2);
      Complex complex8 = complex1.createComplex(1741.48653243637, (-3.851899634615007E14));
      Complex complex9 = Complex.ZERO;
      complex6.tanh();
      complex8.abs();
      Complex complex10 = complex3.cosh();
      complex4.abs();
      Complex complex11 = Complex.NaN;
      complex4.divide((-7.423904974016332E-4));
      complex9.atan();
      Complex.valueOf((-641.7159671013507), (-3.851899634615007E14));
      complex10.getArgument();
      Complex complex12 = Complex.valueOf(0.7853981633974483);
      complex12.tanh();
      complex4.multiply(3377);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5824658870697021, 744.62);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex0.cosh();
      complex5.atan();
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex6.INF.sinh();
      complex7.ZERO.readResolve();
      Complex complex8 = complex4.ZERO.exp();
      Complex complex9 = complex1.ZERO.conjugate();
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex1.add(744.62);
      Complex complex12 = complex5.add(complex3);
      Complex complex13 = complex11.NaN.pow(744.62);
      complex13.createComplex(1788.31755804, 744.62);
      Complex complex14 = complex11.NaN.sqrt1z();
      complex14.INF.getArgument();
      complex9.toString();
      complex11.add(complex8);
      complex9.ZERO.log();
      Complex complex15 = complex0.pow(744.62);
      complex15.NaN.readResolve();
      Complex complex16 = complex9.reciprocal();
      complex16.ZERO.createComplex(0.7853981633974483, 1788.31755804);
      complex15.multiply(1.5824658870697021);
      Complex complex17 = complex0.acos();
      complex17.INF.readResolve();
      complex5.sqrt1z();
      complex10.readResolve();
      complex15.getField();
      complex12.multiply(complex16);
      complex6.reciprocal();
      Complex.valueOf(744.62);
      try { 
        complex14.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(Double.NaN);
      complex0.pow(complex1);
      complex1.log();
      Complex complex2 = new Complex((-524.0));
      Complex complex3 = complex2.sqrt1z();
      complex1.readResolve();
      Complex complex4 = Complex.I;
      complex2.createComplex(-0.0, 0.17090985586643725);
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.INF;
      complex6.multiply(Double.NaN);
      complex0.abs();
      Complex complex7 = Complex.NaN;
      complex6.divide(0.0);
      complex5.atan();
      Complex.valueOf((-235.9252435688537), 218.65553005591);
      Complex complex8 = Complex.ZERO;
      complex8.getArgument();
      Complex complex9 = Complex.ONE;
      complex9.tanh();
      complex3.multiply(464);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.abs();
      Complex complex2 = complex0.pow(0.03234935354596475);
      Complex complex3 = complex2.divide(0.0);
      complex1.sin();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.conjugate();
      complex4.reciprocal();
      complex5.pow(complex0);
      complex2.createComplex(1.0, (-2.9837614633016343));
      Complex complex6 = new Complex((-2842.23), (-2.9837614633016343));
      complex6.tanh();
      complex4.multiply(1.0);
      complex5.abs();
      Complex complex7 = complex5.divide((-3053.7264814622063));
      Complex complex8 = complex3.atan();
      complex8.getArgument();
      Complex complex9 = complex4.tanh();
      complex2.tan();
      Complex.valueOf(0.4515827052894548, Double.NaN);
      complex6.acos();
      complex9.isNaN();
      complex7.tan();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2443.91);
      Complex complex1 = new Complex(2443.91, 2.663119647467697E-9);
      complex1.INF.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.multiply(complex0);
      complex3.ONE.multiply(1342);
      Complex complex4 = complex3.multiply(2443.91);
      Complex complex5 = complex4.sin();
      complex5.I.exp();
      complex2.NaN.sqrt1z();
      Complex complex6 = complex2.add(complex0);
      complex6.NaN.sqrt();
      complex0.ZERO.toString();
      Complex complex7 = complex2.acos();
      Complex complex8 = complex7.log();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex8.atan();
      Complex complex11 = Complex.valueOf(5.275183961165903E212);
      complex11.ZERO.exp();
      Complex complex12 = complex7.NaN.add(148.0);
      complex12.INF.nthRoot(1125745554);
      complex12.add((-2395.26));
      complex12.INF.subtract(complex8);
      Complex complex13 = complex0.multiply(complex10);
      Complex complex14 = complex13.subtract(complex9);
      complex2.sinh();
      Complex.valueOf(2443.91);
      complex12.subtract(148.0);
      complex14.tan();
      complex14.getField();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.pow(complex0);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.INF;
      complex3.divide(complex2);
      complex0.getReal();
      complex1.createComplex(890.1864, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-2169.4));
      complex0.NaN.tanh();
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.tanh();
      complex0.add((-2169.4));
      complex1.getReal();
      Complex complex4 = Complex.valueOf((-2169.4), (-2169.4));
      Complex complex5 = complex4.multiply(complex2);
      complex0.getArgument();
      complex0.abs();
      Complex complex6 = Complex.ONE;
      complex0.equals(complex5);
      complex4.sinh();
      complex0.sin();
      complex0.tan();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf(920.559289379083, 1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.subtract(1.0);
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex3.log();
      Complex complex7 = new Complex(0.17090985586643725);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = (Complex)complex1.readResolve();
      Complex complex10 = complex5.pow(complex6);
      Complex complex11 = complex6.createComplex(1755.0856587, (-705.9));
      Complex complex12 = complex10.tanh();
      complex6.multiply((-705.9));
      complex8.abs();
      complex4.divide(920.559289379083);
      complex12.atan();
      complex5.getArgument();
      Complex complex13 = complex4.tanh();
      complex12.tan();
      complex12.NaN.sin();
      complex5.NaN.divide(complex9);
      Complex.valueOf(2.0, (-2204.15141177));
      complex12.acos();
      complex13.isNaN();
      complex10.tan();
      complex9.getReal();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      complex0.nthRoot(1347);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.subtract(6.283185307179586);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex4.log();
      Complex complex6 = new Complex(6.283185307179586);
      Complex complex7 = complex0.sqrt1z();
      complex5.readResolve();
      Complex complex8 = complex4.pow(complex3);
      Complex complex9 = complex1.createComplex((-1348.68495148), 1.0695004295948552E-281);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.tanh();
      Complex complex12 = complex0.multiply(1534397.99571396);
      complex12.abs();
      complex7.divide(0.0011283474970105538);
      complex0.atan();
      complex2.getArgument();
      complex11.tanh();
      complex4.tan();
      Complex.valueOf(6.283185307179586, 1534397.99571396);
      Complex complex13 = complex8.acos();
      complex12.isNaN();
      Complex complex14 = complex9.tan();
      complex13.getReal();
      complex14.asin();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.abs();
      Complex complex2 = complex1.pow(0.03234935354596475);
      Complex complex3 = complex0.divide(0.8414709848078965);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex1.conjugate();
      complex4.reciprocal();
      complex2.readResolve();
      complex2.getArgument();
      complex2.pow((-3618.9643814297947));
      Complex complex7 = complex5.tanh();
      Object object0 = complex3.readResolve();
      complex6.equals(object0);
      Complex complex8 = Complex.NaN;
      complex8.sinh();
      complex2.sin();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(212.08011);
      Complex complex1 = complex0.tan();
      complex1.abs();
      complex1.pow(4.135457669031131E282);
      Complex complex2 = complex1.divide(4.135457669031131E282);
      complex1.sin();
      Complex complex3 = complex2.sin();
      complex2.conjugate();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.multiply(2147461286);
      Complex complex6 = (Complex)complex3.readResolve();
      Complex complex7 = Complex.I;
      complex7.getArgument();
      complex4.abs();
      complex1.abs();
      complex6.divide(1.5707963267948966);
      complex7.atan();
      complex1.getArgument();
      Complex complex8 = complex7.tanh();
      complex5.tan();
      Complex.valueOf(2.0, 4.135457669031131E282);
      complex4.acos();
      complex6.isNaN();
      Complex complex9 = Complex.I;
      complex9.acos();
      complex0.tan();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = complex0.divide(1.0);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex3.reciprocal();
      complex2.readResolve();
      complex2.getArgument();
      complex5.abs();
      Complex complex6 = Complex.valueOf(261.062596846);
      complex6.pow(Double.NaN);
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex7 = complex2.sinh();
      complex6.sin();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-2169.4));
      Complex complex1 = complex0.NaN.tanh();
      complex1.add((-984.26));
      Complex complex2 = new Complex(3630.606623358, (-984.26));
      complex2.add((-2169.4));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3.526547961682877E-274));
      Complex complex2 = complex1.tan();
      complex2.ONE.sqrt1z();
      complex2.abs();
      complex0.pow(1863133.7688106473);
      Complex complex3 = Complex.valueOf(0.18822603804239713);
      complex3.NaN.subtract(0.9852866695372031);
      complex3.add(0.5800528526306152);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      Complex complex1 = complex0.ONE.pow(2031.2157603065475);
      Complex complex2 = complex1.divide(1.0);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.sin();
      complex4.I.conjugate();
      complex1.reciprocal();
      Complex complex5 = (Complex)complex0.readResolve();
      complex0.NaN.getArgument();
      complex5.abs();
      Complex complex6 = complex5.acos();
      complex4.toString();
      complex6.nthRoot(324);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf(920.559289379083, 1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.subtract(1.0);
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex3.log();
      Complex complex7 = new Complex(0.17090985586643725);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = (Complex)complex1.readResolve();
      Complex complex10 = complex5.pow(complex6);
      complex6.createComplex(1755.0856587, (-705.9));
      Complex complex11 = complex10.tanh();
      complex6.multiply((-705.9));
      complex1.toString();
      complex8.abs();
      complex4.divide(920.559289379083);
      Complex complex12 = complex11.atan();
      complex9.getArgument();
      complex12.abs();
      complex12.pow(342.082);
      complex4.equals(complex9);
      complex5.sinh();
      Complex complex13 = Complex.I;
      complex13.sin();
      Complex complex14 = Complex.valueOf(0.0010862957097835008, 1.56200679236425E253);
      complex14.tan();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-652.63807236), 536.736399332726);
      Complex complex1 = complex0.ZERO.createComplex((-652.63807236), 536.736399332726);
      complex1.I.getArgument();
      complex0.INF.negate();
      complex0.sqrt();
      complex0.acos();
      // Undeclared exception!
      complex0.nthRoot(1587704636);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(246.0046766869);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.NaN.acos();
      complex0.isNaN();
      complex0.abs();
      complex1.nthRoot(1347);
      Complex complex4 = complex1.conjugate();
      complex4.I.negate();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.I.divide(complex3);
      Complex complex8 = complex7.ZERO.divide(1.0);
      Complex complex9 = Complex.valueOf((double) 1347);
      Complex complex10 = complex8.ZERO.divide(complex0);
      complex10.I.sqrt();
      complex4.pow(complex0);
      complex0.atan();
      Complex complex11 = complex0.conjugate();
      complex1.sin();
      complex2.multiply(1);
      complex11.toString();
      Complex complex12 = Complex.INF;
      complex1.add(4117.033066033);
      complex5.getReal();
      complex12.multiply(complex11);
      complex2.isNaN();
      complex4.acos();
      complex11.tan();
      complex3.conjugate();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      complex0.abs();
      complex0.nthRoot(1347);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex1.divide((double) 1347);
      Complex complex7 = Complex.valueOf(1.0);
      complex3.divide(complex4);
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex5.pow(complex0);
      Complex complex10 = complex7.atan();
      Complex complex11 = complex7.conjugate();
      Complex complex12 = complex9.sin();
      Complex complex13 = complex11.multiply(24);
      complex10.toString();
      complex12.sqrt1z();
      complex6.getReal();
      complex13.multiply(complex2);
      complex8.isNaN();
      Complex complex14 = complex1.acos();
      complex4.tan();
      complex9.conjugate();
      complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      complex0.abs();
      Complex complex1 = complex0.pow(2031.2157603065475);
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex1.sin();
      Complex complex3 = complex1.sin();
      Complex complex4 = Complex.I;
      complex4.conjugate();
      Complex complex5 = complex2.reciprocal();
      complex0.readResolve();
      complex5.getArgument();
      complex4.abs();
      complex2.pow(Double.NaN);
      complex3.equals(complex5);
      complex3.sinh();
      complex0.sin();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      Complex complex1 = complex0.ONE.pow(2031.2157603065475);
      Complex complex2 = complex1.divide(1.0);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.sin();
      complex4.I.conjugate();
      Complex complex5 = complex1.reciprocal();
      complex0.readResolve();
      complex0.NaN.getArgument();
      complex0.abs();
      complex5.equals(complex1);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(4.135457669031131E282);
      Complex complex1 = complex0.tan();
      complex1.abs();
      complex0.nthRoot(1347);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.cos();
      complex2.divide(complex4);
      Complex complex6 = complex1.divide(1863133.7688106473);
      Complex complex7 = Complex.valueOf(1863133.7688106473);
      Complex complex8 = Complex.INF;
      complex4.divide(complex8);
      Complex complex9 = Complex.ONE;
      complex9.sqrt();
      Complex complex10 = Complex.ZERO;
      complex10.pow(complex3);
      Complex complex11 = complex3.atan();
      complex11.conjugate();
      complex11.sin();
      Complex complex12 = complex8.multiply(1314);
      complex9.toString();
      complex5.sqrt1z();
      Complex complex13 = new Complex(4117.033066033);
      complex13.add(4117.033066033);
      complex13.getReal();
      complex1.multiply(complex6);
      complex7.isNaN();
      complex13.acos();
      Complex complex14 = Complex.ONE;
      complex14.tan();
      complex12.conjugate();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-7050.506924550629));
      complex0.nthRoot(37);
      complex0.toString();
      Complex complex1 = new Complex((-7050.506924550629));
      complex0.ONE.multiply(complex1);
      Complex complex2 = complex0.NaN.atan();
      complex0.NaN.multiply(complex2);
      Complex complex3 = complex2.ZERO.createComplex(1.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex3.NaN.multiply(37);
      Complex complex6 = complex0.atan();
      complex0.abs();
      complex6.INF.getField();
      complex2.I.toString();
      Complex complex7 = Complex.valueOf((-7050.506924550629), Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.NaN.cosh();
      complex0.cos();
      Complex complex9 = complex2.add(complex6);
      Complex complex10 = complex9.divide(1.0);
      Complex complex11 = complex10.ONE.multiply(complex2);
      complex11.I.pow(complex8);
      complex10.NaN.hashCode();
      Complex complex12 = Complex.ONE;
      complex12.ZERO.multiply((-7050.506924550629));
      Complex complex13 = complex12.I.cosh();
      complex13.I.toString();
      complex4.equals(complex12);
      complex9.abs();
      complex9.readResolve();
      Complex complex14 = complex4.divide(complex5);
      complex14.ONE.getField();
      complex8.multiply((double) 37);
      complex10.negate();
      complex10.negate();
      complex7.multiply(7050.506924550629);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-2169.4));
      complex0.NaN.tanh();
      Complex complex1 = complex0.subtract(4881.10692455063);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.cosh();
      complex2.tanh();
      complex0.abs();
      complex3.acos();
      complex1.nthRoot(1510);
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      complex1.I.abs();
      Complex complex2 = complex1.ONE.pow(2031.2157603065475);
      Complex complex3 = complex2.divide(1.0);
      complex3.sin();
      Complex complex4 = complex3.divide(complex1);
      complex0.divide(1.0);
      Complex complex5 = Complex.valueOf((-1984.8956));
      complex2.divide(complex0);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex2.pow(complex0);
      Complex complex8 = complex4.atan();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.sin();
      complex9.multiply(1);
      complex11.toString();
      complex3.sqrt1z();
      Complex complex12 = complex7.add((-1.0));
      complex6.getReal();
      complex3.multiply(complex12);
      Complex complex13 = Complex.ZERO;
      complex13.isNaN();
      Complex complex14 = complex13.acos();
      complex8.tan();
      complex14.conjugate();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-2169.4));
      complex0.isNaN();
      complex0.abs();
      complex0.nthRoot(1347);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.cos();
      complex1.divide(complex1);
      Complex complex4 = new Complex(2169.4);
      Complex complex5 = complex4.divide((-2169.4));
      Complex complex6 = Complex.valueOf(2169.4);
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = new Complex(1.6419797090870802E-8);
      Complex complex9 = complex8.sqrt();
      complex0.pow(complex6);
      Complex complex10 = complex9.atan();
      complex0.conjugate();
      Complex complex11 = complex7.sin();
      complex7.multiply((-1569));
      complex4.toString();
      Complex complex12 = complex8.sqrt1z();
      Complex complex13 = Complex.INF;
      complex13.add((-636.56));
      complex5.getReal();
      complex11.multiply(complex2);
      complex1.isNaN();
      complex10.acos();
      complex1.tan();
      complex3.conjugate();
      complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.abs();
      Complex complex2 = complex1.pow(2031.2157603065475);
      Complex complex3 = complex0.divide(Double.NaN);
      Complex complex4 = complex0.sin();
      complex3.sin();
      complex4.conjugate();
      complex1.reciprocal();
      complex1.multiply(2147461286);
      complex0.readResolve();
      complex0.getArgument();
      complex2.abs();
      Complex complex5 = complex0.pow(1227.918);
      Complex complex6 = complex5.multiply(Double.NaN);
      complex6.atan();
      Complex complex7 = Complex.I;
      complex7.multiply(2031.2157603065475);
      complex4.divide(complex0);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      ComplexField complexField0 = complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf(920.559289379083, 1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.conjugate();
      complex0.subtract(1.0);
      complex2.pow(complex1);
      Complex complex4 = complex3.log();
      Complex complex5 = new Complex(0.17090985586643725);
      Complex complex6 = Complex.valueOf(920.559289379083);
      Complex complex7 = complex5.conjugate();
      complex4.reciprocal();
      complex6.multiply(2147461286);
      complex1.readResolve();
      complex4.getArgument();
      complex3.abs();
      Complex complex8 = Complex.valueOf(920.559289379083);
      Complex complex9 = complex8.pow(2.3810978455418157);
      complex9.equals(complexField0);
      complex9.sinh();
      complex9.sin();
      complex2.isNaN();
      Complex complex10 = complex7.sqrt1z();
      complex2.cos();
      complex10.sinh();
      Complex complex11 = Complex.NaN;
      complex3.negate();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.tan();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex2.pow(complex1);
      Complex complex3 = complex1.multiply((-1));
      Complex complex4 = new Complex((-1));
      Complex complex5 = complex3.divide(0.0);
      complex0.multiply(2467.0);
      Complex complex6 = complex4.atan();
      complex0.multiply((-501.80969));
      Complex complex7 = new Complex(0.0, 1732.1082301);
      complex6.divide(complex7);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.135457669031131E282, 4.135457669031131E282);
      complex0.abs();
      Complex complex1 = complex0.pow(4.135457669031131E282);
      Complex complex2 = complex1.divide((-271.5));
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex4.reciprocal();
      complex5.readResolve();
      complex0.getArgument();
      complex4.abs();
      complex1.pow(5.848420322163652E282);
      complex0.equals(complex3);
      complex0.sinh();
      complex1.sin();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      complex1.I.abs();
      Complex complex2 = complex1.ONE.pow(2031.2157603065475);
      Complex complex3 = complex2.divide(1.0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex2.reciprocal();
      complex5.add(complex2);
      Complex complex8 = complex2.ZERO.multiply((-3252));
      Complex complex9 = (Complex)complex0.readResolve();
      complex1.NaN.getArgument();
      complex6.createComplex(Double.NaN, (-2.883847036065813E-246));
      Complex complex10 = complex8.tanh();
      Complex complex11 = complex7.multiply(60519.300951826204);
      complex2.toString();
      complex11.abs();
      complex2.divide(2031.2157603065475);
      Complex complex12 = Complex.I;
      complex12.atan();
      complex9.getArgument();
      complex10.tanh();
      complex3.tan();
      Complex complex13 = Complex.valueOf((-2983.25684737), 0.0);
      Complex complex14 = Complex.valueOf(1.5707963267948966, 0.4980490207672119);
      Complex complex15 = complex14.acos();
      complex15.ZERO.tan();
      complex3.multiply((-3252));
      complex6.divide(complex4);
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.135457669031131E282, 4.135457669031131E282);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.NaN.multiply((-1));
      complex2.pow(0.0);
      Complex complex4 = Complex.valueOf(1260.2504043674, 0.0);
      Complex complex5 = complex4.NaN.pow(complex0);
      Complex complex6 = complex1.ONE.subtract(1547.0);
      complex0.ZERO.pow(complex1);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.sqrt1z();
      complex8.I.readResolve();
      Complex complex9 = complex7.I.pow(complex6);
      complex1.abs();
      Complex complex10 = complex5.pow(0.0);
      complex10.equals(complex9);
      Complex complex11 = complex0.sinh();
      complex1.sin();
      complex11.isInfinite();
      complex10.sqrt1z();
      complex3.cos();
      complex9.sinh();
      complex7.negate();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(246.0046766869);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex0.isNaN();
      complex0.abs();
      complex1.nthRoot(1347);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.I.divide(complex2);
      Complex complex8 = complex7.ZERO.divide(1.0);
      Complex complex9 = Complex.valueOf((double) 1347);
      complex9.NaN.add(complex2);
      Complex complex10 = complex8.ZERO.divide(complex0);
      complex10.I.sqrt();
      complex3.pow(complex0);
      complex0.atan();
      Complex complex11 = complex0.conjugate();
      complex11.nthRoot(1347);
      complex1.sin();
      complex2.multiply(1);
      complex11.toString();
      Complex complex12 = complex4.sqrt1z();
      complex1.add(4117.033066033);
      complex5.getReal();
      complex12.multiply(complex11);
      complex2.isNaN();
      complex1.ONE.conjugate();
      complex3.acos();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex7.multiply(complex13);
      complex11.tan();
      complex2.conjugate();
      complex14.isNaN();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.equals("NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE");
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.divide(complex0);
      complex2.INF.tan();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.ONE;
      complex3.cos();
      complex3.ONE.readResolve();
      complex2.conjugate();
      complex0.sqrt1z();
      Complex complex5 = complex4.pow((-20.0));
      complex1.getReal();
      Complex complex6 = new Complex((-1.1623125976292733E-7), (-1.1623125976292733E-7));
      complex6.sinh();
      complex4.subtract(0.0);
      Complex.valueOf(2098.3556233939657, (-20.0));
      complex5.subtract(complex3);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.I.sqrt1z();
      complex2.I.hashCode();
      complex0.multiply(1727);
      Complex complex3 = complex1.divide(4.2593159933297506E-17);
      Complex complex4 = complex1.subtract(Double.NaN);
      Complex complex5 = complex1.multiply((double) 1727);
      Complex complex6 = Complex.ZERO;
      complex6.abs();
      complex5.nthRoot(2946);
      Complex complex7 = complex0.multiply((-340));
      complex1.hashCode();
      Complex complex8 = complex3.sin();
      Complex complex9 = Complex.valueOf((-1.0));
      complex8.divide(complex4);
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = complex6.createComplex((-340), 2.0);
      Complex complex12 = complex9.add((double) (-340));
      Complex complex13 = complex5.sinh();
      complex0.equals("UM_n#EYo*71\"rq!H/]");
      complex7.getField();
      complex10.nthRoot(306);
      complex10.asin();
      complex11.sqrt();
      complex12.equals(complex13);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-0.6645660423773817));
      Complex complex1 = complex0.multiply(0.0);
      complex0.getImaginary();
      Complex complex2 = complex0.sqrt1z();
      complex1.abs();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = Complex.ONE;
      complex5.hashCode();
      Complex complex6 = complex1.reciprocal();
      complex6.hashCode();
      complex4.getReal();
      complex2.isInfinite();
      complex1.getField();
      Complex complex7 = Complex.INF;
      complex7.abs();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf(920.559289379083, 1.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.subtract(1.0);
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex3.log();
      Complex complex7 = new Complex(0.17090985586643725);
      Complex complex8 = complex7.sqrt1z();
      complex1.readResolve();
      Complex complex9 = complex5.pow(complex6);
      Complex complex10 = complex6.createComplex(1755.0856587, (-705.9));
      Complex complex11 = complex9.tanh();
      complex6.multiply((-705.9));
      complex1.toString();
      complex8.abs();
      complex4.divide(920.559289379083);
      complex11.atan();
      complex5.getArgument();
      complex4.tanh();
      complex11.tan();
      Complex complex12 = Complex.valueOf(2.0, (-2204.15141177));
      complex11.acos();
      complex12.multiply(7);
      Complex complex13 = Complex.valueOf(3235449.7279307917);
      complex10.divide(complex13);
      Complex complex14 = Complex.valueOf((-2204.15141177));
      complex14.tan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.135457669031131E282, 4.135457669031131E282);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.NaN.multiply((-1));
      complex2.pow(0.0);
      Complex complex3 = complex1.divide(2467.0);
      Complex complex4 = complex1.multiply((double) (-1));
      complex0.atan();
      complex4.multiply(3238.09113);
      complex0.divide(complex3);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(4.135457669031131E282);
      Complex complex1 = complex0.tan();
      complex1.abs();
      Complex complex2 = complex1.pow(2031.2157603065475);
      Complex complex3 = complex0.divide(0.6645660423773817);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.sin();
      complex4.conjugate();
      complex1.reciprocal();
      complex1.multiply(2147461286);
      complex0.readResolve();
      complex0.getArgument();
      complex2.abs();
      Complex complex6 = complex0.pow(1227.918);
      complex4.equals((Object) null);
      complex0.sinh();
      complex5.sin();
      complex5.isInfinite();
      complex2.sqrt1z();
      complex0.cos();
      complex0.sinh();
      Complex complex7 = Complex.NaN;
      complex7.negate();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6.33097561889469E-211);
      Complex complex2 = complex1.ONE.sin();
      complex0.getImaginary();
      Complex complex3 = complex0.INF.multiply((-2183.584213848702));
      complex0.getImaginary();
      Complex complex4 = complex0.sqrt1z();
      complex4.NaN.abs();
      complex2.readResolve();
      complex0.getArgument();
      complex4.abs();
      complex0.pow(0.0);
      complex2.equals(complex1);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex1.sin();
      Complex complex7 = Complex.NaN;
      complex7.isInfinite();
      complex5.sqrt1z();
      complex2.cos();
      complex6.sinh();
      complex5.negate();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-309.89));
      complex0.isInfinite();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.sinh();
      complex3.negate();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, (-1461.5352798975966));
      Complex complex2 = complex1.I.divide(complex0);
      complex1.getReal();
      Complex complex3 = complex2.add((-2638.41314044));
      complex3.ZERO.getArgument();
      Complex complex4 = complex2.log();
      complex4.I.readResolve();
      Complex.valueOf(0.0, (-2638.41314044));
      Complex complex5 = complex3.tan();
      Complex complex6 = complex2.multiply((-627));
      Complex complex7 = complex6.ZERO.add((-2291.0262937));
      complex7.INF.createComplex(0.0, 0.0);
      try { 
        complex5.INF.nthRoot((-361));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -361
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(856.9488, 2382.0268060424);
      Complex complex1 = complex0.cos();
      complex1.INF.atan();
      complex1.createComplex(0.0, 2382.0268060424);
      Complex complex2 = Complex.valueOf(856.9488, 856.9488);
      try { 
        complex2.I.nthRoot((-419));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -419
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex((-1146.087), 1411.520123660242);
      complex1.INF.sinh();
      Complex complex2 = complex1.I.log();
      complex0.getField();
      Complex complex3 = complex0.sin();
      complex3.ONE.createComplex((-1146.087), 1411.520123660242);
      complex0.getImaginary();
      Complex complex4 = complex1.pow(1.0);
      Complex complex5 = complex4.INF.asin();
      complex4.getArgument();
      complex0.tan();
      Complex complex6 = complex0.sqrt();
      complex4.sqrt1z();
      Complex complex7 = complex6.NaN.conjugate();
      Complex.valueOf(470.5260115485, (-1146.087));
      complex1.NaN.toString();
      complex3.NaN.cosh();
      complex6.getReal();
      complex3.hashCode();
      complex2.tanh();
      complex4.ZERO.subtract(5.721951534729663E-8);
      complex4.divide(1.4212865829467773);
      complex7.asin();
      complex4.subtract(complex6);
      complex3.sqrt1z();
      complex5.add(0.0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.135457669031131E282, 4.135457669031131E282);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.pow(complex0);
      complex2.NaN.multiply((-1));
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = Complex.valueOf(1260.2504043674, 0.0);
      Complex complex5 = complex4.NaN.pow(complex0);
      complex5.ZERO.conjugate();
      Complex complex6 = complex1.ONE.subtract(1547.0);
      complex0.ZERO.pow(complex1);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.sqrt1z();
      complex8.I.readResolve();
      complex7.I.pow(complex6);
      Complex complex9 = complex0.createComplex((-705.9), 4.135457669031131E282);
      complex9.ONE.tanh();
      complex9.ONE.multiply(0.0);
      complex0.toString();
      complex0.abs();
      complex9.divide(0.0);
      Complex complex10 = complex8.atan();
      complex2.getArgument();
      Complex complex11 = complex10.tanh();
      complex3.tan();
      Complex complex12 = Complex.valueOf(3.479157135998568E214, 0.0);
      complex11.acos();
      complex6.multiply((-1));
      complex6.divide(complex12);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sin();
      complex0.abs();
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.INF.asin();
      complex2.atan();
      int int0 = (-1407);
      try { 
        complex0.nthRoot((-1407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,407
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.INF.add(126.56293276283);
      Complex.valueOf((-1984.8956), 0.0);
      Complex complex3 = complex0.pow(457.6927);
      complex0.INF.hashCode();
      complex3.isNaN();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.sqrt();
      complex2.I.cosh();
      Complex complex3 = complex1.ZERO.log();
      Complex complex4 = complex0.add(complex1);
      complex4.I.log();
      complex3.readResolve();
      complex2.log();
      complex3.readResolve();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.equals("NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE");
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.divide(complex0);
      complex2.INF.tan();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.cos();
      complex3.ONE.readResolve();
      Complex complex6 = complex2.ONE.divide(4881.10692455063);
      Complex complex7 = complex3.ZERO.subtract((-1238.7086));
      complex0.ONE.multiply(4881.10692455063);
      complex2.abs();
      complex5.nthRoot(2946);
      Complex complex8 = complex4.multiply(1);
      complex8.ONE.hashCode();
      Complex complex9 = complex8.INF.sin();
      Complex complex10 = Complex.valueOf(3662.3901163672);
      complex9.ONE.divide(complex10);
      complex9.NaN.sqrt1z();
      complex8.ZERO.createComplex(6.283185307179586, 1);
      complex2.add(668.0);
      complex1.sinh();
      complex6.equals(complex4);
      complex0.getField();
      complex1.nthRoot(2946);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(4009.4710656, 4009.4710656);
      complex0.nthRoot(1);
      Complex complex1 = complex0.conjugate();
      complex1.getField();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.ONE.conjugate();
      complex3.I.negate();
      complex2.getImaginary();
      Complex complex4 = complex1.multiply(complex0);
      complex4.ZERO.pow(complex3);
      complex4.INF.nthRoot(1);
      Complex complex5 = complex1.multiply(944);
      Complex complex6 = complex5.acos();
      complex1.toString();
      complex1.ZERO.subtract((double) 944);
      complex1.ZERO.acos();
      complex2.nthRoot(944);
      Complex complex7 = complex4.cosh();
      complex6.tanh();
      complex6.multiply(complex1);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-608.7718187003139));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.divide((-3081.5993));
      complex2.ZERO.hashCode();
      Complex complex3 = complex1.I.cosh();
      complex3.INF.tan();
      Complex complex4 = complex0.subtract(complex1);
      complex4.ONE.add(complex1);
      Complex complex5 = complex4.pow((-980.4598606458));
      complex1.sin();
      complex5.INF.atan();
      Complex complex6 = complex3.tanh();
      complex0.ZERO.tan();
      complex6.NaN.sqrt1z();
      complex5.atan();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tan();
      complex1.I.abs();
      Complex complex2 = complex1.ONE.pow(2031.2157603065475);
      Complex complex3 = complex2.divide(1.0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.sin();
      complex5.I.conjugate();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex2.ZERO.multiply((-3252));
      complex0.readResolve();
      complex1.NaN.getArgument();
      complex0.abs();
      Complex complex8 = complex0.pow(1.0);
      complex6.equals(complex2);
      Complex complex9 = complex0.sinh();
      complex7.I.sin();
      complex1.isInfinite();
      Complex complex10 = complex9.sqrt1z();
      complex7.cos();
      complex0.NaN.sinh();
      complex8.negate();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.multiply(0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.divide(0.0);
      complex2.ZERO.toString();
      complex0.isInfinite();
      Complex complex3 = complex1.add(1102.80874609);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.INF;
      complex0.INF.hashCode();
      Complex complex2 = complex1.sinh();
      complex2.NaN.conjugate();
      Complex complex3 = complex0.ZERO.add(complex1);
      complex3.ZERO.pow(complex0);
      Complex complex4 = complex0.multiply(6.283185307179586);
      Complex complex5 = complex4.NaN.multiply((-1));
      Complex complex6 = complex3.conjugate();
      Complex complex7 = complex3.ONE.reciprocal();
      complex6.getField();
      Complex complex8 = complex3.sin();
      Complex complex9 = complex3.cos();
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      complex10.I.log();
      Complex complex11 = complex9.NaN.tanh();
      Complex complex12 = complex7.INF.cosh();
      Complex complex13 = complex9.exp();
      complex7.toString();
      complex7.ONE.nthRoot(2564);
      complex5.abs();
      complex13.ONE.readResolve();
      complex13.abs();
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      complex14.subtract(complex8);
      complex13.conjugate();
      complex12.add(Double.NaN);
      complex11.toString();
      complex11.atan();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(212.76, 538.2);
      Complex complex1 = complex0.ONE.conjugate();
      complex0.getArgument();
      complex0.isInfinite();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.add(complex1);
      complex4.NaN.tan();
      Complex complex5 = complex0.NaN.conjugate();
      complex3.createComplex(510.078373774, 538.2);
      Complex complex6 = complex0.multiply(complex3);
      complex2.nthRoot(1);
      complex5.tan();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.toString();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.INF.pow((-1215.051));
      Complex complex5 = complex4.ZERO.negate();
      complex5.abs();
      complex4.ZERO.pow((-2158.24067));
      complex3.ONE.getArgument();
      Complex complex6 = complex1.sinh();
      complex2.sqrt();
      Complex complex7 = complex3.atan();
      complex7.pow(2334.9763732);
      Complex complex8 = complex6.conjugate();
      complex5.NaN.readResolve();
      Complex complex9 = complex1.sqrt();
      complex5.atan();
      Complex complex10 = complex9.subtract(0.0);
      complex10.NaN.toString();
      Complex complex11 = complex2.exp();
      Complex complex12 = Complex.valueOf((-208.997));
      complex6.ZERO.cosh();
      complex11.divide(complex12);
      complex8.readResolve();
      complex5.multiply(0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3008.7101411126555));
      Complex complex1 = complex0.pow((-1516.521));
      complex1.abs();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex1.NaN.exp();
      Complex complex3 = Complex.valueOf(2552.4293284446, (-1516.521));
      complex3.getField();
      complex0.nthRoot(2702);
      complex0.I.nthRoot(874);
      Complex complex4 = complex0.negate();
      complex4.NaN.reciprocal();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.multiply(874);
      complex6.sinh();
      complex6.INF.pow(complex5);
      Complex complex7 = complex0.negate();
      complex7.pow(complex2);
      Complex.valueOf(3444.9519844614842);
      complex6.cos();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(890.1864);
      complex0.ONE.pow(complex1);
      Complex complex2 = complex0.conjugate();
      complex2.I.multiply(2990);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(246.0046766869);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.NaN.acos();
      complex0.isNaN();
      complex0.abs();
      complex1.nthRoot(1347);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.I.divide(complex3);
      Complex complex9 = complex8.ZERO.divide(1.0);
      Complex.valueOf((double) 1347);
      Complex complex10 = complex9.ZERO.divide(complex0);
      complex10.I.sqrt();
      complex4.pow(complex0);
      complex0.atan();
      Complex complex11 = complex0.conjugate();
      complex11.nthRoot(1347);
      complex1.sin();
      complex2.multiply(1);
      complex11.toString();
      Complex complex12 = complex5.sqrt1z();
      complex1.add(4117.033066033);
      complex6.getReal();
      complex12.multiply(complex11);
      complex2.isNaN();
      complex3.ONE.conjugate();
      complex4.acos();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex8.multiply(complex13);
      complex11.tan();
      complex3.conjugate();
      complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1369.728428007349);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = Complex.valueOf(0.0, 1369.728428007349);
      Complex complex5 = complex4.NaN.add(0.0);
      Complex complex6 = complex4.acos();
      Complex complex7 = complex4.INF.createComplex(0.0, 0.0);
      Complex complex8 = complex7.I.subtract(complex4);
      complex8.I.divide(3291.9916063392);
      complex0.ZERO.abs();
      complex0.atan();
      complex0.getArgument();
      Complex complex9 = complex5.pow(3909.2298153);
      complex6.reciprocal();
      complex4.NaN.subtract(complex7);
      Complex.valueOf(0.0);
      complex9.getReal();
      complex7.createComplex(1.5707963267948966, 0.0);
      Complex complex10 = complex4.log();
      Complex complex11 = complex0.tanh();
      complex11.ONE.subtract(0.0);
      complex6.reciprocal();
      complex10.acos();
      complex3.sin();
      complex7.getField();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      complex0.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.divide((-1490.8531816799025));
      complex2.subtract(6.283185307179586);
      Complex complex3 = Complex.valueOf(6.283185307179586);
      complex1.ONE.readResolve();
      Complex complex4 = complex2.INF.pow(complex3);
      complex1.getArgument();
      complex4.ONE.add(complex3);
      Complex complex5 = complex4.ZERO.log();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.ZERO.log();
      complex0.I.conjugate();
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex4.pow((-1490.8531816799025));
      Complex complex10 = complex9.tan();
      complex10.NaN.divide(complex9);
      Complex complex11 = complex3.add((-1490.8531816799025));
      complex6.NaN.createComplex((-84.90361304), 9.054612259832416E-156);
      complex11.ONE.sqrt1z();
      complex7.subtract(1.0);
      complex4.createComplex(1.0, 0.0);
      complex6.conjugate();
      complex8.add(complex6);
      complex8.asin();
      complex2.negate();
      complex5.negate();
      complex2.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(1.504112720489502, 1.504112720489502);
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.INF.cosh();
      complex2.ONE.sqrt1z();
      complex2.NaN.toString();
      complex0.abs();
      complex0.ZERO.exp();
      complex0.sin();
      Complex complex3 = complex0.NaN.divide((-1868.243232866));
      complex3.ONE.acos();
      int int0 = (-144);
      try { 
        complex1.NaN.nthRoot((-144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -144
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      complex1.ONE.tan();
      complex0.INF.log();
      complex1.subtract(1201.40858);
      complex1.nthRoot(4018);
      Complex complex2 = Complex.valueOf(2756.97);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.INF.add(complex0);
      complex2.multiply(4018);
      complex2.readResolve();
      Complex.valueOf(3.3576783010266685E-8);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1328.16014636));
      Complex complex1 = complex0.ZERO.createComplex(1152.587332371513, 1152.587332371513);
      complex0.readResolve();
      Complex complex2 = complex0.I.asin();
      Complex.valueOf((-1328.16014636));
      complex2.ZERO.abs();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex3.NaN.log();
      complex4.ONE.readResolve();
      complex2.ONE.readResolve();
      complex0.ONE.abs();
      complex3.INF.getField();
      complex0.getReal();
      complex0.toString();
      complex0.toString();
      complex2.exp();
      Complex complex5 = complex1.pow((-1328.16014636));
      Complex complex6 = complex5.I.tanh();
      complex6.sqrt();
      complex5.ONE.toString();
      complex1.sqrt();
      complex1.isNaN();
      complex3.divide(complex2);
      complex2.getArgument();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double double0 = 43.6;
      Complex complex0 = new Complex(43.6);
      Complex complex1 = Complex.I;
      complex1.I.multiply(43.6);
      Complex complex2 = complex0.NaN.subtract(complex1);
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(517.4222663766);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.valueOf(704.5);
      complex3.NaN.abs();
      Complex complex4 = complex2.add(517.4222663766);
      complex1.pow(1650.026568815);
      complex0.divide(1650.026568815);
      complex2.getImaginary();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6.33097561889469E-211);
      Complex complex2 = complex1.ONE.sin();
      complex0.getImaginary();
      Complex complex3 = complex0.INF.multiply((-2183.584213848702));
      complex0.getImaginary();
      Complex complex4 = complex0.sqrt1z();
      complex4.NaN.abs();
      complex4.INF.divide(complex1);
      Complex complex5 = complex4.I.divide(complex0);
      complex5.I.hashCode();
      complex4.reciprocal();
      complex3.hashCode();
      complex1.getReal();
      complex4.isInfinite();
      complex2.getField();
      complex1.abs();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3200.6);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.NaN;
      complex1.subtract(complex2);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-309.89));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(3073.10299);
      Complex complex2 = complex0.NaN.divide(complex1);
      complex0.ONE.pow(complex1);
      Complex complex3 = complex1.I.add(3073.10299);
      Complex complex4 = complex2.NaN.asin();
      Complex complex5 = complex2.reciprocal();
      complex5.ONE.getArgument();
      complex4.tanh();
      complex0.hashCode();
      complex4.getReal();
      Complex.valueOf(0.0, 3073.10299);
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex1.INF.sin();
      Complex complex3 = complex1.NaN.cosh();
      complex0.subtract(complex1);
      Complex complex4 = complex2.multiply((-1.0));
      complex4.ONE.cos();
      Complex complex5 = complex4.NaN.add(complex3);
      complex5.I.pow((-1.0));
      complex0.abs();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex6.ZERO.subtract(6.283185307179586);
      complex7.divide(905.9755);
      complex7.ONE.divide((-1.0));
      complex6.add(complex3);
      complex2.isInfinite();
      Complex.valueOf(0.0, 0.0);
      Complex complex8 = complex1.tan();
      complex8.reciprocal();
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tan();
      Complex complex1 = complex0.I.sqrt1z();
      complex1.I.hashCode();
      Complex complex2 = complex0.multiply(1727);
      Complex complex3 = complex2.ONE.conjugate();
      complex3.sqrt1z();
      complex0.pow((double) 1727);
      complex0.getReal();
      Complex complex4 = complex1.sinh();
      complex4.ONE.subtract((double) 1727);
      Complex.valueOf((-852.4238371), 5058.68);
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.NaN.log();
      complex1.INF.acos();
      complex0.NaN.getArgument();
      complex0.equals((Object) null);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-368.9208234385), (-76.56));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.multiply((-368.9208234385));
      complex3.isNaN();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.pow((-1604.649052905));
      Complex complex6 = complex5.INF.cosh();
      complex6.NaN.readResolve();
      complex2.multiply(complex5);
      Complex complex7 = complex3.subtract(complex2);
      complex7.log();
      complex0.getReal();
      complex0.cosh();
      complex3.abs();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getField();
      Complex complex1 = complex0.divide(1.0);
      complex1.INF.multiply(1.0);
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex0.multiply((-2048.9141600987523));
      complex1.divide(complex3);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      complex1.ONE.sqrt();
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.multiply(0.0);
      complex2.ONE.sqrt();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = Complex.valueOf((-975.777448420136), 1.0);
      complex4.ONE.readResolve();
      complex3.isNaN();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.I.sinh();
      complex7.ONE.asin();
      Complex complex8 = complex6.subtract(complex4);
      complex8.ONE.multiply(complex4);
      complex0.abs();
      complex5.NaN.tanh();
      Complex complex9 = complex4.multiply(1);
      complex3.INF.sinh();
      Complex.valueOf(0.0, 5604.69392391);
      Complex complex10 = complex9.ZERO.conjugate();
      complex3.tanh();
      Complex complex11 = complex2.subtract(complex10);
      complex5.toString();
      complex3.add(complex11);
      Complex complex12 = complex5.negate();
      complex12.INF.tan();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.cos();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex2.INF.negate();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.acos();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      complex0.getField();
      complex0.I.abs();
      List<Complex> list0 = complex0.nthRoot(383);
      assertTrue(list0.contains(complex1));
      
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.conjugate();
      complex8.negate();
      complex5.negate();
      Complex complex9 = complex7.pow(complex8);
      Complex complex10 = complex5.tan();
      Complex complex11 = complex8.multiply(1.0);
      Complex complex12 = complex10.createComplex(20.0, 0.0);
      Complex complex13 = complex12.NaN.conjugate();
      Complex complex14 = complex4.conjugate();
      Complex complex15 = complex9.sqrt1z();
      Complex complex16 = complex14.sqrt();
      Complex complex17 = complex5.subtract((double) 383);
      Complex complex18 = complex14.acos();
      complex18.ONE.exp();
      assertSame(complex18, complex15);
      
      complex5.getField();
      Complex complex19 = complex11.cos();
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      
      complex9.getField();
      assertTrue(complex9.equals((Object)complex13));
      
      Complex complex20 = complex14.log();
      assertEquals(Double.POSITIVE_INFINITY, complex20.getReal(), 0.01);
      
      Complex complex21 = complex2.sinh();
      assertEquals(-0.0, complex21.getImaginary(), 0.01);
      assertEquals(2.2326303196791324, complex21.getReal(), 0.01);
      
      complex8.equals(complex16);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getImaginary(), 0.01);
      
      Complex complex22 = complex10.divide(0.0);
      assertTrue(complex10.equals((Object)complex11));
      assertNotSame(complex22, complex3);
      assertFalse(complex10.equals((Object)complex17));
      assertEquals(0.0, complex10.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex1);
      complex0.I.abs();
      Complex complex3 = complex0.multiply(complex2);
      int int0 = 488;
      Complex complex4 = complex3.ONE.multiply(488);
      Complex complex5 = complex1.acos();
      complex1.log();
      complex3.ONE.subtract(2.113946677051906E252);
      complex3.sin();
      complex4.getArgument();
      Complex complex6 = complex1.multiply(488);
      complex6.INF.reciprocal();
      complex6.INF.cos();
      Complex complex7 = complex5.cos();
      try { 
        complex7.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.readResolve();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.cos();
      complex1.ONE.negate();
      Complex complex3 = complex1.I.add(complex0);
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex4.INF.reciprocal();
      complex5.INF.tan();
      complex0.getArgument();
      double double0 = 0.0;
      try { 
        complex2.I.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex4.tan();
      assertSame(complex8, complex3);
      assertNotSame(complex8, complex2);
      assertSame(complex4, complex6);
      
      boolean boolean0 = complex7.isNaN();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertTrue(complex7.equals((Object)complex1));
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.hashCode();
      int int0 = (-2945);
      try { 
        complex0.nthRoot((-2945));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,945
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
