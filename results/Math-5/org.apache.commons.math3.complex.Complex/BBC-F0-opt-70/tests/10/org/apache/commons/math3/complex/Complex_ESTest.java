/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:04:12 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.add(19.85830193768778);
      Complex complex2 = complex1.log();
      complex1.conjugate();
      Complex complex3 = Complex.ONE;
      complex3.sqrt();
      Complex complex4 = new Complex(1.0, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(1.0, 6.283185307179586);
      complex2.add(complex5);
      Complex complex6 = Complex.valueOf(1.14426851272583, Double.POSITIVE_INFINITY);
      complex6.pow(complex3);
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.ZERO;
      complex4.sin();
      complex0.nthRoot(3222);
      complex6.multiply(complex1);
      complex5.divide(0.2324748933315277);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(414.0208);
      complex0.NaN.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.log();
      complex2.ONE.divide(414.0208);
      Complex complex3 = complex0.subtract(414.0208);
      complex1.acos();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex4.I.reciprocal();
      complex2.NaN.getField();
      complex0.createComplex(414.0208, 2.1932800507380152);
      Complex complex7 = complex1.divide((-1508.1936181681515));
      Complex complex8 = complex7.I.asin();
      Complex complex9 = complex2.asin();
      complex5.pow((-1508.1936181681515));
      complex9.ZERO.divide(complex6);
      complex9.divide((-1841.694858));
      complex2.cos();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex((-1940.0824914378595));
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = new Complex((-751.16441));
      Complex complex7 = complex5.add(complex0);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.ZERO;
      complex7.NaN.exp();
      Complex complex11 = Complex.ONE;
      complex2.divide(complex8);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1607.981926), 1542.4508924975248);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex(0.8223419519661634);
      Complex complex4 = complex2.conjugate();
      complex4.sqrt();
      Complex complex5 = new Complex(4075.822177);
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex6.sqrt();
      complex0.ZERO.toString();
      complex1.pow(complex7);
      Complex.valueOf(0.8223419519661634);
      complex8.subtract(complex2);
      Complex complex9 = Complex.valueOf((-1607.981926), Double.POSITIVE_INFINITY);
      Complex.valueOf((-1607.981926));
      complex9.divide(complex6);
      Complex complex10 = complex7.sqrt1z();
      complex7.tan();
      Complex.valueOf(4075.822177);
      complex1.multiply(complex10);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = Complex.valueOf(1607.981926);
      Complex complex3 = complex2.add(complex1);
      complex2.cosh();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.NaN;
      complex5.toString();
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = Complex.valueOf(1607.981926);
      Complex.valueOf(1607.981926, (-498.5111247361763));
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.valueOf((-498.5111247361763), Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf(1.6063569876284005E-8);
      complex6.divide(complex10);
      Complex complex11 = complex7.tan();
      complex11.multiply(complex9);
      complex11.log();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1607.981926), 1542.4508924975248);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex(0.8223419519661634);
      complex3.subtract(4075.822177);
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = new Complex(4075.822177);
      Complex complex7 = complex4.add(complex6);
      Complex complex8 = complex1.cosh();
      Complex complex9 = complex7.sqrt();
      complex2.add(complex8);
      Complex complex10 = complex1.pow(complex8);
      Complex complex11 = Complex.valueOf(0.8223419519661634);
      Complex complex12 = complex9.subtract(complex2);
      Complex complex13 = Complex.valueOf((-1607.981926), Double.POSITIVE_INFINITY);
      complex11.nthRoot(285);
      complex3.asin();
      Complex complex14 = complex10.exp();
      complex13.multiply(285);
      complex12.subtract(complex5);
      complex6.conjugate();
      complex14.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1607.981926), 1542.4508924975248);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex(0.8223419519661634);
      Complex complex4 = complex2.conjugate();
      complex4.sqrt();
      Complex complex5 = new Complex(4075.822177);
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex6.sqrt();
      complex0.ZERO.toString();
      complex2.add(complex7);
      complex1.pow(complex7);
      Complex.valueOf(0.8223419519661634);
      complex8.subtract(complex2);
      Complex complex9 = Complex.valueOf((-1607.981926), Double.POSITIVE_INFINITY);
      complex9.multiply(1542.4508924975248);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      complex1.nthRoot(1982);
      Complex complex2 = Complex.INF;
      complex0.divide(complex1);
      complex2.INF.sin();
      Complex complex3 = new Complex(1.0196971893310547, Double.POSITIVE_INFINITY);
      complex3.tan();
      complex1.multiply(complex3);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(330.29369824603);
      complex0.ONE.nthRoot(887);
      Complex complex1 = complex0.asin();
      complex1.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf((double) 887);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.I.add((-3088.37308));
      complex0.add(Double.NaN);
      complex0.multiply(1492);
      Complex complex5 = complex0.subtract(complex3);
      complex5.divide((double) 887);
      complex4.subtract(2852.0262611112);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.reciprocal();
      complex1.NaN.pow(complex0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(3268);
      Complex complex2 = complex1.INF.pow(Double.NaN);
      complex0.multiply(complex0);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.557407724654902, 1.557407724654902);
      Complex complex1 = new Complex(1.557407724654902);
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1.557407724654902);
      complex0.INF.divide(Double.NaN);
      Complex complex1 = new Complex(1.557407724654902);
      complex1.equals(complex0);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(1.557407724654902);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = new Complex(2133.526);
      complex5.add(complex2);
      complex4.pow(complex2);
      Complex complex6 = Complex.valueOf(967.317709903241);
      Complex complex7 = complex3.subtract(complex1);
      Complex.valueOf(2133.526, (-5.599235151250239));
      complex7.nthRoot(2655);
      complex6.asin();
      Complex complex8 = new Complex((-3475.392460045824), Double.NaN);
      Complex complex9 = complex4.exp();
      Complex.valueOf(40.0);
      complex5.divide(complex0);
      complex1.sqrt1z();
      complex9.tan();
      complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.557407724654902, (-111.6));
      Complex complex1 = complex0.divide(1.557407724654902);
      Complex complex2 = Complex.valueOf(771.22528416898, (-1607.981926));
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.INF;
      complex6.subtract(1607.981926);
      complex4.conjugate();
      Complex complex7 = complex1.sqrt();
      complex6.add(complex7);
      Complex complex8 = complex2.cosh();
      complex7.sqrt();
      complex4.add(complex1);
      complex1.pow(complex0);
      Complex.valueOf(1.557407724654902);
      Complex complex9 = complex3.subtract(complex5);
      Complex.valueOf(6.283185307179586, 4726.781125941);
      complex6.nthRoot(2655);
      complex0.asin();
      Complex complex10 = new Complex(1.557407724654902, (-3069.7431));
      complex3.exp();
      Complex.valueOf(1.9932945470297703E120);
      complex8.sqrt1z();
      Complex complex11 = new Complex(4726.781125941, 20.0);
      complex11.tan();
      complex9.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(3.601718675118614E-8);
      Complex complex2 = complex0.asin();
      complex0.pow(complex2);
      Complex complex3 = new Complex(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2300.1501280128728, 2300.1501280128728);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.log();
      complex0.subtract(1.557407724654902);
      complex2.conjugate();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex1.add(complex4);
      complex5.cosh();
      Complex complex7 = complex0.sqrt();
      complex3.add(complex2);
      Complex complex8 = new Complex(4726.781125941);
      Complex complex9 = Complex.valueOf((-2087.2734542679));
      complex0.subtract(complex8);
      Complex.valueOf(4726.781125941, 4726.781125941);
      complex7.nthRoot(2655);
      complex5.asin();
      Complex complex10 = new Complex(791.3107512379, 4726.781125941);
      Complex complex11 = complex0.exp();
      Complex complex12 = Complex.valueOf((-1.032634625827871E-7));
      Complex complex13 = complex9.divide(complex6);
      complex10.sqrt1z();
      Complex complex14 = Complex.valueOf((-2087.2734542679), Double.POSITIVE_INFINITY);
      complex14.tan();
      complex13.multiply(complex12);
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.add((-2797.589024));
      complex2.divide(2174.770567775513);
      complex1.pow(complex0);
      Complex complex3 = Complex.valueOf(1426.6);
      complex0.conjugate();
      complex0.ZERO.abs();
      Complex complex4 = Complex.valueOf(492.0, 1.5655577182769775);
      complex4.ZERO.sinh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.ONE.sqrt();
      complex6.INF.createComplex(Double.NaN, 1426.6);
      complex5.INF.pow(492.0);
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.NaN.tan();
      complex5.INF.abs();
      Complex complex9 = complex0.createComplex(492.0, 1.5655577182769775);
      complex9.atan();
      complex0.negate();
      complex5.getField();
      complex3.sinh();
      complex8.toString();
      complex1.toString();
      complex1.sinh();
      complex9.isInfinite();
      Complex complex10 = complex4.acos();
      complex10.ONE.conjugate();
      complex7.pow(complex5);
      Complex complex11 = complex7.conjugate();
      complex11.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-799.741943152612));
      complex0.INF.multiply(complex1);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.subtract((-1732.173));
      complex0.NaN.divide((-799.741943152612));
      Complex complex4 = Complex.ZERO;
      complex4.hashCode();
      complex3.getField();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = Complex.valueOf((-1607.981926), (-1607.981926));
      Complex complex3 = complex1.log();
      complex0.add(complex3);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex2.log();
      Complex complex6 = complex4.subtract(4726.781125941);
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex3.add(complex1);
      Complex complex10 = complex5.cosh();
      Complex complex11 = Complex.ZERO;
      complex11.sqrt();
      Complex complex12 = Complex.NaN;
      complex12.add(complex0);
      complex9.pow(complex6);
      Complex.valueOf(771.22528416898);
      complex1.subtract(complex2);
      Complex.valueOf(4726.781125941, 4726.781125941);
      complex8.nthRoot(580);
      complex10.asin();
      Complex complex13 = new Complex(0.0, 20.0);
      complex9.exp();
      Complex.valueOf((-20.0));
      try { 
        complex6.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1268.05), 848.861);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.subtract(848.861);
      Complex complex3 = complex2.I.sin();
      complex2.INF.hashCode();
      Complex complex4 = complex1.I.divide(complex0);
      complex4.NaN.toString();
      complex0.divide(complex1);
      Complex complex5 = complex4.tan();
      complex1.INF.hashCode();
      Complex complex6 = complex5.pow((-1010.960165036));
      complex5.isInfinite();
      complex5.INF.pow(6067972.890786152);
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex5.ONE.divide(848.861);
      complex0.getImaginary();
      Complex complex10 = complex4.acos();
      complex10.INF.cos();
      complex0.pow(848.861);
      Complex complex11 = Complex.valueOf((-1010.960165036), 848.861);
      Complex complex12 = complex8.divide(complex7);
      complex12.createComplex(2.0, 848.861);
      complex1.readResolve();
      complex3.reciprocal();
      Complex complex13 = Complex.ONE;
      Complex complex14 = complex6.pow(complex13);
      complex14.ZERO.pow(complex11);
      complex3.readResolve();
      complex5.exp();
      try { 
        complex9.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex0.INF.sqrt1z();
      complex0.equals(complex1);
      complex0.abs();
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = new Complex(1.05387548454467E-309);
      complex1.subtract(complex0);
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex0.nthRoot(2621);
      Complex complex3 = complex2.asin();
      Complex complex4 = new Complex((-6664.045891759607), 2621);
      complex3.exp();
      Complex complex5 = Complex.valueOf((-1.032634625827871E-7));
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex7.sqrt1z();
      Complex complex8 = complex6.tan();
      complex4.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2463.540395217613), (-2463.540395217613));
      complex0.add(complex0);
      Complex complex1 = Complex.ONE;
      complex1.asin();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-1198.0514013799561));
      Complex complex2 = Complex.valueOf(62.95954643, (-937.284102));
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex3.negate();
      Complex complex6 = complex3.log();
      Complex complex7 = complex3.subtract((-1535.3151274122636));
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = complex9.add(complex7);
      complex11.cosh();
      complex3.sqrt();
      Complex complex12 = complex5.add(complex9);
      complex3.pow(complex8);
      Complex complex13 = Complex.valueOf((-1535.3151274122636));
      complex13.subtract(complex5);
      Complex.valueOf((-1535.3151274122636), (-1198.0514013799561));
      complex4.nthRoot(2655);
      complex12.asin();
      Complex complex14 = new Complex((-263.979), 3630.23541116856);
      Complex complex15 = complex3.exp();
      Complex.valueOf((-263.979));
      Complex complex16 = Complex.I;
      complex10.divide(complex16);
      complex8.sqrt1z();
      complex15.tan();
      complex6.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1607.981926), (-1607.981926));
      complex0.log();
      Complex complex1 = new Complex(3.402369329874797E300);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.subtract((-1607.981926));
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex5.add(complex6);
      complex3.cosh();
      Complex complex9 = complex4.sqrt();
      complex7.add(complex6);
      Complex complex10 = complex2.pow(complex3);
      Complex complex11 = Complex.valueOf(3.402369329874797E300);
      Complex complex12 = complex8.subtract(complex10);
      Complex complex13 = Complex.valueOf(5.051425848171648E-4, (-3959.2779));
      complex12.nthRoot(2655);
      complex4.asin();
      Complex complex14 = new Complex((-3959.2779), 1.2628565627892385E-4);
      Complex complex15 = Complex.valueOf((-2755.68182056), (-20.0));
      complex15.exp();
      Complex.valueOf((-20.0));
      complex0.divide(complex13);
      complex11.sqrt1z();
      Complex complex16 = complex9.tan();
      complex2.multiply(complex16);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-3959.2779));
      Complex complex1 = complex0.atan();
      complex1.isNaN();
      Complex.valueOf((-3959.2779), (-3959.2779));
      Complex complex2 = complex1.add(complex0);
      complex2.negate();
      complex0.cosh();
      Complex complex3 = new Complex((-20.0));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.conjugate();
      complex1.ZERO.add(20.0);
      Complex complex2 = complex0.divide(771.22528416898);
      Complex complex3 = Complex.valueOf((-1607.981926), 20.0);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex2.ZERO.add(complex0);
      Complex complex6 = complex0.negate();
      complex2.I.log();
      complex6.NaN.subtract(4726.781125941);
      complex5.I.conjugate();
      complex3.I.add(complex2);
      Complex complex7 = complex5.cosh();
      Complex complex8 = Complex.valueOf(771.22528416898, (-1607.981926));
      Complex complex9 = complex5.add(complex7);
      complex9.pow(complex8);
      Complex complex10 = Complex.valueOf(771.22528416898);
      complex10.subtract(complex4);
      Complex complex11 = Complex.valueOf(771.22528416898, (-1607.981926));
      complex11.nthRoot(2655);
      complex6.asin();
      Complex complex12 = new Complex((-1607.981926), 771.22528416898);
      complex3.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = Complex.valueOf(2.8330789837569332E-8, (-1607.981926));
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.add(complex2);
      complex0.negate();
      double double0 = 4726.781125941;
      complex1.log();
      complex1.subtract(2.8330789837569332E-8);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex2.add(complex5);
      complex4.cosh();
      complex4.sqrt();
      Complex complex8 = complex5.add(complex3);
      complex6.pow(complex7);
      Complex.valueOf((-1.0));
      Complex complex9 = new Complex(3.7291263280048303E-8);
      complex9.subtract(complex8);
      Complex.valueOf(1705.406, (-1.4674011002723395));
      try { 
        complex1.nthRoot((-1046));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,046
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3.284204788892967E204));
      Complex complex2 = new Complex((-3.284204788892967E204), (-1157.3));
      complex1.cosh();
      complex1.asin();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(1.557407724654902);
      complex0.pow((-3959.2779));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.atan();
      complex2.subtract(complex0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex3.add(complex2);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-3959.2779));
      Complex complex1 = Complex.valueOf((-3959.2779), (-3959.2779));
      complex0.ONE.abs();
      complex0.nthRoot(17);
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.INF;
      complex2.exp();
      Complex.valueOf((double) (-60));
      Complex.valueOf((-3959.2779), (double) 17);
      complex0.sqrt1z();
      complex0.tan();
      Complex complex4 = Complex.ONE;
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1268.05), 848.861);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.NaN.subtract(848.861);
      Complex complex3 = complex2.I.sin();
      complex2.INF.hashCode();
      Complex complex4 = complex1.I.divide(complex0);
      complex4.NaN.toString();
      complex0.divide(complex1);
      Complex complex5 = complex4.tan();
      complex1.INF.hashCode();
      Complex complex6 = complex5.pow((-1010.960165036));
      complex5.isInfinite();
      complex5.INF.pow(6067972.890786152);
      Complex complex7 = complex5.subtract(complex6);
      Complex complex8 = complex7.ONE.log();
      Complex complex9 = complex7.log();
      complex9.ONE.divide(848.861);
      complex0.getImaginary();
      Complex complex10 = complex4.acos();
      complex10.INF.cos();
      Complex complex11 = complex0.multiply(17);
      complex0.pow(848.861);
      Complex complex12 = Complex.valueOf((-1010.960165036), 848.861);
      Complex complex13 = complex8.divide(complex7);
      complex13.createComplex(2.0, 848.861);
      complex1.readResolve();
      complex11.reciprocal();
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex6.pow(complex14);
      complex15.ZERO.pow(complex12);
      complex3.readResolve();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1783.489571873171));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(2.0, (-1783.489571873171));
      Complex complex3 = complex2.negate();
      complex3.INF.exp();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.ONE.sinh();
      complex4.INF.getField();
      Complex complex7 = complex1.INF.tan();
      complex2.ZERO.acos();
      complex0.acos();
      Complex complex8 = complex0.negate();
      complex4.divide(complex0);
      Complex complex9 = complex0.subtract(1607.981926);
      complex9.INF.pow((-1783.489571873171));
      complex3.readResolve();
      complex6.ZERO.pow(complex4);
      Complex complex10 = complex1.asin();
      complex2.asin();
      Complex complex11 = Complex.valueOf(2.0);
      Complex complex12 = complex10.subtract(complex11);
      complex12.I.exp();
      complex12.sin();
      complex9.divide(complex4);
      complex12.cos();
      complex3.equals(complex8);
      complex8.asin();
      complex7.nthRoot(4961);
      Complex complex13 = complex11.log();
      complex13.I.exp();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(-0.0);
      Complex complex1 = complex0.ONE.multiply(55.13968677);
      complex1.ONE.atan();
      Complex complex2 = complex0.ZERO.multiply(17);
      Complex complex3 = complex0.atan();
      complex3.NaN.getArgument();
      complex2.I.hashCode();
      Complex complex4 = complex3.ZERO.conjugate();
      // Undeclared exception!
      complex4.I.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex1.INF.conjugate();
      Complex complex2 = complex1.ZERO.add(20.0);
      Complex complex3 = complex0.divide(771.22528416898);
      Complex complex4 = Complex.valueOf((-1607.981926), 20.0);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex3.ZERO.add(complex0);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex3.I.log();
      complex7.NaN.subtract(4726.781125941);
      complex6.I.conjugate();
      Complex complex9 = complex1.sqrt();
      complex9.I.add(complex3);
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex2.sqrt();
      Complex complex12 = complex6.add(complex10);
      Complex complex13 = complex12.pow(complex11);
      Complex complex14 = Complex.valueOf(771.22528416898);
      complex14.subtract(complex5);
      Complex complex15 = Complex.valueOf(771.22528416898, (-1607.981926));
      complex15.nthRoot(2655);
      complex7.asin();
      Complex complex16 = Complex.INF;
      complex16.NaN.exp();
      Complex.valueOf((-1.032634625827871E-7));
      Complex complex17 = complex8.divide(complex16);
      complex17.sqrt1z();
      complex13.tan();
      complex3.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.tan();
      complex3.readResolve();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.log();
      complex3.multiply(0.0);
      complex5.subtract(complex1);
      Complex complex6 = complex2.sinh();
      Complex complex7 = Complex.ZERO;
      complex3.createComplex(1.4450790882110596, (-2706.96));
      Complex complex8 = complex6.sin();
      Complex complex9 = complex8.createComplex(2094.258385874111, (-2706.96));
      complex9.abs();
      complex3.toString();
      complex1.getField();
      complex4.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2463.325778452));
      Complex complex1 = complex0.divide((-2463.325778452));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.I.tan();
      complex1.add(complex3);
      complex1.ZERO.sinh();
      complex2.ZERO.nthRoot(652);
      complex2.atan();
      complex4.cos();
      complex0.pow(1764.29889924);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-3959.2779));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf((-2030.82142), (-3959.2779));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.I;
      complex5.createComplex((-827.231), 1.000152752749899);
      complex2.createComplex(Double.POSITIVE_INFINITY, (-551.8));
      complex3.exp();
      complex4.reciprocal();
      complex5.readResolve();
      complex4.equals("`,ncU@tI&");
      complex0.abs();
      Complex complex7 = Complex.I;
      complex6.add(complex0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1564.9932438748672);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.divide(1564.9932438748672);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.asin();
      complex3.tan();
      Complex complex5 = complex1.add(complex2);
      complex2.sinh();
      complex5.nthRoot(652);
      complex1.atan();
      complex3.abs();
      Complex complex6 = complex1.tan();
      complex5.abs();
      complex6.cosh();
      complex4.asin();
      complex3.hashCode();
      complex2.reciprocal();
      Complex complex7 = new Complex(1564.9932438748672);
      complex7.createComplex(20.0, 2164.9252048);
      complex4.add(complex0);
      Complex complex8 = Complex.I;
      complex8.cosh();
      Complex complex9 = new Complex(1564.9932438748672);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-997.4));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(1.0921536132159379E198, (-1564.9932438748672));
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.multiply(2.0);
      complex1.INF.conjugate();
      complex3.isInfinite();
      Complex complex5 = complex2.reciprocal();
      complex5.I.pow(complex4);
      complex1.abs();
      complex2.multiply(0);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex0.multiply(complex1);
      complex6.cos();
      complex7.add(0.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2463.325778452), (-2463.325778452));
      Complex complex1 = complex0.divide((-2463.325778452));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.asin();
      complex0.I.tan();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex1.ZERO.sinh();
      complex2.ZERO.nthRoot(652);
      complex2.atan();
      complex2.abs();
      complex1.I.tan();
      complex0.abs();
      Complex complex6 = complex0.cosh();
      complex4.asin();
      complex5.hashCode();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.createComplex(716.878, (-3413.01));
      complex8.ZERO.add(complex7);
      complex1.cosh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2463.325778452));
      complex0.divide((-2463.325778452));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.ZERO;
      complex2.pow(complex1);
      Complex complex4 = complex0.conjugate();
      complex2.multiply((-923.61551));
      complex0.subtract(complex3);
      complex2.sinh();
      Complex complex5 = complex2.createComplex(4037.6129109942, 1153.455388184484);
      complex4.createComplex(2.029776269409922E-4, 1560.0);
      Complex.valueOf((-20.0), (-20.0));
      complex1.exp();
      complex5.reciprocal();
      complex2.readResolve();
      Complex complex6 = Complex.I;
      complex4.equals(complex6);
      Complex complex7 = Complex.valueOf(1.0021771291770423, Double.NaN);
      complex7.abs();
      Complex complex8 = new Complex(3959.2779);
      complex8.ONE.divide((-2366.3303));
      complex8.add(complex6);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2463.325778452));
      Complex complex1 = complex0.divide((-2463.325778452));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.I.tan();
      complex3.NaN.add((-2463.325778452));
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex1.ZERO.sinh();
      complex2.ZERO.nthRoot(652);
      complex2.atan();
      complex6.abs();
      Complex complex7 = complex2.tan();
      complex3.abs();
      complex5.cosh();
      complex3.asin();
      Complex complex8 = new Complex(258.8, (-1477.94057));
      complex8.hashCode();
      complex8.reciprocal();
      complex2.createComplex((-2555.0), 258.8);
      complex6.add(complex7);
      Complex complex9 = Complex.INF;
      complex9.cosh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      complex0.INF.add((-276.925332));
      Complex complex2 = complex0.multiply((-276.925332));
      Complex complex3 = complex2.subtract(complex1);
      complex3.sinh();
      complex1.createComplex((-1230.584864), 1655.65);
      complex2.createComplex((-5882.43807269324), 1560.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex2.reciprocal();
      complex1.readResolve();
      Complex complex6 = new Complex((-276.925332), 37.203852024);
      complex0.NaN.pow(complex4);
      complex6.equals((Object) null);
      complex4.abs();
      complex5.add(complex3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2463.325778452));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.multiply((-1923.290637));
      Complex complex5 = complex2.subtract(complex3);
      complex0.sinh();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.createComplex((-2463.325778452), 1232.76195183);
      complex7.createComplex((-1923.290637), 1232.76195183);
      complex0.exp();
      complex3.reciprocal();
      complex4.readResolve();
      complex5.equals(complex4);
      complex5.abs();
      Complex complex8 = Complex.I;
      complex8.add(complex0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Object object0 = complex0.I.readResolve();
      ((Complex) object0).ONE.acos();
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex1.ZERO.tanh();
      complex2.ONE.add(complex0);
      Complex complex3 = Complex.valueOf((double) 1, (-3155.33773));
      complex0.ZERO.getArgument();
      complex1.log();
      complex0.readResolve();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.atan();
      complex5.I.readResolve();
      Complex complex6 = complex5.tanh();
      complex6.createComplex(1.7205969471977394, 0.0);
      Complex.valueOf(0.0, 1.368539456379101E-44);
      Complex complex7 = complex4.exp();
      Complex complex8 = Complex.ZERO;
      complex5.reciprocal();
      complex2.equals(complex6);
      complex3.abs();
      complex7.add(complex1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.NaN;
      complex2.INF.cos();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex0.NaN.tan();
      complex5.NaN.log();
      complex0.multiply(0.0);
      Complex complex8 = complex6.subtract(complex3);
      complex7.sinh();
      Complex complex9 = Complex.ZERO;
      complex9.createComplex(0.0, 3006.6639520274);
      complex5.sin();
      Complex complex10 = complex8.createComplex((-2.4921733203932487E-10), 2174.454);
      complex10.abs();
      complex10.toString();
      complex10.getField();
      complex10.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(1513.42);
      Complex complex1 = complex0.createComplex(1513.42, 1513.42);
      complex1.INF.tanh();
      complex1.ZERO.getField();
      complex0.I.multiply(0);
      Complex complex2 = complex0.tan();
      complex2.createComplex(2156.221281926, 1513.42);
      complex0.add(2156.221281926);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2463.325778452));
      Complex complex1 = complex0.divide((-2463.325778452));
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex1.ZERO.sinh();
      complex2.ZERO.nthRoot(652);
      complex2.equals((Object) null);
      complex1.createComplex((-562.47527), (-1177.862));
      Complex complex7 = complex5.add(complex6);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.sqrt();
      complex4.sqrt1z();
      complex4.multiply((-44));
      Complex complex8 = Complex.valueOf((-2463.325778452));
      Complex.valueOf(34.43);
      complex8.sqrt();
      complex6.pow((-2.0544443224));
      Complex complex9 = Complex.I;
      complex9.acos();
      Complex.valueOf((-1177.862));
      complex5.add(1.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.multiply(0.0);
      complex0.I.getArgument();
      Complex complex3 = complex2.ZERO.atan();
      complex0.ZERO.abs();
      Complex complex4 = complex2.createComplex(0.0, 1);
      Complex complex5 = complex2.ZERO.negate();
      complex2.INF.nthRoot(1);
      Complex complex6 = complex2.tanh();
      Complex complex7 = (Complex)complex1.readResolve();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.atan();
      complex4.abs();
      complex8.tan();
      complex4.abs();
      complex0.cosh();
      complex2.asin();
      complex3.hashCode();
      complex6.reciprocal();
      complex7.createComplex(8.608112463, 1.0);
      complex5.add(complex6);
      complex9.cosh();
      Complex complex10 = Complex.valueOf((-2161.849767), 0.0);
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-2.7143806069290897E-8), 0.5403023058681398);
      Complex complex1 = complex0.asin();
      complex0.sqrt();
      Complex complex2 = complex1.createComplex(0.5403023058681398, 1.0);
      Complex complex3 = complex0.multiply((-4.357990742470246E217));
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.tan();
      complex1.readResolve();
      complex2.cos();
      Complex complex6 = new Complex((-2.7143806069290897E-8), 3959.2779);
      Complex complex7 = complex6.subtract((-1.0));
      Complex complex8 = complex7.divide(complex5);
      complex2.getArgument();
      Complex complex9 = complex1.cos();
      complex3.sin();
      Complex complex10 = Complex.NaN;
      complex10.sinh();
      complex8.isInfinite();
      complex6.tan();
      Complex complex11 = Complex.valueOf(2.0, (-69.02));
      complex11.getReal();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex0.tan();
      Complex complex2 = complex0.ZERO.cosh();
      Complex complex3 = complex1.INF.cos();
      Complex complex4 = complex1.pow(complex2);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.multiply(7.164663249266942E-88);
      Complex complex7 = complex4.subtract(complex3);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex7.createComplex(7.164663249266942E-88, 2.0);
      complex0.createComplex((-180.0), (-2.029776269409922E-4));
      complex8.exp();
      complex6.reciprocal();
      Complex complex10 = Complex.NaN;
      complex9.equals(complex10);
      complex5.abs();
      Complex complex11 = Complex.I;
      complex9.add(complex11);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = Complex.I;
      complex2.pow(complex3);
      Complex complex4 = new Complex(1.0, (-1814.283721915521));
      complex4.readResolve();
      Complex complex5 = complex1.tan();
      complex0.log();
      Complex complex6 = Complex.valueOf((-1058.714526798764));
      complex6.cosh();
      complex5.sinh();
      complex6.tan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sqrt1z();
      complex2.exp();
      Complex complex9 = Complex.valueOf(1201.635, (-1814.283721915521));
      complex9.readResolve();
      complex1.acos();
      complex1.isNaN();
      Complex.valueOf(0.05834634808002548);
      complex5.asin();
      complex2.atan();
      complex4.isInfinite();
      complex8.cosh();
      Complex complex10 = Complex.ONE;
      complex3.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.multiply(0.0);
      complex0.I.getArgument();
      Complex complex3 = complex2.ZERO.atan();
      complex0.ZERO.abs();
      Complex complex4 = complex2.createComplex(0.0, 1);
      Complex complex5 = complex3.conjugate();
      complex0.ONE.pow(0.0);
      Complex complex6 = complex5.multiply((double) 1);
      complex5.subtract(complex6);
      complex3.sinh();
      complex2.createComplex(0.0, (-1592.568615841738));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.createComplex(2607.687324982351, (-0.9871086951291462));
      complex8.exp();
      complex4.reciprocal();
      Complex complex9 = Complex.I;
      complex1.equals(complex9);
      complex5.abs();
      complex1.add(complex5);
      complex0.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.multiply(0.0);
      complex0.I.getArgument();
      complex2.ZERO.atan();
      complex0.ZERO.abs();
      Complex complex3 = complex2.createComplex(0.0, 1);
      Complex complex4 = complex2.ZERO.negate();
      complex2.INF.nthRoot(1);
      Complex complex5 = complex2.tanh();
      Complex complex6 = (Complex)complex1.readResolve();
      complex2.equals(complex6);
      complex4.createComplex((-629.0514453725), 20.0);
      complex5.add(complex1);
      Complex.valueOf(1.401987075805664);
      complex6.sqrt();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.sqrt1z();
      complex8.multiply(650);
      Complex.valueOf(20.0);
      Complex.valueOf(1.5707963267948966);
      complex7.sqrt();
      complex3.pow(1042.8);
      Complex complex9 = complex8.acos();
      complex9.ZERO.sinh();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex((-3959.2779));
      Complex complex1 = complex0.atan();
      complex1.exp();
      Complex complex2 = new Complex((-3959.2779), 1569.781443886358);
      complex2.isNaN();
      complex1.add(1569.781443886358);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex.valueOf((-180.0));
      Complex complex0 = Complex.valueOf(1.253325949455206E-167, (-180.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.subtract((-180.0));
      Complex complex3 = complex1.divide(complex0);
      complex2.getArgument();
      Complex complex4 = complex3.cos();
      complex4.log();
      complex4.sin();
      complex2.sinh();
      complex1.isInfinite();
      complex0.tan();
      complex3.getReal();
      Complex complex5 = Complex.INF;
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2302.00971));
      Complex complex1 = new Complex((-26.0));
      complex0.pow(complex1);
      Complex complex2 = complex0.NaN.asin();
      complex2.ZERO.sqrt();
      complex0.createComplex((-2302.00971), (-4.357990742470246E217));
      Complex complex3 = complex0.ONE.multiply((-1.0));
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.I.tan();
      complex4.NaN.readResolve();
      complex3.subtract(0.0);
      complex5.add((-4.357990742470246E217));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      complex1.nthRoot(2395);
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.ONE;
      complex4.abs();
      complex3.cosh();
      Complex complex5 = complex1.asin();
      complex1.hashCode();
      complex5.reciprocal();
      complex2.createComplex(1.0, 1.0);
      Complex complex6 = Complex.ZERO;
      complex2.add(complex6);
      complex4.cosh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.multiply(0.0);
      complex0.I.getArgument();
      complex2.ZERO.atan();
      complex0.ZERO.abs();
      Complex complex3 = complex2.createComplex(0.0, 1);
      Complex complex4 = complex2.ZERO.negate();
      complex2.INF.nthRoot(1);
      complex2.tanh();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      Complex complex5 = complex3.createComplex(1.401987075805664, (-629.0514453725));
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.INF.sqrt();
      Complex complex8 = complex0.sqrt1z();
      complex8.I.multiply(1);
      Complex.valueOf(1.401987075805664);
      Complex.valueOf((double) 1);
      complex6.sqrt();
      complex4.pow(20.0);
      complex5.acos();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-2302.00971));
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex0.createComplex((-2302.00971), (-4.357990742470246E217));
      Complex complex4 = complex0.ONE.multiply((-1.0));
      Complex complex5 = complex4.ZERO.negate();
      complex5.I.tan();
      complex5.NaN.readResolve();
      complex3.INF.cos();
      Complex complex6 = complex0.subtract(0.0);
      complex6.NaN.divide(complex2);
      complex6.NaN.getArgument();
      Complex complex7 = complex6.ZERO.cos();
      complex0.NaN.sin();
      Complex complex8 = complex7.ONE.sinh();
      complex3.isInfinite();
      complex8.ONE.tan();
      complex6.getReal();
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-94.70394631), Double.NaN);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.NaN.pow(3500.0);
      Complex complex3 = complex2.I.subtract(complex0);
      complex3.ZERO.tanh();
      complex3.NaN.multiply(1);
      complex1.NaN.subtract(1.803052068234866E254);
      Complex complex4 = Complex.NaN;
      complex1.ZERO.pow(complex4);
      complex0.isInfinite();
      complex1.ONE.asin();
      complex1.isInfinite();
      complex2.multiply(0.19999954104423523);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(1491.3293168112);
      complex0.readResolve();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.tanh();
      complex2.sqrt1z();
      complex1.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.exp();
      complex4.I.cos();
      complex0.getArgument();
      Complex complex5 = complex4.subtract(complex1);
      complex0.acos();
      complex4.abs();
      complex4.INF.multiply(7.75933511025868E163);
      complex3.getImaginary();
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.createComplex(0.0, 155.87);
      Complex complex3 = complex0.I.pow(0.0);
      complex1.hashCode();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex4.I.subtract(complex2);
      Complex complex7 = complex4.NaN.sinh();
      Complex complex8 = Complex.valueOf(169.12973403);
      complex6.I.sin();
      complex4.sqrt1z();
      complex3.ZERO.toString();
      Complex complex9 = complex0.sqrt();
      complex9.I.getField();
      Complex complex10 = complex8.divide(complex1);
      complex10.divide(complex5);
      Complex complex11 = complex4.tan();
      complex11.tan();
      complex4.sin();
      complex6.tan();
      complex7.sin();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex3.NaN.conjugate();
      complex4.ONE.multiply(7.164663249266942E-88);
      complex3.ONE.subtract(complex4);
      complex4.sinh();
      Complex complex6 = complex0.createComplex(1.0, 7.164663249266942E-88);
      complex6.createComplex(2179.165461, 2607.687324982351);
      Complex complex7 = complex4.exp();
      complex0.reciprocal();
      complex0.equals("NON_REAL_FINITE_ABSCISSA");
      complex2.abs();
      complex7.add(complex5);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      complex1.I.subtract(2310.60590574575);
      Complex complex2 = complex0.NaN.sin();
      complex0.add((-1362.8127));
      complex0.isNaN();
      Complex complex3 = complex2.INF.acos();
      complex3.INF.asin();
      Complex complex4 = complex0.pow(0.0);
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.NaN.acos();
      complex6.add(0.0);
      Complex complex7 = complex0.conjugate();
      complex5.add(complex0);
      Complex complex8 = complex7.exp();
      complex7.sqrt1z();
      complex3.sin();
      complex8.toString();
      complex8.acos();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.exp();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = Complex.valueOf((-1711.01848), (-1192.41848394672));
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex1.INF.sinh();
      complex6.I.multiply(complex4);
      complex3.I.conjugate();
      Complex.valueOf((-1362.6242232467));
      Complex complex7 = Complex.valueOf(0.0);
      complex7.I.asin();
      complex0.NaN.hashCode();
      Complex complex8 = complex1.I.createComplex((-20.0), (-1192.41848394672));
      complex3.divide((-1711.01848));
      Complex complex9 = complex0.divide(760.730078820192);
      Complex complex10 = complex9.INF.conjugate();
      complex10.subtract(complex1);
      complex0.getImaginary();
      complex2.getReal();
      Complex complex11 = complex2.sqrt();
      Complex.valueOf(Double.NaN);
      Complex complex12 = complex0.subtract((-2587.89));
      complex12.ONE.pow(complex10);
      complex11.isNaN();
      Complex complex13 = complex5.divide(complex0);
      complex1.acos();
      complex8.hashCode();
      complex11.sin();
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.hashCode();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.ZERO.acos();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex4.INF.negate();
      complex6.INF.getArgument();
      Complex complex7 = Complex.valueOf(0.0, 3221.0);
      Complex complex8 = complex7.ZERO.sqrt();
      Complex.valueOf(0.0, 3221.0);
      Complex complex9 = complex5.ZERO.log();
      Complex complex10 = complex9.ZERO.atan();
      complex0.tanh();
      Complex complex11 = Complex.valueOf(20.0);
      complex11.abs();
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY, (-23.28825));
      complex12.I.toString();
      complex2.I.tan();
      Complex complex13 = complex4.subtract(0.0);
      complex0.hashCode();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex14.ZERO.add(0.0);
      complex15.I.getArgument();
      complex2.divide(complex14);
      Complex.valueOf(0.0, 0.0);
      complex10.acos();
      complex13.acos();
      complex11.add(complex15);
      Complex.valueOf(20.0);
      complex0.multiply(complex8);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2463.325778452));
      Complex complex1 = complex0.divide((-2463.325778452));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.asin();
      complex0.I.tan();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex1.ZERO.sinh();
      complex2.ZERO.nthRoot(652);
      complex2.atan();
      complex2.abs();
      complex1.I.tan();
      complex0.abs();
      Complex complex6 = complex0.cosh();
      complex4.asin();
      complex5.hashCode();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.createComplex(716.878, (-3413.01));
      complex8.ZERO.add(complex7);
      complex1.cosh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.divide(0.0);
      complex0.NaN.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex0.createComplex(0.0, 3732.934192);
      complex0.exp();
      complex1.abs();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex4.I.sqrt1z();
      complex5.NaN.pow(343.15572);
      complex0.divide(complex4);
      complex1.readResolve();
      Complex complex7 = complex3.tan();
      complex2.ONE.divide(3732.934192);
      complex7.ZERO.sinh();
      Complex complex8 = complex5.sin();
      complex8.INF.sinh();
      Complex complex9 = complex8.I.multiply(complex2);
      complex8.sqrt();
      complex4.sqrt();
      complex0.toString();
      complex6.abs();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-3294.71663903459));
      Complex complex1 = Complex.INF;
      complex1.sin();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.tan();
      Complex complex3 = complex0.cosh();
      complex3.ONE.cos();
      complex0.hashCode();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex4.NaN.reciprocal();
      complex6.tan();
      complex0.abs();
      complex0.multiply(complex1);
      complex4.hashCode();
      complex1.ZERO.multiply(complex0);
      complex3.ONE.tan();
      try { 
        complex5.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.515817703577808E-8);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex2.I.sinh();
      complex4.ZERO.toString();
      Complex complex5 = Complex.valueOf(5.515817703577808E-8);
      Complex complex6 = complex5.atan();
      complex6.NaN.conjugate();
      complex6.INF.hashCode();
      Complex complex7 = Complex.ZERO;
      complex0.ONE.divide(complex7);
      Complex complex8 = complex6.ZERO.divide(complex3);
      complex5.ZERO.pow(complex6);
      complex1.multiply(557);
      complex6.NaN.abs();
      complex1.ZERO.sin();
      complex0.exp();
      complex0.sqrt();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex.valueOf(3844.478, (-1653.6563));
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex4.ONE.sqrt();
      complex3.getArgument();
      complex0.multiply(3328.27822264);
      complex3.ONE.cosh();
      Complex complex6 = complex5.negate();
      complex6.NaN.hashCode();
      Complex complex7 = complex4.add(complex3);
      complex6.getArgument();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(564);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Object object0 = new Object();
      complex0.equals(object0);
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.readResolve();
      Complex complex1 = complex0.INF.multiply(1);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.ONE.add(complex0);
      Complex.valueOf((double) 1, (-3155.33773));
      complex0.ZERO.getArgument();
      Complex complex4 = complex1.log();
      complex0.readResolve();
      complex3.NaN.subtract(2.0);
      Complex complex5 = complex0.atan();
      complex5.I.readResolve();
      Complex complex6 = complex5.tanh();
      complex2.subtract(complex0);
      complex4.sin();
      Complex complex7 = complex1.createComplex(375.1735636267, 375.1735636267);
      complex6.abs();
      complex3.toString();
      complex2.getField();
      complex3.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1000.545379119115));
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(20.0, 0.0);
      Complex complex2 = complex1.ZERO.multiply((-1679.1620114));
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.ONE.subtract(1232.294636);
      Complex complex6 = complex4.NaN.tanh();
      complex6.ONE.abs();
      complex6.ONE.sqrt();
      complex5.ONE.readResolve();
      complex4.abs();
      complex4.cosh();
      complex0.INF.readResolve();
      Complex complex7 = complex2.sqrt1z();
      complex7.conjugate();
      complex7.ZERO.tan();
      complex3.readResolve();
      complex3.sqrt();
      complex5.sqrt1z();
      Complex.valueOf(1914.3782, 20.0);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.NaN;
      complex0.divide(complex2);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex3.multiply((-2154));
      complex1.getArgument();
      complex5.equals(complex3);
      complex5.isInfinite();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.multiply(188.775088102);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.NaN;
      complex0.ZERO.subtract(complex2);
      complex2.ZERO.sin();
      complex1.INF.createComplex(188.775088102, 744.1189040982895);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex4.NaN.add(complex1);
      Complex complex6 = complex3.INF.divide(complex0);
      Complex complex7 = complex6.ONE.cos();
      complex7.I.getArgument();
      complex1.equals((Object) null);
      Complex complex8 = complex2.divide(1.5707963267948966);
      complex8.ONE.getArgument();
      complex3.toString();
      complex4.equals((Object) null);
      complex3.abs();
      complex1.multiply(0.0);
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.I.divide(475.59);
      complex0.cosh();
      complex1.NaN.subtract(complex2);
      complex2.add(complex0);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.INF.add((-276.925332));
      Complex complex3 = complex2.ZERO.reciprocal();
      complex0.ONE.nthRoot(1);
      Complex complex4 = complex0.negate();
      complex0.I.add(complex1);
      complex3.isNaN();
      complex4.cosh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.negate();
      complex0.I.tanh();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.NaN.tanh();
      complex4.ZERO.divide(complex2);
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex3.NaN.cosh();
      complex6.toString();
      Complex complex7 = complex5.acos();
      complex7.INF.acos();
      Complex complex8 = complex0.sin();
      complex8.INF.cosh();
      complex8.ZERO.sin();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.sin();
      complex2.pow(complex3);
      complex9.pow(3.7772500667438066E-282);
      complex4.exp();
      complex7.acos();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.I;
      complex0.multiply(complex2);
      complex0.getReal();
      complex0.isNaN();
      int int0 = 1362;
      complex0.nthRoot(1362);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.ZERO.asin();
      complex4.INF.multiply((-447));
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.multiply((double) 1362);
      complex2.ZERO.add(complex6);
      complex6.NaN.multiply((-2257.234));
      complex1.sin();
      complex4.NaN.subtract(complex1);
      try { 
        complex1.nthRoot((-1340));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,340
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      double double0 = 1530.289;
      Complex complex0 = new Complex(1530.289);
      Complex complex1 = complex0.add(1530.289);
      try { 
        complex1.ONE.nthRoot((-614));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -614
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex1 = complex0.subtract(966.57);
      complex1.NaN.abs();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.reciprocal();
      try { 
        complex2.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.conjugate();
      complex1.sinh();
      Complex complex2 = complex1.acos();
      complex2.ZERO.cosh();
      complex1.ZERO.atan();
      Complex complex3 = complex1.subtract(complex0);
      complex3.abs();
      Complex complex4 = complex3.divide(1.8387761814701147);
      Complex.valueOf(1.8387761814701147);
      complex1.sqrt();
      complex4.INF.divide(complex3);
      complex0.ONE.multiply((-1522));
      try { 
        complex3.ONE.nthRoot((-1522));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,522
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex0.INF.negate();
      Complex complex5 = complex0.NaN.sinh();
      complex5.ZERO.pow((-829.1902));
      complex0.cosh();
      Complex.valueOf((-829.1902));
      Complex complex6 = complex0.add(1492.1280152163);
      Complex complex7 = complex2.tan();
      complex6.pow(1492.1280152163);
      complex5.createComplex((-3370.476680838937), 1492.1280152163);
      Complex complex8 = complex6.subtract(1492.1280152163);
      complex8.ZERO.exp();
      complex6.I.acos();
      complex8.getArgument();
      complex6.NaN.negate();
      Complex complex9 = complex0.multiply(0.0);
      complex9.ONE.acos();
      complex9.multiply(complex8);
      complex4.exp();
      complex7.acos();
      Complex complex10 = Complex.ONE;
      complex5.divide(complex10);
      complex5.sqrt1z();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-932.8525));
      complex0.NaN.sin();
      complex0.ZERO.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex.valueOf((-293.1));
      complex1.getImaginary();
      complex2.cos();
      Complex.valueOf((-867.0966182173208), (-293.1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.subtract(0.0);
      complex0.NaN.divide(complex3);
      Complex complex4 = complex3.subtract(complex0);
      complex3.INF.abs();
      Complex complex5 = complex0.log();
      complex5.ONE.conjugate();
      complex1.asin();
      complex4.isNaN();
      complex3.I.pow(1117.83133127276);
      complex0.multiply(1);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex3.I.cos();
      complex6.I.readResolve();
      Complex complex8 = Complex.valueOf((-1395.0), 0.0);
      complex1.getReal();
      Complex complex9 = complex8.createComplex(0.0, (-2494.1934));
      complex1.pow(0.0);
      Complex complex10 = complex6.sinh();
      complex10.INF.asin();
      Complex complex11 = complex4.add(complex9);
      complex11.add(complex0);
      complex7.readResolve();
      try { 
        complex4.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(481.6065);
      Complex complex1 = complex0.divide(0.013579258695244789);
      complex0.I.log();
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.abs();
      complex0.pow(complex1);
      complex0.sqrt1z();
      Complex complex3 = Complex.I;
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.negate();
      complex2.tan();
      Complex complex3 = complex0.ZERO.cosh();
      complex2.INF.cos();
      Complex complex4 = complex0.pow(complex1);
      complex0.readResolve();
      Complex complex5 = complex0.NaN.tan();
      Complex complex6 = complex4.NaN.log();
      complex6.cosh();
      complex0.sinh();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex0.ONE.sqrt1z();
      Complex complex9 = complex4.exp();
      complex9.ONE.readResolve();
      complex0.acos();
      complex1.isNaN();
      Complex.valueOf((-20.0));
      complex3.asin();
      complex8.atan();
      complex7.isInfinite();
      complex5.cosh();
      Complex complex10 = Complex.ONE;
      complex8.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0);
      complex0.toString();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-331.06757410661), 0.25088030099868774);
      Complex complex1 = complex0.atan();
      complex0.readResolve();
      Complex complex2 = complex1.NaN.sinh();
      Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.6223390102386475);
      Complex complex4 = complex2.NaN.createComplex(0.0, 0.25088030099868774);
      complex0.getReal();
      complex1.getField();
      complex4.ONE.readResolve();
      Complex complex5 = complex1.log();
      Complex complex6 = complex2.tanh();
      complex6.NaN.tan();
      Complex complex7 = complex5.INF.cos();
      complex7.NaN.add((-1.5140150088220166E-8));
      complex1.getField();
      Complex complex8 = complex5.reciprocal();
      complex8.divide(complex4);
      complex5.sinh();
      complex2.getReal();
      complex8.divide((-331.06757410661));
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex2.INF.add(complex3);
      Complex complex6 = complex0.divide(complex3);
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex7.ZERO.cosh();
      complex8.tanh();
      complex3.cosh();
      complex2.tanh();
      complex4.sqrt();
      complex5.subtract(complex2);
      complex0.pow(complex5);
      try { 
        complex2.nthRoot((-2384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,384
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1924.5370450406665, 0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.NaN.conjugate();
      complex4.ZERO.abs();
      complex4.INF.subtract(complex1);
      Complex complex5 = complex1.tanh();
      complex3.getReal();
      complex3.divide(7.555818934379333E-86);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3089.37308);
      Complex complex1 = Complex.INF;
      complex1.INF.subtract(3089.37308);
      Complex complex2 = Complex.valueOf(703.49557, 3089.37308);
      complex2.ONE.getField();
      complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.subtract(2129.3421616816);
      Complex complex5 = complex3.NaN.reciprocal();
      Complex complex6 = complex3.log();
      Complex complex7 = complex6.I.subtract(complex2);
      complex6.NaN.sin();
      Complex complex8 = complex6.I.pow(3089.37308);
      Complex complex9 = complex5.ONE.tanh();
      assertEquals(0.7615941559557649, complex9.getReal(), 0.01);
      
      complex0.multiply(703.49557);
      complex6.hashCode();
      Complex complex10 = complex8.negate();
      Complex complex11 = complex8.subtract(complex1);
      Complex complex12 = complex11.I.conjugate();
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertTrue(complex11.isInfinite());
      
      Complex complex13 = Complex.valueOf((-345.48500933182), 1967.09);
      Complex complex14 = complex13.sqrt1z();
      assertEquals(345.4849660249744, complex14.getImaginary(), 0.01);
      
      complex5.getImaginary();
      Complex complex15 = complex4.add((-266.7937600195338));
      Complex complex16 = complex1.reciprocal();
      Complex complex17 = complex10.negate();
      Complex complex18 = complex5.sqrt();
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      
      complex15.getField();
      assertEquals(3089.3729181548615, complex15.getImaginary(), 0.01);
      assertEquals((-2396.1359217011336), complex15.getReal(), 0.01);
      
      Complex complex19 = complex17.pow(703.49557);
      assertEquals((-0.9975795520370774), complex19.getReal(), 0.01);
      
      Complex complex20 = complex7.sqrt();
      assertEquals(35.09977447615551, complex20.getReal(), 0.01);
      
      Complex complex21 = complex16.tanh();
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals(0.0, complex21.getImaginary(), 0.01);
  }
}
