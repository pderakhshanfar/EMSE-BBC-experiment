/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:30:24 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1970.68937));
      try { 
        complex0.nthRoot((-845));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -845
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.913674211949961E-185, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1108.61150008116);
      Complex complex1 = complex0.I.tanh();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      Complex complex1 = complex0.I.reciprocal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.978002467397905E-8, 5.978002467397905E-8);
      Complex complex1 = complex0.createComplex(0.0, (-2361.8321003));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.I.negate();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.subtract(2080.35782);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract((-1345.5440219683));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2649.8233));
      complex1.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.I.negate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      Complex complex1 = complex0.multiply(2049063270);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-2649.8233));
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1255.03947), (double) 1307772550);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4746.177, 2052.12274702554);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-288.1));
      Complex complex1 = Complex.valueOf((-288.1), (-288.1));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2108.925715957));
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(72.338002, 72.338002);
      Complex complex1 = complex0.ONE.negate();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.41421356237309515);
      complex0.pow((double) 2069);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      complex0.pow(1393.319302609702);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(1411.2210278576);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.acos();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.multiply((-1719524483));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(1215.559, 1215.559);
      Complex complex1 = complex0.negate();
      complex1.multiply(3467);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(-0.0);
      complex0.I.multiply((-20.0));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2210.4368865292913);
      Complex complex1 = complex0.subtract(complex0);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(1601.840274, 1601.840274);
      Complex complex1 = complex0.negate();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.978002467397905E-8, 5.978002467397905E-8);
      Complex complex1 = complex0.ONE.sinh();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-286.641), (-286.641));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.978002467397905E-8, 5.978002467397905E-8);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.multiply((-1006039087));
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2108.925715957));
      complex0.ONE.exp();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 7.913674211949961E-185);
      Complex complex1 = complex0.cosh();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.divide((-384.608673));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1215.559, 1215.559);
      Complex complex1 = complex0.negate();
      complex1.divide(4258.62710279);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex(2.2221434720602702E-8, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1108.61150008116);
      complex0.I.createComplex(1610.706970060184, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.41421356237309515);
      complex0.createComplex((-2272.3), (-1183.82733));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4746.177, 2052.12274702554);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2055.591172181), 5328.4130521894);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt1z();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4589284162837982, 0.4589284162837982);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-286.641), (-286.641));
      complex0.INF.conjugate();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.negate();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.conjugate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1255.03947), (double) 1307772550);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(2210.4368865292913);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-482.0302), (-482.0302));
      Complex complex1 = complex0.INF.createComplex(1.785277385538302E272, 2.0);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1970.68937));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.ZERO.add(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.add((-2748.42870106903));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.asin();
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.add(464.62);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(2210.4368865292913);
      Complex complex1 = complex0.multiply(2.5996166206245285E172);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(-0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-3.3739670816), 4.586785041291296E-8);
      // Undeclared exception!
      complex0.nthRoot(1178441598);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1337.7973650934548);
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.41421356237309515);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2988.2244680455));
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2220.002));
      Complex complex1 = complex0.sqrt();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(47.1168971813722, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-482.0302), (-482.0302));
      Complex complex1 = complex0.ZERO.sqrt();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 7.913674211949961E-185);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.divide(complex0);
      assertEquals(3.8687680537129706E167, complex2.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(7.913674211949961E-185, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1069.352, 1.0256131352582533E261);
      Complex complex1 = complex0.exp();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1069.352, complex0.getReal(), 0.01);
      assertEquals(1.0256131352582533E261, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.exp();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.subtract(complex0);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(2.0);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.multiply(complex0);
      assertSame(complex2, complex1);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.978002467397905E-8, 5.978002467397905E-8);
      double double0 = complex0.ZERO.abs();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(5.978002467397905E-8, complex0.getImaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(5.978002467397905E-8, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.978002467397905E-8, 5.978002467397905E-8);
      Complex complex1 = complex0.tan();
      double double0 = complex1.abs();
      assertEquals(8.454172165293943E-8, double0, 0.01);
      assertEquals(5.97800246739792E-8, complex1.getImaginary(), 0.01);
      assertEquals(5.978002467397905E-8, complex0.getImaginary(), 0.01);
      assertEquals(5.97800246739789E-8, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.41421356237309515);
      double double0 = complex0.abs();
      assertEquals(0.41421356237309515, complex0.getReal(), 0.01);
      assertEquals(0.41421356237309515, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      double double0 = complex0.INF.abs();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(129, Double.POSITIVE_INFINITY);
      assertEquals(129.0, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(1.3810978455418157, Double.NaN);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(1.3810978455418157, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      assertTrue(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1108.61150008116);
      boolean boolean0 = complex0.isInfinite();
      assertEquals(1108.61150008116, complex0.getReal(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(1601.840274, 1601.840274);
      double double0 = complex0.getReal();
      assertFalse(complex0.isNaN());
      assertEquals(1601.840274, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1601.840274, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      double double0 = complex0.getImaginary();
      assertFalse(complex0.isNaN());
      assertEquals((-20.0), double0, 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.704010587346474, Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      List<Complex> list0 = complex0.INF.nthRoot(129);
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(212.216610802, complex0.getReal(), 0.01);
      assertEquals(1, list0.size());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.I;
      List<Complex> list0 = complex0.NaN.nthRoot(1322);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3592.044611));
      Complex complex1 = complex0.tanh();
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3592.044611), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf(28.1408738);
      Complex complex1 = complex0.tanh();
      assertFalse(complex1.isInfinite());
      assertEquals(28.1408738, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = new Complex((-482.0302), (-482.0302));
      Complex complex1 = complex0.INF.tanh();
      assertEquals((-482.0302), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals((-482.0302), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.multiply((-3651.3));
      Complex complex2 = complex1.tan();
      assertEquals((-774866.5110213426), complex1.getImaginary(), 0.01);
      assertEquals((-774866.5110213426), complex1.getReal(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = new Complex((-482.0302), (-482.0302));
      Complex complex1 = complex0.INF.tan();
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals((-482.0302), complex0.getImaginary(), 0.01);
      assertEquals((-482.0302), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.tan();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.NaN.subtract((-4880.8));
      Complex complex2 = complex1.tan();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(212.216610802, complex0.getReal(), 0.01);
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.I.sqrt();
      assertEquals(0.7071067811865475, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.7071067811865476, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sinh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.asin();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.NaN.subtract((-4880.8));
      Complex complex2 = complex0.I.subtract(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(212.216610802, complex0.getReal(), 0.01);
      assertSame(complex2, complex1);
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.negate();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(212.216610802, complex0.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.INF.multiply(0.0);
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(212.216610802, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.978002467397905E-8, 5.978002467397905E-8);
      Complex complex1 = complex0.pow(Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals(5.978002467397905E-8, complex0.getReal(), 0.01);
      assertEquals(5.978002467397905E-8, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-111));
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      Complex complex1 = complex0.NaN.multiply(37);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertEquals(1601.840274, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1251.2706698, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(1251.2706698, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = new Complex(25.471380191219005);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow((-0.7853978309518856));
      Complex complex3 = complex2.multiply(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.07864831696390004, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2.327375671320742E-9), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      assertEquals((-2.327375671320742E-9), complex1.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.atan();
      assertTrue(complex2.isInfinite());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.pow(complex0);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      complex0.hashCode();
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(212.216610802, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sin();
      boolean boolean0 = complex0.equals(complex1);
      assertTrue(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1108.61150008116);
      Complex complex1 = complex0.INF.cos();
      boolean boolean0 = complex1.equals(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1108.61150008116, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.conjugate();
      boolean boolean0 = complex0.equals(complex1);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1069.352, 1.0256131352582533E261);
      Object object0 = new Object();
      boolean boolean0 = complex0.equals(object0);
      assertEquals(1069.352, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(boolean0);
      assertEquals(1.0256131352582533E261, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      boolean boolean0 = complex0.equals(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(1601.840274, complex0.getReal(), 0.01);
      assertTrue(boolean0);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 28.1408738);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(28.1408738, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.reciprocal();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.reciprocal();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 21, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(21.0, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.NaN);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-859.267464));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex2, complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.divide(complex0);
      assertSame(complex2, complex0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex1.subtract(complex0);
      assertSame(complex2, complex1);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1601.840274, 2.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.divide(complex0);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertSame(complex2, complex1);
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(1601.840274, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.add(2.004335403442383);
      assertEquals((-17.995664596557617), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.add(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(212.216610802, complex0.getReal(), 0.01);
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.NaN.add(2808.206117719477);
      assertEquals((-20.0), complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.add(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.add(complex1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = new Complex(212.216610802, 212.216610802);
      Complex complex1 = complex0.NaN.subtract((-4880.8));
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(212.216610802, complex0.getReal(), 0.01);
      assertEquals(212.216610802, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      String string0 = complex0.toString();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals("(0.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2988.2244680455));
      Complex complex1 = (Complex)complex0.I.readResolve();
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals((-2988.2244680455), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = new Complex(0.41421356237309515);
      complex0.NaN.getField();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.41421356237309515, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      List<Complex> list0 = complex0.nthRoot(50);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(list0.contains(complex0));
      assertEquals(50, list0.size());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = new Complex(1.263635541743632E184);
      Complex complex1 = complex0.sqrt1z();
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }
}
