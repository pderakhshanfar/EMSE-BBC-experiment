/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:01:19 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2019307065458128E277, 1.5707963233320543);
      Complex complex1 = new Complex((-652.06751484749));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4854841678687828E-8), Double.POSITIVE_INFINITY);
      complex0.INF.exp();
      complex0.multiply(632);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-19.8), (-19.8));
      complex0.nthRoot(682);
      Complex complex1 = complex0.multiply(2056942365);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.asin();
      Complex complex4 = new Complex(20.0);
      complex4.multiply((-477));
      complex3.abs();
      Complex complex5 = complex2.tanh();
      Complex complex6 = new Complex(97.85799404695108, 3);
      complex6.cosh();
      complex6.pow(4.1012458753331495);
      complex0.conjugate();
      Complex complex7 = complex5.asin();
      complex1.acos();
      complex7.toString();
      Complex complex8 = Complex.ONE;
      complex8.multiply(2056942365);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-19.8), (-19.8));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.asin();
      complex1.toString();
      complex1.conjugate();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
      Complex complex1 = complex0.cos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      complex0.abs();
      Complex complex1 = complex0.negate();
      complex1.tan();
      complex1.nthRoot(7);
      Complex complex2 = Complex.I;
      complex2.getField();
      Complex complex3 = complex1.atan();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-780.1861158949212), 1.3880166914480165E260);
      Complex complex2 = complex1.ZERO.subtract(4167.00953636241);
      complex2.NaN.createComplex(1.3880166914480165E260, 4167.00953636241);
      Complex complex3 = complex1.I.createComplex(1.3880166914480165E260, 20.0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = Complex.valueOf((-20.0), 1.0);
      complex5.ZERO.divide(4167.00953636241);
      complex4.subtract(complex5);
      complex3.add(1.0);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(1320);
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-803.9513), Double.POSITIVE_INFINITY);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1025.549597633291), Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.ZERO.divide((-1.7959243076374794E242));
      complex1.INF.sinh();
      Complex complex2 = Complex.valueOf((-1.7959243076374794E242));
      complex2.ZERO.tan();
      Complex complex3 = Complex.valueOf((-1.7959243076374794E242));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.multiply(complex4);
      complex5.getField();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.ZERO.pow((-1.7959243076374794E242));
      complex6.INF.getField();
      Complex complex8 = complex3.exp();
      complex8.divide(complex5);
      Complex complex9 = complex8.NaN.asin();
      complex9.NaN.divide((-1.7959243076374794E242));
      Complex complex10 = complex4.ZERO.sqrt();
      complex3.multiply((-58));
      complex0.readResolve();
      complex2.tan();
      complex4.pow((-1.7959243076374794E242));
      complex2.tanh();
      Complex.valueOf(0.47463154792785645, (-3624.50506597661));
      complex7.add(784.2278);
      complex10.abs();
      complex10.atan();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = (-788.8288624971);
      Complex complex0 = Complex.valueOf((-788.8288624971));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.pow(complex0);
      complex1.tanh();
      Complex complex3 = Complex.valueOf(1.0);
      complex2.nthRoot(4452);
      complex3.reciprocal();
      complex3.acos();
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-1.3810978455418157));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2.718281828459045, 2.718281828459045);
      Complex complex1 = complex0.NaN.add(2.718281828459045);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.INF.multiply(complex1);
      complex3.NaN.createComplex(1509.01617, 2.718281828459045);
      Complex complex4 = Complex.valueOf(2.718281828459045);
      complex4.INF.getArgument();
      complex2.nthRoot(47);
      Complex complex5 = complex2.log();
      Complex complex6 = complex2.INF.exp();
      Complex complex7 = complex5.multiply(complex1);
      complex7.NaN.abs();
      complex5.pow(complex4);
      Complex complex8 = complex7.multiply(complex0);
      complex4.ZERO.cos();
      complex8.ZERO.createComplex(2.718281828459045, 2.718281828459045);
      Complex complex9 = complex0.negate();
      complex9.ZERO.hashCode();
      Complex complex10 = complex9.INF.pow(complex2);
      complex10.negate();
      complex10.ONE.tan();
      Complex complex11 = complex9.multiply((double) 47);
      Complex complex12 = complex11.ONE.sqrt1z();
      Complex complex13 = complex11.add((double) 47);
      complex11.conjugate();
      Complex complex14 = complex1.sin();
      complex14.I.reciprocal();
      complex9.cosh();
      Complex complex15 = complex12.createComplex(0.7853981633974483, 0.7853981633974483);
      complex15.sinh();
      complex13.abs();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.I;
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.I.getArgument();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.pow((-1807.873403344));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.createComplex((-1807.873403344), (-1807.873403344));
      complex1.cos();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.negate();
      // Undeclared exception!
      complex0.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-1312.138836));
      Complex complex1 = complex0.tan();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-4.618575323863973E-8), (-982.2701647929025));
      Complex complex1 = new Complex((-982.2701647929025), (-1.6737914131474577E-131));
      complex0.I.hashCode();
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex4.ONE.multiply(17);
      Object object0 = new Object();
      complex1.equals(object0);
      complex1.abs();
      Complex complex6 = complex2.log();
      complex2.acos();
      complex5.ONE.sqrt();
      complex5.nthRoot(1934);
      complex6.conjugate();
      complex0.I.pow((-2182.383891598));
      complex6.multiply((-1344));
      Complex complex7 = complex5.add(complex4);
      Complex complex8 = complex7.exp();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(209.82053, 209.82053);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.pow(complex0);
      complex1.tanh();
      Complex complex3 = Complex.valueOf((-2393.7));
      complex2.asin();
      Complex complex4 = Complex.NaN;
      complex2.isInfinite();
      complex3.log();
      try { 
        complex4.nthRoot((-2144006772));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,144,006,772
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.tan();
      complex1.multiply((-1480));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1312.138836));
      complex0.abs();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.multiply(709.2122136920768);
      Complex complex3 = Complex.NaN;
      complex0.multiply(complex1);
      Complex complex4 = complex3.pow(complex0);
      complex0.getArgument();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex(1415.3, 0.265214741230011);
      complex6.tanh();
      Complex complex7 = Complex.INF;
      complex2.subtract(complex4);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1312.138836), 250.1);
      complex0.tan();
      Complex complex1 = Complex.valueOf(20.0);
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.asin();
      complex0.toString();
      complex0.abs();
      complex0.multiply(0.265214741230011);
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(304.514925229);
      Complex complex3 = Complex.valueOf(20.0, 1.7775323307944624E203);
      complex1.subtract(complex2);
      complex3.equals(complex1);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.reciprocal();
      complex0.pow(complex2);
      complex0.NaN.atan();
      Complex complex3 = complex1.divide(0.08244366943836212);
      complex3.nthRoot(37);
      Complex complex4 = Complex.NaN;
      complex4.cosh();
      complex2.add(0.08244366943836212);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1312.138836), 20.0);
      complex0.tan();
      Complex complex1 = Complex.valueOf(1445.2);
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-292.50147));
      Complex complex1 = new Complex((-292.50147), (-292.50147));
      complex1.tan();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2624.2772909427076), 1209.7110375664);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.pow(complex3);
      complex3.ZERO.multiply((-2624.2772909427076));
      complex2.I.cosh();
      complex4.ZERO.pow((-733.7));
      complex0.sqrt1z();
      complex4.divide(2119.37);
      complex2.pow(3134646.1608300414);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-292.50147), 20.0);
      Complex complex1 = complex0.I.tan();
      complex1.sin();
      Complex complex2 = new Complex(2.708695208461993E-76, (-1041.086048357767));
      complex2.tan();
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.abs();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = new Complex(2.1540322390343345E90, 2.1540322390343345E90);
      complex4.I.add(complex5);
      Complex complex6 = complex2.cosh();
      complex6.readResolve();
      complex2.readResolve();
      complex3.equals(complex2);
      Complex complex7 = Complex.valueOf((-22.140692632779267));
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(2085.86375628697);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.divide((-296.997));
      Complex complex4 = Complex.valueOf(1.7775323307944624E203, Double.NaN);
      complex4.subtract(complex3);
      complex1.equals(complex3);
      Complex complex5 = Complex.I;
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(1306.009012);
      Complex complex2 = complex1.negate();
      complex2.NaN.readResolve();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.I.asin();
      complex2.equals(complex1);
      Complex complex5 = complex1.atan();
      complex3.ZERO.hashCode();
      Complex complex6 = complex3.NaN.subtract(complex0);
      complex4.subtract(complex2);
      complex0.INF.sinh();
      Complex complex7 = complex3.divide(1306.009012);
      complex7.ZERO.sqrt1z();
      complex7.ZERO.getArgument();
      Complex complex8 = complex2.log();
      Complex complex9 = complex8.I.sqrt();
      complex9.exp();
      complex8.abs();
      Complex complex10 = complex1.asin();
      complex10.I.hashCode();
      Complex.valueOf(0.9999997441834196, 1390.076428029);
      Complex complex11 = complex2.multiply(989);
      complex10.multiply(310);
      complex5.tan();
      complex11.readResolve();
      complex6.divide(7.34466943026868);
      complex8.equals(complex4);
      complex0.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(792.6243836598, 20.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.exp();
      complex2.ONE.createComplex((-1.0), 0.49626702070236206);
      Complex.valueOf(0.49626702070236206);
      complex1.divide(complex0);
      Complex complex3 = complex1.multiply(1431655737);
      complex1.tanh();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = new Complex((-1312.138836), 1066.72004795);
      complex2.cosh();
      complex1.readResolve();
      complex1.readResolve();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2782.65105581459));
      complex0.isNaN();
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf((-2782.65105581459), 0.49626702070236206);
      Complex complex4 = complex3.sqrt();
      complex4.cosh();
      complex3.readResolve();
      complex2.readResolve();
      complex2.equals(complex3);
      Complex complex5 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(2085.86375628697);
      Complex complex1 = Complex.valueOf(2085.86375628697, 1102.8057167795);
      complex1.asin();
      complex1.divide(complex0);
      Complex complex2 = Complex.ONE;
      complex1.asin();
      Complex complex3 = complex1.reciprocal();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(2085.86375628697);
      Complex complex1 = Complex.valueOf(2085.86375628697, 1102.8057167795);
      Complex complex2 = complex1.asin();
      complex0.getReal();
      complex1.ZERO.pow((-20.0));
      complex2.multiply(524);
      complex1.tanh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-31.156237));
      Complex.valueOf(Double.NaN, (-1547.776211));
      complex1.asin();
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex.valueOf(1782.59140909128, 2.5450911557068313E-284);
      complex2.subtract(2.5450911557068313E-284);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(2085.86375628697);
      complex0.isNaN();
      Complex complex1 = complex0.sin();
      complex1.sqrt();
      Complex complex2 = complex0.cosh();
      complex0.readResolve();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      double double0 = 2085.86375628697;
      Complex complex0 = new Complex(2085.86375628697);
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(2085.86375628697);
      Complex complex1 = Complex.valueOf(2085.86375628697, 1102.8057167795);
      Complex complex2 = complex1.asin();
      complex2.ONE.atan();
      Complex.valueOf((-974.13233596283), 0.0);
      Complex.valueOf(51.0, (-974.13233596283));
      Complex complex3 = complex1.subtract(51.0);
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1843.00575057161));
      complex0.log();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex.valueOf(0.0);
      complex3.asin();
      complex1.reciprocal();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.acos();
      complex1.INF.getField();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.subtract(complex1);
      complex2.ONE.add((-1840.342682011));
      Complex complex4 = complex2.I.subtract(complex0);
      complex4.ONE.pow(903.0632);
      Complex complex5 = complex0.divide(complex2);
      complex5.NaN.divide((-163.007761));
      Complex complex6 = complex0.atan();
      complex0.isInfinite();
      complex0.tan();
      complex6.isNaN();
      Complex complex7 = complex6.atan();
      complex7.NaN.pow((-163.007761));
      complex6.nthRoot(831);
      complex7.toString();
      Complex complex8 = complex0.cos();
      complex3.pow(complex8);
      complex7.getField();
      complex5.I.divide(complex7);
      complex5.createComplex((-594.0), 831);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.isNaN();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.I.cosh();
      complex2.readResolve();
      complex3.equals(complex1);
      complex2.sqrt1z();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      complex1.INF.getField();
      complex1.NaN.multiply((-695.819330415));
      complex1.NaN.atan();
      Complex complex2 = Complex.NaN;
      complex1.divide(complex0);
      Complex.valueOf((-670.92823353667));
      Complex complex3 = Complex.valueOf((-1825.081995076406));
      complex3.getArgument();
      Complex complex4 = complex1.multiply(1346);
      complex4.tanh();
      complex1.reciprocal();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(2085.86375628697);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.tanh();
      complex3.divide(1102.8057167795);
      complex4.createComplex((-687.847998799), 2.414213562373095);
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = Complex.valueOf(2085.86375628697, (-1.0));
      Complex complex7 = Complex.ZERO;
      complex6.pow(complex7);
      complex5.tanh();
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3092.2864640623548, 3092.2864640623548);
      Complex complex2 = complex1.sqrt1z();
      complex2.acos();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.cosh();
      complex7.readResolve();
      complex2.tanh();
      complex1.subtract((-1926.09460765));
      complex4.readResolve();
      complex3.hashCode();
      Complex complex8 = Complex.valueOf((-1926.09460765), 20.0);
      Complex complex9 = complex8.log();
      Complex complex10 = complex3.cosh();
      Complex complex11 = complex3.acos();
      complex4.getImaginary();
      Complex complex12 = Complex.valueOf(0.0);
      complex12.pow(complex10);
      Complex complex13 = complex9.add(2.2844135610697528E222);
      complex4.sqrt1z();
      complex0.add((-1926.09460765));
      complex13.conjugate();
      complex5.toString();
      complex13.asin();
      complex13.atan();
      complex11.divide(complex9);
      complex6.getReal();
      Complex complex14 = new Complex(1576.2, 2.2844135610697528E222);
      complex14.readResolve();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.conjugate();
      complex2.tanh();
      complex2.divide((-687.847998799));
      Complex complex4 = complex3.createComplex(20.0, 0.0);
      complex3.subtract(complex1);
      complex4.pow(complex0);
      Complex complex5 = complex2.subtract(complex0);
      complex1.subtract(complex5);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      complex1.INF.getField();
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex2.NaN.subtract(complex0);
      complex1.tan();
      complex0.divide((-2752.2));
      try { 
        complex1.nthRoot((-554));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -554
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(256.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ZERO;
      complex1.I.multiply(complex2);
      complex1.pow(complex0);
      complex1.getArgument();
      complex1.tanh();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(2085.86375628697);
      Complex complex1 = Complex.valueOf(2085.86375628697, 1102.8057167795);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.divide(1.2928330898284912);
      Complex complex5 = complex3.createComplex(1.2928330898284912, 3049.2203);
      Complex complex6 = complex5.subtract(complex2);
      complex4.pow(complex3);
      complex6.tanh();
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(256.0, 256.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.createComplex((-3340.77809241776), 553.9853444);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.sin();
      complex3.toString();
      Complex complex5 = Complex.valueOf(256.0);
      complex1.INF.conjugate();
      complex4.INF.createComplex((-5.617718879466363E-299), (-0.8414709848078965));
      complex4.createComplex((-5.617718879466363E-299), 1922.5709424221868);
      complex5.multiply(20.0);
      complex5.conjugate();
      complex1.atan();
      complex2.getArgument();
      Complex complex6 = complex0.negate();
      complex6.createComplex((-164.629154641), 2.9772627686230333);
      Complex complex7 = Complex.NaN;
      complex7.conjugate();
      complex5.multiply((-164.629154641));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.abs();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sin();
      complex3.tanh();
      Complex complex4 = complex3.I.createComplex(3800.567, 0.0);
      Complex complex5 = complex4.INF.divide(complex2);
      complex2.getReal();
      complex2.readResolve();
      complex0.sqrt1z();
      Complex complex6 = complex5.subtract(complex3);
      complex6.I.reciprocal();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-601.94813196492));
      Complex complex1 = complex0.ONE.sinh();
      complex0.nthRoot(37);
      Complex complex2 = complex1.ZERO.tanh();
      complex0.nthRoot(37);
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.exp();
      complex5.divide(complex1);
      complex2.pow(37.0);
      Complex complex6 = complex5.pow(453.255692617);
      complex4.isNaN();
      complex5.getReal();
      complex6.hashCode();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex5.asin();
      complex8.exp();
      Complex complex9 = complex5.acos();
      complex9.sinh();
      complex9.nthRoot(1803);
      complex0.acos();
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex3.divide(0.0);
      Complex complex8 = complex0.multiply(-0.0);
      complex5.sin();
      complex0.tanh();
      Complex complex9 = complex3.negate();
      complex9.createComplex(-0.0, 249.77501065702);
      Complex complex10 = complex5.atan();
      complex10.sin();
      complex1.toString();
      Complex complex11 = complex5.multiply(complex10);
      Complex complex12 = Complex.valueOf(1.317044973373413, 249.77501065702);
      Complex complex13 = complex12.conjugate();
      complex4.sqrt();
      complex11.createComplex(249.77501065702, 0.7456241416655579);
      complex9.multiply(-0.0);
      complex8.conjugate();
      complex13.atan();
      complex13.getArgument();
      complex6.isInfinite();
      complex2.negate();
      complex5.createComplex(1.317044973373413, 0.7456241416655579);
      complex8.conjugate();
      Complex.valueOf(1392.4233);
      complex7.multiply((-2066.27279616));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.createComplex(0.0, 0.0);
      complex3.abs();
      Complex complex4 = complex2.NaN.subtract(0.0);
      Complex complex5 = complex1.pow((-1.9287515190177685E-7));
      Complex complex6 = Complex.INF;
      complex6.isNaN();
      complex5.hashCode();
      Complex complex7 = complex0.negate();
      complex2.asin();
      complex6.exp();
      complex0.acos();
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.NaN;
      complex4.INF.divide(complex9);
      complex8.ZERO.createComplex((-1.9287515190177685E-7), 2.0);
      Complex complex10 = Complex.ZERO;
      complex10.nthRoot(1788);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.exp();
      complex2.divide(complex3);
      Complex complex5 = complex4.pow(0.0);
      Complex complex6 = complex4.pow(0.0);
      complex0.isNaN();
      complex5.getReal();
      Complex complex7 = new Complex(907.8864653907547, 0.0);
      complex7.hashCode();
      Complex complex8 = complex6.negate();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.asin();
      Complex complex11 = Complex.ZERO;
      complex11.exp();
      complex10.sinh();
      complex8.nthRoot(1803);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      complex0.abs();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.multiply(3800.567);
      complex1.sin();
      Complex complex3 = complex0.tanh();
      complex2.createComplex(1.5707963267948966, 0.4481603503227234);
      complex0.divide(complex3);
      complex3.getReal();
      complex3.readResolve();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.abs();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.multiply(3800.567);
      Complex complex3 = new Complex(2282.61);
      Complex complex4 = complex3.sin();
      complex2.tanh();
      complex0.createComplex((-386.0), Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.divide(complex5);
      complex4.getReal();
      complex4.readResolve();
      complex2.sqrt1z();
      complex1.divide((-2934.9465161));
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.ONE;
      complex2.readResolve();
      complex1.sin();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.add(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.asin();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex3.pow(0.0);
      complex7.hashCode();
      complex5.tanh();
      complex6.readResolve();
      complex4.toString();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-292.50147), 20.0);
      Complex complex1 = complex0.I.tan();
      complex1.equals("Lgjq*Tjl32w2Q");
      Complex complex2 = complex0.divide(0.7615941559557649);
      complex0.sqrt1z();
      complex0.multiply((-767.386));
      complex1.tanh();
      complex2.subtract(0.7615941559557649);
      complex2.subtract(3436.4413);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.createComplex((-3009.4), 0.0);
      complex3.abs();
      Complex complex4 = complex2.NaN.subtract((-3009.4));
      complex1.getReal();
      Complex complex5 = complex2.ZERO.divide((-7.919617109348822E-8));
      Complex complex6 = complex0.log();
      complex2.isInfinite();
      Complex complex7 = complex4.createComplex(0.7929067233362058, (-7.919617109348822E-8));
      complex5.divide(complex6);
      complex7.getReal();
      complex1.readResolve();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.toString();
      complex0.abs();
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.multiply(3800.567);
      Complex complex3 = complex2.sin();
      complex3.tanh();
      Complex.valueOf(3800.567, 5229.20545);
      complex2.exp();
      Complex complex4 = Complex.valueOf(5229.20545, 5229.20545);
      complex4.add(Double.NaN);
      complex1.sqrt();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.8446779251098633);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(1.8446779251098633);
      Complex complex3 = complex2.ONE.multiply(389.0057);
      Complex complex4 = complex1.ONE.multiply((-2276));
      Complex complex5 = complex1.log();
      complex2.ZERO.nthRoot(1);
      Complex complex6 = complex0.multiply(complex1);
      complex6.ONE.getField();
      Complex complex7 = complex2.INF.sqrt();
      Complex complex8 = complex2.divide(complex4);
      complex2.getReal();
      Complex complex9 = complex2.subtract(complex6);
      complex4.isNaN();
      complex6.exp();
      Complex complex10 = Complex.valueOf(1.8446779251098633);
      complex8.exp();
      complex3.subtract(complex5);
      complex7.pow(complex9);
      complex10.log();
      complex9.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.I.createComplex((-3009.4), 0.0);
      complex3.abs();
      Complex complex4 = complex2.NaN.subtract((-3009.4));
      complex1.getReal();
      complex2.ZERO.divide((-7.919617109348822E-8));
      complex0.log();
      complex2.isInfinite();
      Complex.valueOf(0.0, 869.4916150154);
      complex4.ZERO.exp();
      complex4.add(520.7043942);
      complex2.sqrt();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.234835147857666, 1.234835147857666);
      Complex complex1 = complex0.createComplex(1.234835147857666, 1.234835147857666);
      Complex complex2 = complex1.pow((-2175.9569));
      complex1.INF.reciprocal();
      Complex complex3 = complex2.sqrt();
      complex3.I.getArgument();
      Complex complex4 = complex2.ONE.conjugate();
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex5.I.sqrt();
      complex3.INF.sin();
      complex2.hashCode();
      complex3.divide((-797.64));
      complex0.pow(complex1);
      Complex complex7 = complex0.cosh();
      complex7.ZERO.divide(0.0);
      Complex complex8 = complex0.negate();
      complex8.add(complex1);
      complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.nthRoot(789);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.INF.multiply(0.0);
      complex1.subtract(0.0);
      complex1.I.readResolve();
      Complex complex4 = complex1.pow((-605.786397));
      Complex complex5 = Complex.valueOf(0.0, 20.0);
      complex5.ONE.acos();
      complex0.getArgument();
      complex0.multiply(complex5);
      complex2.add(0.0);
      Complex complex6 = complex3.I.conjugate();
      Complex complex7 = Complex.valueOf((-605.786397), Double.POSITIVE_INFINITY);
      complex6.ONE.cosh();
      complex7.I.cos();
      Complex complex8 = complex4.sqrt1z();
      complex4.getArgument();
      complex8.exp();
      Complex.valueOf(Double.NaN);
      complex3.tan();
      complex6.getField();
      complex8.subtract(complex2);
      Complex.valueOf(0.0, 2941.2754075549);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-607.9));
      complex0.getReal();
      Complex complex2 = new Complex(0.5444341897964478, (-1210.795));
      complex2.INF.negate();
      Complex complex3 = complex1.add(complex2);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(699.5);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.ZERO.add(699.5);
      Complex complex3 = complex0.ZERO.tanh();
      complex3.ZERO.abs();
      Complex complex4 = Complex.valueOf((-2.53841318335759), (-2.53841318335759));
      complex4.hashCode();
      Complex complex5 = complex0.multiply((-66.732816842204));
      complex0.negate();
      Complex complex6 = complex5.multiply((-66.732816842204));
      Complex complex7 = complex2.cosh();
      complex0.ONE.sinh();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex2.sqrt1z();
      complex9.readResolve();
      Complex complex10 = complex0.INF.asin();
      complex5.INF.getArgument();
      Complex complex11 = complex1.cos();
      complex11.INF.getArgument();
      complex3.sqrt();
      complex5.conjugate();
      complex3.getReal();
      complex5.abs();
      complex7.hashCode();
      complex1.cos();
      complex10.atan();
      Complex complex12 = complex10.sin();
      Complex complex13 = complex12.createComplex((-2.53841318335759), (-66.732816842204));
      complex2.createComplex(46679.6053811217, 0.0);
      complex6.add(0.7853981633974483);
      complex13.getImaginary();
      complex8.negate();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex0.I.sin();
      complex2.NaN.getArgument();
      complex0.nthRoot(686);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.I;
      complex4.INF.tanh();
      Complex complex5 = complex4.NaN.tanh();
      complex5.NaN.pow(complex1);
      complex4.INF.add(complex0);
      complex4.INF.nthRoot(686);
      complex0.NaN.log();
      Complex complex6 = complex1.add(complex4);
      complex6.readResolve();
      complex6.cosh();
      Complex complex7 = complex3.sqrt1z();
      complex3.getArgument();
      complex7.cos();
      complex7.sin();
      complex2.pow((-5.907349480138712E-8));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-1309.6170702523632));
      Complex complex1 = complex0.tan();
      complex1.I.toString();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex2.ZERO.reciprocal();
      complex3.ONE.sqrt();
      List<Complex> list0 = complex1.ZERO.nthRoot(1467);
      Complex complex4 = complex0.ONE.divide(0.2247048318386078);
      complex4.divide(0.0);
      complex4.ZERO.acos();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.tan();
      Complex complex8 = complex7.createComplex(1467, (-1724.778203719783));
      complex0.hashCode();
      Complex complex9 = complex1.sinh();
      complex9.I.createComplex(3990.05954227, 0.0);
      Complex complex10 = Complex.valueOf((-1724.778203719783), (double) 1467);
      complex2.equals(list0);
      complex1.asin();
      Complex complex11 = complex7.subtract(complex10);
      complex8.NaN.cos();
      Complex complex12 = complex6.sinh();
      complex12.INF.atan();
      complex8.isInfinite();
      complex11.add(0.2247048318386078);
      Complex complex13 = complex3.negate();
      complex7.toString();
      complex13.subtract(complex1);
      complex5.isInfinite();
      complex6.tanh();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.NaN.multiply(0.0);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.ONE.sinh();
      complex4.NaN.exp();
      complex3.divide(complex1);
      complex0.ZERO.pow(0.0);
      complex2.I.pow(467.59867786418);
      complex0.isNaN();
      complex0.getReal();
      complex2.hashCode();
      Complex complex5 = complex2.negate();
      complex5.ONE.asin();
      complex0.exp();
      complex5.acos();
      complex0.sinh();
      complex4.nthRoot(1803);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.isNaN();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.sqrt();
      complex3.I.cosh();
      complex2.readResolve();
      complex3.equals(complex1);
      complex2.sqrt1z();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-856.5669224491425));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.multiply(1);
      Complex complex3 = complex2.createComplex(Double.NaN, (-20.0));
      complex3.abs();
      Complex complex4 = complex1.cosh();
      complex4.INF.toString();
      Complex complex5 = complex1.I.exp();
      complex1.conjugate();
      complex1.acos();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex0.ONE.multiply(complex2);
      Complex complex5 = complex4.ONE.pow(complex0);
      Complex complex6 = complex1.I.sqrt1z();
      Complex complex7 = complex6.ZERO.cosh();
      complex0.INF.getField();
      complex0.equals("");
      Complex complex8 = complex1.pow(complex0);
      complex1.ZERO.getArgument();
      complex8.sqrt1z();
      complex3.NaN.cosh();
      complex2.ZERO.multiply(0);
      complex1.INF.getField();
      Complex complex9 = complex6.ONE.acos();
      complex8.I.abs();
      Complex.valueOf((-1833.0811817532), (-1.0));
      complex8.hashCode();
      Complex complex10 = complex6.multiply(complex8);
      Complex.valueOf((-256.5868472));
      complex1.sqrt();
      Complex.valueOf((-1.0));
      complex9.equals(complex7);
      Object object0 = complex3.readResolve();
      complex9.equals(object0);
      Complex complex11 = complex7.cos();
      complex6.subtract(complex10);
      complex11.pow(complex1);
      complex7.subtract(0.0);
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.reciprocal();
      int int0 = 365;
      complex1.NaN.nthRoot(365);
      Complex complex2 = complex0.reciprocal();
      complex2.NaN.log();
      Complex complex3 = complex2.conjugate();
      complex0.tan();
      Complex complex4 = complex3.I.add((-2509.19874465198));
      try { 
        complex4.ONE.nthRoot((-1792));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,792
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.valueOf(1558.0941080533, 1558.0941080533);
      complex0.ONE.multiply(complex2);
      Complex complex3 = Complex.valueOf(1558.0941080533, 1558.0941080533);
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex4.divide(1558.0941080533);
      complex5.ONE.abs();
      Complex complex6 = complex0.ONE.subtract(1558.0941080533);
      complex6.INF.add(1.0);
      Complex complex7 = complex3.ONE.conjugate();
      complex7.I.multiply(complex1);
      complex0.multiply(complex3);
      complex7.isInfinite();
      Complex complex8 = complex3.subtract((-20.0));
      complex8.I.pow(1558.0941080533);
      complex8.I.getArgument();
      complex7.subtract(1558.0941080533);
      complex1.add(complex4);
      complex6.log();
      Complex complex9 = Complex.NaN;
      complex6.equals(complex9);
      complex1.getField();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.cos();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-2.011072593789072E-7));
      Complex complex1 = complex0.divide((-2.011072593789072E-7));
      complex1.ONE.pow((-2.011072593789072E-7));
      Complex complex2 = Complex.valueOf((-3127.0));
      Complex complex3 = complex2.I.sinh();
      complex2.multiply((-3127.0));
      Complex complex4 = Complex.valueOf(83.031941596434, 20.0);
      complex1.ZERO.createComplex(83.031941596434, (-867.18));
      Complex complex5 = complex1.I.tanh();
      complex5.ZERO.createComplex(2820.34, (-1934.379999069007));
      complex4.ZERO.acos();
      complex4.acos();
      complex1.createComplex((-2.011072593789072E-7), 0.0);
      complex0.exp();
      complex4.asin();
      Complex.valueOf(2413.2524840143983, 0.0);
      Complex.valueOf(1.4226751327514648, 1.6567914485931396);
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-601.94813196492));
      Complex complex1 = complex0.ONE.sinh();
      complex0.nthRoot(37);
      complex1.ZERO.tanh();
      complex0.nthRoot(37);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex3.INF.reciprocal();
      complex4.NaN.reciprocal();
      complex3.I.divide((-601.94813196492));
      Complex complex5 = complex0.ZERO.multiply((-601.94813196492));
      complex5.sin();
      Complex complex6 = complex0.tanh();
      complex1.negate();
      Complex complex7 = complex6.INF.createComplex(6.011969568315371E-191, 37);
      Complex complex8 = complex7.ZERO.atan();
      complex0.NaN.sin();
      complex1.toString();
      Complex complex9 = complex2.multiply(complex5);
      complex9.I.conjugate();
      Complex complex10 = complex9.createComplex(37, (-601.94813196492));
      Complex complex11 = complex10.I.multiply(0.0);
      Complex complex12 = complex11.ONE.conjugate();
      complex2.atan();
      complex2.getArgument();
      complex7.isInfinite();
      complex7.negate();
      complex1.createComplex((-601.94813196492), 37);
      complex12.conjugate();
      complex8.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3074.80754, 3074.80754);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.NaN.pow(complex0);
      complex4.NaN.createComplex(3074.80754, 3074.80754);
      Complex complex5 = complex0.add(complex2);
      complex5.ZERO.pow(1564.8850991752);
      complex1.abs();
      complex2.nthRoot(991);
      complex1.sqrt1z();
      complex0.sqrt1z();
      Complex complex6 = complex0.divide(complex3);
      complex6.isNaN();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.divide(complex1);
      complex0.NaN.sqrt1z();
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex3.INF.multiply(complex0);
      Complex complex5 = complex3.I.conjugate();
      Complex complex6 = complex0.cosh();
      complex6.NaN.readResolve();
      Complex complex7 = complex5.ONE.tanh();
      complex6.subtract((-3080.0));
      complex6.readResolve();
      complex6.hashCode();
      complex3.ONE.log();
      complex4.ONE.cosh();
      complex2.acos();
      complex0.getImaginary();
      Complex complex8 = complex3.pow(complex5);
      Complex complex9 = complex8.I.add(1.0);
      complex8.sqrt1z();
      Complex complex10 = complex4.add(1.0);
      complex8.I.conjugate();
      complex10.toString();
      complex9.asin();
      Complex complex11 = complex2.atan();
      complex11.abs();
      complex2.equals(complex8);
      complex4.getField();
      complex3.exp();
      complex4.subtract(6.283185307179586);
      Complex complex12 = Complex.valueOf(0.0);
      complex12.ONE.sqrt();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.pow(complex0);
      complex0.INF.subtract(complex2);
      Complex complex3 = complex1.INF.sinh();
      complex0.I.negate();
      complex0.getField();
      Complex complex4 = complex1.acos();
      complex1.tan();
      Complex complex5 = Complex.valueOf(3.1838092090922606E287, 3.1838092090922606E287);
      Complex complex6 = Complex.valueOf(1230.0);
      complex6.NaN.toString();
      complex0.readResolve();
      Complex complex7 = complex5.pow(complex4);
      complex0.ZERO.acos();
      Complex complex8 = complex2.negate();
      complex0.abs();
      complex5.exp();
      Complex complex9 = complex7.exp();
      complex9.ZERO.abs();
      Complex complex10 = complex9.pow(complex8);
      complex10.NaN.negate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.getArgument();
      complex5.hashCode();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.log();
      complex0.getArgument();
      complex0.multiply(106.870015392049);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(256.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ZERO;
      complex1.I.multiply(complex2);
      Complex complex3 = complex1.tan();
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.divide(complex1);
      complex1.I.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.ZERO.createComplex(9.496119530068797E19, 0.0);
      complex6.ZERO.subtract(0.0);
      complex2.INF.add(complex4);
      Complex complex7 = complex1.ZERO.sqrt();
      complex7.NaN.add((double) 3915);
      Complex complex8 = complex0.ZERO.multiply(3915);
      complex8.NaN.readResolve();
      Complex complex9 = complex3.cosh();
      Complex.valueOf(0.0);
      Complex complex10 = complex1.sin();
      complex0.ZERO.abs();
      Complex complex11 = complex10.log();
      complex10.ONE.asin();
      Complex complex12 = complex11.ONE.divide(complex2);
      complex12.INF.cosh();
      complex1.toString();
      Complex complex13 = complex1.multiply(complex0);
      complex12.multiply(complex0);
      complex10.acos();
      complex3.multiply(1);
      complex13.pow((double) 1);
      complex3.exp();
      complex9.sin();
      complex9.multiply(complex7);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.475571347653619E-8), 1731.596);
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.ZERO.nthRoot(2683);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex1.NaN.sin();
      complex4.I.exp();
      complex0.hashCode();
      complex3.NaN.createComplex(0.0, 408.130796837);
      complex1.divide(complex2);
      complex0.conjugate();
      Complex complex5 = complex2.negate();
      complex5.isNaN();
      Complex complex6 = Complex.valueOf((double) 2683, 1731.596);
      complex6.I.multiply(2683);
      complex5.INF.multiply(2683);
      complex3.equals(complex2);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.INF.sin();
      complex3.NaN.acos();
      complex1.pow(complex0);
      complex1.createComplex((-437.86), (-437.86));
      Complex complex4 = complex1.add((-437.86));
      Complex complex5 = complex2.acos();
      Complex complex6 = Complex.valueOf((-437.86));
      Complex complex7 = complex2.subtract(0.0);
      complex1.equals(complex7);
      Complex complex8 = complex7.sinh();
      complex8.cosh();
      Complex complex9 = complex4.NaN.cosh();
      complex6.ONE.cosh();
      Complex.valueOf((-437.86), (-2496.0));
      complex9.I.divide(0.0);
      Complex.valueOf((-437.86), 0.0);
      complex6.divide(complex4);
      Complex complex10 = complex3.add(948.511934946);
      complex5.sin();
      complex10.createComplex((-2496.0), (-2201.469745));
      Complex.valueOf(1.1901862840583523E-7);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-16.743684764));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.abs();
      complex0.I.negate();
      Complex complex1 = complex0.multiply(3800.567);
      Complex complex2 = complex1.sin();
      complex2.tanh();
      Complex complex3 = complex2.I.createComplex(3800.567, 0.0);
      complex3.INF.divide(complex1);
      complex1.getReal();
      complex1.readResolve();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2586.8843), (-2586.8843));
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.multiply(1603);
      complex0.ONE.add(638.7672811339);
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.I.tan();
      complex1.equals((Object) null);
      Complex complex3 = complex1.NaN.divide((-2586.8843));
      complex3.ONE.sqrt1z();
      Complex complex4 = complex1.multiply((-2361.0));
      Complex complex5 = complex1.tanh();
      complex5.ZERO.subtract(0.0);
      Complex complex6 = complex4.subtract(3436.4413);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-292.50147), 20.0);
      complex0.I.tan();
      complex0.NaN.divide(0.0);
      complex0.nthRoot(1098);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(249.77501065702);
      Complex complex1 = complex0.ONE.sin();
      complex0.getReal();
      Complex complex2 = complex0.cos();
      complex2.INF.readResolve();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.ONE.reciprocal();
      complex3.I.add(0.0);
      complex4.ONE.asin();
      complex3.I.sin();
      Complex complex5 = complex3.pow(249.77501065702);
      complex5.ZERO.hashCode();
      complex1.ZERO.tanh();
      complex1.readResolve();
      complex0.toString();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.add(0.0);
      try { 
        complex1.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-513.657211));
      complex0.getField();
      complex1.createComplex((-513.657211), (-513.657211));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2987.7845636426);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.ONE.acos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.I.atan();
      Complex complex5 = Complex.valueOf(1223.0, 1223.0);
      Complex complex6 = Complex.valueOf(2987.7845636426);
      Complex complex7 = complex3.subtract(complex4);
      complex3.ONE.abs();
      complex3.abs();
      Complex.valueOf((-531.07174049634));
      Complex complex8 = complex6.pow(0.0);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex7.tan();
      Complex complex10 = complex5.sin();
      Complex complex11 = complex10.ZERO.subtract(0.0);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex10.getReal(), 0.01);
      
      Complex complex12 = complex6.I.sqrt1z();
      assertEquals(1.4142135623730951, complex12.getReal(), 0.01);
      
      Complex complex13 = complex6.divide(2987.7845636426);
      Complex.valueOf(2987.7845636426, 0.0);
      Complex complex14 = complex13.ONE.atan();
      assertEquals(0.7853981633974483, complex14.getReal(), 0.01);
      
      Complex complex15 = complex4.ZERO.tanh();
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertTrue(complex15.equals((Object)complex2));
      
      complex13.I.multiply(1223.0);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex0.getReal();
      double double0 = complex7.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex7.equals((Object)complex11));
      assertSame(complex7, complex9);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex16 = Complex.valueOf(0.0, (-156.738));
      assertEquals(0.0, complex16.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.multiply((-600));
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.sqrt1z();
      complex3.I.cosh();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.I.divide((-2180.25424743));
      Complex complex6 = complex3.ONE.conjugate();
      Complex complex7 = complex6.ZERO.tan();
      complex3.I.readResolve();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex5.sqrt1z();
      String string0 = complex9.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      assertEquals(1.0000001051854572, complex9.getReal(), 0.01);
      
      Complex complex10 = complex1.divide(complex7);
      assertSame(complex10, complex8);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      double double0 = complex2.abs();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, double0, 0.01);
      
      Complex complex11 = complex1.cos();
      assertEquals((-0.9990234788329058), complex11.getReal(), 0.01);
      
      Complex complex12 = new Complex((-2180.25424743), 80.5893442173878);
      Complex complex13 = complex4.divide(complex12);
      assertFalse(complex13.equals((Object)complex3));
      assertEquals(0.0, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(3496.3058767, 3496.3058767);
      complex0.I.getArgument();
      Complex complex1 = new Complex(3496.3058767, (-3075.648468));
      double double0 = complex1.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex0.ZERO.subtract(complex1);
      String string0 = complex0.toString();
      assertEquals("(3496.3058767, 3496.3058767)", string0);
      
      Complex complex2 = complex0.multiply(2413);
      Complex complex3 = complex2.ZERO.reciprocal();
      complex1.getField();
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex3.ONE.sin();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex5.getReal(), 0.01);
      
      Complex complex6 = complex4.ONE.cosh();
      assertEquals(1.5430806348152437, complex6.getReal(), 0.01);
      assertEquals((-8433089.7746004), complex4.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals((-8439661.7289451), complex4.getImaginary(), 0.01);
      
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = complex7.conjugate();
      assertSame(complex8, complex3);
      
      double double1 = complex1.getImaginary();
      assertFalse(complex1.isInfinite());
      assertEquals((-3075.648468), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex0.exp();
      complex3.isInfinite();
      Complex complex4 = (Complex)complex1.readResolve();
      assertEquals((-0.8813735870195429), complex4.getImaginary(), 0.01);
      
      complex2.getField();
      assertTrue(complex1.equals((Object)complex4));
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.INF.sqrt1z();
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.INF.divide(complex4);
      assertTrue(complex2.equals((Object)complex3));
      assertNotSame(complex5, complex2);
      assertSame(complex5, complex4);
      
      Complex complex6 = Complex.valueOf((-1825.081995076406));
      complex6.getArgument();
      Complex complex7 = complex6.multiply(1346);
      Complex complex8 = complex7.tanh();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals((-2456560.3653728426), complex7.getReal(), 0.01);
      assertEquals((-1.0), complex8.getReal(), 0.01);
      
      Complex complex9 = complex0.reciprocal();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-599.032007);
      Complex complex1 = Complex.valueOf((-599.032007));
      complex1.ONE.exp();
      Complex complex2 = complex1.I.sin();
      complex2.NaN.reciprocal();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-2796.08664669498));
      double double0 = complex0.getImaginary();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-2796.08664669498), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }
}
