/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:00:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-3856.360652702589), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex complex2 = complex1.tan();
      complex2.pow(4104.47037315);
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = new Complex((-867.7258), 1.0);
      complex3.cosh();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.subtract(1.8518879652136628E-8);
      Complex complex7 = complex5.atan();
      Complex.valueOf(-0.0, 1.8518879652136628E-8);
      Complex complex8 = complex5.acos();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.divide(complex7);
      complex6.nthRoot(1966);
      complex1.acos();
      Complex complex11 = complex8.multiply(complex4);
      complex11.NaN.toString();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-1125.382450765), 2.965546585110978E236);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.createComplex(20.0, 1920.4);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.negate();
      complex5.getReal();
      complex3.getImaginary();
      complex5.abs();
      complex5.acos();
      complex2.exp();
      complex0.multiply(1.021716833114624);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.sqrt1z();
      complex2.sin();
      Complex complex8 = complex5.log();
      Complex complex9 = Complex.NaN;
      complex8.subtract(Double.POSITIVE_INFINITY);
      complex7.tan();
      complex4.getField();
      complex0.sqrt1z();
      complex3.getReal();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex0.subtract((-20.0));
      complex1.NaN.sqrt1z();
      complex4.ZERO.multiply(1138);
      Complex complex5 = complex4.NaN.asin();
      complex5.hashCode();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.ONE.subtract((-20.0));
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex8.I.multiply(complex3);
      complex8.atan();
      Complex complex10 = complex8.asin();
      Complex.valueOf((-20.0), (-20.0));
      complex10.divide(3.09768273342776E-42);
      complex0.negate();
      complex7.negate();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-731.75), (-1.10951545322604E8));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.exp();
      complex1.ZERO.abs();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex0.NaN.sqrt1z();
      complex0.readResolve();
      complex0.subtract(complex1);
      complex4.ZERO.cos();
      Complex complex6 = complex1.INF.multiply(336);
      Complex complex7 = complex1.exp();
      complex7.ONE.toString();
      Complex complex8 = complex7.ZERO.tan();
      Complex complex9 = complex2.ONE.sqrt();
      Complex complex10 = complex2.ZERO.add(complex4);
      Complex complex11 = complex10.INF.multiply(complex6);
      complex11.NaN.atan();
      Complex complex12 = complex7.ONE.multiply(129);
      Complex complex13 = complex7.subtract(complex5);
      complex13.ZERO.subtract(complex9);
      complex12.ONE.asin();
      Complex complex14 = complex3.reciprocal();
      complex10.divide(complex12);
      complex0.negate();
      Complex complex15 = complex10.cos();
      complex15.tan();
      complex1.tanh();
      complex15.abs();
      complex1.cos();
      complex8.readResolve();
      Complex.valueOf(1.0);
      complex14.subtract((-896.97));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.tanh();
      Complex complex2 = complex1.subtract((-20.0));
      complex0.tan();
      complex2.tanh();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 2036.652;
      Complex.valueOf(2036.652);
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-10441.359904227036));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.pow((-2012.292082955001));
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex4.tanh();
      complex6.divide(complex3);
      complex5.multiply(complex1);
      Complex.valueOf((-2012.292082955001));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-10475.31872315704), Double.NaN);
      complex0.NaN.getField();
      Complex.valueOf(2.468626868232408E192);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.subtract((-2560.2719));
      complex0.log();
      Complex complex1 = Complex.valueOf((-1.0424680266049998E7));
      complex1.tanh();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.divide(1.059309482574463);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.sinh();
      complex2.divide(complex3);
      Complex complex4 = complex3.multiply((-2881.44731813));
      Complex complex5 = complex4.ZERO.pow((-2881.44731813));
      Complex complex6 = complex5.ONE.cosh();
      complex6.INF.getArgument();
      Complex complex7 = complex2.add(complex3);
      complex7.ONE.atan();
      complex3.getField();
      complex0.getField();
      complex0.ZERO.pow((-2881.44731813));
      complex2.getField();
      complex3.getField();
      Complex.valueOf(6.283185307179586, 1.059309482574463);
      // Undeclared exception!
      complex0.nthRoot(2147483425);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6212903261184692, (-2651.62805771593));
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.I;
      complex2.nthRoot(84);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.tan();
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      Complex complex3 = complex0.NaN.sqrt();
      Complex.valueOf(20.0);
      complex3.I.reciprocal();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.add(20.0);
      complex4.isNaN();
      complex5.ZERO.getArgument();
      complex3.I.sqrt1z();
      complex4.cos();
      complex4.equals(complex5);
      complex3.isNaN();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow((-1.0));
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sqrt();
      complex1.atan();
      Complex complex4 = complex3.atan();
      complex3.sin();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(65.82204, 65.82204);
      Complex complex2 = complex0.tan();
      complex2.INF.abs();
      Complex complex3 = Complex.valueOf((-2149.056687637226), (-2149.056687637226));
      Complex complex4 = complex3.I.sinh();
      complex4.ONE.pow(65.82204);
      Complex complex5 = complex3.ZERO.subtract(complex2);
      Complex complex6 = complex3.ZERO.asin();
      complex3.ONE.readResolve();
      complex0.log();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex6.sinh();
      complex8.NaN.multiply(complex1);
      Complex complex9 = complex1.subtract(complex3);
      complex6.INF.createComplex(1809.01988, 549.7599788473276);
      complex7.NaN.divide(1809.01988);
      Complex complex10 = complex0.log();
      Complex complex11 = complex10.ONE.add((-9.946677290246068));
      complex11.INF.getField();
      Complex complex12 = complex10.INF.multiply(Double.NaN);
      complex12.I.add(721.127);
      Complex complex13 = complex7.tanh();
      Complex complex14 = complex13.atan();
      complex14.ZERO.tan();
      complex3.multiply(complex10);
      complex8.subtract((-996.681));
      Complex complex15 = complex9.pow((-620.427712));
      complex0.divide(Double.NaN);
      complex15.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1092.57));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.I.createComplex((-1092.57), (-1092.57));
      complex1.I.abs();
      Complex complex3 = complex1.conjugate();
      complex3.tan();
      complex0.ONE.sqrt1z();
      complex3.INF.reciprocal();
      Complex complex4 = Complex.valueOf(2.266777992248535);
      complex4.NaN.sqrt1z();
      Complex complex5 = complex1.NaN.log();
      complex5.nthRoot(7);
      Complex complex6 = complex0.INF.acos();
      Complex complex7 = complex3.multiply(37);
      complex7.ZERO.subtract((double) 7);
      complex1.NaN.conjugate();
      complex0.abs();
      Complex complex8 = complex5.tanh();
      Complex complex9 = complex7.pow(complex2);
      Complex complex10 = complex9.ONE.pow(complex8);
      complex10.asin();
      Complex complex11 = complex6.ONE.add(1.3509137630462646);
      complex11.ZERO.tanh();
      Complex complex12 = complex6.log();
      complex12.multiply((-3337.023297));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.valueOf(1.0);
      complex1.getField();
      complex0.reciprocal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ONE;
      complex3.divide(Double.POSITIVE_INFINITY);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(812);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2103.29662659594, (-322.947552786));
      complex0.I.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ZERO.subtract(2103.29662659594);
      complex3.ZERO.conjugate();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.log();
      Complex complex7 = complex4.add(2103.29662659594);
      complex0.INF.nthRoot(861);
      complex6.readResolve();
      complex0.toString();
      complex5.sqrt();
      complex0.reciprocal();
      Complex complex8 = complex1.reciprocal();
      Complex complex9 = complex0.I.pow(2.0498074572151747E-9);
      Complex complex10 = complex4.sinh();
      complex0.NaN.getArgument();
      complex8.INF.asin();
      complex10.I.multiply(complex7);
      complex8.readResolve();
      complex4.toString();
      complex2.tanh();
      complex0.negate();
      complex3.sin();
      complex9.createComplex(1057.242562672812, 1.4866670190423774);
      Complex complex11 = complex4.asin();
      complex7.sqrt();
      complex11.add((-1398.59));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-3280.1185807455), (-789.927));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = Complex.valueOf((-1349.614));
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.add((-359.3955214));
      Complex complex7 = complex6.ONE.pow(complex3);
      complex6.ZERO.tan();
      complex6.ONE.toString();
      Complex complex8 = complex1.multiply((-1661.037718226));
      complex8.NaN.acos();
      Complex complex9 = complex8.exp();
      Complex.valueOf((-4701.928904276), (-789.927));
      complex9.ZERO.log();
      Complex complex10 = complex6.atan();
      complex10.ONE.nthRoot(782);
      complex10.asin();
      complex10.abs();
      complex6.atan();
      complex5.cos();
      Complex complex11 = complex2.sinh();
      complex11.divide(3376.230049753545);
      complex7.multiply(1.5680139057265292);
      complex10.divide(complex9);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = new Complex(1.557407724654902, 1.557407724654902);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.negate();
      complex3.divide(complex2);
      complex1.toString();
      Complex complex4 = new Complex(5.479138512760614E77, 5.479138512760614E77);
      complex1.reciprocal();
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.ZERO;
      complex0.divide(complex6);
      complex0.hashCode();
      complex2.cosh();
      Complex complex7 = complex0.divide(complex5);
      Complex.valueOf(2.4526264759999998E7);
      Complex complex8 = complex7.multiply(8.9);
      complex0.pow(5.479138512760614E77);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(2800.0, (-20.0));
      complex0.INF.abs();
      Complex complex1 = complex0.NaN.multiply((-1507));
      Complex complex2 = new Complex(2800.0, (-1507));
      complex0.equals(complex2);
      complex1.add(complex0);
      complex1.sinh();
      Complex complex3 = Complex.ZERO;
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.pow((-1.0));
      Complex complex2 = complex0.log();
      complex2.hashCode();
      Complex complex3 = complex2.sqrt();
      complex2.tanh();
      complex1.divide((-1.0));
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1263.0), 1567.90874579222);
      complex0.ZERO.exp();
      complex0.hashCode();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-2880.72912218));
      complex0.getArgument();
      Complex complex1 = complex0.multiply((-2880.72912218));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = new Complex(3.141592653589793, (-8298598.275375954));
      Complex complex5 = new Complex((-2880.72912218), 0.0);
      complex5.reciprocal();
      complex3.asin();
      Complex complex6 = Complex.valueOf(0.4215726019502959, 1592.7512);
      Complex complex7 = complex6.divide(complex5);
      complex0.hashCode();
      complex3.INF.subtract(complex7);
      complex0.cosh();
      complex6.divide(complex3);
      Complex.valueOf((-2880.72912218));
      complex0.getArgument();
      complex6.divide((-483.9958));
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = Complex.valueOf(1704.0, 1501.899637022383);
      complex1.multiply(20.0);
      Complex complex2 = complex1.multiply(1704.0);
      Complex complex3 = complex1.multiply(1125);
      complex3.hashCode();
      Complex complex4 = Complex.I;
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 2527.653);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.createComplex(Double.POSITIVE_INFINITY, (-5203669.321034202));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.subtract(complex3);
      complex0.hashCode();
      Complex complex8 = complex5.asin();
      complex3.negate();
      complex8.getImaginary();
      complex1.abs();
      Complex complex9 = complex6.acos();
      Complex complex10 = complex8.exp();
      complex10.sin();
      complex9.log();
      Complex complex11 = Complex.NaN;
      complex4.subtract(2.083115484919861E219);
      Complex complex12 = new Complex(20.0, 1144.570056589716);
      complex12.tan();
      complex11.getField();
      complex4.sqrt1z();
      complex6.isInfinite();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.cosh();
      Object object0 = new Object();
      complex0.equals(object0);
      complex2.subtract((-1261.980953));
      Complex complex3 = complex2.divide(complex0);
      complex2.toString();
      Complex complex4 = new Complex((-6.972256643013266E-8), 0.0);
      complex4.reciprocal();
      Complex complex5 = complex1.asin();
      complex4.toString();
      Complex complex6 = complex5.asin();
      complex4.sin();
      complex1.divide(complex6);
      complex4.sqrt();
      complex3.cosh();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1939.426533036511);
      Complex complex1 = Complex.ZERO;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 783.954054);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.INF.acos();
      complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ONE.subtract(complex0);
      complex4.ONE.hashCode();
      Complex complex5 = complex4.ZERO.asin();
      complex5.ZERO.negate();
      complex1.getImaginary();
      complex1.abs();
      Complex complex6 = complex0.acos();
      complex1.I.exp();
      complex3.sin();
      Complex complex7 = complex6.log();
      Complex complex8 = Complex.NaN;
      complex8.subtract(1.0749409198760986);
      complex7.tanh();
      complex2.log();
      Complex complex9 = complex5.asin();
      complex9.sinh();
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(-0.0);
      complex1.isNaN();
      Complex complex3 = complex1.subtract((-1261.980953));
      Complex complex4 = complex2.divide(complex3);
      complex4.toString();
      Complex complex5 = complex2.reciprocal();
      complex3.asin();
      Complex complex6 = complex5.subtract(-0.0);
      complex3.tan();
      complex5.getField();
      complex6.sqrt1z();
      Complex complex7 = Complex.INF;
      complex7.isInfinite();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.log();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.getArgument();
      Complex complex5 = complex2.tanh();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex2.ZERO.createComplex(0.0, 575.182568);
      complex2.ZERO.divide(complex1);
      Complex complex3 = complex1.I.tanh();
      complex0.I.divide(0.0);
      complex3.conjugate();
      complex1.acos();
      Complex complex4 = complex1.createComplex(200.17553473, 200.17553473);
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf(1210.76258799009, 200.17553473);
      Complex complex7 = complex1.ONE.multiply(2140016510);
      complex7.sin();
      Complex complex8 = complex6.I.sqrt();
      complex8.INF.hashCode();
      Complex complex9 = complex1.ZERO.cosh();
      complex6.ZERO.multiply(0.0);
      complex8.INF.subtract(0.0);
      Complex complex10 = complex0.divide(0.0);
      Complex complex11 = complex6.pow(complex5);
      complex11.ONE.cosh();
      complex3.add(1210.76258799009);
      complex8.abs();
      complex6.INF.multiply(200.17553473);
      Complex complex12 = complex11.ZERO.sin();
      Complex complex13 = complex6.tan();
      complex11.ZERO.pow(complex0);
      complex13.INF.getArgument();
      complex10.subtract(complex11);
      complex9.sinh();
      complex4.asin();
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 1494.683047443;
      Complex complex0 = new Complex((-614582.9587830349), 1494.683047443);
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-5220.68));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.log();
      complex3.pow((-4.828427124746187));
      Complex complex4 = Complex.valueOf(1.5457859179476987, (-4.828427124746187));
      complex0.equals(complex1);
      Complex complex5 = complex2.subtract(2.0454950851007314E110);
      Complex complex6 = complex4.divide(complex0);
      complex5.toString();
      complex2.reciprocal();
      Complex complex7 = complex6.asin();
      complex7.divide(complex3);
      complex6.cosh();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.cosh();
      complex0.equals(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex((-2420.81889974898));
      complex2.divide(complex3);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.tanh();
      complex6.getArgument();
      complex6.sqrt1z();
      complex5.exp();
      Complex complex8 = new Complex((-2420.81889974898), 1.14328094544624);
      complex3.tanh();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, (-502.75));
      complex3.sqrt1z();
      complex6.pow(complex9);
      Complex complex10 = Complex.INF;
      complex8.sqrt1z();
      Complex complex11 = complex7.subtract(complex1);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      Complex complex1 = complex0.sqrt();
      complex1.INF.atan();
      Complex complex2 = new Complex(532.0541015);
      complex2.getArgument();
      Complex complex3 = complex2.tanh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-1125.382450765), 2.965546585110978E236);
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.createComplex(20.0, 1920.4);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.negate();
      complex5.getReal();
      complex3.getImaginary();
      complex5.abs();
      complex5.acos();
      Complex complex6 = Complex.I;
      complex6.exp();
      complex0.multiply(1.021716833114624);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.sqrt1z();
      complex2.sin();
      Complex complex9 = complex5.log();
      Complex complex10 = Complex.NaN;
      complex9.subtract(Double.POSITIVE_INFINITY);
      complex8.tan();
      complex4.getField();
      complex6.sqrt1z();
      complex3.getReal();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0282643872798627, Double.NaN);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(Double.NaN, 1.0282643872798627);
      Complex complex2 = complex1.multiply((-3.7727295));
      Complex complex3 = complex2.cosh();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex(5735072.32999661);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = Complex.ONE;
      complex7.add(0.0);
      complex0.tanh();
      complex3.getArgument();
      Complex complex9 = complex0.sqrt1z();
      complex3.exp();
      Complex complex10 = new Complex((-1612.867), (-3.7727295));
      complex6.tanh();
      Complex.valueOf(1.0282643872798627, 0.0);
      Complex complex11 = new Complex(Double.NaN, 2882.081);
      Complex complex12 = complex11.sqrt1z();
      complex11.pow(complex10);
      Complex complex13 = Complex.INF;
      complex11.sqrt1z();
      complex7.subtract(complex12);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.cosh();
      complex0.equals(complex0);
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(0.41421356237309515);
      complex1.divide(complex3);
      Complex complex4 = Complex.ONE;
      complex0.I.add(984.6955249275752);
      complex4.tanh();
      complex4.getArgument();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex1.exp();
      Complex complex7 = new Complex(0.41421356237309515, 0.0);
      complex7.tanh();
      Complex complex8 = Complex.valueOf(0.0, 0.41421356237309515);
      complex8.INF.divide(0.0);
      complex6.sqrt1z();
      Complex complex9 = new Complex(0.0, 984.6955249275752);
      Complex complex10 = Complex.INF;
      complex10.hashCode();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-2634.3999380739683), 2388.738016015667);
      Complex complex1 = complex0.INF.subtract(1.548830270767212);
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.I.createComplex(1.548830270767212, (-577.764374193943));
      Complex complex4 = complex3.NaN.tan();
      Complex complex5 = complex0.negate();
      complex5.NaN.hashCode();
      Complex complex6 = Complex.ZERO;
      complex5.I.multiply(complex6);
      Complex complex7 = complex0.ZERO.tanh();
      complex7.INF.divide((-2644.0));
      Complex complex8 = complex5.log();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.INF.sqrt1z();
      complex10.ONE.exp();
      complex6.I.subtract(complex4);
      complex6.toString();
      Complex complex11 = Complex.valueOf((-577.764374193943), (-2634.3999380739683));
      complex11.nthRoot(80);
      complex9.conjugate();
      complex8.add(complex0);
      complex6.asin();
      Complex complex12 = complex6.cos();
      complex12.ZERO.hashCode();
      Complex complex13 = complex0.pow((-2634.3999380739683));
      complex13.ZERO.exp();
      complex1.subtract(complex13);
      Complex.valueOf(0.15359249711036682, (-2634.3999380739683));
      complex11.divide((double) 80);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-1068.447261));
      Complex complex1 = Complex.valueOf((-2.0878559689663234E-4), 0.0);
      complex1.getField();
      Complex complex2 = complex0.reciprocal();
      complex2.ZERO.atan();
      Complex complex3 = complex2.INF.multiply(2.0);
      complex2.multiply(786);
      complex0.hashCode();
      complex1.multiply(complex0);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 5220.680000000003);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = Complex.ONE;
      complex3.sqrt();
      complex1.getField();
      complex1.nthRoot(1);
      Complex complex4 = complex2.multiply(0);
      complex1.getArgument();
      complex2.getArgument();
      complex4.hashCode();
      Complex complex5 = complex1.subtract((double) 0);
      Complex complex6 = complex1.divide((-778.76460400421));
      complex6.readResolve();
      complex0.add((-2106.35955443));
      complex5.multiply(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.cosh();
      complex0.equals(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = new Complex(0.41421356237309515);
      complex2.divide(complex4);
      Complex complex5 = Complex.ONE;
      complex0.I.add(984.6955249275752);
      complex5.tanh();
      complex5.getArgument();
      complex2.sqrt1z();
      Complex complex6 = complex2.exp();
      Complex complex7 = new Complex(0.41421356237309515, (-1157.184383395674));
      Complex complex8 = complex7.tanh();
      Complex.valueOf(0.0, 0.41421356237309515);
      complex6.sqrt1z();
      complex8.pow(complex4);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.sqrt1z();
      Complex complex11 = complex0.subtract(complex10);
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.log();
      complex0.subtract(complex1);
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.multiply((-1767));
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf((-2.7255498662400004E7), (-1020.8441));
      complex7.atan();
      complex3.nthRoot(87);
      Complex complex8 = new Complex((-1020.8441), (-187.398));
      complex8.add((-187.398));
      Complex complex9 = complex5.divide(complex1);
      complex6.tan();
      complex9.multiply(84.25560534298262);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-5220.68), (-5220.68));
      Complex complex1 = complex0.createComplex(2.0, 0.0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.negate();
      complex1.getReal();
      complex0.getImaginary();
      Complex complex4 = Complex.ONE;
      complex4.abs();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.exp();
      complex2.multiply(88.14);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex2.sin();
      complex8.negate();
      Complex complex10 = complex1.add((-5.469119869891027E-8));
      complex0.getArgument();
      complex2.multiply(88.14);
      complex0.readResolve();
      Complex.valueOf((-719.39196));
      complex10.getArgument();
      complex3.divide(complex9);
      Complex complex11 = new Complex((-5.469119869891027E-8), (-5220.68));
      complex11.tan();
      Complex complex12 = Complex.ZERO;
      complex8.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(783.954054, 783.954054);
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.createComplex(783.954054, 783.954054);
      Complex complex8 = complex3.subtract(complex7);
      Complex complex9 = Complex.valueOf((-451.07));
      Complex complex10 = complex9.asin();
      Complex complex11 = complex10.negate();
      complex6.getReal();
      complex11.getImaginary();
      complex2.abs();
      Complex complex12 = complex7.acos();
      complex12.exp();
      Complex complex13 = complex11.multiply((-2507.63202));
      complex5.sqrt1z();
      Complex complex14 = complex13.sin();
      complex0.negate();
      complex14.add(16140.107252222384);
      complex10.getArgument();
      Complex complex15 = complex8.multiply((-2507.63202));
      complex4.readResolve();
      Complex.valueOf((-2679.001652375181));
      complex14.getArgument();
      Complex complex16 = Complex.I;
      complex7.divide(complex16);
      complex5.tan();
      Complex complex17 = Complex.ZERO;
      complex15.readResolve();
      complex2.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.valueOf(1.0, 0.0);
      complex0.getField();
      complex0.reciprocal();
      Complex complex2 = complex1.multiply(786);
      Complex complex3 = new Complex(Double.NaN);
      complex2.ONE.subtract(complex3);
      complex2.hashCode();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 783.954054);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.INF.acos();
      complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex4.ZERO.asin();
      complex5.ZERO.negate();
      complex1.getReal();
      complex1.getImaginary();
      complex1.abs();
      Complex complex6 = complex0.acos();
      complex1.I.exp();
      Complex complex7 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.INF.sqrt1z();
      complex3.sin();
      Complex complex9 = complex6.log();
      Complex complex10 = Complex.NaN;
      complex10.subtract(1.0749409198760986);
      complex9.tan();
      complex6.getField();
      complex2.sqrt1z();
      complex8.getReal();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-32.449496425898396), 783.954054);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.INF.acos();
      complex0.createComplex((-32.449496425898396), (-32.449496425898396));
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex4.ZERO.asin();
      complex5.ZERO.negate();
      complex1.getReal();
      complex1.getImaginary();
      complex1.abs();
      complex0.acos();
      complex1.I.exp();
      Complex complex6 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex6.INF.sqrt1z();
      Complex complex7 = complex3.sin();
      Complex complex8 = complex7.ONE.negate();
      Complex complex9 = complex3.INF.add(Double.POSITIVE_INFINITY);
      complex4.getArgument();
      Complex complex10 = complex4.multiply((-1.528154516614629));
      Complex complex11 = (Complex)complex5.readResolve();
      Complex.valueOf((-2679.001652375181));
      complex5.divide(900.0);
      complex0.readResolve();
      complex11.sqrt();
      complex9.readResolve();
      complex10.getArgument();
      complex9.subtract(complex6);
      Complex complex12 = Complex.NaN;
      complex12.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-5220.68));
      complex0.ZERO.log();
      complex0.log();
      Complex complex1 = complex0.log();
      complex0.pow(1849.9088);
      Complex complex2 = Complex.valueOf((-5220.68), 1.5457859179476987);
      complex0.equals(complex2);
      Complex complex3 = complex1.subtract(1.5457859179476987);
      Complex complex4 = complex0.divide(complex3);
      complex1.toString();
      complex4.INF.reciprocal();
      Complex complex5 = complex2.asin();
      complex0.divide(complex0);
      complex5.cosh();
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-5220.68));
      complex0.createComplex(2.0, 0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.log();
      Complex complex3 = new Complex((-172.4565392));
      complex3.log();
      Complex complex4 = new Complex(1849.9088, (-873.8064));
      Complex complex5 = complex4.pow((-1.0));
      complex2.subtract(complex0);
      Complex complex6 = new Complex((-281.61));
      Complex complex7 = Complex.INF;
      Object object0 = complex7.readResolve();
      complex6.equals(object0);
      complex3.subtract(1885.8641115089);
      complex7.divide(complex5);
      complex0.toString();
      complex0.asin();
      complex2.divide(complex5);
      complex6.cosh();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.acos();
      complex1.ONE.getArgument();
      complex0.getReal();
      complex0.I.abs();
      complex0.toString();
      Complex complex2 = complex0.negate();
      complex1.readResolve();
      Object object0 = new Object();
      complex1.reciprocal();
      Complex complex3 = complex1.ONE.reciprocal();
      complex3.ONE.getArgument();
      complex0.equals(object0);
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.INF.add(complex0);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.add((-1.0));
      complex3.ZERO.getField();
      complex8.ZERO.divide((-972.632226));
      complex8.INF.reciprocal();
      complex4.tan();
      complex3.subtract(0.0);
      complex7.subtract(1165.352);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.multiply(0.0);
      complex1.toString();
      Complex complex2 = complex1.divide(1.5707963267948966);
      complex2.reciprocal();
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.INF;
      complex2.I.add(complex3);
      complex0.getImaginary();
      Complex complex4 = complex0.ONE.multiply(complex1);
      try { 
        complex4.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(155.48865311);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.divide((-1746.85017));
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ZERO.exp();
      complex4.I.toString();
      complex4.INF.getArgument();
      complex4.toString();
      Complex complex5 = complex0.sinh();
      complex0.multiply(3950);
      Complex complex6 = Complex.valueOf((-1556.17333), 0.0);
      complex6.equals(complex5);
      Complex complex7 = complex5.sqrt1z();
      complex2.pow((-926.7916321303));
      complex7.reciprocal();
      complex2.add(715.96496759149);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.2289023836765196E-9);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex0.cosh();
      complex2.ONE.getField();
      Complex complex4 = complex2.add(1036.2);
      complex2.getImaginary();
      Complex.valueOf(1457.67, 1036.2);
      Complex complex5 = complex1.ONE.add(complex2);
      complex5.I.multiply(complex0);
      complex5.ONE.tan();
      complex3.INF.multiply(2384);
      Complex complex6 = complex3.add(0.0);
      Complex complex7 = complex4.divide(complex2);
      complex7.I.pow(1457.67);
      complex7.abs();
      complex4.acos();
      Complex complex8 = complex6.pow(complex4);
      complex8.ONE.multiply((-1387.0));
      Complex complex9 = complex4.sin();
      complex8.I.abs();
      Complex complex10 = complex1.divide(0.0);
      complex10.readResolve();
      complex6.I.sqrt();
      complex8.readResolve();
      complex8.getArgument();
      complex9.subtract(complex0);
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.multiply(1);
      Complex complex1 = complex0.NaN.log();
      complex0.NaN.conjugate();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex0.ZERO.multiply(0.0);
      complex0.toString();
      complex3.INF.getField();
      Complex complex4 = complex3.multiply(0.0);
      Complex complex5 = complex4.NaN.exp();
      Complex complex6 = complex5.NaN.conjugate();
      complex6.NaN.cos();
      complex6.I.conjugate();
      complex6.NaN.conjugate();
      complex4.ONE.hashCode();
      Complex complex7 = complex2.tan();
      Complex complex8 = complex2.I.conjugate();
      Complex complex9 = complex0.acos();
      Complex complex10 = complex4.subtract(0.0);
      Complex complex11 = complex10.NaN.tanh();
      complex11.ZERO.divide(complex0);
      Complex complex12 = complex7.negate();
      complex2.multiply((double) 1);
      complex12.ZERO.pow(complex5);
      complex9.sin();
      complex12.log();
      Complex complex13 = complex1.pow(complex10);
      Complex complex14 = new Complex(1, Double.POSITIVE_INFINITY);
      complex13.INF.add(complex14);
      complex11.getReal();
      complex8.divide((double) 1);
      complex6.add(complex2);
      complex12.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.I.pow(6.283185307179586);
      complex2.ONE.sin();
      Complex complex3 = complex0.NaN.pow(complex1);
      complex0.INF.cos();
      Complex complex4 = new Complex(0.0, 0.0);
      complex3.INF.divide(complex4);
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex0.multiply((-1.3824992526093461E-8));
      Complex complex7 = complex6.ONE.cos();
      Complex complex8 = complex7.NaN.sin();
      complex8.cosh();
      complex8.NaN.subtract((-741.565461951));
      complex5.I.add(20.0);
      complex6.INF.createComplex((-741.565461951), 0.0);
      complex6.NaN.multiply((-741.565461951));
      complex6.getReal();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(392);
      Complex complex2 = complex1.ZERO.add(2330.767);
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex2.INF.add(2330.767);
      complex4.NaN.asin();
      complex2.toString();
      complex4.INF.cosh();
      complex2.NaN.getField();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex0.sin();
      Complex complex8 = Complex.valueOf((double) 392);
      complex8.NaN.conjugate();
      complex7.NaN.multiply(0);
      complex0.negate();
      complex0.reciprocal();
      complex0.cosh();
      complex6.asin();
      complex7.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.sinh();
      complex0.isInfinite();
      Complex complex2 = complex0.subtract(0.0);
      complex2.ZERO.abs();
      Complex complex3 = complex1.sinh();
      complex1.NaN.tanh();
      complex0.acos();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.I.multiply(0.0);
      Complex complex6 = complex2.pow(complex3);
      complex6.tanh();
      Complex complex7 = complex6.INF.subtract(524.413);
      complex7.NaN.toString();
      complex2.abs();
      complex5.conjugate();
      complex4.createComplex(3606.0, 2.0);
      complex0.INF.pow(0.0);
      Object object0 = new Object();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1962.65919);
      complex0.getField();
      Complex complex1 = Complex.NaN;
      complex0.NaN.multiply(1642);
      Complex complex2 = complex0.I.add(complex1);
      int int0 = 0;
      Complex complex3 = complex0.multiply(0);
      complex3.NaN.reciprocal();
      complex3.ONE.abs();
      complex3.NaN.hashCode();
      complex2.getReal();
      Complex complex4 = complex1.multiply(complex2);
      complex4.ZERO.getField();
      complex0.INF.sinh();
      Complex complex5 = complex2.ZERO.asin();
      complex5.ZERO.readResolve();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2394.801313261));
      Complex complex1 = complex0.I.pow((-2394.801313261));
      complex1.INF.abs();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.INF.add((-1518.716));
      complex2.cosh();
      Complex complex4 = complex2.INF.reciprocal();
      complex4.I.tan();
      Complex complex5 = complex0.asin();
      complex5.NaN.add(complex4);
      complex0.cos();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isInfinite();
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex2.ONE.log();
      Complex complex5 = complex2.multiply(308);
      Complex complex6 = complex4.asin();
      Complex.valueOf(6.283185307179586, (-187.398));
      complex6.ZERO.atan();
      complex5.I.nthRoot(308);
      Complex complex7 = complex5.add((double) 308);
      complex6.divide(complex7);
      complex3.tan();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex0.NaN.sqrt();
      complex1.NaN.tan();
      complex2.ZERO.add(complex0);
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.sqrt1z();
      complex5.ONE.cosh();
      Complex complex6 = complex3.atan();
      complex6.I.subtract(4795.462047291);
      complex4.getArgument();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex7.cos();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex9.I.subtract(complex10);
      complex11.INF.divide(complex10);
      complex9.getReal();
      complex6.multiply(complex0);
      complex10.tanh();
      complex7.getImaginary();
      complex8.tanh();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1909.3);
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.conjugate();
      complex2.ONE.sqrt();
      complex0.NaN.getField();
      complex2.ONE.nthRoot(1);
      complex1.multiply(0);
      complex2.getArgument();
      complex1.getArgument();
      complex1.hashCode();
      Complex complex3 = complex1.subtract(-0.0);
      complex1.INF.divide((-2106.35955443));
      complex3.ONE.readResolve();
      complex1.add(-0.0);
      complex1.multiply(2.047863006591797);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = Complex.valueOf(1338.1);
      Complex complex5 = complex4.NaN.tanh();
      complex1.ZERO.pow(complex2);
      complex2.ZERO.hashCode();
      complex0.divide(complex1);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1338.1);
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex6.ZERO.acos();
      complex7.I.cosh();
      complex6.getArgument();
      Complex.valueOf((-281.846284), 0.0);
      Complex complex8 = complex3.add(0.0);
      complex6.tan();
      Complex complex9 = complex2.ONE.conjugate();
      Complex complex10 = complex3.reciprocal();
      complex10.ZERO.reciprocal();
      Complex complex11 = complex10.cos();
      complex11.ONE.multiply(complex5);
      complex2.isInfinite();
      complex0.sin();
      complex1.isNaN();
      complex9.cos();
      complex5.asin();
      complex6.sinh();
      complex8.hashCode();
      Complex complex12 = complex0.conjugate();
      complex12.ONE.exp();
      complex8.log();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      Complex complex1 = complex0.I.tan();
      complex1.INF.divide(20.0);
      Complex complex2 = complex0.INF.sinh();
      Complex complex3 = complex0.NaN.sqrt();
      Complex.valueOf(20.0);
      complex3.I.reciprocal();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.add(20.0);
      complex4.isNaN();
      complex4.cos();
      complex4.equals(complex5);
      complex0.equals(complex4);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-2288));
      complex0.ONE.getField();
      Complex complex2 = complex1.ZERO.add((double) (-2288));
      Complex complex3 = complex1.NaN.multiply(complex2);
      Complex complex4 = complex3.INF.log();
      complex4.INF.tan();
      complex1.getArgument();
      complex0.sin();
      Complex complex5 = Complex.ZERO;
      complex2.ONE.asin();
      complex1.ZERO.atan();
      complex5.ONE.subtract(complex0);
      complex1.multiply((-2288));
      Complex complex6 = complex1.I.add(complex5);
      complex6.abs();
      complex5.NaN.pow((-3.141592653589793));
      Complex.valueOf(0.037378571927547455, (-254.267));
      complex5.INF.pow(complex3);
      Complex complex7 = complex2.pow(0.0);
      complex0.multiply(complex7);
      Complex complex8 = complex2.multiply(complex3);
      complex8.ZERO.tan();
      complex1.conjugate();
      complex5.toString();
      complex0.toString();
      complex1.divide((double) (-2288));
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.createComplex(0.0, 215.92837);
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex2.ZERO.pow((-20.0));
      complex3.INF.toString();
      Complex complex4 = complex2.NaN.tan();
      Complex complex5 = complex0.NaN.asin();
      Complex complex6 = complex2.INF.add(complex4);
      complex0.ONE.nthRoot(1221);
      Complex complex7 = complex0.tan();
      complex7.getArgument();
      complex4.hashCode();
      complex4.negate();
      Complex complex8 = complex6.createComplex(164.2614467312647, 164.2614467312647);
      complex8.I.multiply(173.6104);
      complex8.INF.createComplex(0.0, 2.0);
      complex2.hashCode();
      complex1.asin();
      Complex complex9 = complex2.divide(complex0);
      complex6.getField();
      complex9.toString();
      complex2.nthRoot(1221);
      complex1.toString();
      complex8.getReal();
      complex5.conjugate();
      complex3.getReal();
      complex2.pow((-2176.74));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2365.823782491987));
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.exp();
      complex3.isInfinite();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex4.log();
      Complex complex8 = complex5.cos();
      Complex complex9 = complex8.ONE.tan();
      complex9.INF.subtract((-2365.823782491987));
      Complex complex10 = complex8.ZERO.multiply(188);
      complex1.subtract(complex4);
      complex8.sin();
      complex3.isNaN();
      complex6.multiply((double) 188);
      complex8.divide((double) 188);
      Complex complex11 = complex1.reciprocal();
      complex7.divide((-2365.823782491987));
      complex10.add(Double.NaN);
      Complex complex12 = complex11.negate();
      complex12.multiply(59874.140625);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      complex1.ZERO.abs();
      Complex complex2 = complex1.INF.add(20.0);
      Complex complex3 = complex2.INF.exp();
      complex0.isInfinite();
      Complex complex4 = complex0.sqrt();
      complex0.getImaginary();
      Complex complex5 = complex4.pow((-2320.7971918604));
      complex2.NaN.cos();
      Complex.valueOf(1277.7154228796924, 20.0);
      complex0.divide(0.0);
      Complex complex6 = complex5.cosh();
      complex6.ONE.sqrt();
      complex1.getImaginary();
      complex3.readResolve();
      complex2.acos();
      complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex3.ZERO.subtract(complex1);
      Complex complex4 = complex0.multiply((-71));
      Complex complex5 = Complex.valueOf(Double.NaN, (double) (-71));
      complex2.multiply(complex5);
      complex2.INF.hashCode();
      complex4.NaN.divide(Double.NaN);
      complex2.NaN.sqrt1z();
      complex0.getArgument();
      Complex complex6 = complex2.I.multiply((double) (-71));
      complex6.getArgument();
      Complex complex7 = complex2.multiply(0);
      Complex complex8 = complex3.acos();
      complex8.multiply(complex1);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.conjugate();
      complex2.ZERO.getField();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.NaN.subtract(6.283185307179586);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = Complex.valueOf((-6.600437262505396E-9), 1937.366930842);
      Complex complex7 = complex0.sqrt1z();
      complex7.readResolve();
      Complex complex8 = complex5.multiply(6.283185307179586);
      Complex complex9 = complex8.NaN.cos();
      complex8.ZERO.sinh();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex5.cosh();
      complex11.tan();
      complex10.reciprocal();
      Complex complex12 = complex3.pow(6.283185307179586);
      complex12.ZERO.conjugate();
      complex4.conjugate();
      complex0.tan();
      complex1.pow(complex7);
      complex9.isInfinite();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.toString();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.multiply((-6.1837904549178745E-9));
      Complex complex3 = complex0.exp();
      complex3.getField();
      complex1.ONE.divide(complex0);
      complex3.getArgument();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.INF.multiply(complex3);
      Complex complex6 = complex5.ONE.tan();
      complex1.I.add(complex3);
      Complex complex7 = complex0.ZERO.cosh();
      complex4.NaN.subtract(4604.24);
      Complex complex8 = complex7.INF.subtract((-3.081552929643174E-9));
      complex4.I.divide(complex2);
      complex4.I.getField();
      complex0.nthRoot(1);
      complex8.pow(complex4);
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex((-302.2), (-302.2));
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.asin();
      complex0.getReal();
      complex1.getArgument();
      Complex complex6 = complex4.conjugate();
      complex4.ZERO.getArgument();
      complex0.NaN.reciprocal();
      complex6.ZERO.nthRoot(2719);
      complex5.multiply(Double.NaN);
      Complex complex7 = complex5.add((-487.0));
      complex7.I.subtract((-487.0));
      complex7.isInfinite();
      Complex complex8 = Complex.valueOf((-2.356194490192345), 0.0);
      Complex complex9 = complex8.NaN.subtract((-300.5));
      Complex complex10 = new Complex(0.0, (-3311.9710023394014));
      Complex complex11 = complex9.INF.multiply(complex10);
      Complex.valueOf((-20.0));
      complex1.exp();
      complex9.sin();
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
      complex4.abs();
      complex8.getReal();
      complex9.atan();
      complex9.exp();
      complex11.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(946.221045617);
      complex1.toString();
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex.valueOf((-1889.804), (-20.0));
      complex3.ZERO.divide(0.0);
      complex1.tan();
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(2.146925464473481E-8);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.asin();
      complex1.NaN.abs();
      complex0.INF.hashCode();
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex1.ONE.exp();
      Complex complex7 = complex6.ONE.exp();
      complex7.NaN.getArgument();
      Complex complex8 = complex5.sin();
      Complex complex9 = complex5.ONE.multiply(complex2);
      Complex complex10 = complex8.exp();
      complex10.I.cosh();
      complex9.NaN.divide((-1413.277702));
      complex3.ZERO.multiply(complex7);
      Complex complex11 = complex8.NaN.multiply((-1470));
      complex11.INF.multiply((-1470));
      Complex complex12 = complex0.multiply(2.146925464473481E-8);
      complex5.add(complex8);
      complex5.ONE.sinh();
      complex5.ZERO.reciprocal();
      Complex complex13 = complex9.createComplex(Double.NaN, 0.0);
      complex0.abs();
      complex4.createComplex(2.146925464473481E-8, 2.146925464473481E-8);
      Complex complex14 = complex6.log();
      complex14.ZERO.subtract(complex13);
      complex3.divide(0.0);
      complex0.isInfinite();
      complex2.negate();
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-4971.8));
      Complex complex1 = complex0.ONE.subtract((-4971.8));
      Complex complex2 = complex1.ZERO.divide(0.0);
      complex0.readResolve();
      complex1.isNaN();
      Complex complex3 = Complex.valueOf(2327.274551);
      Complex complex4 = complex0.multiply(1);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex7.cosh();
      complex4.equals(complex5);
      Complex complex9 = Complex.valueOf((-4971.8));
      complex6.ONE.divide(complex7);
      complex7.ONE.tanh();
      complex4.getArgument();
      complex8.NaN.sqrt1z();
      complex9.exp();
      complex5.tanh();
      Complex.valueOf((-964.41), (-895.43078259501));
      complex1.sqrt1z();
      complex8.pow(complex9);
      Complex complex10 = complex0.sqrt1z();
      complex2.subtract(complex10);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-2327.0), (-2327.0));
      complex1.NaN.getField();
      complex1.ONE.atan();
      complex0.getReal();
      complex0.log();
      Complex complex2 = complex1.atan();
      complex2.NaN.pow(1252.224077);
      complex2.NaN.abs();
      complex1.sinh();
      Complex complex3 = Complex.valueOf((-2327.0), (-2327.0));
      complex3.ZERO.hashCode();
      int int0 = (-382);
      try { 
        complex3.NaN.nthRoot((-382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -382
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.pow(1388.9225734646);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex4.NaN.negate();
      complex6.NaN.multiply(1388.9225734646);
      complex3.getField();
      Complex complex7 = complex5.sqrt();
      complex3.equals(complex4);
      Complex complex8 = complex0.multiply(complex5);
      complex3.getReal();
      complex3.createComplex((-2.329967807055457E-10), 9.993330547750349E-8);
      complex8.subtract((double) 1);
      Complex complex9 = complex8.sin();
      complex9.subtract(1027.9778635304583);
      complex3.asin();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1359.9314));
      complex0.isNaN();
      complex0.I.tanh();
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = Complex.valueOf((-1359.9314), 992.607027975607);
      Complex complex3 = Complex.INF;
      complex3.ZERO.toString();
      complex3.multiply(complex1);
      Complex.valueOf((-1359.9314));
      Complex complex4 = complex3.INF.sin();
      complex4.I.acos();
      Complex complex5 = complex3.ONE.cos();
      complex5.ZERO.multiply(complex0);
      Complex complex6 = complex2.I.divide(complex3);
      Complex complex7 = complex0.multiply(complex2);
      Complex complex8 = complex6.NaN.exp();
      complex7.getArgument();
      complex6.abs();
      complex8.NaN.add(0.0);
      complex1.asin();
      complex2.subtract((-0.6305092076072965));
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.asin();
      complex0.isInfinite();
      Complex complex2 = complex0.add(0.0);
      complex2.ONE.divide(complex0);
      complex2.ONE.multiply(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.abs();
      complex2.log();
      double double0 = (-769.998191101);
      complex3.NaN.add((-769.998191101));
      complex3.cos();
      int int0 = (-6439);
      try { 
        complex1.nthRoot((-6439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -6,439
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.createComplex(147.99219, (-20.0));
      Complex complex3 = complex0.pow((-1051.78054));
      Complex complex4 = complex3.multiply(162);
      complex3.NaN.tan();
      Complex complex5 = complex4.sqrt();
      complex5.I.tanh();
      complex0.toString();
      Complex complex6 = complex1.cosh();
      Complex complex7 = Complex.valueOf(335.707044038, 335.707044038);
      Complex complex8 = complex7.sin();
      complex8.ZERO.hashCode();
      complex1.readResolve();
      complex1.readResolve();
      Complex complex9 = complex1.divide((double) 162);
      Complex complex10 = complex7.pow(complex9);
      complex6.add(complex2);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.tan();
      complex2.NaN.getField();
      complex2.ZERO.pow(216.0);
      Complex complex4 = Complex.valueOf(216.0);
      complex3.reciprocal();
      complex1.acos();
      complex4.asin();
      try { 
        complex0.nthRoot((-1879));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,879
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 783.954054);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.INF.acos();
      complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.ONE.subtract(complex0);
      Complex complex5 = complex4.ZERO.asin();
      complex5.ZERO.negate();
      double double0 = complex1.getReal();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      complex1.getImaginary();
      complex1.abs();
      Complex complex6 = complex0.acos();
      assertEquals((-7.357498001380199), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.I.exp();
      assertEquals(0.5403023058681398, complex7.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex8.INF.sqrt1z();
      Complex complex9 = complex3.sin();
      Complex complex10 = complex9.ONE.negate();
      assertSame(complex9, complex8);
      
      complex3.INF.add(Double.NaN);
      complex4.getArgument();
      complex4.multiply((-1.5695207425275204));
      complex5.readResolve();
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      
      Complex complex11 = Complex.valueOf((-2679.001652375181));
      assertEquals((-2679.001652375181), complex11.getReal(), 0.01);
      assertFalse(complex11.equals((Object)complex10));
      
      complex4.getArgument();
      Complex complex12 = complex4.divide(complex0);
      Complex complex13 = complex12.tan();
      assertEquals((-1.5573990441442016), complex13.getReal(), 0.01);
      assertEquals((-0.004369520670687494), complex13.getImaginary(), 0.01);
      
      Complex complex14 = Complex.ZERO;
      Object object0 = complex14.readResolve();
      complex3.equals(object0);
      assertTrue(object0.equals((Object)complex5));
      assertTrue(complex14.equals((Object)complex5));
  }
}
