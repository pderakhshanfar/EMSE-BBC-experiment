/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:57:00 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-373.973376009), 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      complex0.multiply((-741.38179));
      complex0.pow(Double.POSITIVE_INFINITY);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1020.3217272136584));
      Complex complex1 = new Complex(1.69289919836784E59, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1020.3217272136584));
      Complex complex1 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.INF.exp();
      complex1.pow(complex2);
      complex2.tan();
      complex1.multiply(complex0);
      complex0.toString();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, (-1020.3217272136584));
      Complex complex1 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      complex1.INF.exp();
      Complex complex2 = complex0.pow(complex1);
      complex1.tan();
      complex2.multiply(complex1);
      complex1.toString();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = Complex.valueOf((-680.0), (-1.0327438817539326E295));
      complex1.tan();
      Complex complex2 = new Complex((-1.0327438817539326E295));
      complex2.sqrt1z();
      complex1.multiply(complex2);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(1192.2582169, (-412163.4126385841));
      complex0.log();
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.getField();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(65.63173725267784, 65.63173725267784);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(7.358873642076596E195, 1.4710301042496785);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(936.6335, (-20.0));
      complex1.tan();
      complex1.pow((-20.0));
      complex1.reciprocal();
      complex1.atan();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isInfinite();
      Complex complex1 = complex0.tan();
      complex1.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = (-680.0);
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = Complex.valueOf((-680.0));
      complex0.subtract(0.2378782033920288);
      complex0.ZERO.log();
      complex0.getField();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = Complex.ONE;
      complex0.conjugate();
      complex1.sqrt();
      complex2.multiply(complex1);
      complex1.atan();
      complex2.pow(1.2639113706171572E250);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.atan();
      complex1.I.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex4.multiply((-3143.4683));
      complex5.NaN.tan();
      Complex complex6 = complex2.atan();
      complex6.cos();
      Complex complex7 = complex2.sqrt1z();
      Complex complex8 = complex4.INF.sinh();
      complex0.ONE.nthRoot(3077);
      complex7.INF.subtract((-306.3073729809));
      Complex complex9 = complex8.NaN.multiply(complex3);
      Complex complex10 = complex0.I.asin();
      complex10.ZERO.tanh();
      complex1.ONE.getField();
      complex7.ONE.nthRoot(929);
      Complex complex11 = complex0.createComplex(2038.445, 2038.445);
      Complex complex12 = complex11.cos();
      complex7.subtract(complex4);
      complex2.log();
      Complex complex13 = complex2.sin();
      complex13.divide(complex8);
      complex12.isInfinite();
      complex6.reciprocal();
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(523.0, 523.0);
      complex0.nthRoot(3142);
      complex0.add((double) 3142);
      Complex complex1 = Complex.valueOf(523.0, 523.0);
      complex1.ONE.divide(Double.NaN);
      complex0.pow((double) 3142);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(390.32644, 390.32644);
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.sin();
      complex0.isInfinite();
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex.valueOf((-680.0));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.multiply((-326));
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.NaN;
      complex4.toString();
      complex3.negate();
      complex4.conjugate();
      complex0.tanh();
      complex2.exp();
      complex0.getImaginary();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(523.0, 523.0);
      Complex complex1 = new Complex(2.3100480183046895E179);
      Complex complex2 = new Complex((-825.38221702), 2679);
      Complex complex3 = complex2.multiply(2679);
      complex3.asin();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = Complex.NaN;
      complex4.negate();
      Complex complex6 = complex2.conjugate();
      complex1.add(complex0);
      complex1.asin();
      complex0.tan();
      complex6.tanh();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(964);
      Complex complex1 = new Complex(964);
      Complex complex2 = new Complex(964, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(964);
      Complex complex4 = complex3.asin();
      complex4.subtract(complex0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.negate();
      complex6.conjugate();
      complex2.add(complex4);
      complex5.asin();
      complex0.tan();
      complex2.tanh();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(3.141592653589793);
      Complex complex1 = new Complex(3.141592653589793, Double.POSITIVE_INFINITY);
      complex1.divide(2.0);
      complex1.negate();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.71008357E8);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(347.459);
      Complex complex2 = complex0.ZERO.tanh();
      Object object0 = complex2.readResolve();
      ((Complex) object0).ONE.cos();
      Object object1 = complex2.readResolve();
      complex2.equals(object1);
      complex0.readResolve();
      Complex complex3 = new Complex(347.459);
      Complex.valueOf((-8.56825295972308E226));
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0545702922669977, 431.816194347);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.subtract(431.816194347);
      complex2.INF.log();
      Complex complex3 = complex1.log();
      Complex complex4 = complex1.asin();
      complex3.add(complex1);
      Complex complex5 = complex4.atan();
      complex4.tan();
      complex1.acos();
      Complex complex6 = complex4.atan();
      Complex complex7 = Complex.valueOf(431.816194347, 1882.0129093);
      complex7.abs();
      Complex complex8 = complex5.sin();
      complex8.sqrt();
      complex6.sinh();
      Complex complex9 = Complex.valueOf(1930.916315243148, 2.0);
      complex8.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = complex0.cos();
      complex0.abs();
      complex0.nthRoot(2679);
      Complex complex2 = complex0.divide(complex0);
      complex0.multiply((-777));
      Complex complex3 = complex1.asin();
      complex1.subtract(complex3);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.negate();
      Complex complex6 = complex0.conjugate();
      complex6.add(complex0);
      complex2.asin();
      complex0.tan();
      complex3.tanh();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = complex0.INF.asin();
      complex0.abs();
      Complex complex2 = complex0.exp();
      Complex.valueOf(961.6652224137047, (-680.0));
      complex0.isNaN();
      complex2.isNaN();
      double double0 = (-1628.355424895613);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.acos();
      complex1.atan();
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = Complex.valueOf(426.256534680364, 426.256534680364);
      complex6.ONE.atan();
      complex6.I.toString();
      complex0.equals("D");
      complex1.readResolve();
      Complex complex7 = complex0.cosh();
      complex1.sin();
      Complex complex8 = complex7.I.divide(complex1);
      Complex complex9 = complex8.ZERO.conjugate();
      complex9.NaN.cosh();
      complex9.ZERO.multiply(complex4);
      Complex complex10 = complex2.sqrt();
      Complex complex11 = complex10.log();
      complex9.asin();
      complex11.ZERO.add(complex4);
      complex7.atan();
      complex5.tan();
      complex0.acos();
      Complex complex12 = complex4.atan();
      complex12.subtract(complex10);
      complex12.abs();
      Complex complex13 = complex10.sin();
      complex11.divide(0.0);
      Complex.valueOf((-2437.8489282753));
      complex9.subtract(complex4);
      complex13.equals(complex4);
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7619237899780273);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ONE.sinh();
      complex3.ONE.log();
      Complex complex4 = complex1.cos();
      complex1.INF.abs();
      complex4.ZERO.nthRoot(1);
      Complex complex5 = complex1.NaN.divide(complex0);
      complex0.sinh();
      complex1.multiply((-2159));
      complex4.asin();
      Complex complex6 = complex5.subtract(complex4);
      complex4.createComplex((-1.2742413956979062), Double.POSITIVE_INFINITY);
      Complex complex7 = complex4.negate();
      Complex complex8 = complex7.conjugate();
      complex8.add(complex6);
      Complex complex9 = complex6.asin();
      complex2.tan();
      complex8.sqrt1z();
      complex6.tanh();
      complex9.negate();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.pow(complex1);
      complex1.ZERO.multiply(978);
      complex2.ZERO.multiply(1.3894113013027805);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.acos();
      complex4.ONE.readResolve();
      Complex complex5 = complex0.ZERO.pow(complex4);
      Complex complex6 = complex0.tan();
      Complex complex7 = complex6.ZERO.createComplex(0.7615941559557649, 0.7615941559557649);
      Complex complex8 = complex0.sqrt();
      complex8.NaN.divide(complex1);
      Complex complex9 = Complex.valueOf(0.7615941559557649);
      complex9.INF.getArgument();
      Complex complex10 = complex8.INF.subtract(0.13533528323661276);
      complex8.NaN.divide(1.8500902652740479);
      complex6.tanh();
      Complex complex11 = complex4.add((-1531.99));
      complex11.exp();
      complex1.abs();
      complex4.nthRoot(978);
      complex5.divide((-1531.99));
      complex8.NaN.tanh();
      complex10.getField();
      complex10.divide(1.0);
      complex1.tan();
      complex7.tan();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.negate();
      complex0.isInfinite();
      Complex complex3 = complex0.sqrt();
      complex3.sinh();
      complex2.equals(complex0);
      complex2.reciprocal();
      Complex complex4 = Complex.valueOf((-214.1919), 2023.122);
      complex4.multiply(complex1);
      Complex complex5 = Complex.ONE;
      complex4.subtract(complex5);
      complex3.toString();
      Complex.valueOf(2023.122, 276.0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.8677119923665573E-278);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.tanh();
      complex2.NaN.cosh();
      Complex complex4 = new Complex(4.8677119923665573E-278);
      complex0.ZERO.hashCode();
      complex2.multiply(complex4);
      Complex complex5 = complex0.sqrt1z();
      complex5.sin();
      Complex complex6 = complex2.pow(complex0);
      complex6.I.toString();
      complex6.ZERO.multiply(1244);
      Complex complex7 = Complex.valueOf((-3076.933604289), (-561.1295140439867));
      Complex complex8 = complex7.NaN.reciprocal();
      complex8.ONE.cos();
      Complex complex9 = complex7.INF.tan();
      complex7.subtract(1307.05284849404);
      complex1.reciprocal();
      complex0.readResolve();
      Complex complex10 = complex2.conjugate();
      complex10.I.pow(complex4);
      complex3.add((double) 1244);
      complex9.exp();
      complex8.subtract(4.922335993825849E-8);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7619237899780273);
      Complex complex1 = complex0.atan();
      complex1.asin();
      Complex complex2 = complex1.cos();
      complex1.INF.abs();
      complex2.ZERO.nthRoot(1);
      complex1.NaN.divide(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.multiply((-1));
      complex0.nthRoot(769);
      complex1.negate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.getReal();
      complex1.equals(complex4);
      Complex complex5 = Complex.valueOf((-0.1275278893606981), (-183.0));
      complex5.sqrt1z();
      Complex complex6 = new Complex(769, Double.POSITIVE_INFINITY);
      complex6.tanh();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7619237899780273);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.cos();
      complex1.INF.abs();
      complex3.ZERO.nthRoot(1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.multiply((-1));
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.divide(1.7619237899780273);
      complex5.sqrt();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.reciprocal();
      Complex complex2 = complex1.subtract(2661.1351859534);
      complex1.abs();
      complex0.negate();
      Complex complex3 = complex0.sinh();
      complex0.getReal();
      complex1.equals(complex0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 2661.1351859534);
      Complex complex5 = complex0.sqrt1z();
      complex3.tanh();
      complex5.negate();
      Complex.valueOf(Double.NaN);
      complex4.cosh();
      complex2.nthRoot(879);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      complex2.reciprocal();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex3.subtract(2661.1351859534);
      complex2.abs();
      complex1.nthRoot(879);
      complex0.negate();
      complex0.sinh();
      complex1.getReal();
      complex3.equals(complex1);
      Complex complex5 = Complex.valueOf(0.0, 2661.1351859534);
      complex1.sqrt1z();
      complex4.conjugate();
      Complex complex6 = complex5.exp();
      complex5.NaN.nthRoot(879);
      complex6.add((-2.825957931066039));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = Complex.valueOf((-680.0));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.ZERO.log();
      complex4.INF.reciprocal();
      complex0.getField();
      Complex complex5 = complex1.I.atan();
      Complex complex6 = complex2.tan();
      complex6.nthRoot(1258);
      Complex complex7 = new Complex(1970.997043);
      complex7.pow(complex0);
      Complex complex8 = Complex.NaN;
      complex8.negate();
      complex3.subtract(complex5);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-3038.8858));
      Complex complex9 = new Complex(347.459, (-1830.9909162527));
      complex9.conjugate();
      complex9.getField();
      complex8.subtract((-7.039936181669799E-4));
      complex1.hashCode();
      Object object0 = new Object();
      Complex complex10 = Complex.ONE;
      complex2.equals(complex10);
      complex0.conjugate();
      Complex complex11 = Complex.I;
      complex11.ONE.atan();
      complex9.abs();
      Complex complex12 = Complex.ZERO;
      complex3.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      complex2.reciprocal();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex3.subtract(2661.1351859534);
      complex2.abs();
      complex1.nthRoot(879);
      complex0.negate();
      Complex complex5 = complex0.sinh();
      complex1.getReal();
      complex3.equals(complex1);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 2661.1351859534);
      Complex complex7 = complex1.sqrt1z();
      complex5.tanh();
      complex7.negate();
      Complex.valueOf(722.04);
      complex6.cosh();
      complex4.nthRoot(879);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex3.subtract(complex4);
      complex2.abs();
      Complex complex7 = complex4.tanh();
      complex2.multiply(0.0);
      Complex complex8 = complex6.tan();
      complex4.nthRoot(1258);
      Complex complex9 = complex2.pow(complex7);
      Complex complex10 = complex3.negate();
      complex5.subtract(complex4);
      Complex.valueOf(Double.NaN, 0.0);
      Complex complex11 = complex10.conjugate();
      complex3.getField();
      complex5.subtract((-1317.7161725787));
      complex8.hashCode();
      Object object0 = new Object();
      complex5.equals(complex9);
      complex10.conjugate();
      Complex complex12 = Complex.I;
      complex4.abs();
      Complex.valueOf(Double.NaN, (-1317.7161725787));
      complex3.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = complex0.divide(17.0);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.tanh();
      complex2.exp();
      Complex complex5 = complex4.reciprocal();
      complex5.hashCode();
      complex3.cosh();
      complex1.hashCode();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex6 = complex1.conjugate();
      complex6.abs();
      Complex complex7 = Complex.ZERO;
      complex7.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex4.subtract(2661.1351859534);
      complex5.tanh();
      complex5.exp();
      complex0.reciprocal();
      complex4.hashCode();
      complex3.cosh();
      complex5.hashCode();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex6 = complex4.conjugate();
      complex4.abs();
      Complex complex7 = Complex.ZERO;
      complex6.subtract(complex7);
      complex5.createComplex(2661.1351859534, (-1.0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.29208312417163346, 0.29208312417163346);
      Complex complex1 = Complex.valueOf(0.29208312417163346);
      Complex complex2 = complex0.divide((-242.3674));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex2.tanh();
      complex1.exp();
      complex5.reciprocal();
      complex3.hashCode();
      Complex complex6 = complex2.cosh();
      complex2.hashCode();
      complex6.equals(complex5);
      Complex complex7 = complex4.conjugate();
      complex7.abs();
      Complex complex8 = Complex.ZERO;
      complex8.tan();
      complex7.subtract(complex5);
      Complex complex9 = new Complex((-1520.40630782));
      complex2.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2822.3563312112656, (-1.0));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.log();
      complex3.nthRoot(1);
      complex3.ONE.getArgument();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex4.ZERO.multiply(complex0);
      Object object0 = new Object();
      complex2.equals(object0);
      Complex.valueOf(766.5999, Double.POSITIVE_INFINITY);
      complex5.sqrt1z();
      complex1.tanh();
      complex5.negate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.valueOf((-680.0));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex1.sqrt();
      complex1.ZERO.log();
      complex1.getField();
      Complex complex6 = complex2.I.atan();
      complex2.reciprocal();
      complex4.hashCode();
      Complex complex7 = complex5.cosh();
      complex6.equals(complex7);
      Complex complex8 = Complex.ZERO;
      complex8.conjugate();
      complex2.abs();
      Complex complex9 = Complex.ZERO;
      complex8.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1391.7));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.add(complex2);
      complex3.INF.negate();
      Complex complex4 = complex0.exp();
      complex0.getImaginary();
      Complex complex5 = complex4.reciprocal();
      complex5.createComplex(0.0, (-5.772862039728412E-9));
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = Complex.valueOf((-680.0));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.ZERO.log();
      complex0.getField();
      complex1.I.atan();
      complex1.subtract(complex3);
      complex2.readResolve();
      Complex complex5 = complex2.sinh();
      complex5.ZERO.add((-680.0));
      complex4.tanh();
      Complex.valueOf((-680.0));
      complex4.divide(complex5);
      complex0.reciprocal();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-5336.379811127));
      complex1.I.reciprocal();
      Complex complex2 = complex0.add(complex1);
      complex2.getImaginary();
      Complex complex3 = new Complex(Double.NaN);
      complex3.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double double0 = (-680.0);
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-680.0));
      Complex complex3 = complex0.conjugate();
      complex2.subtract(complex3);
      complex3.sinh();
      complex0.multiply(1236);
      // Undeclared exception!
      complex2.nthRoot(2147482539);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = complex0.INF.asin();
      complex0.abs();
      Complex complex2 = complex0.exp();
      complex1.isNaN();
      complex2.isNaN();
      Complex complex3 = complex0.multiply(3.959211091077107E164);
      complex3.add((-680.0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.I.tanh();
      complex2.ONE.getArgument();
      Complex complex3 = complex0.I.log();
      Complex complex4 = complex3.createComplex(0.0, 20.0);
      complex4.INF.conjugate();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex3.I.pow(0.0);
      Complex complex7 = complex6.ZERO.createComplex(357.4436457761, (-1749.65727343));
      complex0.getField();
      complex6.NaN.atan();
      complex0.cos();
      complex6.tanh();
      Complex complex8 = complex0.INF.multiply(complex1);
      complex4.readResolve();
      Complex complex9 = complex6.multiply(complex1);
      complex9.add(complex0);
      complex7.isInfinite();
      complex5.sqrt1z();
      complex8.divide(1.7619237899780273);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply((-4238.5));
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.I.subtract(complex0);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.exp();
      complex4.cosh();
      Complex complex7 = Complex.valueOf((-4238.5), (double) 17);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.subtract(complex8);
      complex9.sinh();
      complex2.tanh();
      complex7.createComplex((-1131.08136), (-4.877952454011428E-9));
      complex6.divide(complex5);
      complex5.reciprocal();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1391.7));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.multiply((-1709));
      complex2.abs();
      Complex complex3 = complex2.multiply((-1709));
      Complex complex4 = complex3.sqrt();
      complex4.getImaginary();
      complex1.readResolve();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1391.7));
      Complex complex2 = complex1.ONE.divide(2054.8449599018);
      Complex complex3 = complex1.NaN.conjugate();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.exp();
      complex1.reciprocal();
      complex6.hashCode();
      complex0.cosh();
      complex1.hashCode();
      complex0.equals(complex6);
      complex2.conjugate();
      complex5.abs();
      Complex complex7 = Complex.ZERO;
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-1551.31694), (-1551.31694));
      Complex complex2 = complex0.tanh();
      complex1.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.sqrt1z();
      complex1.sinh();
      Complex complex5 = Complex.valueOf((-9.865691193993138E-8), (-9.865691193993138E-8));
      complex5.nthRoot(2300);
      complex0.toString();
      Complex.valueOf((-1551.31694));
      complex4.getArgument();
      Complex.valueOf((-1551.31694));
      complex3.subtract(1.256828068633383E-7);
      complex1.abs();
      try { 
        complex2.nthRoot((-928));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -928
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex0.sqrt1z();
      complex2.sinh();
      Complex complex4 = Complex.valueOf((double) 2300, 3629.125);
      Complex complex5 = Complex.ZERO;
      complex5.nthRoot(2300);
      complex1.toString();
      complex3.acos();
      Complex complex6 = Complex.NaN;
      complex6.getArgument();
      Complex.valueOf(0.0);
      Complex complex7 = complex0.subtract(Double.NaN);
      complex0.abs();
      Complex complex8 = Complex.NaN;
      complex8.nthRoot(2300);
      Complex complex9 = complex6.negate();
      complex7.sinh();
      complex9.getReal();
      complex0.equals((Object) null);
      Complex.valueOf((-258.5636548181314), (-256.6793));
      complex4.sqrt1z();
      complex6.tanh();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.acos();
      complex2.I.negate();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.sinh();
      Complex.valueOf(0.0, 0.0);
      complex4.nthRoot(1289);
      complex0.toString();
      complex3.acos();
      complex3.getArgument();
      Complex.valueOf(167.608527357);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.subtract((double) 1289);
      complex0.abs();
      complex6.nthRoot(1);
      Complex complex7 = complex5.negate();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.sinh();
      complex4.getReal();
      Complex complex9 = new Complex((-95.8));
      complex7.equals(complex9);
      Complex.valueOf(0.8414709848078965, (double) 2300);
      complex1.sqrt1z();
      complex5.tanh();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.I.subtract(complex0);
      complex4.NaN.sinh();
      Complex complex5 = complex3.ONE.multiply(17);
      complex1.ZERO.abs();
      Complex complex6 = complex2.multiply(1481);
      complex6.INF.tanh();
      complex6.sqrt();
      complex3.getImaginary();
      Complex complex7 = complex5.divide(complex0);
      complex7.getReal();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.valueOf(799.1064215495453, 799.1064215495453);
      complex1.nthRoot(2300);
      complex6.toString();
      Complex complex8 = complex3.acos();
      complex0.getArgument();
      Complex.valueOf(Double.NaN);
      Complex complex9 = complex4.subtract(799.1064215495453);
      complex5.abs();
      complex0.nthRoot(2300);
      complex4.negate();
      complex4.sinh();
      complex8.getReal();
      Complex complex10 = Complex.valueOf((-681.800599531343), 799.1064215495453);
      Object object0 = complex10.readResolve();
      complex9.equals(object0);
      Complex.valueOf(0.6456501483917236, 1333.936);
      Complex complex11 = new Complex(306.8552585856);
      complex0.ONE.toString();
      complex11.sqrt1z();
      complex9.tanh();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.29208312417163346, 0.29208312417163346);
      Complex complex1 = Complex.valueOf(0.29208312417163346);
      Complex complex2 = complex0.reciprocal();
      complex0.add(complex2);
      Complex complex3 = complex0.exp();
      complex2.getImaginary();
      complex1.reciprocal();
      complex2.createComplex(0.29208312417163346, 0.29208312417163346);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1120.2065));
      Complex complex1 = new Complex((-1120.2065), (-1120.2065));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex1.log();
      complex1.multiply((-1120.2065));
      complex4.hashCode();
      Complex complex6 = complex1.sin();
      complex2.toString();
      complex3.cos();
      Complex complex7 = Complex.ONE;
      complex7.hashCode();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex7.divide(426.3654);
      Complex complex10 = complex9.NaN.tanh();
      complex0.NaN.subtract(complex8);
      complex1.getImaginary();
      complex0.add(complex6);
      complex5.equals("(0.0, 1120.2065)");
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex((-4448.57687890641));
      Complex complex1 = Complex.I;
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.INF.conjugate();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = complex1.add(complex3);
      complex3.toString();
      complex2.getArgument();
      complex3.getField();
      complex2.getImaginary();
      complex3.toString();
      Complex complex5 = Complex.ZERO;
      complex5.toString();
      complex5.sinh();
      complex3.negate();
      complex4.tanh();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.tanh();
      complex0.I.toString();
      complex0.nthRoot(1876);
      complex0.nthRoot(155);
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex1.I.negate();
      complex3.NaN.log();
      Complex complex4 = complex1.I.cos();
      Complex complex5 = complex1.INF.add(complex0);
      Complex complex6 = complex5.ONE.sin();
      complex3.I.getField();
      Complex complex7 = Complex.ONE;
      complex3.INF.sinh();
      Complex complex8 = Complex.valueOf(0.0);
      complex1.equals(complex7);
      complex1.NaN.abs();
      Complex complex9 = complex7.multiply(complex2);
      Complex complex10 = complex8.tan();
      complex1.readResolve();
      complex6.getImaginary();
      complex8.isNaN();
      Complex complex11 = Complex.valueOf(0.0, Double.NaN);
      complex7.I.sinh();
      complex11.pow(4321.686850460163);
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.divide(complex10);
      complex9.isNaN();
      Complex complex14 = complex4.multiply(complex13);
      complex14.INF.add((double) 1876);
      complex10.multiply((double) 1876);
      complex9.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      complex2.reciprocal();
      Complex complex3 = complex1.NaN.sinh();
      complex3.subtract(2661.1351859534);
      complex2.abs();
      complex1.nthRoot(879);
      complex0.negate();
      Complex complex4 = complex0.sinh();
      complex1.getReal();
      complex3.equals(complex1);
      Complex.valueOf(0.0, 2661.1351859534);
      Complex complex5 = complex1.sqrt1z();
      complex4.tanh();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2998.1905946445));
      Complex complex1 = Complex.valueOf((-2998.1905946445), (-2998.1905946445));
      Complex complex2 = Complex.valueOf(0.0, (-2998.1905946445));
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex3.I.multiply(complex1);
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = Complex.valueOf(0.0);
      complex6.INF.exp();
      Complex complex7 = Complex.NaN;
      complex2.ONE.divide(complex7);
      complex7.NaN.sinh();
      complex0.nthRoot(2760);
      complex0.sqrt();
      Complex complex8 = complex1.multiply(1316);
      complex8.subtract(complex3);
      complex7.multiply((double) 1316);
      complex1.getField();
      Complex complex9 = complex5.exp();
      Complex.valueOf(4772.9146043728, (-3.786663982218041E-8));
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-4448.57687890641));
      Complex complex1 = Complex.I;
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.INF.conjugate();
      complex2.ZERO.asin();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.multiply((-259.367461));
      complex4.hashCode();
      complex1.sin();
      complex3.toString();
      complex1.cos();
      complex4.hashCode();
      complex4.INF.negate();
      complex1.divide(3134.0);
      complex5.getImaginary();
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.I.subtract(complex0);
      complex4.NaN.sinh();
      complex3.ONE.multiply(17);
      complex1.ZERO.abs();
      Complex complex5 = complex2.multiply(1481);
      complex5.sqrt();
      complex5.getImaginary();
      complex1.divide(complex4);
      complex1.getReal();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1));
      Complex complex2 = complex1.I.divide((double) (-1));
      complex2.NaN.hashCode();
      Complex complex3 = complex1.ZERO.pow(complex0);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex4.NaN.sqrt();
      complex4.I.atan();
      Complex.valueOf(1152.0);
      complex4.INF.abs();
      Complex complex6 = complex3.I.tanh();
      complex6.ZERO.getArgument();
      complex1.getImaginary();
      Complex complex7 = complex6.pow(complex1);
      complex7.getReal();
      Complex complex8 = complex7.createComplex((-1727.09), (-1));
      Complex complex9 = complex8.sin();
      Complex complex10 = complex2.multiply((-1));
      complex1.pow(complex3);
      Complex complex11 = complex6.negate();
      Complex complex12 = complex9.conjugate();
      complex12.ZERO.sin();
      complex3.atan();
      complex6.cosh();
      complex5.subtract(complex10);
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2994.0311188685305);
      Complex complex1 = complex0.ONE.multiply(2994.0311188685305);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.add((-1515.0));
      complex0.INF.readResolve();
      Complex complex4 = Complex.valueOf(0.0);
      complex1.INF.cos();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex0.multiply(complex2);
      complex6.ONE.getField();
      complex1.getField();
      complex3.isInfinite();
      complex1.hashCode();
      Complex complex7 = complex1.sin();
      complex1.abs();
      Complex complex8 = complex1.divide(complex4);
      complex8.NaN.conjugate();
      Complex complex9 = complex5.asin();
      Complex complex10 = complex0.I.tanh();
      complex10.INF.abs();
      complex5.NaN.multiply((-611));
      complex9.sqrt();
      Complex complex11 = complex9.NaN.sin();
      complex5.divide(2994.0311188685305);
      Complex complex12 = complex5.log();
      complex12.NaN.readResolve();
      complex5.sqrt();
      complex1.asin();
      Complex complex13 = Complex.ONE;
      complex11.multiply(complex13);
      complex10.toString();
      Complex complex14 = complex7.add(2994.0311188685305);
      complex7.readResolve();
      complex14.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2066.0));
      Complex complex1 = new Complex((-399.1357), (-399.1357));
      Complex complex2 = complex1.INF.exp();
      complex0.acos();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex4.ONE.asin();
      complex0.getReal();
      Complex complex6 = complex1.INF.cosh();
      complex2.isInfinite();
      complex1.readResolve();
      Complex complex7 = complex3.cos();
      complex3.ZERO.negate();
      Complex complex8 = complex7.NaN.conjugate();
      complex1.multiply((-399.1357));
      Complex complex9 = complex2.acos();
      complex2.I.sqrt();
      complex9.NaN.reciprocal();
      complex2.multiply((-2066.0));
      complex4.createComplex(1.0, (-399.1357));
      complex6.add(1.0);
      complex8.tan();
      complex0.getReal();
      complex4.I.sqrt();
      Complex complex10 = complex5.createComplex((-2066.0), 0.0);
      complex10.ZERO.reciprocal();
      complex0.hashCode();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.ZERO.sqrt1z();
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.valueOf(0.0, 2265.8865);
      complex1.isNaN();
      complex0.sqrt1z();
      complex3.cos();
      complex4.add(0.0);
      complex0.multiply((-523));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.2860509143963117E-8);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex1.ONE.reciprocal();
      complex0.readResolve();
      Complex complex5 = complex1.sin();
      complex0.getImaginary();
      Complex complex6 = complex1.add(complex5);
      complex6.getImaginary();
      Complex complex7 = complex0.ONE.pow(0.0);
      Complex complex8 = Complex.valueOf(0.0);
      complex8.multiply(complex3);
      complex0.negate();
      complex4.multiply((-2836));
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, (-1391.7));
      complex1.ONE.divide(2054.8449599018);
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = complex1.multiply(complex0);
      Complex complex4 = complex3.tanh();
      complex4.exp();
      Complex complex5 = complex2.I.cosh();
      Complex complex6 = complex0.subtract(complex1);
      complex0.NaN.readResolve();
      complex6.sinh();
      complex0.tanh();
      complex1.createComplex(1029.771276681, (-1391.7));
      Complex complex7 = complex2.divide(complex6);
      complex7.ZERO.reciprocal();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7619237899780273);
      Complex complex1 = complex0.ZERO.pow(0.0);
      complex0.getArgument();
      Complex complex2 = complex0.atan();
      complex2.asin();
      Complex complex3 = complex2.cos();
      complex2.INF.abs();
      complex3.ZERO.nthRoot(1);
      complex2.NaN.divide(complex1);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.multiply((-1));
      Complex complex6 = complex4.asin();
      complex5.ONE.subtract(complex6);
      complex5.ONE.createComplex((-1), 1.7619237899780273);
      Complex complex7 = complex6.NaN.negate();
      complex7.conjugate();
      complex5.add(complex6);
      complex4.asin();
      complex6.tan();
      complex0.createComplex(0.0, (-2.9134931730784303E-8));
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-8.741139170029572E-9), Double.NaN);
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      complex0.getImaginary();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.NaN.multiply(896);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.pow(complex1);
      complex5.ONE.add(complex2);
      Complex complex6 = complex0.conjugate();
      complex1.I.cos();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex6.divide(0.0);
      complex1.add(0.0);
      complex4.isNaN();
      complex3.negate();
      complex8.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.I.multiply(complex1);
      complex0.ZERO.tan();
      complex1.ONE.getArgument();
      complex0.isInfinite();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.add(complex0);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.createComplex(0.0, (-6.370937412495338E-9));
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.multiply(complex0);
      complex0.isNaN();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      complex1.multiply(388);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1209.3754554473253));
      Complex complex1 = complex0.NaN.sqrt();
      complex1.ZERO.exp();
      complex1.toString();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.multiply((-1209.3754554473253));
      complex0.readResolve();
      complex4.getReal();
      Complex complex5 = complex2.multiply(0.0);
      Complex complex6 = complex5.NaN.exp();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex4.sqrt1z();
      complex5.tanh();
      complex6.isInfinite();
      complex3.readResolve();
      Complex complex9 = complex8.multiply(2079.7556466861943);
      complex9.ONE.readResolve();
      complex8.hashCode();
      complex2.hashCode();
      complex2.abs();
      complex2.acos();
      complex7.pow(1004.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.sqrt();
      complex0.ONE.subtract(complex2);
      Complex complex3 = complex0.reciprocal();
      complex3.NaN.getArgument();
      complex3.ONE.readResolve();
      complex1.getArgument();
      complex2.INF.sin();
      complex0.I.tanh();
      complex3.getField();
      complex0.NaN.readResolve();
      Complex complex4 = complex0.divide(complex3);
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex5 = Complex.valueOf((-4785.0), 0.0);
      complex5.ZERO.sqrt1z();
      complex5.subtract(2489.997515405);
      Complex complex6 = complex2.negate();
      complex6.I.multiply(2302);
      try { 
        complex4.ZERO.nthRoot((-2654));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,654
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex1.INF.asin();
      Complex complex5 = complex4.INF.tan();
      Complex complex6 = complex5.I.sinh();
      complex6.ONE.acos();
      Complex complex7 = complex4.ONE.multiply(0.0);
      complex0.hashCode();
      complex0.getReal();
      Complex complex8 = complex0.tan();
      complex1.log();
      complex3.getField();
      complex8.multiply(0.0);
      complex0.sin();
      complex7.getReal();
      complex1.readResolve();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.tanh();
      complex0.I.toString();
      complex0.nthRoot(1876);
      complex0.nthRoot(155);
      Complex complex2 = complex0.NaN.reciprocal();
      Complex complex3 = complex1.I.negate();
      complex3.NaN.log();
      complex1.I.cos();
      Complex complex4 = complex1.INF.add(complex0);
      Complex complex5 = complex4.ONE.sin();
      complex3.I.getField();
      Complex complex6 = Complex.ONE;
      complex3.INF.sinh();
      Complex complex7 = Complex.valueOf(0.0);
      complex1.equals(complex6);
      complex1.NaN.abs();
      complex3.multiply(complex1);
      Complex complex8 = complex6.tan();
      complex8.ZERO.readResolve();
      complex7.getImaginary();
      complex1.isNaN();
      Complex complex9 = Complex.valueOf(521.0, 0.0);
      Complex complex10 = complex9.I.pow((double) 1876);
      complex10.INF.divide(complex5);
      complex2.isNaN();
      complex8.multiply(complex5);
      complex8.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-9.865691193993138E-8));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.pow(0.0);
      complex2.ZERO.cosh();
      Complex complex3 = complex2.INF.divide(0.0);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex2.INF.acos();
      Complex complex6 = complex5.ZERO.negate();
      Complex complex7 = complex1.pow(0.0);
      Complex complex8 = complex0.I.sqrt();
      complex5.ONE.subtract(complex4);
      complex0.abs();
      Complex complex9 = complex5.NaN.tanh();
      complex9.INF.multiply((-9.865691193993138E-8));
      Complex complex10 = complex0.tan();
      complex1.nthRoot(1258);
      complex6.NaN.pow(complex1);
      Complex complex11 = complex3.I.negate();
      complex11.subtract(complex7);
      Complex.valueOf((-9.865691193993138E-8), 945.1578);
      Complex complex12 = complex2.conjugate();
      complex12.ZERO.getField();
      Complex complex13 = complex2.subtract(9.865691193993138E-8);
      complex13.I.pow(complex10);
      complex10.I.nthRoot(1258);
      complex4.pow(complex7);
      complex8.cos();
      complex10.getImaginary();
      complex8.sinh();
      complex6.isInfinite();
      Complex.valueOf(9.865691193993138E-8);
      Complex complex14 = complex10.exp();
      complex14.ONE.acos();
      complex0.isNaN();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(2921.351521016612, 2921.351521016612);
      complex0.isNaN();
      Complex complex1 = complex0.I.sqrt1z();
      complex0.readResolve();
      complex0.multiply(2921.351521016612);
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-1120.2065));
      Complex complex1 = new Complex((-1120.2065), (-1120.2065));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.ONE.acos();
      Complex complex4 = complex2.NaN.add(complex1);
      complex0.toString();
      complex4.ZERO.getArgument();
      complex0.getField();
      complex4.getImaginary();
      complex0.toString();
      complex3.toString();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.negate();
      complex2.tanh();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.NaN.acos();
      complex2.I.negate();
      Complex complex3 = complex0.sqrt1z();
      complex1.NaN.sinh();
      Complex complex4 = Complex.valueOf((double) 2300, 0.0);
      complex0.ZERO.nthRoot(2300);
      complex1.ZERO.toString();
      Complex complex5 = complex1.INF.acos();
      complex5.INF.getArgument();
      Complex complex6 = Complex.valueOf(1362.55572161);
      Complex complex7 = complex1.subtract(0.0);
      complex0.abs();
      complex7.nthRoot(2300);
      Complex complex8 = complex1.negate();
      complex8.INF.sinh();
      complex3.getReal();
      complex4.equals("(0.0, 0.0)");
      Complex complex9 = Complex.valueOf((-4797.1), 0.6456501483917236);
      complex9.NaN.sqrt1z();
      complex3.tanh();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sinh();
      complex0.hashCode();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.createComplex((-1.0), (-4098.1385));
      complex3.INF.divide(complex4);
      complex4.ONE.add(0.0);
      complex0.INF.negate();
      Complex complex5 = Complex.valueOf((-1.0), 1.4847880344628818E-8);
      complex5.ZERO.hashCode();
      Complex complex6 = complex5.INF.conjugate();
      complex6.ONE.conjugate();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-5336.379811127));
      complex1.I.reciprocal();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.exp();
      complex3.getImaginary();
      complex1.reciprocal();
      complex3.createComplex((-20.0), 2355.15);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.abs();
      Complex complex3 = complex0.exp();
      complex2.isNaN();
      complex3.isNaN();
      Complex complex4 = complex0.multiply(1.0);
      complex4.add(2245.0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1657.730098);
      Complex complex1 = complex0.sqrt1z();
      complex1.NaN.asin();
      complex1.NaN.multiply(0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex2.INF.cos();
      complex4.ZERO.reciprocal();
      Complex complex5 = complex4.negate();
      complex0.log();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.ZERO.asin();
      complex8.ZERO.tanh();
      Complex complex9 = complex6.NaN.exp();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex6.pow(complex10);
      complex11.acos();
      complex11.NaN.reciprocal();
      Complex.valueOf(179.0981268555, (-811.0));
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getField();
      complex0.I.nthRoot(37);
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.asin();
      complex2.ONE.acos();
      complex2.I.reciprocal();
      Complex complex3 = complex2.ZERO.add(3.150242850860434E59);
      complex3.ZERO.conjugate();
      complex3.getField();
      complex1.INF.pow(complex0);
      Complex complex4 = complex0.NaN.pow((-411.377074));
      Complex complex5 = complex4.NaN.multiply(1);
      Complex complex6 = complex0.NaN.divide(3.150242850860434E59);
      Complex complex7 = complex6.NaN.multiply((-122));
      complex7.I.atan();
      Complex complex8 = complex0.exp();
      Complex complex9 = complex8.ZERO.exp();
      Complex.valueOf(688.895763617291);
      complex6.NaN.sin();
      complex9.I.divide(complex0);
      complex7.NaN.getField();
      complex0.asin();
      complex7.readResolve();
      complex0.readResolve();
      Complex complex10 = Complex.valueOf((-818.159205));
      complex6.asin();
      complex10.tanh();
      complex3.subtract(complex5);
      Complex.valueOf((-3844.4), (-3844.4));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(2251.402, 2251.402);
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      complex1.ZERO.add(complex0);
      Complex complex2 = complex1.subtract(complex0);
      complex2.I.exp();
      Complex complex3 = complex2.NaN.asin();
      complex2.INF.add(complex3);
      Complex complex4 = complex3.ONE.multiply((-2369));
      complex4.NaN.sin();
      complex2.toString();
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex5.divide(2251.402);
      Complex complex8 = complex7.atan();
      complex8.ONE.atan();
      complex3.tan();
      complex8.isNaN();
      complex6.add((double) (-2369));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1499.863758279179), (-27.7));
      Complex complex1 = complex0.INF.multiply(874);
      complex0.abs();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex0.sin();
      complex4.INF.sinh();
      complex1.nthRoot(874);
      complex4.abs();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.I.subtract(0.0);
      Complex complex7 = complex5.ONE.multiply(0.0);
      complex0.isNaN();
      complex1.toString();
      Complex complex8 = complex5.negate();
      complex8.ZERO.subtract(complex1);
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex9.NaN.log();
      complex10.NaN.divide(1730.12247466);
      Complex complex11 = complex8.pow(5.3570679250838727E11);
      complex5.getArgument();
      complex7.hashCode();
      Complex complex12 = complex4.atan();
      complex8.multiply(5.3570679250838727E11);
      complex12.getReal();
      complex5.divide((-27.7));
      complex6.hashCode();
      complex6.sinh();
      complex11.nthRoot(874);
      complex5.createComplex(874, 1.5707963267930865);
      complex3.subtract((double) 874);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sinh();
      complex0.hashCode();
      complex0.sqrt();
      Complex complex1 = complex0.acos();
      complex0.getArgument();
      Complex complex2 = complex1.divide(complex0);
      complex2.pow(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3685.88469, 2621.758598501866);
      Complex complex1 = complex0.I.pow((-3130.9117867));
      complex1.add(complex0);
      complex1.toString();
      Complex complex2 = complex0.ONE.subtract(0.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.exp();
      complex3.getField();
      Complex complex5 = complex0.subtract(complex3);
      complex5.NaN.hashCode();
      complex3.I.cosh();
      complex5.NaN.asin();
      Complex complex6 = complex2.multiply((-2311));
      Complex complex7 = complex5.pow(complex6);
      complex7.ONE.reciprocal();
      Complex complex8 = complex6.asin();
      complex8.NaN.conjugate();
      complex6.acos();
      Complex complex9 = complex5.sqrt();
      Complex complex10 = complex0.subtract(complex9);
      complex10.ONE.sinh();
      complex3.getField();
      complex0.I.pow(2621.758598501866);
      complex2.NaN.sqrt1z();
      Complex complex11 = complex10.reciprocal();
      complex0.getArgument();
      complex0.I.sqrt();
      Complex complex12 = complex2.sqrt1z();
      complex12.hashCode();
      complex10.asin();
      complex3.asin();
      complex11.abs();
      complex4.multiply((-2418));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex((-680.0), (-680.0));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex1.sqrt();
      complex1.ZERO.log();
      complex1.getField();
      complex2.I.atan();
      complex2.I.reciprocal();
      complex3.hashCode();
      complex5.cosh();
      complex4.ONE.hashCode();
      complex2.equals((Object) null);
      Complex complex6 = complex0.conjugate();
      complex6.ONE.abs();
      Complex complex7 = Complex.ZERO;
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.NaN.sinh();
      complex0.NaN.add(complex1);
      complex1.ONE.multiply((-828.5017071078986));
      complex0.I.conjugate();
      Complex complex2 = complex0.ONE.createComplex((-828.5017071078986), 0.0);
      complex2.sqrt1z();
      complex0.INF.pow(complex1);
      complex0.hashCode();
      Complex.valueOf(1.285159987981792E19);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-963.0737));
      Complex complex1 = complex0.pow((-963.0737));
      Complex complex2 = complex0.I.divide((-963.0737));
      assertEquals((-0.0010383421331098543), complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex1.cosh();
      complex4.ONE.negate();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.INF.add(complex3);
      complex6.INF.hashCode();
      complex6.ONE.toString();
      Complex complex7 = complex6.INF.sqrt();
      complex0.ZERO.getArgument();
      complex5.I.hashCode();
      Complex complex8 = complex4.atan();
      complex4.ONE.getArgument();
      Complex complex9 = complex8.cos();
      assertEquals(0.7071067811865476, complex9.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex4.subtract(complex3);
      Complex complex11 = complex4.tanh();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.7615941559557649, complex11.getReal(), 0.01);
      
      Complex complex12 = complex3.tan();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex12.getReal(), 0.01);
      
      Complex complex13 = complex1.multiply(2391.071239924);
      Complex complex14 = complex13.NaN.tanh();
      Complex complex15 = complex0.sqrt();
      complex4.sin();
      Complex complex16 = Complex.valueOf(0.0);
      complex16.ONE.log();
      Complex complex17 = complex5.conjugate();
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      
      complex7.abs();
      assertTrue(complex5.equals((Object)complex10));
      
      complex4.pow(complex15);
      assertEquals(31.03342875030086, complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      
      double double0 = complex1.abs();
      assertTrue(complex1.equals((Object)complex13));
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex1.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = new Complex(568.86886);
      Complex complex3 = Complex.valueOf(1.6985075903314236E-173);
      assertEquals(1.6985075903314236E-173, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.ONE.multiply(complex2);
      String string0 = complex4.toString();
      assertFalse(complex4.isInfinite());
      assertEquals("(568.86886, 0.0)", string0);
      
      complex0.getImaginary();
      complex0.getReal();
      complex0.asin();
      Complex complex5 = complex0.asin();
      assertSame(complex5, complex1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(749.231070653);
      complex0.INF.atan();
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.NaN.cosh();
      assertEquals(6.619047441483895, complex4.getReal(), 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(749.231070653, 0.0)", string0);
      
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.NaN.negate();
      complex3.ONE.getArgument();
      Complex complex8 = complex6.multiply((-177));
      Complex complex9 = complex0.pow(749.231070653);
      Complex complex10 = complex9.ONE.multiply(complex1);
      assertSame(complex1, complex5);
      assertSame(complex10, complex1);
      
      Complex complex11 = complex9.multiply(37);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      Complex complex12 = complex8.sqrt1z();
      assertSame(complex12, complex11);
      
      complex7.getField();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex9));
  }
}
