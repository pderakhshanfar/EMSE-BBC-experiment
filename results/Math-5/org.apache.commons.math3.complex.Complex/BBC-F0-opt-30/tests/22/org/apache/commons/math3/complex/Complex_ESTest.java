/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:54:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-578.8755604972), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(805.03, (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(936.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      complex1.getField();
      Complex complex2 = complex1.tan();
      complex2.ONE.pow(complex0);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex1.exp();
      Complex.valueOf(7.739252980388984E-8);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-19.768158882812756), (-19.768158882812756));
      Complex complex1 = complex0.reciprocal();
      complex0.conjugate();
      Complex complex2 = Complex.valueOf((-19.768158882812756));
      Complex complex3 = complex0.multiply(complex1);
      complex2.multiply((-19.768158882812756));
      complex2.abs();
      Complex complex4 = new Complex(2199.998290345247, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.sin();
      complex1.abs();
      Complex complex6 = new Complex(1091.3947211);
      complex6.log();
      complex5.multiply(complex3);
      complex4.multiply(0);
      complex2.subtract(complex4);
      Complex.valueOf(3379.401238, 9.873053503674767E8);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 946, 20.0);
      complex0.acos();
      Complex complex1 = new Complex((-20.0), 20.0);
      complex1.tan();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(1.6544084224626834E220);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3003.8120506103), (-3003.8120506103));
      complex0.I.asin();
      Complex complex1 = complex0.acos();
      Complex.valueOf((-3003.8120506103));
      Complex complex2 = complex1.tan();
      complex2.ONE.getArgument();
      Complex complex3 = Complex.valueOf((-3003.8120506103), (-3003.8120506103));
      complex3.INF.abs();
      Complex complex4 = Complex.valueOf((-3003.8120506103), Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(0.0, (-3003.8120506103));
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      Complex complex1 = Complex.valueOf((-20.0));
      Complex.valueOf((-2.5302568593772956));
      Complex complex2 = complex1.tanh();
      complex2.tan();
      Complex.valueOf((-20.0), 4.038445347305242E-4);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2150.826979632629, (-7.897146442236022E215));
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf((-7.897146442236022E215));
      complex2.tan();
      complex3.tan();
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(920);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.conjugate();
      complex1.multiply(complex2);
      complex2.subtract(Double.NaN);
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-1.0));
      complex0.getField();
      complex0.getArgument();
      Complex complex1 = complex0.add((-1.0));
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.valueOf(20.0, 20.0);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.getField();
      complex4.pow(complex0);
      complex2.pow(complex0);
      complex5.subtract(complex1);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(979);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
      Complex complex2 = complex0.reciprocal();
      complex2.INF.createComplex((-579.65060827991), 1.1453864574432373);
      Complex complex3 = complex2.sqrt();
      complex3.I.subtract((-579.65060827991));
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(936.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      complex1.getField();
      complex1.tan();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex1.exp();
      Complex.valueOf(7.739252980388984E-8);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-2037.4934));
      Complex complex1 = complex0.createComplex((-2037.4934), (-2032.481853958794));
      complex1.abs();
      Complex complex2 = complex0.multiply(692.2938);
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.asin();
      complex1.sin();
      complex1.sin();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.createComplex(541.33, (-1263.7));
      complex2.abs();
      Complex complex6 = Complex.valueOf(1.9765420370276843E-4, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.multiply(1.4635417461395264);
      Complex complex8 = complex4.pow(complex5);
      complex5.getArgument();
      complex4.negate();
      complex8.pow(0.0);
      Complex complex9 = complex6.exp();
      complex9.ZERO.getField();
      complex7.subtract(complex9);
      complex2.hashCode();
      complex4.multiply((-1389));
      complex3.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.INF;
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.NaN;
      complex5.asin();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1318.4141069318));
      Complex complex2 = complex0.tanh();
      complex2.cos();
      Complex complex3 = new Complex(Double.NaN);
      Complex complex4 = Complex.INF;
      Complex.valueOf(1336.0, Double.NaN);
      Complex complex5 = Complex.ONE;
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      Complex complex1 = new Complex((-1263.7));
      complex0.divide(complex1);
      complex0.createComplex(3529.12529847103, 3529.12529847103);
      complex0.abs();
      Complex complex2 = Complex.valueOf(3529.12529847103);
      Complex complex3 = Complex.ZERO;
      complex3.getArgument();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.INF;
      complex5.divide(Double.NaN);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      Complex complex1 = complex0.divide((-1263.7));
      complex1.INF.toString();
      complex0.INF.hashCode();
      complex0.ONE.tan();
      Complex complex2 = complex0.subtract(complex1);
      complex1.hashCode();
      Complex.valueOf((-1263.7), (-1263.7));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex3.divide((-1263.7));
      Complex complex5 = new Complex((-1263.7), 589.74);
      Complex complex6 = complex4.sqrt1z();
      complex6.cos();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.INF;
      complex7.negate();
      complex7.INF.multiply(589.74);
      Complex.valueOf((-1263.7), (-1263.7));
      Complex complex9 = Complex.INF;
      complex9.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      complex0.INF.toString();
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf((-1263.7));
      Complex complex2 = complex1.subtract(complex0);
      complex0.hashCode();
      Complex complex3 = Complex.valueOf((-1263.7), (-1318.4141069318));
      Complex complex4 = complex3.acos();
      complex2.divide(0.9992086731920959);
      Complex complex5 = new Complex((-3198932.18), 1494.16944);
      complex4.tan();
      Complex complex6 = Complex.valueOf(0.9992086731920959, (-20.0));
      complex1.isNaN();
      complex6.conjugate();
      complex4.multiply((-1325));
      try { 
        complex5.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.toString();
      complex1.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.ZERO;
      complex4.tan();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.sqrt1z();
      complex2.cos();
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex9 = new Complex((-1584.1652865148762), Double.POSITIVE_INFINITY);
      complex2.tan();
      complex4.isNaN();
      complex7.tanh();
      complex5.ONE.multiply(complex8);
      complex8.conjugate();
      Complex complex10 = complex6.multiply(1368);
      complex10.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      Complex complex1 = new Complex(Double.NaN);
      complex0.atan();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.INF.toString();
      complex0.INF.hashCode();
      complex0.ONE.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.I;
      complex2.tanh();
      Complex complex4 = complex3.sqrt1z();
      complex4.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.I;
      complex6.negate();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.createComplex(0.0, 1021.21);
      complex1.abs();
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.pow(complex1);
      complex4.getArgument();
      Complex complex5 = Complex.I;
      complex5.atan();
      Complex.valueOf(2.023929422267303E-118);
      Complex complex6 = Complex.valueOf(0.0, (double) (-2145758345));
      try { 
        complex6.nthRoot((-2145758345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,145,758,345
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.valueOf(2.023929422267303E-118);
      Complex complex3 = complex0.createComplex((-2032.481853958794), 133.754881);
      complex3.abs();
      Complex complex4 = complex1.multiply(2036.8782130660393);
      Complex complex5 = complex2.pow(complex4);
      complex5.getArgument();
      Complex complex6 = Complex.I;
      complex4.atan();
      Complex.valueOf(Double.NaN);
      try { 
        complex3.nthRoot((-2145758345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,145,758,345
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      complex0.toString();
      complex0.hashCode();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.subtract(complex2);
      complex4.hashCode();
      Complex.valueOf((-1263.7), (-1263.7));
      complex2.acos();
      complex0.divide((-2532.657040049284));
      Complex complex5 = new Complex((-109.037366005637), Double.NaN);
      complex4.tan();
      complex2.isNaN();
      complex0.tanh();
      complex5.conjugate();
      complex0.multiply(2038);
      complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-758.5888193166), 2.023929422267303E-118);
      Complex complex2 = complex0.add(0.6654226779937744);
      complex2.toString();
      complex1.getField();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.valueOf((-758.5888193166));
      complex4.log();
      Complex complex5 = complex0.multiply(1.6730501651763916);
      Complex complex6 = complex5.asin();
      Complex complex7 = complex5.sin();
      complex0.sin();
      complex5.divide(complex6);
      complex3.createComplex(0.6654226779937744, 3731.684);
      complex7.abs();
      complex4.multiply(2.023929422267303E-118);
      Complex complex8 = Complex.ONE;
      complex8.pow(complex2);
      complex0.getArgument();
      Complex complex9 = Complex.I;
      Complex complex10 = Complex.I;
      complex10.atan();
      Complex.valueOf(3731.684);
      Complex complex11 = Complex.valueOf((double) (-2145758345), 1943.76405330828);
      // Undeclared exception!
      complex11.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.INF.subtract(0.08319892360130728);
      complex0.INF.pow(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex2.tan();
      complex5.add(0.08319892360130728);
      complex4.I.multiply(37);
      Complex.valueOf((double) 37);
      Complex complex6 = complex3.NaN.cos();
      complex4.divide(complex3);
      complex5.I.asin();
      complex0.pow(complex4);
      complex5.getField();
      complex1.getField();
      complex1.getField();
      complex6.cosh();
      complex6.add((-1138.7542747508));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = Complex.valueOf((-2809.74214923));
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf(1862.34297062);
      complex4.getArgument();
      Complex complex5 = complex4.subtract(complex0);
      complex5.hashCode();
      Complex complex6 = Complex.valueOf(0.0, 1862.34297062);
      Complex complex7 = complex6.acos();
      complex1.divide(3389.956425);
      Complex complex8 = new Complex(0.0, 589.74);
      Complex complex9 = complex8.tan();
      complex9.isNaN();
      Complex complex10 = complex3.tanh();
      Complex complex11 = complex6.conjugate();
      complex9.multiply(1389);
      complex10.divide(1862.34297062);
      complex11.reciprocal();
      complex6.nthRoot(1323);
      complex7.readResolve();
      complex11.pow(2763.20102506);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-156.0325791644752), (-1862.34297062));
      complex0.atan();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.toString();
      complex1.hashCode();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.ZERO;
      complex4.tan();
      Complex complex5 = complex3.tanh();
      complex5.sqrt1z();
      complex2.cos();
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.negate();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.NaN;
      complex9.sqrt();
      complex2.isInfinite();
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(0.0);
      Complex complex1 = Complex.valueOf((-2809.74214923));
      complex1.tanh();
      Complex complex2 = Complex.valueOf(1862.34297062);
      complex2.getArgument();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.multiply(3630.653591);
      complex4.I.tanh();
      complex1.readResolve();
      complex5.equals(complex3);
      Complex complex7 = complex4.divide(108521.32178843721);
      complex6.sqrt1z();
      Complex.valueOf(1338.78, 3.1814366);
      Complex complex8 = Complex.INF;
      complex8.sin();
      complex7.pow(complex5);
      Complex.valueOf(0.8414709848078965, (-206.362068969179));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2032.481853958794));
      Complex complex1 = complex0.reciprocal();
      complex1.createComplex(1702.83, 17);
      complex0.pow(1702.83);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.divide(complex0);
      complex0.cos();
      complex1.sqrt1z();
      Complex complex2 = Complex.ZERO;
      complex2.getReal();
      complex1.tan();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1067.1743014806227));
      Complex complex2 = Complex.valueOf((-4142.16), (-4142.16));
      complex2.divide(2037.4933711);
      complex0.toString();
      complex2.hashCode();
      Complex complex3 = complex0.tan();
      complex1.sqrt();
      Complex complex4 = complex1.tan();
      complex4.tanh();
      Complex complex5 = complex4.sqrt1z();
      complex4.cos();
      Complex complex6 = complex5.createComplex((-1316.84), (-2138.701535));
      Complex complex7 = Complex.I;
      complex3.negate();
      complex4.sqrt();
      complex6.isNaN();
      Complex complex8 = new Complex((-1111.536), (-1269.7691512));
      complex8.add(979.9473);
      complex3.cos();
      Complex.valueOf((-1269.7691512), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-156.0325791644752));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.createComplex(0.0, 1.1621966417487748);
      complex0.abs();
      Complex complex3 = complex0.multiply(6.283185307179586);
      Complex complex4 = complex0.pow(complex0);
      complex2.getArgument();
      complex4.negate();
      Complex complex5 = complex3.pow((-1452.314));
      complex2.cosh();
      Complex complex6 = complex0.divide(385.048021269);
      complex6.I.tan();
      complex4.subtract(complex5);
      complex1.hashCode();
      complex3.multiply(1415);
      complex0.divide((-1509.2212208792));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ZERO.sqrt1z();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.negate();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.I.add(Double.POSITIVE_INFINITY);
      complex3.INF.sqrt1z();
      complex0.equals(complex1);
      Complex complex4 = complex2.atan();
      complex1.toString();
      complex2.sqrt();
      Complex complex5 = complex1.sinh();
      complex4.NaN.nthRoot(1);
      Complex complex6 = complex4.divide(complex2);
      Complex complex7 = complex5.negate();
      Complex complex8 = complex7.sinh();
      complex1.ZERO.sin();
      Complex complex9 = new Complex((-1580.66359503018), (-894.7207497));
      complex4.equals(complex9);
      complex4.ONE.add(0.0);
      complex4.sin();
      Complex complex10 = complex6.multiply(2093.1000176);
      complex10.ONE.acos();
      complex10.toString();
      Complex complex11 = complex2.atan();
      Complex complex12 = complex11.ZERO.add(0.0);
      complex7.abs();
      Complex complex13 = complex8.sqrt1z();
      complex13.NaN.nthRoot(1073741824);
      Complex.valueOf(5095.0, (-894.7207497));
      complex8.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      complex1.ONE.toString();
      Complex complex2 = complex0.sinh();
      complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      complex3.INF.atan();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex2.acos();
      Complex complex6 = new Complex((-831.567282));
      complex6.multiply((-831.567282));
      complex1.pow(complex6);
      complex5.getArgument();
      Complex complex7 = Complex.valueOf(Double.NaN, (-37.58043873240253));
      complex7.negate();
      Complex complex8 = complex2.pow((-37.58043873240253));
      Complex complex9 = Complex.ZERO;
      complex8.divide(2186.109246109);
      Complex complex10 = Complex.valueOf(2186.109246109);
      Complex complex11 = Complex.ZERO;
      complex10.subtract(complex11);
      complex0.hashCode();
      complex5.multiply((-1073741824));
      complex4.divide(2186.109246109);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.4228706309734985E-8, 329.4272632743641);
      Complex complex2 = complex1.I.createComplex(329.4272632743641, 4.4228706309734985E-8);
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex3.subtract(complex2);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex3.cosh();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex8.tanh();
      complex5.createComplex(329.4272632743641, 6.283185307179586);
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex6.multiply(complex2);
      complex5.hashCode();
      complex0.pow(complex11);
      complex7.toString();
      Complex complex12 = complex3.subtract(complex6);
      Complex complex13 = Complex.NaN;
      complex0.subtract(complex13);
      complex10.equals("(1.0, -0.0)");
      Complex complex14 = complex1.log();
      Complex complex15 = complex13.sin();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex12.subtract(0.0);
      complex15.multiply(complex9);
      complex13.asin();
      complex14.conjugate();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      Complex complex1 = complex0.divide((-1263.7));
      complex1.INF.toString();
      complex0.INF.hashCode();
      complex0.ONE.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ZERO.tan();
      complex2.tanh();
      Complex complex4 = complex3.sqrt1z();
      complex4.cos();
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.I;
      complex6.negate();
      Complex complex7 = complex3.sqrt();
      complex2.isNaN();
      complex7.multiply(1);
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 4299.217);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex6.ONE.pow(complex1);
      complex0.NaN.log();
      Complex complex9 = complex4.add(6.283185307179586);
      complex3.ZERO.cosh();
      Complex complex10 = complex9.ZERO.tanh();
      complex5.tanh();
      complex1.createComplex(2.0, 4299.217);
      Complex complex11 = complex4.tanh();
      Complex complex12 = complex3.multiply(complex6);
      complex12.ZERO.hashCode();
      complex12.INF.pow(complex7);
      complex12.I.toString();
      Complex complex13 = complex1.subtract(complex12);
      complex13.INF.subtract(complex9);
      complex2.equals(complex7);
      complex11.log();
      complex4.INF.sin();
      Complex complex14 = Complex.valueOf((-234.15444508296468), 6.943684261645378E-10);
      complex14.subtract(2.0);
      complex7.multiply(complex4);
      complex14.asin();
      complex10.conjugate();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.I.pow(0.9999999999999998);
      Complex complex2 = complex0.add(Double.NaN);
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex3.ONE.add(Double.NaN);
      complex5.INF.toString();
      complex4.INF.divide(complex2);
      complex2.getField();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex0.add(6.283185307179586);
      complex0.getField();
      Complex complex8 = complex0.subtract(complex3);
      Complex complex9 = complex6.sin();
      complex9.INF.cosh();
      complex9.NaN.subtract(0.9999999999999998);
      Complex complex10 = complex2.reciprocal();
      complex10.toString();
      complex0.reciprocal();
      Complex complex11 = complex6.conjugate();
      complex10.NaN.subtract(complex8);
      Complex complex12 = complex11.ONE.divide(6.283185307179586);
      complex12.ZERO.readResolve();
      complex10.cosh();
      complex7.sinh();
      complex10.add(complex8);
      Complex.valueOf(0.9999999999999998, 6.283185307179586);
      Complex.valueOf((-3439.6836), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      Complex complex1 = complex0.divide((-1263.7));
      complex1.INF.toString();
      complex0.INF.hashCode();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ZERO.tan();
      complex3.tanh();
      Complex complex5 = complex4.sqrt1z();
      complex5.cos();
      complex2.createComplex((-1263.7), (-1316.84));
      Complex complex6 = Complex.I;
      complex6.negate();
      complex4.sqrt();
      complex3.isNaN();
      Complex complex7 = complex0.add((-1.0));
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2358.006924), (-2358.006924));
      Complex complex1 = Complex.valueOf(1640.17831);
      complex0.toString();
      complex0.sinh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.atan();
      complex0.add(complex4);
      complex3.acos();
      Complex complex5 = complex2.log();
      complex5.conjugate();
      Complex complex6 = complex1.I.sin();
      complex6.acos();
      complex3.hashCode();
      complex5.sqrt1z();
      complex4.multiply(3047);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.244414150254963E-158);
      Complex complex1 = complex0.I.pow((-798.9912611298));
      Complex complex2 = Complex.valueOf(1.1702606678009033, (-1074.38083122));
      Complex complex3 = complex1.pow(complex2);
      complex3.abs();
      Complex complex4 = complex1.subtract(6.943684261645378E-10);
      Complex complex5 = complex1.cosh();
      Complex complex6 = Complex.ZERO;
      complex6.readResolve();
      complex0.INF.cos();
      complex5.getImaginary();
      complex4.tan();
      complex1.sqrt1z();
      Complex complex7 = complex6.asin();
      complex7.NaN.cos();
      complex6.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      Complex complex1 = complex0.divide((-1263.7));
      complex1.INF.toString();
      complex0.INF.hashCode();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex3.NaN.sqrt1z();
      complex7.INF.abs();
      complex5.INF.multiply(complex3);
      complex4.nthRoot(1995);
      complex5.hashCode();
      Complex complex9 = complex3.createComplex(599.83359589, 599.83359589);
      complex9.pow(complex8);
      Complex complex10 = complex6.sqrt();
      Complex complex11 = Complex.valueOf(944.1793, 944.1793);
      complex11.cos();
      Complex complex12 = complex10.I.createComplex(Double.POSITIVE_INFINITY, (-506.7035006484844));
      complex12.I.reciprocal();
      complex2.toString();
      Complex complex13 = complex1.conjugate();
      Complex.valueOf(3.141592653589793, 3.141592653589793);
      complex13.nthRoot(790);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2358.006924), (-2358.006924));
      Complex complex1 = Complex.valueOf(1640.17831);
      Complex complex2 = complex0.subtract(complex1);
      complex2.getArgument();
      complex2.I.hashCode();
      Complex complex3 = new Complex(1640.17831, (-159.042));
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex2.divide(0.0);
      Complex complex6 = complex5.sin();
      complex1.add(complex4);
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex1.divide((-2221.481327841286));
      complex8.toString();
      Complex complex9 = Complex.INF;
      complex9.asin();
      complex1.add(0.0);
      complex0.getField();
      complex9.isInfinite();
      complex0.pow(complex7);
      complex9.abs();
      complex6.subtract(6.943684261645378E-10);
      Complex complex10 = complex2.cosh();
      complex5.readResolve();
      complex5.getImaginary();
      complex8.tan();
      complex3.sqrt1z();
      complex5.asin();
      complex10.pow((-3133.0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.multiply(537.38276781571);
      complex3.readResolve();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = Complex.ZERO;
      complex4.add(complex5);
      complex3.reciprocal();
      complex1.tan();
      Complex complex6 = new Complex(906.891, (-1.4658556496279762));
      complex6.NaN.tan();
      complex2.NaN.multiply(906.891);
      complex6.createComplex((-2.7237099632871992E-8), (-1.4658556496279762));
      complex4.nthRoot(1471);
      Complex complex7 = complex1.subtract(2761.73202674902);
      Complex complex8 = complex2.add(complex7);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1067.1743014806227));
      Complex complex2 = complex1.I.createComplex(2.023929422267303E-118, (-758.5888193166));
      Complex complex3 = complex1.add(2.023929422267303E-118);
      complex3.toString();
      complex0.getField();
      complex0.conjugate();
      Complex complex4 = Complex.valueOf((-2032.481853958794));
      complex1.NaN.log();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex4.atan();
      complex2.add(complex0);
      complex4.acos();
      complex5.log();
      complex5.conjugate();
      complex2.hashCode();
      Complex complex7 = complex6.sqrt1z();
      complex7.multiply(200);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      complex1.ONE.toString();
      Complex complex2 = complex0.sinh();
      complex0.NaN.multiply(complex1);
      Complex complex3 = new Complex(2.0);
      complex3.multiply(2.0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex6.createComplex(1696.68, 547.6480863);
      complex3.abs();
      Complex complex9 = complex1.multiply((-1.0));
      complex1.pow(complex8);
      complex5.getArgument();
      complex3.negate();
      complex2.pow(-0.0);
      Complex complex10 = new Complex((-1.0), 547.6480863);
      Complex complex11 = complex10.cosh();
      complex1.exp();
      complex6.divide(2911.4347461686);
      complex9.subtract(complex2);
      complex11.hashCode();
      complex11.multiply(37);
      complex3.divide(1.0);
      complex7.reciprocal();
      complex9.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-156.0325791644752));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.createComplex(0.0, 1.1621966417487748);
      complex0.abs();
      Complex complex4 = complex2.multiply(6.283185307179586);
      Complex complex5 = complex0.pow(complex2);
      complex3.getArgument();
      complex5.negate();
      Complex complex6 = complex4.pow((-1452.314));
      complex3.cosh();
      complex2.exp();
      Complex complex7 = complex0.divide(385.048021269);
      complex7.I.tan();
      complex5.subtract(complex6);
      complex2.hashCode();
      complex4.multiply(1415);
      complex0.divide((-1509.2212208792));
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      complex0.I.tanh();
      Complex complex3 = Complex.valueOf(3.1367659571899855E-9);
      complex3.INF.sinh();
      complex3.ONE.getField();
      complex2.hashCode();
      Complex complex4 = Complex.valueOf(3.1367659571899855E-9);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.ZERO.atan();
      Complex complex7 = complex5.NaN.divide(0.0);
      Complex complex8 = complex7.ONE.sin();
      complex1.ZERO.multiply((-1625));
      Complex complex9 = complex4.ZERO.add(complex1);
      complex9.I.cosh();
      Complex complex10 = complex4.divide(6.943684261645378E-10);
      complex10.ZERO.toString();
      complex10.INF.asin();
      Complex complex11 = complex0.ONE.add(0.0);
      complex11.getField();
      complex0.isInfinite();
      complex6.ZERO.pow(complex2);
      complex0.abs();
      complex11.divide((-2.1414301981236817E-8));
      complex6.subtract(complex0);
      complex8.hashCode();
      complex9.multiply(17);
      complex8.divide(0.0);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.INF.cos();
      Complex complex1 = complex0.createComplex(1.8652499723625443E107, (-537.38276781571));
      Complex complex2 = Complex.valueOf((-537.38276781571));
      complex2.I.cos();
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(1.8652499723625443E107);
      complex3.INF.nthRoot(172);
      complex1.sqrt();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(1084.128005, 4248.7);
      complex0.I.abs();
      Complex complex1 = complex0.I.log();
      complex1.ZERO.negate();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.ONE.multiply(1084.128005);
      complex3.INF.abs();
      complex2.hashCode();
      Complex complex4 = Complex.valueOf(1.0);
      Complex.valueOf((double) 0);
      Complex complex5 = complex3.multiply(0);
      complex5.multiply(complex4);
      complex3.cos();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.I.add(1126.24945078);
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex6.log();
      Complex complex8 = complex1.divide(695.1);
      complex0.ZERO.sqrt1z();
      Complex complex9 = Complex.valueOf((-835.8946646508));
      Complex complex10 = Complex.valueOf((-835.8946646508), 695.1);
      complex8.ZERO.cosh();
      complex10.I.conjugate();
      complex10.INF.getArgument();
      Complex complex11 = complex3.sqrt1z();
      complex11.I.readResolve();
      Complex complex12 = complex9.divide(complex3);
      Complex complex13 = Complex.valueOf(0.0, (-835.8946646508));
      Complex complex14 = complex13.exp();
      Complex complex15 = complex12.sqrt();
      complex4.getReal();
      complex5.sinh();
      Complex complex16 = complex15.multiply(complex11);
      complex1.subtract(1126.24945078);
      complex8.readResolve();
      complex11.I.conjugate();
      Complex complex17 = complex6.pow(complex16);
      complex14.isInfinite();
      complex0.divide(complex17);
      complex7.subtract(complex14);
      Complex complex18 = complex2.asin();
      complex18.exp();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
      complex0.toString();
      Complex complex1 = Complex.valueOf(0.0, 765.36311969427);
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = complex2.ONE.sqrt1z();
      complex3.I.divide(complex1);
      complex3.toString();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.ZERO.reciprocal();
      complex6.ZERO.sqrt1z();
      complex1.I.add(5247.33);
      Complex complex7 = complex4.add(complex1);
      complex7.ONE.getArgument();
      Complex complex8 = complex7.ONE.subtract(765.36311969427);
      complex8.abs();
      complex7.INF.asin();
      Complex complex9 = complex7.ZERO.add(complex0);
      complex9.tanh();
      complex7.I.multiply(1);
      complex1.nthRoot(1);
      complex7.tanh();
      Complex complex10 = complex4.sqrt1z();
      complex10.asin();
      complex8.isInfinite();
      complex1.reciprocal();
      Complex.valueOf((double) 1);
      complex4.hashCode();
      Complex complex11 = complex1.sin();
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-2886.505852116), (-2886.505852116));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.I.multiply(3773);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.ONE.conjugate();
      Complex.valueOf((-2886.505852116));
      Complex complex5 = Complex.valueOf(25.3);
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex4.ZERO.exp();
      complex7.ZERO.cos();
      Complex.valueOf((-2886.505852116), (-1195.1488));
      complex0.abs();
      Complex complex8 = complex4.tanh();
      complex8.INF.cosh();
      complex5.pow(25.3);
      complex5.tanh();
      complex6.acos();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.multiply(3231);
      Complex complex1 = complex0.INF.reciprocal();
      complex0.ONE.multiply(516.6429014);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.acos();
      complex1.ZERO.multiply(2983);
      Complex complex4 = complex3.I.pow(complex0);
      complex4.ONE.hashCode();
      Complex complex5 = complex3.INF.divide((-2308.75250422674));
      complex0.abs();
      Complex complex6 = complex5.NaN.exp();
      complex6.INF.abs();
      Complex complex7 = complex0.sqrt();
      complex7.getField();
      complex3.I.sinh();
      complex7.divide(complex2);
      Complex complex8 = Complex.valueOf((-357.071359525));
      Complex complex9 = complex8.INF.negate();
      complex9.NaN.add(complex1);
      complex0.INF.getArgument();
      complex7.INF.atan();
      complex5.I.readResolve();
      complex2.readResolve();
      Complex complex10 = complex0.multiply(complex5);
      complex7.readResolve();
      complex10.asin();
      complex3.sqrt1z();
      Complex complex11 = complex2.acos();
      Complex complex12 = complex11.tan();
      complex7.acos();
      complex12.readResolve();
      complex8.sqrt();
      complex8.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2358.006924), (-2358.006924));
      Complex complex1 = Complex.valueOf(1640.17831);
      Complex complex2 = complex0.subtract(complex1);
      complex2.getArgument();
      complex2.I.hashCode();
      Complex complex3 = new Complex(1640.17831, (-159.042));
      Complex complex4 = complex3.INF.log();
      complex1.ONE.createComplex(2434.835894556017, 0.0);
      Complex complex5 = complex3.I.cos();
      complex3.ZERO.add(complex2);
      complex5.add(complex1);
      complex1.equals(complex3);
      complex0.divide((-2358.006924));
      complex4.I.pow((-2446.68));
      Complex.valueOf(8.537829238438662E-288, 8.537829238438662E-288);
      Complex complex6 = Complex.valueOf(1640.17831);
      Complex complex7 = complex6.subtract(complex2);
      complex0.getReal();
      complex0.asin();
      Complex complex8 = Complex.valueOf((-2358.006924), (-4.1022790876160215E-9));
      complex8.ZERO.tanh();
      Complex complex9 = complex3.add((-4.1022790876160215E-9));
      complex9.INF.multiply((-159.042));
      complex9.hashCode();
      complex7.getField();
      complex4.isNaN();
      Complex.valueOf((-2358.006924), 0.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      complex0.I.tanh();
      Complex complex3 = Complex.valueOf(3.1367659571899855E-9);
      complex3.INF.sinh();
      complex3.ONE.getField();
      complex2.hashCode();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex4.ZERO.atan();
      Complex complex7 = complex5.NaN.divide(0.0);
      Complex complex8 = complex7.ONE.sin();
      Complex complex9 = complex4.ZERO.add(complex1);
      complex9.I.cosh();
      Complex complex10 = complex4.divide(6.943684261645378E-10);
      complex10.ZERO.toString();
      complex10.INF.asin();
      Complex complex11 = complex0.ONE.add(0.0);
      complex11.getField();
      complex0.isInfinite();
      complex6.ZERO.pow(complex2);
      complex0.abs();
      Complex complex12 = complex6.subtract((-2.1414301981236817E-8));
      Complex complex13 = complex1.cosh();
      complex13.ONE.readResolve();
      complex12.getImaginary();
      complex8.tan();
      Complex complex14 = complex1.sqrt1z();
      complex12.asin();
      complex14.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-1.0));
      complex0.getField();
      complex0.getArgument();
      Complex complex1 = complex0.add((-1.0));
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.log();
      Complex complex5 = Complex.valueOf(20.0, 20.0);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.getField();
      complex5.pow(complex0);
      complex2.pow(complex0);
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.readResolve();
      int int0 = (-96);
      Complex complex1 = complex0.INF.multiply((-96));
      Complex complex2 = complex1.ZERO.sinh();
      complex2.ONE.subtract(complex1);
      Complex complex3 = complex1.NaN.sqrt();
      complex3.INF.divide(complex0);
      complex0.ONE.readResolve();
      Complex complex4 = complex0.ZERO.atan();
      Complex complex5 = Complex.valueOf(0.0);
      complex4.add(complex1);
      complex0.I.hashCode();
      Complex complex6 = complex0.ZERO.subtract(complex5);
      try { 
        complex6.NaN.nthRoot((-96));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -96
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.4228706309734985E-8, 329.4272632743641);
      Complex complex2 = complex1.I.createComplex(329.4272632743641, 4.4228706309734985E-8);
      Complex complex3 = complex1.ONE.acos();
      complex3.subtract(complex2);
      complex3.ZERO.hashCode();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.sin();
      complex4.NaN.multiply(0.0);
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
      Complex complex6 = complex5.divide((-20.0));
      complex6.sqrt1z();
      Complex complex7 = Complex.valueOf(329.4272632743641, (-4167.06));
      complex7.ONE.sin();
      complex1.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex1.I.multiply(906.891);
      complex0.readResolve();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = Complex.ZERO;
      complex4.INF.add(complex5);
      complex4.I.reciprocal();
      complex0.tan();
      Complex complex6 = complex2.createComplex((-1839.124), 0.0);
      complex6.nthRoot(1471);
      complex6.subtract(0.0);
      complex1.add(complex6);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
      Complex complex1 = complex0.ZERO.divide((-5.7694907599522404E-9));
      complex1.ZERO.sqrt();
      complex1.NaN.pow(complex0);
      Complex complex2 = complex0.INF.sqrt1z();
      complex2.I.subtract(complex0);
      complex0.I.hashCode();
      complex0.multiply(0.0);
      Complex complex3 = complex0.tanh();
      complex3.abs();
      Complex complex4 = complex3.ONE.atan();
      complex4.INF.toString();
      complex4.I.getField();
      Complex complex5 = complex4.ZERO.pow(complex0);
      complex5.INF.divide(complex4);
      complex0.ZERO.cos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex3.subtract(complex6);
      complex2.getReal();
      complex2.abs();
      complex0.readResolve();
      complex3.divide(complex7);
      complex1.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 2.337279322276433E-135);
      Complex complex2 = complex0.divide((-111.6320736693032));
      Complex complex3 = Complex.valueOf((-111.6320736693032));
      Complex complex4 = complex3.INF.tanh();
      complex4.INF.getArgument();
      Complex complex5 = complex0.subtract(complex2);
      complex5.NaN.hashCode();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.divide((-623.0));
      complex7.ONE.tan();
      complex1.isNaN();
      complex3.tanh();
      complex2.conjugate();
      complex1.multiply(1389);
      complex5.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1449.642139364), 22.4);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex0.exp();
      complex3.I.pow(complex1);
      complex1.ONE.abs();
      complex3.getImaginary();
      complex0.getArgument();
      complex3.equals(complex1);
      complex1.nthRoot(1);
      complex2.nthRoot(1);
      Complex complex4 = complex1.divide(3.1261417937858162);
      complex4.readResolve();
      complex2.pow(3.1367659571899855E-9);
      Complex complex5 = complex0.cosh();
      complex5.I.add(3.794385569450774E-9);
      complex5.ZERO.sinh();
      complex1.getField();
      complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1067.1743014806227));
      Complex complex2 = complex1.I.createComplex(2.023929422267303E-118, (-758.5888193166));
      Complex complex3 = complex1.add(2.023929422267303E-118);
      complex3.toString();
      complex0.getField();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.valueOf((-2032.481853958794));
      Complex complex6 = complex1.NaN.log();
      complex6.multiply(2.023929422267303E-118);
      complex3.I.asin();
      Complex complex7 = complex1.sin();
      complex3.sin();
      complex0.divide(complex1);
      Complex complex8 = complex0.createComplex(0.0, 2.023929422267303E-118);
      complex0.ZERO.abs();
      Complex complex9 = complex8.multiply((-831.567282));
      Complex complex10 = complex9.pow(complex4);
      complex9.getArgument();
      Complex complex11 = complex9.negate();
      complex11.ONE.pow(2.023929422267303E-118);
      complex3.cosh();
      complex2.exp();
      complex2.divide((-1442.0));
      complex7.subtract(complex5);
      complex0.hashCode();
      complex10.multiply(17);
      complex4.divide((-1509.2212208792));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-156.0325791644752));
      Complex complex1 = complex0.INF.reciprocal();
      complex1.ZERO.sinh();
      Complex complex2 = complex0.ONE.multiply(1298.8588302186115);
      complex2.ZERO.sqrt1z();
      complex0.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.244414150254963E-158);
      Complex complex1 = complex0.I.pow((-798.9912611298));
      Complex complex2 = Complex.valueOf(1.1702606678009033, (-1074.38083122));
      complex0.multiply(complex2);
      complex0.isInfinite();
      complex1.toString();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.acos();
      complex0.isInfinite();
      Complex complex2 = Complex.ZERO;
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.sqrt();
      complex3.ONE.nthRoot(1);
      complex2.add(1068.636137);
      Complex.valueOf(3974.9514264064, 2.4129724502563477);
      complex0.divide(complex2);
      Complex complex4 = complex0.INF.multiply(17);
      complex4.ONE.negate();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex5.NaN.multiply((double) 17);
      Complex complex7 = complex5.INF.cosh();
      complex7.ZERO.sqrt();
      complex1.atan();
      complex2.conjugate();
      complex6.getImaginary();
      Complex.valueOf((-1.0571553019207106E-8));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-2080.60276));
      Complex complex2 = complex0.I.negate();
      complex0.ONE.tanh();
      complex1.NaN.conjugate();
      complex2.ONE.acos();
      complex1.createComplex((-2080.60276), (-2080.60276));
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex4.NaN.conjugate();
      complex1.ONE.atan();
      complex0.getImaginary();
      complex5.NaN.sqrt();
      complex1.getField();
      Complex complex6 = complex1.cos();
      complex6.INF.hashCode();
      complex5.readResolve();
      complex4.toString();
      complex4.exp();
      complex1.asin();
      complex5.nthRoot(3819);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2808.782694204165);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.NaN.createComplex(1.2297456769063303E-80, 0.0);
      complex2.ONE.nthRoot(661);
      complex2.add(complex1);
      Complex complex3 = complex1.ZERO.negate();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.cosh();
      complex1.getField();
      complex6.pow(1.2297456769063303E-80);
      Complex complex8 = complex6.createComplex(0.0, 1570.76867);
      Complex complex9 = complex8.add(complex7);
      Complex complex10 = complex9.ZERO.multiply(0);
      complex4.log();
      complex3.pow(0.0);
      Complex complex11 = complex5.multiply((-3066));
      complex11.ONE.divide(complex6);
      complex10.createComplex(3318.250283642725, (-3066));
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.INF.sqrt1z();
      complex4.I.sinh();
      complex3.readResolve();
      Complex complex5 = complex0.ONE.sin();
      complex5.ONE.tanh();
      complex5.sqrt();
      complex2.multiply(complex1);
      double double0 = 2.318267822265625;
      Complex complex6 = complex2.createComplex(2.318267822265625, 2.318267822265625);
      complex6.I.acos();
      complex6.conjugate();
      complex3.NaN.negate();
      int int0 = (-953);
      try { 
        complex0.nthRoot((-953));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -953
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1722.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sinh();
      complex2.NaN.add(complex1);
      Complex complex3 = new Complex(1026.23494295005, (-1223.887855685));
      complex0.INF.add(complex3);
      Complex complex4 = new Complex(1722.0, (-1820.876));
      Complex complex5 = complex4.NaN.subtract(complex0);
      complex0.equals(complex4);
      Complex complex6 = complex5.log();
      complex6.ZERO.abs();
      complex0.INF.pow((-3305.905518157306));
      Complex complex7 = complex3.divide(1026.23494295005);
      Complex complex8 = complex3.ONE.tanh();
      complex8.I.multiply((-2366));
      complex5.asin();
      complex7.I.readResolve();
      Complex complex9 = complex7.multiply(1026.23494295005);
      complex9.readResolve();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1890.85220165059));
      Complex complex1 = complex0.INF.add((-1890.85220165059));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.ONE.subtract(complex2);
      Complex complex4 = complex3.ZERO.atan();
      complex0.hashCode();
      Complex complex5 = complex0.multiply((-1890.85220165059));
      Complex.valueOf(0.0, (-1890.85220165059));
      complex1.readResolve();
      complex4.isInfinite();
      Complex complex6 = complex5.multiply(complex1);
      complex3.I.tanh();
      complex6.NaN.asin();
      complex3.INF.getField();
      complex6.multiply(0);
      complex4.abs();
      complex0.tanh();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(953.337981343);
      Complex complex1 = new Complex(898.608501600597, 898.608501600597);
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex2.ZERO.nthRoot(2194);
      complex0.hashCode();
      Complex complex3 = Complex.NaN;
      complex0.ZERO.divide(complex3);
      complex3.ONE.readResolve();
      Complex complex4 = Complex.valueOf(953.337981343);
      Complex complex5 = complex4.ONE.log();
      complex5.I.divide(complex4);
      complex4.getArgument();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex6.NaN.createComplex(0.0, 1452.967259123156);
      complex6.ZERO.createComplex((-574.630335567193), 504.354996);
      Complex.valueOf(6.283185307179586, (-4862.1761021));
      complex0.readResolve();
      Complex complex8 = complex3.divide(953.337981343);
      complex8.add(complex3);
      Complex complex9 = complex3.reciprocal();
      complex9.negate();
      complex9.getField();
      complex2.asin();
      complex7.negate();
      complex4.sinh();
      complex3.cosh();
      complex2.createComplex(3660.000217778351, 1.0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      complex1.I.multiply(1536.087);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.tan();
      Complex complex4 = Complex.valueOf(839.393367748497, 839.393367748497);
      complex0.subtract(complex4);
      Complex.valueOf(1536.087, (-2214.3527137237215));
      Complex complex5 = Complex.valueOf(20.0);
      complex4.negate();
      complex5.ONE.exp();
      Complex complex6 = complex4.divide(1464.96276721406);
      complex0.I.getArgument();
      Complex complex7 = complex6.ONE.divide(2375.145154);
      Complex complex8 = Complex.NaN;
      complex7.ONE.add(complex8);
      complex4.hashCode();
      complex4.sin();
      complex3.add(complex7);
      complex4.conjugate();
      complex2.reciprocal();
      complex0.tan();
      complex6.multiply(2445);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      complex1.ONE.toString();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.NaN.multiply(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.atan();
      complex0.add(complex2);
      Complex complex6 = complex2.acos();
      Complex complex7 = complex6.log();
      complex7.ONE.conjugate();
      complex5.hashCode();
      complex2.sqrt1z();
      complex3.multiply(200);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-1263.7), (-1263.7));
      Complex complex1 = complex0.divide((-1263.7));
      complex1.INF.toString();
      complex0.INF.hashCode();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex3.NaN.sqrt1z();
      complex7.INF.abs();
      complex5.INF.multiply(complex3);
      complex4.nthRoot(1995);
      complex5.hashCode();
      Complex complex9 = complex3.createComplex(599.83359589, 599.83359589);
      complex9.pow(complex8);
      Complex complex10 = complex6.sqrt();
      Complex complex11 = Complex.valueOf(944.1793, 944.1793);
      complex11.cos();
      Complex complex12 = complex10.I.createComplex(Double.POSITIVE_INFINITY, (-506.7035006484844));
      complex12.I.reciprocal();
      complex2.toString();
      Complex complex13 = complex1.conjugate();
      complex13.ONE.sin();
      Complex complex14 = complex10.reciprocal();
      Complex complex15 = complex13.exp();
      complex15.subtract(complex14);
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.NaN.sqrt();
      Complex complex2 = complex0.I.createComplex(0.0, (-2597.586));
      complex0.isInfinite();
      Complex complex3 = complex0.ONE.divide(complex2);
      complex3.I.exp();
      Complex complex4 = complex0.multiply((-263.5305));
      complex4.ZERO.cosh();
      Complex complex5 = complex4.acos();
      complex0.ONE.getArgument();
      Complex complex6 = complex5.multiply(4308);
      Complex complex7 = Complex.valueOf((double) 4308);
      complex7.I.pow(complex6);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex8.NaN.tanh();
      complex9.ONE.sqrt1z();
      Complex.valueOf(0.0, 0.0);
      complex5.nthRoot(4308);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.pow((-20.80019));
      complex0.getReal();
      complex0.toString();
      complex0.getReal();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1141.151376067, 1141.151376067);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ONE.pow(1141.151376067);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex0.NaN.subtract(complex4);
      complex5.exp();
      Complex complex6 = complex4.INF.sqrt();
      complex2.ONE.sin();
      complex6.add(complex2);
      complex4.NaN.nthRoot(445);
      complex1.acos();
      complex0.nthRoot(1);
      complex0.ONE.sqrt1z();
      complex1.I.subtract((double) 1);
      complex4.equals(complex2);
      complex3.hashCode();
      complex1.conjugate();
      complex0.getReal();
      complex0.cos();
      Complex.valueOf((-5.902712448725381E-8));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.toString();
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.I.getField();
      complex0.hashCode();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.NaN.add(complex1);
      Complex complex5 = complex3.ONE.subtract(complex4);
      complex5.ONE.multiply(complex3);
      Complex complex6 = complex1.INF.subtract(complex4);
      complex6.I.negate();
      complex1.abs();
      Complex complex7 = complex3.createComplex(0.0, 725.9276272334257);
      complex7.isNaN();
      complex1.negate();
      complex4.negate();
      complex5.pow(0.0);
      Complex complex8 = complex2.add(complex0);
      complex8.tan();
      complex1.tan();
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(836.94455457, 836.94455457);
      Complex.valueOf((-1208.445191585227));
      Complex complex1 = complex0.pow(2.4667033200046904E-8);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex3.I.pow(complex0);
      Complex complex4 = complex1.ONE.sqrt();
      Complex complex5 = complex4.INF.negate();
      Complex complex6 = complex1.I.sqrt1z();
      Complex complex7 = complex0.INF.tan();
      complex2.atan();
      complex5.ONE.add(0.0);
      complex0.abs();
      complex0.getArgument();
      Complex complex8 = complex1.multiply(complex5);
      complex4.sqrt();
      complex8.multiply(complex3);
      Complex complex9 = complex4.negate();
      complex9.ZERO.readResolve();
      complex5.sin();
      Complex complex10 = complex6.multiply(complex7);
      complex7.createComplex(0.0, 0.0);
      complex8.ZERO.toString();
      complex2.sqrt1z();
      complex8.log();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 733.0);
      Complex complex1 = complex0.acos();
      complex1.ONE.sqrt1z();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-2004.02936), (-2004.02936));
      Complex complex2 = complex1.divide(689.38189);
      Complex complex3 = complex0.asin();
      complex3.NaN.getField();
      Complex complex4 = complex3.ONE.pow(complex0);
      complex0.ZERO.createComplex(689.38189, 0.0);
      complex0.isInfinite();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.negate();
      complex1.abs();
      Complex complex7 = complex4.log();
      Complex complex8 = complex3.subtract(complex6);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex6.subtract(2834.125500305874);
      complex10.NaN.cos();
      Complex complex11 = complex4.conjugate();
      complex8.ONE.tan();
      Complex complex12 = complex11.NaN.cosh();
      complex5.I.subtract(complex12);
      complex12.NaN.toString();
      complex8.multiply(complex5);
      complex11.getImaginary();
      complex7.subtract(complex11);
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(362.27733597841);
      Complex complex1 = Complex.NaN;
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.ONE.conjugate();
      int int0 = (-1);
      try { 
        complex2.NaN.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = complex0.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex1 = complex0.tanh();
      complex0.NaN.getArgument();
      Complex complex2 = complex1.NaN.add((-487.02));
      Complex complex3 = complex0.NaN.multiply(0);
      Complex complex4 = complex2.INF.multiply((-487.02));
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex4.NaN.pow((-872.0));
      complex0.isNaN();
      Complex complex7 = complex2.ONE.add(complex5);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex4.tan();
      Complex complex10 = complex9.INF.conjugate();
      Complex complex11 = complex0.divide((-487.02));
      Complex complex12 = complex0.cosh();
      complex12.INF.hashCode();
      complex12.I.getField();
      assertSame(complex12, complex3);
      
      complex9.getArgument();
      complex4.getField();
      complex10.sinh();
      Complex complex13 = complex11.atan();
      Object object0 = complex2.NaN.readResolve();
      complex13.getImaginary();
      Complex.valueOf((-2380.0), 1040.5370794967162);
      Complex complex14 = complex10.pow(complex6);
      assertSame(complex14, complex7);
      
      complex1.hashCode();
      Complex complex15 = complex13.pow((-872.0));
      complex10.add(complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex10.getImaginary(), 0.01);
      assertSame(complex2, complex15);
      assertTrue(complex10.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      assertNotSame(complex4, complex11);
      assertSame(complex1, complex0);
      assertSame(complex9, complex8);
      assertTrue(complex0.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = (-480.9067224889731);
      Complex complex0 = Complex.valueOf((-480.9067224889731));
      complex0.isInfinite();
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = null;
      complex1.tan();
      complex1.ONE.getArgument();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
