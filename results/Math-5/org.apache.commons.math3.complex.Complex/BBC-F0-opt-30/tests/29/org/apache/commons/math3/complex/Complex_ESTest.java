/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:17:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.9E-322), (-9.9E-322));
      Complex complex1 = complex0.INF.createComplex((-9.9E-322), 3100);
      complex0.ZERO.getField();
      complex0.ZERO.nthRoot(3100);
      complex0.reciprocal();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.sin();
      complex3.tanh();
      complex1.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(944.0458897, 1.096019026243815E274);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = Complex.valueOf(109.5476632);
      complex3.ONE.sqrt();
      Complex complex4 = complex2.ZERO.pow(1.096019026243815E274);
      complex0.asin();
      complex2.subtract(complex1);
      complex3.exp();
      complex0.nthRoot(1491);
      complex0.sqrt1z();
      Complex complex5 = complex4.exp();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-736.8), (-736.8));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.I.atan();
      complex3.nthRoot(1441);
      complex0.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2209.79), (-2209.79));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.acos();
      complex3.I.tan();
      Complex complex4 = complex1.atan();
      complex1.NaN.asin();
      complex0.I.log();
      Complex complex5 = complex0.tanh();
      complex0.abs();
      Complex complex6 = Complex.valueOf((-2209.79), 9.9E-322);
      Complex complex7 = complex1.multiply(complex4);
      complex7.ZERO.pow(1.557407724654902);
      Complex complex8 = complex7.INF.sinh();
      Complex complex9 = complex0.NaN.cos();
      complex9.ZERO.add(complex1);
      complex6.I.multiply(9.9E-322);
      complex6.INF.sinh();
      complex6.ZERO.sin();
      Complex complex10 = complex5.divide(complex0);
      complex10.I.readResolve();
      Complex complex11 = complex10.exp();
      complex11.INF.asin();
      complex10.INF.multiply(complex2);
      complex6.add(complex0);
      complex8.negate();
      int int0 = (-2067);
      try { 
        complex4.nthRoot((-2067));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,067
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(0.09406651556491852);
      complex0.abs();
      Complex complex2 = complex1.multiply(7);
      Complex complex3 = Complex.valueOf((-2.62683511147141E-8), Double.POSITIVE_INFINITY);
      complex3.tanh();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex4.sqrt1z();
      complex5.getField();
      complex2.exp();
      complex1.tanh();
      complex1.nthRoot(1436);
      complex5.multiply(complex3);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.302710041648838E-9, 2307.184);
      complex0.asin();
      Complex complex2 = Complex.valueOf(0.4033359894180144);
      complex2.hashCode();
      complex1.getField();
      Complex complex3 = Complex.valueOf(2.302710041648838E-9, (-20.0));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-20.0));
      Complex complex2 = complex1.tanh();
      Complex complex3 = new Complex(0.08692999184131622);
      Complex complex4 = new Complex(0.08692999184131622, 0.08692999184131622);
      complex4.multiply(complex2);
      complex1.nthRoot(863);
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2800.27104884629));
      Complex complex2 = complex1.pow(648.1501749088391);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.858055426312534, 9.858055426312534);
      Complex complex1 = complex0.exp();
      complex1.asin();
      complex1.NaN.add(1202551.8661123386);
      complex0.NaN.sqrt();
      Complex complex2 = complex1.createComplex(1202551.8661123386, 4.062894701808608E154);
      Complex complex3 = complex2.acos();
      complex3.INF.add(1202551.8661123386);
      Complex complex4 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1.4674011002723395));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex0.reciprocal();
      complex4.ZERO.getField();
      complex4.abs();
      complex4.atan();
      complex4.NaN.sqrt1z();
      complex2.multiply(21);
      complex2.NaN.pow(complex1);
      Complex complex5 = complex4.add(1172.428686332);
      complex5.I.sinh();
      Complex complex6 = complex2.tanh();
      complex6.INF.log();
      complex3.divide(Double.NaN);
      complex4.atan();
      complex0.asin();
      Complex complex7 = complex4.log();
      complex7.I.log();
      complex0.nthRoot(21);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2050.57382537758, 2050.57382537758);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.tanh();
      complex1.toString();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(3058.33181128);
      Complex complex1 = complex0.createComplex(98.16764416921, 20.0);
      Complex complex2 = new Complex(5013.6584096, 1.849263516607315E7);
      complex2.asin();
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.NaN;
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-2722.7948));
      Complex complex2 = complex1.createComplex((-2722.7948), (-2722.7948));
      Complex complex3 = new Complex(2047.1489282373);
      complex3.asin();
      complex2.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.INF.add((-1907.4));
      complex5.I.asin();
      complex1.abs();
      complex2.pow((-213.79792));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1405);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.sin();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = new Complex((-3651.96), Double.NaN);
      complex0.tan();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-3651.96));
      Complex complex1 = complex0.createComplex((-3651.96), 8.366441582865228);
      Complex complex2 = complex0.asin();
      complex0.sqrt1z();
      complex1.multiply((-2131550952));
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.366441582865228);
      Complex complex1 = new Complex(8.366441582865228, 8.366441582865228);
      Complex.valueOf(8.366441582865228, 8.366441582865228);
      complex1.equals(complex0);
      Complex complex2 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(739.831);
      Complex complex1 = complex0.createComplex(739.831, Double.NaN);
      Complex complex2 = complex0.asin();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex complex3 = Complex.I;
      complex2.cos();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex0.I.divide(complex1);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.createComplex((-1432.7701616958173), Double.POSITIVE_INFINITY);
      complex1.INF.sin();
      complex2.asin();
      complex2.sqrt1z();
      Complex complex3 = complex1.tan();
      complex3.equals(complex0);
      Complex complex4 = Complex.I;
      complex0.sin();
      Complex.valueOf((-1432.7701616958173));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(2.7593424989059015E-8);
      Complex complex1 = Complex.valueOf(1833.98092);
      complex1.INF.sin();
      complex0.divide(0.0);
      Complex complex2 = Complex.ZERO;
      complex0.isNaN();
      complex1.createComplex(0.618990892446662, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2402.60891);
      Complex.valueOf(2402.60891);
      Complex complex1 = Complex.valueOf(2402.60891, 3.7072473866919033E-183);
      complex1.asin();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 2402.60891);
      Complex complex3 = complex2.sqrt1z();
      complex2.tan();
      complex1.equals(complex3);
      Complex complex4 = Complex.I;
      complex0.getImaginary();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex.valueOf(8.366441582865228);
      Complex complex0 = new Complex(8.366441582865228);
      Complex complex1 = new Complex(8.366441582865228, 8.366441582865228);
      Complex complex2 = complex0.divide((-836.2384470735));
      Complex complex3 = new Complex((-836.2384470735), 511.393715);
      complex3.isNaN();
      Complex complex4 = complex3.cosh();
      complex1.cos();
      complex4.reciprocal();
      Complex complex5 = Complex.ONE;
      complex5.getArgument();
      complex2.sin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.366441582865228);
      Complex complex1 = new Complex(8.366441582865228);
      Complex complex2 = new Complex(8.366441582865228, 8.366441582865228);
      complex1.divide((-836.2384470735));
      Complex complex3 = new Complex((-836.2384470735), 511.393715);
      complex3.isNaN();
      complex2.cosh();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.reciprocal();
      complex3.getArgument();
      complex0.sin();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2240.25, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.createComplex(501.92, 710.0210507410737);
      complex2.asin();
      complex2.sqrt1z();
      complex2.tan();
      Complex complex3 = new Complex(710.0210507410737);
      complex3.equals(complex0);
      Complex complex4 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.asin();
      complex3.I.asin();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex2.INF.atan();
      complex5.cos();
      Complex complex6 = complex0.I.subtract(4.4896127778163155E38);
      complex0.isInfinite();
      Complex complex7 = Complex.valueOf(0.0);
      complex2.log();
      Complex complex8 = complex7.I.multiply(0.0);
      complex8.I.readResolve();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex1.multiply(0.0);
      complex9.acos();
      complex10.pow(0.0);
      Complex complex12 = complex6.multiply(complex4);
      complex11.add(1521.1855478107398);
      complex2.multiply(0.0);
      complex3.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.366441582865228);
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex((-2.10770182066344E-8), 8.366441582865228);
      complex2.exp();
      complex1.tanh();
      Complex complex3 = new Complex(8.366441582865228);
      Complex complex4 = Complex.I;
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(3413.0, 2.0);
      complex0.I.pow(Double.POSITIVE_INFINITY);
      complex0.asin();
      complex1.tanh();
      complex0.atan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.366441582865228);
      Complex complex1 = complex0.exp();
      complex1.INF.nthRoot(2052290471);
      Complex complex2 = complex1.asin();
      complex1.sqrt1z();
      complex2.I.getField();
      Complex complex3 = complex2.tan();
      complex0.equals("FIQt?*St6Y^&_ykq)");
      Complex complex4 = complex3.subtract(complex0);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.createComplex(99.81851536063557, 6.151951078101721E-205);
      Complex complex2 = new Complex(Double.NaN);
      Complex complex3 = complex0.asin();
      complex3.sqrt1z();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tan();
      complex0.equals("[HeZ},?<BbEn;[J");
      complex5.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex(6.151951078101721E-205, -0.0);
      Complex complex1 = Complex.valueOf((-20.0), 4.4216561713555547E276);
      complex1.asin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.cosh();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.createComplex(Double.NaN, Double.NaN);
      Complex.valueOf(Double.NaN);
      Complex complex3 = complex0.asin();
      complex1.add(Double.NaN);
      complex2.toString();
      Complex complex4 = complex3.atan();
      complex4.NaN.abs();
      complex4.createComplex(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-1.589678872195875E-8), 2739.8033186);
      Complex complex2 = new Complex(1930.301723253336);
      Complex complex3 = complex0.asin();
      complex1.sqrt1z();
      complex3.NaN.divide(482.56284314);
      Complex complex4 = complex3.tan();
      complex4.sqrt1z();
      complex4.equals(complex3);
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex1.I.multiply(3290);
      Complex complex2 = complex0.multiply(1537.84);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.NaN.add(1537.84);
      Complex complex5 = complex0.createComplex(1537.84, (-5149.691));
      Complex complex6 = complex2.INF.sinh();
      Complex complex7 = complex5.NaN.negate();
      Complex complex8 = complex7.acos();
      complex8.I.abs();
      Complex complex9 = complex4.I.conjugate();
      complex2.ZERO.sqrt1z();
      complex2.negate();
      complex9.readResolve();
      complex3.equals("(");
      complex9.sqrt();
      Complex complex10 = complex4.pow(complex6);
      Complex complex11 = complex3.subtract((-5149.691));
      Complex.valueOf((-5149.691));
      Complex.valueOf(1537.84);
      complex4.getImaginary();
      complex11.conjugate();
      complex11.multiply(3976.288);
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2047.54, 2914.8504417308);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.subtract(2047.54);
      complex2.atan();
      complex0.divide(complex1);
      Complex complex3 = complex1.cosh();
      complex0.getField();
      Complex complex4 = new Complex(2013.16);
      Complex complex5 = complex4.tanh();
      complex5.conjugate();
      Complex complex6 = Complex.NaN;
      complex6.log();
      complex4.readResolve();
      complex6.log();
      Complex complex7 = complex4.exp();
      Complex complex8 = Complex.valueOf(2013.16);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.multiply(1825);
      Complex complex11 = complex8.asin();
      complex5.add(complex7);
      Complex complex12 = complex9.divide(complex3);
      complex6.conjugate();
      complex7.isNaN();
      complex9.toString();
      complex10.getReal();
      Complex complex13 = complex11.add(complex10);
      Complex complex14 = Complex.valueOf((double) 1825, Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex14.equals(object0);
      complex4.readResolve();
      Complex complex15 = Complex.NaN;
      complex9.pow(complex13);
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2656.2778704259945));
      complex1.ONE.sqrt();
      Complex complex2 = complex1.pow(1008.7052);
      complex1.isInfinite();
      complex2.nthRoot(4533);
      complex1.isNaN();
      complex0.pow((double) 4533);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.366441582865228);
      Complex complex1 = complex0.exp();
      complex1.exp();
      Complex.valueOf((-2.10770182066344E-8), (-2.10770182066344E-8));
      complex0.tanh();
      Complex complex2 = new Complex(8.366441582865228, (-2.10770182066344E-8));
      complex2.I.subtract(Double.NaN);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.459714));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.asin();
      complex0.divide((-951.003385562868));
      complex0.getField();
      Complex complex3 = complex0.sinh();
      complex3.acos();
      complex1.pow(2181.8589);
      Complex complex4 = complex2.cosh();
      Complex complex5 = Complex.valueOf((-6.459714));
      complex5.divide(complex0);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide((-6.459714));
      complex1.isNaN();
      complex2.cos();
      complex7.reciprocal();
      complex3.getArgument();
      complex4.sin();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6454986103390605));
      complex0.readResolve();
      Complex complex1 = new Complex((-1.6454986103390605), 1.2627736197958951E98);
      complex0.equals(complex1);
      Complex complex2 = Complex.valueOf((-20.0), 1194.1);
      complex1.sinh();
      complex1.divide(2739.8033186);
      complex0.getArgument();
      complex2.nthRoot(69);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.I;
      complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.sqrt();
      complex3.ONE.tanh();
      Complex complex4 = Complex.valueOf(1564.473875020008, (-2.4459827842685974E-8));
      complex4.subtract((-2.4459827842685974E-8));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      double double0 = 417.3861183433576;
      Complex complex1 = complex0.createComplex(597.48, 417.3861183433576);
      complex1.ZERO.exp();
      complex0.createComplex(417.3861183433576, 452.86160058679314);
      complex0.toString();
      complex0.getImaginary();
      complex1.I.add(complex0);
      double double1 = 40.727904961796;
      Complex complex2 = complex1.pow(40.727904961796);
      complex0.I.sqrt1z();
      try { 
        complex2.ONE.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.toString();
      Complex complex2 = Complex.ONE;
      complex2.pow(complex1);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(6.9727866253006265, 4.4896127778163155E38);
      Complex complex1 = complex0.I.multiply(6.9727866253006265);
      Complex complex2 = Complex.valueOf(Double.NaN, 6.9727866253006265);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.divide(complex2);
      complex0.divide(1021.413);
      Complex complex5 = Complex.I;
      complex5.isInfinite();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex8.createComplex(13.945576396103014, (-2508.12177711766));
      Complex complex9 = new Complex((-1.13047236597869E-8));
      complex0.getField();
      complex5.hashCode();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.divide(complex4);
      complex5.sin();
      complex11.acos();
      complex7.tanh();
      Complex complex12 = new Complex(2909.3837495528915);
      complex1.cosh();
      complex6.divide(complex7);
      Complex complex13 = new Complex(1021.413);
      complex8.cosh();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(40.727904961796);
      Complex complex1 = complex0.ONE.divide(40.727904961796);
      Complex complex2 = Complex.valueOf(40.727904961796, 40.727904961796);
      Complex complex3 = complex0.multiply(1823.83618017);
      Complex complex4 = complex3.NaN.cosh();
      complex0.ZERO.sin();
      complex3.I.pow(complex1);
      complex3.I.readResolve();
      Complex complex5 = complex0.sqrt1z();
      complex3.ZERO.atan();
      complex4.acos();
      complex1.ZERO.tan();
      int int0 = 2596;
      complex4.nthRoot(2596);
      Complex complex6 = complex4.sqrt();
      complex6.ONE.toString();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex4.subtract(complex5);
      complex8.ONE.pow(complex7);
      Complex complex9 = complex8.I.atan();
      Complex complex10 = complex2.negate();
      complex10.toString();
      complex6.sinh();
      complex3.multiply(1.4674011002723395);
      complex4.sinh();
      try { 
        complex9.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex0.asin();
      Complex complex2 = complex1.asin();
      complex2.multiply(complex0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.cos();
      complex3.subtract(4.4896127778163155E38);
      Complex complex6 = new Complex(727.2);
      complex6.isInfinite();
      Complex complex7 = new Complex(1171.547306557725, 727.2);
      Complex complex8 = Complex.ONE;
      complex8.multiply(1875.1306155814);
      complex3.sin();
      Complex.valueOf(1057786.7765925946, (-624.6955));
      complex2.asin();
      Complex.valueOf(6.283185307179586);
      complex4.add(638.8751807469198);
      complex5.tan();
      Complex.valueOf(638.8751807469198, 2890.8986);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.asin();
      complex3.I.asin();
      complex3.ZERO.multiply(complex0);
      Complex complex4 = complex2.INF.atan();
      Complex complex5 = Complex.I;
      complex0.I.subtract(4.4896127778163155E38);
      complex0.isInfinite();
      Complex complex6 = complex2.reciprocal();
      Complex.valueOf(487.0);
      complex4.getReal();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex0.ONE.pow(complex3);
      complex4.ONE.reciprocal();
      complex2.isInfinite();
      complex4.cos();
      complex1.reciprocal();
      complex0.getField();
      Complex complex5 = Complex.ZERO;
      complex5.hashCode();
      Complex complex6 = complex2.divide(complex1);
      complex2.sin();
      complex1.acos();
      Complex complex7 = new Complex((-1174.37096696265), (-834.9757982821652));
      complex7.tanh();
      complex6.add((-1174.37096696265));
      complex1.multiply(868.809021109);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.0015652433059704558), (-1552.57419999));
      Complex complex1 = Complex.valueOf((-0.0015652433059704558));
      Complex complex2 = complex0.cos();
      complex1.readResolve();
      Complex complex3 = Complex.NaN;
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      Complex.valueOf(2739.8033186, (-3.206182925646474E-8));
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.divide((-367.2620572165));
      complex5.getArgument();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf(1.0, 0.0);
      complex7.sin();
      complex2.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1620.94871662417), 0.0);
      Complex complex1 = Complex.valueOf(2402.60891);
      Complex complex2 = complex0.cos();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      Complex complex3 = Complex.valueOf(0.0, 2739.8033186);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex1.divide(0.0);
      complex3.getArgument();
      Complex complex6 = Complex.NaN;
      complex4.tanh();
      Complex complex7 = complex5.add((-1407.383431884261));
      complex7.multiply(0.0);
      complex7.multiply(complex6);
      // Undeclared exception!
      complex3.nthRoot(287877478);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1620.94871662417), 0.0);
      Complex complex1 = Complex.valueOf(2402.60891);
      Complex complex2 = complex0.cos();
      Complex complex3 = (Complex)complex2.readResolve();
      complex2.equals(complex3);
      Complex.valueOf(1.5655577182769775, (-2465.427301184817));
      complex2.sinh();
      complex3.divide(0.41421356237309515);
      Complex complex4 = Complex.valueOf(Double.NaN);
      complex4.getArgument();
      Complex complex5 = Complex.NaN;
      complex1.sin();
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.ONE.log();
      Complex complex2 = complex0.acos();
      complex0.cosh();
      Complex complex3 = complex2.I.divide(3333.905194966903);
      complex2.isInfinite();
      Complex complex4 = Complex.valueOf(2181.8589);
      complex4.NaN.createComplex(20.0, (-951.003385562868));
      Complex complex5 = new Complex(0.008336750013465571, (-617142.7830443131));
      complex5.add((-951.003385562868));
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2047.54, 2914.8504417308);
      complex0.nthRoot(1);
      Complex complex1 = complex0.multiply((double) 1);
      complex0.abs();
      Complex.valueOf(2914.8504417308, 2914.8504417308);
      Complex complex2 = complex1.multiply((-2560));
      complex2.sin();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 941, (double) 941);
      Complex complex1 = complex0.asin();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.0778721842076342));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = Complex.valueOf(1189.0695, 0.6900760708753189);
      complex1.negate();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.subtract(436.5554482);
      complex0.abs();
      complex4.atan();
      complex4.exp();
      complex5.getImaginary();
      complex2.toString();
      complex2.sqrt();
      Complex complex6 = complex4.negate();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.459714));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.asin();
      complex0.divide((-951.003385562868));
      complex0.getField();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex1.pow(2181.8589);
      Complex complex6 = complex2.cosh();
      Complex complex7 = Complex.valueOf((-951.003385562868), Double.NaN);
      Complex complex8 = complex7.conjugate();
      complex7.divide(complex0);
      Complex complex9 = complex8.divide(3333.905194966903);
      Complex complex10 = complex4.sqrt();
      complex0.isInfinite();
      complex3.cos();
      complex9.reciprocal();
      complex6.NaN.createComplex((-2508.12177711766), (-6.459714));
      Complex complex11 = new Complex(240.0);
      complex11.getField();
      complex2.hashCode();
      Complex complex12 = complex5.divide(complex1);
      Complex complex13 = complex5.sin();
      complex12.acos();
      complex6.tanh();
      Complex complex14 = new Complex((-951.003385562868));
      complex14.cosh();
      Complex complex15 = complex10.divide(complex13);
      complex15.divide((-2985.100741));
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.0778721842076342));
      complex0.I.tan();
      Complex complex1 = complex0.divide((-32366.74238420046));
      complex1.INF.getArgument();
      complex1.sin();
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex((-32366.74238420046));
      complex2.divide(complex0);
      complex2.divide((-0.0778721842076342));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2047.54, 2914.8504417308);
      complex0.nthRoot(1);
      Complex complex1 = complex0.multiply(65);
      complex0.multiply(65);
      Complex complex2 = complex1.sqrt();
      complex2.tanh();
      Complex complex3 = complex0.pow(complex1);
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.conjugate();
      complex0.getField();
      Complex complex7 = complex0.divide((-951.003385562868));
      complex4.getField();
      complex7.sinh();
      Complex complex8 = complex1.acos();
      complex6.pow(2181.8589);
      complex2.cosh();
      complex4.conjugate();
      complex3.divide(complex4);
      complex8.I.divide(3333.905194966903);
      complex1.reciprocal();
      complex5.sqrt();
      complex8.isInfinite();
      Complex complex9 = new Complex(2181.8589, 3333.905194966903);
      complex9.reciprocal();
      Complex complex10 = new Complex(32366.74238420046, 2.0);
      complex10.ZERO.divide(complex7);
      complex10.multiply((-211));
      complex7.isInfinite();
      Complex complex11 = Complex.ZERO;
      try { 
        complex5.nthRoot((-2221));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,221
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.NaN.sqrt();
      complex2.ZERO.subtract(complex0);
      Complex.valueOf((double) 941, (double) 941);
      complex1.sin();
      complex1.asin();
      Complex.valueOf((-641.238902));
      complex0.add((-641.238902));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.0778721842076342));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide((-32366.74238420046));
      complex2.INF.getArgument();
      complex2.sin();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2047.54, 2914.8504417308);
      Complex complex1 = complex0.negate();
      complex0.subtract(2047.54);
      complex0.divide(complex1);
      Complex complex2 = complex1.cosh();
      complex0.getField();
      Complex complex3 = new Complex(2013.16);
      Complex complex4 = complex3.tanh();
      complex4.conjugate();
      Complex complex5 = Complex.NaN;
      complex5.log();
      complex3.readResolve();
      complex5.log();
      Complex complex6 = complex3.exp();
      Complex complex7 = Complex.valueOf(2013.16);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.multiply(1825);
      Complex complex10 = complex7.asin();
      complex4.add(complex6);
      Complex complex11 = complex8.divide(complex2);
      complex5.conjugate();
      complex6.isNaN();
      complex8.toString();
      complex9.getReal();
      Complex complex12 = complex10.add(complex9);
      Complex complex13 = Complex.valueOf(316.0, Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex13.equals(object0);
      complex3.readResolve();
      Complex complex14 = Complex.NaN;
      complex8.pow(complex12);
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2047.54, 2914.8504417308);
      Complex complex1 = complex0.negate();
      complex1.getReal();
      Complex complex2 = complex1.divide(complex0);
      complex1.hashCode();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex4.sqrt();
      complex1.hashCode();
      complex5.abs();
      Complex complex6 = complex3.tan();
      complex4.toString();
      complex3.readResolve();
      complex5.atan();
      complex2.hashCode();
      complex6.getField();
      Complex complex7 = Complex.valueOf((-2728.3533205767), (-2368.85347));
      Complex complex8 = Complex.valueOf((-494.82), 0.0);
      Complex complex9 = complex3.multiply(complex8);
      complex9.subtract(2047.54);
      complex6.sinh();
      complex7.readResolve();
      try { 
        complex6.nthRoot((-2551));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,551
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.ZERO.subtract(complex2);
      Complex complex6 = complex5.ZERO.multiply(941);
      complex6.ONE.pow(complex5);
      Complex complex7 = complex0.I.tan();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex7.INF.cosh();
      Complex complex10 = complex0.I.conjugate();
      complex0.ZERO.getField();
      complex0.divide((-1275.6888485353393));
      complex0.getField();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex10.acos();
      complex12.NaN.pow(805.0);
      Complex complex13 = complex12.I.cosh();
      complex13.ZERO.conjugate();
      Complex complex14 = complex11.divide(complex2);
      complex14.ONE.sqrt();
      complex10.isInfinite();
      complex9.cos();
      Complex complex15 = complex9.reciprocal();
      complex15.getField();
      complex4.hashCode();
      complex11.divide(complex8);
      Complex complex16 = complex10.sin();
      complex10.acos();
      complex16.tanh();
      complex3.multiply(1.374152583940637E-239);
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.add(complex1);
      complex3.NaN.sqrt();
      complex3.ZERO.subtract(complex2);
      Complex.valueOf((double) 941, (double) 941);
      complex1.sin();
      complex1.asin();
      Complex.valueOf((-641.238902));
      complex0.add((-641.238902));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.conjugate();
      complex0.getField();
      Complex complex7 = complex0.divide((-951.003385562868));
      complex4.getField();
      complex7.sinh();
      Complex complex8 = complex1.acos();
      complex6.pow(2181.8589);
      complex2.cosh();
      complex4.conjugate();
      Complex complex9 = complex3.divide(complex4);
      complex8.I.divide(3333.905194966903);
      complex5.sqrt();
      complex8.isInfinite();
      Complex complex10 = complex0.cos();
      Complex complex11 = complex10.reciprocal();
      complex11.getField();
      complex2.hashCode();
      Complex complex12 = complex11.divide(complex1);
      complex5.sin();
      Complex complex13 = complex9.acos();
      complex13.tanh();
      Complex complex14 = new Complex((-0.9936118417652937));
      complex12.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1620.94871662417), 0.0);
      Complex complex1 = Complex.valueOf(2402.60891);
      Complex complex2 = complex0.cos();
      Complex complex3 = (Complex)complex2.readResolve();
      complex2.equals(complex3);
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = Complex.valueOf(0.0, 2739.8033186);
      complex2.sinh();
      Complex complex6 = Complex.valueOf(0.0, 2739.8033186);
      complex6.negate();
      complex1.log();
      complex6.INF.conjugate();
      Complex complex7 = complex2.subtract(0.0);
      complex5.abs();
      complex2.atan();
      complex7.getImaginary();
      complex7.toString();
      Complex complex8 = complex7.sqrt();
      complex6.negate();
      complex8.isInfinite();
      complex4.conjugate();
      Complex complex9 = complex3.negate();
      complex9.createComplex(2739.8033186, -0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.459714));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.asin();
      complex0.equals(complex1);
      complex0.isNaN();
      Complex complex3 = complex0.createComplex((-6.459714), (-6.459714));
      Complex complex4 = complex3.ZERO.multiply((-286.0));
      complex4.ONE.abs();
      Complex complex5 = complex2.exp();
      Complex complex6 = Complex.valueOf(6.734925417361);
      Complex complex7 = complex3.multiply(1518);
      Complex complex8 = complex6.asin();
      complex3.add(complex8);
      complex4.conjugate();
      complex1.isNaN();
      complex2.toString();
      complex0.getReal();
      complex5.add(complex1);
      Object object0 = new Object();
      complex1.equals(object0);
      Complex complex9 = Complex.NaN;
      complex6.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.459714));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.asin();
      complex0.equals(complex1);
      complex0.isNaN();
      Complex complex3 = complex0.createComplex((-6.459714), (-6.459714));
      Complex complex4 = complex3.ZERO.multiply((-286.0));
      complex4.ONE.abs();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.divide(complex1);
      complex5.conjugate();
      complex3.isNaN();
      complex0.toString();
      complex3.getReal();
      complex6.add(complex2);
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
      Complex complex7 = new Complex(0.13243216276168823);
      complex7.readResolve();
      Complex complex8 = Complex.NaN;
      complex1.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 746.3538);
      Complex complex2 = complex0.divide(complex1);
      complex0.readResolve();
      complex0.abs();
      complex0.isInfinite();
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex0.reciprocal();
      complex2.hashCode();
      complex4.getField();
      complex0.getReal();
      Complex complex5 = complex0.divide(complex2);
      complex0.hashCode();
      complex0.cos();
      complex1.multiply(complex2);
      Complex complex6 = complex0.sqrt();
      complex6.hashCode();
      complex3.abs();
      Complex complex7 = complex4.tan();
      complex5.toString();
      complex7.I.negate();
      complex4.readResolve();
      complex2.atan();
      complex6.hashCode();
      complex4.getField();
      Complex.valueOf((-2318.2736), 0.0);
      complex4.multiply(complex7);
      complex1.subtract((-127.55893554375011));
      Complex complex8 = complex3.sinh();
      complex4.readResolve();
      complex8.nthRoot(1591);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.INF.multiply(complex1);
      Complex complex2 = Complex.valueOf(139.46154, (-0.024156828124507035));
      complex2.sin();
      complex1.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(139.46154, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.459714));
      Complex complex1 = complex0.exp();
      complex0.asin();
      complex0.equals(complex1);
      complex0.isNaN();
      Complex complex2 = complex0.createComplex((-6.459714), (-6.459714));
      Complex complex3 = complex2.ZERO.multiply((-286.0));
      complex3.ONE.abs();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.multiply((-2560));
      Complex complex5 = new Complex((-320.6754));
      complex5.sin();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.cosh();
      complex2.ZERO.reciprocal();
      complex2.ONE.log();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.ZERO.createComplex((-6.734925417361), (-179.91037319788));
      Complex complex5 = complex4.INF.cosh();
      complex4.divide(complex0);
      complex5.ONE.negate();
      Complex complex6 = complex1.sqrt1z();
      complex6.ONE.exp();
      complex1.isNaN();
      complex4.isNaN();
      complex2.subtract((-179.91037319788));
      complex4.sqrt();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.459714));
      Complex complex1 = complex0.reciprocal();
      complex0.log();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.createComplex((-264.422829), (-179.91037319788));
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.divide(complex2);
      complex5.negate();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex1.exp();
      complex6.isNaN();
      complex7.isNaN();
      Complex complex8 = new Complex((-6.734925417361));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      complex1.ZERO.multiply(complex0);
      complex2.sqrt();
      complex2.tanh();
      Complex complex3 = Complex.valueOf(1564.473875020008, (-20.0));
      complex0.subtract(3.930075236441064E-230);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2047.54, 2914.8504417308);
      complex0.negate();
      complex0.nthRoot(1);
      Complex complex1 = complex0.multiply(93);
      complex1.getField();
      Complex complex2 = Complex.valueOf(2489.28, Double.NaN);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.subtract(2489.28);
      complex4.ONE.cos();
      complex1.sinh();
      Complex complex5 = Complex.ONE;
      complex5.readResolve();
      complex1.nthRoot(2837);
      complex1.sinh();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-1552.57419999));
      Complex complex1 = complex0.INF.asin();
      complex1.ONE.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex0.I.abs();
      Complex complex2 = complex1.INF.tan();
      complex1.ONE.abs();
      Complex complex3 = complex2.I.multiply(0.0);
      Complex complex4 = complex3.ZERO.pow(complex0);
      complex0.getArgument();
      complex1.ZERO.getField();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex2.add(complex0);
      complex5.NaN.tanh();
      Complex complex7 = complex6.ONE.cos();
      complex7.sqrt();
      Complex complex8 = complex6.I.sinh();
      complex8.ONE.hashCode();
      Complex complex9 = complex6.tan();
      Complex complex10 = complex5.createComplex((-2318.2736), 2.0624330192486066E-8);
      complex2.negate();
      complex10.getImaginary();
      complex6.INF.sinh();
      complex10.sqrt();
      complex6.hashCode();
      complex5.isNaN();
      complex4.isNaN();
      complex10.getField();
      Object object0 = new Object();
      complex9.equals(object0);
      complex7.isNaN();
      complex5.sqrt1z();
      complex8.multiply(2.0624330192486066E-8);
      complex5.isInfinite();
      complex9.sqrt();
      Complex.valueOf((-2507.0), 967.19433);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1620.94871662417), 0.0);
      Complex complex1 = Complex.valueOf(2402.60891);
      Complex complex2 = complex0.cos();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex1.I.conjugate();
      Complex complex3 = Complex.valueOf(0.0, 2739.8033186);
      complex2.sinh();
      Complex complex4 = Complex.valueOf(0.0, 2739.8033186);
      complex4.negate();
      complex1.log();
      complex4.INF.conjugate();
      Complex complex5 = complex2.subtract(0.0);
      complex3.abs();
      complex2.atan();
      complex2.ZERO.exp();
      complex5.getImaginary();
      complex5.toString();
      Complex complex6 = complex5.sqrt();
      complex4.negate();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.asin();
      complex3.I.asin();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      Complex complex5 = complex2.INF.atan();
      complex5.cos();
      Complex complex6 = complex0.I.subtract(4.4896127778163155E38);
      complex0.isInfinite();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.I.multiply(0.0);
      complex8.I.readResolve();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.tanh();
      Complex complex11 = complex1.multiply(0.0);
      complex9.acos();
      complex10.pow(0.0);
      complex6.multiply(complex4);
      complex11.add(1521.1855478107398);
      complex2.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.toString();
      Complex complex1 = complex0.INF.sin();
      complex1.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      complex2.nthRoot(2499);
      complex0.ZERO.getField();
      Complex complex3 = complex0.multiply((-20.0));
      Complex complex4 = complex3.NaN.sin();
      complex4.multiply(1088);
      Complex complex5 = complex4.NaN.sqrt();
      complex5.ONE.log();
      complex5.sin();
      complex3.equals(complex2);
      complex0.getReal();
      complex3.tanh();
      complex1.conjugate();
      Complex.valueOf((-20.0));
      Complex complex6 = complex0.cos();
      complex3.reciprocal();
      complex1.log();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1673.048));
      complex0.INF.abs();
      Complex.valueOf(1094.079250897, (-175.0));
      Complex complex1 = new Complex((-1673.048), (-1673.048));
      Complex complex2 = complex0.I.conjugate();
      complex2.I.multiply((-175.0));
      Complex.valueOf((-175.0));
      Complex complex3 = complex0.pow(complex1);
      complex3.INF.toString();
      Complex complex4 = complex3.INF.exp();
      complex0.getImaginary();
      complex0.getField();
      Complex complex5 = complex4.negate();
      complex5.NaN.readResolve();
      complex2.multiply(2038);
      complex2.createComplex(0.0, 487.0482680143);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.sinh();
      complex1.getReal();
      Complex complex5 = complex4.pow(complex0);
      complex5.ONE.add(complex1);
      complex2.sqrt1z();
      Complex complex6 = complex3.cos();
      complex3.ONE.nthRoot(666);
      Complex complex7 = complex6.INF.asin();
      Complex complex8 = complex6.NaN.sqrt1z();
      Complex complex9 = complex3.subtract(complex4);
      complex9.ONE.pow(complex3);
      complex2.sqrt1z();
      Complex complex10 = complex8.sin();
      complex10.NaN.sinh();
      complex10.sqrt();
      complex4.getField();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex((-22.92));
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex2.I.multiply(complex1);
      complex3.ZERO.multiply(7);
      complex2.ZERO.nthRoot(1);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = complex2.NaN.divide(complex0);
      complex2.ONE.readResolve();
      complex1.ONE.abs();
      complex0.isInfinite();
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex4.I.reciprocal();
      complex4.NaN.hashCode();
      complex4.NaN.getField();
      complex2.getReal();
      Complex complex6 = complex0.ONE.divide(complex4);
      complex6.I.hashCode();
      Complex complex7 = complex2.cos();
      Complex complex8 = complex2.ONE.multiply(complex5);
      Complex complex9 = complex7.sqrt();
      complex4.I.hashCode();
      complex9.NaN.abs();
      complex7.ONE.tan();
      complex1.toString();
      complex7.readResolve();
      complex3.atan();
      complex5.hashCode();
      complex4.I.getField();
      Complex complex10 = Complex.valueOf(1.0, 0.0);
      complex6.multiply(complex9);
      complex10.subtract(0.0);
      complex8.sinh();
      complex10.readResolve();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(5287.2127, 5287.2127);
      complex0.I.getArgument();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.add((-2.0433926409457167E-7));
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex3.NaN.subtract(Double.NaN);
      complex4.I.subtract(0.0);
      complex4.NaN.readResolve();
      Complex complex5 = complex2.ONE.cosh();
      Complex complex6 = complex2.I.log();
      Complex complex7 = complex0.subtract(complex1);
      complex7.INF.sqrt1z();
      Complex complex8 = complex2.multiply(5287.2127);
      complex6.abs();
      Complex complex9 = Complex.valueOf(1489.1545228645693, 1489.1545228645693);
      complex8.asin();
      complex2.sqrt();
      complex2.sqrt1z();
      complex5.sqrt();
      complex9.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.I.negate();
      complex0.ONE.nthRoot(658);
      complex0.getReal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.NaN.subtract(0.0);
      complex4.ONE.multiply(1245);
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = complex3.createComplex(20.0, 6.443805025317327E169);
      Complex complex7 = complex3.INF.multiply(complex5);
      Complex complex8 = complex7.log();
      complex6.NaN.abs();
      Complex complex9 = complex6.ONE.subtract((-20.0));
      complex9.I.add(complex4);
      complex0.multiply(658);
      complex2.sin();
      Complex complex10 = complex5.sqrt1z();
      complex6.nthRoot(1245);
      Complex complex11 = complex2.cosh();
      Complex complex12 = complex11.add(complex8);
      complex3.toString();
      complex10.getArgument();
      complex12.add(complex1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ZERO.cosh();
      complex2.ZERO.reciprocal();
      Complex complex3 = complex2.ONE.log();
      complex3.NaN.atan();
      Complex complex4 = complex2.ZERO.createComplex((-6.734925417361), (-179.91037319788));
      Complex complex5 = complex4.INF.cosh();
      complex4.divide(complex0);
      complex5.ONE.negate();
      Complex complex6 = complex1.sqrt1z();
      complex6.ONE.exp();
      complex1.isNaN();
      complex4.isNaN();
      complex2.subtract((-179.91037319788));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.459714));
      Complex complex1 = complex0.exp();
      complex0.asin();
      complex0.equals(complex1);
      complex0.isNaN();
      Complex complex2 = complex0.createComplex((-6.459714), (-6.459714));
      Complex complex3 = complex2.ZERO.multiply((-286.0));
      complex3.ONE.abs();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.NaN.multiply((-2560));
      complex1.sin();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(4574.967441);
      double double0 = (-2.290530257391564E-7);
      Complex complex1 = Complex.valueOf(4574.967441, (-2.290530257391564E-7));
      Complex complex2 = complex0.I.add(complex1);
      complex2.I.subtract(2285.11385);
      complex0.getImaginary();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.NaN.tan();
      complex3.NaN.tanh();
      complex5.ZERO.exp();
      complex3.getField();
      double double1 = 1218.8801;
      complex4.multiply(1218.8801);
      complex5.sinh();
      Complex.valueOf(1218.8801, 1218.8801);
      Complex complex6 = complex0.sqrt();
      try { 
        complex6.I.nthRoot((-1036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,036
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2496.45845675);
      Complex.valueOf((-20.0));
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.INF.asin();
      complex2.ZERO.tan();
      Complex complex3 = complex0.multiply(2496.45845675);
      Complex complex4 = complex3.I.add(complex1);
      Complex complex5 = complex4.NaN.sqrt();
      double double0 = 0.0;
      complex5.NaN.createComplex(0.0, 0.12038381397724152);
      Complex complex6 = complex2.subtract(0.0);
      complex6.divide(0.0);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2047.54, 2914.8504417308);
      Complex complex1 = complex0.negate();
      complex0.nthRoot(1);
      Complex complex2 = complex0.multiply(93);
      complex2.isInfinite();
      complex2.nthRoot(93);
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(460.64061453171485);
      complex0.toString();
      Complex complex1 = complex0.INF.sin();
      complex0.isNaN();
      complex0.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.cos();
      complex2.INF.sinh();
      complex3.NaN.subtract(1268.3700094417495);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.I.conjugate();
      Complex complex6 = complex4.INF.cos();
      complex6.NaN.tanh();
      Complex complex7 = complex6.ONE.cosh();
      complex7.I.multiply(460.64061453171485);
      Complex complex8 = complex7.ONE.reciprocal();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.sqrt();
      complex0.createComplex(2.345594882965088, 460.64061453171485);
      Complex complex11 = Complex.valueOf(2.345594882965088);
      Complex complex12 = complex10.I.subtract(complex4);
      complex10.I.add(460.64061453171485);
      complex10.toString();
      complex10.reciprocal();
      Complex complex13 = complex11.add(complex12);
      Complex complex14 = complex13.INF.multiply(275);
      complex14.multiply(6.283185307179586);
      complex14.I.log();
      complex8.multiply(1454);
      complex5.cosh();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-1726.4));
      Complex complex1 = complex0.ONE.multiply((-1726.4));
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      complex4.INF.pow(complex2);
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.ONE.pow((-1726.4));
      complex6.sinh();
      Complex complex7 = complex5.cos();
      complex0.equals(complex7);
      Complex complex8 = complex0.conjugate();
      complex8.ONE.multiply(1.0);
      Complex complex9 = complex3.createComplex(1.0, (-1726.4));
      Complex complex10 = complex9.multiply(1);
      complex10.ONE.sqrt1z();
      complex6.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.log();
      complex0.ZERO.add(complex1);
      complex0.getField();
      complex0.NaN.cosh();
      complex1.conjugate();
      Complex complex2 = Complex.valueOf((-1072.769806));
      complex1.getImaginary();
      complex0.toString();
      Complex complex3 = complex1.pow(2.1884708404541016);
      complex3.tanh();
      complex2.cosh();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1266.01789, (-2294.90998802));
      Complex complex1 = complex0.cos();
      complex1.NaN.nthRoot(1);
      complex1.I.getField();
      complex1.NaN.negate();
      complex1.getField();
      Complex complex2 = complex1.reciprocal();
      complex2.ZERO.abs();
      complex0.conjugate();
      complex2.multiply(3709.41236685523);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      complex1.ZERO.divide(complex0);
      Complex complex2 = complex1.NaN.divide((-332.966733743));
      Complex complex3 = complex0.pow(complex1);
      complex2.sinh();
      complex3.ZERO.sinh();
      Complex complex4 = Complex.INF;
      try { 
        complex4.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0));
      complex1.INF.readResolve();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex.valueOf(297.9, (-2307.357146));
      complex2.ONE.abs();
      try { 
        complex2.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex1.NaN.sinh();
      complex3.I.getField();
      Complex complex4 = Complex.valueOf((-706.27033483));
      complex4.NaN.abs();
      complex0.ONE.toString();
      complex1.INF.hashCode();
      Complex complex5 = complex0.sinh();
      complex5.readResolve();
      Complex complex6 = Complex.valueOf(5.8015881615938497E-8);
      complex6.INF.sin();
      Complex.valueOf(2.0, (-706.27033483));
      Complex complex7 = complex0.I.asin();
      complex7.ONE.pow(complex0);
      Complex complex8 = Complex.valueOf((-706.27033483));
      complex8.INF.asin();
      Complex complex9 = complex2.sqrt();
      Complex complex10 = complex9.NaN.subtract(complex6);
      complex10.ONE.subtract(complex5);
      Complex complex11 = complex2.negate();
      Complex.valueOf(5.8015881615938497E-8);
      complex11.INF.atan();
      complex1.tanh();
      Complex complex12 = complex6.subtract(complex3);
      complex3.exp();
      Complex complex13 = complex12.negate();
      complex13.sinh();
      complex10.createComplex(Double.NaN, (-706.27033483));
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      complex0.readResolve();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3543.173693747), (-8.689594184775204E146));
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.sqrt();
      complex1.ZERO.multiply(complex0);
      Complex complex3 = complex2.sqrt();
      complex3.ONE.tanh();
      Complex complex4 = Complex.valueOf(1564.473875020008, (-2.4459827842685974E-8));
      complex4.subtract((-2.4459827842685974E-8));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = complex0.ZERO.add(complex1);
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = complex3.ZERO.subtract(complex2);
      Complex complex6 = complex5.ZERO.multiply(941);
      complex6.ONE.pow(complex5);
      Complex complex7 = complex0.I.tan();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex7.INF.cosh();
      Complex complex10 = complex0.I.conjugate();
      complex0.ZERO.getField();
      complex0.divide((-1275.6888485353393));
      complex0.getField();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex10.acos();
      complex12.NaN.pow(805.0);
      Complex complex13 = complex12.I.cosh();
      complex13.ZERO.conjugate();
      Complex complex14 = complex11.divide(complex2);
      complex14.ONE.sqrt();
      complex10.isInfinite();
      complex9.cos();
      Complex complex15 = complex9.reciprocal();
      complex15.getField();
      complex4.hashCode();
      complex11.divide(complex8);
      Complex complex16 = complex10.sin();
      complex10.acos();
      complex16.tanh();
      Complex complex17 = new Complex((-1275.6888485353393));
      complex7.divide(complex17);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.pow(2493.0);
      Complex complex2 = complex1.cosh();
      complex2.readResolve();
      Complex complex3 = complex2.INF.divide(complex0);
      complex3.ONE.readResolve();
      Complex complex4 = complex0.I.tanh();
      Complex complex5 = complex4.ONE.acos();
      complex5.ONE.pow(complex4);
      complex0.isNaN();
      Complex complex6 = complex4.ONE.add(complex5);
      Complex complex7 = complex4.cosh();
      complex4.getField();
      complex7.tan();
      Complex complex8 = complex0.pow(687.2191147);
      complex8.NaN.pow(0.10818853974342346);
      complex6.isNaN();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tanh();
      complex0.ONE.getField();
      Complex complex2 = complex0.NaN.multiply((-1660));
      complex0.INF.abs();
      complex0.isInfinite();
      complex1.I.hashCode();
      Complex complex3 = complex0.ONE.multiply((-1660));
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf(1.7622455019548098E-8, 3.4284156709489884E181);
      complex5.INF.readResolve();
      complex4.I.toString();
      Complex complex6 = complex0.subtract((double) (-1660));
      complex1.I.divide(complex0);
      Complex complex7 = complex6.ZERO.cosh();
      complex7.ZERO.getField();
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex4.ZERO.log();
      Object object0 = complex0.readResolve();
      Complex complex11 = complex1.log();
      complex11.NaN.exp();
      Complex complex12 = Complex.valueOf((double) (-1660));
      complex8.multiply((-1660));
      Complex complex13 = complex11.I.asin();
      complex13.add(complex12);
      Complex complex14 = complex8.divide(complex3);
      complex14.ONE.conjugate();
      complex8.isNaN();
      complex1.toString();
      complex0.getReal();
      complex9.add(complex11);
      complex10.equals(object0);
      complex13.readResolve();
      Complex complex15 = Complex.NaN;
      complex14.pow(complex15);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.INF.multiply(1);
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = Complex.valueOf(1877.4168844001426, 1877.4168844001426);
      Complex complex4 = complex2.ZERO.tan();
      complex0.abs();
      Complex complex5 = complex4.ZERO.subtract((-1473.6187684905));
      Complex complex6 = complex5.ZERO.acos();
      complex4.I.getArgument();
      Complex complex7 = complex5.ZERO.reciprocal();
      Complex complex8 = complex7.NaN.sqrt1z();
      complex0.getReal();
      complex2.reciprocal();
      complex2.pow(Double.POSITIVE_INFINITY);
      complex4.divide(0.0);
      complex4.pow(complex3);
      complex4.tan();
      complex4.subtract(complex6);
      complex0.hashCode();
      Complex complex9 = complex8.subtract(complex3);
      complex8.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.pow(complex0);
      complex2.ONE.hashCode();
      Complex complex3 = complex2.ONE.sinh();
      complex3.ZERO.atan();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.add(0.0);
      Complex complex6 = complex4.I.multiply(10);
      Complex complex7 = complex6.I.pow(complex2);
      complex4.hashCode();
      complex1.multiply((-1427));
      complex4.getImaginary();
      Complex complex8 = complex2.multiply(complex1);
      complex8.NaN.subtract((double) (-1427));
      Complex.valueOf(2.0);
      Complex complex9 = complex8.pow(0.0);
      Complex complex10 = complex7.pow(complex8);
      complex10.ONE.acos();
      complex5.sinh();
      Complex complex11 = complex4.multiply((-1));
      complex9.NaN.sqrt1z();
      complex1.pow(complex5);
      Complex complex12 = complex9.conjugate();
      complex11.tanh();
      complex6.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex0.atan();
      complex4.isNaN();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex6.sinh();
      complex0.multiply(1);
      Complex complex8 = Complex.valueOf((-154.16712527824293), 0.0);
      complex8.divide(complex3);
      Complex complex9 = Complex.valueOf(0.0, (double) 1);
      complex9.ZERO.getArgument();
      complex0.isNaN();
      complex7.add(5.399227989109673E44);
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-316.7042), 0.0);
      complex0.getReal();
      Complex complex1 = new Complex((-316.7042));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = complex4.NaN.multiply(complex0);
      complex4.NaN.getField();
      assertEquals((-0.8813735870195429), complex4.getImaginary(), 0.01);
      
      complex3.I.negate();
      Complex complex6 = complex3.ZERO.reciprocal();
      Complex complex7 = complex2.ZERO.subtract(535.11003597);
      complex3.nthRoot(797);
      List<Complex> list0 = complex3.nthRoot(1769);
      assertEquals(1769, list0.size());
      
      Complex complex8 = complex3.negate();
      Complex complex9 = complex8.I.asin();
      assertEquals(0.8813735870195428, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex2.INF.add(complex8);
      Complex complex11 = complex3.I.cos();
      complex11.subtract(complex7);
      Complex complex12 = complex3.divide(complex1);
      complex6.toString();
      assertSame(complex6, complex5);
      
      Object object0 = complex7.readResolve();
      Complex complex13 = complex2.sqrt();
      assertEquals(316.7042, complex13.getReal(), 0.01);
      
      Complex complex14 = complex11.multiply(complex2);
      complex10.add((-2717.0));
      Complex complex15 = complex1.divide((-1792.325922740792));
      double double0 = complex15.getImaginary();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex16 = complex14.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.equals((Object)object0));
      assertTrue(complex1.equals((Object)complex12));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3910.88971747739), (-3910.88971747739));
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.I.pow((-3910.88971747739));
      complex3.ZERO.exp();
      Complex complex4 = complex0.log();
      complex4.ZERO.log();
      Complex complex5 = complex4.ZERO.add(complex0);
      complex5.NaN.add(0.0);
      Complex complex6 = complex5.INF.subtract((-3910.88971747739));
      Complex complex7 = complex6.NaN.log();
      String string0 = complex7.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex3.ZERO.hashCode();
      Complex complex8 = complex0.reciprocal();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex3.log();
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      complex0.getReal();
      String string1 = complex3.toString();
      assertEquals("(-0.17236626054782234, 0.9850329295128971)", string1);
      
      Complex complex10 = complex7.exp();
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertNotSame(complex10, complex2);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertTrue(complex10.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex8));
      
      complex0.isInfinite();
      assertTrue(complex0.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3519763946533203);
      complex0.ONE.getField();
      double double0 = complex0.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex1 = complex0.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.INF.subtract((-87.864584703775));
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex2.createComplex(0.3519763946533203, (-2600.4391909057));
      Complex complex6 = complex5.ZERO.sqrt1z();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.multiply(complex1);
      complex7.INF.toString();
      Complex complex8 = complex1.add(complex0);
      Complex complex9 = complex1.subtract(complex2);
      boolean boolean0 = complex9.isNaN();
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertTrue(boolean0);
      
      Complex complex10 = complex2.pow(complex8);
      assertFalse(complex8.isNaN());
      assertNotSame(complex10, complex3);
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(419.92422592991);
      Complex complex2 = complex0.multiply(complex1);
      assertEquals(419.92422592991, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.createComplex(419.92422592991, 419.92422592991);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.isInfinite());
      assertEquals(419.92422592991, complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(116.5429);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      complex2.INF.toString();
      Complex complex3 = complex0.ONE.pow(116.5429);
      Complex complex4 = complex1.ZERO.log();
      complex4.INF.subtract(complex1);
      complex4.INF.exp();
      complex1.getImaginary();
      int int0 = (-1367);
      Complex complex5 = complex0.multiply((-1367));
      complex5.INF.pow(1095.785);
      complex3.INF.cosh();
      Complex complex6 = complex0.multiply(3176.2);
      try { 
        complex6.NaN.nthRoot((-1367));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,367
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4234.075462047069, (-1891.937824962));
      complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.NaN.sin();
      complex2.ZERO.conjugate();
      Complex complex3 = complex1.exp();
      complex3.INF.multiply((-1891.937824962));
      try { 
        complex0.nthRoot((-1558));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,558
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
