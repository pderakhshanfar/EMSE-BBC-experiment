/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:58:44 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(751.15, Double.POSITIVE_INFINITY);
      complex1.nthRoot(1767);
      Complex complex2 = complex1.multiply((-7.340587186324432E-93));
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = Complex.INF;
      complex4.sqrt();
      complex2.multiply((-105));
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1.3677729802316034E227);
      Complex complex2 = new Complex(1.3677729802316034E227);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.multiply(821);
      complex5.hashCode();
      complex0.cos();
      complex5.nthRoot(1374);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide((-2.615122349175659E113));
      Complex complex1 = Complex.valueOf((-935.4034054183593), 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(9.45732984079136E214, 9.45732984079136E214);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.ONE.tanh();
      complex1.I.divide((-2712.26687176));
      complex1.INF.multiply(1445);
      complex2.ZERO.abs();
      Complex complex5 = complex1.acos();
      complex5.ONE.sqrt1z();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex0.I.subtract(complex2);
      complex6.divide(0.0);
      complex4.subtract(9.45732984079136E214);
      complex3.toString();
      complex7.sin();
      complex4.pow(9.45732984079136E214);
      complex2.pow((-2616.2230029632133));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.divide(1.3677729802316034E227);
      Complex complex2 = complex0.multiply(complex1);
      complex2.nthRoot(1);
      Complex complex3 = Complex.valueOf(1.3677729802316034E227);
      Complex complex4 = complex3.multiply((-826.617162594323));
      complex4.ONE.exp();
      Complex complex5 = complex4.asin();
      complex5.tan();
      complex0.createComplex((-1866.534327709), 1.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(3.4674011002723395, 4452.629125);
      Complex complex2 = new Complex(4452.629125);
      complex0.multiply(complex1);
      complex2.NaN.conjugate();
      complex1.pow(2993.928405);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2831.6587, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(1.0836189449037192E-4);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.I.divide(1.0836189449037192E-4);
      Complex complex4 = complex0.multiply(complex2);
      complex4.INF.getArgument();
      complex1.sqrt();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 1.3677729802316034E227;
      Complex complex0 = Complex.valueOf(1.3677729802316034E227, (-20.0));
      complex0.I.getArgument();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.81348529316017E-8, 2814.649003);
      Complex complex1 = new Complex(2814.649003);
      complex1.pow(complex0);
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.NaN.pow(complex2);
      Complex.valueOf(415.3437202242346, 2814.649003);
      Complex complex3 = Complex.valueOf(5.81348529316017E-8);
      Complex complex4 = complex3.NaN.log();
      complex2.atan();
      complex0.I.hashCode();
      complex4.ONE.getArgument();
      complex4.I.add(complex0);
      complex0.ONE.nthRoot(7);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex2.multiply(complex0);
      complex6.I.tan();
      Complex complex7 = complex0.cosh();
      complex5.sin();
      complex4.toString();
      Complex.valueOf((-1054.829603834663), (-1054.829603834663));
      complex3.subtract(5.81348529316017E-8);
      complex4.add(complex1);
      complex7.negate();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 3521.1844456212166);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.INF.add(20.0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(3.436860020483706E-308);
      complex1.I.toString();
      Complex complex5 = complex0.subtract((double) 33);
      Complex complex6 = complex5.createComplex((-479.0), 1.0762251933089556E165);
      complex6.I.sqrt();
      complex2.multiply(33);
      complex0.divide(complex4);
      complex4.multiply((-8.697455602402626E-4));
      complex1.ZERO.divide((double) 33);
      complex3.negate();
      complex2.atan();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.conjugate();
      Complex complex2 = new Complex((-399.0));
      complex2.readResolve();
      Complex.valueOf((double) 1323);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.ONE;
      complex5.readResolve();
      complex1.abs();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex2.createComplex(6.283185307179586, (-614533.9054436882));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.subtract(complex1);
      complex1.sqrt();
      complex2.toString();
      Complex complex3 = complex0.divide((-603.608865374));
      complex1.acos();
      complex1.tanh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
      complex1.log();
      Complex.valueOf(20.0, 20.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.conjugate();
      Complex complex4 = new Complex(20.0);
      Complex complex5 = (Complex)complex3.readResolve();
      Complex.valueOf(3.4674011002723395);
      Complex complex6 = complex3.multiply(complex4);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = (Complex)complex6.readResolve();
      complex8.abs();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex5.createComplex(975.90423, 20.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex0.getField();
      complex0.getField();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.conjugate();
      Complex complex7 = new Complex((-20.0));
      complex7.readResolve();
      Complex.valueOf((-2.5309316441333305E-8));
      Complex complex8 = complex7.multiply(complex0);
      Complex complex9 = Complex.ZERO;
      complex4.readResolve();
      Complex complex10 = new Complex((-20.0));
      complex0.I.sqrt();
      complex8.acos();
      complex8.nthRoot(1232);
      complex8.tan();
      complex6.subtract((double) 12);
      complex5.multiply(complex1);
      complex6.multiply((-450));
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2841.0359));
      complex0.ONE.subtract(complex1);
      complex0.abs();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex0.getField();
      complex0.getField();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.subtract(complex3);
      complex6.INF.acos();
      complex4.sqrt();
      complex5.toString();
      complex1.divide((-20.0));
      complex5.abs();
      Complex complex7 = complex3.sqrt();
      complex7.ONE.sinh();
      complex2.readResolve();
      complex0.acos();
      complex1.tanh();
      Complex complex8 = Complex.valueOf((-20.0));
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1405.9305796231);
      complex0.getField();
      complex0.NaN.getField();
      complex0.ZERO.subtract(complex0);
      Complex complex1 = complex0.INF.log();
      complex1.ONE.multiply(373);
      Complex complex2 = complex0.subtract(complex0);
      Complex complex3 = complex2.INF.sqrt();
      complex0.toString();
      Complex complex4 = complex1.divide((-603.608865374));
      complex2.abs();
      Complex complex5 = complex0.sqrt();
      complex5.ONE.exp();
      complex1.readResolve();
      complex1.acos();
      complex4.tanh();
      Complex complex6 = Complex.NaN;
      complex3.cosh();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.atan();
      complex0.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.I.cosh();
      complex0.INF.sin();
      complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(1405.4697626702764);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.pow(1405.4697626702764);
      Complex complex3 = complex2.divide(431.733061795);
      Complex complex4 = complex0.INF.multiply(complex1);
      Complex complex5 = complex4.I.subtract(complex2);
      Complex.valueOf(431.733061795, 1405.4697626702764);
      complex2.toString();
      Complex complex6 = Complex.valueOf((-3282159.655674621));
      complex6.multiply(complex5);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.subtract(1405.4697626702764);
      Complex complex10 = complex7.ONE.acos();
      complex7.ONE.atan();
      complex7.ZERO.nthRoot(7);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex1.pow(1.6023339607737848E-7);
      complex12.I.multiply(complex10);
      complex12.ZERO.nthRoot(7);
      Complex complex13 = complex1.tan();
      complex13.ONE.getField();
      Complex complex14 = complex4.sin();
      complex13.sqrt1z();
      complex11.sinh();
      complex3.multiply((-314.900163493913));
      complex9.cos();
      Complex complex15 = complex5.pow(complex14);
      complex15.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide(1.3677729802316034E227);
      complex1.I.reciprocal();
      Complex.valueOf(2.0);
      Complex complex2 = Complex.ONE;
      complex1.negate();
      complex2.toString();
      Complex complex3 = Complex.valueOf(1.3677729802316034E227, 1.3677729802316034E227);
      complex1.pow(complex3);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex0.getField();
      complex0.getField();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex0.sqrt();
      complex5.I.conjugate();
      Complex complex6 = new Complex((-20.0));
      complex6.readResolve();
      Complex.valueOf(Double.NaN);
      complex3.multiply(complex0);
      Complex complex7 = Complex.ZERO;
      complex2.readResolve();
      Complex complex8 = complex0.acos();
      complex7.nthRoot(12);
      complex2.tan();
      complex1.subtract(Double.NaN);
      Complex complex9 = Complex.INF;
      complex8.multiply(complex2);
      complex4.multiply((-1563));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.NaN;
      complex4.toString();
      Complex.valueOf((-1404.9305796231), (-20.0));
      complex3.abs();
      Complex complex5 = new Complex((-20.0), Double.NaN);
      complex4.readResolve();
      Complex.valueOf((-1085.0));
      complex5.add(complex3);
      Complex complex6 = Complex.ZERO;
      complex6.acos();
      try { 
        complex6.nthRoot((-2498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,498
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1405.9305796231, 438.7962350199);
      complex0.getField();
      complex0.NaN.getField();
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.subtract(complex0);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex3.sqrt();
      complex4.toString();
      complex0.divide((-2893.1721170834344));
      complex3.abs();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = Complex.valueOf(438.7962350199, 438.7962350199);
      complex6.readResolve();
      complex4.acos();
      complex4.tanh();
      complex5.acos();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-103.48224332));
      Complex complex2 = new Complex(2.0, 2.0);
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex3.sqrt();
      complex1.getArgument();
      Complex complex5 = Complex.ZERO;
      complex2.log();
      Complex complex6 = complex4.subtract(complex0);
      complex6.sqrt();
      complex6.toString();
      complex1.divide(159.146);
      complex6.abs();
      complex4.sqrt();
      complex6.readResolve();
      Complex complex7 = complex4.acos();
      complex6.tanh();
      complex7.acos();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.divide(1.3677729802316034E227);
      complex1.I.reciprocal();
      Complex complex2 = complex1.divide((-2201.64586));
      complex2.multiply(24);
      Complex complex3 = Complex.valueOf((-19.0));
      complex3.nthRoot(711);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1405.9305796231);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.atan();
      complex0.I.toString();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex3.I.acos();
      Complex complex5 = Complex.valueOf((-2228.0), (-1.4677321100833294E199));
      complex5.INF.readResolve();
      Complex.valueOf((-1.4677321100833294E199), 544.13842456265);
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.NaN.add(complex2);
      Complex complex8 = complex1.pow((-1.4677321100833294E199));
      Complex complex9 = complex2.ZERO.cosh();
      Complex complex10 = complex9.ZERO.cosh();
      Complex complex11 = Complex.valueOf(1280.8944797, (-1670.3729867890677));
      Complex complex12 = complex11.sinh();
      complex2.abs();
      complex12.toString();
      complex8.nthRoot(1239);
      complex1.sqrt1z();
      complex8.add(complex10);
      complex8.atan();
      complex11.add(complex7);
      complex4.subtract(complex7);
      complex1.multiply((-2228.0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-4.0151502150238136E-8));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.divide(1.3677729802316034E227);
      Complex complex3 = complex2.ZERO.multiply(24);
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = Complex.valueOf((-4.0151502150238136E-8));
      complex3.INF.pow(complex5);
      complex0.getReal();
      complex5.nthRoot(3957);
      complex4.subtract((double) 3957);
      Complex complex6 = Complex.INF;
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(3035.38);
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sinh();
      complex1.equals(complex0);
      Complex complex3 = complex0.multiply(complex2);
      complex3.atan();
      complex1.divide(0.886226925452758);
      complex1.getImaginary();
      complex0.add(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.pow(complex1);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(2.0121798515319824);
      Complex complex1 = complex0.ONE.divide(2.0121798515319824);
      complex1.INF.sin();
      complex0.INF.abs();
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = Complex.valueOf(2.0121798515319824);
      Complex complex4 = complex1.divide((-1233.644506434638));
      Complex complex5 = complex2.INF.pow(2.0121798515319824);
      complex0.getField();
      complex0.sqrt();
      complex5.sinh();
      complex0.exp();
      complex4.ZERO.createComplex(2.0121798515319824, (-1.0));
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex3.pow((-1.0));
      complex8.INF.sinh();
      complex1.nthRoot(1457);
      Complex complex9 = complex6.createComplex(3572.745, 3572.745);
      complex9.I.tanh();
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex4.multiply(1457);
      complex10.exp();
      complex7.tan();
      Complex complex12 = complex5.subtract(complex11);
      complex4.subtract(complex12);
      complex11.pow(Double.POSITIVE_INFINITY);
      complex9.multiply(3572.745);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-4.0151502150238136E-8));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.divide((-1761.70140506201));
      Complex complex3 = complex2.ZERO.multiply(0);
      Complex complex4 = Complex.valueOf(525.22997161377, 1.5019976899566245E-4);
      complex2.getField();
      Complex complex5 = new Complex((-4153.067873688133), (-1176.652127));
      complex5.getArgument();
      complex5.subtract(complex1);
      Complex complex6 = complex3.log();
      Complex complex7 = Complex.valueOf((-4153.067873688133));
      complex5.subtract(complex7);
      Complex complex8 = complex6.sqrt();
      complex4.toString();
      Complex complex9 = complex0.divide(525.22997161377);
      complex9.abs();
      complex6.sqrt();
      complex4.readResolve();
      complex0.acos();
      Complex complex10 = Complex.valueOf(2.0);
      Complex complex11 = complex10.tanh();
      complex8.acos();
      Complex complex12 = Complex.ONE;
      complex12.cosh();
      complex2.pow(complex11);
      complex4.cosh();
      complex12.equals("rS3eUx?\"");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-736.3992551), (-736.3992551));
      complex0.getField();
      complex0.getArgument();
      Complex complex2 = complex0.log();
      complex1.subtract(complex2);
      Complex.valueOf(0.0);
      Complex complex3 = new Complex((-736.3992551), 0.0);
      complex3.toString();
      Complex complex4 = complex3.divide((-736.3992551));
      complex1.abs();
      Complex complex5 = complex1.sqrt();
      complex4.readResolve();
      Complex complex6 = complex2.acos();
      complex3.tanh();
      Complex complex7 = complex5.acos();
      Complex complex8 = Complex.INF;
      complex8.nthRoot(917);
      complex1.tan();
      complex7.subtract((-603.608865374));
      Complex complex9 = Complex.NaN;
      complex9.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex2.sqrt();
      complex2.toString();
      complex4.abs();
      complex2.sqrt();
      complex4.readResolve();
      complex3.NaN.readResolve();
      Complex complex5 = complex2.tanh();
      complex3.acos();
      complex5.nthRoot(37);
      Complex complex6 = complex3.tan();
      complex6.subtract((-3025.0));
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1405.9305796231, 438.7962350199);
      complex0.getField();
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.ONE;
      complex2.getField();
      complex0.nthRoot(17);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sinh();
      complex0.equals(complex1);
      complex0.multiply(complex0);
      complex4.divide(4422.1962774381755);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(7.251548346906463E162, (-1.0));
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.divide((-3883.4));
      Complex complex4 = complex0.multiply(0);
      Complex complex5 = Complex.valueOf((double) 0);
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = new Complex(341.509259952852, (-676.0));
      complex7.getReal();
      Complex complex8 = complex1.negate();
      complex0.toString();
      Complex complex9 = complex0.pow(complex8);
      complex2.sqrt();
      Complex complex10 = complex4.add(complex5);
      Complex complex11 = complex3.tan();
      complex10.subtract(complex8);
      Complex complex12 = complex11.atan();
      Complex complex13 = complex6.negate();
      complex2.log();
      complex9.getField();
      complex1.atan();
      complex12.divide(0.0);
      complex0.negate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(1.1340476362128895E-7, 0.0);
      Complex complex1 = complex0.multiply((-1514));
      Complex complex2 = complex1.sqrt();
      complex2.toString();
      complex0.getField();
      Complex complex3 = complex1.reciprocal();
      complex2.sqrt();
      complex0.sin();
      Complex.valueOf(Double.NaN, (-2092.751));
      complex0.reciprocal();
      complex3.reciprocal();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex2.equals(complex0);
      Complex complex4 = complex3.acos();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.subtract(complex1);
      complex2.INF.hashCode();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.acos();
      complex4.INF.toString();
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.INF;
      complex6.ONE.atan();
      Complex complex7 = complex3.pow(complex4);
      complex7.NaN.cos();
      Complex complex8 = complex5.tanh();
      complex6.acos();
      Complex complex9 = new Complex(854.0493154354, 665.9115306449477);
      complex9.tan();
      complex6.add(665.9115306449477);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.hashCode();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.subtract(complex3);
      complex3.sqrt();
      complex2.toString();
      complex2.divide((-2377.15024));
      complex2.abs();
      Complex complex5 = new Complex((-2377.15024));
      complex5.sqrt();
      complex4.readResolve();
      complex0.acos();
      complex1.tanh();
      complex0.acos();
      complex3.nthRoot(37);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.hashCode();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.I.conjugate();
      complex0.divide(complex1);
      Complex complex4 = complex1.cos();
      complex3.hashCode();
      Complex complex5 = complex1.subtract(0.0);
      complex0.nthRoot(1);
      Complex complex6 = complex0.reciprocal();
      complex4.add((-1405.9305796231));
      Complex complex7 = complex0.add((-1405.9305796231));
      complex2.negate();
      complex1.getField();
      complex1.pow((-20.0));
      Complex complex8 = complex7.acos();
      complex8.NaN.asin();
      complex5.subtract(1.5386705603205542);
      Complex complex9 = complex6.atan();
      complex6.reciprocal();
      Complex complex10 = new Complex(2.7593452284747873E-8, 1733.9868991701);
      complex10.cosh();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.subtract(complex1);
      complex2.INF.hashCode();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.acos();
      complex5.INF.toString();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex4.multiply(complex3);
      Complex complex8 = complex7.ONE.atan();
      complex6.getArgument();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.subtract(complex5);
      complex5.log();
      Complex complex11 = Complex.valueOf((-0.8386267705115997));
      complex10.subtract(complex11);
      Complex complex12 = complex0.sqrt();
      complex12.toString();
      complex9.divide((-0.8386267705115997));
      complex1.abs();
      Complex complex13 = new Complex(1.1752011936438014, (-0.8386267705115997));
      Complex complex14 = Complex.I;
      complex14.readResolve();
      complex8.acos();
      complex8.tanh();
      complex10.acos();
      complex5.nthRoot(1277);
      Complex complex15 = new Complex(37);
      complex15.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1405.9305796231, 438.7962350199);
      complex0.getField();
      Complex complex1 = Complex.valueOf(1405.9305796231, (-736.3992551));
      complex1.NaN.getField();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.multiply(1872);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex3.multiply(complex0);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex7.negate();
      complex10.abs();
      Complex complex11 = new Complex(1813.686187);
      Object object0 = new Object();
      complex4.equals(object0);
      complex0.atan();
      complex0.sqrt();
      Complex complex12 = complex9.negate();
      complex8.toString();
      complex12.getField();
      complex3.cos();
      complex6.tanh();
      Complex complex13 = Complex.valueOf(0.41997434161402614, (-3.1305705497720186E-61));
      complex13.isInfinite();
      complex6.isNaN();
      complex12.isNaN();
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1405.9305796231, 438.7962350199);
      complex0.getField();
      Complex.valueOf((-736.3992551), (-4332.8185942808295));
      Complex complex1 = Complex.I;
      complex1.getField();
      complex1.getArgument();
      Complex complex2 = Complex.NaN;
      complex2.subtract(complex0);
      Complex complex3 = complex0.log();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.subtract(complex2);
      complex0.sqrt();
      complex3.toString();
      Complex complex6 = complex3.divide(6.283185307179586);
      complex2.abs();
      complex5.sqrt();
      complex1.readResolve();
      complex1.acos();
      complex6.tanh();
      complex5.acos();
      complex0.nthRoot(37);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.INF.acos();
      complex0.INF.log();
      complex1.ZERO.multiply(2434);
      complex0.cosh();
      Complex complex2 = null;
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.subtract(complex1);
      complex2.INF.hashCode();
      complex0.tanh();
      Complex complex3 = complex0.acos();
      complex3.INF.toString();
      int int0 = 2145265481;
      // Undeclared exception!
      complex2.nthRoot(2145265481);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.divide((-1761.70140506201));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.multiply((-1215));
      Complex complex5 = Complex.valueOf(154.3);
      complex5.pow(complex0);
      complex2.getReal();
      Complex complex6 = complex0.negate();
      complex5.toString();
      Complex complex7 = complex3.pow(complex6);
      complex2.nthRoot(2371);
      Complex complex8 = complex6.sqrt();
      complex7.add(complex2);
      Complex complex9 = complex4.tan();
      complex2.subtract(complex6);
      Complex complex10 = complex8.atan();
      complex1.negate();
      complex3.log();
      complex10.getField();
      complex9.atan();
      complex0.divide(1111.47);
      Complex complex11 = Complex.ONE;
      complex11.negate();
      Complex.valueOf((-1761.70140506201));
      complex1.isInfinite();
      complex1.pow(complex7);
      complex8.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(1405.9305796231, 438.7962350199);
      complex0.getField();
      Complex complex1 = Complex.valueOf(1405.9305796231, (-736.3992551));
      complex1.NaN.getField();
      complex0.ONE.getArgument();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.sqrt();
      complex0.toString();
      Complex complex5 = complex2.divide((-603.608865374));
      complex3.abs();
      Complex complex6 = complex0.sqrt();
      complex2.readResolve();
      complex2.acos();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex3.acos();
      complex0.nthRoot(37);
      complex6.tan();
      complex7.subtract((-1.0356006160554071E245));
      complex8.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-103.48224332));
      complex0.equals((Object) null);
      Complex complex2 = complex0.conjugate();
      complex0.pow((double) 3044);
      complex1.abs();
      Complex complex3 = complex1.add((-1344.727));
      complex3.atan();
      complex1.divide(complex3);
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.multiply(2434);
      int int0 = 1042;
      complex3.nthRoot(1042);
      complex4.readResolve();
      complex5.toString();
      Complex complex6 = complex1.multiply((-935.797084));
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.divide(complex4);
      complex8.atan();
      complex3.getReal();
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-4.0151502150238136E-8));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.divide((-1761.70140506201));
      Complex complex3 = complex2.ZERO.multiply(0);
      complex3.nthRoot(1042);
      Object object0 = new Object();
      complex2.toString();
      Complex complex4 = complex0.multiply(6.283185307179586);
      complex0.asin();
      complex2.divide(complex3);
      Complex complex5 = Complex.NaN;
      complex5.atan();
      Complex complex6 = Complex.ONE;
      complex6.getReal();
      Complex complex7 = new Complex(0, 6.283185307179586);
      Complex complex8 = Complex.I;
      Complex complex9 = complex7.subtract(complex8);
      complex9.add(complex0);
      Complex.valueOf((-39.97498435543818), 1.9256689548492432);
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.ZERO;
      complex10.divide(complex11);
      complex4.isNaN();
      complex7.toString();
      Complex complex12 = Complex.I;
      complex12.sqrt();
      Complex complex13 = Complex.I;
      complex10.divide(complex13);
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-2402.20969093), (-2402.20969093));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = new Complex(0.0);
      complex3.NaN.divide(0.0);
      Complex complex4 = Complex.valueOf((-2402.20969093));
      Complex complex5 = complex4.ZERO.tanh();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = Complex.INF;
      complex6.equals(complex1);
      complex4.equals(complex7);
      Complex complex8 = complex3.tanh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex(0.0);
      Complex complex11 = Complex.I;
      complex11.tan();
      complex8.add((-2012.473260179));
      complex5.reciprocal();
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.hashCode();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.I.conjugate();
      complex0.divide(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.conjugate();
      complex5.pow((-1344.727));
      complex2.abs();
      complex1.add(Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex(Double.NaN);
      complex6.atan();
      complex4.divide(complex3);
      complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf((-1.0), (-75.0));
      Complex complex2 = complex1.INF.cosh();
      complex1.ZERO.abs();
      Complex complex3 = complex2.sqrt();
      complex3.tan();
      Complex complex4 = complex2.ONE.multiply(complex0);
      complex2.ZERO.hashCode();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.exp();
      complex6.ONE.getArgument();
      complex0.readResolve();
      complex1.hashCode();
      Complex complex7 = complex6.divide(complex5);
      complex0.INF.abs();
      complex4.log();
      complex5.I.abs();
      complex6.subtract(complex5);
      complex4.INF.exp();
      complex6.ZERO.createComplex((-4532.9607191577), (-1.0));
      complex7.NaN.pow((-4532.9607191577));
      complex6.readResolve();
      complex7.abs();
      complex4.getArgument();
      complex1.add(0.0);
      complex0.conjugate();
      complex6.tanh();
      Complex.valueOf((-1.1345515834332824E-7), 0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      complex0.isInfinite();
      Complex complex2 = complex0.acos();
      complex2.I.readResolve();
      complex2.ZERO.nthRoot(1);
      complex0.getArgument();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex1.sqrt();
      complex5.ONE.add(1415.04343834466);
      Complex.valueOf((-1358.0));
      complex2.atan();
      Complex complex6 = Complex.valueOf(253.2190943, (-20.0));
      complex4.conjugate();
      Complex complex7 = complex1.multiply(complex3);
      complex7.ZERO.subtract(0.0);
      complex6.sin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.2298267863810133E-8));
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.hashCode();
      complex1.ZERO.multiply(3207);
      complex0.I.readResolve();
      Complex complex2 = complex0.negate();
      complex2.NaN.readResolve();
      Complex complex3 = complex2.ONE.pow(complex0);
      complex2.sinh();
      complex0.acos();
      Complex complex4 = complex1.conjugate();
      Complex.valueOf((-881.3300196));
      Complex complex5 = complex2.INF.acos();
      complex2.asin();
      complex4.toString();
      complex2.acos();
      complex3.acos();
      Complex.valueOf((-1117.82098), (double) 3207);
      int int0 = 0;
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.toString();
      Complex complex1 = complex0.NaN.sinh();
      complex1.ONE.multiply((-1));
      complex1.I.getField();
      Complex complex2 = complex1.ZERO.cosh();
      complex0.getArgument();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.I.subtract(0.0);
      complex0.NaN.subtract(20.0);
      complex3.toString();
      Complex complex5 = complex0.cosh();
      complex5.nthRoot(1);
      Complex complex6 = complex5.NaN.multiply(20.0);
      Complex complex7 = new Complex(20.0);
      complex5.ONE.divide(complex7);
      complex4.cosh();
      complex4.INF.log();
      Complex complex8 = complex4.ONE.cos();
      complex8.INF.hashCode();
      Complex complex9 = complex8.ONE.subtract(20.0);
      complex7.nthRoot(1);
      complex4.I.reciprocal();
      complex3.I.add(20.0);
      complex2.add(20.0);
      Complex complex10 = complex4.negate();
      complex10.INF.getField();
      Complex complex11 = complex7.pow(20.0);
      complex11.acos();
      Complex complex12 = complex11.subtract((double) 1);
      complex6.atan();
      complex12.reciprocal();
      complex5.cosh();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.add(0.0);
      Complex complex3 = complex1.log();
      complex3.pow((-1.0));
      complex3.ZERO.getField();
      Complex complex4 = complex0.sinh();
      complex4.NaN.atan();
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = complex5.cosh();
      complex6.equals(", ");
      complex0.INF.divide(complex2);
      complex1.NaN.tanh();
      complex0.equals(complex3);
      complex4.ONE.acos();
      Complex complex7 = complex4.divide(0.0);
      complex0.ONE.getArgument();
      complex7.toString();
      Complex complex8 = complex3.multiply((-1.0));
      complex8.readResolve();
      complex8.atan();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getArgument();
      complex0.I.abs();
      complex0.getImaginary();
      Complex complex1 = new Complex(1.0, 0.0);
      complex0.ONE.exp();
      Complex complex2 = complex0.subtract(complex1);
      complex2.ONE.createComplex(0.0, 78.48);
      complex0.hashCode();
      complex2.ONE.getArgument();
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.sinh();
      complex4.reciprocal();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.hashCode();
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex1.INF.atan();
      complex2.I.conjugate();
      complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      complex1.equals(complex3);
      Complex complex4 = complex1.tanh();
      complex4.acos();
      complex0.tan();
      complex0.add(0.0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(195);
      complex0.I.toString();
      complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex1.INF.sinh();
      complex0.equals((Object) null);
      Complex complex3 = complex2.cos();
      complex1.I.toString();
      complex3.INF.negate();
      complex1.abs();
      complex1.add(0.0);
      complex2.hashCode();
      complex0.divide((-1626.816169));
      complex3.cosh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      complex0.isNaN();
      Complex complex1 = complex0.acos();
      complex1.ZERO.log();
      complex1.hashCode();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(572.39, 572.39);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.I.createComplex(572.39, 1401.4404);
      Complex complex4 = complex2.INF.cosh();
      Complex complex5 = complex4.ONE.subtract(complex3);
      Complex.valueOf(572.39, 0.0);
      Complex complex6 = Complex.valueOf(0.0, 1401.4404);
      complex6.INF.pow(572.39);
      complex6.ZERO.hashCode();
      complex4.isInfinite();
      Complex complex7 = complex4.INF.asin();
      complex7.INF.getField();
      complex1.isNaN();
      complex4.readResolve();
      Complex complex8 = complex3.subtract(572.39);
      complex8.NaN.divide(complex7);
      Complex complex9 = complex8.INF.cos();
      complex9.ZERO.toString();
      complex2.abs();
      Complex complex10 = complex5.subtract(complex2);
      complex0.createComplex(0.0, 1624.805627);
      Complex complex11 = complex2.multiply(complex7);
      complex10.asin();
      complex11.isNaN();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1783.0, 1783.0);
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.INF.nthRoot(2643);
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.multiply(3.8072183820435085E293);
      Complex complex4 = complex3.I.sqrt();
      complex3.INF.acos();
      complex4.ZERO.add(1783.0);
      complex4.log();
      Complex complex5 = complex2.I.reciprocal();
      complex0.isInfinite();
      complex0.ZERO.getArgument();
      complex0.abs();
      complex1.sqrt1z();
      Complex complex6 = complex0.I.sqrt1z();
      complex6.ZERO.negate();
      complex5.I.add(0.0);
      Complex complex7 = complex2.sin();
      complex7.abs();
      Complex complex8 = Complex.valueOf(2.147638465376883E-257);
      complex8.reciprocal();
      complex5.atan();
      complex8.conjugate();
      complex6.nthRoot(930);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1405.9305796231, 438.7962350199);
      complex0.getField();
      Complex complex1 = Complex.valueOf(1405.9305796231, (-736.3992551));
      complex1.NaN.getField();
      complex0.ONE.getArgument();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.subtract(complex1);
      complex3.INF.sqrt();
      complex0.toString();
      Complex complex4 = complex2.divide((-603.608865374));
      complex0.abs();
      Complex complex5 = complex4.sqrt();
      complex5.INF.readResolve();
      Complex complex6 = complex3.acos();
      complex6.tanh();
      complex0.acos();
      complex4.nthRoot(37);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.divide((-722.45597004));
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.NaN.pow(complex2);
      Complex complex6 = Complex.valueOf(1970.883, 0.0);
      Complex complex7 = complex4.asin();
      complex7.ZERO.asin();
      complex7.ONE.add(complex5);
      Complex complex8 = complex1.INF.exp();
      complex7.INF.divide(complex6);
      Complex complex9 = complex5.conjugate();
      complex9.INF.sqrt();
      complex2.conjugate();
      Complex complex10 = Complex.valueOf((-1136.6), 1970.883);
      complex10.ZERO.acos();
      complex10.ZERO.pow((-1136.6));
      Complex complex11 = complex7.sqrt();
      complex8.log();
      complex11.atan();
      complex3.isNaN();
      complex6.negate();
      complex2.add((-1130.34785959));
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.subtract(complex1);
      complex3.getField();
      Complex complex4 = complex2.I.pow(2350.182268);
      Complex complex5 = complex0.ONE.add(2.0);
      Complex complex6 = complex1.divide(765.871);
      complex6.ZERO.reciprocal();
      Complex complex7 = complex0.cosh();
      complex3.toString();
      complex0.NaN.add(complex5);
      complex1.nthRoot(17);
      complex6.nthRoot(17);
      complex4.isInfinite();
      Complex complex8 = complex0.sin();
      complex8.INF.reciprocal();
      Complex complex9 = complex8.INF.createComplex(6.238642390386363E-244, 2983.6);
      complex6.toString();
      complex7.getImaginary();
      complex9.divide(6.238642390386363E-244);
      Complex.valueOf(2350.182268, 2.403806217004454E138);
      Complex complex10 = new Complex((-2676.1985111));
      Object object0 = complex10.readResolve();
      complex5.equals(object0);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex0.hashCode();
      Complex complex4 = complex2.pow(complex1);
      complex1.negate();
      Complex complex5 = complex0.ZERO.subtract(0.0);
      Complex complex6 = complex4.INF.multiply(complex0);
      complex6.ONE.hashCode();
      Complex complex7 = complex1.INF.negate();
      complex5.ZERO.toString();
      complex7.ZERO.multiply(0.0);
      complex4.ZERO.multiply(complex5);
      complex4.INF.multiply(1711);
      Complex complex8 = complex0.sqrt1z();
      complex8.I.reciprocal();
      complex4.toString();
      complex3.nthRoot(3574);
      complex1.cos();
      complex0.isInfinite();
      complex0.hashCode();
      complex3.sin();
      complex4.abs();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex1.getField();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.negate();
      complex4.ONE.subtract(complex2);
      complex3.ONE.multiply((-14));
      complex0.isNaN();
      complex2.sqrt();
      complex1.pow(complex0);
      complex0.conjugate();
      Complex complex5 = complex2.sin();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.divide(1032.12);
      complex2.ZERO.nthRoot(351);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.NaN.pow(1032.12);
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex3.NaN.divide(0.0);
      complex6.ZERO.conjugate();
      Complex complex8 = complex7.createComplex(0.0, 1589.06616170428);
      complex0.ONE.readResolve();
      complex6.INF.nthRoot(17);
      Complex complex9 = Complex.valueOf(1032.12);
      complex9.I.add((double) 17);
      Complex complex10 = complex1.reciprocal();
      complex8.ZERO.exp();
      Complex complex11 = complex8.reciprocal();
      complex11.readResolve();
      complex5.getArgument();
      Complex.valueOf(20.0, 20.0);
      Complex complex12 = Complex.valueOf(0.0, Double.NaN);
      complex4.I.createComplex((-948.529693503), Double.NaN);
      complex12.exp();
      complex8.pow(complex10);
      complex4.getArgument();
      complex2.getImaginary();
      complex9.conjugate();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1985.1120907, 1985.1120907);
      Complex complex1 = Complex.valueOf((-1451.2135), (-626.0));
      Complex complex2 = complex0.INF.add(complex1);
      complex2.multiply(37);
      complex0.hashCode();
      Complex complex3 = complex0.reciprocal();
      complex0.equals(complex3);
      complex1.createComplex((-753.7897188), (-753.7897188));
      complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.log();
      complex0.ZERO.cosh();
      Complex complex2 = complex1.ONE.divide(Double.NaN);
      Complex complex3 = complex1.ONE.multiply(3547);
      complex3.ONE.exp();
      complex1.I.subtract(complex0);
      complex2.add((double) 3547);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.sin();
      complex5.abs();
      Complex complex6 = complex5.sqrt1z();
      complex6.INF.multiply(complex0);
      complex5.conjugate();
      complex2.getImaginary();
      complex4.nthRoot(3547);
      Complex complex7 = new Complex(0.0);
      complex3.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(1999.537141356161);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ONE.add(complex0);
      complex0.ZERO.getArgument();
      complex0.getImaginary();
      Complex complex3 = complex0.subtract(0.0);
      complex3.I.sqrt();
      Complex complex4 = complex3.ZERO.atan();
      complex3.pow(0.0);
      complex3.ZERO.log();
      complex3.getImaginary();
      complex4.INF.cosh();
      complex3.NaN.multiply(0.0);
      Complex complex5 = complex4.I.multiply(complex1);
      complex5.NaN.tan();
      Complex complex6 = complex4.tan();
      complex6.INF.getArgument();
      complex3.I.hashCode();
      Complex complex7 = complex3.subtract((-1933.95897507));
      Complex.valueOf(0.0, 0.0);
      complex7.isNaN();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.ZERO.sin();
      complex0.negate();
      Complex complex2 = Complex.valueOf(0.27193373441696167, (-716.0191955657442));
      complex2.ONE.toString();
      complex0.readResolve();
      complex0.equals("the Poisson mean must be positive ({0})");
      Complex complex3 = complex0.add((-2019.211396243));
      Complex complex4 = complex3.ONE.tanh();
      complex4.I.conjugate();
      complex0.hashCode();
      complex0.INF.getField();
      Complex complex5 = complex0.add((-3095.013));
      Complex complex6 = Complex.valueOf((-2019.211396243), (-2019.211396243));
      Complex complex7 = complex6.I.divide((-716.0191955657442));
      complex7.createComplex((-2281.44927598), (-716.0191955657442));
      complex4.add((-2019.211396243));
      complex3.isInfinite();
      complex5.hashCode();
      Complex.valueOf(3936.178513774755);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.I.acos();
      Complex complex2 = complex0.sin();
      complex2.INF.add(0.0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.multiply(0.0);
      complex4.add(0.0);
      Complex complex5 = Complex.INF;
      complex3.add(complex5);
      complex4.cos();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getField();
      Complex complex1 = complex0.exp();
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.asin();
      Complex.valueOf(0.0, (-2218.0393));
      Complex complex3 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex2.INF.pow(0.0);
      try { 
        complex3.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = Complex.valueOf(4211.6569956358535);
      Complex.valueOf(0.0, 0.0);
      complex3.NaN.reciprocal();
      complex2.divide(0.0);
      complex1.ONE.hashCode();
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.I.sin();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex6.INF.multiply((-353.60974699965));
      complex0.divide(complex2);
      complex0.exp();
      complex2.hashCode();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(6.353384093665193E-135);
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(6.353384093665193E-135, 1900.568);
      complex1.I.add(complex2);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-2402.20969093), (-2402.20969093));
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.I.add(0.0);
      complex3.NaN.divide(0.0);
      Complex complex4 = Complex.valueOf((-2402.20969093));
      complex4.ZERO.tanh();
      Complex complex5 = complex0.sqrt();
      complex5.readResolve();
      complex5.equals(complex1);
      complex2.conjugate();
      Complex complex6 = complex1.pow((-1344.727));
      complex4.abs();
      complex6.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.atan();
      complex7.divide(complex4);
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.subtract(complex1);
      complex2.INF.hashCode();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.acos();
      complex5.INF.toString();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex4.multiply(complex3);
      complex7.ONE.atan();
      Complex complex8 = complex4.pow(complex5);
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex9.INF.multiply(1872);
      Complex complex11 = complex7.sqrt();
      complex0.I.multiply(complex11);
      Complex complex12 = complex7.sqrt();
      complex12.I.negate();
      complex11.NaN.tan();
      complex6.NaN.negate();
      complex11.INF.abs();
      Complex complex13 = new Complex(6.283185307179586);
      complex3.equals(complex13);
      Complex complex14 = complex5.atan();
      Complex complex15 = complex14.ZERO.sqrt();
      complex15.ONE.negate();
      complex8.toString();
      complex8.getField();
      complex9.cos();
      complex6.NaN.tanh();
      complex0.isInfinite();
      complex10.isNaN();
      complex7.isNaN();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-658.104));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(854.0493154354, 1.1340476362128895E-7);
      Complex complex1 = complex0.ONE.multiply((-1514));
      Complex complex2 = complex0.sqrt();
      complex2.ZERO.toString();
      complex0.getField();
      complex0.INF.reciprocal();
      Complex complex3 = complex1.sqrt();
      complex3.INF.sin();
      Complex complex4 = Complex.valueOf(854.0493154354, (double) (-1514));
      complex1.reciprocal();
      complex4.reciprocal();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.8926595743317624E162);
      complex0.abs();
      Complex complex1 = new Complex(0.0, 2.0);
      Complex complex2 = complex0.I.multiply(complex1);
      complex0.isNaN();
      Complex complex3 = complex0.pow(4.8926595743317624E162);
      Complex complex4 = complex3.ONE.asin();
      complex3.I.add(4.8926595743317624E162);
      Complex complex5 = complex3.INF.reciprocal();
      complex5.INF.createComplex(0.0, 2954.498245044882);
      Complex.valueOf(2954.498245044882, 530.456);
      complex3.getReal();
      complex3.add(32.21333275216597);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex6.conjugate();
      complex8.ZERO.abs();
      complex7.isNaN();
      Complex complex9 = complex6.createComplex(32.21333275216597, 2954.498245044882);
      complex9.INF.abs();
      complex1.sqrt1z();
      complex1.divide(complex2);
      complex9.subtract(0.0);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply((-2630.5));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.valueOf(1.0, 1.0);
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.pow(complex1);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(612.89);
      complex0.getField();
      Complex complex1 = complex0.I.createComplex(612.89, 612.89);
      complex0.INF.conjugate();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf(612.89);
      Complex complex4 = complex1.tanh();
      complex4.ZERO.nthRoot(1);
      complex0.hashCode();
      complex0.getReal();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.ZERO.asin();
      complex2.getImaginary();
      complex4.divide(612.89);
      complex0.abs();
      Complex complex7 = complex6.NaN.pow(2.0);
      Complex.valueOf(631.5654417712732);
      Complex complex8 = complex5.ONE.createComplex(9.303, (-3014.819091));
      Complex complex9 = complex7.INF.tan();
      complex5.ZERO.conjugate();
      complex9.atan();
      Complex complex10 = complex1.add(complex6);
      complex6.add(complex4);
      Complex complex11 = complex10.multiply(complex0);
      complex8.add(612.89);
      Complex complex12 = complex11.multiply(complex3);
      complex12.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex((-1640.3), (-1640.3));
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.add(complex0);
      List<Complex> list0 = complex1.ZERO.nthRoot(2485);
      assertEquals(2485, list0.size());
      
      complex1.ONE.getField();
      Complex complex3 = complex0.INF.tanh();
      complex0.isNaN();
      Complex complex4 = complex0.NaN.cosh();
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf((-1158.4268), 0.0);
      Complex complex7 = complex0.multiply((-1640.3));
      Complex complex8 = complex6.I.multiply(2485);
      complex8.INF.getField();
      Complex complex9 = complex0.NaN.cos();
      Complex complex10 = complex7.ONE.atan();
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex10.getReal(), 0.01);
      
      Complex complex11 = complex7.sin();
      assertEquals(Double.NEGATIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex7.conjugate();
      assertEquals(2690584.09, complex12.getReal(), 0.01);
      
      Complex complex13 = (Complex)complex6.readResolve();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertTrue(complex13.equals((Object)complex6));
      
      Complex complex14 = complex2.cos();
      assertEquals(Double.POSITIVE_INFINITY, complex14.getReal(), 0.01);
      
      complex1.cosh();
      complex7.getReal();
      complex7.createComplex(0.0, 706.5459087764883);
      Complex complex15 = complex3.negate();
      assertFalse(complex0.equals((Object)complex2));
      assertSame(complex15, complex5);
      assertSame(complex15, complex9);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-4.0151502150238136E-8));
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.I.divide((-1761.70140506201));
      Complex complex3 = complex2.ZERO.multiply(0);
      Complex complex4 = Complex.valueOf(20.0);
      complex3.INF.pow(complex4);
      complex0.getReal();
      Complex complex5 = complex1.INF.negate();
      complex5.I.toString();
      complex2.pow(complex3);
      try { 
        complex4.nthRoot((-1300));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,300
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-1282.03), (-1282.03));
      double double0 = 0.0;
      Complex complex1 = new Complex((-1282.03), 0.0);
      complex0.add(complex1);
      complex0.ONE.atan();
      Complex complex2 = null;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.INF.subtract((double) 17);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      
      complex1.ZERO.getField();
      List<Complex> list0 = complex1.nthRoot(17);
      Complex complex4 = complex1.sinh();
      boolean boolean0 = complex4.equals(list0);
      assertFalse(boolean0);
      assertEquals(17, list0.size());
      
      Complex complex5 = complex4.multiply(complex2);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.7080734182735712, complex5.getReal(), 0.01);
      
      Complex complex6 = complex2.divide(703.0);
      assertEquals(0.0011969715288874772, complex6.getImaginary(), 0.01);
      
      double double0 = complex4.getImaginary();
      assertEquals((-0.8414709848078965), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.I.divide(Double.NaN);
      assertSame(complex2, complex1);
      
      Complex complex3 = Complex.valueOf(1117.722501254, 0.0);
      assertEquals(1117.722501254, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.pow(1117.722501254);
      String string0 = complex4.toString();
      assertFalse(complex4.isInfinite());
      assertEquals("(1.0, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 399.1055982179);
      Complex complex1 = complex0.multiply(0);
      complex1.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract((-550.8));
      complex2.I.cos();
      try { 
        complex0.nthRoot((-859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -859
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-246.4135092131));
      assertFalse(complex1.isNaN());
      
      Complex complex2 = complex0.acos();
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4731.519603927526, 4731.519603927526);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = Complex.valueOf(4731.519603927526, 4731.519603927526);
      Complex complex4 = complex3.NaN.multiply(complex1);
      Complex complex5 = complex4.INF.atan();
      complex5.I.add(complex0);
      complex0.multiply(7);
      Complex complex6 = complex3.cos();
      Complex complex7 = Complex.valueOf((-2463.6318), 0.0);
      Complex complex8 = complex3.I.pow(complex7);
      complex8.ONE.sinh();
      Complex complex9 = Complex.NaN;
      complex2.ZERO.getField();
      Complex complex10 = complex9.NaN.asin();
      complex10.ONE.sinh();
      complex2.INF.pow(complex9);
      Complex complex11 = complex0.sin();
      Complex complex12 = complex6.INF.pow((-3351.68866193449));
      complex12.ZERO.sqrt();
      complex11.NaN.readResolve();
      complex6.getImaginary();
      complex6.abs();
      complex2.tan();
      complex8.tanh();
      try { 
        complex6.nthRoot((-1776));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,776
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
