/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:49:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1546.9328805481932, (-282.927904362595));
      Complex complex1 = complex0.createComplex((-1924.04), 2.7472456017809066E228);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.negate();
      complex4.nthRoot(1);
      complex3.isInfinite();
      Complex complex5 = complex3.divide(complex2);
      complex3.sqrt();
      Complex complex6 = (Complex)complex2.readResolve();
      Complex complex7 = complex0.pow(complex2);
      complex3.multiply(1);
      Complex complex8 = complex1.divide(complex6);
      Complex complex9 = complex0.sqrt();
      complex3.readResolve();
      Complex complex10 = Complex.valueOf(1546.9328805481932, (-1924.04));
      complex8.pow(complex10);
      Complex complex11 = complex0.multiply(1850);
      complex7.cos();
      complex11.sqrt1z();
      complex10.nthRoot(2527);
      complex10.tanh();
      complex5.asin();
      complex10.asin();
      complex5.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.add(0.0);
      Complex complex3 = complex0.divide(6.592926904915355E-188);
      complex3.INF.toString();
      Complex complex4 = complex3.I.asin();
      complex4.ONE.acos();
      Complex complex5 = complex3.pow((-2898.01));
      Complex complex6 = complex3.negate();
      complex2.ZERO.nthRoot(473);
      complex6.sqrt1z();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex2.ONE.multiply(complex5);
      complex1.abs();
      Complex complex9 = complex3.divide(complex7);
      Complex complex10 = complex6.pow((-2898.01));
      complex10.ONE.hashCode();
      complex9.sin();
      complex3.reciprocal();
      complex2.sqrt();
      complex7.createComplex(1.4736818914204564E-150, 0.0);
      Complex.valueOf((-1.029980741248172E-7), 866.2);
      complex9.createComplex(Double.NaN, 654.020144923267);
      complex2.exp();
      try { 
        complex8.nthRoot((-447));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -447
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-1378434.1800468036));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.conjugate();
      complex1.sinh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.log();
      complex4.divide((-213.0));
      Complex complex5 = Complex.valueOf(1689.6);
      complex1.asin();
      complex2.tanh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(1689.6, 1689.6);
      complex0.asin();
      Complex complex8 = new Complex((-1175.9098035442896), 0.002352516884997158);
      Complex complex9 = Complex.ONE;
      complex9.sqrt1z();
      complex7.nthRoot(1236);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.NaN;
      complex1.ZERO.log();
      Complex.valueOf(5010.99);
      complex0.ONE.getArgument();
      complex1.cosh();
      Complex complex3 = new Complex(0.0);
      complex3.isInfinite();
      Complex complex4 = Complex.valueOf(532.82894153, (-20.0));
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.I;
      complex5.multiply(complex6);
      Complex.valueOf(532.82894153);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-463.2510724180076));
      Complex complex1 = new Complex(2421.698, Double.POSITIVE_INFINITY);
      complex0.I.multiply(complex1);
      complex0.createComplex((-463.2510724180076), (-822.0760532));
      Complex complex2 = Complex.I;
      complex2.nthRoot(1);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2.9758750368256437E29);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.cos();
      complex1.INF.log();
      Complex complex3 = complex2.I.sqrt();
      complex0.NaN.getField();
      Complex complex4 = complex1.INF.sqrt1z();
      complex4.NaN.createComplex(2.9758750368256437E29, 2.9758750368256437E29);
      Complex complex5 = complex1.createComplex(417209.703474902, 161.294506374);
      complex3.atan();
      complex5.NaN.pow(1918.0);
      Complex complex6 = complex1.sqrt1z();
      Complex.valueOf(870.16434, (-18359.25));
      Complex complex7 = complex0.acos();
      complex7.NaN.atan();
      complex0.subtract(complex3);
      complex2.toString();
      complex1.add(complex0);
      complex6.log();
      complex1.multiply(complex3);
      complex3.pow(complex1);
      Complex complex8 = Complex.valueOf((-18359.25), 95025.07716899998);
      complex8.divide(0.3818710571223746);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(0.9068729019163044);
      Complex complex1 = complex0.NaN.reciprocal();
      double double0 = 3224.52247758963;
      Complex complex2 = Complex.valueOf(3224.52247758963, 1.5129516124725342);
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex3.ONE.sinh();
      complex4.INF.pow(complex0);
      Complex complex5 = complex0.negate();
      complex5.INF.sqrt1z();
      complex4.log();
      Complex complex6 = complex1.cos();
      complex4.NaN.atan();
      Complex complex7 = complex6.INF.sqrt();
      complex7.hashCode();
      Complex complex8 = complex2.multiply((-2068107244));
      try { 
        complex8.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf(Double.NaN);
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.ZERO.log();
      complex3.hashCode();
      complex2.getField();
      complex5.readResolve();
      Complex complex6 = complex4.tan();
      complex0.add(complex6);
      Complex complex7 = complex5.divide(Double.POSITIVE_INFINITY);
      complex7.multiply(complex1);
      Complex complex8 = complex0.cosh();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-463.495));
      Complex complex1 = complex0.ONE.createComplex(0.0, (-5.574080023496771E-94));
      complex0.nthRoot(7);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sqrt();
      complex2.exp();
      complex0.tan();
      complex3.add(complex1);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(Double.NaN);
      complex0.NaN.log();
      complex0.conjugate();
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex((-574.96), 2260.23);
      Complex complex3 = new Complex((-1565.051075), Double.NaN);
      complex3.asin();
      Complex complex4 = Complex.valueOf((-574.96));
      Object object0 = complex4.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex.valueOf(0.0);
      Complex complex0 = new Complex((-574.96), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      complex1.conjugate();
      Complex complex2 = Complex.NaN;
      complex2.log();
      Complex.valueOf(0.68605484190375);
      complex2.getArgument();
      Complex complex3 = Complex.valueOf(2.7106814809424793E-8, Double.NaN);
      complex3.getArgument();
      complex2.multiply(2238);
      Complex complex4 = Complex.ONE;
      complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.pow(complex0);
      complex5.asin();
      complex6.tanh();
      complex0.sqrt();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.9999976776186302, Double.POSITIVE_INFINITY);
      complex1.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.I.createComplex((-1628.850218), (-148.66));
      complex2.INF.readResolve();
      complex2.multiply(complex0);
      Complex complex4 = complex2.subtract((-346.557));
      Complex complex5 = complex4.INF.add((-6.237159041891476E-5));
      complex5.ONE.readResolve();
      complex3.tan();
      Complex complex6 = complex2.acos();
      complex6.multiply(535.088756);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(1545.819525393, 1545.819525393);
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = new Complex(19.824520839068075, Double.POSITIVE_INFINITY);
      complex2.NaN.atan();
      Complex complex3 = Complex.I;
      complex2.ZERO.multiply(1902.985844743);
      complex2.ONE.readResolve();
      Complex complex4 = Complex.ZERO;
      complex4.readResolve();
      complex4.equals(complex3);
      Complex complex5 = new Complex(1902.985844743);
      Complex complex6 = Complex.ONE;
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(1545.819525393, 1545.819525393);
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = new Complex(20.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(20.0);
      complex3.readResolve();
      complex3.hashCode();
      complex3.tan();
      complex3.sinh();
      complex3.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-463.495));
      complex0.sin();
      Complex complex1 = Complex.valueOf((-795.46704057032), 20.0);
      complex1.abs();
      Complex complex2 = new Complex((-795.46704057032), (-795.46704057032));
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(20.0, 20.0);
      complex4.hashCode();
      complex1.tan();
      Complex complex5 = Complex.ZERO;
      complex5.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.log();
      complex0.NaN.getField();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(1545.819525393, 1545.819525393);
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = new Complex(19.824520839068075, Double.POSITIVE_INFINITY);
      complex2.NaN.atan();
      Complex complex3 = Complex.I;
      complex2.ZERO.multiply(1902.985844743);
      complex1.hashCode();
      complex2.equals(complex1);
      Complex complex4 = new Complex((-343.812537299994));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.INF.pow(complex1);
      complex0.I.hashCode();
      Complex complex2 = Complex.I;
      complex1.abs();
      complex2.getField();
      complex1.readResolve();
      complex2.tan();
      Complex complex3 = Complex.ONE;
      complex3.I.add(complex2);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(1545.819525393, 1545.819525393);
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = new Complex(20.0, Double.POSITIVE_INFINITY);
      complex2.NaN.atan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.multiply((-1488.480948));
      complex3.hashCode();
      complex2.ZERO.divide(2254.89390298);
      complex4.tan();
      complex2.multiply(496);
      complex2.divide((double) 2345);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = Complex.INF;
      complex0.abs();
      Complex complex3 = new Complex((-0.5707963267948966), Double.NaN);
      Complex complex4 = Complex.I;
      complex2.hashCode();
      Complex.valueOf(0.9999991630254806, Double.NaN);
      Complex.valueOf((-0.5707963267948966));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(1545.819525393, 1545.819525393);
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = new Complex(20.0, Double.POSITIVE_INFINITY);
      complex2.NaN.atan();
      Complex complex3 = Complex.I;
      complex2.ZERO.multiply(1902.985844743);
      complex1.hashCode();
      Complex complex4 = complex2.tan();
      complex4.multiply(2345);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(1545.819525393, 1545.819525393);
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      complex4.pow(complex3);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.INF.pow(complex1);
      complex0.I.hashCode();
      Complex complex2 = Complex.I;
      complex1.abs();
      complex2.getField();
      complex1.readResolve();
      complex0.equals(complex1);
      Complex complex3 = new Complex(0.0);
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(1545.819525393, 1545.819525393);
      Complex complex1 = complex0.sin();
      complex1.abs();
      Complex complex2 = new Complex(20.0, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      complex1.hashCode();
      complex2.tan();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.conjugate();
      complex2.add(0.0);
      complex1.log();
      Complex complex4 = Complex.valueOf((-211.82916219206462));
      Complex complex5 = complex2.add(0.657863974571228);
      Complex complex6 = Complex.valueOf((-95.158954346));
      complex6.getArgument();
      complex4.isInfinite();
      complex0.getArgument();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex4.acos();
      Complex complex9 = new Complex(0.0);
      complex6.INF.reciprocal();
      Complex complex10 = complex9.pow(0.0);
      Complex complex11 = complex8.pow(complex1);
      complex10.asin();
      complex7.pow(673.01466834);
      complex6.asin();
      complex11.tanh();
      complex5.sqrt();
      Complex complex12 = Complex.ZERO;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
      complex0.abs();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-1471.0601221446202));
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      complex3.hashCode();
      complex3.tan();
      complex3.readResolve();
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = new Complex(-0.0);
      Complex complex2 = Complex.valueOf(-0.0);
      complex0.pow(complex2);
      complex0.hashCode();
      Complex complex3 = complex1.sqrt1z();
      complex1.abs();
      Complex complex4 = Complex.NaN;
      complex4.getField();
      complex1.readResolve();
      Complex complex5 = new Complex(5552.860808271);
      complex5.equals(complex0);
      Complex complex6 = complex3.subtract(complex1);
      complex6.sin();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.819629430770874);
      complex7.exp();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = 1667.85790714097;
      Complex complex0 = new Complex(1667.85790714097, 1667.85790714097);
      Complex complex1 = complex0.INF.asin();
      complex1.I.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.divide(complex1);
      complex3.readResolve();
      complex3.ONE.cosh();
      Complex complex4 = complex2.I.tan();
      complex4.INF.negate();
      Complex complex5 = new Complex(1667.85790714097, 1667.85790714097);
      Complex complex6 = complex0.sin();
      // Undeclared exception!
      complex6.I.nthRoot(2147482873);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.I.hashCode();
      complex0.sqrt1z();
      complex1.abs();
      Complex complex3 = Complex.valueOf((-1.0), 896.0);
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex2.atan();
      complex1.getImaginary();
      Complex complex7 = complex5.multiply(2147473651);
      complex0.conjugate();
      Complex complex8 = new Complex(896.0);
      Complex complex9 = complex4.sin();
      Complex complex10 = Complex.ONE;
      complex7.asin();
      Complex complex11 = complex9.divide(complex6);
      complex0.cosh();
      Complex.valueOf((double) 1, 896.0);
      complex5.isInfinite();
      complex11.isNaN();
      complex6.isInfinite();
      complex0.getImaginary();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(1667.85790714097, 1667.85790714097);
      Complex complex1 = complex0.INF.asin();
      complex1.I.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.createComplex(2.69449520111084, 1667.85790714097);
      Complex complex4 = Complex.INF;
      complex4.nthRoot(1);
      Complex complex5 = complex1.negate();
      complex5.isInfinite();
      complex3.divide(complex5);
      complex3.sqrt();
      complex2.readResolve();
      complex4.pow(complex2);
      complex2.multiply(1);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-463.495), 2199.9815148342);
      Complex complex2 = complex1.multiply(2199.9815148342);
      Complex complex3 = complex1.subtract((-540.41197552));
      complex3.toString();
      Complex complex4 = complex1.tanh();
      complex2.reciprocal();
      Complex.valueOf(2199.9815148342, (-540.41197552));
      Complex complex5 = complex3.tan();
      complex3.sin();
      Complex complex6 = complex5.divide(2.0);
      Complex.valueOf(448.4);
      complex6.I.subtract(complex2);
      Complex complex7 = Complex.NaN;
      complex7.sinh();
      complex4.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.divide(470.3078604906);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex3.I.multiply(470.3078604906);
      complex4.NaN.getField();
      complex3.ZERO.getArgument();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex4.subtract(470.3078604906);
      complex6.NaN.toString();
      complex6.NaN.toString();
      Complex complex7 = complex5.ONE.divide(complex1);
      complex6.NaN.log();
      Complex complex8 = complex5.cosh();
      complex3.pow(2.67091703414917);
      Complex.valueOf(2.67091703414917, 2.67091703414917);
      Complex complex9 = complex1.cos();
      complex9.I.cosh();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.I.negate();
      complex11.atan();
      complex4.getField();
      Complex complex12 = complex8.multiply((-4564.289065689328));
      complex6.exp();
      complex2.multiply(complex12);
      Complex complex13 = Complex.ONE;
      complex7.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.I.hashCode();
      Complex complex3 = complex0.sqrt1z();
      complex1.abs();
      complex3.getField();
      complex1.readResolve();
      complex0.equals(complex1);
      complex2.subtract(complex1);
      complex3.sin();
      Complex complex4 = Complex.valueOf(0.0, 2009.0256333982);
      complex4.exp();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-351.9606396));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.conjugate();
      complex4.ZERO.reciprocal();
      complex2.getField();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = Complex.valueOf(1485.64477009264);
      complex6.add(complex0);
      Complex.valueOf(2.55409795397022E-208);
      complex5.NaN.sqrt1z();
      complex5.I.pow(complex6);
      Complex complex7 = complex5.NaN.atan();
      complex7.ONE.atan();
      Complex complex8 = complex5.NaN.add(complex0);
      complex8.ONE.acos();
      Complex complex9 = complex5.asin();
      complex9.I.atan();
      complex9.I.acos();
      complex1.divide(complex5);
      complex1.toString();
      complex5.reciprocal();
      complex2.negate();
      Complex.valueOf((-4039.117674517067), (-351.9606396));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.67091703414917, 0.0);
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex1.ONE.divide(0.6165571212768555);
      complex1.sin();
      complex0.ONE.abs();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.negate();
      complex4.INF.hashCode();
      complex0.tan();
      complex4.readResolve();
      complex3.divide(complex0);
      complex4.add(complex2);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.67091703414917, 0.0);
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex1.sin();
      complex0.ONE.abs();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex1.multiply(complex3);
      complex2.getImaginary();
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1545.819525393, 4401.132422986);
      Complex complex1 = complex0.multiply((-4.0852427502515625E-8));
      Complex complex2 = Complex.valueOf(4401.132422986);
      Complex complex3 = complex0.subtract(4401.132422986);
      complex3.ZERO.toString();
      Complex complex4 = complex0.tanh();
      complex1.I.reciprocal();
      Complex complex5 = (Complex)complex2.readResolve();
      Complex complex6 = complex0.ZERO.tan();
      complex0.getImaginary();
      Complex complex7 = (Complex)complex1.readResolve();
      complex2.equals(complex7);
      complex1.subtract(0.1655424018451852);
      complex4.subtract(complex5);
      complex6.getReal();
      Complex.valueOf((-1792.5), (-1.0));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.I.hashCode();
      Complex complex3 = complex2.atan();
      complex1.getImaginary();
      Complex complex4 = complex1.multiply((-1073741824));
      complex2.conjugate();
      Complex complex5 = complex3.tan();
      complex1.sin();
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.acos();
      Complex complex8 = new Complex(1.792783182582235E246);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex7.divide(complex1);
      complex10.cosh();
      complex10.isNaN();
      complex1.isNaN();
      complex9.isInfinite();
      complex4.getImaginary();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-463.495));
      Complex complex2 = Complex.valueOf((-463.495), (-5.574080023496771E-94));
      Complex complex3 = Complex.valueOf((-463.495));
      Complex complex4 = complex1.add(0.657863974571228);
      complex0.getArgument();
      complex2.isInfinite();
      complex0.getArgument();
      complex3.sin();
      Complex complex5 = complex3.acos();
      complex4.pow((-5.574080023496771E-94));
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.asin();
      complex0.pow((-463.495));
      complex8.asin();
      complex6.tanh();
      complex1.sqrt();
      complex0.multiply((-1212));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.NaN.divide(Double.NaN);
      Complex complex3 = complex0.NaN.log();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.ONE.add(Double.NaN);
      Complex complex6 = complex4.ZERO.log();
      Complex complex7 = complex3.createComplex((-213.0), (-574.96));
      complex2.nthRoot(1);
      complex0.negate();
      complex6.isInfinite();
      complex0.divide(complex7);
      complex3.sqrt();
      Complex complex8 = new Complex(Double.NaN);
      complex8.readResolve();
      Complex complex9 = Complex.valueOf(691.8706344);
      complex3.pow(complex9);
      complex2.sin();
      complex5.toString();
      Complex complex10 = new Complex(1263.785173350843);
      Complex complex11 = Complex.valueOf((-1.4255188208147591), (-1604.6044918380505));
      Complex complex12 = Complex.ONE;
      complex11.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-3183.8), (-3183.8));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.add((-3200.14911466397));
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.INF.subtract(844.9095);
      Complex complex4 = complex2.NaN.subtract((-2882.5));
      complex1.getReal();
      complex2.pow((-3200.14911466397));
      complex4.readResolve();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(1667.85790714097, 1667.85790714097);
      Complex complex1 = complex0.INF.asin();
      complex1.I.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.divide(complex1);
      complex3.ONE.cosh();
      Complex complex4 = complex2.I.tan();
      Complex complex5 = complex4.INF.negate();
      complex0.sinh();
      Complex complex6 = complex2.sin();
      complex6.INF.sqrt();
      Complex complex7 = complex5.divide(1062.5850669206795);
      complex3.sinh();
      complex5.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.divide(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = Complex.NaN;
      complex3.log();
      complex0.multiply(0.0);
      complex2.ONE.divide(complex3);
      complex1.ZERO.sin();
      complex0.divide(3610.43407546354);
      complex2.sinh();
      complex0.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(1061.4043999212);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex3.add(0.0);
      Complex complex7 = Complex.valueOf((-1061.5850669206795), (-3719.663965721087));
      Complex complex8 = complex1.pow(complex7);
      complex4.readResolve();
      complex5.log();
      Complex complex9 = complex0.cosh();
      complex6.hashCode();
      Complex complex10 = complex3.subtract(complex8);
      Complex complex11 = complex0.atan();
      Complex complex12 = complex3.atan();
      complex0.getImaginary();
      Complex complex13 = complex3.multiply(Integer.MAX_VALUE);
      Complex complex14 = new Complex(1061.4043999212, Integer.MAX_VALUE);
      complex11.tan();
      complex9.sin();
      complex8.log();
      Complex complex15 = complex12.acos();
      complex14.asin();
      Complex complex16 = new Complex((-3719.663965721087));
      complex11.cosh();
      complex8.isNaN();
      complex15.isNaN();
      complex10.isInfinite();
      complex13.getImaginary();
      Complex complex17 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.I;
      complex0.NaN.multiply(1061.4043999212);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.ONE.tan();
      complex3.ZERO.sqrt1z();
      complex3.I.add(0.0);
      Complex complex4 = Complex.valueOf((-1061.5850669206795), (-1061.5850669206795));
      Complex complex5 = complex3.ZERO.pow(complex4);
      Complex complex6 = complex4.NaN.log();
      complex2.ONE.cosh();
      complex1.NaN.hashCode();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.NaN.atan();
      complex4.atan();
      complex2.getImaginary();
      Complex complex9 = complex4.multiply(1);
      complex7.INF.conjugate();
      Complex complex10 = complex8.tan();
      complex5.sin();
      complex7.log();
      complex3.acos();
      complex10.asin();
      complex1.divide(complex9);
      complex6.cosh();
      Complex complex11 = new Complex(2.2645654678344727);
      complex11.isNaN();
      complex8.isNaN();
      complex2.isNaN();
      complex2.getImaginary();
      Complex complex12 = Complex.valueOf(Double.NaN);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(1667.85790714097, 1667.85790714097);
      Complex complex1 = complex0.INF.asin();
      complex1.I.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex2.add((-20.0));
      complex0.getArgument();
      complex1.isInfinite();
      complex4.getArgument();
      complex1.sin();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex3.pow(0.657863974571228);
      complex6.pow(complex5);
      complex4.asin();
      complex5.pow((-2527.02));
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.tanh();
      complex1.sqrt();
      complex7.toString();
      complex7.acos();
      complex8.add(20.0);
      complex6.toString();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.negate();
      complex4.INF.atan();
      complex0.isInfinite();
      Complex complex5 = complex1.sqrt();
      complex5.readResolve();
      complex5.pow(complex2);
      Complex.valueOf(0.0, (-463.495));
      complex1.sin();
      Complex complex6 = new Complex((-463.495));
      complex3.sqrt();
      Complex complex7 = complex4.multiply((-1464));
      complex7.add(complex4);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.67092);
      Complex complex1 = Complex.valueOf(0.0, (-214789.54173419834));
      Complex complex2 = complex1.createComplex((-689.4337861), 2.67092);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.tanh();
      complex1.nthRoot(1330);
      complex4.cosh();
      Complex complex5 = complex1.negate();
      complex5.isInfinite();
      complex3.divide(complex5);
      Complex.valueOf(3784.374099, 4.680767399874334E-9);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sqrt();
      complex1.readResolve();
      complex1.pow(complex7);
      Complex.valueOf((-445.58966143), (-214789.54173419834));
      Complex complex8 = Complex.INF;
      Complex complex9 = new Complex(97.0562817575094);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.sqrt();
      complex10.asin();
      complex11.multiply(2040109465);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.I;
      complex0.NaN.multiply(1061.4043999212);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.ONE.tan();
      complex3.ZERO.sqrt1z();
      complex3.I.add(0.0);
      Complex complex4 = Complex.valueOf((-1061.5850669206795), (-1061.5850669206795));
      Complex complex5 = complex3.ZERO.pow(complex4);
      Complex complex6 = (Complex)complex2.ONE.readResolve();
      complex4.NaN.log();
      complex2.ONE.cosh();
      complex1.NaN.hashCode();
      Complex complex7 = complex0.subtract(complex1);
      complex7.NaN.atan();
      complex4.atan();
      complex2.getImaginary();
      complex4.multiply(1);
      Complex complex8 = complex5.sin();
      complex6.divide(Double.NaN);
      complex3.sinh();
      complex7.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.abs();
      complex2.getField();
      complex1.ONE.toString();
      complex1.equals(complex2);
      complex0.ZERO.subtract(complex2);
      Complex complex3 = complex2.sin();
      complex3.exp();
      complex3.cosh();
      Complex.valueOf((-1135.0649287722013), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-712.679026739661));
      Complex complex2 = Complex.valueOf((-5.574080023496771E-94), 0.5215104818344116);
      Complex complex3 = complex0.createComplex(Double.NaN, 0.8443095518972797);
      complex1.divide(complex2);
      Complex complex4 = complex3.tanh();
      Complex complex5 = new Complex((-0.8443095518972797), (-463.495));
      complex5.nthRoot(1);
      Complex complex6 = complex3.cosh();
      complex5.negate();
      complex3.isInfinite();
      complex1.divide(complex4);
      complex6.sqrt();
      complex5.readResolve();
      complex0.pow(complex5);
      Complex complex7 = complex5.multiply(1);
      complex7.cos();
      Complex complex8 = new Complex((-20.0), 9.429257929713919E-133);
      complex8.reciprocal();
      complex6.nthRoot(498);
      complex3.cos();
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex4.acos();
      Complex complex10 = complex9.cos();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-3906.544376), 4.406750291994231E-9);
      Complex complex1 = complex0.I.multiply(4.406750291994231E-9);
      Complex complex2 = complex0.I.multiply(0);
      complex2.INF.getArgument();
      complex0.getReal();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.ZERO.pow((-3906.544376));
      Complex complex5 = complex4.INF.createComplex(3012.220178, 1.0);
      Complex complex6 = complex5.ONE.sqrt1z();
      complex1.sqrt();
      complex4.NaN.getArgument();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.INF.divide(0.7853981633974483);
      complex8.ONE.getField();
      complex2.ONE.toString();
      complex1.ZERO.pow(complex2);
      complex7.NaN.asin();
      complex7.isNaN();
      Complex complex9 = complex0.log();
      complex9.I.sinh();
      complex0.acos();
      complex6.asin();
      Complex complex10 = complex8.divide(complex0);
      complex10.NaN.negate();
      complex4.isNaN();
      complex4.isNaN();
      complex4.isInfinite();
      complex6.getImaginary();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.NaN.divide(Double.NaN);
      Complex complex3 = complex1.ONE.pow((-574.96));
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.conjugate();
      complex3.ONE.add(Double.NaN);
      Complex complex6 = complex5.ZERO.log();
      Complex.valueOf((-213.0));
      complex1.INF.add(0.657863974571228);
      complex4.ONE.getArgument();
      complex0.isInfinite();
      complex1.getArgument();
      complex2.sin();
      Complex complex7 = complex4.acos();
      complex0.pow((-2527.02));
      Complex complex8 = complex4.asin();
      Complex complex9 = complex7.ONE.sin();
      complex3.pow(5.855267177907345E90);
      complex5.asin();
      Complex complex10 = complex6.tanh();
      Complex complex11 = complex2.sqrt();
      complex11.NaN.sinh();
      complex8.toString();
      Complex complex12 = complex10.acos();
      complex7.add((-213.0));
      complex5.toString();
      complex9.tanh();
      complex12.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-463.495));
      Complex complex2 = Complex.valueOf((-463.495), (-5.574080023496771E-94));
      Complex complex3 = complex1.ONE.createComplex(0.0, (-5.574080023496771E-94));
      Complex complex4 = complex3.INF.divide(complex1);
      complex4.tanh();
      complex1.nthRoot(1);
      Complex complex5 = complex3.cosh();
      complex5.negate();
      complex0.isInfinite();
      Complex complex6 = complex3.divide(complex1);
      Complex complex7 = complex6.sqrt();
      complex6.I.readResolve();
      complex7.ZERO.pow(complex1);
      Complex complex8 = Complex.valueOf((-463.495), (-4459.188));
      complex8.sin();
      Complex complex9 = new Complex((-463.495));
      complex9.sqrt();
      complex2.asin();
      complex8.multiply((-1212));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = 1667.85790714097;
      Complex complex0 = new Complex(1667.85790714097, 1667.85790714097);
      Complex complex1 = complex0.INF.asin();
      complex1.I.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.divide(complex1);
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex2.I.tan();
      complex5.INF.negate();
      complex0.sinh();
      int int0 = (-2146095325);
      complex4.multiply((-2146095325));
      complex0.cos();
      complex3.reciprocal();
      try { 
        complex0.nthRoot((-2146095325));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,146,095,325
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-463.495));
      Complex.valueOf((-463.495), (-5.574080023496771E-94));
      Complex complex2 = complex1.ONE.createComplex(0.0, (-5.574080023496771E-94));
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.tanh();
      complex1.nthRoot(1);
      Complex complex4 = complex2.cosh();
      complex4.negate();
      complex0.isInfinite();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.sqrt();
      complex5.I.readResolve();
      complex6.ZERO.pow(complex1);
      Complex complex7 = complex6.multiply(431);
      complex6.cos();
      Object object0 = new Object();
      complex0.equals(object0);
      complex7.subtract(0.0);
      Complex complex8 = Complex.ONE;
      complex8.hashCode();
      complex0.atan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1526.7535916947413, 4401.132422986);
      Complex complex1 = complex0.multiply((-4.0852427502515625E-8));
      Complex complex2 = new Complex(4401.132422986);
      Complex complex3 = Complex.ONE;
      complex3.ZERO.toString();
      complex3.tanh();
      Complex complex4 = complex1.I.reciprocal();
      Complex complex5 = complex4.ONE.add((-1699.7401789191538));
      Complex complex6 = (Complex)complex2.readResolve();
      Complex complex7 = Complex.valueOf(1526.7535916947413);
      complex0.getImaginary();
      Complex complex8 = (Complex)complex1.readResolve();
      complex2.equals(complex8);
      complex8.asin();
      complex7.divide(complex5);
      complex0.cosh();
      complex0.isNaN();
      complex6.isNaN();
      complex3.isInfinite();
      complex4.getImaginary();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.NaN.divide(Double.NaN);
      Complex complex3 = complex1.ONE.pow((-574.96));
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.log();
      Complex.valueOf((-213.0));
      complex1.INF.add(0.657863974571228);
      complex4.ONE.getArgument();
      Complex complex6 = complex2.sin();
      complex4.acos();
      Complex complex7 = complex0.pow((-2527.02));
      complex7.ZERO.pow(complex3);
      complex4.asin();
      complex5.asin();
      complex6.subtract(5377.8503265212);
      complex0.hashCode();
      complex2.atan();
      Complex complex8 = new Complex(5377.8503265212);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1545.819525393, 4401.132422986);
      Complex complex1 = complex0.multiply((-4.0852427502515625E-8));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.subtract(1.2753966504932798E138);
      complex3.ZERO.toString();
      complex3.tanh();
      Complex complex4 = complex1.I.reciprocal();
      Complex complex5 = complex4.ONE.add((-1699.7401789191538));
      complex2.readResolve();
      complex0.ZERO.tan();
      complex0.getImaginary();
      Complex complex6 = (Complex)complex1.readResolve();
      complex2.equals(complex6);
      Complex complex7 = complex5.tanh();
      complex6.sqrt();
      complex7.toString();
      complex5.acos();
      complex3.add(0.07893174074362844);
      Complex complex8 = Complex.NaN;
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1545.819525393, 4401.132422986);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.conjugate();
      complex1.add(0.0);
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.valueOf((-213.0));
      Complex complex5 = complex2.add((-4.0852427502515625E-8));
      Complex complex6 = Complex.INF;
      complex6.getArgument();
      complex6.isInfinite();
      complex2.getArgument();
      Complex complex7 = complex3.sin();
      complex5.acos();
      Complex complex8 = complex1.pow(1545.819525393);
      Complex complex9 = complex4.pow(complex8);
      complex2.asin();
      complex7.pow((-105.0347416));
      complex9.asin();
      complex6.tanh();
      complex3.sqrt();
      complex7.toString();
      Complex complex10 = Complex.ZERO;
      complex10.acos();
      complex8.add((-1.0004045964222168));
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.add(2290.70200896);
      Complex complex4 = Complex.valueOf(0.0, 2290.70200896);
      Complex complex5 = complex4.pow(complex2);
      complex2.readResolve();
      complex0.log();
      Complex complex6 = complex1.cosh();
      complex6.hashCode();
      complex1.subtract(complex6);
      Complex complex7 = complex3.atan();
      complex1.atan();
      complex6.getImaginary();
      Complex complex8 = complex0.multiply(2045222521);
      complex7.conjugate();
      complex5.tan();
      Complex complex9 = Complex.ZERO;
      complex9.sin();
      complex4.log();
      complex9.acos();
      complex8.asin();
      Complex complex10 = Complex.valueOf(0.9999982132760814);
      Complex complex11 = complex10.divide(complex1);
      complex7.cosh();
      complex11.isNaN();
      complex10.isNaN();
      complex2.isInfinite();
      complex10.getImaginary();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.multiply(1061.4043999212);
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex1.ONE.tan();
      complex4.ZERO.sqrt1z();
      complex0.abs();
      complex3.getField();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex1.subtract(complex3);
      complex1.sin();
      complex4.exp();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.19999954120254515, 0.19999954120254515);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.negate();
      complex2.I.readResolve();
      Complex complex3 = complex0.multiply(0.19999954120254515);
      Complex complex4 = complex3.NaN.negate();
      complex1.subtract(complex3);
      Complex complex5 = complex0.ZERO.tan();
      complex5.ONE.sin();
      Complex complex6 = complex2.createComplex(7.523374196797555E105, 0.0);
      complex4.subtract(7.523374196797555E105);
      complex6.ONE.toString();
      Complex complex7 = complex0.subtract(Double.NaN);
      complex4.isInfinite();
      complex6.getArgument();
      Complex complex8 = complex0.INF.add(0.0);
      Complex complex9 = complex8.ZERO.log();
      Complex complex10 = complex8.I.pow(complex4);
      complex10.I.tan();
      complex10.INF.asin();
      complex5.getArgument();
      Complex complex11 = complex0.cosh();
      complex6.cos();
      complex7.add(complex8);
      complex9.getImaginary();
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex2.createComplex((-1495.4323625572147), 0.0);
      complex13.conjugate();
      complex2.NaN.readResolve();
      complex5.divide(complex11);
      complex13.exp();
      complex12.cos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-463.495));
      Complex.valueOf((-463.495), (-5.574080023496771E-94));
      Complex complex2 = complex1.ONE.createComplex(0.0, (-5.574080023496771E-94));
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.tanh();
      complex1.nthRoot(1);
      Complex complex4 = complex2.cosh();
      complex4.negate();
      complex0.isInfinite();
      Complex complex5 = complex2.divide(complex1);
      Complex complex6 = complex5.sqrt();
      complex5.I.readResolve();
      complex6.ZERO.pow(complex1);
      Complex complex7 = complex6.multiply(431);
      Complex complex8 = complex6.cos();
      Complex complex9 = complex8.ONE.reciprocal();
      complex9.ZERO.nthRoot(431);
      complex7.cos();
      Complex complex10 = Complex.valueOf(2010.0260179);
      complex7.acos();
      complex5.cos();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.ONE.asin();
      Complex complex3 = complex0.ONE.reciprocal();
      Complex complex4 = complex3.sinh();
      complex0.isInfinite();
      Complex complex5 = complex0.atan();
      complex0.multiply(complex4);
      complex2.readResolve();
      complex2.getReal();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex5.exp();
      complex6.pow((-117.02903));
      complex7.createComplex(0.7853981633974483, (-3301.6426));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply((-1936.1444065));
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((-1936.1444065));
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex2.NaN.negate();
      complex6.ONE.sqrt1z();
      complex0.I.getArgument();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.INF.sinh();
      complex8.I.sin();
      complex3.ZERO.toString();
      complex7.I.getField();
      complex3.readResolve();
      Complex complex9 = complex2.multiply(complex1);
      complex5.getField();
      complex5.pow(complex4);
      complex1.divide(0.0);
      complex9.sin();
      complex6.multiply(complex4);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.INF.add(0.0);
      complex2.NaN.getField();
      Complex complex3 = Complex.I;
      complex3.INF.hashCode();
      complex1.ZERO.pow(0.0);
      complex3.hashCode();
      Complex complex4 = complex0.multiply(complex3);
      complex4.getImaginary();
      complex1.divide(complex3);
      Complex complex5 = Complex.NaN;
      complex5.acos();
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(1667.85790714097, 1667.85790714097);
      Complex complex1 = complex0.INF.asin();
      complex1.I.hashCode();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.I.divide(complex1);
      complex3.ONE.cosh();
      Complex complex4 = complex2.I.tan();
      Complex complex5 = complex4.INF.negate();
      complex0.sinh();
      Complex complex6 = complex2.sin();
      complex6.INF.sqrt();
      complex0.asin();
      complex5.multiply((-1212));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      double double0 = 20.0;
      Complex complex0 = new Complex(20.0);
      complex0.isInfinite();
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      complex0.I.createComplex((-3676.663), 0.0);
      complex0.sin();
      Complex complex1 = complex0.sin();
      complex1.getField();
      Complex.valueOf(437.669112356348);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add((-1.2277120342804144E295));
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex0.isInfinite();
      complex1.I.toString();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex5.sqrt1z();
      complex6.INF.subtract(complex5);
      complex4.ONE.add(complex6);
      complex0.NaN.tanh();
      Complex complex7 = complex0.ONE.add((-1.2277120342804144E295));
      Complex complex8 = complex7.I.pow((double) 17);
      complex4.INF.acos();
      complex1.readResolve();
      complex1.nthRoot(17);
      Complex complex9 = complex4.divide(complex0);
      complex9.I.pow((double) 17);
      complex9.ZERO.add(complex7);
      Complex.valueOf((-1.2277120342804144E295), (double) 17);
      Complex complex10 = complex0.add((-1.2277120342804144E295));
      complex2.INF.negate();
      complex10.I.readResolve();
      complex0.getArgument();
      complex4.getArgument();
      Complex complex11 = complex1.subtract(0.7853981633974483);
      Complex complex12 = complex11.cos();
      complex12.INF.tanh();
      Complex complex13 = complex8.atan();
      complex4.getField();
      complex13.add((double) 17);
      complex2.subtract(0.7853981633974483);
      complex11.getField();
      complex7.toString();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1545.819525393, 4401.132422986);
      Complex complex1 = complex0.multiply((-4.0852427502515625E-8));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.subtract(1.2753966504932798E138);
      complex3.ZERO.toString();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.I.reciprocal();
      complex5.ONE.add((-1699.7401789191538));
      complex2.readResolve();
      complex0.ZERO.tan();
      complex0.getImaginary();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      Complex complex6 = complex1.subtract(1.0);
      complex6.ONE.hashCode();
      complex0.atan();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2151.12961946, 2151.12961946);
      complex0.getReal();
      complex0.isInfinite();
      complex0.getArgument();
      Complex complex1 = complex0.cosh();
      complex1.NaN.conjugate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex3.NaN.createComplex(0.0, 834.66110174);
      complex4.ZERO.divide(2151.12961946);
      Complex complex6 = complex2.sinh();
      complex3.NaN.tanh();
      Complex complex7 = complex5.cos();
      complex7.ZERO.multiply(0.0);
      complex2.log();
      complex6.pow(complex5);
      complex4.divide(2151.12961946);
      complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3341.5604253724923);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.I.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.divide(complex1);
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex0.pow(3341.5604253724923);
      complex2.isInfinite();
      complex4.ONE.sin();
      Complex complex6 = complex0.add(complex2);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.multiply(2.0);
      complex8.ZERO.negate();
      complex8.I.divide((-1905.625177703602));
      complex8.NaN.nthRoot(852);
      Complex complex9 = complex4.divide(0.0);
      complex1.conjugate();
      complex6.hashCode();
      complex2.conjugate();
      complex9.negate();
      Complex complex10 = Complex.I;
      complex9.multiply(complex10);
      complex10.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.toString();
      Complex complex1 = Complex.I;
      complex0.NaN.multiply(1061.4043999212);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.ONE.tan();
      complex3.ZERO.sqrt1z();
      Complex complex4 = complex3.I.add(0.0);
      Complex complex5 = Complex.valueOf((-1061.5850669206795), (-1061.5850669206795));
      Complex complex6 = complex3.ZERO.pow(complex5);
      complex2.ONE.readResolve();
      complex5.NaN.log();
      complex2.ONE.cosh();
      complex1.NaN.hashCode();
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.NaN.atan();
      complex5.atan();
      complex2.getImaginary();
      Complex complex9 = complex5.multiply(1);
      complex7.INF.conjugate();
      complex4.tan();
      Complex complex10 = complex0.sin();
      Complex complex11 = complex10.INF.log();
      complex11.NaN.acos();
      complex10.ONE.asin();
      complex10.divide(complex4);
      complex8.cosh();
      complex2.isNaN();
      complex2.isNaN();
      complex6.isInfinite();
      complex9.getImaginary();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.67091703414917, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex2.multiply(complex0);
      complex3.sin();
      complex2.ONE.abs();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.negate();
      complex5.INF.hashCode();
      complex0.tan();
      complex5.readResolve();
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.954135150208654E-113, 0.0);
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ONE.subtract(complex0);
      complex1.ONE.conjugate();
      Complex complex3 = complex2.NaN.multiply(complex0);
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex4.NaN.log();
      complex5.ZERO.sin();
      Complex complex6 = complex1.I.negate();
      complex1.INF.sinh();
      complex6.INF.toString();
      Complex complex7 = Complex.valueOf(5030.711);
      Complex complex8 = Complex.valueOf(0.3982778787612915, 0.0);
      complex8.NaN.toString();
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.ZERO.add(complex0);
      complex0.getImaginary();
      Complex complex11 = complex6.cosh();
      Complex complex12 = complex10.tan();
      complex12.ZERO.toString();
      complex0.isNaN();
      complex7.add(complex2);
      complex4.hashCode();
      Complex complex13 = complex5.add(8.954135150208654E-113);
      complex13.NaN.abs();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.log();
      Complex complex1 = complex0.atan();
      complex0.NaN.subtract(1.6160884846515524E-147);
      complex1.sqrt1z();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.NaN.divide(Double.NaN);
      Complex complex3 = complex1.ONE.pow((-574.96));
      Complex complex4 = complex0.NaN.log();
      Complex complex5 = complex0.conjugate();
      complex3.ONE.add(Double.NaN);
      Complex complex6 = complex5.ZERO.log();
      Complex.valueOf((-213.0));
      complex1.INF.add(0.657863974571228);
      complex4.ONE.getArgument();
      complex0.isInfinite();
      complex1.getArgument();
      complex2.sin();
      Complex complex7 = complex4.acos();
      Complex complex8 = complex0.pow((-2527.02));
      complex8.ZERO.pow(complex3);
      Complex complex9 = complex4.asin();
      complex3.pow(5.855267177907345E90);
      complex5.asin();
      Complex complex10 = complex6.tanh();
      complex2.sqrt();
      complex9.toString();
      complex10.acos();
      complex7.add((-213.0));
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.ONE.pow(complex1);
      complex0.INF.pow((-1.0));
      Complex complex2 = complex0.atan();
      complex2.INF.readResolve();
      complex0.log();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.acos();
      Complex complex1 = complex0.I.log();
      complex1.I.asin();
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.ZERO.atan();
      complex4.I.sqrt();
      Complex complex5 = complex3.ONE.conjugate();
      complex5.I.sqrt1z();
      int int0 = (-1287);
      try { 
        complex0.nthRoot((-1287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,287
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.NaN.tan();
      complex2.ONE.pow(complex1);
      complex2.ONE.sin();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.negate();
      complex0.reciprocal();
      Complex complex1 = complex0.multiply(1415.441872538);
      Complex complex2 = complex1.reciprocal();
      complex2.ZERO.pow(4987.0473417);
      Complex.valueOf((-2010.1));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(3846.37151312);
      Complex complex1 = complex0.ZERO.asin();
      complex0.cos();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.toString();
      complex1.NaN.readResolve();
      complex0.abs();
      complex0.readResolve();
      Complex complex2 = complex0.cosh();
      complex0.getImaginary();
      Complex complex3 = complex0.pow(0.4311734437942505);
      complex3.NaN.divide(complex2);
      complex3.ZERO.getField();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-65.98135));
      Complex complex1 = complex0.NaN.createComplex(Double.POSITIVE_INFINITY, (-65.98135));
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.NaN.cosh();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex5.INF.atan();
      Complex complex7 = complex5.I.multiply(1044.6);
      complex7.I.multiply(1);
      complex3.ZERO.hashCode();
      complex4.hashCode();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, (-6.432337568761393E161));
      complex8.pow((-65.98135));
      Complex complex9 = complex0.subtract(complex5);
      Complex complex10 = complex9.NaN.subtract(complex2);
      Complex complex11 = complex6.cos();
      complex11.NaN.acos();
      complex6.isInfinite();
      Complex complex12 = complex4.negate();
      complex4.subtract(0.678390383720398);
      complex12.divide(complex10);
      complex8.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = (-868.800041999156);
      Complex complex0 = Complex.valueOf((-868.800041999156), (-868.800041999156));
      Complex complex1 = complex0.tanh();
      complex0.I.abs();
      double double1 = 1.0918686389923096;
      complex0.INF.pow(1.0918686389923096);
      Complex complex2 = complex0.createComplex(1.0, 1.0918686389923096);
      complex2.INF.hashCode();
      Complex complex3 = complex2.NaN.sqrt();
      complex0.isInfinite();
      complex0.getReal();
      complex3.divide(complex1);
      Complex complex4 = Complex.valueOf((-868.800041999156));
      Complex complex5 = complex4.ZERO.subtract(0.0);
      complex4.ONE.atan();
      complex5.INF.sqrt1z();
      try { 
        complex5.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex.valueOf(0.0);
      complex0.I.nthRoot(928);
      Complex complex1 = Complex.valueOf((double) 928);
      complex0.INF.add(complex1);
      complex0.log();
      Complex complex2 = complex0.sinh();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide(0.0);
      complex1.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.INF.divide(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.log();
      complex5.ONE.multiply(0.0);
      complex3.ONE.divide(complex4);
      complex2.ZERO.sin();
      complex0.divide(3610.43407546354);
      complex3.sinh();
      complex0.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-3906.544376), 4.406750291994231E-9);
      Complex complex1 = complex0.I.multiply(4.406750291994231E-9);
      Complex complex2 = complex0.I.multiply(0);
      complex2.INF.getArgument();
      complex0.getReal();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex3.ZERO.pow((-3906.544376));
      Complex complex5 = complex4.INF.createComplex(3012.220178, 1.0);
      Complex complex6 = complex5.ONE.sqrt1z();
      complex1.sqrt();
      complex4.NaN.getArgument();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.INF.divide(0.7853981633974483);
      complex8.ONE.getField();
      complex2.ONE.toString();
      Complex complex9 = complex1.ZERO.pow(complex2);
      complex7.NaN.asin();
      complex7.isNaN();
      Complex complex10 = complex1.cos();
      complex10.ONE.sinh();
      complex0.pow(940.8094229);
      Complex complex11 = complex9.sinh();
      complex7.tan();
      complex6.sqrt1z();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1698.9271);
      complex0.ONE.multiply(1698.9271);
      complex0.I.abs();
      Complex complex1 = complex0.ZERO.cosh();
      complex1.NaN.divide(1.0);
      complex0.getField();
      complex0.ONE.atan();
      Complex complex2 = complex0.sqrt();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = (-8.316530604593264E105);
      Complex complex0 = Complex.valueOf((-8.316530604593264E105), (-601.01014636181));
      complex0.ZERO.tanh();
      Complex complex1 = Complex.valueOf((-454.306709), 2409.0267);
      Complex complex2 = complex0.subtract(complex1);
      int int0 = (-162);
      try { 
        complex2.NaN.nthRoot((-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -162
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(763.933850357);
      complex1.I.add(1906.6669255);
      complex0.ZERO.abs();
      complex0.getField();
      complex0.conjugate();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.reciprocal();
      complex1.sqrt1z();
      Complex complex4 = complex0.tanh();
      complex0.INF.tan();
      Complex complex5 = new Complex((-580.4242));
      Complex.valueOf(0.0, 763.933850357);
      Complex complex6 = complex4.NaN.multiply(complex5);
      complex2.negate();
      complex3.subtract(complex0);
      Complex complex7 = complex4.multiply((-1));
      Complex.valueOf(763.933850357, (double) (-1));
      complex6.getReal();
      complex4.pow(complex7);
      Complex complex8 = complex4.createComplex(2678.17, (-580.4242));
      complex6.divide(complex8);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.subtract(complex1);
      complex0.getReal();
      complex0.NaN.tan();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.INF.acos();
      complex3.exp();
      complex2.ONE.sqrt1z();
      Complex complex5 = complex2.tan();
      complex5.ONE.multiply(complex0);
      complex0.getReal();
      complex1.getArgument();
      complex3.abs();
      complex1.multiply(0);
      complex1.getImaginary();
      complex0.toString();
      complex4.hashCode();
      Complex.valueOf(Double.NaN);
      complex2.conjugate();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(3838.274225, 477.764381532);
      Complex complex1 = complex0.add(3838.274225);
      complex1.ZERO.subtract(complex0);
      complex1.sqrt1z();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1204);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(3079.3, 3079.3);
      Complex complex2 = complex0.add(1.0);
      complex2.hashCode();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex0.ONE.negate();
      Complex complex3 = complex0.I.sin();
      complex2.ONE.getField();
      complex1.I.toString();
      complex0.getImaginary();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.tanh();
      complex5.ONE.toString();
      Complex complex6 = complex2.conjugate();
      complex6.NaN.getArgument();
      Complex complex7 = complex4.asin();
      complex6.NaN.asin();
      Complex complex8 = complex4.NaN.negate();
      Complex complex9 = complex5.INF.sin();
      complex9.NaN.cosh();
      Complex.valueOf(Double.NaN, 0.0);
      complex5.NaN.subtract(503.21465231);
      Complex complex10 = complex5.NaN.log();
      Complex complex11 = complex3.add(complex5);
      complex7.multiply(complex3);
      complex7.getImaginary();
      Complex complex12 = complex0.reciprocal();
      complex11.getArgument();
      complex7.isNaN();
      complex7.multiply((-48));
      complex8.getArgument();
      complex2.getArgument();
      complex12.abs();
      complex8.pow((-2152.6112));
      complex10.exp();
      complex4.add((double) (-48));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.abs();
      complex2.getField();
      complex1.equals(complex2);
      complex0.ZERO.subtract(complex2);
      Complex complex3 = complex2.sin();
      complex3.exp();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.isInfinite();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex1.NaN.multiply(1312);
      Complex complex4 = complex0.ONE.conjugate();
      complex0.multiply(1013);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.NaN.pow(complex0);
      Complex complex8 = complex7.I.reciprocal();
      Complex complex9 = complex0.add(0.0);
      Complex complex10 = complex9.ONE.subtract(complex1);
      Complex complex11 = complex10.pow((-1.0));
      Complex complex12 = complex8.reciprocal();
      Complex complex13 = complex0.sin();
      Complex complex14 = complex7.I.tan();
      Complex complex15 = complex14.ZERO.subtract(complex13);
      assertEquals(0.7615941559557649, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      
      Complex complex16 = complex6.add((double) 1013);
      Complex complex17 = complex16.INF.multiply(complex11);
      Complex complex18 = complex16.ONE.pow(60.277);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex19 = complex5.add((double) 1312);
      complex7.sinh();
      Complex complex20 = Complex.valueOf((-3146.0), (double) 1312);
      Complex complex21 = complex20.sinh();
      assertEquals(Double.NEGATIVE_INFINITY, complex21.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex21.getReal(), 0.01);
      
      complex20.NaN.multiply((-2198.95833318));
      Complex complex22 = complex12.asin();
      assertEquals(0.8813735870195428, complex22.getImaginary(), 0.01);
      
      Complex complex23 = complex2.tan();
      double double0 = complex4.getImaginary();
      assertEquals(-0.0, double0, 0.01);
      
      Complex complex24 = complex7.asin();
      assertSame(complex24, complex3);
      
      Complex complex25 = complex19.acos();
      assertEquals(7.873216909620541, complex25.getImaginary(), 0.01);
      
      Complex complex26 = complex12.cos();
      assertTrue(complex5.equals((Object)complex18));
      assertEquals((-1.0), complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertSame(complex7, complex23);
      assertFalse(complex5.equals((Object)complex6));
      assertEquals(1.5430806348152437, complex26.getReal(), 0.01);
      assertSame(complex7, complex17);
      assertTrue(complex0.equals((Object)complex15));
  }
}
