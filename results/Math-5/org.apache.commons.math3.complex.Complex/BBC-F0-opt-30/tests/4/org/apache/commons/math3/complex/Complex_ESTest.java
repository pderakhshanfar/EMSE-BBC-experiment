/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:47:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.04743316493689553, 0.04743316493689553);
      complex0.getField();
      Complex.valueOf(2347.65484, 455.8);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.NaN.divide(complex1);
      complex3.INF.divide(complex1);
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = Complex.valueOf(0.04743316493689553, 1527.14251247);
      complex5.ZERO.sqrt();
      Complex complex6 = Complex.valueOf(0.04743316493689553, (-1746.82162411));
      complex6.ZERO.getArgument();
      complex0.toString();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.add(0.04743316493689553);
      complex8.toString();
      Complex complex9 = complex8.conjugate();
      complex0.log();
      complex2.asin();
      Complex complex10 = complex1.asin();
      Complex complex11 = Complex.valueOf(0.0, 1527.14251247);
      Complex complex12 = complex4.log();
      complex11.tan();
      complex2.divide((-56.15067098));
      complex9.cos();
      Complex complex13 = complex12.divide(complex1);
      Complex complex14 = complex10.atan();
      complex13.sinh();
      complex14.readResolve();
      complex11.sqrt();
      complex12.asin();
      complex12.multiply(1.8897287602527537E-15);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5419.035437178), Double.POSITIVE_INFINITY);
      complex0.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      complex1.ONE.conjugate();
      Complex complex2 = new Complex(2509.19686507439);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.ONE;
      complex5.log();
      complex2.nthRoot(789);
      Complex complex6 = new Complex(789, 2509.19686507439);
      Complex complex7 = Complex.valueOf((-45.55766030330455), Double.POSITIVE_INFINITY);
      complex7.multiply(complex3);
      complex6.pow(complex1);
      complex5.sinh();
      Complex complex8 = Complex.I;
      Complex complex9 = new Complex(2110.4922511217);
      complex8.pow(complex4);
      Complex complex10 = new Complex(Double.NaN);
      complex10.tan();
      Complex complex11 = Complex.valueOf((double) (-2669));
      complex11.multiply((-2669));
      Complex complex12 = new Complex(6.283185307179586);
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.NaN;
      complex2.log();
      Complex complex3 = Complex.NaN;
      complex2.nthRoot(789);
      Complex complex4 = new Complex(789, 789);
      Complex complex5 = Complex.valueOf(1022.1654316, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.multiply(complex5);
      complex1.pow(complex0);
      Complex complex7 = complex6.sinh();
      Complex complex8 = Complex.I;
      complex0.sinh();
      Complex complex9 = complex7.pow(complex5);
      Complex complex10 = complex9.tan();
      complex10.INF.sqrt();
      Complex.valueOf(1.3004305362701416);
      complex5.multiply(789);
      complex3.divide(4476.586768208679);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply((-1.0));
      Complex complex1 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = new Complex((-1655.52099), 7);
      Complex complex5 = Complex.I;
      complex0.multiply(7);
      complex2.multiply(3122);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-5.004237248003625E181), 2978.235717790318);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.acos();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.113777493699801, (-3.614672661225457E131));
      complex0.sqrt1z();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(6.119114404399683E189, 6.283185307179586);
      complex1.sqrt1z();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(8.974417915105033E-9, (-20.0));
      Complex complex1 = Complex.ZERO;
      complex1.toString();
      Complex complex2 = complex1.cos();
      complex0.getReal();
      complex1.hashCode();
      Complex complex3 = complex0.subtract(220503.09679635643);
      Complex.valueOf(8.974417915105033E-9);
      complex0.reciprocal();
      complex2.sin();
      complex3.tan();
      Complex complex4 = Complex.I;
      complex2.createComplex(226607.29245047303, 952.0646878236735);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(8.974417915105033E-9, 8.974417915105033E-9);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = new Complex(8.974417915105033E-9, 8.974417915105033E-9);
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.negate();
      complex6.ZERO.sinh();
      complex2.tanh();
      complex4.cos();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 1.1541756557557508E254);
      complex0.NaN.multiply((-20.0));
      Complex complex1 = complex0.subtract(2957.85795246);
      Complex complex2 = complex1.asin();
      complex2.atan();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex2.tanh();
      Complex.valueOf((-996.954867008542), 2957.85795246);
      complex1.tanh();
      complex2.abs();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex1.I.sqrt();
      complex3.NaN.divide(6.114627333826402E-4);
      complex5.subtract(6.283185307179586);
      complex3.sin();
      complex3.sqrt();
      complex0.sinh();
      Complex complex7 = complex6.tanh();
      complex7.INF.multiply((-2725.0473));
      complex1.abs();
      Complex complex8 = complex4.negate();
      complex8.multiply(6.283185307179586);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.toString();
      Complex complex2 = complex1.cos();
      complex2.getReal();
      complex1.hashCode();
      Complex complex3 = complex2.subtract(Double.NaN);
      Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.reciprocal();
      complex4.sin();
      Complex complex5 = new Complex(Double.NaN, Double.NaN);
      Complex complex6 = new Complex((-2098.334407807));
      Complex complex7 = complex6.tan();
      complex2.tanh();
      complex7.tanh();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.negate();
      complex0.ZERO.multiply(complex1);
      complex0.nthRoot(337);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(8.974417915105033E-9, 8.974417915105033E-9);
      complex0.sqrt1z();
      complex0.sin();
      Complex complex1 = new Complex((-4.012947040998503E-8), 20.0);
      complex1.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.negate();
      complex4.tanh();
      complex1.add(3.141592653589793);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(complex0);
      Complex complex2 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex((-3.791840683760427E173));
      complex3.divide(complex2);
      complex2.toString();
      Complex complex4 = Complex.I;
      complex4.createComplex((-3.791840683760427E173), Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.multiply((-2294));
      Complex.valueOf((-6.84498182342811), 2127.461155605262);
      complex5.atan();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 400;
      Complex complex1 = complex0.subtract((double) 400);
      try { 
        complex1.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(complex0);
      complex1.getReal();
      complex1.hashCode();
      complex1.subtract(Double.NaN);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.reciprocal();
      complex1.sin();
      complex2.sin();
      complex2.INF.getArgument();
      complex3.tan();
      Complex complex4 = complex2.tan();
      complex2.negate();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      complex1.toString();
      Complex complex3 = complex0.cos();
      complex3.getReal();
      complex2.hashCode();
      Complex complex4 = complex0.subtract(4525.359506512037);
      complex2.negate();
      Complex complex5 = complex0.reciprocal();
      complex4.atan();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex3.sin();
      complex6.tan();
      complex7.tan();
      complex0.negate();
      complex4.tanh();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.reciprocal();
      complex0.asin();
      Complex complex3 = Complex.ZERO;
      complex0.pow(complex2);
      complex0.getArgument();
      Complex complex4 = new Complex((-2.0), Double.POSITIVE_INFINITY);
      complex4.getField();
      Complex complex5 = new Complex(1.5707963267948966, 4283.076792719399);
      Complex complex6 = complex0.tan();
      complex5.isNaN();
      Complex complex7 = Complex.ZERO;
      complex6.pow(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.ZERO.tanh();
      complex1.createComplex(1.000000183592449, 1.000000183592449);
      complex1.INF.sqrt1z();
      complex1.ZERO.hashCode();
      complex0.INF.readResolve();
      Complex complex2 = complex0.NaN.conjugate();
      complex0.readResolve();
      Complex complex3 = complex0.multiply(2283);
      Complex complex4 = complex2.ONE.tanh();
      complex3.abs();
      Complex complex5 = Complex.valueOf(Double.NaN, (double) 2283);
      complex5.multiply(complex0);
      Complex complex6 = Complex.valueOf((double) 2283, (-2707.05));
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex7.pow(Double.NaN);
      Complex complex9 = complex7.NaN.asin();
      complex9.sinh();
      Complex complex10 = complex3.cos();
      complex10.ONE.sqrt();
      complex0.pow((double) 2283);
      complex1.reciprocal();
      complex1.INF.readResolve();
      complex1.pow(1012.3704568574);
      complex1.pow(complex5);
      complex4.sin();
      complex8.divide(0.11268591954982554);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.380768633203808, 4.380768633203808);
      Complex complex1 = complex0.subtract(4.380768633203808);
      complex0.atan();
      complex1.sin();
      Complex complex2 = new Complex(7117.014, 4.380768633203808);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.tan();
      complex6.negate();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.reciprocal();
      complex1.asin();
      Complex complex3 = Complex.ZERO;
      complex2.pow(complex0);
      complex0.getArgument();
      complex2.getField();
      Complex complex4 = new Complex(1, (-338.71));
      complex4.tan();
      Complex complex5 = Complex.valueOf((-338.71), 2.0);
      complex5.multiply(317);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(complex0);
      Complex.valueOf(20.0);
      Complex complex2 = new Complex(20.0);
      complex0.readResolve();
      Complex complex3 = new Complex(20.0, 20.0);
      complex0.equals(complex3);
      complex3.abs();
      complex1.tanh();
      complex0.cos();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-469.5786375));
      Complex complex1 = complex0.acos();
      complex1.subtract(complex0);
      complex1.INF.toString();
      Complex complex2 = complex1.cos();
      complex0.getReal();
      Complex complex3 = complex2.NaN.exp();
      complex3.hashCode();
      complex0.NaN.subtract((-469.5786375));
      complex0.INF.nthRoot(37);
      Complex complex4 = complex1.negate();
      complex4.ZERO.reciprocal();
      complex0.ONE.atan();
      Complex complex5 = complex2.sin();
      complex3.sin();
      complex1.tan();
      Complex complex6 = complex5.tan();
      complex6.negate();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2020.17), (-1128492.1877913598));
      Complex complex1 = complex0.subtract((-1128492.1877913598));
      complex1.pow(676.863838);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-220.848846640092));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex1.ONE.acos();
      complex0.INF.abs();
      complex3.ZERO.nthRoot(843);
      Complex complex4 = complex1.INF.subtract((-9.377320954068088E-8));
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.nthRoot(1);
      Complex complex6 = complex5.ZERO.atan();
      Complex complex7 = complex0.reciprocal();
      complex7.exp();
      Complex complex8 = (Complex)complex2.NaN.readResolve();
      complex7.asin();
      complex0.subtract(complex7);
      complex7.isNaN();
      complex5.pow(complex0);
      complex0.toString();
      complex1.getField();
      Complex complex9 = complex6.tan();
      complex2.isNaN();
      complex9.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex2.divide(Double.POSITIVE_INFINITY);
      complex8.reciprocal();
      complex9.sqrt();
      complex7.subtract((-220.848846640092));
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 0.3831497249319151;
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.sqrt1z();
      int int0 = 1;
      complex2.nthRoot(1);
      Complex complex4 = Complex.INF;
      complex4.atan();
      Complex complex5 = complex1.reciprocal();
      complex4.exp();
      complex3.readResolve();
      Complex complex6 = complex5.asin();
      complex6.cos();
      Complex complex7 = Complex.ZERO;
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      complex0.getImaginary();
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.log();
      complex0.readResolve();
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.valueOf(1499.2607841951485);
      Complex complex7 = complex6.subtract(complex3);
      complex1.isNaN();
      complex0.pow(complex2);
      complex2.toString();
      complex3.getArgument();
      complex0.getField();
      complex4.tan();
      Complex complex8 = Complex.I;
      complex7.isNaN();
      complex1.add(Double.NaN);
      complex6.atan();
      Complex.valueOf(1499.2607841951485);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(1499.2607841951485, 1.0);
      complex0.toString();
      complex0.getImaginary();
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = complex1.exp();
      complex0.log();
      Complex complex3 = Complex.INF;
      complex0.sqrt1z();
      complex2.asin();
      Complex complex4 = Complex.I;
      complex1.divide(complex3);
      Complex complex5 = Complex.ZERO;
      complex5.ZERO.sinh();
      Complex complex6 = Complex.INF;
      Complex complex7 = (Complex)complex2.readResolve();
      complex6.equals(complex7);
      Complex complex8 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(970.4240187);
      Complex complex4 = complex0.tanh();
      complex2.readResolve();
      complex0.equals(complex2);
      complex3.abs();
      Complex complex5 = complex2.sin();
      complex0.abs();
      complex1.sqrt1z();
      complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.negate();
      complex5.subtract((-2157.2));
      complex4.pow((-5.2528066));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(1543, 1.0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-220.848846640092));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.atan();
      complex0.ZERO.readResolve();
      Complex complex3 = complex1.ONE.acos();
      complex0.INF.abs();
      complex3.ZERO.nthRoot(843);
      Complex complex4 = complex1.INF.subtract((-9.377320954068088E-8));
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.nthRoot(1);
      complex5.ZERO.atan();
      complex0.reciprocal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.NaN.readResolve();
      complex1.tanh();
      Complex.valueOf((-2704.4608600759), (-220.848846640092));
      complex4.abs();
      complex5.sqrt1z();
      complex0.createComplex(0.7080734182735711, 870.789229130564);
      Complex complex6 = complex5.negate();
      complex6.ZERO.readResolve();
      Complex complex7 = Complex.INF;
      complex5.subtract(0.3831497249319151);
      complex4.pow(0.3831497249319151);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.I.conjugate();
      complex0.abs();
      Complex complex2 = new Complex(1.0);
      complex2.NaN.subtract(1.0);
      complex2.nthRoot(3498);
      Complex complex3 = Complex.ZERO;
      complex3.subtract((double) 3498);
      complex1.sqrt1z();
      int int0 = 1;
      // Undeclared exception!
      complex3.nthRoot(2494);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.asin();
      complex4.I.getField();
      complex0.NaN.sinh();
      Complex complex5 = complex3.NaN.pow(complex0);
      Complex complex6 = new Complex(6.325250972278283E-6);
      Complex complex7 = complex6.subtract(complex2);
      complex6.isNaN();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex7.pow(complex8);
      Complex complex10 = complex0.NaN.reciprocal();
      complex0.toString();
      Complex.valueOf(6.325250972278283E-6, 2.0898001476780736);
      complex5.getArgument();
      complex9.getField();
      complex7.tan();
      complex0.getArgument();
      complex0.getField();
      Complex complex11 = complex1.tan();
      complex10.isNaN();
      Complex complex12 = Complex.valueOf(6.325250972278283E-6, Double.NaN);
      complex12.createComplex(Double.NaN, 0.0);
      complex9.divide(2.0898001476780736);
      complex10.reciprocal();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.exp();
      complex2.ONE.toString();
      Complex complex3 = complex1.ONE.multiply(complex0);
      complex3.ONE.abs();
      Complex complex4 = Complex.valueOf((-2157.2));
      complex4.ONE.readResolve();
      complex1.ONE.cos();
      complex1.tanh();
      complex0.equals(complex0);
      complex0.abs();
      Complex complex5 = complex1.sin();
      complex5.abs();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex1.createComplex((-3133.1), 0.0);
      Complex complex8 = complex6.negate();
      complex8.ZERO.subtract(86347.32992092545);
      Complex complex9 = complex7.pow(1.0);
      complex9.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.INF.divide(complex2);
      complex1.ONE.negate();
      Complex complex4 = Complex.valueOf(0.0, (-3318.133032844192));
      complex4.ZERO.multiply(353);
      complex1.ZERO.abs();
      Complex complex5 = complex1.INF.multiply(1243.2920299613);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex0.I.add(1243.2920299613);
      Complex complex8 = complex0.asin();
      Complex complex9 = complex1.add(1243.2920299613);
      complex9.ZERO.readResolve();
      Complex complex10 = complex1.subtract(1243.2920299613);
      Complex complex11 = complex10.pow(complex8);
      complex11.NaN.exp();
      complex10.atan();
      Complex complex12 = complex8.divide((-2317.63));
      complex7.acos();
      complex3.pow(complex4);
      Complex complex13 = complex7.sin();
      complex13.toString();
      complex7.equals(complex12);
      complex10.sinh();
      complex1.INF.multiply(1243.2920299613);
      complex3.asin();
      complex3.abs();
      complex6.getReal();
      complex5.multiply(complex12);
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-3203.359409), (-3203.359409));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.ONE.divide((-109.615817));
      complex2.ZERO.sinh();
      Complex complex3 = complex0.NaN.add(complex1);
      complex3.INF.conjugate();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.multiply((-3203.359409));
      complex4.NaN.reciprocal();
      complex3.INF.multiply((-359));
      complex5.readResolve();
      Complex complex7 = complex0.multiply((-3203.359409));
      complex7.exp();
      Complex complex8 = complex7.INF.subtract(complex4);
      complex3.getField();
      complex8.sinh();
      complex7.negate();
      complex0.cosh();
      Complex complex9 = Complex.valueOf((-109.615817));
      complex6.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.exp();
      complex2.ONE.toString();
      complex1.ONE.multiply(complex0);
      Complex.valueOf((-2157.2));
      complex1.ONE.cos();
      complex1.tanh();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.abs();
      Complex complex3 = complex1.sin();
      complex3.abs();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex1.createComplex((-3133.1), 0.0);
      Complex complex6 = complex4.negate();
      complex6.ZERO.subtract(86347.32992092545);
      complex5.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(495.9674302, Double.NaN);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex2.pow(Double.NaN);
      Complex complex7 = complex4.divide((-1494.87));
      Complex complex8 = complex3.acos();
      complex6.exp();
      complex7.exp();
      Complex complex9 = complex8.cos();
      complex4.divide((-1.0000000000000016));
      Complex complex10 = complex5.createComplex((-2584.0), 5.74188943005538E-4);
      complex1.atan();
      Complex complex11 = Complex.ONE;
      Complex complex12 = new Complex((-1.0000000000000016));
      complex10.subtract(complex12);
      complex2.isInfinite();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(8.974417915105033E-9, 870.789229130564);
      Complex complex1 = complex0.exp();
      complex1.pow(complex0);
      complex1.tanh();
      complex0.cosh();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.conjugate();
      Complex complex2 = complex1.reciprocal();
      complex2.multiply(648);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(8.974417915105033E-9, 8.974417915105033E-9);
      Complex complex1 = new Complex(8.974417915105033E-9, 8.974417915105033E-9);
      Complex complex2 = complex1.sqrt1z();
      complex2.getArgument();
      Complex complex3 = complex1.conjugate();
      complex0.log();
      Complex complex4 = complex2.cosh();
      complex2.exp();
      complex0.getReal();
      complex2.getField();
      complex4.asin();
      Complex complex5 = (Complex)complex3.readResolve();
      complex0.atan();
      complex4.exp();
      complex5.multiply((-2049870754));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.ONE.asin();
      complex5.I.getField();
      complex0.NaN.sinh();
      Complex complex6 = complex4.NaN.pow(complex0);
      Complex complex7 = new Complex(6.325250972278283E-6);
      Complex complex8 = complex7.subtract(complex3);
      complex0.isNaN();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.pow(complex9);
      complex0.NaN.reciprocal();
      complex0.toString();
      Complex.valueOf(6.325250972278283E-6, 2.0898001476780736);
      complex6.getArgument();
      complex10.getField();
      complex8.tan();
      Complex complex11 = Complex.I;
      complex5.isNaN();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex1.createComplex(6.325250972278283E-6, 6.325250972278283E-6);
      complex2.divide(Double.NaN);
      complex6.reciprocal();
      complex12.sqrt();
      complex13.getImaginary();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.8359244902596882E-7), (-1.8359244902596882E-7));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide((-1.8359244902596882E-7));
      complex3.atan();
      complex3.exp();
      complex3.equals(complex1);
      complex0.cos();
      complex0.readResolve();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(1499.2607841951485, 1.0);
      complex0.toString();
      complex0.getImaginary();
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.log();
      complex0.readResolve();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.cos();
      Complex complex6 = Complex.valueOf(1499.2607841951485);
      complex6.subtract(complex3);
      complex1.isNaN();
      Complex complex7 = complex0.pow(complex2);
      complex2.toString();
      complex3.getArgument();
      complex0.getField();
      complex4.tan();
      Complex complex8 = Complex.I;
      complex2.isNaN();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex1.createComplex(9.121018827231587E-5, (-2022.95467675012));
      complex10.divide((-46.0));
      Complex complex11 = complex5.reciprocal();
      complex11.sqrt();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3831497249319151, 1.0);
      complex0.nthRoot(3526);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.reciprocal();
      complex0.NaN.multiply(complex2);
      Complex.valueOf(0.38836257074240166, (-3241.5903));
      complex1.divide(complex3);
      Complex complex4 = Complex.valueOf((-3241.5903));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf((-1417.33172984), (-86.58445));
      complex3.pow(complex7);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.pow((-3241.5903));
      complex2.divide((double) 3526);
      complex6.acos();
      Complex complex10 = complex5.exp();
      Complex complex11 = complex5.exp();
      complex2.cos();
      complex11.divide(2.0);
      Complex complex12 = complex9.createComplex(2.0, Double.POSITIVE_INFINITY);
      complex10.atan();
      Complex complex13 = Complex.ONE;
      complex13.INF.getArgument();
      Complex complex14 = new Complex((-2718.6944216865472));
      complex14.subtract(complex10);
      complex14.isInfinite();
      complex7.tanh();
      complex12.nthRoot(3526);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex0.getField();
      Complex complex2 = complex1.asin();
      complex2.readResolve();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.exp();
      complex4.ZERO.add((-3.3447728287683276E-4));
      complex3.equals((Object) null);
      complex3.cos();
      complex3.readResolve();
      Complex.valueOf((-511.25085), 876.289547567);
      complex1.subtract(complex0);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-220.848846640092));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.atan();
      complex0.ZERO.readResolve();
      Complex complex3 = complex1.ONE.acos();
      complex0.INF.abs();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.conjugate();
      complex1.log();
      complex2.cosh();
      complex5.getReal();
      ComplexField complexField0 = complex1.getField();
      complex1.asin();
      complex0.readResolve();
      Complex complex6 = complex0.exp();
      complex0.equals(complexField0);
      complex2.cos();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.6496143246803731E199);
      complex3.readResolve();
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(1499.2607841951485, 1.0);
      complex0.toString();
      complex0.getImaginary();
      complex0.INF.readResolve();
      Complex complex1 = Complex.valueOf(1.0, (-1494.87));
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf((-1494.87));
      Complex complex5 = complex3.add(complex4);
      complex4.asin();
      Complex complex6 = Complex.ZERO;
      complex6.sqrt1z();
      complex1.getArgument();
      complex4.reciprocal();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      complex0.getArgument();
      Complex complex3 = complex0.conjugate();
      complex2.log();
      complex3.cosh();
      Complex complex4 = new Complex(8.974417915105033E-9);
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.NaN;
      complex6.getReal();
      complex1.getField();
      complex6.asin();
      complex5.readResolve();
      Complex complex7 = complex5.atan();
      Complex complex8 = complex7.exp();
      complex4.I.createComplex(1.6023339607737848E-7, 8.974417915105033E-9);
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      complex4.cos();
      complex8.readResolve();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3831497249319151, 1.0);
      complex0.nthRoot(3526);
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.exp();
      complex4.I.log();
      complex0.readResolve();
      complex1.asin();
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.subtract(complex1);
      complex0.isNaN();
      Complex complex7 = complex3.pow(complex0);
      complex5.toString();
      complex2.getArgument();
      complex7.getField();
      complex6.tan();
      Complex complex8 = Complex.I;
      complex8.isNaN();
      Complex complex9 = Complex.INF;
      complex9.createComplex(1173.0, 0.0);
      Complex complex10 = complex9.divide((double) 3526);
      complex7.reciprocal();
      complex10.sqrt();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = Complex.I;
      complex1.abs();
      complex1.nthRoot(3536);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex2.sqrt1z();
      complex4.nthRoot(1);
      complex0.atan();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex3.exp();
      complex4.readResolve();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.asin();
      complex3.cos();
      Complex complex10 = new Complex(8.054017691495817E-17, 193.915527);
      complex10.subtract(complex7);
      complex10.isNaN();
      complex0.pow(complex5);
      complex2.toString();
      complex5.getArgument();
      complex7.getField();
      Complex complex11 = Complex.I;
      complex11.tan();
      complex4.isNaN();
      complex9.createComplex(1, (-9.377320954068088E-8));
      complex5.divide(0.9999999999999998);
      Complex complex12 = complex6.reciprocal();
      complex4.sqrt();
      complex12.getImaginary();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3831497249319151, 1.0);
      Complex complex1 = new Complex(0.3831497249319151);
      Complex complex2 = complex1.exp();
      complex2.cos();
      complex2.divide(1.0);
      complex1.createComplex(1743.519571546129, 1.0);
      complex0.atan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex((-2584.0), (-2150.1487185731));
      complex4.subtract(complex3);
      complex3.isInfinite();
      Complex complex5 = new Complex((-719.0771), Double.NaN);
      Complex.valueOf((-2150.1487185731));
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-220.848846640092));
      Complex complex1 = complex0.INF.exp();
      complex1.ONE.atan();
      Complex complex2 = (Complex)complex0.ZERO.readResolve();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.ONE.acos();
      complex4.multiply(complex1);
      complex3.divide((-220.848846640092));
      complex2.negate();
      complex4.cosh();
      complex1.multiply((-220.848846640092));
      complex0.pow((-220.848846640092));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      complex1.NaN.hashCode();
      complex2.ZERO.pow(Double.POSITIVE_INFINITY);
      complex2.INF.readResolve();
      complex0.NaN.atan();
      complex0.exp();
      Complex complex3 = complex1.divide(588.9284658);
      complex0.multiply(0.0);
      complex3.getReal();
      Complex complex4 = complex0.reciprocal();
      complex4.ONE.sinh();
      Complex complex5 = complex3.conjugate();
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.acos();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.INF.sqrt1z();
      complex1.getArgument();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.log();
      complex4.cosh();
      Complex complex5 = complex4.I.exp();
      complex0.multiply(0.0);
      complex3.exp();
      complex4.tan();
      complex5.isNaN();
      int int0 = 1737;
      complex0.nthRoot(1737);
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      complex1.NaN.hashCode();
      Complex complex3 = complex2.ZERO.pow(Double.POSITIVE_INFINITY);
      complex3.ONE.createComplex(Double.POSITIVE_INFINITY, (-810.1528251301764));
      complex2.INF.readResolve();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.exp();
      Complex complex5 = complex1.divide(588.9284658);
      complex0.multiply(0.0);
      complex5.getReal();
      complex0.reciprocal();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(8.974417915105033E-9, 8.974417915105033E-9);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      complex2.getArgument();
      Complex complex3 = complex1.conjugate();
      complex0.log();
      Complex complex4 = complex2.cosh();
      complex2.exp();
      complex0.getReal();
      complex2.getField();
      Complex complex5 = complex4.asin();
      complex3.readResolve();
      complex0.atan();
      complex4.exp();
      complex1.equals("");
      Complex complex6 = complex5.cos();
      complex6.INF.readResolve();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      complex1.NaN.hashCode();
      complex2.INF.readResolve();
      complex0.exp();
      complex0.getArgument();
      Complex complex3 = complex2.reciprocal();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1627.9);
      complex0.ZERO.multiply(900.0396108839063);
      Complex complex1 = Complex.INF;
      complex1.add(complex0);
      Complex complex2 = complex0.asin();
      complex2.sqrt1z();
      Complex.valueOf(900.0396108839063);
      Complex complex3 = complex0.multiply(900.0396108839063);
      complex0.getReal();
      complex3.reciprocal();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3831497249319151, 1.0);
      Complex complex1 = new Complex(0.3831497249319151);
      complex0.equals(complex1);
      complex0.add(3.4223342273948817E-9);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.0541496276855469, 0.0);
      complex0.toString();
      complex1.getImaginary();
      complex0.readResolve();
      Complex complex2 = Complex.valueOf(0.0, (-3976.539620331));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.acos();
      Complex complex6 = complex3.tan();
      complex6.pow(complex5);
      complex0.pow((-1494.87));
      Complex complex7 = complex2.divide(0.0);
      Complex complex8 = complex3.acos();
      complex0.exp();
      complex8.exp();
      complex0.cos();
      complex8.divide((-7.81295459930537E-72));
      complex7.createComplex((-3976.539620331), (-20.0));
      complex4.atan();
      Complex complex9 = Complex.ONE;
      complex5.subtract(complex7);
      complex2.isInfinite();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.conjugate();
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.asin();
      complex3.getField();
      Complex complex6 = complex0.sinh();
      complex5.pow(complex3);
      Complex.valueOf(1.0);
      Complex complex7 = Complex.ONE;
      complex6.divide(complex7);
      complex7.isNaN();
      complex0.log();
      Complex complex8 = complex6.subtract(complex4);
      complex2.reciprocal();
      complex7.acos();
      complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(8.974417915105033E-9, 870.789229130564);
      Complex complex1 = complex0.exp();
      complex1.multiply(0);
      complex1.sqrt();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.asin();
      complex4.I.getField();
      Complex complex5 = complex0.NaN.sinh();
      complex3.NaN.pow(complex0);
      Complex complex6 = Complex.I;
      complex0.ONE.divide(complex3);
      complex0.isNaN();
      complex0.log();
      complex0.subtract(complex3);
      complex3.reciprocal();
      complex1.add(complex5);
      complex4.cos();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      complex0.conjugate();
      complex2.log();
      Complex complex3 = complex2.cosh();
      complex0.exp();
      Complex complex4 = Complex.ONE;
      complex4.getReal();
      complex3.getField();
      complex2.readResolve();
      Complex complex5 = complex1.atan();
      complex5.exp();
      Complex complex6 = Complex.NaN;
      complex2.equals(complex6);
      complex5.cos();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-215.5432285398), (-215.5432285398));
      complex0.toString();
      int int0 = 0;
      complex0.multiply(0);
      Complex complex1 = complex0.cosh();
      try { 
        complex1.nthRoot((-2514));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,514
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.exp();
      Complex complex1 = complex0.divide(Double.NaN);
      complex1.NaN.conjugate();
      Complex complex2 = complex1.add(Double.NaN);
      Complex complex3 = complex0.NaN.divide(Double.NaN);
      complex3.INF.conjugate();
      complex3.INF.acos();
      complex0.cosh();
      Complex complex4 = complex1.sin();
      complex4.INF.divide(complex2);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2228.1714104);
      Complex complex1 = complex0.ZERO.tanh();
      complex1.NaN.log();
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(1.0, 2228.1714104);
      complex0.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex2.asin();
      complex0.abs();
      complex1.INF.atan();
      complex4.hashCode();
      Complex complex6 = complex5.sin();
      complex4.getReal();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex6.ONE.multiply(1);
      complex8.NaN.tan();
      complex8.ONE.divide(complex2);
      complex6.toString();
      complex3.sqrt();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex9.ZERO.negate();
      complex10.INF.nthRoot(2076);
      complex2.pow(complex7);
      Complex.valueOf(2228.1714104, 1.8921151161193848);
      complex9.nthRoot(256);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sqrt1z();
      complex2.INF.abs();
      Complex complex3 = complex1.I.log();
      Complex complex4 = complex0.ZERO.log();
      complex1.NaN.getField();
      complex0.getArgument();
      complex4.INF.reciprocal();
      Complex complex5 = complex3.multiply(Double.NaN);
      complex5.ZERO.abs();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex5.exp();
      complex7.INF.nthRoot(127);
      Complex complex8 = complex4.exp();
      complex5.ONE.log();
      complex6.log();
      Complex complex9 = complex5.sin();
      Complex complex10 = Complex.I;
      complex0.multiply(complex10);
      Complex.valueOf(0.0);
      Complex complex11 = complex9.createComplex(0.0, (-2879.2630503));
      complex3.readResolve();
      complex1.multiply(complex7);
      complex11.hashCode();
      complex3.negate();
      complex4.getArgument();
      complex8.multiply(0);
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      complex0.negate();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.reciprocal();
      complex0.INF.getArgument();
      Complex complex3 = complex1.divide((-2.260047972865202E-8));
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.divide(complex2);
      complex3.isNaN();
      Complex complex6 = complex5.negate();
      complex0.getArgument();
      complex1.sin();
      complex3.negate();
      Complex complex7 = complex6.add(complex1);
      complex7.cos();
      complex4.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.multiply(900.0396108839063);
      Complex complex2 = complex0.sqrt();
      complex2.add(complex0);
      Complex complex3 = complex0.asin();
      complex3.sqrt1z();
      complex3.getArgument();
      complex1.reciprocal();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.negate();
      Complex complex4 = complex2.NaN.conjugate();
      Complex complex5 = complex4.NaN.add(complex3);
      complex5.INF.abs();
      complex5.INF.subtract(0.0);
      complex0.INF.multiply(complex4);
      complex4.divide(1976.9447683465924);
      Complex complex6 = complex0.I.sin();
      Complex complex7 = Complex.valueOf(567.82427889888, 567.82427889888);
      complex0.isInfinite();
      Complex complex8 = complex2.log();
      complex8.getImaginary();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex9.NaN.divide(complex1);
      complex8.I.getField();
      complex0.pow(complex6);
      complex4.cosh();
      Complex complex11 = complex7.sqrt();
      Complex complex12 = complex7.add(complex4);
      Complex complex13 = complex7.reciprocal();
      Complex complex14 = Complex.valueOf(1976.9447683465924);
      complex11.add(complex10);
      complex13.equals(complex8);
      complex4.pow(complex12);
      Complex complex15 = complex0.divide(complex3);
      complex15.ZERO.cos();
      complex14.sin();
      complex3.nthRoot(1643);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.ZERO.add(1663.510814525627);
      Complex complex3 = complex0.asin();
      complex0.asin();
      Complex complex4 = complex3.I.sqrt();
      complex2.toString();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.ZERO.divide(complex2);
      complex6.ONE.tanh();
      Complex complex7 = complex5.INF.tanh();
      Complex complex8 = complex5.NaN.add(complex3);
      Complex complex9 = complex8.ONE.sqrt1z();
      complex3.toString();
      complex4.conjugate();
      complex2.abs();
      complex3.abs();
      complex2.conjugate();
      complex1.multiply(596);
      complex9.isInfinite();
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-220.848846640092));
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.atan();
      complex0.ZERO.readResolve();
      Complex complex3 = complex1.ONE.acos();
      complex0.INF.abs();
      complex3.ZERO.nthRoot(843);
      complex1.INF.subtract((-9.377320954068088E-8));
      Complex complex4 = complex0.sqrt1z();
      complex4.ONE.nthRoot(1);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.exp();
      complex2.NaN.readResolve();
      complex6.asin();
      Complex complex8 = complex7.I.cos();
      complex0.subtract(complex6);
      complex6.isNaN();
      complex4.pow(complex0);
      complex0.toString();
      complex2.getArgument();
      complex1.getField();
      Complex complex9 = complex5.tan();
      complex2.isNaN();
      complex9.createComplex(0.0, 0.0);
      Complex complex10 = complex2.divide(Double.POSITIVE_INFINITY);
      complex8.reciprocal();
      complex9.sqrt();
      complex10.getImaginary();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(1499.2607841951485, 1.0);
      complex0.toString();
      complex0.getImaginary();
      complex0.INF.readResolve();
      Complex complex1 = Complex.valueOf(1.0, (-1494.87));
      complex1.ONE.divide(complex0);
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.I.tan();
      complex3.I.pow(complex2);
      Complex complex4 = complex2.INF.pow((-1494.87));
      complex4.INF.divide(1.0);
      complex4.NaN.acos();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.exp();
      complex5.INF.cos();
      complex6.NaN.divide((-7.81295459930537E-72));
      Complex complex7 = complex6.createComplex((-2584.0), 0.0);
      complex7.NaN.atan();
      Complex complex8 = Complex.ONE;
      complex7.ZERO.subtract(complex8);
      complex5.isInfinite();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(1766.7200695243);
      complex0.ZERO.negate();
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ZERO.cos();
      complex1.I.abs();
      complex0.getImaginary();
      Complex complex3 = Complex.valueOf(1766.7200695243);
      complex2.log();
      complex1.INF.add(1481.0120955);
      complex3.getArgument();
      complex2.nthRoot(266);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.getArgument();
      Complex complex1 = new Complex(1441.18327, 1441.18327);
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ONE.divide(0.0);
      Complex complex4 = complex0.NaN.createComplex(0.0, (-4457.5));
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex1.acos();
      complex1.ZERO.createComplex(1441.18327, 2537.52547);
      Complex.valueOf((-2.462631860370667E-9), 0.0);
      complex1.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.add(3459.07079693689);
      complex5.NaN.tanh();
      Complex complex8 = Complex.valueOf(1441.18327, 3459.07079693689);
      complex5.log();
      complex8.ZERO.subtract(complex1);
      complex5.getField();
      complex4.toString();
      Complex complex9 = complex7.log();
      complex9.NaN.sqrt();
      complex3.hashCode();
      complex3.add(0.0);
      complex7.getImaginary();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 175.1304);
      double double1 = (-3.197037359731606E-8);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getArgument();
      Complex complex1 = Complex.ONE;
      complex1.ONE.exp();
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex2.conjugate();
      Complex complex3 = complex0.exp();
      complex3.INF.toString();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.ZERO.createComplex(316.127, 0.0);
      Complex complex2 = complex0.ZERO.sinh();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex4.I.multiply((-1.0));
      Complex complex6 = complex2.exp();
      Complex complex7 = complex3.tan();
      complex7.isNaN();
      complex5.nthRoot(1737);
      complex2.divide(complex4);
      complex5.multiply(complex6);
      complex1.add(0.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.ONE.asin();
      complex4.I.getField();
      complex0.NaN.sinh();
      complex3.NaN.pow(complex0);
      Complex.valueOf((-111.119));
      Complex complex5 = complex0.ONE.divide(complex3);
      complex0.isNaN();
      complex0.log();
      complex0.subtract(complex3);
      complex3.reciprocal();
      complex5.acos();
      complex2.add(0.0);
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.add(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.INF.multiply(420);
      complex3.INF.getArgument();
      complex0.ZERO.getArgument();
      complex3.INF.readResolve();
      complex3.ONE.reciprocal();
      complex1.acos();
      complex3.sqrt1z();
      complex2.NaN.acos();
      complex1.nthRoot(1);
      complex0.cosh();
      complex3.getReal();
      complex1.pow((-1467.76));
      complex2.asin();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex0.subtract(1607.125874);
      Complex complex5 = complex4.ONE.exp();
      Complex complex6 = complex3.acos();
      complex6.NaN.acos();
      complex6.ONE.log();
      Complex complex7 = complex4.atan();
      complex7.NaN.abs();
      Complex complex8 = complex1.sin();
      complex1.NaN.sinh();
      Complex complex9 = complex0.exp();
      complex9.I.negate();
      Complex complex10 = complex9.tan();
      complex10.I.asin();
      Complex.valueOf(4684.0);
      complex5.nthRoot(1);
      complex8.tan();
      complex5.log();
      Complex complex11 = complex7.negate();
      complex11.I.divide(complex3);
      complex0.isInfinite();
      complex5.abs();
      complex4.cosh();
      complex9.sqrt1z();
      complex11.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.10467669367790222, 0.10467669367790222);
      complex0.getImaginary();
      complex0.I.multiply(0.0);
      Complex complex1 = Complex.valueOf(0.10467669367790222, 0.0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.log();
      complex0.multiply(complex2);
      complex3.negate();
      complex1.pow(0.0);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.divide(0.0);
      complex1.INF.toString();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.sinh();
      Complex complex4 = Complex.valueOf(0.0);
      complex3.toString();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.negate();
      complex5.isNaN();
      Complex complex7 = complex6.log();
      complex4.sin();
      complex4.nthRoot(1);
      complex4.ZERO.multiply((-2444.073759638));
      complex0.add(0.0);
      Complex.valueOf(2157.028016338355, 0.0);
      complex7.multiply(complex3);
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.subtract(complex7);
      complex0.sin();
      complex9.toString();
      complex3.nthRoot(1);
      complex2.isInfinite();
      complex8.INF.hashCode();
      try { 
        complex9.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6654226779937744, 0.6654226779937744);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.ZERO.pow(complex2);
      Complex complex4 = complex2.reciprocal();
      complex4.ONE.negate();
      Complex complex5 = Complex.ONE;
      complex0.equals(complex5);
      Complex.valueOf((-814.98985417));
      Complex complex6 = complex2.createComplex(0.6654226779937744, 0.6654226779937744);
      Complex complex7 = complex1.ZERO.conjugate();
      complex7.ZERO.divide((-814.98985417));
      complex6.NaN.add(complex1);
      complex6.I.pow(0.6654226779937744);
      complex1.getArgument();
      Object object0 = complex2.readResolve();
      complex4.ONE.multiply(complex6);
      complex0.equals(object0);
      complex3.subtract(0.6654226779937744);
      complex5.ZERO.pow(complex2);
      complex1.getImaginary();
      complex4.divide(complex5);
      complex5.abs();
      complex5.divide(0.6654226779937744);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = (-3.579433051074272E-240);
      Complex complex0 = Complex.valueOf((-3.579433051074272E-240));
      complex0.getArgument();
      int int0 = (-116);
      try { 
        complex0.nthRoot((-116));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -116
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-94.7), 3706.99230454536);
      complex0.NaN.toString();
      complex0.add((-1790.026843261881));
      Complex complex1 = complex0.tanh();
      complex0.abs();
      complex1.multiply((-572.0));
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.ZERO.subtract((-446.75840046227205));
      Complex complex3 = complex0.NaN.negate();
      complex2.I.abs();
      complex2.toString();
      complex2.ZERO.getField();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.log();
      complex3.negate();
      Complex complex6 = complex5.ZERO.cosh();
      complex6.sqrt();
      complex6.ONE.tanh();
      Complex complex7 = Complex.NaN;
      complex6.ONE.divide(complex7);
      complex6.ZERO.nthRoot(1);
      Complex complex8 = complex4.log();
      complex8.divide(complex1);
      complex4.INF.asin();
      int int0 = (-445);
      complex4.NaN.cosh();
      try { 
        complex3.nthRoot((-445));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -445
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.8359244902596882E-7), (-1.8359244902596882E-7));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.divide((-1.8359244902596882E-7));
      complex3.INF.negate();
      complex3.ONE.cosh();
      complex2.multiply((-1.8359244902596882E-7));
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-41.0), (-41.0));
      Complex complex1 = complex0.INF.divide((-41.0));
      Complex complex2 = complex1.INF.conjugate();
      complex0.ONE.multiply((-1967));
      complex2.I.conjugate();
      complex2.INF.subtract((-1561.816358434325));
      complex1.hashCode();
      Complex complex3 = complex0.multiply(0.0);
      complex3.NaN.readResolve();
      complex3.ZERO.sinh();
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex0.sinh();
      complex5.tanh();
      Complex complex6 = complex0.pow(complex5);
      complex6.NaN.tan();
      complex1.ZERO.add(0.0);
      complex0.I.multiply((-1561.816358434325));
      Complex complex7 = complex1.subtract((-1561.816358434325));
      complex7.INF.exp();
      complex3.sqrt1z();
      complex4.sin();
      Complex.valueOf(0.0, (-53.3495));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1712.95);
      Complex complex1 = complex0.ZERO.createComplex(1712.95, 1712.95);
      complex1.hashCode();
      complex1.ONE.createComplex(2453.3276389276825, 0.0);
      complex1.divide(565.5278);
      complex0.tanh();
      Complex complex2 = Complex.valueOf(590.97937207944);
      try { 
        complex2.nthRoot((-456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -456
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = complex1.ZERO.multiply(complex0);
      Complex complex4 = complex0.NaN.subtract(0.0);
      Complex complex5 = complex0.sqrt();
      complex4.log();
      complex4.reciprocal();
      complex2.createComplex(0.0, (-1959.842572742));
      complex5.asin();
      Complex.valueOf(3006.0824146, 0.0);
      complex3.multiply(1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.sqrt1z();
      complex2.I.subtract(complex0);
      complex2.INF.readResolve();
      complex0.reciprocal();
      complex0.divide(complex2);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.sinh();
      complex0.ZERO.nthRoot(344);
      complex1.INF.acos();
      Complex complex7 = Complex.valueOf(1.5747578144073486, 1.5747578144073486);
      Complex complex8 = complex1.acos();
      complex6.tanh();
      Complex complex9 = complex6.add(1.5747578144073486);
      complex5.getField();
      complex9.NaN.exp();
      complex5.I.sqrt1z();
      Complex complex10 = complex2.multiply((-3722.8922237450365));
      complex9.getField();
      complex10.NaN.abs();
      Complex.valueOf((-1803.089389664931), (-1803.089389664931));
      complex6.equals("");
      complex10.sqrt();
      complex3.subtract(605.691614886);
      complex4.reciprocal();
      complex7.atan();
      complex7.sqrt1z();
      complex8.createComplex((-2306.59), (-551.213313489));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex2.ONE.reciprocal();
      complex4.NaN.reciprocal();
      complex4.ONE.hashCode();
      Complex complex5 = complex0.createComplex(1959.9386, 1959.9386);
      Complex.valueOf(6.283185307179586);
      complex5.ONE.getArgument();
      complex0.getImaginary();
      complex5.divide(complex4);
      complex3.multiply(0.21135559678077698);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = Complex.INF;
      complex2.multiply(complex3);
      Complex complex4 = complex2.ONE.divide(complex0);
      complex4.ONE.sqrt1z();
      complex0.getArgument();
      Complex.valueOf(0.0);
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      Complex complex8 = complex0.I.sqrt1z();
      complex8.ZERO.cosh();
      Complex complex9 = complex5.pow(complex0);
      complex7.isInfinite();
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex10.INF.exp();
      Complex complex12 = complex11.INF.exp();
      complex12.divide(complex6);
      complex1.isNaN();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.INF.sqrt();
      complex2.cos();
      Complex complex3 = complex0.sqrt();
      complex3.INF.hashCode();
      Complex complex4 = complex3.sin();
      complex4.tanh();
      complex4.ONE.multiply(1);
      complex1.INF.acos();
      complex1.subtract((-362.916825946521));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-1924.055696884), 3429.761202554986);
      Complex complex2 = complex1.ONE.tanh();
      complex2.toString();
      complex0.ZERO.add(complex1);
      complex1.NaN.multiply(3361);
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = complex1.NaN.tan();
      complex3.ONE.add(complex0);
      Complex.valueOf((-1924.055696884));
      complex0.getImaginary();
      complex1.abs();
      complex3.isNaN();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.tan();
      complex1.NaN.hashCode();
      complex2.ZERO.pow(Double.POSITIVE_INFINITY);
      complex2.INF.readResolve();
      complex0.NaN.atan();
      complex0.exp();
      Complex complex3 = complex1.divide(588.9284658);
      complex0.multiply(0.0);
      complex3.getReal();
      complex0.reciprocal();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-66.15022842174));
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      Complex complex3 = complex1.cos();
      complex3.abs();
      complex0.toString();
      complex1.tanh();
      Complex complex4 = complex1.acos();
      complex4.NaN.pow(complex1);
      Complex complex5 = complex3.negate();
      complex2.exp();
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.I.pow(complex0);
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex0.tan();
      complex6.NaN.readResolve();
      Complex complex7 = complex3.tanh();
      Complex complex8 = complex7.ZERO.multiply(3272);
      Complex complex9 = complex1.conjugate();
      Complex complex10 = complex9.ONE.cos();
      Complex complex11 = complex3.ONE.negate();
      Complex complex12 = complex1.subtract(complex3);
      Complex complex13 = complex12.ZERO.sqrt1z();
      Complex complex14 = complex7.multiply(complex5);
      complex14.multiply(complex8);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex15 = complex2.NaN.negate();
      Complex complex16 = complex11.pow((-2161.24328783972));
      assertEquals((-0.7218591434915819), complex16.getReal(), 0.01);
      
      List<Complex> list0 = complex4.nthRoot(17);
      assertTrue(list0.contains(complex6));
      
      complex4.atan();
      Complex complex17 = complex12.reciprocal();
      assertSame(complex17, complex15);
      
      complex6.isInfinite();
      Complex complex18 = complex13.conjugate();
      complex18.NaN.divide(complex10);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.0, complex18.getReal(), 0.01);
      
      complex11.abs();
      Complex complex19 = complex11.asin();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1.5707963267948966), complex19.getReal(), 0.01);
      
      Complex complex20 = complex4.sqrt1z();
      complex20.asin();
      double double0 = complex9.getReal();
      assertSame(complex9, complex20);
      assertEquals(Double.NaN, double0, 0.01);
  }
}
