/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:58:17 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex((-20.0));
      Complex complex3 = complex2.tan();
      complex3.atan();
      double double0 = 2.2867884635925293;
      Complex complex4 = complex2.pow(2.2867884635925293);
      Complex complex5 = complex4.add(complex1);
      complex4.nthRoot(1405);
      complex4.multiply(complex1);
      complex5.tanh();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.ZERO;
      complex3.divide(20.0);
      Complex complex4 = Complex.INF;
      complex4.multiply(complex3);
      Complex complex5 = Complex.INF;
      complex5.nthRoot(4010);
      complex5.multiply(complex2);
      Complex complex6 = Complex.valueOf(20.0, 602.58759305);
      complex6.tanh();
      Complex complex7 = Complex.ONE;
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6.619064395428225E206);
      Complex complex2 = complex1.sqrt1z();
      complex2.acos();
      complex1.tanh();
      try { 
        complex2.nthRoot((-1431655765));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,431,655,765
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-75.0), Double.POSITIVE_INFINITY);
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(0.7853981633974483, Double.POSITIVE_INFINITY);
      int int0 = (-1216);
      Complex complex1 = complex0.I.multiply((-1216));
      complex1.ONE.nthRoot(564);
      Complex complex2 = Complex.valueOf(0.7080734182735711);
      complex0.ONE.getArgument();
      Complex complex3 = complex2.cos();
      complex0.ZERO.sqrt1z();
      Complex.valueOf(0.15860503911972046, (double) (-1216));
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = Complex.valueOf(0.5403023058681398, (-1076.55025755945));
      complex0.divide(complex2);
      Complex complex6 = complex2.createComplex((-1423.1734), Double.POSITIVE_INFINITY);
      complex2.cos();
      complex6.NaN.pow(6.283185307179586);
      complex4.tan();
      complex6.multiply(complex5);
      complex1.add((-2098.02391063));
      try { 
        complex4.nthRoot((-1216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,216
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1919.31, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-0.9996866743368787));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.add(1985.7435933016761);
      complex2.ONE.abs();
      Complex complex3 = complex1.I.subtract(complex0);
      complex3.ONE.toString();
      Complex complex4 = complex3.INF.add(complex0);
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = complex5.INF.log();
      complex0.ONE.asin();
      complex1.subtract(complex0);
      complex0.getField();
      complex0.readResolve();
      complex0.negate();
      complex6.readResolve();
      complex6.cosh();
      complex5.sin();
      complex6.multiply((-0.9996866743368787));
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.negate();
      complex2.ONE.atan();
      complex2.I.divide(complex1);
      complex0.I.nthRoot(989);
      complex0.I.subtract((-145.1532));
      Complex complex3 = new Complex((-145.1532), Double.NaN);
      Complex complex4 = complex1.pow(complex3);
      complex0.getField();
      complex4.acos();
      complex1.abs();
      complex4.reciprocal();
      Complex complex5 = complex3.multiply(618);
      complex5.NaN.atan();
      Complex complex6 = complex5.createComplex(7.726344058192276E-172, 404.0);
      Complex complex7 = complex1.divide(3.929132560365955E283);
      complex7.ZERO.abs();
      Complex complex8 = Complex.valueOf(7.726344058192276E-172, Double.NaN);
      Complex.valueOf(7.726344058192276E-172);
      complex4.sin();
      complex8.cos();
      complex3.I.negate();
      complex6.add((-611.5015201889194));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 1284.7275306195);
      complex0.ZERO.tan();
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex0.ONE.divide((-1249.1163497779557));
      Complex.valueOf((-20.0), 1284.7275306195);
      Complex complex3 = complex0.cosh();
      complex3.NaN.createComplex(1284.7275306195, (-1249.1163497779557));
      Complex complex4 = complex0.divide((-807.717879));
      complex4.NaN.sin();
      Complex complex5 = complex1.tanh();
      complex0.ONE.getField();
      Complex complex6 = complex5.I.add(complex4);
      complex4.ONE.hashCode();
      complex1.abs();
      Complex complex7 = complex1.conjugate();
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = complex1.pow(1002.7431594050365);
      complex4.log();
      Complex.valueOf((-807.717879));
      Complex.valueOf(1002.7431594050365);
      Complex complex10 = complex9.I.cos();
      complex10.readResolve();
      Complex complex11 = complex2.createComplex(28.284271247461902, 0.0);
      complex0.log();
      Complex complex12 = complex11.pow(0.0);
      complex6.subtract(complex9);
      complex11.isInfinite();
      complex12.tanh();
      complex4.reciprocal();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1896);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.cos();
      complex3.multiply(Double.POSITIVE_INFINITY);
      complex1.divide(complex2);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.asin();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.divide(complex1);
      complex3.divide(Double.POSITIVE_INFINITY);
      complex5.tanh();
      complex6.getArgument();
      complex3.negate();
      complex5.divide((double) 1896);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1.0));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.INF.multiply(789);
      Complex complex3 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.ONE.multiply(23.337);
      complex5.conjugate();
      complex3.ONE.subtract((double) 789);
      complex0.abs();
      Complex complex6 = complex3.multiply(Double.POSITIVE_INFINITY);
      complex6.I.hashCode();
      Complex complex7 = complex2.subtract(complex3);
      complex7.ONE.subtract(3.914163298830388E-18);
      Complex complex8 = complex7.createComplex(23.337, 3.914163298830388E-18);
      complex8.NaN.getArgument();
      Complex complex9 = complex7.I.acos();
      complex9.ONE.getArgument();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex10.ONE.conjugate();
      complex3.reciprocal();
      Complex complex12 = complex3.sin();
      complex2.sqrt1z();
      complex0.ONE.reciprocal();
      Complex complex13 = complex12.tanh();
      complex13.ZERO.createComplex(1753.0260709, 789);
      complex1.tan();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.pow((-6.619064395428225E206));
      Complex complex1 = Complex.valueOf((-6.619064395428225E206), (-20.0));
      Complex complex2 = complex1.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(0.9505909539362846);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ONE;
      complex3.atan();
      Complex complex4 = Complex.NaN;
      complex0.readResolve();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.pow(complex4);
      complex5.getArgument();
      Complex complex7 = complex1.atan();
      complex7.conjugate();
      Complex complex8 = complex5.multiply(complex6);
      complex8.cos();
      complex6.multiply(1.1806302351600182);
      complex5.divide(complex0);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.asin();
      Complex.valueOf(0.0);
      complex4.divide(1.1806302351600182);
      Complex complex11 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex11.tanh();
      complex10.negate();
      complex8.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(129.673163, 1122.0097379334532);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract((-1099.60194));
      complex1.reciprocal();
      Complex complex4 = complex3.divide(1.0572642841023382E7);
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = Complex.ZERO;
      complex5.sin();
      Complex complex7 = complex1.cos();
      complex7.readResolve();
      complex5.cosh();
      complex4.exp();
      complex6.conjugate();
      Complex complex8 = complex7.add(1.0572642841023382E7);
      complex7.cos();
      complex8.cosh();
      Complex complex9 = Complex.ZERO;
      complex0.sinh();
      Complex complex10 = new Complex(1122.0097379334532);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ZERO;
      complex2.divide((-720.0));
      Complex complex4 = complex2.tan();
      complex3.divide(complex2);
      Complex.valueOf((-2536.4974), Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-720.0));
      complex4.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(392);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.subtract((-1.0));
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex4.divide(1.0572642841023382E7);
      Complex complex7 = complex0.multiply(complex5);
      Complex.valueOf(20.0, (double) 0);
      Complex complex8 = Complex.ZERO;
      complex8.sin();
      Complex complex9 = complex0.cos();
      complex5.readResolve();
      complex7.cosh();
      Complex complex10 = complex6.exp();
      Complex complex11 = complex9.conjugate();
      complex4.add((-1.0));
      complex9.cos();
      complex3.cosh();
      Complex complex12 = Complex.ZERO;
      complex12.ONE.sinh();
      complex10.asin();
      complex11.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      double double0 = (-447.2553809732065);
      Complex complex1 = new Complex((-447.2553809732065), (-456.1643948));
      Complex complex2 = Complex.INF;
      complex0.getField();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.conjugate();
      complex3.pow(complex4);
      complex0.cos();
      Complex complex5 = Complex.INF;
      complex2.multiply(0.0);
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-3254.19));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.NaN;
      complex4.readResolve();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.pow(complex4);
      Complex complex9 = new Complex((-3254.19), (-3254.19));
      complex5.getArgument();
      Complex complex10 = Complex.valueOf(Double.NaN, (-620.39));
      complex10.getField();
      Complex complex11 = complex9.atan();
      complex11.conjugate();
      Complex complex12 = Complex.ONE;
      complex6.pow(complex12);
      complex4.multiply(complex3);
      complex2.cos();
      Complex complex13 = Complex.INF;
      complex12.multiply(1.828536033630371);
      complex2.divide(complex8);
      Complex complex14 = Complex.ONE;
      Complex.valueOf((-620.39));
      complex0.divide((-1184.45409));
      complex3.tanh();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-2083.0), (-3156.3000262899));
      complex0.pow((-1537.3572));
      complex0.pow(914.150506);
      Complex complex1 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1389.33455899901), (-1389.33455899901));
      Complex complex2 = new Complex((-1389.33455899901), (-20.0));
      Complex complex3 = Complex.INF;
      complex0.divide(complex3);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.sin();
      Complex.valueOf((-1389.33455899901));
      complex6.getArgument();
      complex4.acos();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = new Complex((-447.2553809732065), (-456.1643948));
      Complex complex2 = Complex.INF;
      complex1.divide(complex0);
      complex0.tan();
      complex1.pow((-456.1643948));
      Complex complex3 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.283185307179586, 0.4119034026564501);
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.hashCode();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.subtract(complex4);
      complex5.sin();
      complex1.subtract(complex5);
      complex0.multiply(1844);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.subtract(complex0);
      complex0.NaN.tan();
      complex1.INF.abs();
      Complex complex2 = complex1.reciprocal();
      complex2.divide((-1.537723364890553E-4));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(567.0, 567.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.divide((-20.0));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.tan();
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex6.atan();
      complex2.readResolve();
      Complex complex8 = complex2.atan();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.pow(complex4);
      complex3.multiply(complex7);
      complex8.getArgument();
      Complex complex12 = new Complex(0.3077431917190552);
      complex8.getField();
      complex12.atan();
      complex8.conjugate();
      complex3.pow(complex0);
      complex9.cos();
      Complex complex13 = Complex.INF;
      complex11.multiply(567.0);
      Complex complex14 = complex10.divide(complex9);
      complex2.asin();
      Complex.valueOf(0.0);
      complex14.divide((-2706.198493705576));
      complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex0.NaN.tan();
      complex1.INF.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.ZERO.sinh();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.conjugate();
      complex6.pow(complex4);
      complex3.cos();
      Complex complex10 = Complex.INF;
      complex0.multiply(0.0);
      complex7.divide(complex9);
      complex3.asin();
      Complex.valueOf((-1389.33455899901));
      complex0.divide(356.0);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-65.64833662), (-65.64833662));
      Complex complex1 = complex0.tanh();
      complex1.NaN.divide((-65.64833662));
      complex0.I.divide(complex1);
      complex1.ONE.tan();
      Complex complex2 = complex0.multiply((-239));
      complex0.NaN.pow(336.048);
      Complex complex3 = complex2.sinh();
      complex3.ONE.reciprocal();
      complex2.exp();
      Complex complex4 = complex0.tanh();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.toString();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex1.subtract((-1.0));
      complex3.reciprocal();
      Complex complex4 = complex3.divide(6.283185307179586);
      complex0.sin();
      complex3.multiply(complex4);
      Complex complex5 = Complex.valueOf((double) 0, 20.0);
      Complex complex6 = complex5.sin();
      complex6.I.cos();
      complex1.readResolve();
      complex5.cosh();
      complex4.exp();
      complex2.conjugate();
      Complex complex7 = complex2.add((-3251.560216422784));
      complex7.ZERO.cos();
      complex4.cos();
      Complex complex8 = new Complex((-2.5316384477288628E8), 0.0);
      Complex complex9 = complex8.asin();
      complex6.readResolve();
      Object object0 = new Object();
      complex9.equals(object0);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = Complex.I;
      complex1.INF.abs();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.I.cos();
      complex5.sin();
      complex4.tan();
      Complex complex6 = Complex.valueOf((-1389.33455899901));
      complex4.divide(1267.9120804210881);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.toString();
      complex0.multiply(0);
      Complex complex2 = complex1.subtract((-1.0));
      complex2.reciprocal();
      complex2.divide(6.283185307179586);
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf((double) 0, 20.0);
      Complex complex5 = complex4.sin();
      complex5.I.cos();
      complex0.cosh();
      Complex complex6 = new Complex(2.0, (-1076.74));
      complex6.exp();
      complex3.add(7.342617187600098E-7);
      complex6.cosh();
      complex4.cos();
      complex1.asin();
      complex6.readResolve();
      complex6.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.toString();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex0.I.reciprocal();
      complex2.INF.divide(20.0);
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.sin();
      Complex complex6 = Complex.ZERO;
      complex6.multiply(complex1);
      Complex complex7 = complex1.cos();
      complex2.readResolve();
      Complex complex8 = complex5.cosh();
      Complex complex9 = complex0.exp();
      complex5.conjugate();
      complex1.add(0.22859740257263184);
      Complex complex10 = Complex.ZERO;
      complex10.cos();
      Complex complex11 = complex7.cosh();
      complex11.cos();
      complex9.asin();
      complex8.readResolve();
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.toString();
      Complex complex2 = complex1.subtract(0.8414709848078964);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.divide((-1.0));
      Complex complex5 = complex2.sin();
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = Complex.valueOf((-1.0), (-1.0));
      complex7.sin();
      Complex complex8 = complex1.cos();
      complex4.readResolve();
      complex6.cosh();
      complex1.exp();
      Complex complex9 = Complex.valueOf(847.6621, (-1.0));
      complex9.conjugate();
      Complex complex10 = complex0.add(Double.NaN);
      complex4.cos();
      complex1.cosh();
      complex6.cos();
      complex8.asin();
      complex10.readResolve();
      complex2.equals(complex3);
      complex9.pow(2.458162307739258);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex0.NaN.tan();
      complex1.INF.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.exp();
      complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      complex4.ZERO.sinh();
      complex3.I.cos();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex0.NaN.tan();
      complex1.INF.abs();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.I.exp();
      complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = complex3.I.cos();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.nthRoot(662);
      complex5.multiply(complex2);
      complex5.abs();
      complex0.subtract((-1251.0));
      try { 
        complex8.nthRoot((-902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -902
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.toString();
      complex0.getReal();
      complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.multiply(Double.NaN);
      complex3.divide(complex5);
      complex2.asin();
      Complex complex7 = new Complex(Double.NaN, Double.NaN);
      complex0.divide(6.283185307179586);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      complex0.multiply(0);
      Complex complex1 = complex0.subtract((-1.0));
      complex1.reciprocal();
      Complex complex2 = complex1.divide(6.283185307179586);
      Complex complex3 = complex0.sin();
      complex1.multiply(complex2);
      Complex complex4 = Complex.valueOf((double) 0, 20.0);
      Complex complex5 = complex4.sin();
      complex5.I.cos();
      complex4.cosh();
      complex4.atan();
      complex3.add(457.1644);
      complex0.add(complex5);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.abs();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.divide(Double.NaN);
      complex3.cos();
      complex0.sin();
      Complex complex4 = complex2.tan();
      complex4.ZERO.subtract(Double.NaN);
      complex1.sqrt();
      Complex complex5 = complex0.atan();
      complex0.divide(complex5);
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex6.toString();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex0.NaN.tan();
      complex1.INF.abs();
      Complex complex3 = complex0.sin();
      complex3.I.exp();
      Complex complex4 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      complex4.INF.exp();
      complex4.toString();
      Complex complex5 = complex2.multiply(complex3);
      complex1.getImaginary();
      complex5.reciprocal();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.atan();
      double double0 = 716.12342809;
      complex0.add(716.12342809);
      try { 
        complex7.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = new Complex((-456.1643948), (-456.1643948));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex0);
      complex0.tan();
      Complex complex4 = complex1.subtract(complex0);
      complex3.sin();
      Complex.valueOf((-456.1643948));
      Complex complex5 = Complex.valueOf(1014.70398081894);
      complex5.add(complex0);
      Complex complex6 = Complex.ZERO;
      complex6.readResolve();
      complex4.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex0.NaN.tan();
      complex1.INF.abs();
      complex2.I.exp();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.I;
      complex4.sqrt1z();
      Complex complex5 = Complex.valueOf((-2606.93740952));
      Complex complex6 = complex2.add(complex5);
      complex2.tanh();
      complex6.exp();
      complex2.createComplex((-2606.93740952), (-6.619064395428225E206));
      complex3.tan();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.ONE.toString();
      Complex complex2 = complex0.multiply(0);
      complex2.subtract((-3251.560216422784));
      complex1.reciprocal();
      Complex complex3 = complex1.divide(20.0);
      Complex complex4 = complex0.sin();
      complex4.multiply(complex1);
      Complex complex5 = Complex.valueOf(20.0, (-1247.1808689767));
      Complex complex6 = complex3.sin();
      Complex complex7 = complex5.cos();
      complex1.readResolve();
      complex7.cosh();
      Complex complex8 = complex7.exp();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.conjugate();
      complex8.add((-3251.560216422784));
      complex6.cos();
      Complex complex11 = Complex.ONE;
      complex11.cosh();
      complex9.cos();
      complex9.asin();
      complex4.readResolve();
      complex10.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.toString();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex2.INF.divide(20.0);
      Complex complex5 = complex2.sin();
      Complex complex6 = complex1.sin();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.multiply(complex1);
      complex2.sin();
      complex6.readResolve();
      Complex complex9 = complex4.cosh();
      complex3.exp();
      complex6.add((double) 0);
      complex9.cosh();
      complex1.cos();
      complex5.asin();
      complex8.readResolve();
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = new Complex((-447.2553809732065), (-456.1644));
      Complex complex2 = Complex.ZERO;
      complex2.pow(complex1);
      Complex complex3 = complex0.multiply(complex2);
      complex3.getArgument();
      complex1.getField();
      Complex complex4 = complex1.atan();
      complex3.conjugate();
      Complex complex5 = complex1.pow(complex4);
      complex5.cos();
      Complex complex6 = new Complex((-456.1644), (-456.1644));
      Complex complex7 = Complex.ONE;
      complex7.multiply((-2137.3));
      Complex complex8 = complex1.divide(complex2);
      complex8.asin();
      Complex.valueOf((-456.1644));
      complex2.divide((-456.1644));
      Complex complex9 = Complex.NaN;
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2266.79986769178, 2266.79986769178);
      complex1.ONE.nthRoot(4984);
      Complex complex2 = complex0.I.add(complex1);
      Complex.valueOf(2.0);
      Complex complex3 = complex2.ONE.multiply(4984);
      complex3.ONE.conjugate();
      complex2.add(complex1);
      complex3.pow(complex2);
      Complex complex4 = complex2.INF.tanh();
      complex4.I.abs();
      Complex complex5 = complex0.tanh();
      Complex complex6 = Complex.valueOf(90.3267503919);
      Complex complex7 = complex5.divide((-20.0));
      complex7.sinh();
      complex0.getArgument();
      complex6.add(complex0);
      complex5.cos();
      Complex.valueOf(1871.2152290912236);
      complex5.reciprocal();
      complex7.createComplex((-2.414213562373095), 1164.910347584444);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(27587.238116034267, 0.0);
      complex0.toString();
      complex0.ZERO.conjugate();
      Complex complex1 = complex0.ZERO.pow((-710.98008));
      Complex complex2 = complex1.INF.conjugate();
      complex1.ZERO.getField();
      complex0.getImaginary();
      complex0.cosh();
      Complex complex3 = complex0.createComplex(2032.063, 2032.063);
      complex3.INF.negate();
      complex0.log();
      complex2.isInfinite();
      complex2.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(468.174323292);
      Complex complex2 = complex1.ONE.multiply(2.0);
      complex2.tanh();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ONE.add(complex0);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = Complex.ONE;
      complex5.NaN.add(complex6);
      complex0.getArgument();
      complex3.ONE.sqrt();
      complex0.ZERO.tan();
      Complex complex7 = Complex.ZERO;
      complex7.hashCode();
      Complex complex8 = Complex.ONE;
      // Undeclared exception!
      complex8.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3423.46, 139.25);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.divide(complex3);
      complex1.tan();
      complex0.subtract(complex4);
      Complex complex5 = Complex.NaN;
      complex5.sin();
      Complex complex6 = Complex.I;
      complex6.getArgument();
      Complex complex7 = Complex.valueOf((-9.029878114318277E237));
      complex7.acos();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.ZERO.getArgument();
      complex1.ZERO.divide(complex0);
      complex0.abs();
      Complex complex2 = complex1.NaN.sqrt();
      complex0.isNaN();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.I.sqrt1z();
      Complex complex5 = complex3.atan();
      complex1.nthRoot(681);
      complex3.multiply(complex1);
      complex5.abs();
      complex1.subtract(0.9996866743368787);
      complex4.nthRoot(681);
      complex3.asin();
      complex2.pow(2470.2187);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex0.NaN.tan();
      complex1.INF.abs();
      complex2.I.exp();
      Complex complex3 = complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.I.cos();
      complex4.sin();
      complex3.tan();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = complex4.atan();
      complex4.divide(complex5);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      complex0.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sqrt1z();
      complex4.add(complex0);
      complex2.tanh();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.createComplex(3423.46, Double.NaN);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.toString();
      Complex complex1 = new Complex((-447.2553809732065), (-456.1643948));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex0);
      complex0.tan();
      Complex complex4 = complex1.subtract(complex0);
      complex3.sin();
      Complex complex5 = Complex.valueOf((-456.1643948));
      complex5.getArgument();
      complex0.acos();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3423.46, 3423.46);
      Complex complex2 = Complex.INF;
      complex1.ZERO.divide(complex2);
      complex1.tan();
      Complex complex3 = complex0.subtract(complex1);
      complex0.sin();
      complex3.getArgument();
      complex0.asin();
      Complex complex4 = Complex.valueOf((-3432.79377799113), Double.NaN);
      complex4.sinh();
      complex3.readResolve();
      Complex complex5 = Complex.ONE;
      complex5.subtract(3794.84692);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-2421.1356034160667), (-1111.095097379));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.tan();
      complex3.abs();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex4.divide(3.597600556519039E85);
      Complex complex7 = complex6.sinh();
      complex5.cos();
      complex0.sin();
      complex0.atan();
      complex5.nthRoot(118);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.multiply(complex7);
      complex9.abs();
      complex3.subtract(3741.0);
      try { 
        complex5.nthRoot((-2803));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,803
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-7509.999871523008), 0.4475363492965698);
      Complex complex2 = complex0.acos();
      Complex complex3 = new Complex((-7509.999871523008));
      Complex complex4 = Complex.ZERO;
      complex4.subtract(complex2);
      complex1.getField();
      Complex complex5 = complex4.cosh();
      complex1.multiply(complex0);
      complex5.asin();
      complex5.cos();
      complex3.createComplex((-7509.999871523008), 2371.270067087886);
      Complex complex6 = complex0.multiply(2371.270067087886);
      Complex complex7 = complex4.cos();
      complex7.acos();
      complex3.sqrt();
      complex2.ONE.multiply(1808.908282069);
      Complex.valueOf(4313.163039029651, 2.0);
      complex2.pow(complex1);
      Complex complex8 = complex5.cos();
      complex2.sinh();
      Complex complex9 = new Complex(2371.270067087886);
      Complex complex10 = Complex.ONE;
      complex8.divide(complex10);
      complex6.exp();
      complex5.createComplex((-1551.06688076421), 2.9758750368256437E29);
      complex6.sinh();
      complex0.isInfinite();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.subtract(complex0);
      complex0.NaN.tan();
      complex1.INF.abs();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.exp();
      complex0.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex2.I.cos();
      Complex complex6 = complex5.sin();
      complex6.ONE.atan();
      complex2.nthRoot(681);
      Complex complex7 = complex0.multiply(complex5);
      complex5.abs();
      complex0.subtract((double) 681);
      complex7.nthRoot(681);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.nthRoot(1);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex2.ZERO.sinh();
      Complex complex4 = complex1.ONE.conjugate();
      Complex complex5 = complex1.INF.conjugate();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex7 = complex6.INF.reciprocal();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex5.ZERO.subtract(complex8);
      complex0.getField();
      Complex complex10 = complex1.INF.pow(complex0);
      complex10.I.divide(complex8);
      complex1.ZERO.log();
      complex10.ONE.hashCode();
      Complex complex11 = complex0.sin();
      complex1.ZERO.toString();
      Complex complex12 = complex11.cosh();
      complex12.INF.hashCode();
      complex0.isInfinite();
      complex4.toString();
      Complex complex13 = complex4.conjugate();
      complex13.INF.acos();
      complex0.sqrt1z();
      Complex complex14 = complex1.exp();
      Complex complex15 = Complex.ZERO;
      complex14.ONE.subtract(complex15);
      complex3.I.tanh();
      complex7.sin();
      complex9.asin();
      complex6.log();
      complex12.readResolve();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1.7567694187164307, 0.6907027959823608);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.ONE.sin();
      complex3.NaN.multiply(776.098044332145);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.negate();
      complex2.I.getField();
      complex6.NaN.nthRoot(51);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.NaN.pow(1.7567694187164307);
      complex2.toString();
      Complex complex9 = complex1.divide(0.6907027959823608);
      complex0.cosh();
      Complex complex10 = complex2.log();
      Complex complex11 = complex1.divide(2371.270067087886);
      complex10.sin();
      complex9.cos();
      complex4.tanh();
      complex5.getReal();
      complex8.cosh();
      complex11.isInfinite();
      complex0.cosh();
      complex10.getArgument();
      complex11.multiply(13);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-6.619064395428225E206));
      Complex complex2 = complex0.pow((-743.31));
      complex1.add(325.987553);
      complex2.add(complex0);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(3.1838092090922606E287, (-1489.089639562455));
      Complex complex1 = Complex.ZERO;
      complex0.ONE.add(complex1);
      complex0.abs();
      Complex complex2 = complex0.exp();
      complex2.INF.log();
      complex0.INF.asin();
      Complex complex3 = complex2.subtract((-1489.089639562455));
      Complex complex4 = complex0.NaN.reciprocal();
      complex4.INF.reciprocal();
      complex3.negate();
      Complex.valueOf(2480.0);
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1.76097684E-316), (-0.6));
      Complex complex1 = complex0.NaN.pow((-0.6));
      Complex complex2 = Complex.valueOf((-0.6));
      complex0.INF.add(0.0);
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex2.NaN.tanh();
      Complex complex5 = complex1.NaN.pow((-1.76097684E-316));
      Complex complex6 = complex5.ZERO.multiply((-0.6));
      complex0.readResolve();
      Complex complex7 = complex1.conjugate();
      Complex.valueOf(1123.3836350236809);
      Complex complex8 = complex4.createComplex((-1.76097684E-316), (-1.76097684E-316));
      Complex complex9 = complex7.sin();
      complex8.readResolve();
      complex5.NaN.log();
      Complex complex10 = complex1.sqrt1z();
      complex10.NaN.add(0.0);
      complex6.multiply(1.0572423934936523);
      complex0.conjugate();
      complex2.multiply(0.0);
      complex3.asin();
      complex9.multiply(2610.797430883);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-3741.0), (-890.931));
      complex0.I.divide(complex1);
      complex0.ONE.nthRoot(323);
      Complex complex2 = complex0.sin();
      Complex complex3 = Complex.valueOf((-374.4152), (-374.4152));
      Complex complex4 = complex2.sqrt();
      complex0.nthRoot(323);
      Complex complex5 = complex3.I.subtract(3794.84692);
      complex5.abs();
      Complex complex6 = Complex.valueOf(3794.8470517576184, (double) 323);
      complex3.hashCode();
      complex3.readResolve();
      Complex complex7 = complex4.divide((-374.4152));
      Complex complex8 = complex2.I.add(complex0);
      complex7.ZERO.subtract(complex4);
      complex5.tan();
      Complex complex9 = complex7.acos();
      complex9.readResolve();
      complex5.equals(complex6);
      complex7.I.createComplex((-561.488401733), (-561.488401733));
      complex5.divide(complex3);
      Complex complex10 = complex8.conjugate();
      Complex complex11 = complex0.add(3794.84692);
      complex11.sqrt();
      complex11.abs();
      complex10.divide(complex7);
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.ONE.toString();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.subtract((-3251.560216422784));
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex2.INF.divide(20.0);
      Complex complex6 = complex2.sin();
      complex6.ZERO.multiply(complex2);
      complex6.NaN.sin();
      complex5.ZERO.readResolve();
      complex6.cosh();
      complex6.exp();
      complex6.conjugate();
      complex3.add(1.7914185523986816);
      complex0.cosh();
      complex5.cos();
      complex6.asin();
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(567.0, 567.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex0.I.divide(567.0);
      Complex complex4 = complex0.ONE.sqrt1z();
      complex4.INF.tan();
      Complex complex5 = complex4.INF.divide(complex2);
      complex5.INF.atan();
      complex5.ZERO.readResolve();
      complex1.ZERO.atan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex0.multiply(complex3);
      complex8.ONE.getArgument();
      complex1.getField();
      complex6.atan();
      Complex complex9 = complex2.conjugate();
      Complex complex10 = complex1.pow(complex2);
      Complex complex11 = complex10.ONE.cos();
      complex7.I.sinh();
      Complex complex12 = complex11.ONE.multiply(0.0);
      complex12.divide(complex9);
      complex1.asin();
      Complex.valueOf((-1389.33455899901));
      complex7.divide(0.6543170213699341);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-249.471872909321));
      Complex complex1 = Complex.valueOf(1.224029779434204, (-249.471872909321));
      complex0.getImaginary();
      complex0.isInfinite();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.sin();
      complex4.NaN.getArgument();
      complex1.INF.multiply(Double.NaN);
      Complex complex5 = Complex.valueOf(1675.4321597, 0.0);
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex5.I.multiply((-1934.0721));
      Complex.valueOf(1.224029779434204);
      complex6.INF.sinh();
      complex3.divide(complex5);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.I.conjugate();
      Complex complex4 = complex1.I.divide(complex0);
      Complex complex5 = Complex.valueOf(0.0, 1970.0);
      complex1.INF.sin();
      complex1.NaN.pow(complex5);
      Complex complex6 = complex1.ZERO.sinh();
      Complex complex7 = complex0.NaN.sqrt();
      complex0.isInfinite();
      complex0.ZERO.subtract(0.0);
      Complex complex8 = complex0.add(complex4);
      complex8.getReal();
      Complex complex9 = complex3.NaN.conjugate();
      Complex complex10 = complex3.divide(Double.POSITIVE_INFINITY);
      complex10.reciprocal();
      complex7.hashCode();
      Complex complex11 = complex6.acos();
      Complex complex12 = complex11.asin();
      complex9.asin();
      complex12.acos();
      Complex complex13 = complex2.sin();
      complex10.INF.pow((-286.8154068801255));
      try { 
        complex13.ONE.nthRoot((-486));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -486
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex0.createComplex(867.0, 867.0);
      complex1.toString();
      complex0.multiply(complex2);
      complex3.getImaginary();
      Complex complex4 = complex2.I.reciprocal();
      complex4.I.atan();
      Complex complex5 = complex3.createComplex(0.0, (-1003.5509));
      complex2.I.toString();
      Complex complex6 = complex5.I.log();
      complex6.INF.sqrt1z();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.ZERO.add(complex1);
      complex0.ZERO.abs();
      Complex complex2 = complex0.I.multiply(0.0);
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex3.NaN.sinh();
      complex5.I.divide(0.0);
      Complex complex6 = complex4.ONE.divide(complex2);
      Complex complex7 = complex6.INF.createComplex((-2622.8781), 0.0);
      Complex complex8 = complex0.acos();
      complex8.subtract(complex3);
      complex2.getImaginary();
      complex8.getField();
      Complex complex9 = complex7.sqrt1z();
      complex9.nthRoot(1636);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(1.5346568127351796E-127);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(6253.265483652);
      Complex complex2 = complex0.divide(716.579813584);
      Complex complex3 = Complex.valueOf(6253.265483652);
      complex3.ZERO.toString();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.ONE.createComplex((-3755.0), 716.579813584);
      complex2.getField();
      complex1.INF.add(716.579813584);
      Complex complex6 = complex1.divide((-2650.67308));
      complex6.getField();
      Complex complex7 = complex3.INF.pow(6253.265483652);
      complex7.I.add(1929.88237);
      complex1.getImaginary();
      Complex complex8 = complex5.acos();
      complex8.INF.getField();
      Complex complex9 = Complex.valueOf(1433.44948267, 716.579813584);
      complex9.cosh();
      complex5.isNaN();
      complex9.tanh();
      complex3.sinh();
      Complex complex10 = Complex.valueOf((-2774.2), 6253.265483652);
      complex10.ZERO.subtract((-3755.0));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(1.3131921291351318, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex1.equals((Object) null);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.sqrt1z();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex2.INF.add(complex1);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.reciprocal();
      complex2.NaN.multiply(complex1);
      complex0.I.createComplex(78.7931, 78.7931);
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex1.ONE.sinh();
      Complex complex5 = complex0.sqrt1z();
      complex3.NaN.nthRoot(1);
      complex4.ONE.toString();
      complex5.nthRoot(970);
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = complex6.ZERO.createComplex(944.30695973, 944.30695973);
      complex7.ONE.divide(complex6);
      complex4.getField();
      Complex complex8 = complex0.exp();
      complex1.readResolve();
      Complex.valueOf((-1.0), 0.0);
      Complex complex9 = complex8.conjugate();
      complex1.toString();
      complex3.equals(complex9);
      complex5.toString();
      complex5.hashCode();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      double double0 = 1.4822404384613037;
      double double1 = (-4.952031310451961E63);
      Complex complex0 = new Complex(1.4822404384613037, (-4.952031310451961E63));
      Complex complex1 = complex0.ONE.divide(6.283185307179586);
      complex1.NaN.sqrt1z();
      Complex.valueOf(0.0);
      complex1.negate();
      complex1.sqrt1z();
      Complex complex2 = complex1.INF.sqrt();
      complex2.NaN.getArgument();
      try { 
        complex0.nthRoot((-1690));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,690
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.exp();
      complex0.I.abs();
      Complex complex1 = Complex.valueOf(869.495605515, 869.495605515);
      Complex complex2 = complex0.subtract(complex1);
      complex1.INF.multiply(complex2);
      Complex complex3 = complex0.acos();
      complex3.I.cos();
      Complex complex4 = Complex.valueOf((-8.0E298), (-8.0E298));
      Complex complex5 = complex3.add(869.495605515);
      complex4.I.createComplex(0.0, (-161.6));
      complex1.reciprocal();
      Complex complex6 = complex4.sin();
      complex5.getImaginary();
      Complex.valueOf(0.0);
      complex6.multiply((-8.0E298));
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(468.174323292);
      Complex complex2 = complex1.ONE.multiply(2.0);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ONE.add(complex0);
      complex5.I.conjugate();
      complex0.getArgument();
      complex4.ONE.sqrt();
      complex0.ZERO.tan();
      complex0.I.hashCode();
      complex4.nthRoot(987);
      complex4.nthRoot(987);
      Complex complex6 = Complex.valueOf(468.174323292);
      complex6.subtract(complex1);
      complex0.equals((Object) null);
      complex5.sinh();
      complex6.abs();
      complex1.multiply(987);
      complex2.sqrt();
      complex3.multiply((-1034));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2839.844786227);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.negate();
      complex0.isNaN();
      Complex complex3 = complex2.I.createComplex((-1.0), 2839.844786227);
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex4.ONE.multiply(2839.844786227);
      Complex complex6 = complex2.tanh();
      complex6.isNaN();
      Complex complex7 = complex6.atan();
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex3.subtract(complex6);
      Complex complex10 = complex0.ONE.sinh();
      complex10.NaN.reciprocal();
      complex3.atan();
      complex1.createComplex((-20.0), (-3519.29));
      complex5.pow(complex7);
      Complex complex11 = complex3.subtract(complex1);
      Complex complex12 = complex11.INF.tanh();
      complex7.ZERO.sqrt();
      complex12.I.sinh();
      complex7.tan();
      complex8.toString();
      Complex complex13 = complex6.subtract((-873.01077845068));
      complex13.readResolve();
      Complex complex14 = complex0.multiply((-777));
      complex14.ZERO.reciprocal();
      complex11.getArgument();
      Complex complex15 = complex12.cos();
      complex15.NaN.asin();
      complex9.isNaN();
      complex8.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1111.095097379), 2.0);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = new Complex(4313.163039029651);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      complex3.I.getField();
      complex0.NaN.cosh();
      Complex complex4 = complex0.NaN.multiply(complex2);
      Complex complex5 = complex0.asin();
      Complex complex6 = complex1.createComplex((-1551.06688076421), (-1551.06688076421));
      Complex complex7 = complex6.multiply(0.0);
      Complex complex8 = complex0.cos();
      Complex complex9 = complex8.NaN.acos();
      complex9.NaN.sqrt();
      Complex complex10 = Complex.valueOf(4313.163039029651, 0.0);
      complex10.ZERO.pow(complex6);
      Complex complex11 = complex10.cos();
      complex7.sinh();
      Complex complex12 = new Complex((-1111.095097379));
      complex11.divide(complex12);
      Complex complex13 = complex5.exp();
      complex13.NaN.createComplex((-1224.4434233468505), (-1718.745547039));
      complex10.sinh();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex1.ONE.subtract(20.0);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.multiply((-3524.836791615618));
      Complex complex5 = complex0.atan();
      complex4.ONE.hashCode();
      Complex complex6 = complex0.subtract((-3524.836791615618));
      complex6.ONE.divide(complex2);
      complex6.multiply(complex3);
      Complex complex7 = complex4.NaN.cos();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.NaN.add(complex0);
      Complex complex10 = complex3.ZERO.subtract(complex7);
      Complex complex11 = complex6.divide(0.0);
      Complex complex12 = complex4.INF.pow(0.0);
      Complex complex13 = complex3.atan();
      complex4.isInfinite();
      Object object0 = complex13.readResolve();
      complex11.equals(object0);
      complex1.divide(2.69449520111084);
      complex13.ZERO.atan();
      complex12.sinh();
      complex5.multiply(complex13);
      complex9.createComplex(2.69449520111084, (-1.0));
      complex10.sin();
      complex1.nthRoot(695);
      complex8.acos();
      complex4.multiply((double) 695);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2083.0), (-2083.0));
      complex0.ZERO.sin();
      complex0.INF.asin();
      complex0.toString();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.tanh();
      complex2.INF.readResolve();
      Complex complex3 = complex0.divide(complex1);
      complex0.ONE.reciprocal();
      complex3.ZERO.hashCode();
      complex3.INF.hashCode();
      complex3.ZERO.asin();
      Complex complex4 = complex3.INF.cosh();
      complex3.ZERO.toString();
      complex4.I.nthRoot(1594);
      complex4.INF.multiply(complex0);
      Complex complex5 = complex1.multiply(2766.2442690989);
      complex5.multiply(1594);
      Complex complex6 = complex5.INF.pow((double) 1594);
      complex6.I.cosh();
      Complex complex7 = complex5.tan();
      complex4.getImaginary();
      Complex complex8 = complex1.negate();
      complex8.ONE.pow(0.0);
      complex7.log();
      complex4.tanh();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.getArgument();
      Complex complex2 = complex1.ONE.reciprocal();
      complex0.pow(complex1);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(2.3941946029663086, 2.3941946029663086);
      complex0.multiply((-2907));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = 1284.7275306195;
      Complex complex0 = new Complex((-20.0), 1284.7275306195);
      complex0.ZERO.tan();
      complex0.I.reciprocal();
      double double1 = (-1229.820979239567);
      Complex complex1 = complex0.ONE.divide((-1229.820979239567));
      try { 
        complex1.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.ONE.conjugate();
      complex0.readResolve();
      complex0.ONE.abs();
      complex0.INF.divide(2443.401);
      complex0.ONE.pow((-1687.0));
      complex0.readResolve();
      complex0.ONE.abs();
      Complex complex2 = complex1.subtract(190.91503416074);
      complex2.NaN.createComplex(1543.0, 2443.401);
      Complex complex3 = Complex.NaN;
      complex3.hashCode();
      complex2.I.divide(complex3);
      Complex complex4 = complex0.subtract((-136.6003450716));
      complex1.hashCode();
      complex1.getReal();
      complex4.add((-491.680122));
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.64252553828769E143, 5.64252553828769E143);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.atan();
      complex1.NaN.pow(5.64252553828769E143);
      Complex complex4 = complex1.NaN.pow(complex0);
      complex4.pow(complex3);
      complex4.NaN.asin();
      Complex complex5 = complex1.multiply(5.64252553828769E143);
      Complex complex6 = complex5.sqrt1z();
      complex0.getImaginary();
      ComplexField complexField0 = complex2.getField();
      complex6.isNaN();
      complex3.abs();
      complex6.equals(complexField0);
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-2195.32265621), 6.283185307179586);
      complex0.ZERO.abs();
      complex0.NaN.cosh();
      complex0.hashCode();
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.I.sqrt();
      complex2.getField();
      complex0.getArgument();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.conjugate();
      complex1.ZERO.getArgument();
      complex1.I.getArgument();
      complex4.I.abs();
      Complex complex5 = complex1.ZERO.subtract(3.138730583117706);
      complex3.add(0.0);
      complex5.ZERO.nthRoot(447);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex2.tan();
      complex3.multiply(complex6);
      complex7.asin();
      Complex.valueOf(0.0, 1.0);
      Complex complex8 = complex7.sinh();
      complex7.readResolve();
      complex8.subtract(3.138730583117706);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-1.0);
      Complex complex1 = complex0.pow((-1.0));
      Complex complex2 = complex0.divide(complex1);
      complex1.I.getArgument();
      complex2.sinh();
      int int0 = (-1164);
      try { 
        complex1.ONE.nthRoot((-1164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,164
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1241.1477));
      complex0.NaN.multiply(588);
      Complex complex1 = complex0.log();
      complex1.INF.hashCode();
      complex1.ONE.reciprocal();
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex4.I.pow(0.0);
      complex5.NaN.nthRoot(1248);
      complex1.sinh();
      Complex complex6 = complex1.INF.tanh();
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = complex7.divide(complex3);
      complex8.add((-1241.1477));
      complex1.negate();
      complex1.equals(complex2);
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex9.createComplex(1335.37196212, 1335.37196212);
      complex10.I.sqrt();
      Complex complex11 = complex7.add(0.0);
      complex11.getImaginary();
      complex1.atan();
      complex6.getReal();
      complex8.sin();
      complex4.multiply(1107.6083131193);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1363);
      complex0.abs();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex2.ZERO.asin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.ONE.divide(complex1);
      complex5.INF.getField();
      Complex complex6 = complex3.ZERO.acos();
      Complex complex7 = complex0.add(complex4);
      Complex complex8 = complex1.ONE.divide(complex4);
      Complex complex9 = complex7.I.reciprocal();
      Complex complex10 = complex9.ONE.add(complex3);
      complex0.INF.getArgument();
      Complex complex11 = complex4.NaN.negate();
      complex4.INF.readResolve();
      Complex complex12 = complex11.NaN.tan();
      Complex complex13 = complex12.I.add(0.0);
      complex7.hashCode();
      complex7.equals(complex4);
      complex0.abs();
      complex3.getField();
      Complex complex14 = complex7.divide(complex2);
      Complex complex15 = complex10.cosh();
      assertEquals((-1.0), complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex7.acos();
      assertFalse(complex16.equals((Object)complex13));
      
      complex1.getField();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex17 = complex4.exp();
      assertSame(complex17, complex11);
      
      Complex complex18 = (Complex)complex6.readResolve();
      assertEquals(1.5707963267948966, complex18.getReal(), 0.01);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      
      complex14.hashCode();
      assertTrue(complex2.isInfinite());
      assertSame(complex14, complex8);
      assertSame(complex14, complex5);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-2844.99023298939), (-2844.99023298939));
      complex0.isInfinite();
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex2.ZERO.cosh();
      Complex complex5 = complex3.I.sinh();
      Complex complex6 = complex5.NaN.divide(complex3);
      complex3.I.getArgument();
      assertTrue(complex3.equals((Object)complex4));
      
      Complex complex7 = complex2.I.multiply(1794.3512212);
      assertEquals(1794.3512212, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex0.add(complex2);
      Complex complex9 = complex8.ZERO.sinh();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex2.acos();
      complex10.readResolve();
      Complex complex11 = complex1.multiply(complex10);
      assertTrue(complex1.equals((Object)complex9));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertSame(complex10, complex6);
      assertSame(complex11, complex8);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(658.638664, 1.0);
      Complex complex1 = complex0.ZERO.divide(1.0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      
      Complex complex2 = new Complex(658.638664, 2744.5);
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex0.INF.subtract(complex2);
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex0.add(1.0);
      Complex complex7 = Complex.valueOf(2720.595897941, 2720.595897941);
      Complex complex8 = complex6.NaN.exp();
      Complex complex9 = complex4.tan();
      complex5.INF.subtract(complex7);
      Complex complex10 = complex2.subtract(1.0);
      assertEquals(657.638664, complex10.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(1132);
      assertEquals(1132, list0.size());
      
      Complex complex11 = complex5.asin();
      assertEquals(0.7949577687638784, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex8.divide(complex0);
      assertSame(complex12, complex3);
      assertEquals(659.638664, complex6.getReal(), 0.01);
      assertSame(complex12, complex9);
      
      Complex complex13 = complex4.add(811.5);
      assertTrue(complex13.isInfinite());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(1730.4655443088516);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex1.INF.divide(1730.4655443088516);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = Complex.valueOf(2086.8265789, 2086.8265789);
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex6.atan();
      assertEquals(1.5705567285339816, complex8.getReal(), 0.01);
      assertEquals(2.3959824257562497E-4, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex1.ONE.atan();
      complex0.NaN.readResolve();
      Complex complex10 = complex1.multiply(1899);
      Complex complex11 = complex6.multiply(complex4);
      Complex complex12 = Complex.valueOf((-2324.51000218));
      Complex complex13 = complex0.cos();
      complex13.ZERO.subtract(complex0);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex4.divide((-1218.853471967451));
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getReal(), 0.01);
      
      complex11.nthRoot(1292);
      Complex complex15 = complex12.subtract(complex5);
      assertEquals(1.0, complex15.getImaginary(), 0.01);
      
      complex7.subtract(complex0);
      Complex complex16 = complex2.sqrt();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(41.598864699758956, complex16.getReal(), 0.01);
      
      Complex complex17 = complex3.divide((double) 1899);
      Complex complex18 = complex9.add((-5090.787915688));
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals((-5090.002517524603), complex18.getReal(), 0.01);
      
      Complex complex19 = complex0.add(complex17);
      complex6.log();
      Complex complex20 = complex3.divide((-5090.787915688));
      assertNotSame(complex20, complex10);
      assertSame(complex20, complex19);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3423.46, 3423.46);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.ZERO.divide(complex2);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex0.sin();
      complex5.getArgument();
      assertNotSame(complex5, complex4);
      assertSame(complex5, complex6);
      
      Complex complex7 = complex1.acos();
      assertEquals(0.785398174062906, complex7.getReal(), 0.01);
      
      double double0 = complex3.getReal();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.ZERO.divide(complex0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex3 = complex1.NaN.sqrt();
      complex0.isNaN();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.I.sqrt1z();
      assertEquals(1.4142135623730951, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.tan();
      assertEquals(0.7615941559557649, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      complex3.sqrt();
      Complex complex7 = complex1.atan();
      complex3.isInfinite();
      Complex complex8 = complex3.divide(complex0);
      String string0 = complex8.toString();
      assertEquals("(NaN, NaN)", string0);
      assertSame(complex8, complex7);
  }
}
