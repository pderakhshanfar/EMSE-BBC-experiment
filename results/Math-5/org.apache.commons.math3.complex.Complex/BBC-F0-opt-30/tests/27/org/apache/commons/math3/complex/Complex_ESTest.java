/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:11:33 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1001.7028424762102));
      Complex complex1 = Complex.valueOf(2602.86751, Double.POSITIVE_INFINITY);
      complex1.INF.hashCode();
      complex0.ZERO.toString();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.sinh();
      complex2.exp();
      Complex complex4 = complex2.sinh();
      complex4.ZERO.multiply(complex2);
      complex2.I.createComplex(2602.86751, 3344.421);
      Complex complex5 = complex4.reciprocal();
      complex5.INF.reciprocal();
      complex3.pow((-1001.7028424762102));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(699.1337, 699.1337);
      complex0.subtract(complex1);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.valueOf(1556.8846, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ONE;
      complex3.multiply(complex4);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.8286159269071E-310, 2.8286159269071E-310);
      complex1.subtract(complex0);
      complex1.divide((-1282.0));
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = Complex.valueOf((-1282.0));
      complex3.subtract(complex5);
      complex4.multiply(complex0);
      Complex complex6 = complex1.reciprocal();
      complex2.acos();
      complex6.asin();
      complex0.reciprocal();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply((-20.0));
      Complex complex3 = new Complex(1.5790297768522832E146, (-87.25));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(14774.103350939167);
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(14774.103350939167, 20.0);
      complex2.tan();
      complex0.nthRoot(169);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.add(Double.POSITIVE_INFINITY);
      complex2.I.toString();
      Complex complex3 = complex0.tanh();
      Complex complex4 = new Complex(3747.49, Double.POSITIVE_INFINITY);
      complex3.multiply(complex0);
      Complex complex5 = complex4.multiply(4957);
      complex5.ZERO.cos();
      complex1.divide(4.1218749988429474E239);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.I.getField();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.NaN.pow(complex2);
      complex3.multiply(1.9213623525983532);
      complex0.I.nthRoot(17);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex5.NaN.multiply(complex3);
      complex1.readResolve();
      Complex complex7 = complex5.multiply(2405);
      Complex complex8 = complex7.ZERO.cosh();
      Complex.valueOf(2.5707689593428096E215, 2.5707689593428096E215);
      complex6.cosh();
      Complex complex9 = complex8.cos();
      Complex complex10 = Complex.valueOf(2.5707689593428096E215, 20.0);
      Complex complex11 = complex10.multiply((double) 2405);
      complex9.getField();
      complex4.add(1.9213623525983532);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.exp();
      complex2.multiply(17);
      complex4.createComplex(Double.POSITIVE_INFINITY, 2.0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-148.4), (-148.4));
      complex0.I.hashCode();
      Complex complex1 = complex0.negate();
      complex1.ONE.abs();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex2.add(1.1588881015777588);
      Complex complex5 = complex4.ZERO.multiply(1119073.877664794);
      complex5.NaN.divide(complex1);
      Complex complex6 = complex4.subtract(complex3);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex7.I.reciprocal();
      complex7.cos();
      complex3.INF.hashCode();
      complex3.getField();
      complex0.createComplex(1810.067, 1810.067);
      complex3.conjugate();
      complex6.pow(1.0);
      Complex complex9 = complex0.sin();
      Complex complex10 = complex8.atan();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex3.subtract(complex0);
      complex9.negate();
      complex11.divide(351.5375150815);
      complex12.pow(1.2530649392922358E-242);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      complex2.I.abs();
      complex2.exp();
      Complex complex3 = new Complex(3747.49, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      complex3.tan();
      Complex complex5 = complex3.asin();
      Complex complex6 = Complex.ZERO;
      complex0.sin();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex3.tanh();
      complex1.exp();
      Complex complex5 = new Complex(2306.5509201338, (-1.7343245214879666));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex4.tanh();
      complex3.multiply((-1431655765));
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(20.0, 559.281591273);
      complex0.abs();
      complex1.tan();
      complex1.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(995.637969293);
      complex0.NaN.abs();
      Complex complex1 = complex0.I.divide(complex0);
      Complex complex2 = Complex.valueOf(995.637969293, Double.NaN);
      complex0.getReal();
      Complex complex3 = complex2.ONE.subtract(complex0);
      Complex complex4 = complex1.I.multiply(17);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.divide(complex3);
      complex0.nthRoot(17);
      complex6.add(579.47382736);
      complex7.readResolve();
      Object object0 = complex7.readResolve();
      complex4.equals(object0);
      complex1.multiply(2163.0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(3605.474410181836);
      complex1.abs();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(3605.474410181836, 3605.474410181836);
      complex0.getReal();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex3.multiply(17);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.divide(complex5);
      complex4.nthRoot(17);
      complex5.add(Double.NaN);
      complex0.readResolve();
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
      complex7.multiply(0.16340454652043634);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.tanh();
      complex3.exp();
      Complex complex4 = new Complex(3747.49, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.NaN;
      complex4.tan();
      complex2.readResolve();
      Complex complex6 = Complex.INF;
      complex1.equals(complex6);
      Complex complex7 = new Complex(3747.49);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.acos();
      Complex complex2 = complex1.tanh();
      complex2.exp();
      Complex complex3 = new Complex(3747.49, Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex4 = Complex.NaN;
      complex4.multiply((-1431655765));
      complex3.tan();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex5.multiply((-1431655765));
      Complex complex6 = Complex.INF;
      complex3.divide(complex6);
      complex0.divide(3747.49);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.multiply(876);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.pow(complex1);
      complex4.getArgument();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex5.exp();
      Complex complex6 = new Complex(Double.NaN, (-1359.905850043252));
      complex6.abs();
      Complex complex7 = Complex.valueOf((double) 876);
      complex7.tan();
      complex1.tanh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex3.negate();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      complex0.subtract(complex1);
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex1.multiply(17);
      Complex complex5 = complex3.tan();
      complex4.tanh();
      complex5.abs();
      complex2.add(complex4);
      complex3.subtract((double) 775);
      complex5.createComplex(17, 2.0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.tanh();
      complex3.exp();
      Complex complex4 = new Complex(3747.49, Double.POSITIVE_INFINITY);
      complex1.abs();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.multiply((-1431655765));
      complex4.tan();
      complex4.tanh();
      complex6.I.add((double) (-1431655765));
      Complex complex7 = Complex.I;
      complex6.negate();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.073741824E9, 1.073741824E9);
      Complex complex1 = complex0.ZERO.subtract(1.073741824E9);
      complex1.exp();
      complex0.multiply((-2144564546));
      Complex complex2 = Complex.valueOf((double) (-2144564546), 316.0081019349001);
      complex2.hashCode();
      Complex complex3 = complex0.negate();
      Complex.valueOf((double) (-2144564546));
      Complex complex4 = Complex.valueOf((-3519.0569297158218), 1.073741824E9);
      complex4.ZERO.sin();
      complex1.sin();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.sqrt();
      complex6.ONE.tanh();
      Complex complex7 = Complex.INF;
      complex5.subtract(complex7);
      Complex complex8 = complex3.reciprocal();
      complex8.NaN.conjugate();
      complex5.divide((-317.9767723507687));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      Complex complex2 = complex1.cos();
      complex0.subtract(complex1);
      complex0.multiply(1313);
      complex0.pow(complex2);
      complex0.exp();
      Complex complex3 = complex1.acos();
      complex0.multiply(775);
      complex3.divide((-3.2978948363112366));
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2352.181479054217));
      Complex complex1 = complex0.multiply(0.0);
      complex0.abs();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.createComplex((-0.2587794342333105), 0.0);
      complex2.INF.hashCode();
      complex2.NaN.pow(0.0);
      Complex complex3 = complex1.NaN.sqrt1z();
      complex3.NaN.hashCode();
      complex2.getArgument();
      complex1.nthRoot(1327);
      complex2.multiply(0.46840623057785996);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.I.cosh();
      complex5.INF.reciprocal();
      complex4.getArgument();
      Complex complex6 = complex4.INF.cosh();
      Complex complex7 = complex6.NaN.tan();
      complex7.I.divide(complex6);
      Complex complex8 = complex2.multiply(complex4);
      complex8.ONE.reciprocal();
      Complex complex9 = Complex.valueOf((-2005.56939));
      complex9.ZERO.nthRoot(1327);
      complex9.ZERO.asin();
      Complex.valueOf((-2871.815));
      try { 
        complex6.nthRoot((-2951));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,951
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      complex0.sqrt();
      complex0.isNaN();
      Complex complex1 = new Complex((-1039.16591186));
      complex1.asin();
      Complex complex2 = complex0.negate();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.cosh();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex0.toString();
      complex2.divide(1223.986554);
      Complex complex3 = complex1.multiply(1223.986554);
      complex3.toString();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.cosh();
      complex1.acos();
      Complex complex2 = complex1.tanh();
      complex1.toString();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.cosh();
      Complex complex2 = complex1.acos();
      complex1.tanh();
      complex0.toString();
      complex2.divide(1223.986554);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.4088399542613178E-38));
      complex1.abs();
      Complex complex2 = complex0.multiply(512);
      complex2.INF.conjugate();
      Complex complex3 = complex1.tan();
      complex3.NaN.divide(complex0);
      Complex complex4 = complex3.tanh();
      complex3.abs();
      complex4.negate();
      Complex complex5 = Complex.valueOf(1.4088399542613178E-38, Double.NaN);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.subtract(complex1);
      complex0.multiply(1313);
      complex0.pow(complex2);
      complex3.getArgument();
      complex1.divide((-3558.3802222));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.subtract(complex0);
      complex3.createComplex((-333.20968), 518.4);
      Complex complex4 = complex3.multiply(775);
      complex0.pow(complex3);
      complex1.getArgument();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex1.acos();
      complex4.ZERO.abs();
      complex1.multiply(775);
      complex3.tan();
      Complex complex7 = complex4.tan();
      complex7.ZERO.sqrt();
      complex5.tanh();
      complex5.abs();
      complex6.negate();
      try { 
        complex1.nthRoot((-2042889544));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,042,889,544
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      complex0.getArgument();
      complex0.sin();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = Complex.ONE;
      complex1.getArgument();
      Complex complex4 = Complex.valueOf(0.7853981633974483);
      complex2.sinh();
      complex4.readResolve();
      Complex complex5 = Complex.ONE;
      complex2.conjugate();
      Complex complex6 = Complex.NaN;
      complex6.NaN.reciprocal();
      complex5.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      Complex complex7 = Complex.ONE;
      complex7.log();
      complex3.divide(complex0);
      Complex complex8 = new Complex((-1648.11175895));
      complex8.hashCode();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.INF.getArgument();
      Complex complex2 = complex0.log();
      complex2.NaN.acos();
      Complex complex3 = complex1.I.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex1.pow((-2483.1));
      complex4.I.add(complex2);
      complex4.getReal();
      Complex complex5 = complex4.ONE.add(complex3);
      complex5.ONE.divide(Double.NaN);
      complex2.getArgument();
      complex2.getArgument();
      complex4.ONE.sin();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.subtract(complex1);
      complex7.NaN.getArgument();
      int int0 = (-4784);
      try { 
        complex7.nthRoot((-4784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,784
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2352.181479054217));
      complex0.multiply(0.0);
      complex0.multiply(444);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.multiply(3066);
      complex4.pow(complex3);
      complex3.getArgument();
      Complex complex5 = new Complex(1580.53146, 1580.53146);
      Complex complex6 = complex5.exp();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex3.multiply(1);
      complex4.tan();
      complex7.tanh();
      complex8.abs();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.INF.getArgument();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.acos();
      complex1.I.createComplex(Double.NaN, Double.NaN);
      complex1.pow((-2483.1));
      complex0.subtract(Double.NaN);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.subtract(complex1);
      complex0.multiply(1313);
      complex0.pow(complex2);
      complex3.getArgument();
      Complex complex4 = complex0.exp();
      complex1.acos();
      Complex complex5 = complex0.multiply(1);
      complex4.tan();
      complex2.tanh();
      complex1.abs();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.subtract(complex0);
      complex1.multiply(1);
      Complex complex4 = complex3.pow(complex2);
      complex4.getArgument();
      complex2.exp();
      Complex complex5 = complex2.acos();
      complex1.multiply(1461);
      complex0.tan();
      complex5.tanh();
      complex4.abs();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.INF.getArgument();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex1.divide(complex3);
      complex0.getReal();
      complex0.isInfinite();
      Complex complex6 = complex3.asin();
      complex4.asin();
      complex5.atan();
      complex6.multiply(1596);
      complex3.sqrt();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.add(2.306975841522217);
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.ZERO.toString();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex1.ONE.sqrt1z();
      complex4.I.reciprocal();
      Complex complex5 = complex4.I.divide(1429.7161985937903);
      Complex complex6 = complex5.I.cos();
      complex0.getField();
      complex1.createComplex(2.306975841522217, 2.306975841522217);
      Complex complex7 = complex0.ONE.sqrt();
      complex0.isInfinite();
      Complex complex8 = complex0.I.pow(2.306975841522217);
      complex8.ONE.log();
      complex0.toString();
      Complex complex9 = complex3.pow(2.306975841522217);
      complex1.divide((-1125.63));
      Complex complex10 = complex3.pow((-1125.63));
      complex9.multiply(complex8);
      complex7.atan();
      complex6.tan();
      complex10.readResolve();
      complex10.sqrt1z();
      complex10.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex1 = complex0.INF.divide(complex0);
      complex0.I.add(complex0);
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex0.add(complex2);
      complex1.getReal();
      complex3.add(complex2);
      Complex complex4 = Complex.NaN;
      complex4.getArgument();
      complex1.getArgument();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex7.subtract(complex5);
      Complex complex9 = Complex.INF;
      complex9.getArgument();
      Complex complex10 = Complex.valueOf((-1484.04215924734));
      complex10.sinh();
      complex0.readResolve();
      Complex complex11 = complex8.conjugate();
      complex8.readResolve();
      complex2.equals(complex1);
      complex9.log();
      complex7.divide(complex11);
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(1837.3649814);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.divide(1837.3649814);
      Complex complex3 = complex2.INF.asin();
      complex2.nthRoot(725);
      Complex complex4 = complex1.divide((double) 725);
      Complex complex5 = complex0.multiply(725);
      complex5.tan();
      complex0.tanh();
      complex4.abs();
      Complex complex6 = new Complex(Double.NaN);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(995.637969293);
      complex0.NaN.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex3.I.sinh();
      complex0.getReal();
      complex0.isInfinite();
      Complex complex5 = complex2.asin();
      complex5.ONE.subtract(complex2);
      Complex.valueOf(Double.NaN, 995.637969293);
      complex2.multiply(744);
      Complex complex6 = new Complex(Double.NaN, 7.772668425499348E-8);
      complex6.tanh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      List<Complex> list0 = complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex0.pow((double) 775);
      Complex complex3 = complex0.add(complex2);
      complex1.getReal();
      Complex complex4 = complex2.add(complex1);
      complex2.getArgument();
      complex3.getArgument();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex2.subtract(complex6);
      Complex complex8 = Complex.ONE;
      complex8.getArgument();
      Complex complex9 = Complex.valueOf((-2794.0132187763));
      Complex complex10 = complex9.sinh();
      complex7.readResolve();
      Complex complex11 = Complex.ONE;
      complex11.conjugate();
      Complex complex12 = Complex.NaN;
      complex12.readResolve();
      complex5.equals(list0);
      Complex complex13 = complex10.log();
      complex8.divide(complex13);
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex3.NaN.multiply(1);
      Complex complex5 = complex2.pow(complex1);
      complex5.INF.getArgument();
      complex3.I.exp();
      complex4.acos();
      Complex complex6 = complex0.multiply(1);
      complex1.tan();
      complex3.tanh();
      complex6.abs();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.equals(complex0);
      complex0.toString();
      complex0.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.INF.getArgument();
      Complex complex2 = complex0.NaN.acos();
      complex0.nthRoot(5619);
      complex0.isNaN();
      complex2.cos();
      Complex complex3 = Complex.valueOf(0.7853981633974483, (double) 5619);
      Complex complex4 = complex3.subtract(complex0);
      complex2.multiply((-2614));
      complex0.pow(complex4);
      complex1.getArgument();
      Complex complex5 = complex1.cos();
      complex0.exp();
      complex1.acos();
      complex5.add((double) (-2614));
      complex4.multiply(1);
      Complex complex6 = complex3.tan();
      Complex complex7 = Complex.I;
      complex7.tanh();
      complex6.abs();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.cosh();
      complex1.NaN.pow(2.504508009874766E-4);
      complex1.getField();
      complex0.toString();
      int int0 = 134217729;
      // Undeclared exception!
      complex1.I.nthRoot(134217729);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(1996.4, 1996.4);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.exp();
      complex1.createComplex(1996.4, 1996.4);
      complex0.readResolve();
      complex0.readResolve();
      Complex complex4 = Complex.valueOf(0.0054579594266783715);
      complex1.ONE.add(complex4);
      Complex complex5 = complex3.subtract(complex2);
      complex5.NaN.acos();
      complex1.multiply(8391.769140820184);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getField();
      Complex complex1 = Complex.valueOf((-8391.769140820184), (-3029.7708884736));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.add(2.0);
      complex1.getArgument();
      complex1.sinh();
      complex4.atan();
      Complex complex5 = complex2.divide(complex4);
      complex5.negate();
      Complex complex6 = complex0.add((-3029.7708884736));
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex0.cosh();
      complex5.reciprocal();
      complex6.subtract(complex7);
      complex8.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(91.61205783531);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(91.61205783531, 91.61205783531);
      complex2.readResolve();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.negate();
      complex0.equals(complex4);
      Complex complex5 = complex2.multiply(2.1484038133318304);
      complex1.getField();
      Complex complex6 = new Complex(856.8329234, 5681520.400888232);
      complex6.add(complex2);
      complex1.conjugate();
      Complex complex7 = complex6.cos();
      Complex complex8 = complex5.pow(complex0);
      complex3.toString();
      Complex complex9 = complex7.tanh();
      Complex complex10 = complex8.reciprocal();
      complex0.toString();
      complex7.toString();
      complex10.multiply((-710));
      complex9.sin();
      Complex complex11 = new Complex(0.5500838756561279);
      Complex complex12 = complex11.cosh();
      Object object0 = new Object();
      complex3.equals(object0);
      complex12.tanh();
      Complex complex13 = Complex.I;
      Complex complex14 = new Complex(5681520.400888232);
      complex13.add(complex14);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-460.5084875));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.createComplex(20.0, Double.NaN);
      Complex complex4 = complex3.pow((-2483.1));
      complex1.add(complex0);
      Complex complex5 = new Complex((-2483.1), Double.NaN);
      complex5.getReal();
      Complex complex6 = complex3.add(complex1);
      complex4.getArgument();
      complex6.getArgument();
      Complex complex7 = complex0.sin();
      complex2.tanh();
      complex5.subtract(complex2);
      complex1.getArgument();
      Complex.valueOf(2613.5025);
      Complex complex8 = complex5.sinh();
      complex0.readResolve();
      Complex complex9 = complex8.conjugate();
      Object object0 = complex2.readResolve();
      complex7.equals(object0);
      complex7.log();
      complex6.divide(complex0);
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-460.5084875));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = (Complex)complex1.NaN.readResolve();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.ONE.negate();
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = complex4.multiply((-1525));
      complex4.pow(complex3);
      complex1.getArgument();
      complex2.cos();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex7.multiply((-460.5084875));
      complex8.conjugate();
      complex1.reciprocal();
      complex7.cosh();
      complex2.readResolve();
      complex6.multiply(complex3);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      complex0.equals(complex2);
      Complex complex3 = Complex.valueOf(2.0);
      Complex complex4 = complex3.multiply((-19.158832453935094));
      complex4.getField();
      Complex complex5 = new Complex((-19.158832453935094), 3634.0033968696507);
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex6.conjugate();
      Complex complex8 = new Complex(775, 3634.0033968696507);
      Complex complex9 = Complex.ZERO;
      complex1.toString();
      complex9.tanh();
      complex2.reciprocal();
      complex2.toString();
      complex1.toString();
      Complex complex10 = complex8.multiply(762);
      complex5.sin();
      complex10.cosh();
      complex4.equals("(1.5537739740300374, 0.6435942529055826)");
      Complex complex11 = complex7.tanh();
      complex11.getArgument();
      complex0.add(complex2);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex3.NaN.multiply(1);
      Complex complex5 = complex2.pow(complex1);
      complex5.INF.getArgument();
      complex4.multiply(1065);
      Complex.valueOf((-3235.4685548219));
      complex3.readResolve();
      Complex complex6 = complex0.add(complex1);
      complex1.sqrt();
      complex1.pow((-1806.853539391579));
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2352.181479054217));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.divide(complex1);
      complex1.nthRoot(715);
      Complex complex4 = complex3.add(8.924048768324976E-200);
      Complex complex5 = complex2.acos();
      complex1.readResolve();
      complex5.equals(complex3);
      Complex complex6 = complex5.multiply(complex4);
      complex5.multiply(1.0);
      complex6.multiply(2604);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      complex1.readResolve();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.valueOf((-2278.426609871));
      complex2.equals(complex4);
      complex3.multiply((-2278.426609871));
      complex2.getField();
      complex3.add(complex0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.cos();
      Complex complex8 = complex1.pow(complex6);
      complex0.toString();
      complex7.tanh();
      complex7.reciprocal();
      complex7.toString();
      Complex complex9 = Complex.ONE;
      complex9.toString();
      complex7.multiply((-710));
      Complex complex10 = new Complex(0.0, (-2278.426609871));
      complex10.sin();
      Complex complex11 = complex9.cosh();
      complex11.equals(complex6);
      complex2.tanh();
      complex8.add(complex6);
      Complex complex12 = new Complex((-710));
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(774.85008);
      complex0.getField();
      Complex complex1 = Complex.valueOf((-3029.7708884736), (-1.3324111396289096E-36));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.add((-4.0));
      complex1.getArgument();
      Complex complex4 = complex2.sinh();
      complex3.atan();
      Complex complex5 = Complex.ONE;
      complex2.divide(complex5);
      Complex complex6 = Complex.valueOf((-1.3324111396289096E-36));
      complex6.negate();
      complex4.add(10.941102299394906);
      complex3.sqrt1z();
      complex1.cosh();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = new Complex((-1.3324111396289096E-36), 1.4740935036104437);
      complex8.subtract(complex7);
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(995.637969293);
      complex0.NaN.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex3.I.sinh();
      complex0.getReal();
      complex0.isInfinite();
      Complex complex5 = complex0.pow(complex2);
      complex4.getArgument();
      complex3.cos();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex4.multiply(Double.NaN);
      Complex complex9 = complex8.conjugate();
      complex0.reciprocal();
      Complex complex10 = complex9.cosh();
      Complex complex11 = new Complex(995.637969293, 3143.6491);
      complex11.readResolve();
      complex7.acos();
      Complex complex12 = new Complex(1, 1);
      complex12.multiply(complex2);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex4.multiply(17);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex0.reciprocal();
      complex0.divide(complex6);
      complex3.nthRoot(17);
      complex6.add(2.487138271331787);
      complex3.acos();
      complex2.readResolve();
      complex6.equals(complex8);
      complex5.multiply(complex1);
      complex3.multiply((double) 17);
      complex7.multiply(2604);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.subtract(complex0);
      complex3.NaN.multiply(1);
      Complex complex4 = complex2.pow(complex1);
      complex4.INF.getArgument();
      Complex complex5 = complex2.cos();
      complex5.I.exp();
      Complex complex6 = complex5.acos();
      complex6.INF.multiply(1675.7);
      complex2.conjugate();
      Complex complex7 = complex2.ZERO.reciprocal();
      complex1.cosh();
      complex7.reciprocal();
      Complex complex8 = complex6.subtract(complex0);
      complex0.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.sqrt();
      complex0.nthRoot(775);
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.I.subtract(complex0);
      complex3.NaN.multiply(1);
      Complex complex4 = complex2.pow(complex1);
      complex4.INF.getArgument();
      Complex complex5 = complex2.cos();
      complex5.I.exp();
      Complex complex6 = complex5.acos();
      complex6.INF.multiply(1675.7);
      Complex complex7 = complex2.conjugate();
      complex2.ZERO.reciprocal();
      Complex complex8 = complex1.cosh();
      complex8.NaN.readResolve();
      complex5.acos();
      complex6.multiply(complex2);
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf((-5133.80037335908), 0.0);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.INF.tanh();
      complex0.divide(2.6869297963554945E-8);
      Complex complex3 = complex2.ZERO.reciprocal();
      complex3.cos();
      complex2.NaN.add((-1064.0));
      complex0.cos();
      complex0.abs();
      complex0.I.divide(0.0);
      complex0.NaN.tan();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      Complex complex1 = complex0.reciprocal();
      complex0.I.sqrt();
      complex1.ZERO.toString();
      Complex complex2 = complex0.atan();
      complex2.INF.toString();
      complex2.NaN.getArgument();
      complex2.INF.getField();
      complex0.createComplex((-2162.75826060304), 2.0);
      Complex complex3 = Complex.valueOf(2.0, (-2162.75826060304));
      complex1.getArgument();
      Complex complex4 = complex1.pow(complex3);
      complex0.multiply(2.0);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      double double0 = (-4.333719263537725E-8);
      Complex complex0 = Complex.valueOf((-4.333719263537725E-8), (-4.333719263537725E-8));
      complex0.NaN.getArgument();
      double double1 = 2.0;
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      complex0.ZERO.multiply(complex1);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-6.97715981957), 104.9811);
      complex0.isInfinite();
      complex0.NaN.hashCode();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.getField();
      Complex complex1 = Complex.valueOf(0.0, (-3029.7708884736));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.add((-3029.7708884736));
      complex2.getArgument();
      complex1.sinh();
      Complex complex4 = complex1.atan();
      complex1.INF.divide(complex3);
      complex4.negate();
      Complex complex5 = complex4.ONE.add((-3029.7708884736));
      complex5.ONE.sqrt1z();
      complex5.INF.cosh();
      Complex complex6 = complex0.reciprocal();
      complex6.ONE.subtract(complex1);
      complex0.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = 514.49431458;
      Complex complex0 = new Complex(514.49431458);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex2.ZERO.cos();
      complex3.I.negate();
      double double1 = 46.90873381;
      Complex complex4 = new Complex(514.49431458, 46.90873381);
      Complex complex5 = complex0.subtract(complex4);
      complex5.I.sinh();
      Complex.valueOf(2.0);
      Complex.valueOf(514.49431458);
      complex0.pow(514.49431458);
      complex1.NaN.getField();
      complex1.abs();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.I.cosh();
      complex7.ZERO.add((-1849.68512315791));
      try { 
        complex7.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      complex0.INF.readResolve();
      Complex complex1 = complex0.cosh();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1273.676));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.divide((-1273.676));
      complex2.I.add(complex1);
      int int0 = 0;
      Complex complex3 = complex1.multiply(0);
      try { 
        complex3.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-460.5084875));
      Complex complex1 = complex0.NaN.acos();
      complex1.NaN.readResolve();
      Complex complex2 = complex1.I.sqrt1z();
      complex2.ONE.negate();
      complex0.equals((Object) null);
      Complex complex3 = complex1.multiply((-460.5084875));
      complex1.getField();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex0.conjugate();
      complex5.INF.cos();
      Complex complex6 = complex1.pow(complex4);
      complex6.ONE.toString();
      Complex complex7 = complex4.ONE.tanh();
      Complex complex8 = complex3.reciprocal();
      complex1.I.toString();
      complex8.INF.toString();
      Complex complex9 = complex0.multiply((-710));
      complex3.NaN.sin();
      Complex complex10 = complex4.cosh();
      complex5.equals(complex3);
      complex0.tanh();
      complex7.add(complex10);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(1842.77);
      Complex complex2 = complex0.createComplex(1842.77, 5.8759898326913254E166);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.atan();
      complex3.INF.hashCode();
      Complex complex5 = complex3.NaN.divide((-5.526819276639527E-9));
      Complex complex6 = complex0.NaN.asin();
      Complex complex7 = complex3.INF.cos();
      complex0.ONE.reciprocal();
      complex7.ZERO.hashCode();
      complex3.divide((-2423.78573707));
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex7.multiply(complex5);
      Object object0 = complex9.readResolve();
      complex8.equals(object0);
      Complex complex10 = complex6.acos();
      Complex complex11 = complex10.I.subtract(complex1);
      complex11.INF.asin();
      complex2.multiply(complex4);
      complex3.isNaN();
      complex9.multiply(complex8);
      complex10.sqrt();
      complex5.createComplex(0.0, 1842.77);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5270.9242, (-2368.388));
      complex0.ZERO.cosh();
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.NaN.readResolve();
      Complex complex2 = complex0.createComplex((-2368.388), 5270.9242);
      complex0.isInfinite();
      complex2.multiply(1033.0);
      Complex complex3 = complex0.conjugate();
      complex3.tan();
      complex0.negate();
      complex0.cosh();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1744.52008664228);
      Complex.valueOf(1744.52008664228);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.sqrt1z();
      complex2.getArgument();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.acos();
      complex3.INF.multiply(1348.5429);
      Complex complex5 = complex4.add(0.0);
      complex5.NaN.cos();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.NaN.conjugate();
      complex7.INF.getArgument();
      complex1.isInfinite();
      complex6.hashCode();
      complex2.sin();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.sinh();
      complex2.ONE.getArgument();
      complex0.ONE.readResolve();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.I.sqrt();
      complex5.ZERO.log();
      Complex complex6 = complex4.multiply(1);
      complex6.pow(complex4);
      complex6.divide(complex2);
      Complex complex7 = complex4.createComplex(1, (-2779.5));
      Complex complex8 = complex0.cos();
      complex7.divide(complex3);
      complex8.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1256.0), (-1256.0));
      complex0.INF.sinh();
      Complex.valueOf((-1256.0), (-1256.0));
      complex0.getReal();
      int int0 = (-2289);
      try { 
        complex0.nthRoot((-2289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,289
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      complex1.I.add(complex0);
      complex2.log();
      complex0.equals((Object) null);
      complex0.toString();
      complex0.I.nthRoot(1);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.add((-3014.0));
      complex4.multiply(1);
      complex0.tan();
      Complex complex5 = complex1.tanh();
      complex5.I.abs();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.multiply(0.0);
      Complex complex1 = new Complex(0.0, (-3447.54926));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex3.I.add(9.835827818608177E-9);
      complex1.NaN.acos();
      complex2.toString();
      complex0.getReal();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex5.I.sqrt1z();
      complex3.I.exp();
      complex1.ZERO.getArgument();
      complex6.subtract(complex2);
      Complex complex7 = complex5.I.add((-389.679));
      Complex complex8 = complex1.multiply(557);
      complex8.log();
      complex8.I.abs();
      complex1.getField();
      complex0.divide((-940.740353256));
      complex3.getImaginary();
      complex7.tanh();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(511.7555329338859, 0.0);
      Complex complex1 = new Complex((-2587.66), 0.2137243151664734);
      complex1.ZERO.getField();
      Complex complex2 = complex1.I.reciprocal();
      complex2.INF.multiply(1);
      Complex complex3 = Complex.valueOf(0.0);
      complex1.readResolve();
      Complex complex4 = complex0.add(complex1);
      complex1.sqrt();
      complex0.pow(0.0);
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex1.I.multiply(complex0);
      complex3.NaN.pow(0.0);
      complex2.reciprocal();
      Complex complex4 = complex0.INF.sqrt1z();
      Complex complex5 = complex0.divide(2.1076716069929933E-95);
      complex4.ONE.sin();
      complex4.readResolve();
      Complex complex6 = complex5.negate();
      complex6.I.getArgument();
      try { 
        complex5.I.nthRoot((-2727));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,727
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.pow(2612.7166725);
      complex0.NaN.readResolve();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.INF.add(974.1141064);
      complex2.I.hashCode();
      complex1.ZERO.toString();
      Complex complex4 = complex0.ZERO.divide(1.222834825515747);
      complex1.subtract(complex3);
      Complex complex5 = complex4.I.multiply(complex3);
      complex5.I.sinh();
      complex1.add(complex0);
      Complex complex6 = complex2.negate();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex6.I.subtract(complex7);
      Complex complex9 = complex8.tan();
      complex8.INF.abs();
      Complex complex10 = complex6.NaN.log();
      complex10.ONE.subtract(1.222834825515747);
      complex6.INF.multiply(complex0);
      complex4.exp();
      complex2.getImaginary();
      Complex complex11 = complex1.atan();
      complex11.INF.getArgument();
      Complex complex12 = complex11.tan();
      complex12.NaN.readResolve();
      complex12.I.hashCode();
      complex9.conjugate();
      complex2.isInfinite();
      complex3.asin();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1172.3234093, 0.0);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.INF.getArgument();
      Complex complex2 = complex0.log();
      complex2.NaN.acos();
      Complex complex3 = complex1.I.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex1.pow((-2483.1));
      Complex complex5 = complex4.I.add(complex2);
      complex4.getReal();
      complex4.ONE.add(complex3);
      complex2.getArgument();
      complex2.getArgument();
      complex4.ONE.sin();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex6.subtract(complex1);
      complex7.NaN.getArgument();
      Complex complex8 = Complex.valueOf((-2794.0132187763));
      complex0.NaN.sinh();
      complex5.readResolve();
      Complex complex9 = complex8.conjugate();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      complex4.log();
      complex9.divide(complex2);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(4847.718);
      complex0.ONE.pow(551.1);
      Complex complex2 = Complex.valueOf(7.913674211949961E-185);
      complex2.getField();
      complex0.log();
      complex2.hashCode();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2352.181479054217));
      Complex complex1 = complex0.multiply(0.0);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ONE.reciprocal();
      complex1.I.subtract(0.0);
      complex0.log();
      Complex complex3 = complex0.exp();
      complex3.abs();
      complex0.sin();
      complex0.cosh();
      complex3.toString();
      complex2.conjugate();
      complex1.divide((-1356.4119));
      complex1.multiply((-207));
      complex2.sqrt();
      complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(1837.3649814);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.divide(1837.3649814);
      complex2.INF.asin();
      complex1.INF.subtract(0.0);
      complex0.createComplex((-1437.0), 1814.05566);
      complex0.tan();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(995.637969293);
      complex0.NaN.abs();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex0.I.divide(complex2);
      Complex complex4 = complex3.I.sinh();
      complex0.getReal();
      complex0.isInfinite();
      Complex complex5 = complex2.asin();
      complex5.ONE.subtract(complex2);
      complex3.I.multiply(17);
      Complex complex6 = Complex.NaN;
      complex6.ZERO.reciprocal();
      Complex complex7 = complex4.INF.divide(complex6);
      complex3.nthRoot(1);
      Complex complex8 = complex0.add(995.637969293);
      Complex complex9 = complex4.acos();
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      complex2.multiply(complex9);
      complex8.multiply(1163.113389879);
      complex7.multiply(2604);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      double double0 = (-428.2868726396);
      Complex complex0 = new Complex(177.2, (-428.2868726396));
      complex0.INF.sqrt();
      Complex complex1 = complex0.ONE.acos();
      complex1.INF.getField();
      double double1 = 3886.3772999673;
      complex0.createComplex((-1505.5605), 3886.3772999673);
      Complex complex2 = complex0.multiply((-428.2868726396));
      Complex complex3 = complex2.I.tanh();
      try { 
        complex3.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
      Complex.valueOf(1025.6823115430154, 20.0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      complex0.ONE.getField();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.sin();
      complex3.cos();
      complex4.NaN.abs();
      complex4.NaN.divide(6.283185307179586);
      complex1.tan();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.I.multiply((-829));
      complex6.INF.toString();
      complex4.conjugate();
      Complex complex7 = complex2.atan();
      complex7.ONE.toString();
      Complex.valueOf(1675.287);
      complex5.getArgument();
      complex0.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.abs();
      complex0.isNaN();
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex3.INF.add(1513.0);
      complex4.ZERO.acos();
      Complex.valueOf((-1045.9554953));
      Complex complex5 = complex4.ONE.sin();
      Complex complex6 = complex0.add(1513.0);
      complex6.I.getArgument();
      Complex complex7 = complex0.sqrt();
      complex1.acos();
      complex7.divide(1513.0);
      complex5.multiply(17);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 6.463452607647978E-108);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.reciprocal();
      complex1.ZERO.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.sin();
      complex0.ONE.multiply(complex1);
      Complex complex4 = complex2.multiply((-555));
      Complex complex5 = complex4.atan();
      complex5.I.toString();
      Complex complex6 = complex5.I.createComplex(503.7571105187, (-1356.8678115));
      Complex complex7 = complex6.I.sin();
      complex4.ONE.cos();
      complex3.createComplex(842.6916, (-67.82193547916748));
      complex5.sin();
      complex0.reciprocal();
      Complex complex8 = complex0.sinh();
      complex8.NaN.readResolve();
      Complex complex9 = complex8.asin();
      complex9.ZERO.tan();
      complex7.asin();
      complex2.isNaN();
      complex0.subtract((-1356.8678115));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.INF.exp();
      Complex complex4 = complex0.cos();
      complex4.ONE.add((-2.3995994000400915E-10));
      Complex complex5 = complex4.multiply(2842);
      Complex complex6 = complex5.NaN.acos();
      complex5.ZERO.add(complex6);
      complex3.INF.exp();
      complex6.INF.add((-684.6157758387011));
      Complex complex7 = complex0.ZERO.pow((-738.3883));
      complex7.ONE.divide(2.14614200592041);
      complex2.sqrt();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.ONE.log();
      complex9.INF.multiply((-2.3995994000400915E-10));
      complex5.multiply(complex0);
      Complex complex10 = complex0.cos();
      complex4.cosh();
      complex3.getImaginary();
      Complex complex11 = complex3.divide(complex5);
      complex11.getReal();
      complex7.sqrt();
      complex7.abs();
      complex10.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-1220.2972876849196));
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.I.multiply(1);
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = Complex.valueOf((double) 1, (double) 1);
      Complex complex7 = complex6.ONE.multiply(0.0);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex2.INF.sqrt1z();
      complex0.conjugate();
      Complex complex9 = complex4.atan();
      complex9.ONE.readResolve();
      complex2.readResolve();
      Complex complex10 = complex9.sinh();
      complex5.log();
      Complex complex11 = complex0.ZERO.asin();
      assertTrue(complex11.equals((Object)complex7));
      
      Complex complex12 = complex10.subtract(complex5);
      assertEquals(1.7621827214624348, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex0.sqrt();
      assertEquals(0.7071067811865475, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex6.sin();
      Complex complex15 = complex14.ZERO.cosh();
      Complex complex16 = complex8.add(complex14);
      Complex complex17 = complex14.ZERO.subtract((double) 1);
      complex3.readResolve();
      Complex complex18 = complex15.asin();
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex18.getReal(), 0.01);
      
      complex16.sqrt1z();
      complex5.getField();
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      List<Complex> list0 = complex4.nthRoot(2116);
      assertEquals(2116, list0.size());
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      complex17.getImaginary();
      assertEquals(0.6349639147847361, complex14.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      
      Complex complex19 = Complex.valueOf(0.0);
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.multiply(1);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.sqrt();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }
}
