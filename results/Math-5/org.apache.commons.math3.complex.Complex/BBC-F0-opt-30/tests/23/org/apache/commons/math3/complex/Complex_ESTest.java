/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:58:01 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1256.94142201286, (-2.595456638706416E298));
      complex0.divide((-2.22571E-4));
      complex1.abs();
      Complex complex2 = new Complex(2.056466263408266E-8, (-20.0));
      Complex complex3 = complex2.createComplex((-2.595456638706416E298), 2146.5686);
      Complex complex4 = complex1.acos();
      complex4.ONE.createComplex(5590.26203, 2648.084688);
      complex3.nthRoot(4266);
      complex2.tan();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(46);
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(46, 46);
      complex0.INF.multiply(complex1);
      Complex complex2 = complex0.pow((double) 46);
      Complex complex3 = complex1.divide(complex0);
      complex3.ZERO.asin();
      complex2.sqrt1z();
      Complex complex4 = complex0.reciprocal();
      complex3.tan();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(20.0, 20.0);
      complex0.createComplex(20.0, 20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(46);
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(46, 46);
      complex0.INF.multiply(complex1);
      Complex complex2 = complex0.pow((double) 46);
      Complex complex3 = complex1.divide(complex0);
      complex3.ZERO.asin();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex0.reciprocal();
      complex3.tan();
      complex4.negate();
      complex4.tan();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(5.267948957869391E-8);
      Complex complex1 = complex0.atan();
      complex1.INF.abs();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.I.log();
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex4.abs();
      Complex complex5 = complex4.I.subtract(complex2);
      complex5.ZERO.abs();
      complex5.ZERO.cos();
      complex2.NaN.negate();
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.log();
      Complex complex8 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.NaN.tan();
      complex2.negate();
      complex7.readResolve();
      complex7.toString();
      Complex complex10 = complex8.sqrt();
      complex5.add((-15.545153770248703));
      complex1.subtract(5.267948957869391E-8);
      Complex complex11 = complex6.atan();
      complex0.I.getField();
      complex9.getField();
      complex8.toString();
      Complex complex12 = complex8.negate();
      complex12.pow(complex10);
      complex11.multiply(complex8);
      complex1.getField();
      complex7.abs();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.createComplex(2.0882534980773926, (-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.acos();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.850529795578401E-14, 4.850529795578401E-14);
      Complex complex1 = new Complex(4.850529795578401E-14);
      complex1.INF.createComplex(4.850529795578401E-14, 1828.0619909567872);
      complex0.equals(complex1);
      complex0.exp();
      Complex.valueOf(4.850529795578401E-14, 0.11081436276435852);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      complex1.divide(0.9985741954366797);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.acos();
      complex4.getField();
      complex0.tan();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.valueOf(0.9985741954366797, 6.734172833429278E268);
      complex4.NaN.cos();
      complex6.sqrt1z();
      complex4.toString();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-984.423995659348), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, (-984.423995659348));
      complex1.ONE.conjugate();
      Complex complex2 = Complex.valueOf(4232.0, 2267.4932484398);
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1095.9606121);
      Complex complex1 = new Complex((-1.4591838284752642E87), 7.609396391563323E66);
      complex1.subtract(Double.NaN);
      Complex complex2 = Complex.I;
      complex2.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.ONE;
      complex2.equals(complex0);
      complex1.divide(complex4);
      complex1.createComplex(6.38680580635, 6.38680580635);
      Complex complex5 = Complex.ONE;
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.createComplex(Double.POSITIVE_INFINITY, 46);
      Complex complex2 = Complex.ONE;
      complex2.I.exp();
      Complex complex3 = complex1.tanh();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(46, Double.POSITIVE_INFINITY);
      complex0.nthRoot(46);
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(4881.930539475043, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
      complex1.pow((double) 46);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.sqrt1z();
      complex3.reciprocal();
      complex0.tan();
      complex2.negate();
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(2738);
      complex0.getImaginary();
      complex0.createComplex(2738, 2738);
      complex0.pow((double) 2738);
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(2738);
      Complex complex3 = complex2.tan();
      complex3.tanh();
      complex1.negate();
      complex0.negate();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex2.multiply((-2769));
      complex0.I.getField();
      complex1.divide(complex2);
      complex2.sqrt1z();
      complex0.reciprocal();
      complex1.tan();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.2934079930260234);
      Complex complex1 = new Complex(2.0);
      complex1.multiply(2010);
      complex0.subtract((-237.0));
      Complex complex2 = new Complex(2.0);
      Complex complex3 = new Complex(2010, (-237.0));
      complex3.add(1.0);
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1100.951113993026);
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.abs();
      complex0.NaN.getField();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2021.5121938447123), 608.28383753871);
      complex0.subtract((double) 46);
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(2115.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.9999633313459111, 0.9999633313459111);
      Complex complex1 = Complex.I;
      complex1.I.getField();
      complex0.multiply(complex1);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = Complex.valueOf(203.78944, (-1.1345515834332824E-7));
      Complex complex4 = complex0.add(0.9999633313459111);
      Complex complex5 = Complex.valueOf(608.28383753871, 40.9123401447405);
      complex4.ZERO.pow(complex5);
      Complex complex6 = complex3.asin();
      complex6.NaN.multiply((-326.4278522411));
      complex1.add(complex3);
      complex3.ONE.log();
      Complex complex7 = complex0.subtract(0.9999633313459111);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.NaN.exp();
      complex3.add((-1546502.8998743002));
      complex7.INF.subtract((-1225.505272134));
      complex4.cos();
      complex9.equals("sample size ({0}) must be less than or equal to population size ({1})");
      Complex complex10 = complex2.tan();
      complex10.reciprocal();
      complex10.createComplex((-1183.650143), (-326.4278522411));
      complex7.sqrt();
      Complex.valueOf((-1986.4));
      complex0.createComplex((-1225.505272134), 203.78944);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5.721951534729663E-8);
      complex0.INF.conjugate();
      Complex complex1 = new Complex((-1.4591838284752642E87));
      Complex complex2 = complex1.add(5.721951534729663E-8);
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf((-4.135121057126514E24), (-3043.88));
      complex3.cos();
      Complex.valueOf((-3043.88));
      Complex complex4 = Complex.NaN;
      complex2.pow(complex1);
      Complex complex5 = new Complex(6.283185307179586);
      Complex complex6 = complex5.multiply((-9.185071463667081E-9));
      complex6.getField();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.multiply(complex2);
      complex8.readResolve();
      complex2.divide(complex4);
      complex7.subtract((-2038.1918627144971));
      complex1.reciprocal();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.530436781375042E19, 0.0);
      complex0.toString();
      complex0.toString();
      Complex complex1 = Complex.valueOf(560.8, 20.0);
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.subtract(0.0);
      complex2.sqrt();
      Complex complex3 = complex1.divide(1.530436781375042E19);
      Complex complex4 = complex0.multiply((-273.6803));
      complex4.I.readResolve();
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex5.ZERO.createComplex(1.530436781375042E19, 20.0);
      Complex complex7 = complex5.tan();
      complex7.INF.sin();
      complex3.sqrt1z();
      complex6.conjugate();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 34);
      Complex complex1 = complex0.createComplex(34, (-1762.0));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.tan();
      complex1.ZERO.add((double) 34);
      complex3.ONE.subtract(Double.POSITIVE_INFINITY);
      complex1.getArgument();
      complex0.getArgument();
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.tan();
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(1489.5363374645588);
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract((double) 46);
      Complex complex1 = new Complex(46);
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex1.acos();
      complex3.getField();
      complex1.tan();
      Complex complex4 = new Complex(1.0158311896715326, 4.16603235883392E133);
      complex2.tanh();
      Complex complex5 = complex4.asin();
      complex5.negate();
      complex2.getArgument();
      complex3.asin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.sqrt1z();
      complex0.toString();
      complex0.reciprocal();
      complex4.tan();
      complex3.getArgument();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 46);
      Complex complex1 = complex0.createComplex(3178.06924, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex1.divide((-2.2760305815037064E-4));
      complex1.tanh();
      Complex complex3 = new Complex(46);
      complex1.reciprocal();
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.valueOf(3178.06924);
      complex5.I.readResolve();
      complex5.getArgument();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ONE.negate();
      complex3.I.getArgument();
      Complex complex4 = complex2.I.pow(0.0);
      complex4.ZERO.multiply(complex0);
      complex2.ZERO.readResolve();
      complex2.I.nthRoot(17);
      Complex complex5 = complex1.INF.pow(complex0);
      complex5.ONE.negate();
      complex1.INF.readResolve();
      complex1.getImaginary();
      complex0.toString();
      complex0.getReal();
      complex0.divide(2861.0);
      Complex complex6 = Complex.I;
      complex6.tanh();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(46);
      complex0.getImaginary();
      Complex complex1 = complex0.createComplex(46, 46);
      complex0.pow((double) 46);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.createComplex(46, (-2518.61));
      Complex complex4 = Complex.I;
      complex1.divide((-2518.61));
      complex2.sqrt();
      complex3.tanh();
      Complex complex5 = new Complex(79.90566693);
      Complex complex6 = new Complex(663.52939, (-1841.3949794557));
      complex6.reciprocal();
      complex0.tan();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 6.283185307179586;
      Complex.valueOf(6.283185307179586);
      int int0 = 46;
      // Undeclared exception!
      complex0.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(380.28520185267);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf((double) 46);
      complex2.tan();
      complex0.readResolve();
      Complex complex4 = complex1.createComplex(Double.NaN, Double.NaN);
      Complex complex5 = Complex.valueOf(2.0);
      complex5.add(complex0);
      Complex complex6 = complex2.multiply(complex5);
      complex4.getField();
      Complex complex7 = complex0.acos();
      complex2.acos();
      Complex complex8 = complex6.divide(complex2);
      complex7.getReal();
      Complex complex9 = complex1.sqrt1z();
      complex9.ONE.conjugate();
      complex3.sqrt();
      complex8.atan();
      complex7.pow(complex4);
      complex2.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract((double) 46);
      Complex complex1 = complex0.divide((-4393.614));
      complex1.readResolve();
      Complex complex2 = complex1.acos();
      complex2.getField();
      Complex complex3 = complex1.tan();
      Complex complex4 = new Complex(1.0158311896715326, 4.16603235883392E133);
      Complex complex5 = complex2.divide(complex4);
      complex3.createComplex(699.861, 3676.037234);
      Complex complex6 = complex2.subtract(4.16603235883392E133);
      Complex complex7 = new Complex(699.861, 46);
      complex7.atan();
      complex1.tanh();
      complex3.readResolve();
      complex7.abs();
      complex6.createComplex(46, 46);
      complex3.pow(699.861);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.multiply(complex5);
      Complex complex10 = complex9.exp();
      complex3.hashCode();
      Complex.valueOf(876.556, Double.NaN);
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex0.getReal();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex1.negate();
      complex3.getArgument();
      Complex complex5 = complex2.pow(1.2424439441817321E-60);
      Complex complex6 = complex3.multiply(complex1);
      complex1.readResolve();
      complex4.nthRoot(17);
      Complex complex7 = complex0.pow(complex2);
      complex6.negate();
      complex7.readResolve();
      complex0.getImaginary();
      complex6.toString();
      complex5.getReal();
      complex4.divide((double) 17);
      complex7.multiply(1567);
      Complex complex8 = Complex.NaN;
      Object object0 = complex8.readResolve();
      complex1.equals(object0);
      Complex.valueOf((-2190.7), (-4575.89769262));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.INF;
      complex1.pow(complex0);
      complex0.hashCode();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = complex3.divide(0.9999999999997629);
      complex3.readResolve();
      complex0.multiply(complex4);
      complex0.nthRoot(37);
      Complex complex5 = new Complex(2861.0);
      complex0.readResolve();
      complex4.readResolve();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex0.getReal();
      Complex complex6 = complex2.acos();
      complex6.toString();
      Complex complex7 = new Complex(20.0, 2601.3);
      complex7.subtract(31.100918566435066);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.atan();
      complex6.isInfinite();
      complex9.sqrt();
      complex4.acos();
      complex7.atan();
      complex3.sqrt1z();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(380.28520185267);
      Complex complex1 = complex0.createComplex(380.28520185267, 46);
      complex1.cosh();
      Complex complex2 = complex0.createComplex(46, (-1980.0));
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 46);
      Complex complex4 = Complex.I;
      complex4.divide(380.28520185267);
      Complex complex5 = complex2.sqrt();
      complex3.tanh();
      complex5.reciprocal();
      complex2.tan();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1934.2127407, 1934.2127407);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.add(1934.2127407);
      Complex complex4 = Complex.valueOf(5.402252865260326E-227);
      complex0.ONE.nthRoot(2351);
      Complex complex5 = complex4.sqrt();
      complex4.toString();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.INF.pow(complex3);
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex8.ZERO.pow((double) 2351);
      complex9.ONE.acos();
      complex0.multiply(complex6);
      Complex complex10 = complex5.cos();
      Complex complex11 = complex5.INF.multiply(90);
      complex11.INF.getField();
      complex10.toString();
      complex2.asin();
      Complex complex12 = complex5.multiply(1934.2127407);
      complex12.getField();
      Complex complex13 = complex1.add(complex3);
      Complex.valueOf(1934.2127407, 2300.933610035317);
      complex3.sin();
      Complex complex14 = complex6.createComplex(6.283185307179586, 90);
      complex13.readResolve();
      complex5.tan();
      Complex complex15 = complex3.pow(6.283185307179586);
      complex7.subtract(complex14);
      complex15.tan();
      complex10.sqrt1z();
      complex14.subtract(complex15);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2420918941497803);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.exp();
      Complex complex3 = (Complex)complex1.ZERO.readResolve();
      Complex complex4 = (Complex)complex0.readResolve();
      Complex complex5 = complex1.I.sqrt1z();
      Complex complex6 = Complex.valueOf((-1424.7482848), (-1424.7482848));
      complex5.toString();
      complex0.abs();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex4.pow(0.24740394949913025);
      complex6.multiply(complex1);
      Complex complex9 = complex3.asin();
      Complex complex10 = complex2.acos();
      Complex complex11 = Complex.valueOf(9.007199254740992E15);
      complex5.tan();
      Complex complex12 = new Complex(0.24740394949913025);
      complex12.readResolve();
      complex5.add(complex1);
      complex10.multiply(complex9);
      complex0.getField();
      complex11.acos();
      complex8.multiply(9.007199254740992E15);
      complex3.acos();
      complex7.asin();
      complex9.divide(complex6);
      complex12.getReal();
      complex1.sqrt1z();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.I.log();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.subtract(1251.1933931);
      Complex complex5 = Complex.valueOf((-3449.452), 1251.1933931);
      complex4.toString();
      complex5.abs();
      complex0.tan();
      Complex complex6 = complex4.divide(complex0);
      complex4.createComplex(2115.0, (-3439.73));
      complex0.subtract((-469.67635439834413));
      Complex complex7 = Complex.ONE;
      complex7.atan();
      Complex complex8 = complex6.tanh();
      complex0.readResolve();
      Complex complex9 = Complex.INF;
      complex9.abs();
      Complex complex10 = complex8.createComplex(3.4674011002723395, 3.4674011002723395);
      Complex complex11 = Complex.valueOf((-3449.452));
      complex11.pow(0.0);
      complex10.multiply(complex3);
      complex6.exp();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(3024);
      Complex complex1 = complex0.atan();
      complex1.getImaginary();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.log();
      complex0.hashCode();
      Complex complex4 = complex1.asin();
      complex2.tan();
      Complex complex5 = new Complex((-1028.99041792591));
      complex5.tanh();
      complex4.asin();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-594.118085963981));
      Complex complex1 = complex0.pow((-594.118085963981));
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.NaN.subtract((-594.118085963981));
      Complex complex3 = complex2.tan();
      complex3.tanh();
      complex1.asin();
      Complex complex4 = complex0.negate();
      complex0.pow(457.8475211889664);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(380.28520185267);
      Complex complex1 = complex0.createComplex(380.28520185267, 46);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.createComplex(46, (-1980.0));
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 46);
      Complex complex5 = Complex.I;
      complex5.divide(380.28520185267);
      complex3.sqrt();
      complex4.tanh();
      complex2.isNaN();
      complex0.atan();
      Complex complex6 = new Complex(0.3318578004837036, (-585.0977598483));
      complex6.add(complex5);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(2861.0);
      Complex complex4 = Complex.valueOf(2861.0, 2861.0);
      complex0.toString();
      complex0.abs();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex4.pow(2861.0);
      Complex complex7 = complex1.multiply(complex0);
      complex4.asin();
      complex5.acos();
      Complex.valueOf(2.617421272441795);
      complex1.tan();
      complex5.readResolve();
      Complex complex8 = complex7.createComplex(0.0, 2.617421272441795);
      Complex.valueOf(1.5707963267948966);
      Complex complex9 = Complex.valueOf(938.1024788975);
      complex8.add(complex9);
      complex3.multiply(complex5);
      Complex complex10 = Complex.NaN;
      complex10.getField();
      complex10.acos();
      Complex complex11 = complex6.multiply(Double.POSITIVE_INFINITY);
      complex11.acos();
      complex8.asin();
      complex9.divide(complex10);
      complex11.getReal();
      complex2.sqrt1z();
      Complex complex12 = Complex.valueOf((-1682.08385868447));
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-0.542792273512589));
      Complex complex1 = new Complex((-0.542792273512589), (-1.0));
      complex0.ZERO.multiply(complex1);
      Complex complex2 = complex0.add((-0.542792273512589));
      complex2.cos();
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex0.I.add(1296.337256557);
      complex4.ONE.pow(complex2);
      complex0.INF.multiply((-1.0));
      complex1.INF.getField();
      Complex complex5 = Complex.I;
      Complex complex6 = complex1.multiply(complex5);
      complex6.I.readResolve();
      complex1.divide(complex2);
      complex3.subtract(1.004894733428955);
      complex1.reciprocal();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex0.NaN.divide(complex1);
      complex3.NaN.cos();
      Complex complex4 = complex0.subtract(1251.1933931);
      Complex complex5 = Complex.valueOf((-3449.452), 1251.1933931);
      complex4.toString();
      complex5.abs();
      Complex complex6 = complex0.asin();
      complex6.ONE.pow((-3449.452));
      complex4.ONE.multiply(complex2);
      Complex complex7 = complex6.ZERO.asin();
      Complex complex8 = complex4.acos();
      Complex complex9 = Complex.valueOf(3669.360163194817);
      complex8.INF.tan();
      complex9.INF.readResolve();
      complex7.NaN.createComplex((-3449.452), 975.3);
      Complex complex10 = Complex.valueOf(1251.1933931);
      complex10.ZERO.add(complex1);
      complex10.I.multiply(complex6);
      complex8.getField();
      Complex complex11 = complex8.acos();
      complex11.multiply(3669.360163194817);
      complex11.INF.acos();
      Complex complex12 = complex7.asin();
      complex5.divide(complex0);
      complex5.getReal();
      complex12.sqrt1z();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, (-1.1124565511436785E-7));
      Complex complex3 = complex2.ONE.tanh();
      complex3.abs();
      complex0.ONE.abs();
      Complex complex4 = complex2.I.pow((-3292.0));
      complex3.I.multiply(complex1);
      complex0.hashCode();
      complex2.cosh();
      complex4.createComplex(13.339200678219672, (-1.1124565511436785E-7));
      Complex complex5 = Complex.valueOf(0.0, (-1.1124565511436785E-7));
      complex0.divide(1.0158311896715326);
      complex0.getArgument();
      Complex complex6 = new Complex(Double.NaN);
      Complex complex7 = complex6.sqrt();
      complex7.tanh();
      complex3.isNaN();
      Complex complex8 = Complex.I;
      complex8.atan();
      complex5.add(complex8);
      Complex complex9 = new Complex((-1.1124565511436785E-7));
      try { 
        complex9.nthRoot((-1344));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,344
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1865.6, 1865.6);
      complex0.I.multiply(1.1886897087097168);
      Complex complex1 = Complex.valueOf((-3233.9682113447), (-3233.9682113447));
      complex0.ZERO.add(complex1);
      Complex complex2 = complex0.sin();
      complex1.sinh();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-1850.3765915976776));
      complex0.getField();
      complex1.getArgument();
      complex1.acos();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1213.7705370284657);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.add(1213.7705370284657);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex0.pow(complex3);
      complex3.hashCode();
      Complex complex5 = complex2.divide(1784.2458);
      complex3.ZERO.cos();
      complex3.readResolve();
      Complex complex6 = complex1.multiply(complex3);
      complex1.nthRoot(1411);
      Complex complex7 = new Complex(1725.317);
      complex2.readResolve();
      complex6.readResolve();
      complex4.equals(complex7);
      complex4.getReal();
      Complex complex8 = complex5.acos();
      complex2.toString();
      complex2.subtract(1725.317);
      Complex complex9 = complex8.atan();
      complex3.isInfinite();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.multiply(complex4);
      complex11.negate();
      Complex complex12 = new Complex(0.0, Double.NaN);
      complex12.conjugate();
      complex12.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(380.28520185267);
      complex0.I.nthRoot(46);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.createComplex(1.982919692993164, 111.62301);
      complex1.getArgument();
      complex2.getArgument();
      complex1.tan();
      complex1.toString();
      complex2.divide(complex3);
      Complex complex4 = complex3.createComplex(46, 3636.8995101);
      complex3.sqrt1z();
      Complex complex5 = complex3.cosh();
      complex0.sinh();
      Complex complex6 = complex5.acos();
      complex6.atan();
      complex4.sqrt1z();
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(46);
      Complex complex1 = complex0.atan();
      complex0.getImaginary();
      complex1.createComplex(46, 46);
      Complex complex2 = complex1.pow((double) 46);
      complex2.log();
      complex0.hashCode();
      Complex complex3 = complex0.asin();
      Complex complex4 = new Complex(46);
      Complex complex5 = complex4.tan();
      complex5.tanh();
      complex4.asin();
      complex3.negate();
      complex5.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-211.0));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.I.tanh();
      complex3.atan();
      complex2.ONE.getField();
      complex2.ONE.abs();
      complex1.ONE.acos();
      complex2.subtract((-211.0));
      complex1.abs();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(380.28520185267);
      complex0.readResolve();
      Complex complex1 = complex0.acos();
      complex0.getField();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.createComplex((-2670.0), (-7.369842361872221E127));
      complex3.subtract(3.8331545111676784E-249);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.tanh();
      complex4.readResolve();
      complex5.abs();
      complex6.createComplex(3.137374584307575E254, 3.137374584307575E254);
      complex0.pow((-1397.8319437403632));
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex2.multiply(complex7);
      complex4.exp();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-211.0));
      complex0.ZERO.tan();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.tanh();
      complex1.toString();
      Complex complex3 = new Complex(0.41421356237309515, (-211.0));
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.createComplex(5.167390528799477E-9, 0.41421356237309515);
      complex4.sqrt1z();
      Complex complex6 = complex5.cosh();
      complex2.sinh();
      Complex complex7 = complex5.acos();
      complex6.atan();
      Complex complex8 = complex7.sqrt1z();
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1570.41));
      Complex complex1 = complex0.ZERO.sinh();
      complex1.I.conjugate();
      complex1.INF.acos();
      Complex complex2 = Complex.valueOf((-1570.41), (-1570.41));
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.ZERO.subtract((-1946.118));
      Complex complex6 = complex3.INF.add(complex4);
      Complex complex7 = complex6.ZERO.add(0.0);
      Complex.valueOf((-1946.118), (-1570.41));
      complex7.conjugate();
      Complex complex8 = complex3.pow(0.0);
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.ZERO.pow(0.0);
      complex5.INF.toString();
      complex10.pow(complex6);
      complex8.reciprocal();
      complex9.toString();
      Complex complex11 = complex5.subtract((-1570.41));
      Complex complex12 = complex0.sqrt();
      complex12.multiply(0);
      complex12.pow((-1570.41));
      complex9.multiply((-1946.118));
      complex4.getField();
      complex11.tan();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      complex2.multiply((-4890.39368));
      complex8.subtract(complex13);
      complex9.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2883.29647214373, 2883.29647214373);
      Complex complex1 = complex0.NaN.multiply((-892));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ONE.asin();
      Complex complex4 = complex2.negate();
      complex4.INF.pow(complex3);
      Complex complex5 = complex0.ZERO.subtract(complex2);
      complex5.pow(complex4);
      complex2.INF.divide(complex5);
      complex0.I.readResolve();
      Complex complex6 = complex0.exp();
      complex6.ONE.conjugate();
      Complex complex7 = complex0.asin();
      complex7.NaN.sin();
      complex1.toString();
      complex7.getArgument();
      Complex complex8 = complex2.subtract(2883.29647214373);
      complex5.divide(complex8);
      complex6.tan();
      complex0.abs();
      complex4.equals("(NaN, NaN)");
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.log();
      complex2.I.getField();
      Complex complex3 = new Complex(20.0);
      Complex complex4 = complex2.I.subtract(complex3);
      complex4.NaN.multiply(0);
      Complex complex5 = complex4.INF.multiply(complex2);
      Complex complex6 = complex4.INF.atan();
      complex6.nthRoot(721);
      Complex complex7 = complex2.subtract(complex0);
      complex7.ONE.toString();
      complex1.conjugate();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.ZERO.negate();
      Complex complex10 = new Complex(20.0, 0.6244332790374756);
      Complex complex11 = complex9.I.multiply(complex10);
      complex11.ONE.createComplex(20.0, 721);
      complex3.exp();
      Complex complex12 = complex8.divide(1244.5265646084556);
      complex11.multiply(20.0);
      complex2.NaN.createComplex(0.0, 1244.5265646084556);
      complex11.createComplex(370.89279935169, 20.0);
      complex11.divide(complex3);
      complex11.exp();
      complex4.exp();
      Complex.valueOf(370.89279935169, 4.8459153070935316E-77);
      Complex complex13 = complex12.divide(complex5);
      complex13.I.divide(0.12384103238582611);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.divide(Double.NaN);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sinh();
      complex3.I.pow(Double.NaN);
      complex1.getArgument();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(96.05064241139748);
      Complex complex1 = complex0.divide(96.05064241139748);
      complex0.INF.abs();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex0.createComplex(96.05064241139748, 0.16666666666745392);
      complex1.readResolve();
      Complex complex6 = complex5.negate();
      Complex complex7 = complex5.createComplex(0.16666666666745392, (-742.64089768715));
      Complex complex8 = Complex.NaN;
      complex7.ONE.add(complex8);
      Complex complex9 = complex7.log();
      Complex complex10 = complex0.I.multiply(Double.POSITIVE_INFINITY);
      complex1.isNaN();
      Complex complex11 = complex1.multiply(1);
      complex11.INF.log();
      complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex12 = complex6.cos();
      Complex complex13 = complex12.subtract(96.05064241139748);
      Complex complex14 = complex3.tanh();
      Complex complex15 = complex10.acos();
      complex15.ZERO.abs();
      complex7.INF.atan();
      complex12.hashCode();
      complex3.equals(complex4);
      Complex complex16 = complex14.multiply(complex9);
      complex1.tanh();
      complex8.toString();
      complex16.exp();
      complex2.negate();
      Complex complex17 = complex11.tanh();
      complex17.add(complex8);
      complex13.negate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide(1936.0565);
      complex1.getField();
      Complex complex2 = Complex.valueOf((-20.0), (-1820.65978));
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex0.pow(complex2);
      complex0.getImaginary();
      Complex complex5 = complex0.sqrt();
      complex5.NaN.tanh();
      Complex complex6 = complex2.sin();
      complex4.ONE.add(1936.0565);
      Complex complex7 = complex2.subtract(0.0);
      Complex complex8 = complex1.INF.sinh();
      complex7.subtract(complex6);
      complex4.equals("(Q5h%/");
      Complex complex9 = complex6.reciprocal();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex9.divide((-20.0));
      Complex complex12 = Complex.ZERO;
      complex12.NaN.acos();
      complex9.NaN.divide(complex12);
      complex1.cosh();
      complex9.I.log();
      complex11.hashCode();
      complex3.tan();
      complex0.atan();
      complex5.negate();
      complex10.sinh();
      complex10.conjugate();
      complex8.cosh();
      Complex.valueOf(1820.337220692526);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.exp();
      Complex complex1 = new Complex(0, (-20.0));
      complex0.I.divide(complex1);
      complex0.reciprocal();
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex4.NaN.negate();
      complex5.ZERO.tan();
      complex2.hashCode();
      complex2.sinh();
      complex3.INF.sqrt1z();
      complex3.multiply((-20.0));
      Complex complex6 = complex3.pow((-20.0));
      complex6.NaN.createComplex(0, 0.0);
      Complex complex7 = complex2.cosh();
      complex0.NaN.multiply((double) 0);
      complex7.NaN.readResolve();
      try { 
        complex7.INF.nthRoot((-1165));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,165
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.7013046451109475E-9));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex3.NaN.divide(complex2);
      complex0.tanh();
      Complex complex6 = complex1.INF.negate();
      complex6.NaN.subtract(0.0);
      complex1.hashCode();
      complex0.exp();
      Complex complex7 = complex4.asin();
      complex7.ZERO.getField();
      complex7.pow(244.0363324072446);
      complex0.add(complex7);
      Complex complex8 = complex5.log();
      complex8.isNaN();
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1624.342942535));
      Complex complex2 = complex1.tanh();
      complex2.NaN.pow((-1216.3380437));
      Complex complex3 = complex0.INF.multiply(complex1);
      complex1.ZERO.abs();
      Complex complex4 = complex3.NaN.log();
      complex3.ZERO.getArgument();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.multiply(1.6629734283189315E-8);
      complex6.I.getField();
      complex5.toString();
      complex5.I.sinh();
      complex6.hashCode();
      complex5.isNaN();
      Complex complex8 = complex5.cos();
      complex8.INF.getArgument();
      Complex complex9 = complex2.negate();
      complex9.NaN.cos();
      Complex complex10 = complex9.I.asin();
      complex10.ONE.cosh();
      complex9.getArgument();
      Complex complex11 = complex9.multiply(complex2);
      complex3.pow((-1216.3380437));
      complex4.conjugate();
      Complex complex12 = complex10.conjugate();
      complex12.subtract(0.0);
      complex7.sin();
      Complex complex13 = complex9.sin();
      complex13.nthRoot(706);
      complex0.reciprocal();
      complex11.add(complex9);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(380.28520185267);
      complex0.I.nthRoot(46);
      Complex complex1 = complex0.atan();
      complex0.getImaginary();
      Complex complex2 = complex0.NaN.createComplex(0.0, 46);
      Complex complex3 = complex1.pow((double) 46);
      complex3.NaN.log();
      complex0.I.hashCode();
      Complex complex4 = complex0.asin();
      complex4.INF.tan();
      complex1.tanh();
      complex4.asin();
      complex0.negate();
      complex2.pow((double) 46);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(755.915, 755.915);
      complex0.NaN.reciprocal();
      Complex complex1 = Complex.valueOf(755.915);
      complex0.reciprocal();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-303.3113505), (-303.3113505));
      complex0.equals(complex1);
      complex0.I.abs();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.ZERO.negate();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.ONE.pow(1.0);
      complex2.getField();
      complex4.I.getField();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.ZERO.sin();
      complex0.getReal();
      complex5.NaN.divide((-303.3113505));
      Complex complex8 = Complex.valueOf(0.265214741230011);
      Complex complex9 = complex8.sinh();
      complex9.ONE.divide(0.1256551444530487);
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex10.INF.conjugate();
      complex10.I.cos();
      complex2.getField();
      Complex complex12 = complex6.divide(0.0);
      complex12.NaN.negate();
      complex2.multiply((-2926.4797324462747));
      Complex complex13 = complex9.multiply(complex7);
      complex13.NaN.abs();
      complex7.toString();
      complex11.exp();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(152);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ZERO.pow((double) 152);
      Complex complex4 = Complex.valueOf((-1851.8672));
      Complex complex5 = complex0.ZERO.add(complex4);
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex5.ONE.pow((-1851.8672));
      Complex complex8 = complex0.INF.sqrt();
      complex8.INF.hashCode();
      Complex complex9 = complex0.pow(76.63098);
      Complex complex10 = complex9.pow((-1851.8672));
      Complex complex11 = complex10.INF.asin();
      complex11.ONE.sin();
      complex11.INF.log();
      Complex complex12 = complex9.ONE.add(76.63098);
      Complex complex13 = complex9.multiply((-930));
      complex5.I.sin();
      Complex complex14 = complex4.divide(complex6);
      Complex complex15 = complex5.sqrt1z();
      complex7.readResolve();
      complex15.subtract((-1.0));
      complex10.divide(complex4);
      Complex complex16 = complex15.sinh();
      complex16.exp();
      complex14.cosh();
      complex3.atan();
      complex3.hashCode();
      complex16.pow(complex5);
      complex13.cosh();
      complex12.cosh();
      complex12.subtract((-1851.8672));
      complex14.isInfinite();
      complex15.getField();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-5.095591405025083E-281), (-5.095591405025083E-281));
      complex0.INF.readResolve();
      complex0.isInfinite();
      complex0.nthRoot(227);
      complex0.getImaginary();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sin();
      complex3.ZERO.multiply(0.0);
      complex3.subtract(complex2);
      complex2.abs();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.ONE.sin();
      complex2.NaN.getArgument();
      Complex complex3 = complex1.ONE.divide(complex0);
      complex3.NaN.sin();
      Complex complex4 = complex3.NaN.multiply((-7.159157201731446E-8));
      Complex complex5 = complex1.I.add(932.633);
      Complex complex6 = complex5.I.conjugate();
      complex6.I.cos();
      complex0.readResolve();
      complex3.subtract(932.633);
      complex1.isNaN();
      complex4.cosh();
      complex2.abs();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-2.809054633964104E-8));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex1.createComplex((-2.809054633964104E-8), 1083.61683);
      Complex complex4 = complex3.ZERO.tan();
      complex4.getField();
      Complex complex5 = complex2.conjugate();
      complex5.INF.sin();
      complex3.nthRoot(7);
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex5.tan();
      complex8.ZERO.toString();
      Complex complex9 = complex7.exp();
      complex9.ZERO.toString();
      complex5.tan();
      Complex complex10 = complex0.atan();
      complex10.ONE.pow(complex6);
      complex3.exp();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1351.808228);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sinh();
      complex2.ONE.divide(complex0);
      complex2.ZERO.sqrt();
      complex1.NaN.multiply(1);
      double double0 = 188.1303;
      complex1.ZERO.exp();
      Complex complex3 = complex1.createComplex(188.1303, 188.1303);
      complex3.ZERO.hashCode();
      complex0.acos();
      complex1.getField();
      complex0.isInfinite();
      complex1.tanh();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, (-1.1124565511436785E-7));
      Complex complex3 = complex2.ONE.tanh();
      complex3.abs();
      complex0.ONE.abs();
      complex2.I.pow((-3292.0));
      Complex complex4 = complex3.I.multiply(complex1);
      complex0.hashCode();
      Complex complex5 = complex2.cosh();
      complex5.I.subtract(complex2);
      complex0.sinh();
      complex2.negate();
      complex1.hashCode();
      Complex complex6 = Complex.valueOf(3.8072183820435085E293);
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.isNaN();
      Complex complex8 = Complex.valueOf(982.71);
      Object object0 = complex8.readResolve();
      complex6.equals(object0);
      complex3.asin();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(1213.7705370284657);
      Complex complex1 = complex0.reciprocal();
      complex1.INF.add(1213.7705370284657);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.INF.asin();
      Complex complex5 = complex4.INF.createComplex(1213.7705370284657, 1213.7705370284657);
      complex5.I.getArgument();
      complex4.ZERO.getArgument();
      Complex complex6 = complex2.INF.tan();
      complex6.toString();
      Complex complex7 = complex0.divide(complex1);
      Complex complex8 = complex1.createComplex(1213.7705370284657, (-3.369999130712228E-9));
      complex8.sqrt1z();
      Complex complex9 = complex7.cosh();
      complex9.sinh();
      complex2.acos();
      Complex complex10 = complex4.atan();
      complex0.sqrt1z();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-211.0));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.cos();
      complex2.I.tanh();
      complex2.ONE.abs();
      complex1.ONE.acos();
      Complex complex3 = complex2.subtract((-211.0));
      complex3.cosh();
      complex1.abs();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6441128253936768, (-1992.272341175848));
      Complex complex1 = complex0.multiply(123);
      complex1.INF.abs();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.ZERO.asin();
      complex1.getImaginary();
      complex2.ZERO.getArgument();
      Complex complex4 = complex1.ONE.tan();
      complex4.atan();
      Complex complex5 = complex0.sqrt();
      complex5.multiply(5.111952261540649E-283);
      complex2.INF.getField();
      Complex complex6 = complex2.add((-98.444));
      complex0.NaN.atan();
      Complex complex7 = complex6.NaN.subtract(1.001455050575191E-117);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.add(complex2);
      complex9.INF.cosh();
      Complex complex10 = complex9.ZERO.add(2.4667033200046904E-8);
      Complex complex11 = Complex.ONE;
      complex3.INF.add(complex11);
      complex10.NaN.getArgument();
      complex8.ONE.getField();
      Complex complex12 = complex7.sinh();
      complex12.exp();
      Complex complex13 = complex3.multiply(0.0);
      complex13.INF.getArgument();
      complex8.getField();
      complex3.getImaginary();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-647.618));
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      complex0.INF.negate();
      complex1.I.negate();
      complex1.INF.conjugate();
      Complex complex2 = complex0.pow(complex1);
      complex2.divide((-1018.830027059551));
      Complex complex3 = complex0.INF.negate();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.NaN;
      complex0.I.sqrt();
      complex0.divide(complex5);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex6.tan();
      complex4.conjugate();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.subtract((-126.8486));
      Complex complex2 = complex1.INF.cosh();
      complex0.ONE.log();
      complex2.ONE.getArgument();
      complex0.getField();
      complex0.readResolve();
      complex0.add(complex2);
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-594.118085963981));
      Complex complex1 = complex0.pow((-594.118085963981));
      complex1.sqrt1z();
      Complex complex2 = complex0.I.reciprocal();
      complex2.NaN.tan();
      complex0.reciprocal();
      complex1.isNaN();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.INF.acos();
      complex0.sin();
      Complex complex3 = complex2.createComplex(4036.25, 4036.25);
      complex3.ZERO.cosh();
      complex0.NaN.createComplex((-1513.63187682322), 0.0);
      Complex complex4 = Complex.valueOf((-1995.0), 0.0);
      Complex complex5 = complex1.I.divide((-1995.0));
      complex1.getArgument();
      Complex complex6 = complex5.sqrt();
      complex3.tanh();
      complex6.isNaN();
      complex6.atan();
      complex2.add(complex4);
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.getImaginary();
      try { 
        complex0.nthRoot((-1617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,617
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.multiply(complex1);
      complex0.getReal();
      Complex complex3 = complex2.sin();
      complex2.pow(complex0);
      complex2.ZERO.hashCode();
      Complex complex4 = complex3.divide((-404.1));
      complex4.NaN.readResolve();
      Complex complex5 = complex0.multiply(complex3);
      complex5.NaN.nthRoot(1);
      Complex complex6 = new Complex(0.0);
      complex1.INF.readResolve();
      complex1.I.readResolve();
      complex3.equals(complex6);
      complex1.getReal();
      Complex complex7 = complex0.acos();
      complex7.toString();
      Complex complex8 = complex7.subtract(0.0);
      Complex complex9 = complex3.NaN.atan();
      complex0.isInfinite();
      Complex complex10 = complex0.sqrt();
      complex8.multiply(complex5);
      complex10.negate();
      complex9.conjugate();
      complex10.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(20.0);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      complex1.createComplex(0.0, 0.0);
      complex1.add((-2468.501915));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1689.0), (-1.7809679916043692E-247));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex2.I.multiply(complex1);
      Complex complex5 = Complex.valueOf((-1689.0), (-2739.871325));
      complex1.ZERO.reciprocal();
      complex4.INF.getField();
      Complex complex6 = complex5.INF.multiply(complex0);
      Complex complex7 = complex4.INF.subtract(complex5);
      complex7.ZERO.add((-1689.0));
      Complex complex8 = complex2.ONE.sinh();
      complex8.ZERO.pow(complex0);
      Complex complex9 = Complex.valueOf(0.0, 2776.489);
      Complex complex10 = complex2.cos();
      complex0.NaN.multiply((-1845));
      Complex complex11 = complex10.reciprocal();
      complex11.INF.pow(0.0);
      complex4.subtract(complex9);
      complex1.isNaN();
      Complex complex12 = Complex.valueOf(0.0, 2776.489);
      complex12.tanh();
      Complex complex13 = complex2.log();
      complex3.getArgument();
      complex13.tan();
      complex11.readResolve();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.divide((-1836.07819096579));
      complex0.NaN.getField();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.divide(0.0);
      complex0.readResolve();
      Complex complex3 = complex2.NaN.acos();
      complex2.I.getField();
      Complex complex4 = complex0.tan();
      complex1.ONE.divide(complex3);
      Complex complex5 = complex2.ONE.createComplex((-1667.0), 0.0);
      Complex complex6 = complex4.subtract(0.0);
      complex4.INF.atan();
      Complex complex7 = complex6.NaN.tanh();
      complex6.ONE.readResolve();
      complex2.abs();
      Complex complex8 = complex4.createComplex(0.0, Double.NaN);
      complex8.NaN.pow((-1667.0));
      complex5.sinh();
      complex3.multiply(complex8);
      complex7.exp();
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tanh();
      double double0 = (-26.386644);
      Complex complex2 = complex1.NaN.divide((-26.386644));
      complex1.ZERO.asin();
      complex2.NaN.reciprocal();
      complex2.I.divide(complex1);
      Complex complex3 = complex1.NaN.sqrt();
      complex3.ZERO.abs();
      Complex complex4 = complex0.cos();
      complex4.asin();
      Complex complex5 = complex4.I.atan();
      complex5.I.getArgument();
      try { 
        complex1.nthRoot((-2420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,420
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.sinh();
      complex0.getArgument();
      Complex complex1 = complex0.sqrt();
      complex1.log();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.add(2771.792155516907);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.multiply(1462);
      Complex complex5 = new Complex(0.0);
      Complex complex6 = complex3.NaN.conjugate();
      Complex complex7 = complex6.NaN.multiply(1091.76830753);
      Complex complex8 = complex5.NaN.conjugate();
      complex8.NaN.add(0.0);
      Complex complex9 = complex2.ZERO.sin();
      complex9.NaN.tan();
      Complex complex10 = complex4.I.subtract(complex5);
      String string0 = complex10.NaN.toString();
      assertFalse(complex10.equals((Object)complex1));
      assertEquals("(NaN, NaN)", string0);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(1.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex3.log();
      Complex complex12 = complex11.pow(2771.792155516907);
      assertTrue(complex12.equals((Object)complex7));
      
      complex0.createComplex((-86.5), 2771.792155516907);
      double double0 = complex3.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      complex4.isNaN();
      Complex complex13 = complex4.cos();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(4052360.131365718, complex4.getReal(), 0.01);
      
      Complex complex14 = complex0.sin();
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex0.log();
      Complex complex16 = complex15.I.divide(0.0);
      assertSame(complex16, complex8);
      assertTrue(complex15.isInfinite());
      assertNotSame(complex16, complex12);
      
      complex11.getField();
      double double1 = complex11.getReal();
      assertTrue(complex11.equals((Object)complex9));
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex1.divide(complex0);
      Complex.valueOf(1.1863701343536377, (-2788.662039112417));
      Complex complex2 = Complex.valueOf(1.1863701343536377, 0.0);
      try { 
        complex2.ONE.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-1082.87));
      Complex complex2 = complex0.ONE.subtract(complex1);
      Object object0 = new Object();
      boolean boolean0 = complex1.equals(object0);
      assertFalse(boolean0);
      
      Complex complex3 = Complex.valueOf((-1082.87));
      Complex complex4 = complex3.I.cosh();
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.INF.tanh();
      complex5.NaN.sinh();
      Complex complex7 = complex6.ZERO.add((-1082.87));
      Complex complex8 = complex5.I.asin();
      assertEquals(0.8813735870195428, complex8.getImaginary(), 0.01);
      assertEquals(1.1270887840863286, complex5.getImaginary(), 0.01);
      
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex9.ONE.sqrt1z();
      double double0 = complex10.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex11 = complex1.multiply(0.0);
      assertEquals(-0.0, complex11.getReal(), 0.01);
      assertTrue(complex11.equals((Object)complex10));
      
      Complex complex12 = complex9.sinh();
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex7);
      
      Complex complex13 = Complex.valueOf((-1633.9176146), (-20.0));
      assertEquals((-1633.9176146), complex13.getReal(), 0.01);
      assertEquals((-20.0), complex13.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex0.ONE.multiply(1770.26);
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex.valueOf(1770.26, 1770.26);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.I.atan();
      complex3.abs();
      Complex complex5 = complex3.sqrt1z();
      assertEquals(1.0, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.asin();
      Complex complex7 = complex3.multiply(3474.45609);
      Complex complex8 = complex7.ZERO.pow(1770.26);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertNotSame(complex8, complex2);
      assertTrue(complex8.equals((Object)complex4));
      
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      complex9.getImaginary();
      assertFalse(complex9.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(2861.0, 5.58656252899437E-8);
      Complex complex3 = complex2.ONE.negate();
      complex3.I.getArgument();
      Complex complex4 = complex2.I.pow(0.0);
      Complex complex5 = complex4.ZERO.multiply(complex0);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex2.ZERO.readResolve();
      List<Complex> list0 = complex2.I.nthRoot(17);
      Complex complex6 = complex1.INF.pow(complex0);
      Complex complex7 = complex6.ONE.negate();
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      
      Complex complex8 = (Complex)complex1.INF.readResolve();
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      
      double double0 = complex1.getImaginary();
      assertEquals(-0.0, double0, 0.01);
      
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      complex0.getReal();
      Complex complex9 = complex0.divide(2861.0);
      Complex complex10 = complex9.ZERO.multiply(17);
      assertTrue(complex10.equals((Object)complex5));
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      complex1.equals(list0);
      assertTrue(complex1.equals((Object)complex4));
      assertEquals(17, list0.size());
      
      Complex complex11 = Complex.valueOf(2.70768404006958, -0.0);
      assertFalse(complex11.isInfinite());
  }
}
