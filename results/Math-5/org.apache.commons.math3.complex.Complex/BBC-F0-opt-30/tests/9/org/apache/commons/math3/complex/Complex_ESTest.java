/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:00:03 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ONE.divide(complex0);
      complex2.INF.tan();
      Complex complex4 = complex1.ZERO.divide(834.067938348265);
      Complex complex5 = complex0.I.createComplex(436.7, 7.091500562953208E248);
      complex5.NaN.sin();
      Complex complex6 = Complex.valueOf(1.0000497628123317, 436.7);
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.INF.conjugate();
      complex3.ONE.reciprocal();
      Complex complex9 = Complex.valueOf(1.0);
      Complex complex10 = complex1.divide(7.091500562953208E248);
      complex7.toString();
      complex4.cosh();
      complex8.conjugate();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex5.divide(436.7);
      complex1.reciprocal();
      Complex complex13 = complex10.conjugate();
      complex13.atan();
      complex9.add(1249.50091);
      complex11.getField();
      Complex complex14 = complex12.sqrt1z();
      complex14.I.asin();
      complex3.negate();
      complex3.readResolve();
      complex6.tanh();
      complex12.getField();
      complex2.tan();
      complex5.add((-8.330969967504819E-260));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.691814001080034E75, 3.691814001080034E75);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(20.0);
      complex1.acos();
      complex1.NaN.getField();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1807.3204), Double.POSITIVE_INFINITY);
      complex1.multiply((-4504.68476728));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      complex0.log();
      Complex complex3 = Complex.ONE;
      Complex complex4 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.multiply(complex2);
      complex2.log();
      complex5.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(2989.03137254, (-166.35003));
      complex0.divide(complex1);
      complex0.tanh();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3634.28787), Double.POSITIVE_INFINITY);
      complex0.divide((-3634.28787));
      Complex complex1 = new Complex((-3634.28787));
      Complex complex2 = complex1.multiply(complex0);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(17, Double.POSITIVE_INFINITY);
      complex0.add((double) 17);
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.ZERO.cos();
      complex0.multiply(981305269);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.ZERO;
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1618.8749573), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.subtract((-1618.8749573));
      complex2.atan();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.exp();
      Complex.valueOf((-3.692654701602221E-4), 127.627);
      complex0.abs();
      Complex complex5 = complex2.createComplex(0.9999277282560252, 5.903396499766243E-300);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex2.sin();
      complex6.negate();
      complex0.pow(complex2);
      Complex.valueOf(2308.574305703894);
      complex7.tanh();
      complex4.multiply(1104);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.I;
      complex0.nthRoot(269);
      Complex complex2 = Complex.valueOf((-1211.39), 20.0);
      Complex complex3 = Complex.NaN;
      complex3.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, (-0.9852866695372031));
      Complex complex2 = Complex.valueOf(Double.NaN, 2.0);
      complex2.I.asin();
      complex2.abs();
      Complex.valueOf(1.4780692924846082E197);
      Complex.valueOf(Double.NaN, (-949.3431426852676));
      complex2.divide(1253.175207);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.5611804393457259));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(8.254840070411029E-8);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.divide(3.691814001080034E75);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.subtract((-166.35003));
      complex4.atan();
      complex2.ONE.exp();
      Complex complex5 = complex4.exp();
      Complex.valueOf((-166.35003), (-166.35003));
      complex3.abs();
      Complex complex6 = complex4.createComplex(0.0, 0.0);
      complex1.I.asin();
      complex6.ZERO.acos();
      Complex.valueOf(5332.2071524604, (-166.35003));
      Complex complex7 = complex5.pow(complex2);
      complex7.add(complex1);
      Complex.valueOf(1221.5, 3.691814001080034E75);
      Complex complex8 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex5.acos();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.log();
      Complex complex1 = new Complex(3.691814001080034E75, 3.691814001080034E75);
      Complex complex2 = new Complex(1.4780692924846082E197, Double.NaN);
      complex1.abs();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4777.59), (-20.0));
      Complex complex1 = new Complex(2618, 2618);
      complex0.sin();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-713.5106470096921), (-713.5106470096921));
      Complex complex1 = Complex.I;
      complex1.nthRoot(3667);
      Complex complex2 = complex1.add(complex0);
      complex2.hashCode();
      Complex.valueOf(3958.16132736259, (double) 3667);
      Complex complex3 = new Complex(269, 0.5403023058681398);
      Complex complex4 = Complex.valueOf((-1679.378256), 74352.3844);
      Complex complex5 = complex4.acos();
      complex5.tan();
      complex3.tanh();
      complex2.subtract(complex5);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.divide(3.691814001080034E75);
      complex0.tan();
      Complex complex3 = new Complex(1.4780692924846082E197, Double.NaN);
      complex3.acos();
      Complex complex4 = Complex.I;
      complex0.subtract(complex4);
      Complex complex5 = Complex.INF;
      complex2.abs();
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.414213562373095, 2.414213562373095);
      complex0.ZERO.toString();
      Complex complex1 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex1.cosh();
      Complex complex2 = complex1.sinh();
      complex0.NaN.reciprocal();
      Complex.valueOf(2.414213562373095, 1.0);
      Complex complex3 = complex1.multiply(2.414213562373095);
      complex2.getField();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.divide(3.691814001080034E75);
      complex0.tan();
      Complex complex3 = complex0.subtract((-166.35003));
      complex2.I.multiply((-1371));
      complex3.atan();
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.acos();
      complex4.sin();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex7.pow(complex8);
      Complex.valueOf((-682.303095));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex(Double.NaN, Double.NaN);
      complex1.ZERO.getArgument();
      complex0.nthRoot(269);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.divide(3.691814001080034E75);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.subtract((-166.35003));
      complex4.atan();
      Complex complex5 = complex2.ONE.exp();
      complex4.exp();
      Complex.valueOf((-166.35003), (-166.35003));
      complex3.abs();
      Complex complex6 = complex4.createComplex(0.0, 0.0);
      complex6.ZERO.acos();
      Complex complex7 = complex1.sin();
      complex7.negate();
      complex2.pow(complex7);
      complex5.acos();
      complex7.tan();
      complex4.add((-166.35003));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf((-0.9999277282560252), Double.POSITIVE_INFINITY);
      complex1.abs();
      complex2.createComplex((-0.9999277282560252), 1.0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.sin();
      complex3.negate();
      Complex complex5 = complex4.pow(complex0);
      Complex.valueOf(5.016820182185716E-121);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-414.841663998013));
      complex0.equals(complex0);
      Complex complex1 = Complex.valueOf((-4777.59), (-20.0));
      Complex complex2 = complex0.INF.add(complex1);
      complex2.INF.readResolve();
      Complex complex3 = new Complex(2618, 2618);
      complex0.divide((-414.841663998013));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.ONE.add((-19.72488448099827));
      complex0.equals(complex1);
      complex0.I.reciprocal();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-413.965327460519));
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.atan();
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-4141.18365388922));
      complex2.multiply((-1072));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-413.965327460519));
      Complex complex1 = complex0.multiply(2618);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.subtract(1364.58468783011);
      complex3.toString();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.NaN;
      complex0.asin();
      complex2.negate();
      Complex complex6 = Complex.INF;
      complex1.tanh();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-963.366895), (-963.366895));
      Complex complex1 = new Complex((-963.366895), (-963.366895));
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.INF;
      complex1.tanh();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.readResolve();
      double double0 = 1.4699471648782492E-6;
      complex0.ONE.negate();
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.add(complex0);
      complex2.negate();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(241.34003, 241.34003);
      complex2.NaN.readResolve();
      Complex complex3 = complex2.conjugate();
      complex1.sin();
      complex3.pow(complex0);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.I.add(complex0);
      Complex complex2 = Complex.I;
      complex0.sin();
      Complex complex3 = Complex.ZERO;
      complex3.negate();
      complex1.abs();
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 194.61);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.log();
      complex3.cosh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.add((-1.2319346292749103E98));
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.NaN.tanh();
      complex6.I.reciprocal();
      complex5.conjugate();
      complex6.NaN.cosh();
      complex5.createComplex(1.0, 1514783.1036015763);
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.acos();
      complex8.ONE.atan();
      complex1.add(Double.POSITIVE_INFINITY);
      complex7.getField();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-413.965327460519));
      Complex complex1 = complex0.multiply(2618);
      Complex complex2 = Complex.valueOf((-413.965327460519));
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex2.subtract(1364.58468783011);
      complex2.cos();
      complex4.toString();
      complex4.getField();
      Complex complex5 = Complex.valueOf(2.5526681615684215E63, 2361.8177394);
      complex3.exp();
      complex5.conjugate();
      complex1.abs();
      Complex complex6 = new Complex(2361.8177394, 2618);
      complex6.toString();
      Complex complex7 = new Complex((-413.965327460519), 5856.518087607905);
      complex7.tan();
      complex2.multiply(2361.8177394);
      complex7.sqrt();
      complex6.pow(1364.58468783011);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.sin();
      complex0.negate();
      complex0.abs();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.tanh();
      complex2.atan();
      complex3.getField();
      Complex complex6 = Complex.valueOf((-4141.18365388922), 5856.518087607905);
      Complex complex7 = Complex.valueOf(5856.518087607905, (-4141.18365388922));
      complex1.exp();
      Complex complex8 = Complex.ONE;
      complex8.conjugate();
      complex6.abs();
      complex5.toString();
      Complex complex9 = complex7.tan();
      complex9.multiply((-834.541699));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.I.nthRoot(1);
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-963.366895), (-963.366895));
      complex0.abs();
      complex0.log();
      complex0.multiply(1.0);
      Complex.valueOf(1.0, 1362.4065284502576);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex0.negate();
      complex3.abs();
      Complex complex4 = complex0.NaN.pow(complex3);
      complex3.ONE.tanh();
      Complex complex5 = complex0.INF.atan();
      complex0.getField();
      Complex complex6 = Complex.valueOf(5856.518087607905, (-4141.18365388922));
      Complex.valueOf(5856.518087607905, (-834.541699));
      complex2.exp();
      complex1.subtract((-834.541699));
      Complex complex7 = complex6.conjugate();
      complex5.abs();
      complex1.toString();
      complex7.tan();
      complex0.multiply((-834.541699));
      complex4.sqrt();
      complex4.multiply(512);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.I.conjugate();
      complex1.I.sin();
      Complex complex2 = complex0.negate();
      complex2.abs();
      Complex complex3 = complex0.NaN.pow(complex2);
      Complex complex4 = complex2.ONE.tanh();
      complex0.INF.atan();
      complex0.getField();
      Complex complex5 = Complex.valueOf(5856.518087607905, (-4141.18365388922));
      complex5.INF.log();
      Complex complex6 = Complex.valueOf(5856.518087607905, (-834.541699));
      Complex complex7 = complex3.exp();
      complex0.conjugate();
      Complex complex8 = Complex.valueOf((-834.541699));
      complex8.abs();
      complex5.toString();
      complex6.tan();
      complex4.multiply(3246.0);
      complex5.sqrt();
      complex4.pow(complex6);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = Complex.valueOf((-1.4386267593671393E-8), (-1.4386267593671393E-8));
      complex3.NaN.getArgument();
      Complex.valueOf((-1.4386267593671393E-8), (-834.541699));
      Complex complex4 = complex2.exp();
      complex4.conjugate();
      complex3.abs();
      Complex complex5 = new Complex(2.0345254742898637E-8);
      complex5.toString();
      complex5.tan();
      complex1.multiply((-1.4386267593671393E-8));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.sin();
      complex2.add(2.0);
      complex1.equals(complex2);
      Complex complex3 = Complex.INF;
      complex3.divide((-27.209776058766437));
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-27.209776058766437));
      complex5.toString();
      complex1.tan();
      complex1.getField();
      complex6.getField();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sin();
      complex2.add(2.0);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(6.283185307179586);
      complex3.equals(complex4);
      Complex complex5 = Complex.INF;
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.divide(2.100525379180908);
      Complex complex8 = Complex.NaN;
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex((-20.0));
      complex10.toString();
      complex7.tan();
      complex1.multiply(396.711);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(1190.2);
      Complex complex2 = complex1.ONE.tan();
      complex1.NaN.tan();
      Complex complex3 = complex0.add(20.0);
      complex3.NaN.asin();
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex0.INF.reciprocal();
      complex5.ZERO.getField();
      Complex complex6 = complex3.cosh();
      complex3.abs();
      complex6.NaN.multiply(1190.2);
      complex0.cosh();
      Complex complex7 = complex0.divide(complex4);
      complex7.ZERO.add(complex2);
      complex7.ONE.conjugate();
      complex6.exp();
      complex3.multiply(601);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.negate();
      complex3.abs();
      Complex complex4 = complex2.pow(complex1);
      complex3.tanh();
      complex2.atan();
      complex2.getField();
      Complex complex5 = Complex.valueOf((-208.6586645523), 1.0000002386249238);
      complex3.exp();
      complex0.conjugate();
      complex3.abs();
      complex1.getArgument();
      complex3.abs();
      Complex complex6 = Complex.valueOf(2.356194490192345, 0.6425732374191284);
      complex0.nthRoot(249);
      complex4.add(complex0);
      complex6.hashCode();
      complex0.multiply(complex2);
      Complex complex7 = Complex.ZERO;
      complex7.divide((double) 269);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.add((-4141.18365388922));
      complex3.NaN.negate();
      complex1.equals(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide((-4141.18365388922));
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ZERO;
      complex0.multiply(1396);
      complex1.tan();
      complex5.multiply(1.0);
      Complex complex8 = complex0.negate();
      complex6.tan();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3921.559149896));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.tan();
      complex0.sin();
      complex0.ONE.readResolve();
      complex1.getReal();
      complex2.pow(complex0);
      Complex complex3 = complex1.multiply(2491);
      Complex complex4 = complex2.divide(complex0);
      complex4.getReal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      complex1.abs();
      Complex complex2 = complex0.subtract(1827.29727821424);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.NaN.multiply(82);
      Complex complex5 = complex4.I.createComplex(1827.29727821424, 0.0);
      Complex complex6 = complex2.multiply(complex5);
      Complex complex7 = Complex.valueOf(8.18942426109357E231);
      Complex complex8 = complex0.divide(0.7853981633974483);
      Complex complex9 = complex8.ZERO.sin();
      complex2.toString();
      complex1.log();
      complex4.cos();
      complex6.pow(complex9);
      Complex.valueOf(8.18942426109357E231, Double.NaN);
      complex8.add(complex7);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.I.add(complex0);
      complex1.ONE.multiply(2618);
      Complex complex2 = Complex.INF;
      complex2.reciprocal();
      Complex complex3 = complex1.add((-3086.85987));
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.multiply((-156.276736023881));
      Complex complex6 = Complex.valueOf((-3086.85987), 1279.67116807114);
      complex3.pow((-413.965327460519));
      complex2.exp();
      complex5.nthRoot(2618);
      Complex complex7 = Complex.valueOf((-3086.85987));
      complex7.getArgument();
      Complex complex8 = complex1.divide(complex7);
      complex6.getArgument();
      complex1.toString();
      complex1.tan();
      try { 
        complex8.nthRoot((-1748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,748
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-8230.201383316231));
      complex1.INF.multiply(complex0);
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex1.pow(complex0);
      complex0.tan();
      complex0.tan();
      complex0.getArgument();
      complex2.getReal();
      Complex complex4 = complex1.I.sin();
      complex2.toString();
      complex1.toString();
      Complex complex5 = Complex.INF;
      complex3.ZERO.reciprocal();
      Complex complex6 = complex4.I.subtract(complex1);
      complex4.tanh();
      complex3.subtract(complex4);
      complex6.ONE.divide(Double.NaN);
      complex3.log();
      Complex complex7 = Complex.valueOf(904.0334, (-8230.201383316231));
      complex7.tanh();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.I.divide(complex1);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.createComplex(4398.7219626399, 413.965327460519);
      complex2.multiply(complex3);
      complex0.negate();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = 2152.167499771;
      Complex complex0 = Complex.valueOf(2152.167499771);
      Complex complex1 = complex0.I.negate();
      complex1.I.cos();
      Complex complex2 = complex0.INF.multiply((-4237));
      complex2.ZERO.add(2152.167499771);
      complex0.getField();
      complex1.add(2152.167499771);
      // Undeclared exception!
      complex0.nthRoot(1071135466);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-413.965327460519));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex4.reciprocal();
      complex5.reciprocal();
      complex5.add((-1.0));
      complex5.abs();
      complex1.multiply((-1.0));
      complex4.multiply(complex3);
      complex5.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow((-413.965327460519));
      complex0.multiply(complex1);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex3.tan();
      complex5.getArgument();
      complex4.getReal();
      Complex complex6 = complex1.sin();
      complex1.toString();
      complex0.toString();
      complex3.log();
      complex5.reciprocal();
      complex0.subtract(complex3);
      complex2.tanh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.subtract(complex7);
      complex2.divide(Double.NaN);
      Complex.valueOf(2.3593788146972656);
      Complex complex9 = new Complex(Double.NaN);
      complex9.getField();
      complex7.abs();
      complex9.getReal();
      complex4.add(complex8);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.subtract(Double.NaN);
      Complex complex12 = Complex.I;
      complex12.atan();
      complex5.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(2.6113557852262235E15, 2.6113557852262235E15);
      complex0.ONE.exp();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.conjugate();
      complex0.readResolve();
      complex1.sin();
      complex2.log();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2152.167499771, 2152.167499771);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.ONE.atan();
      Complex complex3 = complex2.INF.multiply((-4237));
      Complex complex4 = complex3.ZERO.add(2152.167499771);
      complex0.getField();
      Complex complex5 = complex0.add(2152.167499771);
      Complex complex6 = Complex.ZERO;
      complex0.reciprocal();
      complex5.I.add((-2762.115));
      complex5.I.abs();
      complex1.multiply(0.0);
      complex4.createComplex(106.837, (-4237));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex1.I.sin();
      complex2.add(2.0);
      complex1.equals(complex2);
      Complex complex3 = Complex.INF;
      complex3.divide((-20.0));
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-20.0));
      complex5.toString();
      Complex complex7 = complex1.tan();
      complex4.multiply((-20.0));
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2152.167499771);
      Complex complex1 = complex0.I.negate();
      complex1.subtract(complex0);
      Complex complex2 = Complex.NaN;
      complex2.pow(2152.167499771);
      Complex complex3 = complex0.cos();
      complex2.divide(2862.0076);
      complex3.pow(2743.755414699);
      Complex complex4 = complex2.createComplex(2071.029363235, (-474.9));
      Complex complex5 = complex0.createComplex(1288.1, 2743.755414699);
      Complex complex6 = complex5.multiply(complex1);
      complex4.negate();
      complex6.tan();
      Complex.valueOf(209.729084);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.multiply((-4237));
      complex4.add(341.229276529);
      complex3.getField();
      Complex complex5 = complex2.add(341.229276529);
      Complex complex6 = complex2.reciprocal();
      complex0.reciprocal();
      complex5.abs();
      complex2.multiply((-3173.03182));
      complex6.multiply(complex5);
      Complex complex7 = Complex.valueOf(1034.633918, 2624.766169962);
      complex7.divide(2126.04);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(742.906795047584, 742.906795047584);
      Complex complex1 = Complex.valueOf(742.906795047584);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex1.multiply((-200));
      Complex complex6 = complex5.add(742.906795047584);
      complex3.getField();
      Complex complex7 = complex5.add((double) (-4237));
      complex6.reciprocal();
      complex7.reciprocal();
      complex0.add(Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex complex8 = complex5.multiply((-262.791525));
      complex3.multiply(complex4);
      complex8.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-413.965327460519));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.sqrt();
      complex1.I.conjugate();
      complex3.toString();
      Complex complex4 = complex0.ZERO.acos();
      complex1.isInfinite();
      complex4.nthRoot(1802);
      complex2.add(complex1);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.divide(complex3);
      complex3.sqrt();
      complex2.conjugate();
      complex1.toString();
      complex4.acos();
      complex0.isInfinite();
      complex2.divide(Double.NaN);
      Complex complex5 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex1.I.add(complex0);
      complex1.ONE.atan();
      Complex complex3 = complex1.ONE.multiply(2618);
      Complex complex4 = Complex.valueOf(341.229276529);
      complex3.INF.subtract(complex4);
      complex1.sin();
      complex3.ONE.subtract(1364.58468783011);
      complex1.toString();
      Complex complex5 = Complex.INF;
      complex0.sin();
      complex4.log();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex0.asin();
      complex4.ONE.subtract(Double.NaN);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.multiply((-393));
      complex6.asin();
      Complex complex7 = Complex.valueOf((double) (-268), (-1344.502406));
      complex7.NaN.abs();
      complex3.sqrt();
      Complex complex8 = new Complex((-268), (-3469.4952));
      complex3.multiply(complex8);
      complex5.multiply(37);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(742.906795047584, 742.906795047584);
      Complex complex1 = Complex.valueOf(742.906795047584, (-2336.090685));
      complex1.ONE.getField();
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.cosh();
      complex1.I.reciprocal();
      complex1.INF.pow(complex2);
      Complex complex4 = complex2.INF.add((-2336.090685));
      complex0.NaN.multiply((-156.276736023881));
      Complex complex5 = Complex.valueOf(20.0, 20.0);
      complex5.ZERO.pow(742.906795047584);
      complex1.multiply(2491);
      complex4.divide(complex4);
      complex3.getReal();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.multiply((-1327));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.ZERO.tanh();
      complex3.ONE.toString();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex3.ZERO.createComplex((-20.0), 0.0);
      complex5.tanh();
      Complex complex6 = complex5.INF.multiply((-1327));
      complex5.NaN.multiply((-1327));
      complex6.NaN.negate();
      complex6.INF.pow(988.624284516272);
      complex0.NaN.toString();
      complex0.getReal();
      complex2.sqrt();
      Complex complex7 = complex0.createComplex(0.0, 3270.290715);
      complex1.hashCode();
      complex4.pow(complex7);
      complex3.multiply(0.0);
      Complex complex8 = Complex.valueOf((double) (-1327));
      complex8.I.asin();
      complex3.divide(0.0);
      Complex complex9 = Complex.NaN;
      complex0.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.563454814394247E171);
      Complex complex1 = complex0.I.tan();
      complex1.INF.negate();
      Complex complex2 = complex1.ONE.multiply(2125);
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex2.subtract(9.563454814394247E171);
      complex0.isNaN();
      Complex complex5 = complex1.log();
      complex5.cos();
      complex5.cos();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex4.ONE.add(complex3);
      Complex complex8 = complex6.ZERO.asin();
      complex8.ONE.exp();
      complex4.INF.log();
      double double0 = 0.0;
      complex7.ZERO.pow(2290.4);
      Complex complex9 = complex2.ONE.multiply(2125);
      complex9.abs();
      Complex complex10 = complex9.divide(9.563454814394247E171);
      complex10.log();
      Complex complex11 = complex6.ONE.multiply(0.0);
      complex11.subtract(complex1);
      Complex complex12 = Complex.valueOf(9.563454814394247E171);
      Complex complex13 = complex12.ONE.divide(9.563454814394247E171);
      complex13.I.getField();
      int int0 = (-601);
      try { 
        complex4.nthRoot((-601));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -601
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-4141.18365388922), (-4141.18365388922));
      Complex complex1 = complex0.I.conjugate();
      complex1.I.sin();
      Complex complex2 = complex0.negate();
      complex2.abs();
      Complex complex3 = complex0.NaN.pow(complex2);
      complex2.ONE.tanh();
      complex0.INF.atan();
      complex0.getField();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.exp();
      complex2.ONE.conjugate();
      complex5.ONE.abs();
      complex0.getArgument();
      complex3.abs();
      Complex complex6 = Complex.valueOf((-4141.18365388922), (-2.356194490192345));
      complex0.nthRoot(269);
      complex5.add(complex4);
      complex6.hashCode();
      complex2.createComplex(269, 106.837);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.I.divide(complex1);
      complex0.sin();
      complex0.log();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3921.559149896));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.I.tan();
      complex0.sin();
      complex0.ONE.readResolve();
      complex1.getReal();
      Complex complex3 = complex1.multiply(2491);
      Complex complex4 = complex2.divide(complex0);
      complex4.getReal();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-8230.201383316231));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex1.pow(complex0);
      complex0.tan();
      complex0.tan();
      complex0.getArgument();
      complex3.getReal();
      Complex complex5 = complex1.I.sin();
      complex3.toString();
      complex1.toString();
      Complex complex6 = complex2.log();
      complex4.ZERO.reciprocal();
      Complex complex7 = complex5.I.subtract(complex1);
      complex5.tanh();
      complex4.subtract(complex5);
      complex7.ONE.divide(Double.NaN);
      Complex complex8 = Complex.valueOf(2.3593788146972656);
      complex8.ZERO.getField();
      complex6.abs();
      complex7.getReal();
      Complex complex9 = complex2.add(complex1);
      complex9.subtract(Double.POSITIVE_INFINITY);
      complex7.atan();
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 74.46343099456);
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.add((-3378.04137202096));
      complex0.ONE.exp();
      Complex.valueOf(1.493865728378296, 0.0);
      complex2.toString();
      complex2.NaN.atan();
      Complex complex3 = complex0.divide(74.46343099456);
      Complex complex4 = Complex.valueOf((-3378.04137202096));
      Complex complex5 = complex4.ZERO.sin();
      complex2.getReal();
      complex1.multiply(complex3);
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex7.add(0.0);
      complex8.ZERO.multiply(1219);
      Complex complex9 = complex0.conjugate();
      Complex.valueOf((-3378.04137202096), (-337.7949));
      complex2.getReal();
      complex9.subtract(complex6);
      complex5.negate();
      Complex complex10 = complex1.multiply(1);
      complex10.I.reciprocal();
      Complex complex11 = complex6.pow((-842.3609018668));
      complex11.NaN.pow(0.0);
      complex7.toString();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      Complex complex1 = complex0.createComplex((-1.2059301405584488E-12), (-1.2059301405584488E-12));
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.I.tanh();
      Complex complex4 = complex3.ZERO.atan();
      complex1.I.hashCode();
      Complex complex5 = complex1.I.acos();
      complex0.readResolve();
      complex2.ZERO.asin();
      Complex complex6 = complex1.subtract(complex0);
      complex6.INF.reciprocal();
      complex5.hashCode();
      complex6.ZERO.nthRoot(445);
      complex4.INF.sin();
      complex4.ZERO.cosh();
      Complex complex7 = complex5.tan();
      complex7.NaN.acos();
      complex5.getArgument();
      int int0 = 719;
      complex2.I.multiply(719);
      complex1.multiply((-4052.0));
      try { 
        complex6.nthRoot((-3209));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,209
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2152.167499771);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex3.INF.multiply((-4237));
      complex4.ZERO.add(2152.167499771);
      complex0.getField();
      Complex complex5 = complex1.add(2152.167499771);
      complex5.NaN.reciprocal();
      complex0.reciprocal();
      complex5.I.add((-2762.115));
      complex5.I.abs();
      complex2.multiply(0.0);
      complex5.multiply(complex2);
      complex1.divide(2152.167499771);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.cosh();
      complex1.ONE.pow(complex0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.exp();
      complex3.INF.subtract(complex2);
      Complex complex4 = complex0.asin();
      complex4.INF.sinh();
      Complex complex5 = complex2.sqrt();
      Complex.valueOf((-2165.368779529217));
      complex3.getImaginary();
      complex5.abs();
      complex0.multiply((-2.9485356677301627E-8));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.reciprocal();
      complex0.ONE.sqrt1z();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.pow((-1301.91002));
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex4.multiply(complex2);
      complex0.tanh();
      complex4.I.exp();
      Complex complex6 = complex3.tan();
      complex6.NaN.subtract(1696.85874338608);
      complex0.ZERO.asin();
      complex0.getReal();
      complex4.getArgument();
      complex1.isInfinite();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.toString();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.ZERO.sinh();
      complex3.I.getField();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.INF.multiply(7);
      Complex complex5 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      complex2.getArgument();
      Complex complex6 = complex2.createComplex(2167.22780197, 2167.22780197);
      complex0.getImaginary();
      complex0.add(complex5);
      complex6.ZERO.conjugate();
      complex1.add(complex5);
      complex6.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(742.906795047584, 742.906795047584);
      Complex complex1 = Complex.valueOf(742.906795047584, (-2336.090685));
      complex1.ONE.getField();
      Complex complex2 = complex0.NaN.sinh();
      complex2.cosh();
      complex1.I.reciprocal();
      complex1.INF.pow(complex2);
      complex2.INF.add((-2336.090685));
      complex0.NaN.multiply((-156.276736023881));
      Complex complex3 = Complex.valueOf(20.0, 20.0);
      complex3.ZERO.pow(0.0);
      complex3.exp();
      try { 
        complex0.nthRoot((-1748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,748
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 1423.1168779;
      Complex complex1 = complex0.INF.tan();
      complex1.atan();
      try { 
        complex0.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex1.sqrt1z();
      complex5.tan();
      Complex complex6 = complex5.NaN.negate();
      Complex complex7 = complex1.multiply(complex0);
      Complex complex8 = complex7.divide((-789.362));
      complex2.INF.subtract(complex1);
      Complex complex9 = complex8.ONE.add((-2022.2829814));
      Complex complex10 = Complex.valueOf((-789.362));
      Complex complex11 = complex10.INF.createComplex((-5.808261186903479E-8), (-789.362));
      complex11.I.cos();
      complex7.INF.cos();
      Complex complex12 = Complex.valueOf(1704.38567);
      complex7.sinh();
      complex7.isInfinite();
      complex12.divide((-789.362));
      complex8.acos();
      Complex complex13 = complex9.cos();
      Complex complex14 = complex13.NaN.cosh();
      complex4.isNaN();
      complex10.atan();
      complex6.multiply((-2032.1));
      complex7.subtract((-5.808261186903479E-8));
      complex14.multiply((-5.808261186903479E-8));
      complex9.tanh();
      Complex.valueOf((-5961.3578969));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-821.20689));
      Complex complex2 = complex1.ONE.sinh();
      complex2.ZERO.atan();
      Complex complex3 = complex0.ONE.multiply(complex1);
      complex2.ONE.hashCode();
      Complex complex4 = complex1.INF.pow(645.5028761);
      complex4.INF.acos();
      Complex complex5 = Complex.NaN;
      complex5.ONE.pow(complex2);
      Complex complex6 = complex0.I.divide(complex5);
      Complex complex7 = complex6.INF.multiply(0);
      complex3.ZERO.nthRoot(1);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.ONE.multiply((-629));
      complex3.hashCode();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex10.pow(complex11);
      complex12.log();
      complex11.sin();
      complex5.isNaN();
      complex12.pow((double) 0);
      complex8.cos();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1597.809558805));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.INF.cosh();
      Complex complex4 = complex3.I.divide((-1305.100796709972));
      complex4.NaN.multiply(1895);
      complex1.ZERO.multiply(complex2);
      complex2.INF.atan();
      Complex complex5 = complex0.ZERO.tan();
      Complex complex6 = complex0.log();
      complex1.I.getArgument();
      Complex complex7 = complex1.subtract((-1597.809558805));
      complex7.cosh();
      Complex complex8 = complex7.multiply(complex2);
      Complex complex9 = complex8.divide(complex6);
      complex8.conjugate();
      Complex complex10 = complex8.divide(complex5);
      complex10.INF.createComplex(2.0, 0.0);
      complex6.I.pow(complex10);
      Complex complex11 = complex9.asin();
      Complex.valueOf((-3128.3239752597), (-2102.613119));
      complex0.INF.sin();
      complex11.isInfinite();
      complex9.sqrt();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-413.965327460519));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.sqrt();
      complex1.I.conjugate();
      complex3.toString();
      complex0.ZERO.acos();
      complex1.isInfinite();
      complex1.divide((-413.965327460519));
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.I.asin();
      complex3.NaN.divide((-396.397095));
      complex4.I.getField();
      complex4.NaN.cos();
      complex3.ONE.getField();
      Complex complex5 = complex3.divide(0.0);
      complex5.ZERO.subtract(complex0);
      complex0.multiply(0.0);
      complex0.getArgument();
      Complex complex6 = complex2.subtract(0.0);
      complex6.atan();
      complex3.multiply(0.0);
      Complex complex7 = complex6.tan();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.subtract(complex1);
      complex0.NaN.pow(2071.029363235);
      complex3.NaN.cos();
      Complex complex4 = complex0.I.divide((-1.8853982316037226E201));
      Complex complex5 = complex3.pow((-474.9));
      complex5.createComplex((-1.8853982316037226E201), 4.3620527352131126E-299);
      Complex complex6 = complex4.createComplex((-2228.9211552), (-474.9));
      Complex complex7 = complex6.I.multiply(complex3);
      complex7.ZERO.negate();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      complex1.NaN.nthRoot(1);
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.NaN.subtract(1.8058628951432254E-306);
      Complex complex3 = complex2.ONE.sin();
      complex0.I.abs();
      Complex complex4 = complex0.multiply(1);
      complex4.I.getArgument();
      complex4.ONE.pow(complex0);
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.ZERO;
      complex0.multiply(complex6);
      complex5.NaN.multiply(1);
      complex0.hashCode();
      Complex complex7 = complex2.multiply(1);
      complex3.INF.sin();
      complex5.NaN.negate();
      Complex complex8 = complex4.NaN.tanh();
      complex2.ONE.asin();
      complex0.nthRoot(857);
      Complex complex9 = complex5.tan();
      Complex complex10 = complex8.multiply(857);
      complex9.NaN.sqrt();
      complex9.ZERO.divide(complex10);
      complex3.atan();
      complex9.exp();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.add((-20.0));
      complex0.equals(complex1);
      Complex complex3 = complex1.tan();
      complex3.I.divide((-20.0));
      complex3.atan();
      complex1.sqrt1z();
      complex1.toString();
      complex0.multiply(1);
      complex2.NaN.tan();
      Complex complex4 = complex2.multiply(1.0);
      complex4.getField();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(2.6113557852262235E15, 2.6113557852262235E15);
      complex0.ONE.exp();
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex1.INF.conjugate();
      complex0.readResolve();
      complex1.hashCode();
      complex0.equals((Object) null);
      Complex complex3 = complex2.cos();
      complex3.ONE.conjugate();
      complex0.add(complex1);
      complex0.multiply(complex2);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
      Complex.valueOf(2990.511593352298, 2990.511593352298);
      Complex complex1 = Complex.valueOf((-2802.7), 0.0);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex0.add(complex1);
      complex2.INF.atan();
      complex0.getImaginary();
      complex2.equals(complex4);
      Complex complex5 = Complex.valueOf(0.0, (-1.0));
      complex4.equals(complex5);
      Complex complex6 = complex5.createComplex(4.464279133463661E-201, 4.464279133463661E-201);
      complex3.add(complex6);
      complex6.subtract(0.0);
      complex0.exp();
      Complex complex7 = complex1.cos();
      complex3.asin();
      complex6.cosh();
      complex7.readResolve();
      complex0.sqrt1z();
      complex3.hashCode();
      complex4.tan();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex((-1783.0));
      complex0.getArgument();
      Complex complex1 = complex0.divide(3.141592653589793);
      complex1.ONE.getField();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.exp();
      complex2.readResolve();
      complex1.multiply(complex0);
      complex2.conjugate();
      Complex.valueOf(326.826494389, (-1783.0));
      complex3.getReal();
      Complex complex4 = Complex.valueOf(3968.923016, (-1783.0));
      complex4.acos();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-2804.08));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = Complex.INF;
      complex2.ZERO.pow(complex3);
      complex0.ONE.readResolve();
      Complex complex4 = complex0.add((-2804.08));
      complex0.isNaN();
      Complex complex5 = complex1.reciprocal();
      complex0.getField();
      Complex.valueOf((-660.6), (-660.6));
      complex5.pow(complex4);
      complex4.pow((-1723.286837014917));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(487.1233380734, 487.1233380734);
      Complex.valueOf(487.1233380734);
      complex0.ZERO.log();
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.valueOf(676.737, 487.1233380734);
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.sqrt1z();
      complex0.getField();
      Complex complex5 = complex2.subtract(676.737);
      complex2.nthRoot(7);
      complex1.sqrt();
      complex0.NaN.getArgument();
      Complex complex6 = complex1.multiply(complex4);
      complex3.abs();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = new Complex(676.737, 487.1233380734);
      Complex complex9 = complex7.INF.subtract(complex8);
      Complex complex10 = complex2.ZERO.subtract(676.737);
      complex7.ONE.divide(0.0);
      Complex complex11 = complex6.add(complex7);
      complex5.ONE.subtract(3289.921753635582);
      complex1.nthRoot(7);
      complex5.asin();
      complex9.equals(complex11);
      complex5.sqrt1z();
      complex10.subtract(1128.3107033081194);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1997.0);
      Complex complex1 = Complex.valueOf((-1.0), 6.283185307179586);
      Complex complex2 = complex0.INF.conjugate();
      complex0.getField();
      Complex complex3 = complex2.I.tan();
      complex2.ZERO.toString();
      Complex complex4 = complex0.subtract(1997.0);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex5.createComplex((-1.0), 1997.0);
      complex1.toString();
      complex3.ONE.acos();
      Complex complex8 = Complex.valueOf((-1.3584500601329896E-8));
      Complex complex9 = complex8.INF.sinh();
      complex9.I.acos();
      complex2.NaN.readResolve();
      Complex complex10 = complex6.I.tan();
      complex5.hashCode();
      complex1.sin();
      Complex complex11 = complex4.subtract(1997.0);
      complex11.INF.sqrt();
      complex4.equals(complex3);
      complex7.acos();
      complex2.sinh();
      complex2.add(0.0);
      complex10.readResolve();
      complex10.add(54.0189026085);
      complex9.readResolve();
      complex10.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.I.add(complex0);
      Complex complex2 = complex1.ONE.multiply(2618);
      Complex complex3 = Complex.valueOf(341.229276529);
      Complex complex4 = complex2.INF.subtract(complex3);
      complex2.ONE.subtract(1364.58468783011);
      complex1.toString();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.INF.add(complex5);
      complex6.I.asin();
      Complex complex7 = complex0.multiply((-268));
      complex7.I.asin();
      Complex.valueOf((double) 2618, (double) 2618);
      Complex complex8 = complex0.sqrt();
      complex5.multiply(complex8);
      complex4.multiply((-268));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.exp();
      complex0.INF.abs();
      Complex complex2 = complex1.ZERO.pow(0.0);
      complex2.INF.createComplex(1089.57, (-49.86840843831867));
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex0.pow((-88.1));
      Complex complex5 = complex0.log();
      complex5.ONE.readResolve();
      complex4.ONE.cosh();
      Complex complex6 = complex3.NaN.reciprocal();
      complex4.exp();
      complex6.INF.asin();
      complex3.hashCode();
      complex4.sin();
      complex6.subtract(Double.POSITIVE_INFINITY);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.I.asin();
      complex2.INF.conjugate();
      complex0.divide((-972.0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.getField();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex3.NaN.conjugate();
      Complex complex6 = complex2.INF.subtract(0.0);
      Complex complex7 = complex1.multiply(complex3);
      Complex complex8 = complex7.sinh();
      complex8.I.asin();
      complex5.hashCode();
      Complex complex9 = complex7.I.multiply(0.0);
      complex1.getReal();
      Complex complex10 = complex1.NaN.subtract(1103.73720046);
      Complex complex11 = complex5.add(complex2);
      complex6.NaN.atan();
      Complex complex12 = complex7.pow(4357.880221082);
      complex12.NaN.log();
      Complex complex13 = complex6.multiply(1);
      Complex complex14 = complex4.sqrt();
      complex0.getField();
      Complex.valueOf(2991.416625);
      complex13.subtract(complex9);
      Complex complex15 = complex10.sin();
      complex15.NaN.pow(Double.NEGATIVE_INFINITY);
      complex4.tanh();
      complex14.cosh();
      complex11.sqrt1z();
      complex4.atan();
      complex0.divide(7.243267286265823E-142);
      complex0.add(1103.73720046);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.exp();
      complex1.ZERO.hashCode();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.INF.sin();
      complex0.I.divide(complex1);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.multiply((-20.0));
      Complex complex4 = complex3.log();
      complex4.getArgument();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.ZERO.pow(complex5);
      complex6.NaN.abs();
      Complex complex7 = Complex.valueOf(2.807397988979441E75);
      complex7.NaN.sqrt1z();
      Complex complex8 = complex0.I.pow(complex7);
      complex8.I.sinh();
      complex3.NaN.getArgument();
      complex0.sqrt();
      Complex complex9 = complex0.I.sin();
      Complex complex10 = complex2.add(complex3);
      complex7.NaN.pow(2.807397988979441E75);
      complex9.ONE.multiply(141);
      Complex complex11 = complex10.multiply((-2553));
      complex11.I.cos();
      complex11.NaN.getField();
      complex0.acos();
      complex9.cosh();
      complex7.isInfinite();
      complex4.pow((double) (-2553));
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf((-5933.382), 530.07941384);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.INF.pow(complex3);
      Complex complex5 = complex4.NaN.exp();
      complex2.INF.nthRoot(37);
      complex2.hashCode();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex0.pow(0.0);
      complex0.I.asin();
      complex7.ZERO.abs();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex8.I.multiply(37);
      complex9.createComplex(1.0, 0.0);
      Complex complex10 = complex0.atan();
      complex10.NaN.sinh();
      complex7.divide(complex6);
      Complex complex11 = complex6.sqrt();
      complex0.tanh();
      complex11.divide((-1075.267242));
      complex5.toString();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex2.INF.tan();
      Complex complex7 = complex6.I.subtract(complex1);
      Complex complex8 = Complex.valueOf(5.597398155472547E-178, 1466.84301633);
      Complex complex9 = complex2.atan();
      complex9.INF.hashCode();
      Complex complex10 = complex8.ZERO.acos();
      assertEquals(1.5707963267948966, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex5.createComplex(Double.POSITIVE_INFINITY, 2.0);
      Complex complex12 = Complex.valueOf(2.0);
      Complex complex13 = complex2.tan();
      Complex complex14 = complex13.ZERO.sinh();
      Complex complex15 = complex6.ZERO.add((-1375.32373871));
      assertFalse(complex15.equals((Object)complex14));
      
      double double0 = complex3.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex16 = complex12.I.asin();
      assertEquals(0.8813735870195428, complex16.getImaginary(), 0.01);
      
      complex12.ONE.hashCode();
      complex8.getField();
      assertEquals(1466.84301633, complex8.getImaginary(), 0.01);
      
      Complex complex17 = complex12.conjugate();
      complex9.hashCode();
      boolean boolean0 = complex17.equals(complex12);
      assertTrue(boolean0);
      
      Complex complex18 = complex1.cos();
      Complex complex19 = complex6.sinh();
      complex9.isInfinite();
      Complex.valueOf(5.597398155472547E-178);
      Complex complex20 = complex6.multiply((-1775.396990826972));
      assertSame(complex20, complex7);
      assertTrue(complex2.equals((Object)complex19));
      
      Complex complex21 = complex11.sinh();
      assertSame(complex4, complex9);
      assertTrue(complex21.isInfinite());
      assertSame(complex5, complex18);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1304.28, (-444.0));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.acos();
      complex2.NaN.subtract(complex0);
      complex1.ZERO.readResolve();
      Complex complex3 = complex1.ZERO.negate();
      complex3.ZERO.getArgument();
      Complex complex4 = complex1.sqrt1z();
      assertEquals((-1304.2796564578177), complex4.getImaginary(), 0.01);
      assertEquals(444.0001169478709, complex4.getReal(), 0.01);
      
      Complex complex5 = complex2.cos();
      Complex complex6 = complex2.divide(1304.28);
      assertEquals(0.0012043398095461838, complex6.getReal(), 0.01);
      assertEquals((-6.7575488930256E-4), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex5.add(0.0);
      assertEquals(8.659560562354932E-17, complex7.getReal(), 0.01);
      assertEquals(0.9999999999999999, complex7.getImaginary(), 0.01);
  }
}
