/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:41:17 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.7071067811865476, 20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(0.41421356237309515, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex((-1266.816529232), (-293.901276547859));
      complex0.subtract(complex1);
      complex0.multiply(4975);
      Complex complex2 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.INF;
      complex1.ZERO.abs();
      complex2.abs();
      complex1.acos();
      Complex complex3 = complex1.asin();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(747.08414, (-4635.292));
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.cosh();
      complex2.NaN.pow(complex1);
      Complex complex3 = complex0.pow((-4635.292));
      complex0.negate();
      Complex complex4 = complex0.sqrt1z();
      complex3.I.getArgument();
      complex4.NaN.readResolve();
      complex3.NaN.getField();
      Complex complex5 = complex4.INF.reciprocal();
      complex5.getArgument();
      Complex complex6 = complex3.log();
      complex6.ZERO.getArgument();
      complex2.sqrt1z();
      complex0.nthRoot(2221);
      Complex complex7 = complex6.divide(complex0);
      complex7.abs();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.NaN);
      complex0.acos();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.divide((-20.0));
      Complex.valueOf((-20.0), (-1765.31007572847));
      complex1.acos();
      complex1.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.tanh();
      complex0.divide(2.0);
      Complex complex3 = Complex.INF;
      complex2.abs();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0648015610276362E257));
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.pow(complex0);
      complex3.ONE.subtract(complex0);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex1.sin();
      Complex complex8 = Complex.valueOf((-2.0648015610276362E257));
      complex8.NaN.log();
      complex2.I.reciprocal();
      Complex complex9 = complex7.I.divide((-2.0648015610276362E257));
      complex6.atan();
      complex7.divide(complex5);
      Complex complex10 = complex1.log();
      complex9.ONE.sin();
      complex10.INF.sqrt1z();
      complex5.createComplex((-2.0648015610276362E257), (-922.115583833516));
      complex9.negate();
      Complex complex11 = Complex.NaN;
      complex7.multiply(complex11);
      Complex.valueOf((-922.115583833516));
      complex5.multiply((-4325.036833));
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725), (-509.28093569725));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.pow(complex0);
      complex1.multiply((-19.459));
      complex1.nthRoot(17);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = Complex.ONE;
      complex0.ONE.divide(complex1);
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf((-509.28093569725));
      Complex complex4 = complex0.sqrt();
      complex4.readResolve();
      complex3.abs();
      complex1.log();
      Complex.valueOf(509.28093569725, Double.NaN);
      Complex complex5 = new Complex((-509.28093569725));
      Complex complex6 = new Complex(509.28093569725, 1060.1);
      complex6.add(complex5);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.multiply((-3824));
      Complex complex4 = complex2.log();
      Complex complex5 = complex4.cos();
      complex3.tanh();
      complex3.toString();
      complex2.abs();
      Complex complex6 = complex2.log();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex3.exp();
      Complex complex9 = Complex.ONE;
      complex8.subtract((double) (-3824));
      Complex complex10 = complex3.conjugate();
      complex7.cosh();
      Complex complex11 = complex0.acos();
      complex10.cosh();
      Complex complex12 = Complex.ONE;
      Complex complex13 = new Complex((-980.869), 2.4258259770489514E8);
      complex3.equals(complex13);
      Object object0 = complex6.readResolve();
      complex11.equals(object0);
      complex9.readResolve();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
      Complex complex1 = complex0.acos();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex((-339.28091318837), 1600.02994922);
      Complex complex1 = complex0.sqrt1z();
      complex1.ONE.cos();
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.INF.log();
      Complex complex3 = complex0.atan();
      complex3.ZERO.toString();
      complex3.sinh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex2.NaN.pow(1600.02994922);
      complex5.I.nthRoot(1045);
      Complex complex6 = complex4.I.divide(1600.02994922);
      Complex complex7 = complex6.log();
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      complex2.equals(complex7);
      Complex complex8 = complex7.reciprocal();
      complex8.NaN.atan();
      Complex complex9 = complex1.multiply(1045);
      complex9.cosh();
      complex7.acos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      complex0.ONE.divide(complex1);
      Complex complex2 = new Complex((-509.28093569725), 282.661883291);
      Complex complex3 = Complex.ONE;
      // Undeclared exception!
      complex3.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.nthRoot(624);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-82.237055), (-82.237055));
      complex0.acos();
      Complex complex1 = Complex.valueOf((-20.0), 5.27579825970359E190);
      Complex complex2 = complex1.cosh();
      complex2.multiply((-3824));
      Complex complex3 = complex2.log();
      complex1.cos();
      Complex complex4 = complex3.log();
      complex4.hashCode();
      complex1.readResolve();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.INF;
      Object object0 = complex4.readResolve();
      complex6.equals(object0);
      Complex complex7 = Complex.valueOf((-82.237055));
      complex0.pow(5.27579825970359E190);
      complex3.exp();
      Complex.valueOf((-20.0));
      Object object1 = new Object();
      complex7.equals(object1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.divide(complex0);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.I.cosh();
      Complex complex4 = complex0.sqrt();
      complex4.acos();
      Complex complex5 = Complex.INF;
      complex5.abs();
      complex4.cosh();
      complex5.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 7.663353127378024E218);
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(4.981496462621207E-273);
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.divide(complex1);
      complex3.NaN.hashCode();
      Complex complex4 = Complex.valueOf(1613.996806);
      Complex complex5 = complex3.cos();
      complex5.I.asin();
      Complex complex6 = complex0.ONE.exp();
      complex0.conjugate();
      Complex complex7 = complex2.add(complex4);
      complex1.atan();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex7.add(complex8);
      Complex complex10 = complex6.pow(4.981496462621207E-273);
      complex9.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.divide(4281.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sinh();
      complex0.ONE.divide(complex1);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, (-509.28093569725));
      Complex complex3 = Complex.valueOf((-509.28093569725));
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex2.acos();
      complex3.abs();
      complex5.cosh();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.ZERO.log();
      Complex complex4 = complex2.multiply(1073741824);
      complex2.log();
      Complex complex5 = complex3.cos();
      Complex complex6 = complex3.tanh();
      complex6.toString();
      complex4.abs();
      complex5.log();
      complex6.tan();
      Complex complex7 = new Complex(1073741824);
      complex7.exp();
      complex6.subtract(Double.NaN);
      Complex complex8 = Complex.valueOf(0.0, 1075.0410752);
      complex8.conjugate();
      complex0.cosh();
      complex1.acos();
      complex4.cosh();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(1.740249660600677E-253);
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex1.conjugate();
      complex3.atan();
      Complex complex5 = complex2.pow(1740.0350278436702);
      Complex complex6 = complex3.multiply(1.740249660600677E-253);
      Complex complex7 = complex2.sin();
      Complex complex8 = new Complex(1.740249660600677E-253, (-20.0));
      complex8.abs();
      Complex.valueOf(2167.0, 2167.0);
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex7.multiply((-3824));
      Complex complex11 = complex9.log();
      Complex complex12 = complex4.cos();
      Complex complex13 = complex2.tanh();
      complex11.toString();
      complex6.abs();
      complex4.log();
      complex13.tan();
      complex5.exp();
      Complex complex14 = Complex.ONE;
      complex14.subtract(20.0);
      complex13.conjugate();
      Complex complex15 = complex12.cosh();
      Complex complex16 = complex0.acos();
      complex9.cosh();
      Complex complex17 = Complex.ONE;
      complex17.equals(complex15);
      complex10.equals(complex4);
      complex11.readResolve();
      complex16.asin();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(11.61598703288748);
      Complex complex1 = complex0.I.divide(2006.4004571);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.divide(complex0);
      complex3.NaN.conjugate();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex2.ONE.pow(1740.0350278436702);
      complex4.multiply(1740.0350278436702);
      Complex complex6 = complex1.NaN.sin();
      complex6.INF.abs();
      Complex complex7 = Complex.valueOf(11.61598703288748, 2167.0);
      complex7.cosh();
      complex7.ONE.multiply((-3824));
      complex7.I.log();
      complex6.toString();
      Complex complex8 = complex0.createComplex(11.61598703288748, 11.61598703288748);
      complex2.cosh();
      Complex complex9 = new Complex(7.555748177534973, Double.POSITIVE_INFINITY);
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex0.multiply(complex8);
      Complex complex10 = Complex.INF;
      complex10.equals(complex5);
      complex8.getReal();
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.I;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(11.61598703288748);
      Complex complex1 = complex0.I.divide(2006.4004571);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex2.ONE.pow(1740.0350278436702);
      complex5.multiply(1740.0350278436702);
      Complex complex7 = complex1.NaN.sin();
      complex7.INF.abs();
      Complex complex8 = Complex.valueOf(11.61598703288748, 2167.0);
      complex8.cosh();
      Complex complex9 = complex8.ONE.multiply((-3824));
      complex8.I.log();
      complex5.INF.cos();
      complex8.NaN.tanh();
      complex5.ONE.toString();
      complex1.abs();
      Complex complex10 = complex1.log();
      complex10.acos();
      complex3.getReal();
      complex8.tan();
      complex4.exp();
      complex6.createComplex(Double.POSITIVE_INFINITY, 2006.4004571);
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex1.pow((-1443.930938499));
      Complex complex5 = complex3.multiply(1740.0350278436702);
      Complex complex6 = complex5.sin();
      complex2.abs();
      Complex complex7 = Complex.valueOf(1740.0350278436702, (-1206.6));
      complex0.cosh();
      Complex complex8 = complex7.multiply((-3824));
      Complex complex9 = complex1.log();
      Complex complex10 = complex1.cos();
      complex8.tanh();
      complex1.toString();
      complex0.abs();
      complex0.log();
      Complex complex11 = complex3.tan();
      complex1.exp();
      Complex complex12 = complex0.subtract((-1206.6));
      complex12.sqrt1z();
      Complex complex13 = complex11.exp();
      complex6.conjugate();
      complex10.cosh();
      complex13.subtract(complex7);
      Complex complex14 = complex9.acos();
      complex14.cosh();
      complex14.equals(complex4);
      complex4.equals("/~[_[XAf;-B");
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.tanh();
      Complex complex6 = Complex.valueOf(584.73295405841, 584.73295405841);
      complex6.toString();
      complex4.abs();
      Complex complex7 = complex3.log();
      complex1.tan();
      Complex complex8 = complex0.exp();
      complex8.subtract(0.0);
      complex5.sqrt1z();
      complex1.exp();
      complex4.conjugate();
      Complex complex9 = complex5.cosh();
      Complex complex10 = new Complex(2085.80177, Double.NaN);
      complex10.subtract(complex9);
      complex4.acos();
      complex7.cosh();
      Object object0 = new Object();
      complex5.equals(object0);
      complex3.equals("");
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(11.61598703288748);
      Complex complex1 = complex0.I.divide(2006.4004571);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.divide(complex0);
      complex3.NaN.conjugate();
      Complex complex4 = complex3.atan();
      complex2.ONE.pow(1740.0350278436702);
      Complex complex5 = complex4.multiply(1740.0350278436702);
      Complex complex6 = complex1.NaN.sin();
      complex6.INF.abs();
      Complex complex7 = Complex.valueOf(11.61598703288748, 2167.0);
      complex7.cosh();
      complex7.ONE.multiply((-3824));
      complex7.I.log();
      complex4.INF.cos();
      complex7.NaN.tanh();
      complex4.ONE.toString();
      complex1.abs();
      Complex complex8 = complex1.log();
      complex2.tan();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex0.subtract(2167.0);
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex10.exp();
      complex12.INF.conjugate();
      complex4.cosh();
      Complex complex13 = complex4.subtract(complex9);
      complex13.NaN.acos();
      complex13.cosh();
      complex7.equals(complex11);
      complex8.equals("/~[_[XAf;-B");
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.valueOf((-509.28093569725), 1899.2864);
      Complex complex3 = complex2.divide(1486.0);
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf(1899.2864, 657.0852838568);
      complex5.cos();
      Complex complex6 = complex0.multiply(20.0);
      Complex complex7 = Complex.valueOf(1486.0, (-509.28093569725));
      complex1.readResolve();
      Complex complex8 = complex0.tan();
      complex3.divide(complex4);
      Complex complex9 = complex8.sqrt1z();
      complex9.multiply(5087);
      Complex complex10 = complex0.add(455297.1565133415);
      complex6.tan();
      Complex complex11 = complex10.add(4821.255);
      Object object0 = new Object();
      complex7.equals(object0);
      try { 
        complex11.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.createComplex(0.0, 1.1752011936438014);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.valueOf(1899.2864);
      Complex complex5 = complex4.multiply(1899.2864);
      Complex.valueOf(455297.1565133415, (-2281.8478));
      complex1.readResolve();
      Complex complex6 = complex3.tan();
      complex6.divide(complex0);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex3.multiply(2049162264);
      Complex complex9 = Complex.NaN;
      complex9.tan();
      complex8.add((-509.28093569725));
      Object object0 = new Object();
      complex5.equals(object0);
      complex9.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      complex0.abs();
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.valueOf(2.000000074480207, (-1429.505576033049));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex3.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.NaN.sqrt1z();
      Complex complex7 = complex4.asin();
      complex7.ONE.multiply(complex6);
      complex4.ZERO.multiply(complex5);
      Complex complex8 = complex3.ZERO.tanh();
      complex0.subtract(complex3);
      complex4.toString();
      complex7.readResolve();
      Complex.valueOf(1911.555488824, 1911.555488824);
      complex7.ONE.asin();
      complex4.asin();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex4.add((-1429.505576033049));
      complex9.ZERO.hashCode();
      Complex complex10 = complex7.exp();
      Complex complex11 = complex5.subtract(complex6);
      Object object0 = complex10.readResolve();
      complex8.equals(object0);
      complex2.negate();
      complex11.cos();
      Complex.valueOf((-1068.2), (-1979.2730073317018));
      complex0.tan();
      complex10.log();
      complex9.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      double double0 = (-509.28093569725);
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf((-509.28093569725));
      complex3.equals(complex4);
      complex2.negate();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.ZERO;
      complex5.acos();
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.cosh();
      Complex complex2 = complex0.tan();
      complex1.add(0.44691193103790283);
      Complex complex3 = Complex.ZERO;
      complex3.multiply(0.44691193103790283);
      complex2.pow(complex0);
      complex3.multiply(5.1847060206155E21);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      complex0.ONE.divide(complex1);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((-509.28093569725));
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex3.acos();
      complex2.abs();
      complex5.cosh();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-445.85210996139915));
      complex0.multiply(730.3696546740517);
      Complex complex1 = complex0.log();
      complex0.tanh();
      Complex complex2 = Complex.NaN;
      complex0.atan();
      Complex complex3 = new Complex(730.3696546740517, (-123.64907525491351));
      complex0.subtract(complex3);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = Complex.valueOf(1574.2, Double.POSITIVE_INFINITY);
      complex2.multiply(complex1);
      complex1.getImaginary();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.subtract((-3709.1319715856694));
      complex0.add((-419.9343311));
      Complex complex1 = Complex.valueOf(6.283185307179586, (-419.9343311));
      complex1.pow(4.4184031403861137E253);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 584.73295405841);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex3.NaN.sinh();
      complex2.sqrt();
      complex1.acos();
      complex0.abs();
      complex4.cosh();
      Complex complex5 = Complex.NaN;
      complex5.tan();
      complex4.pow(0.0);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 584.73295405841);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex0.ZERO.log();
      complex3.NaN.sinh();
      complex3.ONE.toString();
      complex0.hashCode();
      complex0.I.reciprocal();
      complex0.cosh();
      complex4.sinh();
      complex1.tan();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-720.9072916677));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.multiply(0);
      complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.log();
      Complex complex7 = Complex.valueOf(608.142605, Double.POSITIVE_INFINITY);
      complex7.tanh();
      complex6.atan();
      Complex.valueOf(1.1883951057781212);
      complex2.subtract(complex5);
      Complex complex8 = Complex.NaN;
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 584.73295405841);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex3.NaN.sinh();
      complex3.ONE.toString();
      Complex complex6 = complex2.subtract(0.45160030615905045);
      complex5.pow(0.45160030615905045);
      complex2.getArgument();
      Complex complex7 = complex1.sinh();
      complex7.toString();
      Complex complex8 = Complex.ONE;
      complex8.getImaginary();
      Complex complex9 = Complex.INF;
      complex6.acos();
      Complex.valueOf(1.5707963267948966, 0.0);
      complex4.pow(5.900393284617182E-8);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.INF.divide((-1618.4));
      complex2.negate();
      complex1.INF.sqrt1z();
      complex1.readResolve();
      complex0.ZERO.divide(complex2);
      complex1.hashCode();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = new Complex((-1863.4), (-1618.4));
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex0.INF.log();
      complex0.isInfinite();
      complex0.toString();
      complex2.NaN.add(complex3);
      complex0.isInfinite();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex2.I.asin();
      complex6.asin();
      complex6.toString();
      complex0.sin();
      complex5.divide(complex1);
      complex1.ONE.log();
      complex5.subtract(4481.45756832133);
      complex4.getField();
      complex0.hashCode();
      complex4.equals(complex2);
      complex3.isNaN();
      complex5.cosh();
      complex4.add(4481.45756832133);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.divide((double) 0);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.negate();
      complex6.sqrt1z();
      complex3.readResolve();
      Complex complex7 = complex2.divide(complex3);
      complex5.subtract((-509.28093569725));
      Complex complex8 = complex1.pow((-1773.221915));
      complex7.getArgument();
      complex4.sinh();
      complex8.getImaginary();
      Complex complex9 = Complex.INF;
      complex6.acos();
      Complex.valueOf((-6.156621611015322E12), 7.055284607047005);
      complex3.pow((-1773.221915));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.0156621983963848E77);
      Complex complex2 = complex0.divide(2.0156621983963848E77);
      Complex complex3 = Complex.valueOf(3225.41);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.valueOf(2.0156621983963848E77);
      complex5.sqrt();
      Complex complex6 = complex2.acos();
      complex6.add(0.0);
      complex4.nthRoot(387);
      Complex complex7 = complex3.tan();
      Complex complex8 = new Complex((-2481254.04));
      complex8.sqrt1z();
      complex2.isNaN();
      complex4.abs();
      complex3.sqrt();
      complex7.createComplex(11.61598703288748, (-2481254.04));
      complex0.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-1586.060808716527));
      Complex complex1 = new Complex((-1.4265564976097062E122), (-1586.060808716527));
      complex1.I.readResolve();
      complex0.ONE.getField();
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.readResolve();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.reciprocal();
      complex4.INF.toString();
      complex4.NaN.exp();
      Complex complex5 = complex3.reciprocal();
      complex4.NaN.sinh();
      Complex complex6 = complex5.NaN.sinh();
      complex6.I.add(1849.66577);
      complex4.readResolve();
      Complex complex7 = complex6.multiply(320);
      complex7.NaN.nthRoot(320);
      complex5.sqrt();
      complex7.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 584.73295405841);
      complex1.sin();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.ZERO.log();
      complex2.NaN.sinh();
      complex2.ONE.toString();
      complex0.hashCode();
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex3.NaN.sinh();
      complex3.ZERO.sqrt();
      complex1.I.multiply(794);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.acos();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.ZERO.abs();
      Complex complex2 = Complex.valueOf((-4704.73355));
      complex2.sqrt();
      Complex complex3 = complex1.sqrt();
      complex1.acos();
      Complex complex4 = complex3.add((-2221.4325));
      complex1.tan();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = Complex.ZERO;
      complex6.isNaN();
      Complex.valueOf((-1234.09385475341));
      complex4.acos();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 584.73295405841);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      complex0.ZERO.log();
      complex3.NaN.sinh();
      complex3.ONE.toString();
      complex0.hashCode();
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = new Complex((-1863.4), 0.0);
      complex2.add(complex5);
      complex5.atan();
      complex3.acos();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.sinh();
      complex1.toString();
      Complex complex5 = Complex.ONE;
      complex5.hashCode();
      complex3.reciprocal();
      complex3.sinh();
      complex5.sqrt();
      complex3.multiply(794);
      complex5.abs();
      complex4.sqrt();
      complex4.createComplex(315.13682677518136, 794);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 584.73295405841);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.ZERO.subtract(complex1);
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex3.NaN.sinh();
      Complex complex6 = complex4.multiply(618);
      complex5.abs();
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = complex2.multiply(complex4);
      complex3.atan();
      complex7.sqrt();
      Complex complex9 = Complex.I;
      complex9.asin();
      complex2.multiply(Double.NaN);
      complex9.sin();
      Complex complex10 = complex8.acos();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.sqrt1z();
      complex1.readResolve();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex5.subtract((-83.9079836));
      Complex complex7 = complex4.pow((-83.9079836));
      complex7.getArgument();
      complex3.sinh();
      Complex complex8 = Complex.ZERO;
      complex8.equals(complex6);
      Complex complex9 = new Complex(0.0);
      complex9.divide(0.0);
      Complex complex10 = Complex.I;
      Complex complex11 = new Complex((-83.9079836));
      complex4.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex((-2562.8740321), (-2562.8740321));
      complex0.nthRoot(647);
      Complex.valueOf(8.6593395455164416E16, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex2.getImaginary();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.sinh();
      complex4.toString();
      complex3.hashCode();
      complex4.reciprocal();
      Complex complex5 = complex1.sinh();
      complex1.sqrt();
      complex1.multiply((-3326));
      complex1.abs();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.multiply((-25));
      Complex complex5 = complex1.NaN.multiply(608.142605);
      Complex complex6 = complex4.ZERO.log();
      Complex.valueOf((double) (-25), (-509.28093569725));
      complex1.atan();
      complex5.ONE.getField();
      Complex complex7 = complex5.multiply(complex4);
      Complex complex8 = complex6.atan();
      complex3.sqrt();
      complex8.asin();
      Complex complex9 = complex1.multiply((double) (-25));
      complex4.getImaginary();
      Complex complex10 = new Complex((-509.28093569725), Double.POSITIVE_INFINITY);
      complex10.sin();
      complex9.acos();
      complex7.conjugate();
      complex6.pow(0.1585290151921035);
      Complex complex11 = new Complex(214.0, 0.0);
      complex11.reciprocal();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.acos();
      complex1.equals(complex3);
      Complex complex6 = complex5.negate();
      Complex complex7 = complex2.sin();
      complex0.tanh();
      complex3.multiply((-509.28093569725));
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.divide(7.555748177534973);
      complex5.toString();
      complex8.I.createComplex(1.0, 7.555748177534973);
      Complex complex10 = Complex.valueOf(1.0, 1.0);
      complex9.cosh();
      Complex complex11 = complex10.multiply((-509.28093569725));
      complex6.multiply(complex11);
      complex10.equals(complex4);
      complex3.getReal();
      Complex complex12 = Complex.valueOf(1.0, (-4370.449996866432));
      complex7.divide((double) 0);
      complex12.tan();
      complex3.getField();
      complex0.multiply(0);
      complex6.asin();
      complex12.reciprocal();
      complex0.multiply(7.555748177534973);
      complex10.createComplex(0.0, 2005.20890839034);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(288.3, (-297.13611));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.divide(288.3);
      Complex complex3 = complex2.NaN.acos();
      complex2.ONE.getField();
      complex0.nthRoot(1);
      Complex complex4 = complex2.INF.sin();
      complex2.multiply(2145377365);
      Complex complex5 = complex4.multiply((-293.50065104719));
      Complex complex6 = complex4.log();
      complex2.tanh();
      Complex complex7 = complex1.atan();
      Complex complex8 = Complex.valueOf((-297.13611), 2.0);
      complex7.subtract(complex3);
      complex7.createComplex(11.61598703288748, 1074.2);
      complex8.cosh();
      complex5.add(11.61598703288748);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex(0.0, (-1911.7));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex1.log();
      Complex complex5 = new Complex(4.8926595743317624E162);
      complex5.sinh();
      complex1.toString();
      complex2.hashCode();
      complex4.reciprocal();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex2.sqrt();
      complex6.multiply((-2079));
      complex4.abs();
      complex7.sqrt();
      complex7.tanh();
      complex7.createComplex(4.8926595743317624E162, (-1150.865964));
      complex5.multiply(5);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(288.3, (-297.13611));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.divide(288.3);
      Complex complex3 = complex2.NaN.acos();
      complex2.ONE.getField();
      complex0.nthRoot(1);
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex0.acos();
      complex1.equals(complex0);
      complex4.ZERO.negate();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex2.multiply(288.3);
      complex5.equals(complex6);
      Complex complex9 = complex4.ONE.reciprocal();
      complex9.I.divide((double) 1);
      complex7.INF.toString();
      Complex complex10 = Complex.valueOf(288.3, (double) 1);
      complex4.cosh();
      complex1.INF.multiply(3834.3653745262022);
      Complex complex11 = complex8.multiply(complex4);
      complex11.INF.cosh();
      complex8.isInfinite();
      complex7.getReal();
      Complex.valueOf(288.3, (-297.13611));
      complex7.divide(0.7615941559557649);
      complex3.tan();
      complex10.getField();
      Complex complex12 = complex8.multiply(1);
      complex12.asin();
      complex8.reciprocal();
      complex4.multiply(2.9495302004590423E-225);
      complex0.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.createComplex(584.73295405841, (-1443.0));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.subtract(complex2);
      complex0.log();
      Complex complex4 = complex3.sinh();
      complex1.toString();
      complex2.hashCode();
      complex1.reciprocal();
      Complex complex5 = complex4.sinh();
      complex1.sqrt();
      complex0.multiply(794);
      complex0.abs();
      complex0.sqrt();
      complex5.createComplex(794, 2.2741891590028428E-8);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.divide(1576.188694474);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.sqrt1z();
      complex0.readResolve();
      Complex complex5 = complex1.divide(complex2);
      complex3.subtract(2481254.04);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.pow(0.0);
      complex7.multiply((-1171));
      complex5.getArgument();
      complex2.sinh();
      Complex complex8 = Complex.ZERO;
      complex8.equals(complex5);
      complex1.divide((-1286.1411618687625));
      Complex complex9 = Complex.I;
      complex2.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.I.sin();
      Complex complex3 = complex0.multiply(0);
      complex1.NaN.multiply(608.142605);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.atan();
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.subtract(complex1);
      complex6.ZERO.log();
      complex7.createComplex(0, 0.0);
      complex4.cosh();
      complex5.add((-509.28093569725));
      complex0.acos();
      Complex complex8 = Complex.valueOf((-1.0), (-354.794822));
      complex3.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-55356));
      complex0.hashCode();
      complex1.hashCode();
      Complex complex2 = complex1.sqrt1z();
      complex2.atan();
      complex1.reciprocal();
      Object object0 = new Object();
      Complex complex3 = Complex.ZERO;
      Object object1 = complex3.readResolve();
      complex2.equals(object1);
      Complex complex4 = complex1.subtract((double) (-3007));
      complex1.subtract(complex0);
      Complex.valueOf(4368.268, (-2159.3948275499993));
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.ZERO.abs();
      complex0.ONE.createComplex(0.0, 0.0);
      Complex complex2 = complex0.multiply((-3260.801776152));
      complex2.isInfinite();
      complex2.getReal();
      Complex complex3 = Complex.valueOf((-3278.7606), 20.0);
      complex1.divide((-3260.801776152));
      complex3.getField();
      Complex complex4 = complex2.multiply(352);
      complex4.asin();
      complex0.reciprocal();
      complex0.multiply((double) 352);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.subtract((-1.0));
      complex3.pow((-3709.1319715856694));
      Complex complex4 = complex2.multiply((-1093));
      complex0.getArgument();
      Complex complex5 = complex2.sinh();
      complex5.ONE.divide(complex4);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf((-3709.1319715856694));
      complex7.equals("");
      complex6.divide((-1564.1208811));
      Complex complex8 = Complex.I;
      complex7.divide(complex4);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-7.761550286697394), 584.73295405841);
      complex1.sin();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.ZERO.log();
      Complex complex3 = new Complex((-7.761550286697394), 584.73295405841);
      complex2.ONE.toString();
      complex0.hashCode();
      Complex complex4 = complex0.I.reciprocal();
      Complex complex5 = new Complex(584.73295405841, 584.73295405841);
      complex4.ZERO.sqrt();
      complex0.createComplex(509.28093569725, 794);
      complex4.cosh();
      complex2.add(509.28093569725);
      Complex.valueOf((-7.761550286697394), 584.73295405841);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 584.73295405841);
      Complex complex2 = complex1.sin();
      complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.multiply(0.18329763412475586);
      complex3.log();
      complex0.tanh();
      complex1.atan();
      Complex.valueOf(608.142605, 1.455350496998097);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.createComplex((-3.687854305539139E-8), 315.13682677518136);
      complex5.cosh();
      Complex complex6 = complex5.add(3636.0);
      complex1.acos();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.I.sin();
      Complex complex4 = complex0.multiply(0);
      complex0.log();
      Complex complex5 = complex4.sinh();
      complex4.toString();
      complex1.hashCode();
      complex5.reciprocal();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex4.sqrt();
      complex7.multiply(0);
      complex3.abs();
      complex2.sqrt();
      complex4.createComplex((-1717.94858), (-1717.94858));
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(1575.2);
      complex0.divide(1575.2);
      Complex complex1 = Complex.valueOf(6756.09779704723, 6756.09779704723);
      complex1.I.divide((-1636.0));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex1.acos();
      complex2.add(0.0);
      complex0.tan();
      Complex complex4 = complex2.sqrt1z();
      complex3.isNaN();
      Complex complex5 = Complex.valueOf(1488.6231823);
      Complex complex6 = complex5.acos();
      complex5.readResolve();
      complex6.equals(complex4);
      complex6.atan();
      try { 
        complex0.nthRoot((-3185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,185
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(4368.268);
      Complex complex1 = complex0.pow(1.0);
      Complex complex2 = complex0.acos();
      complex2.exp();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(0.0, 584.73295405841);
      complex1.sin();
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.ZERO.log();
      Complex complex3 = complex2.NaN.sinh();
      complex2.ONE.toString();
      complex0.hashCode();
      Complex complex4 = complex0.I.reciprocal();
      complex4.NaN.sinh();
      complex4.ZERO.sqrt();
      complex1.I.multiply(794);
      complex1.abs();
      complex1.sqrt();
      complex3.createComplex(0.0, 584.73295405841);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex((-20.0), (-20.0));
      complex1.INF.divide((-20.0));
      Complex complex2 = Complex.valueOf(2.0);
      complex2.ZERO.multiply(Double.NaN);
      complex2.ZERO.readResolve();
      Complex complex3 = complex0.subtract(complex2);
      complex3.INF.nthRoot(5);
      Complex.valueOf(1296.1594564);
      complex2.equals(complex0);
      complex2.I.conjugate();
      complex2.hashCode();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.NaN.tan();
      complex5.ONE.createComplex(0.0, 5);
      complex5.I.getArgument();
      Complex complex6 = complex0.cos();
      complex6.multiply(37);
      Complex complex7 = complex3.asin();
      Complex complex8 = complex0.ZERO.pow((-20.0));
      complex8.ZERO.nthRoot(3091);
      complex2.cosh();
      complex7.sinh();
      complex3.conjugate();
      complex7.hashCode();
      Complex complex9 = complex5.reciprocal();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-1168.9644642));
      Complex complex1 = complex0.tan();
      complex0.ZERO.readResolve();
      complex1.INF.abs();
      Complex complex2 = complex0.NaN.multiply((-348));
      Complex complex3 = complex2.I.cosh();
      complex3.NaN.getArgument();
      complex3.ZERO.divide(2296.8477908389);
      Complex complex4 = complex0.ZERO.tan();
      Complex complex5 = complex1.INF.log();
      Complex complex6 = complex5.I.subtract(complex1);
      Complex complex7 = complex1.createComplex((-1168.9644642), 2.0);
      Complex complex8 = complex4.ZERO.sqrt();
      Complex complex9 = complex7.tanh();
      complex1.I.sin();
      complex9.ONE.toString();
      complex5.toString();
      complex4.sin();
      Complex complex10 = complex8.tan();
      Complex.valueOf((-591.3), (-2713.219));
      complex2.asin();
      Complex complex11 = complex6.multiply(complex7);
      Complex complex12 = complex11.ZERO.cos();
      complex2.cos();
      complex5.INF.tanh();
      complex2.nthRoot(37);
      complex1.sinh();
      complex10.multiply(complex7);
      Object object0 = complex12.readResolve();
      complex7.equals(object0);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-408.84263629), (-408.84263629));
      Complex complex1 = complex0.subtract((-370.96562718));
      complex1.I.acos();
      complex1.INF.sqrt();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      complex2.sinh();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex1.ONE.pow(complex2);
      complex3.getArgument();
      complex3.multiply(0);
      Complex complex4 = complex3.I.multiply(1313);
      complex4.ONE.sin();
      Complex complex5 = complex1.multiply((-606));
      complex5.ZERO.nthRoot(7);
      Complex complex6 = complex1.sqrt1z();
      complex1.getArgument();
      complex6.getReal();
      Complex complex7 = complex1.cos();
      complex1.getImaginary();
      Complex complex8 = complex5.cos();
      complex8.ZERO.toString();
      complex1.isNaN();
      complex8.getField();
      complex5.getImaginary();
      complex0.multiply((-1905.54));
      complex0.abs();
      complex7.createComplex(0.4837033152580261, 0.4837033152580261);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.pow(0.0);
      complex1.INF.sqrt();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex0.sinh();
      complex3.sinh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.divide((-1477.38814));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.I.cosh();
      complex3.I.subtract(complex0);
      Complex complex5 = complex4.I.log();
      Complex complex6 = complex5.ONE.multiply(0.0);
      complex6.INF.toString();
      Complex complex7 = complex5.sin();
      Complex complex8 = complex0.NaN.divide(complex3);
      complex8.INF.add(complex1);
      Complex complex9 = complex0.log();
      complex4.getArgument();
      complex2.toString();
      complex9.sin();
      complex6.exp();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(3414.63439);
      Complex complex1 = complex0.reciprocal();
      complex1.NaN.sin();
      complex1.ONE.readResolve();
      complex0.I.toString();
      try { 
        complex0.nthRoot((-2049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,049
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      double double0 = 1.545909820981726E-8;
      double double1 = (-1274.10398568228);
      Complex complex2 = complex1.ZERO.subtract((-1274.10398568228));
      Complex complex3 = Complex.NaN;
      complex2.divide(complex3);
      Complex complex4 = Complex.valueOf(1.545909820981726E-8, (-1274.10398568228));
      Complex complex5 = complex0.subtract(complex4);
      Complex.valueOf((-1274.10398568228), 1.545909820981726E-8);
      Complex complex6 = complex4.divide(complex5);
      complex6.INF.asin();
      double double2 = 6.283185307179586;
      complex1.pow(6.283185307179586);
      int int0 = 983;
      complex1.ZERO.tanh();
      Complex complex7 = complex4.multiply(983);
      complex7.INF.reciprocal();
      complex7.NaN.sin();
      try { 
        complex5.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.ONE.multiply(0.0);
      Complex complex3 = complex2.multiply((-3007));
      complex3.hashCode();
      complex2.ONE.hashCode();
      Complex complex4 = complex2.INF.sqrt1z();
      complex1.INF.atan();
      Complex complex5 = complex2.reciprocal();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex6 = complex1.subtract(0.0);
      complex6.I.subtract(complex5);
      Complex.valueOf(0.0, 6.283185307179586);
      complex5.multiply(complex0);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.cos();
      Complex complex1 = complex0.INF.add((-1875.06042));
      complex0.toString();
      complex0.isNaN();
      complex1.INF.multiply((-1528.9371244));
      Complex complex2 = Complex.valueOf((-1875.06042), (-1875.06042));
      complex0.pow(complex2);
      complex1.subtract(complex0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.INF.getArgument();
      Complex complex2 = complex0.ZERO.createComplex(0.7853981633974483, (-328.2));
      complex2.INF.sinh();
      Complex complex3 = complex0.INF.multiply(complex1);
      complex0.I.add(complex1);
      Complex complex4 = complex3.NaN.multiply(0.0);
      complex0.getImaginary();
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.acos();
      complex4.NaN.sqrt();
      complex5.INF.pow(0.7853981633974483);
      complex5.tanh();
      complex5.asin();
      complex4.reciprocal();
      complex3.multiply(37);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-509.28093569725));
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.I.sin();
      Complex complex3 = complex0.multiply(0);
      complex1.NaN.multiply(608.142605);
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex1.atan();
      Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.subtract(complex1);
      complex7.createComplex(0, (-5.688830723853217E-8));
      complex4.cosh();
      complex5.add((-509.28093569725));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      complex0.nthRoot(1);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.multiply((double) 1);
      Complex complex3 = complex2.NaN.pow(0.0);
      complex1.ZERO.toString();
      complex2.ONE.toString();
      complex3.ONE.tan();
      Complex complex4 = complex3.I.tanh();
      complex2.ZERO.multiply(1);
      complex2.abs();
      Complex complex5 = complex3.pow(complex0);
      complex3.NaN.multiply(complex0);
      Complex complex6 = complex3.I.atan();
      Complex complex7 = complex6.ZERO.sqrt();
      complex1.asin();
      complex2.multiply(2.0);
      complex1.getImaginary();
      complex5.sin();
      complex5.acos();
      complex2.conjugate();
      complex7.pow(214.0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.ZERO.abs();
      Complex complex2 = complex0.ONE.createComplex(0.0, 0.0);
      complex1.nthRoot(352);
      Complex complex3 = Complex.valueOf((-3260.801776152), 8.6593395455164416E16);
      complex3.I.multiply(complex2);
      complex0.getImaginary();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.75);
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.add(complex0);
      complex3.negate();
      Complex complex4 = complex3.ONE.add(complex1);
      complex4.hashCode();
      Complex complex5 = complex0.multiply(0);
      complex5.INF.cosh();
      complex5.ONE.getField();
      Complex complex6 = complex5.add(1.0);
      complex6.sqrt();
      complex6.NaN.sinh();
      complex6.NaN.atan();
      complex1.hashCode();
      complex1.ONE.getArgument();
      Complex complex7 = complex2.add(complex1);
      complex7.readResolve();
      complex7.I.multiply(complex1);
      complex2.readResolve();
      complex2.add(complex0);
      complex1.I.reciprocal();
      Complex complex8 = complex0.subtract(4450.492410131141);
      complex8.ZERO.subtract((-2955.7324612123243));
      Complex.valueOf(0.0);
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.multiply(1600.58373);
      complex0.NaN.sinh();
      double double0 = (-681.4);
      complex0.NaN.pow((-681.4));
      complex0.hashCode();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-1844.60455037165), (-2464.564));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.INF.sin();
      complex1.NaN.createComplex((-1844.60455037165), 240.57787651001271);
      Complex complex3 = complex0.sin();
      complex3.divide((-3683.5));
      complex3.ONE.multiply(complex2);
      Complex complex4 = complex3.sinh();
      complex4.INF.sqrt1z();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-437.716));
      Complex complex1 = complex0.add((-1882.921089436));
      complex1.INF.toString();
      complex1.getArgument();
      Complex complex2 = complex1.divide(complex0);
      complex1.cosh();
      complex0.getField();
      complex2.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(288.3, (-297.13611));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.INF.divide(288.3);
      Complex complex3 = complex2.NaN.acos();
      complex2.ONE.getField();
      complex0.nthRoot(1);
      Complex complex4 = complex2.INF.sin();
      Complex complex5 = complex0.acos();
      complex1.equals(complex0);
      complex4.ZERO.negate();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex2.multiply(288.3);
      complex5.equals(complex6);
      Complex complex9 = complex4.ONE.reciprocal();
      complex9.I.divide((double) 1);
      complex7.INF.toString();
      Complex complex10 = Complex.valueOf(288.3, (double) 1);
      complex4.cosh();
      complex1.INF.multiply(3834.3653745262022);
      complex8.multiply(complex4);
      complex8.isInfinite();
      complex7.getReal();
      Complex.valueOf(288.3, (-297.13611));
      complex7.divide(0.7615941559557649);
      complex3.tan();
      complex10.getField();
      Complex complex11 = complex8.multiply(1);
      complex11.asin();
      complex8.reciprocal();
      complex4.multiply(2.9495302004590423E-225);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.INF.divide((-1618.4));
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.INF.sqrt1z();
      complex1.readResolve();
      Complex complex5 = complex0.ZERO.divide(complex2);
      complex2.ZERO.subtract((-642.0938));
      complex4.NaN.pow((-1618.4));
      complex4.INF.multiply((-1068));
      complex0.getArgument();
      complex4.sinh();
      Complex complex6 = Complex.ZERO;
      complex5.equals(complex6);
      complex3.divide((-1618.4));
      Complex complex7 = Complex.I;
      complex6.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex((-374.75278), 1.8612397134087598E-8);
      Complex complex1 = complex0.INF.add(0.0);
      complex0.toString();
      Complex complex2 = Complex.valueOf((-374.75278), 1904.7771);
      complex2.ZERO.asin();
      complex0.pow(complex2);
      Complex.valueOf((-374.75278), (-2.9726830960751796E-9));
      Complex complex3 = complex2.multiply(166.3686338731);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.ZERO.createComplex((-3935.113759178), (-374.75278));
      complex5.I.getArgument();
      Complex complex6 = complex1.sin();
      complex6.NaN.sqrt1z();
      complex5.nthRoot(3214);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.subtract(5.280427179595944E-8);
      Complex complex2 = complex0.atan();
      complex2.toString();
      complex2.ONE.getArgument();
      Complex complex3 = complex2.add(complex0);
      complex3.tanh();
      complex2.conjugate();
      Complex complex4 = complex3.ONE.subtract(complex2);
      Complex complex5 = complex4.I.pow(0.0);
      complex2.INF.conjugate();
      Complex complex6 = complex3.NaN.exp();
      complex6.ZERO.log();
      Complex complex7 = complex2.NaN.sinh();
      complex0.readResolve();
      complex3.getArgument();
      complex1.abs();
      complex2.divide(908.6197);
      complex7.isInfinite();
      complex3.asin();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex0.INF.log();
      complex0.isInfinite();
      complex0.toString();
      complex2.NaN.add(complex3);
      complex0.isInfinite();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex2.I.asin();
      complex6.asin();
      complex6.toString();
      complex0.sin();
      complex5.divide(complex1);
      complex1.ONE.log();
      complex5.subtract(4481.45756832133);
      complex4.getField();
      complex0.hashCode();
      complex4.equals(complex2);
      complex3.isNaN();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-2865.672939181), (-1178.821));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      complex0.toString();
      complex1.NaN.divide(Double.POSITIVE_INFINITY);
      complex2.ZERO.sqrt();
      Complex complex3 = complex2.pow(complex0);
      complex3.ZERO.toString();
      Complex complex4 = complex3.add((-2865.672939181));
      complex4.sin();
      Complex complex5 = complex4.negate();
      complex5.negate();
      complex4.createComplex(983.497673753459, (-938.8));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(1.05387548454467E-309, 2.0);
      Complex complex1 = complex0.I.multiply((-2262));
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.pow(complex3);
      complex4.subtract((double) (-2262));
      Complex complex5 = Complex.valueOf(2.0);
      complex5.ZERO.pow(complex2);
      complex3.ZERO.cos();
      Complex complex6 = complex1.tanh();
      complex6.ONE.divide(complex1);
      Complex.valueOf(2.0, 347.245543);
      Complex.valueOf(347.245543);
      complex3.ONE.tanh();
      complex0.hashCode();
      Complex complex7 = complex0.ZERO.reciprocal();
      try { 
        complex7.nthRoot((-2262));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,262
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1575.2);
      Complex complex1 = complex0.divide(1575.2);
      complex0.hashCode();
      Complex complex2 = Complex.valueOf(1575.2);
      complex2.NaN.sqrt();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex0.acos();
      complex2.INF.add(0.0);
      complex4.tan();
      Complex complex5 = complex0.sqrt1z();
      complex3.isNaN();
      Complex complex6 = Complex.valueOf((-157.57));
      complex6.acos();
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      complex1.atan();
      try { 
        complex5.nthRoot((-3185));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,185
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.hashCode();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      complex2.acos();
      Complex complex3 = complex1.createComplex(0.0, 0.0);
      complex2.ZERO.subtract((-595.0));
      complex3.getImaginary();
      complex2.INF.divide(0.0);
      complex2.readResolve();
      complex2.INF.asin();
      try { 
        complex1.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1.0857572226543142E-10));
      Complex.valueOf((-1.0857572226543142E-10));
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(8.954135150208654E-113, 42.698);
      Complex complex2 = complex0.multiply(complex1);
      complex2.INF.pow(complex0);
      Complex complex3 = complex0.INF.multiply(20.0);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex3.ZERO.cosh();
      complex0.ONE.sqrt1z();
      Complex complex6 = complex0.ZERO.cos();
      complex0.isInfinite();
      Complex complex7 = complex0.conjugate();
      complex7.NaN.multiply(7);
      complex6.acos();
      complex1.multiply(2581);
      Complex complex8 = complex5.multiply((double) 7);
      complex8.I.divide(4.2657777816050375E-213);
      complex4.toString();
      Complex.valueOf(42.698);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.INF.divide(572.8);
      complex1.add(827.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.asin();
      complex1.ZERO.sin();
      complex0.abs();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.add(complex2);
      complex3.ONE.atan();
      complex3.INF.acos();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.NaN.getField();
      complex0.ONE.multiply(623);
      Complex complex3 = complex0.add((-2803.54469587495));
      complex0.negate();
      Complex complex4 = complex3.createComplex((-2803.54469587495), (-2803.54469587495));
      Complex.valueOf((double) 623);
      complex3.add((double) 623);
      Complex complex5 = complex0.add(complex4);
      complex5.ONE.add(complex0);
      complex0.negate();
      complex2.getReal();
      complex1.createComplex(Double.NaN, 623);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.negate();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex2.I.acos();
      complex0.getReal();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.divide(2552.6862453927242);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex2.ONE.cosh();
      complex2.abs();
      Complex complex6 = complex3.INF.add(complex0);
      complex6.NaN.getField();
      Complex complex7 = complex2.multiply((-1825));
      complex7.ZERO.sinh();
      Complex complex8 = Complex.valueOf((double) (-1825));
      Complex complex9 = complex7.NaN.asin();
      Complex complex10 = complex9.ONE.divide((-1588.576916792771));
      complex4.isInfinite();
      complex3.getField();
      complex3.toString();
      Complex.valueOf((double) (-1825), 4.2046187038837375E-8);
      complex8.isInfinite();
      complex9.I.divide((-2452.2462871272));
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      complex2.tan();
      Complex.valueOf(0.5849615335464478, 681.28623767984);
      complex9.isNaN();
      complex3.pow(0.0);
      Complex complex11 = Complex.valueOf(0.5849615335464478);
      complex11.ZERO.acos();
      complex1.subtract(complex5);
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.negate();
      complex2.NaN.readResolve();
      Complex complex3 = complex2.ONE.atan();
      complex2.ZERO.negate();
      Complex complex4 = complex3.negate();
      complex2.getImaginary();
      Complex complex5 = complex1.multiply(Double.NEGATIVE_INFINITY);
      complex5.ZERO.getArgument();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.INF.negate();
      Complex complex8 = complex3.exp();
      Complex complex9 = complex0.atan();
      Complex complex10 = complex9.ONE.tanh();
      assertEquals(0.7615941559557649, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex0.exp();
      Complex complex12 = complex11.sqrt1z();
      complex12.INF.readResolve();
      Complex complex13 = complex1.reciprocal();
      Complex complex14 = complex1.asin();
      Complex complex15 = complex14.reciprocal();
      Complex complex16 = complex12.add(complex1);
      Complex complex17 = complex7.pow(complex3);
      assertTrue(complex17.equals((Object)complex9));
      
      complex8.getField();
      Complex complex18 = complex5.divide(0.0);
      assertSame(complex18, complex15);
      assertNotSame(complex18, complex17);
      assertFalse(complex18.equals((Object)complex13));
      assertSame(complex18, complex16);
      
      Complex complex19 = complex4.exp();
      assertEquals(-0.0, complex19.getImaginary(), 0.01);
      assertEquals(0.45593812776599624, complex19.getReal(), 0.01);
      assertSame(complex0, complex5);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1817.249064596475, (-23.541));
      complex0.INF.nthRoot(2680);
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.I.multiply(2680);
      complex3.multiply(complex2);
      complex3.ZERO.multiply(1);
      Complex complex4 = complex0.multiply((-3084));
      complex4.I.add(complex2);
      Complex complex5 = complex2.conjugate();
      complex5.ONE.getArgument();
      Complex complex6 = complex1.multiply(1);
      complex6.getArgument();
      try { 
        complex6.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
