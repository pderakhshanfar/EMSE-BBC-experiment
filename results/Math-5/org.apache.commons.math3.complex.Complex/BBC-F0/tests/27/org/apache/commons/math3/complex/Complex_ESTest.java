/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:50:09 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(1235.6542651133827, 1235.6542651133827);
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex4.multiply(complex2);
      complex1.nthRoot(1);
      complex1.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      complex5.add(260100.0);
      complex6.sqrt();
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex((-2570.1053765440442), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      complex1.multiply((-1.2351697477129173E-65));
      complex0.getReal();
      Complex complex2 = new Complex((-20.0));
      complex2.tanh();
      Complex complex3 = complex1.sin();
      complex3.subtract((-1.2351697477129173E-65));
      Complex complex4 = Complex.valueOf((-1.2351697477129173E-65), (-20.0));
      complex4.asin();
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.valueOf((-2570.1053765440442));
      complex6.sin();
      complex5.nthRoot(226);
      // Undeclared exception!
      complex2.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1751.323673), Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(3.1310781947124404, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.I;
      complex1.nthRoot(106);
      Complex complex3 = complex1.log();
      complex3.cosh();
      Complex complex4 = complex0.log();
      complex2.asin();
      complex1.multiply((-145));
      complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf((-1270.312199366175), (-20.0));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.multiply(17);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex5.pow(complex4);
      Complex complex8 = complex2.negate();
      complex8.multiply(913);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex6.multiply(37);
      complex10.acos();
      complex2.tan();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2.667695552814763E162);
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf((double) 3801);
      complex3.multiply(complex2);
      complex1.acos();
      complex3.cosh();
      Complex complex4 = Complex.valueOf(2.667695552814763E162);
      complex4.log();
      complex3.getReal();
      Complex complex5 = Complex.ZERO;
      complex5.asin();
      complex1.conjugate();
      complex0.add(complex5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-2570.1053765440442), (-2570.1053765440442));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex0.I.negate();
      complex3.INF.subtract(complex1);
      complex2.atan();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-2558.480992193039), (-1.2351697477129173E-65));
      complex0.multiply(Double.NaN);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-542.42), (-542.42));
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.valueOf((-542.42));
      Complex complex3 = complex1.I.reciprocal();
      complex3.NaN.tanh();
      complex0.NaN.toString();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.INF.add(complex1);
      Complex complex6 = complex5.ZERO.subtract(complex3);
      Complex complex7 = complex5.ONE.divide((-542.42));
      Complex complex8 = complex3.NaN.subtract(complex1);
      complex2.ONE.acos();
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex0.multiply(1257966796);
      complex10.ONE.abs();
      Complex complex11 = complex8.NaN.cosh();
      complex11.I.tanh();
      complex3.getField();
      Complex complex12 = complex10.acos();
      Complex.valueOf((double) 1257966796);
      complex0.reciprocal();
      complex9.add(complex2);
      complex8.cosh();
      Complex complex13 = complex6.multiply(1257966796);
      complex9.multiply(complex7);
      complex12.pow((double) 1257966796);
      complex6.pow((-542.42));
      complex3.sqrt();
      complex13.multiply(complex10);
      complex3.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.getReal();
      Complex complex2 = Complex.valueOf(6.651345415954053E211, (-1899.9386855));
      complex2.asin();
      Complex complex3 = Complex.ONE;
      try { 
        complex2.nthRoot((-195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -195
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2895.545);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.log();
      complex1.divide(complex0);
      complex1.toString();
      Complex complex4 = complex2.multiply(complex0);
      complex2.getReal();
      Complex complex5 = complex3.tanh();
      complex5.sin();
      complex2.negate();
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = new Complex(2895.545, Double.NaN);
      complex7.nthRoot(406);
      complex4.log();
      Complex complex8 = complex2.multiply(complex4);
      complex6.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.I.log();
      complex1.NaN.divide(complex0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.subtract(510.0);
      Complex complex6 = complex3.negate();
      complex5.sqrt();
      Complex complex7 = new Complex(3582.5890657589, 20.0);
      complex7.tan();
      complex5.divide(733.06);
      Complex complex8 = complex1.divide(complex5);
      complex8.reciprocal();
      complex2.tan();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-2.2610609958205195E-8));
      complex0.NaN.cosh();
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.cos();
      complex2.ZERO.getField();
      complex0.getField();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(510.0, (-1060.1260026048));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.divide(complex0);
      complex0.log();
      Complex complex4 = complex1.multiply(complex0);
      complex3.getReal();
      Complex complex5 = complex3.INF.subtract(0.2954642176628113);
      complex5.NaN.tan();
      complex4.asin();
      Complex complex6 = Complex.valueOf((-1.4984565794578453E215), (-2178.04));
      complex6.negate();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.divide(complex2);
      complex2.sqrt();
      Complex complex4 = new Complex(3354.324817);
      complex4.tan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.divide((-4431.004));
      complex4.divide(complex6);
      complex5.reciprocal();
      complex3.tan();
      Complex complex7 = new Complex(510.0, 3343.26421);
      complex1.divide(complex5);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1318.449483065, 1318.449483065);
      Complex complex2 = Complex.I;
      complex1.sin();
      Complex complex3 = Complex.valueOf(1318.449483065, 1318.449483065);
      complex3.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.exp();
      complex2.subtract(1318.449483065);
      complex5.negate();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex2.tan();
      complex1.divide(6.283185307179586);
      complex1.divide(complex4);
      Complex complex8 = new Complex(1.0047353208353007E153);
      Complex complex9 = complex8.reciprocal();
      complex9.tan();
      Complex complex10 = new Complex(1318.449483065, Double.POSITIVE_INFINITY);
      complex7.divide(complex8);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.readResolve();
      Complex complex1 = complex0.multiply(3821);
      Complex complex2 = complex1.divide((-382.0));
      complex0.tan();
      Complex complex3 = new Complex(254.95549961801);
      Complex complex4 = complex3.createComplex(Double.NaN, 254.95549961801);
      Complex complex5 = complex1.multiply(3821);
      complex4.asin();
      complex5.readResolve();
      complex1.divide(6.1633417615076335E35);
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.createComplex((-4.5810381714280557E-10), (-2963.6755566542));
      Complex complex3 = new Complex((-4.5810381714280557E-10));
      complex3.divide(complex2);
      Complex complex4 = Complex.INF;
      complex4.reciprocal();
      complex2.tan();
      Complex complex5 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(510.0);
      Complex complex3 = complex2.tan();
      complex3.I.atan();
      complex2.hashCode();
      complex2.getField();
      complex1.sinh();
      Complex complex4 = (Complex)complex1.readResolve();
      complex1.getField();
      Complex complex5 = Complex.INF;
      complex2.subtract(Double.NaN);
      Complex.valueOf(Double.NaN);
      complex4.multiply(1449.5083615041422);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex4.I.multiply((-2564.1520602845903));
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex6.ZERO.subtract((-1.2531793589140273E-8));
      Complex complex8 = complex6.I.negate();
      Complex complex9 = complex3.pow(complex0);
      complex4.sqrt();
      Complex complex10 = complex4.tan();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex5.divide(complex4);
      complex10.reciprocal();
      Complex complex11 = new Complex((-895.7483001212927));
      Object object0 = complex8.readResolve();
      complex9.equals(object0);
      complex2.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.I.reciprocal();
      complex4.I.multiply((-2564.1520602845903));
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex2.asin();
      Complex complex7 = Complex.NaN;
      complex7.tanh();
      Complex complex8 = complex1.tanh();
      complex3.sin();
      complex5.nthRoot(1);
      complex8.readResolve();
      complex4.readResolve();
      Object object0 = complex6.readResolve();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide(complex1);
      complex0.divide(complex2);
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.multiply(complex1);
      complex4.getReal();
      complex1.asin();
      complex2.tanh();
      complex0.nthRoot(1);
      complex0.readResolve();
      complex3.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.multiply(510.0);
      Complex complex3 = complex2.tan();
      complex2.hashCode();
      complex3.add(0.12728634476661682);
      complex2.getField();
      complex1.readResolve();
      complex2.cosh();
      complex2.getField();
      complex2.sinh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.subtract(3942.78);
      Complex complex6 = Complex.valueOf(0.12728634476661682);
      complex6.nthRoot(1);
      complex5.multiply(3942.78);
      complex4.add(0.12728634476661682);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex4.I.multiply((-2564.1520602845903));
      Complex complex6 = complex4.I.exp();
      complex6.ZERO.subtract((-1.2531793589140273E-8));
      complex6.I.negate();
      complex3.pow(complex0);
      complex4.sqrt();
      Complex complex7 = complex4.tan();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex5.divide(complex4);
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex8.tan();
      Complex complex10 = Complex.INF;
      complex9.divide(complex10);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1117.4950414724533);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.ONE.createComplex(1117.4950414724533, 1117.4950414724533);
      Complex complex5 = complex0.multiply(6.0370682395944045E-9);
      complex2.multiply(2147048052);
      complex5.atan();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.subtract(complex2);
      complex3.hashCode();
      complex0.sin();
      complex4.pow(1117.4950414724533);
      Complex complex8 = complex1.subtract((-1456.3123284467));
      complex2.sqrt1z();
      Complex complex9 = complex7.multiply((-1483));
      Complex.valueOf(0.9092974268256818, (-332.935445285485));
      complex6.readResolve();
      complex9.abs();
      Complex complex10 = Complex.valueOf((-124475.76873056193), 1117.4950414724533);
      complex10.negate();
      Complex complex11 = Complex.INF;
      complex11.log();
      complex8.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(2895.545);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.log();
      complex1.divide(complex0);
      complex1.toString();
      complex0.log();
      Complex complex4 = complex2.multiply(complex0);
      complex2.getReal();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex6.sin();
      complex5.nthRoot(1);
      complex4.readResolve();
      Complex complex8 = complex3.ONE.reciprocal();
      complex6.NaN.sqrt1z();
      complex8.I.add(Double.NaN);
      complex5.conjugate();
      complex7.equals((Object) null);
      complex2.readResolve();
      Complex complex9 = new Complex(Double.NaN);
      complex5.equals(complex9);
      complex5.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex0 = Complex.I;
      complex0.sin();
      complex0.hashCode();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      Complex complex3 = null;
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.multiply(689);
      complex1.I.log();
      complex0.INF.abs();
      Complex complex2 = complex1.INF.conjugate();
      complex0.INF.multiply(complex2);
      Complex complex3 = complex1.multiply(893);
      Complex complex4 = complex3.INF.divide((-524.32085758));
      Complex complex5 = complex0.INF.add((-524.32085758));
      complex2.INF.divide(Double.POSITIVE_INFINITY);
      complex2.INF.sqrt();
      complex0.NaN.getArgument();
      complex1.ONE.multiply((-524.32085758));
      Complex complex6 = complex1.pow((-1419.081000645319));
      Complex complex7 = complex1.sqrt();
      complex7.INF.cosh();
      complex2.ZERO.getField();
      Complex complex8 = complex7.I.divide(complex0);
      complex8.pow(complex5);
      complex2.createComplex(1.0, (-1419.081000645319));
      complex6.ONE.pow(complex2);
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex9 = complex0.add((-524.32085758));
      complex9.ZERO.atan();
      complex9.ONE.toString();
      complex9.asin();
      complex4.log();
      complex1.getField();
      complex0.asin();
      complex0.getField();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.9999936902545982);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.sin();
      complex0.hashCode();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.multiply(complex3);
      complex0.reciprocal();
      Complex complex5 = Complex.valueOf((-2564.1520602845903));
      Complex complex6 = complex5.multiply(1.4515729618649334E-65);
      complex6.exp();
      Complex complex7 = complex1.subtract(3170.5817053911);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex3.pow(complex7);
      Complex complex10 = new Complex((-2493.4627749772));
      complex7.subtract(complex4);
      Complex complex11 = complex8.sqrt();
      complex3.getField();
      Complex complex12 = complex5.divide(Double.NaN);
      Complex complex13 = new Complex((-2493.4627749772), (-1.0));
      complex4.toString();
      complex11.getField();
      Complex.valueOf(Double.NaN, 0.0);
      complex2.getImaginary();
      Complex complex14 = complex6.pow(complex9);
      complex14.subtract(complex8);
      complex3.multiply((-1.0));
      complex12.createComplex(0.0, (-20.0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.pow(Double.NaN);
      complex0.INF.getArgument();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.INF.multiply((-4546));
      complex4.atan();
      complex3.subtract(complex0);
      complex1.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.ZERO.pow((-1527.0517));
      Complex complex7 = complex5.subtract(3866.72);
      Complex complex8 = complex2.sqrt1z();
      complex3.readResolve();
      Complex complex9 = Complex.I;
      complex8.equals(complex9);
      complex7.readResolve();
      Object object0 = complex4.readResolve();
      complex6.equals(object0);
      Complex.valueOf(0.7853981633974483, (-1527.0517));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.9999936902545982, 1.0);
      Complex complex1 = Complex.I;
      complex1.sin();
      complex0.hashCode();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.multiply((-1.2351697477129173E-65));
      complex3.exp();
      Complex complex6 = complex4.subtract(3170.5817053911);
      complex4.negate();
      complex0.pow(complex5);
      Complex complex7 = new Complex(3170.5817053911);
      complex3.subtract(complex7);
      complex4.sqrt();
      // Undeclared exception!
      complex6.nthRoot(2145982444);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.divide(complex0);
      complex4.toString();
      Complex complex5 = complex0.log();
      Complex complex6 = complex3.multiply(complex2);
      complex1.getReal();
      Complex complex7 = complex5.asin();
      complex1.tanh();
      Complex complex8 = complex6.sin();
      complex5.nthRoot(1482);
      complex4.readResolve();
      complex8.equals(complex4);
      complex7.readResolve();
      Complex complex9 = Complex.I;
      complex8.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7879230976104736);
      complex0.NaN.readResolve();
      complex0.I.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cosh();
      Complex.valueOf(1.633308028614055E81);
      Complex complex3 = Complex.valueOf(1.633308028614055E81, 1.7879230976104736);
      Complex complex4 = complex3.INF.sinh();
      complex2.ZERO.subtract(1.7879230976104736);
      complex0.divide(complex1);
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.I.subtract((-3289.477));
      complex6.NaN.abs();
      Complex complex8 = new Complex(1765.1107136491, 1.633308028614055E81);
      complex8.toString();
      complex7.getField();
      Complex complex9 = Complex.valueOf(1.633308028614055E81, 1.7879230976104736);
      complex9.subtract((-3289.477));
      complex5.hashCode();
      complex2.conjugate();
      complex5.tanh();
      complex9.getField();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.I.reciprocal();
      complex4.I.multiply((-2564.1520602845903));
      Complex complex5 = complex4.I.exp();
      Complex complex6 = complex5.ZERO.subtract((-1.2531793589140273E-8));
      Complex complex7 = complex5.I.negate();
      complex3.pow(complex0);
      Complex complex8 = complex4.sqrt();
      complex4.tan();
      Complex complex9 = complex3.divide(Double.POSITIVE_INFINITY);
      complex9.toString();
      complex2.getField();
      Complex complex10 = complex8.subtract((-2564.1520602845903));
      complex7.hashCode();
      complex6.conjugate();
      complex10.tanh();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.subtract(complex0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.createComplex((-5.042005018212734E-227), 6.0370682395944045E-9);
      complex1.multiply(3116.744115);
      Complex complex5 = complex0.exp();
      Complex complex6 = complex1.subtract(3116.744115);
      Complex complex7 = complex2.negate();
      Complex complex8 = complex1.pow(complex4);
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.subtract(complex2);
      complex7.sqrt();
      Complex complex11 = new Complex(3116.744115);
      Complex complex12 = complex11.multiply(complex7);
      complex6.getField();
      Complex complex13 = complex10.divide(Double.NaN);
      complex3.toString();
      complex5.getField();
      complex11.cosh();
      Complex.valueOf(2294.36039, 2294.36039);
      complex13.getImaginary();
      Complex complex14 = Complex.ZERO;
      complex12.pow(complex14);
      Complex complex15 = Complex.NaN;
      complex15.subtract(complex8);
      complex14.multiply(2604.642701);
      complex8.createComplex(6.0370682395944045E-9, (-333.8821907304436));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      complex0.multiply(complex1);
      Complex complex3 = complex2.I.reciprocal();
      complex3.I.multiply((-2564.1520602845903));
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex4.ZERO.subtract((-1.2531793589140273E-8));
      Complex complex6 = complex4.I.negate();
      complex2.sin();
      Complex complex7 = complex2.pow((-1.2351697477129173E-65));
      complex5.subtract((-3872.1602));
      complex7.sqrt1z();
      complex7.multiply((-2442));
      Complex complex8 = Complex.valueOf(260100.0, (-3693.11424188556));
      complex3.abs();
      complex6.negate();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.nthRoot(244);
      Complex complex1 = complex0.INF.tanh();
      complex0.NaN.subtract(4.7640323331013947E-101);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.add((-4.048086182363988E115));
      complex2.NaN.divide(complex3);
      complex0.readResolve();
      complex2.toString();
      Complex complex4 = complex2.reciprocal();
      complex0.multiply(complex1);
      complex4.ZERO.multiply(1133);
      complex3.pow(complex2);
      complex4.add((-4.048086182363988E115));
      Complex.valueOf(3.3565057475434694E-275);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      complex1.ZERO.asin();
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.I.atan();
      complex2.NaN.nthRoot(893);
      complex2.INF.negate();
      complex0.INF.abs();
      Complex complex3 = complex0.divide(156.481713773);
      complex0.exp();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.conjugate();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.I.log();
      Complex complex3 = complex1.NaN.divide(complex0);
      Complex complex4 = complex1.log();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex4.sqrt();
      complex4.getField();
      Complex complex7 = complex6.divide(510.0);
      complex5.toString();
      complex4.getField();
      Complex.valueOf(1.3287778803035383E-8, 1770.0);
      complex2.getImaginary();
      complex0.pow(complex1);
      complex7.subtract(complex4);
      complex1.multiply(1770.0);
      complex3.createComplex(2294.36039, 510.0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex1.subtract((-498.156084299632));
      complex3.add(complex4);
      complex1.toString();
      Complex.valueOf((-1.2351697477129173E-65), (-1.2351697477129173E-65));
      complex3.hashCode();
      complex0.reciprocal();
      complex4.subtract(2.0);
      complex3.add(complex0);
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.valueOf(2.0);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex4.asin();
      complex3.pow(complex7);
      complex1.subtract(2055.257490337093);
      Complex complex9 = Complex.NaN;
      complex2.subtract(complex5);
      complex1.getArgument();
      Complex.valueOf((-1636.13));
      complex3.reciprocal();
      complex2.cos();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1602.3879312948818), (-1602.3879312948818));
      complex0.I.getField();
      Complex complex1 = Complex.valueOf((-1.9589778310104216E-74));
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.log();
      complex3.getArgument();
      Complex complex4 = complex0.ONE.sqrt1z();
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex4.INF.acos();
      complex0.nthRoot(2565);
      Complex complex7 = complex1.sqrt();
      complex0.getImaginary();
      Complex complex8 = Complex.ZERO;
      complex8.pow(complex0);
      complex2.subtract(complex6);
      complex5.multiply((double) 2565);
      complex3.createComplex(1.4843880190404468E62, (-1602.3879312948818));
      complex0.add(complex7);
      complex8.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.I.reciprocal();
      Complex complex5 = complex4.I.multiply((-2564.1520602845903));
      Complex complex6 = complex4.I.exp();
      complex6.ZERO.subtract((-1.2531793589140273E-8));
      complex6.I.negate();
      Complex complex7 = complex3.pow(complex0);
      Complex complex8 = complex7.ONE.subtract(complex2);
      complex8.sqrt();
      complex2.getField();
      Complex complex9 = complex3.divide(Double.POSITIVE_INFINITY);
      complex9.toString();
      complex8.getField();
      Complex.valueOf((-1.0), 2294.36039);
      complex5.readResolve();
      complex3.conjugate();
      Complex complex10 = complex2.atan();
      Object object0 = new Object();
      complex10.equals(object0);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.I.log();
      Complex complex3 = complex1.NaN.divide(complex0);
      complex2.NaN.toString();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.INF.multiply(complex1);
      complex1.getReal();
      complex3.asin();
      complex4.tanh();
      Complex complex6 = complex0.sin();
      complex3.nthRoot(1);
      Object object0 = complex6.readResolve();
      complex2.equals(object0);
      Object object1 = complex1.readResolve();
      complex5.equals(object1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.pow(Double.NaN);
      complex0.INF.getArgument();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.INF.multiply((-4546));
      complex4.atan();
      Complex complex5 = complex3.subtract(complex0);
      complex1.hashCode();
      Complex complex6 = complex5.sin();
      complex6.ZERO.pow((-1527.0517));
      Complex complex7 = complex6.subtract(3866.72);
      complex2.sqrt1z();
      complex1.multiply(225);
      Complex.valueOf((-20.0), 1078.09294);
      complex1.abs();
      Complex complex8 = new Complex(Double.NaN, (-714.955));
      complex8.negate();
      complex6.exp();
      complex8.readResolve();
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.I.exp();
      Complex.valueOf(470.2268854251);
      complex3.sqrt();
      Complex complex4 = complex1.log();
      complex4.getArgument();
      Complex complex5 = complex3.sqrt1z();
      complex3.subtract(complex5);
      complex1.acos();
      try { 
        complex1.nthRoot((-14));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -14
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1117.4950414724533);
      Complex complex2 = complex0.multiply(complex1);
      complex2.reciprocal();
      complex2.ONE.createComplex(1117.4950414724533, 1117.4950414724533);
      Complex complex3 = complex0.multiply(6.0370682395944045E-9);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex3.subtract(6.0370682395944045E-9);
      Complex complex6 = complex1.negate();
      Complex complex7 = complex3.pow(complex5);
      Complex complex8 = complex5.subtract(complex2);
      complex6.sqrt();
      complex4.I.multiply(complex0);
      complex0.getField();
      Complex complex9 = complex1.divide((-1099.4323986160273));
      complex9.toString();
      complex3.getField();
      complex8.NaN.cosh();
      Complex.valueOf(1117.4950414724533, 2294.36039);
      complex6.getImaginary();
      complex8.pow(complex2);
      complex4.subtract(complex6);
      complex8.multiply(1.70164513845372E-8);
      complex7.createComplex(2294.36039, 919.1653833058529);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.I.reciprocal();
      complex4.I.multiply((-2564.1520602845903));
      Complex complex5 = complex4.I.exp();
      complex5.ZERO.subtract((-1.2531793589140273E-8));
      complex5.I.negate();
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex6.ONE.subtract(complex2);
      Complex complex8 = complex7.sqrt();
      complex2.getField();
      Complex complex9 = complex3.divide(Double.POSITIVE_INFINITY);
      complex9.toString();
      complex7.getField();
      complex8.tan();
      complex7.divide(complex8);
      complex7.readResolve();
      Complex complex10 = Complex.INF;
      complex10.sin();
      complex6.conjugate();
      complex2.multiply((-1909));
      complex0.createComplex(2294.36039, Double.POSITIVE_INFINITY);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = Complex.NaN;
      complex4.ZERO.getArgument();
      complex0.INF.getArgument();
      complex3.ZERO.nthRoot(864);
      Complex complex5 = complex0.INF.exp();
      Complex complex6 = complex5.tan();
      complex6.NaN.getField();
      Complex complex7 = complex0.NaN.acos();
      complex7.add(1.95729620992E11);
      complex2.NaN.asin();
      Complex complex8 = complex6.ZERO.add(1.95729620992E11);
      Complex complex9 = complex0.multiply(0.0);
      complex9.getField();
      complex0.getReal();
      complex8.NaN.multiply(864);
      complex9.toString();
      complex8.ZERO.tan();
      complex5.nthRoot(1);
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex10.NaN.divide(complex2);
      complex2.toString();
      Complex.valueOf(0.7853981633974483, (double) 1);
      complex2.getImaginary();
      Complex complex12 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex13 = Complex.ONE;
      complex13.subtract(complex11);
      complex9.multiply((-1.0));
      complex2.createComplex(1.95729620992E11, (-1.9589778310104216E-74));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7879230976104736);
      complex0.readResolve();
      complex0.getField();
      complex0.cosh();
      Complex complex1 = Complex.valueOf(1.7879230976104736);
      Complex complex2 = Complex.valueOf(111.98361909, 1.7879230976104736);
      complex2.sinh();
      Complex complex3 = new Complex((-1682.1039909410367), (-1682.1039909410367));
      Complex complex4 = complex3.subtract((-1172.7002330987614));
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex5.multiply(complex2);
      complex0.sin();
      Complex complex7 = complex6.subtract((-1682.1039909410367));
      complex1.tanh();
      complex7.hashCode();
      complex0.conjugate();
      complex3.tanh();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7879230976104736);
      complex0.readResolve();
      complex0.getField();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      complex2.cosh();
      Complex.valueOf(1.7879230976104736);
      Complex complex3 = Complex.valueOf((-1804.5057503), 1.633308028614055E81);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.subtract((-1884.6970764478403));
      complex3.divide(complex0);
      complex2.multiply(complex5);
      complex2.sin();
      complex4.subtract((-1884.6970764478403));
      Complex complex6 = complex2.tanh();
      complex6.hashCode();
      Complex complex7 = Complex.ONE;
      complex7.conjugate();
      complex7.tanh();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(619.08926403, 619.08926403);
      Complex complex1 = new Complex(619.08926403);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex1.reciprocal();
      complex2.ZERO.hashCode();
      Complex complex4 = complex0.ZERO.add(complex1);
      Complex complex5 = complex4.ZERO.subtract((-672.10766147));
      complex4.ONE.add(complex0);
      complex0.INF.toString();
      Complex complex6 = complex0.exp();
      complex6.hashCode();
      complex0.I.reciprocal();
      Complex complex7 = complex0.subtract((-2130.51076455));
      complex7.NaN.add(complex3);
      complex6.INF.sinh();
      Complex complex8 = complex7.tan();
      Complex complex9 = complex8.add(2055.257490337093);
      complex9.NaN.asin();
      Complex complex10 = complex0.pow(complex6);
      Complex complex11 = complex10.NaN.subtract(2055.257490337093);
      Complex complex12 = Complex.NaN;
      complex11.I.subtract(complex12);
      complex10.getArgument();
      Complex.valueOf((-1.0));
      complex5.reciprocal();
      complex2.cos();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      complex0.isNaN();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex3.INF.subtract(complex0);
      complex1.readResolve();
      Complex complex4 = complex0.subtract(complex2);
      complex4.I.add(complex1);
      Complex complex5 = complex4.ZERO.pow((-2558.904800707069));
      complex5.ONE.getField();
      complex2.ZERO.abs();
      complex5.ONE.abs();
      complex2.hashCode();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex4.negate();
      complex1.equals(complex2);
      Complex complex8 = complex4.atan();
      complex0.divide(1.0);
      Complex complex9 = complex7.I.conjugate();
      complex9.ZERO.divide(1.1828997135162354);
      Complex complex10 = complex3.subtract(complex6);
      complex2.add(complex8);
      complex7.isNaN();
      complex10.I.toString();
      complex7.toString();
      complex10.isNaN();
      Complex complex11 = complex8.sqrt();
      complex11.log();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.5947071313858032);
      Complex complex1 = complex0.add(918.570676174467);
      Complex complex2 = complex1.ONE.asin();
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.divide(complex1);
      complex3.ONE.subtract(complex2);
      complex3.toString();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-136.0));
      complex0.getReal();
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ZERO;
      complex1.INF.pow((-136.0));
      complex0.add((-289.797571));
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.I.sqrt();
      Complex complex6 = complex1.multiply(2561.6978111141);
      Complex complex7 = complex6.INF.exp();
      complex7.ZERO.sqrt();
      complex6.sqrt();
      Complex complex8 = Complex.valueOf(2561.6978111141, (-289.797571));
      complex8.getField();
      Complex complex9 = complex4.tan();
      complex5.getReal();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.pow(complex0);
      int int0 = 1548;
      complex1.INF.nthRoot(1548);
      complex0.readResolve();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex1.toString();
      complex0.isNaN();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex3.INF.sin();
      complex4.INF.createComplex((-1.0), 0.0);
      Complex complex5 = complex2.subtract((-57.20832613646));
      complex5.NaN.asin();
      complex0.hashCode();
      Complex complex6 = complex0.ZERO.atan();
      Complex complex7 = complex6.INF.cos();
      complex7.hashCode();
      complex6.asin();
      Complex complex8 = complex2.tan();
      complex0.ZERO.add((-1632.0466218752));
      complex1.tanh();
      complex0.getArgument();
      complex2.getReal();
      Complex complex9 = complex2.I.sqrt();
      complex9.INF.readResolve();
      complex8.toString();
      Complex.valueOf(1190.56012420737, Double.NaN);
      complex0.sin();
      Complex complex10 = complex5.sin();
      complex10.INF.add(0.0);
      complex5.hashCode();
      complex1.add(complex0);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.asin();
      complex1.atan();
      Complex complex2 = complex1.pow(0.0);
      complex2.ZERO.abs();
      complex1.INF.sqrt1z();
      complex0.isNaN();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.multiply(0);
      complex1.multiply((-2036.39));
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.ONE.getField();
      complex0.ZERO.atan();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.add(complex0);
      complex3.I.reciprocal();
      complex3.ONE.atan();
      complex4.NaN.add(complex0);
      Complex complex5 = complex4.ONE.conjugate();
      complex5.ZERO.atan();
      Complex complex6 = Complex.valueOf((-1591.638), (-6.0370682395944045E-9));
      Complex complex7 = complex3.ZERO.acos();
      complex7.ONE.cos();
      complex6.exp();
      Complex complex8 = complex3.atan();
      complex2.acos();
      complex3.divide(complex8);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.INF.sin();
      complex4.ZERO.getArgument();
      complex0.INF.getArgument();
      complex3.ZERO.nthRoot(864);
      Complex complex5 = complex0.INF.exp();
      Complex complex6 = complex5.tan();
      complex6.NaN.getField();
      Complex complex7 = complex0.NaN.acos();
      complex7.add(1.95729620992E11);
      complex2.NaN.asin();
      Complex complex8 = complex6.ZERO.add(1.95729620992E11);
      Complex complex9 = complex0.multiply(0.0);
      complex9.getField();
      complex0.getReal();
      Complex complex10 = complex8.NaN.multiply(864);
      complex9.toString();
      complex8.ZERO.tan();
      complex5.nthRoot(1);
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = complex11.NaN.divide(complex2);
      complex2.toString();
      Complex complex13 = complex8.tan();
      complex12.divide(complex13);
      complex0.readResolve();
      complex10.sin();
      complex13.conjugate();
      complex6.multiply((-1909));
      complex10.createComplex(598.53243978, (-4332.8));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2400.7), (-2400.7));
      complex0.NaN.toString();
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.ZERO.sin();
      complex3.ZERO.toString();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.valueOf((-903.106184));
      complex4.ONE.getArgument();
      Complex complex6 = complex4.tan();
      complex6.ZERO.sinh();
      complex6.INF.readResolve();
      Complex complex7 = complex1.INF.subtract(complex2);
      complex7.sinh();
      complex6.INF.negate();
      complex0.equals(complex4);
      Complex complex8 = complex4.cos();
      complex8.readResolve();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex2.ONE.multiply((-2400.7));
      Complex complex11 = complex2.exp();
      complex9.isInfinite();
      Complex complex12 = complex11.exp();
      Complex complex13 = complex12.INF.add(complex0);
      complex9.negate();
      complex2.equals("(NaN, NaN)");
      complex5.hashCode();
      complex3.conjugate();
      complex10.isInfinite();
      complex3.tan();
      complex12.INF.log();
      complex6.cos();
      complex13.getImaginary();
      complex9.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      complex0.I.abs();
      complex0.toString();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.atan();
      complex1.hashCode();
      complex2.getImaginary();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-2564.1520602845903), (-1.2351697477129173E-65));
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.sin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex2.I.reciprocal();
      complex4.I.multiply((-2564.1520602845903));
      Complex complex5 = complex4.I.exp();
      complex5.ZERO.subtract((-1.2531793589140273E-8));
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex3.pow(complex0);
      Complex complex8 = complex7.ONE.subtract(complex2);
      Complex complex9 = complex8.sqrt();
      complex2.getField();
      Complex complex10 = complex3.divide(Double.POSITIVE_INFINITY);
      complex10.toString();
      complex8.getField();
      Complex.valueOf((-1.0), 2294.36039);
      complex10.getImaginary();
      complex9.pow(complex0);
      complex6.subtract(complex3);
      complex10.multiply(Double.POSITIVE_INFINITY);
      complex2.createComplex(0.0, (-2564.1520602845903));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.ONE.subtract(complex1);
      Complex complex5 = complex0.sinh();
      complex5.INF.reciprocal();
      complex2.I.sqrt1z();
      complex3.equals("(");
      Complex complex6 = complex3.INF.subtract(complex0);
      complex1.pow(0.0);
      complex2.nthRoot(935);
      complex3.multiply(438);
      complex0.add(0.0);
      complex4.readResolve();
      complex4.getImaginary();
      complex6.toString();
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3322.7433, 5208.770437);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.INF.reciprocal();
      Complex.valueOf((-1460.52255897));
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex3.NaN.createComplex(720.66676595, 5208.770437);
      complex0.getReal();
      complex0.readResolve();
      Complex complex7 = complex2.cos();
      complex7.ZERO.hashCode();
      Complex complex8 = complex5.add(6.283185307179586);
      Complex complex9 = complex4.multiply((-3702));
      complex9.INF.pow(complex6);
      complex9.NaN.sin();
      complex0.add(complex9);
      complex1.multiply(43);
      complex8.isInfinite();
      Complex complex10 = Complex.valueOf(3.5127708120698784E48);
      Complex.valueOf(0.0, 720.66676595);
      complex2.multiply(complex6);
      try { 
        complex10.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex2.cosh();
      complex1.asin();
      complex1.I.add(0.0);
      Complex complex5 = complex4.INF.pow((-1.0));
      Complex complex6 = complex4.I.tan();
      Complex complex7 = complex6.ZERO.multiply(0.0);
      complex0.negate();
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex8.divide(complex2);
      complex9.NaN.sinh();
      Complex complex10 = new Complex((-1.0), (-423.16366649068));
      complex10.I.getArgument();
      complex1.subtract(complex10);
      complex5.reciprocal();
      Complex complex11 = complex5.acos();
      Complex complex12 = complex11.tan();
      complex12.add(complex1);
      Complex complex13 = complex3.INF.conjugate();
      complex13.ONE.pow(complex1);
      complex13.sqrt();
      Complex complex14 = complex11.add((-1.0));
      Complex complex15 = new Complex((-1.0));
      complex14.ZERO.multiply(complex15);
      complex3.getReal();
      complex7.ONE.divide(complex3);
      complex0.sin();
      complex7.tanh();
      complex9.add(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2426.47681546, 2426.47681546);
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex0.multiply(2426.47681546);
      complex2.NaN.multiply(0.0);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = complex3.ONE.divide(complex0);
      complex5.INF.add(complex4);
      Complex complex6 = complex3.INF.asin();
      complex5.ONE.cos();
      Complex complex7 = Complex.valueOf(2352.0);
      complex2.ONE.sqrt1z();
      Complex complex8 = complex7.I.sin();
      Complex complex9 = complex8.INF.sin();
      complex7.INF.log();
      Complex complex10 = complex5.INF.divide(2352.0);
      Complex complex11 = Complex.I;
      complex10.divide(complex11);
      Complex complex12 = complex0.log();
      complex12.divide((-193.252));
      Complex complex13 = complex5.sinh();
      complex13.ZERO.abs();
      complex4.INF.pow(complex9);
      complex0.multiply(765);
      complex1.getImaginary();
      complex2.multiply(765);
      Complex complex14 = complex1.add(-0.0);
      complex3.multiply(complex6);
      complex4.exp();
      complex1.divide((-193.252));
      Object object0 = complex13.readResolve();
      complex7.asin();
      complex14.equals(object0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.cosh();
      complex1.ONE.abs();
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex3.ONE.divide(complex2);
      complex3.ONE.sin();
      Complex complex5 = complex0.pow(complex1);
      complex5.ZERO.subtract(1.0);
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = complex6.cosh();
      complex8.asin();
      complex8.add(64.209698235412);
      complex8.getArgument();
      Complex complex9 = complex7.sqrt();
      complex1.ZERO.asin();
      complex9.ZERO.add(3856.149107831);
      complex9.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf(0.0);
      complex10.ZERO.readResolve();
      complex7.toString();
      complex4.atan();
      Complex.valueOf(3856.149107831, (-1518.79686045131));
      Complex complex11 = complex7.atan();
      complex5.abs();
      complex10.readResolve();
      complex7.sinh();
      complex1.isInfinite();
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.exp();
      complex1.I.exp();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex1.log();
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.ZERO.asin();
      Complex complex7 = complex6.subtract(complex3);
      Complex complex8 = complex7.I.multiply(complex3);
      Complex complex9 = complex5.acos();
      complex9.INF.getField();
      complex2.getArgument();
      Complex complex10 = Complex.valueOf(0.0, 4339.6518882);
      Complex complex11 = complex3.pow(complex10);
      Complex complex12 = complex11.tanh();
      complex10.getArgument();
      complex12.I.sqrt1z();
      Complex complex13 = complex2.pow(complex12);
      complex13.I.multiply(0.0);
      complex3.divide(complex2);
      complex4.nthRoot(265);
      complex12.abs();
      complex11.readResolve();
      Complex.valueOf(1.5707963267948966);
      Complex complex14 = complex6.exp();
      complex14.INF.tanh();
      complex5.isInfinite();
      Complex.valueOf((-2236.3471), 0.0);
      complex8.toString();
      complex13.hashCode();
      complex2.pow(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-1602.3879312948818), (-1602.3879312948818));
      complex0.I.getField();
      Complex complex1 = Complex.valueOf((-1.9589778310104216E-74));
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex2.INF.log();
      complex3.getArgument();
      Complex complex4 = complex0.ONE.sqrt1z();
      complex4.INF.subtract(complex0);
      Complex complex5 = complex4.INF.acos();
      complex0.nthRoot(2565);
      Complex complex6 = complex1.sqrt();
      complex6.INF.readResolve();
      complex5.conjugate();
      complex4.atan();
      complex5.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      complex0.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(956.7284412232);
      complex1.ONE.readResolve();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.ONE.sqrt1z();
      complex3.NaN.tanh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.multiply(complex2);
      complex5.I.abs();
      complex4.asin();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-3505.2));
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-478.29704215), (-478.29704215));
      Complex complex1 = Complex.NaN;
      complex1.ONE.sqrt1z();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.cos();
      complex3.ZERO.multiply(0.0);
      Complex complex4 = complex1.I.multiply((-64));
      complex4.getArgument();
      complex1.tan();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = Complex.valueOf(1641.818937207719);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.I.subtract(1641.818937207719);
      Complex complex6 = complex4.INF.divide(complex3);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex6.NaN.divide(complex7);
      complex4.hashCode();
      Complex complex9 = Complex.valueOf(1641.818937207719, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.INF.subtract(1360.973537);
      complex10.NaN.divide(complex9);
      complex5.getArgument();
      Complex complex11 = complex1.negate();
      Complex complex12 = complex3.divide(complex2);
      complex12.pow(Double.POSITIVE_INFINITY);
      complex8.abs();
      complex9.tanh();
      complex11.subtract(complex8);
      complex7.tanh();
      complex7.acos();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2895.545);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ZERO.multiply(2895.545);
      complex2.ONE.tan();
      complex1.ONE.hashCode();
      Complex complex3 = complex0.I.add(2895.545);
      complex0.INF.getField();
      complex0.readResolve();
      complex0.I.getField();
      Complex complex4 = complex0.sinh();
      complex4.subtract(2895.545);
      complex3.nthRoot(1);
      complex3.multiply((double) 1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 525.015836445);
      complex0.ONE.exp();
      Complex complex1 = complex0.tan();
      complex0.isInfinite();
      complex1.NaN.getField();
      complex0.sqrt1z();
      complex1.sinh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.cosh();
      Complex complex4 = new Complex(1.0, (-571.62437160469));
      complex3.I.add(complex4);
      complex3.log();
      Complex complex5 = complex3.cosh();
      complex5.INF.asin();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.multiply(37);
      complex2.exp();
      complex2.sqrt1z();
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.divide(complex1);
      complex0.toString();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.NaN.pow(complex4);
      complex3.conjugate();
      complex5.I.acos();
      Complex complex7 = complex3.pow(1.573691633515306E-8);
      complex7.readResolve();
      complex5.ONE.acos();
      complex6.hashCode();
      Complex complex8 = Complex.NaN;
      complex7.INF.add(complex8);
      complex4.tanh();
      complex2.exp();
      complex1.tan();
      complex5.isInfinite();
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.tan();
      try { 
        complex2.ZERO.nthRoot((-3365));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,365
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.pow(complex1);
      complex1.abs();
      complex1.ONE.multiply(397);
      Complex complex3 = complex1.ONE.sinh();
      Complex complex4 = complex3.ZERO.pow(0.0);
      Complex complex5 = complex4.ONE.cosh();
      complex4.ZERO.multiply(397);
      complex4.createComplex(0.0, 0.0);
      Complex complex6 = complex2.divide(0.0);
      Complex complex7 = complex6.ZERO.cosh();
      Complex complex8 = complex6.acos();
      complex8.nthRoot(397);
      complex5.cos();
      complex4.getImaginary();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.ZERO.multiply((-1780.0));
      complex3.I.toString();
      Complex complex4 = complex0.tan();
      complex1.getReal();
      complex4.getReal();
      Complex complex5 = complex2.tanh();
      complex5.I.acos();
      Complex complex6 = Complex.valueOf(Double.NaN);
      Complex complex7 = complex4.pow(complex6);
      Complex complex8 = complex7.tanh();
      complex6.reciprocal();
      complex0.I.multiply((-990.6418));
      complex1.abs();
      complex4.ONE.readResolve();
      complex1.atan();
      complex8.I.reciprocal();
      Complex.valueOf(2268.8716779823);
      complex4.I.sinh();
      Complex.valueOf(2.0);
      complex7.equals("(0.0, 1.0)");
      complex4.hashCode();
      complex8.sqrt();
      Complex.valueOf(Double.NaN);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.ZERO.sin();
      complex0.NaN.toString();
      complex0.abs();
      Complex complex3 = complex1.subtract(1333.18072434364);
      Complex complex4 = new Complex(406.1186716089);
      complex3.INF.add(complex4);
      complex2.add(1333.18072434364);
      complex3.readResolve();
      complex0.log();
      Complex complex5 = complex1.subtract((-1.0));
      complex5.getArgument();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-3341.319928491), (-3288.89584));
      Complex complex2 = complex1.INF.sqrt();
      complex0.NaN.sinh();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex3.negate();
      complex3.INF.acos();
      complex0.multiply(0.0);
      complex2.getArgument();
      Complex complex5 = complex0.exp();
      complex2.cosh();
      Complex.valueOf((-3341.319928491));
      Complex complex6 = complex4.cos();
      complex5.conjugate();
      complex3.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.getField();
      Complex complex1 = Complex.valueOf((-872.17854214));
      complex0.ONE.multiply((-291));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex0.createComplex(0.0, 869.383937761);
      complex4.NaN.divide(0.0);
      complex0.negate();
      complex0.abs();
      Complex complex5 = complex4.pow((-872.17854214));
      complex3.equals((Object) null);
      complex5.abs();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7879230976104736);
      complex0.NaN.readResolve();
      complex0.I.getField();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.cosh();
      Complex.valueOf(1.633308028614055E81);
      Complex complex3 = Complex.valueOf(1.633308028614055E81, 1.7879230976104736);
      Complex complex4 = complex3.INF.sinh();
      complex2.ZERO.subtract(1.7879230976104736);
      Complex complex5 = complex0.divide(complex1);
      complex2.multiply(complex1);
      Complex complex6 = complex4.sin();
      complex6.I.subtract((-3289.477));
      Complex complex7 = complex5.tanh();
      complex0.hashCode();
      complex1.conjugate();
      complex7.tanh();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.pow(Double.NaN);
      complex0.INF.getArgument();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex3.INF.multiply((-4546));
      complex4.atan();
      Complex complex5 = complex3.subtract(complex0);
      complex1.hashCode();
      Complex complex6 = complex5.sin();
      complex6.ZERO.pow((-1527.0517));
      complex6.subtract(3866.72);
      complex2.sqrt1z();
      complex1.multiply((-4546));
      Complex.valueOf(3866.72, 2.1608633995056152);
      complex2.abs();
      complex1.negate();
      complex5.exp();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.I.cosh();
      complex1.INF.asin();
      Complex complex3 = complex1.ZERO.subtract((-1.1461755745719884E-7));
      complex3.ZERO.conjugate();
      complex3.NaN.reciprocal();
      Complex complex4 = complex0.multiply(37);
      Complex complex5 = complex4.ZERO.createComplex((-526.645), 0.0);
      complex4.asin();
      Complex complex6 = Complex.valueOf((-526.645), (double) 37);
      complex6.ONE.subtract(complex1);
      Complex complex7 = complex0.multiply(complex1);
      complex5.atan();
      Complex complex8 = complex1.atan();
      complex8.hashCode();
      complex2.subtract((-1.1461755745719884E-7));
      complex7.getReal();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(195.1100496);
      Complex complex2 = Complex.valueOf(195.1100496, 2540.7410389808);
      complex0.cosh();
      complex2.NaN.asin();
      Complex complex3 = complex1.I.subtract(2540.7410389808);
      complex1.ZERO.cosh();
      complex0.multiply(complex1);
      complex3.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex.valueOf(2.7487849807248755E-43);
      complex0.multiply((-327.5273212));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(1864.1671);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.createComplex(1871.59, 1871.59);
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex4.subtract(1871.59);
      complex6.cos();
      Complex complex7 = complex5.divide(1871.59);
      complex7.ZERO.pow(complex0);
      complex6.INF.getArgument();
      complex7.sqrt1z();
      Complex complex8 = complex2.add(complex1);
      complex5.hashCode();
      complex8.readResolve();
      complex0.ONE.conjugate();
      complex5.cos();
      Complex.valueOf(1871.59, (-1478.8257402));
      complex6.sqrt1z();
      Complex.valueOf(1871.59);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1.1508772192025259E-158);
      Complex complex0 = Complex.valueOf(0.0, (-1.1508772192025259E-158));
      complex0.INF.cosh();
      complex0.readResolve();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.I.getField();
      Complex complex2 = complex0.add(3975.50509758);
      Complex complex3 = complex2.ZERO.createComplex(3975.50509758, (-78.562));
      complex0.ZERO.tanh();
      Complex complex4 = Complex.valueOf(3975.50509758);
      complex1.INF.multiply((-1029));
      complex0.getImaginary();
      complex2.INF.toString();
      Complex complex5 = complex3.ZERO.multiply((-1020));
      complex0.exp();
      complex3.hashCode();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2850.93365765392));
      complex4.pow(2.0169027167169864E-7);
      Complex complex7 = complex1.tan();
      complex2.hashCode();
      Complex complex8 = complex3.sqrt1z();
      complex8.ZERO.sqrt1z();
      Complex complex9 = complex5.acos();
      complex9.sqrt1z();
      complex7.pow(238.675122);
      complex6.add((-2850.93365765392));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.NaN.subtract(279.2);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.I.multiply(0.0);
      Complex complex6 = complex2.sin();
      Complex complex7 = complex2.I.sinh();
      assertEquals(0.8414709848078965, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.createComplex(1.960616287777496E-7, 279.2);
      Complex complex9 = complex8.cos();
      Complex complex10 = complex1.divide(617.5415);
      assertEquals(0.0016193243692933996, complex10.getReal(), 0.01);
      
      complex9.I.createComplex(508.37344007265, 0.0);
      Complex complex11 = complex5.multiply(1.960616287777496E-7);
      double double0 = complex11.abs();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = complex9.getArgument();
      assertEquals((-1.960616287777496E-7), double1, 0.01);
      
      complex1.cos();
      complex6.divide(1735.768202988);
      Complex complex12 = Complex.valueOf(1269.5483974140102);
      complex12.abs();
      Complex complex13 = complex8.negate();
      Complex complex14 = complex3.sinh();
      Complex complex15 = complex14.ONE.subtract(2467.9382977374667);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals((-2466.9382977374667), complex15.getReal(), 0.01);
      
      Complex complex16 = complex13.sqrt1z();
      assertNotSame(complex6, complex3);
      assertSame(complex6, complex14);
      assertEquals((-1.960603712209661E-7), complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex1.acos();
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex18 = complex5.acos();
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1449.5083615041422, 510.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex1.I.log();
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.NaN.divide(complex0);
      Complex complex5 = complex1.log();
      Complex complex6 = complex5.INF.multiply(complex1);
      complex1.getReal();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex5.tanh();
      assertEquals(0.7853981633974483, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertTrue(complex5.isInfinite());
      
      Complex complex9 = complex0.sin();
      complex4.nthRoot(1);
      assertSame(complex4, complex7);
      
      Complex complex10 = (Complex)complex9.readResolve();
      boolean boolean0 = complex2.equals(complex10);
      assertEquals((-5.106196490077115E220), complex10.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex6));
      assertFalse(boolean0);
      assertEquals((-1.45903818200738E221), complex10.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex0.ONE.add(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.NaN.divide(complex4);
      Complex complex6 = complex0.reciprocal();
      assertTrue(complex6.equals((Object)complex2));
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.tan();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex7.getReal(), 0.01);
      
      Complex complex8 = complex5.divide(complex3);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex3.sin();
      assertEquals(0.9092974268256817, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex3 = complex2.NaN.exp();
      complex1.I.divide(complex0);
      Complex complex4 = Complex.valueOf(1103.4921834644244, 1103.4921834644244);
      complex4.subtract(complex3);
      Complex complex5 = Complex.valueOf(1103.4921834644244, 0.0);
      complex5.ZERO.toString();
      complex4.getImaginary();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
