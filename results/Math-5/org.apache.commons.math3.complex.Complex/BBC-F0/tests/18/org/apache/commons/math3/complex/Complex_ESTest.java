/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:44:43 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3422.326919772517), 2.0);
      complex0.ZERO.exp();
      Complex complex1 = new Complex((-3422.326919772517));
      complex1.hashCode();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.multiply(complex0);
      complex4.createComplex(6.283185307179586, (-3422.326919772517));
      Complex complex5 = complex2.createComplex(2.0, 20);
      complex1.isInfinite();
      complex0.getArgument();
      complex1.ONE.hashCode();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1.0), (-3421.6720646102153));
      Complex complex2 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex3 = complex0.sin();
      complex1.reciprocal();
      Complex complex4 = Complex.I;
      Complex complex5 = complex1.asin();
      Complex complex6 = complex1.multiply(complex2);
      complex6.createComplex(6.283185307179586, (-372.47));
      Complex complex7 = complex3.createComplex(0.8813735870195428, (-1.0));
      complex6.isInfinite();
      complex7.getArgument();
      complex6.hashCode();
      complex2.log();
      complex5.multiply((-2638.1518759348014));
      complex0.pow(2.6691899766673256E-109);
      Complex complex8 = new Complex(4.819291114181029E-11, 5.285297892214658E-4);
      Complex complex9 = complex8.tan();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9994586105477928, 252.1);
      Complex complex1 = complex0.sqrt();
      complex0.I.add(complex1);
      complex0.INF.hashCode();
      Complex complex2 = complex1.sin();
      complex2.ZERO.toString();
      complex2.INF.getField();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.multiply(complex4);
      Object object0 = new Object();
      complex1.isInfinite();
      Complex complex6 = complex5.ZERO.log();
      complex3.multiply((double) 17);
      Complex complex7 = complex6.sqrt();
      complex7.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      complex1.abs();
      Complex complex2 = Complex.valueOf(0.0, 0.08961215615272522);
      Complex complex3 = complex2.tanh();
      Complex complex4 = new Complex(961.3698891072653, 0.0);
      complex0.asin();
      complex1.acos();
      complex3.exp();
      Complex complex5 = complex1.pow(0.5968599319458008);
      complex5.ZERO.exp();
      complex1.multiply(Double.POSITIVE_INFINITY);
      complex2.cosh();
      complex3.hashCode();
      complex3.pow(961.3698891072653);
      Complex complex6 = Complex.INF;
      complex6.getField();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      complex0.INF.hashCode();
      Complex complex2 = complex1.atan();
      complex2.abs();
      Complex complex3 = complex2.divide(0.0);
      Complex complex4 = Complex.valueOf(3.139132557537509E-17, 3.112781961820385);
      Complex complex5 = Complex.valueOf((-1292.18253));
      complex5.tanh();
      Complex complex6 = new Complex(2164.787705, Double.POSITIVE_INFINITY);
      complex1.asin();
      complex1.acos();
      complex0.exp();
      complex2.pow(0.18647104883458057);
      complex3.multiply(451.525);
      Complex complex7 = complex0.cosh();
      complex3.hashCode();
      complex7.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf((-1292.18253), 451.525);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(6.283185307179586);
      Complex complex1 = Complex.valueOf(20.0, 1311.29060285445);
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex1.tanh();
      Complex complex4 = new Complex((-2665.257536), (-386395.4978585107));
      Complex complex5 = complex0.multiply((-2777.35585313955));
      Complex complex6 = complex3.asin();
      complex4.acos();
      complex0.exp();
      complex3.pow(2.0);
      complex2.multiply(3.139132557537509E-17);
      complex5.cosh();
      complex5.hashCode();
      Complex complex7 = new Complex(-0.0, -0.0);
      complex7.pow(3.139132557537509E-17);
      Complex.valueOf(0.21424146184032042, 3.139132557537509E-17);
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.7931687831878662);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-3131.3216630755524));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9994586105477928, 252.1);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ONE.getArgument();
      complex0.INF.hashCode();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.asin();
      complex3.atan();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.sqrt();
      Complex complex6 = complex5.divide(complex4);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-5052.3973));
      Complex.valueOf(2940.13, 2940.13);
      Complex complex2 = Complex.valueOf((-425.0));
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex3.multiply(2940.13);
      complex4.asin();
      complex4.acos();
      Complex complex6 = Complex.valueOf(0.7615941559557649);
      complex6.exp();
      complex1.multiply(0.7615941559557649);
      complex5.cosh();
      complex4.hashCode();
      complex5.pow(3721.05);
      Complex.valueOf(613.0, 4358.388709666);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-1211.3865781295), (-1211.3865781295));
      Complex complex1 = Complex.ZERO;
      complex0.NaN.divide(complex1);
      complex0.NaN.divide((-1211.3865781295));
      // Undeclared exception!
      complex0.nthRoot(923804204);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 0.9994586105477928;
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.INF;
      complex2.hashCode();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.valueOf(2914.05176310182);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex3.sinh();
      complex1.abs();
      Complex complex8 = complex7.divide(1.0);
      Complex.valueOf(0.0, 2914.05176310182);
      complex4.tanh();
      complex2.divide(complex6);
      complex1.cosh();
      Complex complex9 = complex0.multiply((-9.30335466531318E-6));
      Complex complex10 = complex5.asin();
      complex9.acos();
      Complex complex11 = complex10.exp();
      complex0.toString();
      complex8.multiply(2.530870537724554E-8);
      Complex complex12 = complex2.cosh();
      complex4.hashCode();
      complex11.pow(0.48430514335632324);
      complex12.cos();
      try { 
        complex8.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.abs();
      Complex complex1 = complex0.cosh();
      int int0 = 17;
      Complex complex2 = complex0.I.multiply(17);
      Complex complex3 = complex1.sinh();
      complex0.I.sinh();
      Complex complex4 = complex0.pow(complex1);
      complex4.cos();
      complex1.add(1.0);
      complex2.abs();
      Complex complex5 = complex4.asin();
      complex5.ONE.log();
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.I.hashCode();
      complex1.ZERO.add(complex0);
      complex1.ONE.sqrt1z();
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.getField();
      complex1.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.ONE.abs();
      complex2.ZERO.add(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex4.asin();
      complex4.pow(complex1);
      Complex.valueOf(1.0);
      complex6.pow(0.0);
      complex7.getField();
      complex6.divide(0.0);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.tanh();
      complex2.ONE.acos();
      complex2.asin();
      Complex complex3 = new Complex((-2287.75), (-2287.75));
      Complex complex4 = Complex.valueOf((-2606.770880995093), 1.0800340064859439E241);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.I.hashCode();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = complex0.NaN.pow(complex1);
      complex0.getField();
      complex1.abs();
      complex0.add(complex1);
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex1.sqrt1z();
      complex3.conjugate();
      Complex complex7 = complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.multiply(1);
      complex1.exp();
      complex4.getField();
      Complex complex9 = complex3.createComplex((-862.543469904), Double.POSITIVE_INFINITY);
      complex9.sin();
      complex9.multiply(1995);
      Complex complex10 = complex1.subtract(complex6);
      complex0.tan();
      Complex complex11 = complex10.acos();
      Complex complex12 = Complex.NaN;
      complex9.pow(complex12);
      complex7.sqrt1z();
      Complex complex13 = new Complex(1, 569.1917);
      complex13.add((-591.8381193));
      complex11.multiply((-575542052));
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex1.INF.nthRoot(17);
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.ZERO.asin();
      complex4.I.abs();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.NaN.pow(complex5);
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex0.createComplex((-3012.1), (-3012.1));
      complex8.getField();
      Complex complex9 = complex5.ZERO.divide(1186.8436521378799);
      Complex complex10 = complex8.negate();
      complex10.I.log();
      Complex complex11 = Complex.valueOf(2.573617458343506);
      complex7.getField();
      Complex complex12 = complex4.asin();
      complex11.conjugate();
      Complex complex13 = complex1.cos();
      complex13.INF.divide(complex8);
      complex10.cosh();
      complex3.multiply(1385);
      complex12.sin();
      complex4.equals(complex1);
      Complex complex14 = Complex.I;
      complex14.sinh();
      complex9.equals(complex14);
      Complex complex15 = Complex.INF;
      complex0.divide(complex15);
      complex14.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(2025);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.multiply(complex1);
      Object object0 = new Object();
      Complex complex4 = Complex.INF;
      complex4.equals(complex0);
      Complex complex5 = complex1.log();
      complex3.abs();
      Complex complex6 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf((-1.4255188208147591));
      complex6.pow(complex2);
      complex3.getArgument();
      complex6.tan();
      Complex complex8 = complex0.asin();
      complex7.sinh();
      complex8.add(complex2);
      complex3.conjugate();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      complex0.pow(complex0);
      complex0.INF.hashCode();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.valueOf(2329.0);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.I.divide(complex2);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.sinh();
      Complex complex9 = complex3.reciprocal();
      complex7.multiply((-1169));
      complex6.sqrt1z();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex8.divide(Double.NaN);
      Complex.valueOf(Double.NaN, (double) (-1169));
      complex2.divide(410.7435298366545);
      complex3.sqrt1z();
      complex11.atan();
      Complex.valueOf((double) (-1168));
      Complex complex12 = Complex.valueOf(1539.59, 1.866422414779663);
      complex12.pow(complex9);
      Complex complex13 = Complex.valueOf(410.7435298366545, (double) (-1168));
      complex13.acos();
      Complex complex14 = Complex.ZERO;
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.pow(complex0);
      complex0.INF.hashCode();
      Complex complex3 = complex0.tanh();
      complex3.atan();
      Complex.valueOf(2329.0);
      Complex complex4 = complex1.sqrt();
      complex4.I.divide(complex3);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.sinh();
      complex6.abs();
      complex4.divide(0.0);
      Complex complex7 = complex0.INF.sinh();
      Complex complex8 = Complex.valueOf(0.0, 3.139132557537509E-17);
      complex7.ONE.tanh();
      Complex complex9 = complex2.I.divide(complex0);
      complex9.I.cosh();
      Complex complex10 = complex8.ZERO.multiply(2329.0);
      Complex complex11 = complex10.asin();
      complex0.acos();
      Complex complex12 = complex5.exp();
      complex2.multiply(0.0);
      complex8.cosh();
      complex0.hashCode();
      Complex complex13 = complex8.pow(0.0);
      Complex complex14 = new Complex(0.0833425521850586, 2329.0);
      complex14.cosh();
      complex13.acos();
      complex11.cosh();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(963);
      Complex complex2 = complex1.atan();
      complex0.readResolve();
      complex2.getImaginary();
      Complex complex3 = complex1.reciprocal();
      complex0.getArgument();
      Complex complex4 = Complex.NaN;
      complex4.getField();
      Complex complex5 = complex3.divide(complex1);
      Complex complex6 = complex0.sinh();
      complex2.createComplex(4128.418263053384, 0.05970507860183716);
      Complex complex7 = complex1.reciprocal();
      complex3.multiply((-653));
      complex2.add(325.3521837887695);
      complex5.divide(2.86710692775E12);
      Complex.valueOf(2.86710692775E12, 0.05970507860183716);
      complex6.divide(4128.418263053384);
      complex6.sqrt1z();
      complex7.atan();
      Complex.valueOf(0.0);
      Complex complex8 = Complex.ONE;
      try { 
        complex8.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(complex0);
      Complex.valueOf(634.37214665025, 634.37214665025);
      complex1.abs();
      Complex complex3 = Complex.ZERO;
      complex3.readResolve();
      Object object0 = new Object();
      complex2.equals(object0);
      complex3.multiply(Double.NaN);
      complex3.tan();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.ONE.log();
      complex3.ZERO.multiply((-1));
      Complex complex4 = complex0.atan();
      complex4.getImaginary();
      Complex complex5 = complex1.reciprocal();
      complex4.NaN.getArgument();
      complex1.getField();
      Complex complex6 = complex1.I.divide(complex5);
      complex6.ONE.sinh();
      Complex complex7 = complex5.createComplex((-1.0), (-1.0));
      Complex complex8 = complex3.reciprocal();
      Complex complex9 = complex8.multiply((-1));
      complex7.add(0.0);
      Complex complex10 = complex9.divide((-1847.09888501));
      Complex complex11 = complex9.tanh();
      Complex complex12 = Complex.INF;
      complex12.divide(complex2);
      complex0.multiply(2302.325);
      Complex complex13 = Complex.valueOf((double) (-1), 2302.325);
      complex13.acos();
      complex12.exp();
      Complex complex14 = Complex.I;
      complex14.multiply((-2.706947525292106E-4));
      complex6.cosh();
      complex11.hashCode();
      complex10.pow((-1847.09888501));
      Complex.valueOf((double) (-1), Double.NaN);
      complex4.acos();
      complex0.divide((-1.1047585095328619E-8));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      complex0.ONE.conjugate();
      Complex complex1 = new Complex(4005.537);
      complex0.getField();
      complex1.negate();
      complex1.getField();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(971.7098489544171, (-67.66175610198377));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(1512.357, 1512.357);
      complex4.subtract(complex2);
      Complex complex5 = complex3.tan();
      complex4.add(Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.valueOf((-4.819540032304379E-8), 251.90914032);
      complex7.equals(complex2);
      complex1.multiply((-1083.2));
      Complex complex8 = Complex.ZERO;
      complex8.divide(complex5);
      complex2.asin();
      Complex complex9 = new Complex(971.7098489544171, Double.NaN);
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply((-1));
      Complex complex3 = complex0.atan();
      complex3.I.readResolve();
      complex1.getImaginary();
      Complex complex4 = complex1.reciprocal();
      complex2.getArgument();
      complex1.getField();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.createComplex(0.05970507860183716, 1336.1);
      Complex complex8 = complex1.reciprocal();
      complex0.multiply((-1));
      complex7.add((-1.0));
      complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.05970507860183716);
      Complex complex10 = complex9.divide(0.0);
      complex9.sqrt1z();
      complex6.atan();
      Complex.valueOf(1336.1);
      complex0.pow(complex5);
      complex10.tan();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply((-1));
      Complex complex3 = complex0.atan();
      complex3.I.readResolve();
      complex1.getImaginary();
      Complex complex4 = complex1.reciprocal();
      complex2.getArgument();
      complex1.getField();
      Complex complex5 = complex2.divide(complex4);
      Complex complex6 = complex4.sinh();
      Complex complex7 = complex6.createComplex(0.05970507860183716, 1336.1);
      Complex complex8 = complex1.reciprocal();
      complex0.multiply((-1));
      complex7.add((-1.0));
      complex8.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.05970507860183716);
      complex9.divide(0.0);
      complex9.sqrt1z();
      complex6.atan();
      Complex.valueOf(1336.1);
      complex0.pow(complex5);
      complex5.acos();
      Complex complex10 = Complex.ZERO;
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex1.multiply(complex0);
      complex0.pow(complex0);
      Complex complex4 = complex2.cos();
      complex4.ZERO.cos();
      complex0.multiply((-3267));
      complex4.hashCode();
      complex1.add(complex2);
      complex0.cosh();
      complex0.pow(complex2);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.ONE.log();
      complex1.INF.divide(20.0);
      complex3.ZERO.multiply((-1));
      Complex complex4 = complex0.atan();
      complex4.getImaginary();
      complex2.atan();
      Complex complex5 = Complex.valueOf((double) (-1));
      complex2.divide(complex3);
      Complex.valueOf(2.0, (double) (-1));
      Complex complex6 = new Complex((-1));
      complex6.abs();
      Complex complex7 = Complex.ZERO;
      complex3.readResolve();
      complex1.equals(complex5);
      complex4.multiply(1918.77405316);
      complex3.divide(complex1);
      complex6.asin();
      Complex.valueOf(1918.77405316);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(961.3704066786888, (-67.66175610198377));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(1512.357, 1512.357);
      Complex complex5 = complex2.reciprocal();
      complex0.getArgument();
      complex0.getField();
      Complex complex6 = complex5.divide(complex1);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex2.createComplex(961.3704066786888, (-2795.740161));
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = Complex.NaN;
      complex10.multiply(2750);
      complex9.add((-1.0));
      Complex complex11 = complex3.divide((-67.66175610198377));
      Complex complex12 = complex3.createComplex(961.3704066786888, (-67.66175610198377));
      complex6.divide(4235.37);
      complex4.sqrt1z();
      Complex.valueOf((double) 2750);
      complex4.add(complex8);
      complex4.divide(complex12);
      complex11.tanh();
      complex12.getField();
      Complex complex13 = Complex.valueOf((-2795.740161), 1412.0824);
      complex13.abs();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex3.ZERO.multiply((-1));
      Complex complex5 = complex0.atan();
      complex5.getImaginary();
      Complex complex6 = complex1.reciprocal();
      complex5.NaN.getArgument();
      complex1.getField();
      Complex complex7 = complex1.I.divide(complex6);
      Complex complex8 = complex7.ONE.sinh();
      Complex complex9 = complex6.createComplex((-1.0), (-1.0));
      Complex complex10 = complex3.reciprocal();
      Complex complex11 = complex10.multiply((-1));
      complex9.add(0.0);
      complex11.divide((-1847.09888501));
      complex1.createComplex(3186.639137372391, (-868.5920994303609));
      complex2.negate();
      complex4.add(3186.639137372391);
      Complex.valueOf((-1230.5434772));
      Complex complex12 = Complex.INF;
      complex3.negate();
      Complex complex13 = complex1.add((-1458.003401101645));
      Complex complex14 = new Complex((-3366.0), (-2.706947525292106E-4));
      complex14.add(complex8);
      Complex complex15 = new Complex(Double.NaN, (-43.3522174975));
      complex13.divide(complex15);
      complex11.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.ONE;
      Object object0 = complex1.readResolve();
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex4.pow(complex1);
      complex0.pow((-1.0));
      complex1.getImaginary();
      Complex complex6 = complex0.multiply(189.89871716);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.createComplex(3186.958, (-2634.2));
      complex2.negate();
      complex1.multiply(1156);
      complex6.add(0.0);
      complex5.hashCode();
      complex8.asin();
      complex6.add((-349.471070257504));
      Complex complex9 = complex6.tanh();
      complex9.equals(object0);
      complex7.divide(119.02319035542479);
      complex6.subtract(2284.1336);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.multiply((-1));
      Complex complex4 = complex1.atan();
      complex2.getImaginary();
      Complex complex5 = new Complex(1.0);
      complex5.reciprocal();
      complex4.getArgument();
      complex1.getField();
      Complex complex6 = Complex.valueOf(1.0, (-1624.7913646));
      complex0.divide(complex6);
      Complex complex7 = complex3.sinh();
      complex7.createComplex(Double.NaN, 20.0);
      complex3.reciprocal();
      complex2.multiply((-2918));
      complex1.add(Double.NaN);
      Complex complex8 = complex3.divide((-1624.7913646));
      complex2.createComplex((-2918), (-1.0));
      complex1.divide((-1184.1741881657206));
      complex1.sqrt1z();
      Complex complex9 = complex7.atan();
      Complex.valueOf((-854.529));
      complex8.pow(complex5);
      complex6.acos();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.pow(complex0);
      complex0.INF.hashCode();
      Complex complex3 = complex0.tanh();
      complex3.asin();
      Complex complex4 = complex3.atan();
      Complex.valueOf(2329.0);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.I.divide(complex3);
      Complex complex7 = Complex.valueOf(634.37214665025, 2302.325);
      complex6.abs();
      Complex complex8 = Complex.ZERO;
      Object object0 = complex8.readResolve();
      complex0.equals(object0);
      complex7.multiply(0.0);
      complex0.divide(complex4);
      Complex complex9 = complex2.asin();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(0.0);
      complex1.hashCode();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.atan();
      Complex complex5 = Complex.valueOf(3.505791114318544E95);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex6.divide(complex4);
      Object object0 = new Object();
      Object object1 = complex2.readResolve();
      complex7.equals(object1);
      complex1.sinh();
      Complex complex8 = complex6.sinh();
      complex4.abs();
      complex2.divide(0.0);
      complex3.sinh();
      Complex.valueOf(3.139132557537509E-17, (-2516.041170201124));
      complex1.tanh();
      Complex complex9 = Complex.ONE;
      complex2.divide(complex9);
      Complex complex10 = Complex.ONE;
      complex10.multiply(2329.0);
      complex2.acos();
      Complex complex11 = complex9.exp();
      Complex complex12 = complex8.multiply(2329.0);
      complex5.cosh();
      complex8.hashCode();
      complex11.pow(Double.NaN);
      Complex.valueOf(0.0, 0.0);
      complex12.acos();
      complex7.divide(1527.1932);
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(961.3704066786888, (-67.07684));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf(1512.357, 1512.357);
      Complex complex5 = complex4.subtract(complex2);
      Complex complex6 = complex3.tan();
      complex1.add(0.0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.sqrt1z();
      complex0.log();
      complex3.conjugate();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.multiply(961.3704066786888);
      Complex complex11 = complex5.multiply((-1185));
      Complex complex12 = Complex.valueOf((double) (-1185), Double.POSITIVE_INFINITY);
      complex11.subtract((-67.07684));
      Complex complex13 = Complex.INF;
      Complex complex14 = complex13.pow(1512.357);
      Complex complex15 = Complex.INF;
      complex0.negate();
      complex14.add((-816.05));
      complex10.add(complex12);
      complex6.divide(complex9);
      complex8.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2578.07130428), (-2578.07130428));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.INF.sinh();
      complex5.INF.getArgument();
      complex2.getField();
      Complex complex6 = complex3.tanh();
      complex4.subtract(complex5);
      Complex complex7 = Complex.valueOf(4024.42681, (-20.0));
      Complex complex8 = complex7.tan();
      Complex complex9 = complex5.add(0.7853981633974483);
      Complex complex10 = Complex.NaN;
      complex6.add(complex0);
      complex8.sqrt1z();
      Complex complex11 = complex7.log();
      Complex complex12 = complex8.conjugate();
      Complex complex13 = complex12.log();
      Complex.valueOf((-484.77543928138));
      complex5.tanh();
      Complex complex14 = complex3.exp();
      complex9.isNaN();
      complex6.tan();
      Complex complex15 = Complex.valueOf(0.0, (-3.2936025225250634E-8));
      complex15.reciprocal();
      complex13.reciprocal();
      complex11.cos();
      complex8.sin();
      complex7.tanh();
      complex5.tan();
      complex14.tan();
      Complex complex16 = Complex.I;
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex3.ZERO.multiply((-1));
      Complex complex5 = complex0.atan();
      complex5.getImaginary();
      Complex complex6 = complex1.reciprocal();
      complex5.NaN.getArgument();
      complex1.getField();
      Complex complex7 = complex1.I.divide(complex6);
      complex7.ONE.sinh();
      Complex complex8 = complex6.createComplex((-1.0), (-1.0));
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex9.multiply((-1));
      complex8.add(0.0);
      complex10.divide((-1847.09888501));
      complex1.createComplex(3186.639137372391, (-868.5920994303609));
      complex2.negate();
      complex4.add(3186.639137372391);
      Complex complex11 = Complex.valueOf((-1230.5434772));
      Complex complex12 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.add(complex12);
      Complex complex13 = Complex.ZERO;
      complex11.divide(complex13);
      complex12.tanh();
      complex7.getField();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-2578.07130428), (-2578.07130428));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.INF.sinh();
      complex5.INF.getArgument();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex4.subtract(complex5);
      Complex complex8 = Complex.valueOf(0.7853981633974483, (-20.0));
      Complex complex9 = complex8.tan();
      complex5.add(0.7853981633974483);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex6.add(complex0);
      Complex complex12 = complex8.log();
      complex9.conjugate();
      Complex.valueOf(1345.0);
      Complex complex13 = complex1.multiply(0.0);
      complex7.multiply(1139);
      complex12.subtract((-341.12962));
      Complex complex14 = complex10.negate();
      complex5.add((-20.0));
      Complex complex15 = Complex.valueOf((-20.0));
      complex12.add(complex13);
      complex13.divide(complex14);
      complex15.tanh();
      complex13.getField();
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.ONE.log();
      complex3.ZERO.multiply((-1));
      Complex complex4 = complex0.atan();
      complex4.getImaginary();
      Complex complex5 = complex1.reciprocal();
      complex4.NaN.getArgument();
      complex1.getField();
      Complex complex6 = complex1.I.divide(complex5);
      complex6.ONE.sinh();
      Complex complex7 = complex5.createComplex((-1.0), (-1.0));
      Complex complex8 = complex3.reciprocal();
      complex8.multiply((-1));
      Complex complex9 = complex7.add(0.0);
      complex3.isInfinite();
      complex8.add(6.283185307179586);
      complex8.atan();
      complex2.multiply(1852);
      Complex complex10 = Complex.valueOf(1.544673396032028E296, 2.5039391215625133E-8);
      complex9.multiply((-1));
      complex2.subtract(Double.NaN);
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-339.5412824109), (-339.5412824109));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.multiply(complex2);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.sinh();
      complex5.getArgument();
      complex4.getField();
      Complex complex6 = complex2.tanh();
      complex0.subtract(complex2);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex3.tanh();
      complex7.log();
      Complex complex9 = complex7.cos();
      Complex complex10 = complex1.asin();
      Complex complex11 = complex1.pow(complex5);
      complex3.sqrt1z();
      complex2.sin();
      Complex complex12 = complex8.multiply(1073741824);
      complex11.sqrt();
      Complex complex13 = complex9.cos();
      complex10.add((-4.3847165025801704E16));
      complex10.divide(5.5657084775121975E-8);
      complex12.getArgument();
      complex0.readResolve();
      complex6.nthRoot(623);
      complex13.divide(complex9);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-2578.07130428), (-2578.07130428));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.INF.sinh();
      complex5.INF.getArgument();
      complex2.getField();
      Complex complex6 = complex3.tanh();
      complex4.subtract(complex5);
      Complex complex7 = Complex.valueOf(4024.42681, (-20.0));
      Complex complex8 = complex7.tan();
      complex5.add(0.7853981633974483);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex6.add(complex0);
      Complex complex11 = complex8.sqrt1z();
      Complex complex12 = complex7.log();
      complex8.conjugate();
      Complex.valueOf(1345.0);
      Complex complex13 = complex1.multiply(0.0);
      complex11.multiply(1139);
      complex12.subtract((-341.12962));
      Complex complex14 = complex9.negate();
      complex5.add((-20.0));
      Complex complex15 = Complex.valueOf(474.563310225);
      complex12.add(complex13);
      complex13.divide(complex14);
      complex15.tanh();
      complex13.getField();
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.I.subtract((-532.55));
      complex0.nthRoot(29);
      Complex complex2 = complex0.cos();
      complex0.pow(complex1);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.INF.divide(complex0);
      complex1.toString();
      Complex complex2 = new Complex(1178.683700882109);
      Complex complex3 = complex2.divide(1178.683700882109);
      Complex complex4 = complex3.createComplex(1178.683700882109, 1565.316049116);
      complex1.cos();
      Complex complex5 = complex2.cos();
      complex3.cosh();
      complex3.multiply(1565.316049116);
      Complex complex6 = complex3.sqrt1z();
      complex4.nthRoot(1772);
      complex4.pow((double) 0);
      complex6.cosh();
      Complex complex7 = complex5.conjugate();
      complex7.sin();
      Complex complex8 = complex5.multiply((-2143963221));
      complex8.add((double) 0);
      Complex complex9 = new Complex(502.2679689368723, 580.627054);
      complex9.divide(complex2);
      complex9.getReal();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.7590337975333168), (-2370.3076400176856));
      complex0.NaN.log();
      Complex complex1 = new Complex((-20.0), 0.0);
      complex0.equals(complex1);
      Complex complex2 = complex0.multiply((-20.0));
      Complex complex3 = complex1.divide(complex0);
      complex2.asin();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = complex0.ONE.log();
      Complex complex4 = complex3.ZERO.multiply((-1));
      Complex complex5 = complex0.atan();
      complex5.getImaginary();
      Complex complex6 = complex2.atan();
      Complex complex7 = Complex.valueOf((-149.9657365071247));
      complex7.negate();
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex1.pow((-149.9657365071247));
      Complex complex10 = complex6.conjugate();
      complex1.sinh();
      complex7.toString();
      Complex complex11 = complex1.divide(complex2);
      Complex complex12 = complex10.log();
      Complex complex13 = Complex.valueOf((-1847.09888501));
      complex11.tanh();
      complex8.exp();
      complex12.isNaN();
      complex12.tan();
      complex11.reciprocal();
      complex2.reciprocal();
      complex13.cos();
      complex5.sin();
      complex7.tanh();
      Complex complex14 = Complex.ONE;
      complex14.tan();
      Complex complex15 = complex9.tan();
      complex4.multiply(2841.57);
      complex11.reciprocal();
      complex15.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(0.0);
      complex0.ONE.multiply(37);
      Complex complex2 = complex0.I.add((-1621.660754890007));
      Complex complex3 = complex0.createComplex((-2516.041170201124), (-1734.345352593911));
      Complex complex4 = complex3.I.atan();
      Complex complex5 = complex0.negate();
      complex4.getArgument();
      complex5.getField();
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex5.createComplex((-1734.345352593911), (-1.0));
      complex1.reciprocal();
      Complex complex9 = complex1.multiply(1199);
      Complex complex10 = complex7.add((double) 1199);
      complex2.divide((-635.04518550888));
      complex5.createComplex(1.0, 0.0);
      complex9.divide(Double.NaN);
      Complex complex11 = Complex.ONE;
      complex11.sqrt1z();
      Complex complex12 = complex9.atan();
      complex12.I.reciprocal();
      Complex complex13 = Complex.valueOf((-1.1301979046684263E-9));
      Complex complex14 = complex10.pow(complex6);
      complex14.acos();
      complex8.toString();
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex3.NaN.conjugate();
      complex3.toString();
      Complex complex5 = complex1.INF.pow(1.0);
      Complex complex6 = complex3.ONE.subtract(complex0);
      complex1.INF.abs();
      complex0.NaN.tan();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex0.conjugate();
      complex5.ZERO.divide(1178.683700882109);
      complex6.createComplex(1.0, 1178.683700882109);
      Complex complex9 = complex7.cos();
      complex9.cos();
      complex9.NaN.cosh();
      complex7.isNaN();
      Complex complex10 = complex2.tan();
      complex9.reciprocal();
      complex4.reciprocal();
      Complex complex11 = complex5.cos();
      complex8.sin();
      complex4.tan();
      complex10.tan();
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY);
      complex12.multiply(1963.078581);
      complex9.reciprocal();
      complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(0.0);
      int int0 = 37;
      Complex complex2 = complex0.ONE.multiply(37);
      Complex complex3 = complex0.I.add((-1621.660754890007));
      double double0 = (-1734.345352593911);
      Complex complex4 = complex0.createComplex((-2516.041170201124), (-1734.345352593911));
      complex4.I.atan();
      Complex complex5 = complex0.negate();
      complex5.I.sqrt1z();
      Complex complex6 = complex2.pow(2841.57);
      complex6.NaN.conjugate();
      complex4.ONE.sinh();
      complex6.NaN.toString();
      Complex complex7 = complex1.INF.divide(complex5);
      complex7.I.log();
      Complex.valueOf(0.0);
      complex4.ONE.tanh();
      complex3.exp();
      Complex complex8 = complex0.multiply(0.0);
      complex4.sqrt1z();
      try { 
        complex8.nthRoot((-735247537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -735,247,537
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(3238.18802, 3238.18802);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex2.ONE.negate();
      complex0.toString();
      complex3.ZERO.getArgument();
      Complex complex5 = complex2.divide(complex0);
      complex0.toString();
      Complex complex6 = Complex.NaN;
      complex5.pow(complex3);
      complex2.conjugate();
      complex4.getArgument();
      Complex complex7 = complex5.log();
      complex7.tan();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(1.5346568127351796E-127);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.subtract(complex0);
      complex2.I.multiply(complex0);
      Complex complex4 = complex3.log();
      complex4.ONE.getField();
      Complex complex5 = complex3.I.reciprocal();
      complex0.NaN.exp();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.divide(complex6);
      complex3.NaN.pow((-977.046));
      Complex complex8 = complex7.ZERO.reciprocal();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = Complex.valueOf(1.5346568127351796E-127, 0.0);
      complex10.ZERO.acos();
      complex5.getArgument();
      complex6.getReal();
      complex3.reciprocal();
      complex5.cosh();
      complex3.sinh();
      Complex.valueOf(1.5346568127351796E-127);
      Complex.valueOf(0.0);
      complex10.getArgument();
      complex6.atan();
      complex8.multiply(complex9);
      Complex.valueOf((-1.5707963267948966), 20.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex3.add(complex1);
      complex2.ONE.multiply((-2810));
      Complex complex5 = complex3.asin();
      complex1.ONE.add(complex2);
      complex5.ONE.cosh();
      complex1.equals(complex4);
      complex1.abs();
      Complex complex6 = complex0.multiply((-2527));
      Complex complex7 = complex6.multiply((-2527));
      complex0.sqrt1z();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex((-2578.07130428), (-2578.07130428));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.ONE.multiply(complex2);
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.INF.sinh();
      complex5.INF.getArgument();
      complex2.getField();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = complex2.INF.reciprocal();
      Complex complex9 = complex7.I.tanh();
      Complex complex10 = complex9.NaN.log();
      Complex complex11 = complex1.cos();
      complex11.ONE.asin();
      complex11.pow(complex1);
      Complex complex12 = complex1.sqrt1z();
      complex0.sin();
      complex1.multiply(7);
      Complex complex13 = complex12.sqrt();
      complex10.cos();
      complex13.add(0.0);
      complex6.divide((-2578.07130428));
      complex9.getArgument();
      complex8.readResolve();
      complex10.nthRoot(623);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2059.13648218, (-2786.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.I.add(2059.13648218);
      Complex complex5 = complex0.pow(complex1);
      complex3.ONE.pow(complex1);
      complex3.acos();
      Complex complex6 = complex5.pow(complex3);
      complex3.NaN.getField();
      Complex complex7 = complex2.subtract(complex0);
      Complex complex8 = complex7.I.conjugate();
      complex3.readResolve();
      complex8.hashCode();
      Complex complex9 = complex0.createComplex(2059.13648218, 2059.13648218);
      Complex complex10 = complex9.NaN.conjugate();
      Complex complex11 = complex2.divide((-2786.0));
      complex11.subtract(complex5);
      complex10.add(complex6);
      complex8.sinh();
      complex6.getReal();
      complex10.hashCode();
      complex6.tanh();
      complex4.createComplex(Double.NaN, 0.0);
      complex11.isNaN();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1847.09888501), (-1847.09888501));
      Complex complex1 = complex0.ZERO.cos();
      complex0.ONE.conjugate();
      Complex complex2 = complex0.ONE.log();
      complex2.ZERO.multiply((-1));
      Complex complex3 = complex0.atan();
      complex3.getImaginary();
      Complex complex4 = complex1.reciprocal();
      complex3.NaN.getArgument();
      complex1.getField();
      Complex complex5 = complex1.I.divide(complex4);
      complex5.ONE.sinh();
      Complex complex6 = complex4.createComplex((-1.0), (-1.0));
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex7.multiply((-1));
      complex6.add(0.0);
      complex8.divide((-1847.09888501));
      Complex complex9 = complex1.createComplex(3186.639137372391, (-868.5920994303609));
      Complex complex10 = complex9.ZERO.divide((double) (-1));
      Complex complex11 = complex7.sqrt1z();
      complex9.atan();
      Complex.valueOf(6.283185307179586);
      complex5.pow(complex3);
      complex10.acos();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.acos();
      complex2.ONE.acos();
      complex2.ZERO.exp();
      complex1.ONE.sinh();
      complex1.divide((-673.608378436));
      complex1.negate();
      Complex complex3 = complex0.acos();
      complex3.I.pow((-673.608378436));
      complex2.multiply((-4304.266206065897));
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(2179.499547, 2179.499547);
      Complex complex1 = Complex.valueOf(2179.499547);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ZERO.add(2252.81001019386);
      complex0.ZERO.nthRoot(1438);
      complex3.NaN.cosh();
      Complex complex4 = complex0.I.subtract(complex1);
      Complex complex5 = complex0.subtract(complex1);
      complex4.ZERO.sqrt();
      Complex complex6 = complex0.tan();
      complex6.NaN.createComplex(2215.15931, (-2.3259315921149476E-8));
      complex6.getImaginary();
      complex4.pow(complex5);
      Complex complex7 = new Complex((-1144.79891958782));
      Complex complex8 = complex1.pow(complex7);
      complex8.cosh();
      Complex.valueOf(432.721993945, 369.488894);
      complex4.cos();
      complex2.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.hashCode();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.add(complex1);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.NaN.createComplex((-92.42332126), 0.0);
      Complex complex4 = complex0.ZERO.exp();
      complex4.NaN.abs();
      Complex.valueOf((-20.0));
      complex1.NaN.toString();
      complex2.I.hashCode();
      complex3.INF.getField();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.INF.add(complex5);
      Complex complex8 = complex2.tanh();
      complex7.INF.reciprocal();
      complex8.NaN.getArgument();
      complex8.ZERO.hashCode();
      complex5.I.sqrt1z();
      Complex complex9 = complex6.tan();
      complex9.NaN.readResolve();
      Complex complex10 = complex2.exp();
      complex1.sqrt1z();
      Complex complex11 = complex8.NaN.divide(complex10);
      complex11.NaN.exp();
      Complex.valueOf(Double.NaN);
      complex8.isInfinite();
      complex3.isNaN();
      complex7.isNaN();
      complex9.getArgument();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-3157.39773083));
      Complex.valueOf(1908.53292753);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.subtract((-3993.2795));
      complex2.NaN.log();
      complex2.sqrt();
      Complex complex3 = complex0.sqrt1z();
      complex1.sin();
      complex1.abs();
      complex3.add(1908.53292753);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4538.8);
      Complex complex1 = complex0.acos();
      complex1.toString();
      Complex complex2 = new Complex(4538.8, (-1659.0589));
      Complex complex3 = complex2.INF.acos();
      complex3.INF.toString();
      Complex complex4 = complex3.INF.acos();
      complex3.nthRoot(2981);
      complex0.equals(complex2);
      complex1.hashCode();
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
      complex4.nthRoot(2869);
      Complex complex5 = complex4.divide(1.5686185359954834);
      Complex complex6 = complex2.pow((double) 2869);
      Complex complex7 = complex6.subtract(complex5);
      complex7.INF.hashCode();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.pow(complex1);
      complex0.INF.hashCode();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.asin();
      complex4.atan();
      Complex.valueOf(2329.0);
      Complex complex6 = complex2.sqrt();
      complex6.I.divide(complex4);
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex7.sinh();
      complex8.abs();
      complex6.divide(0.0);
      Complex complex9 = complex1.INF.sinh();
      Complex complex10 = Complex.valueOf(0.0, 3.139132557537509E-17);
      complex9.ONE.tanh();
      Complex complex11 = complex3.I.divide(complex5);
      complex10.ZERO.multiply(2329.0);
      complex1.acos();
      complex7.exp();
      complex3.multiply(0.0);
      complex10.cosh();
      complex1.hashCode();
      complex10.pow(0.0);
      Complex.valueOf(0.0, 821.249971);
      complex6.acos();
      complex11.divide(1527.1932);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(2699.433008, 2699.433008);
      Complex complex1 = Complex.valueOf(2699.433008, 2699.433008);
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ZERO.pow(2699.433008);
      complex0.log();
      complex0.exp();
      complex4.add(complex1);
      complex2.getArgument();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex0.sinh();
      complex0.reciprocal();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.I.sin();
      Complex complex5 = complex3.atan();
      complex5.ONE.subtract(0.0);
      Complex complex6 = complex3.ONE.cos();
      complex6.I.getField();
      complex1.readResolve();
      complex2.readResolve();
      Complex complex7 = complex5.sqrt();
      complex2.multiply(0.0);
      complex7.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1.0);
      Complex complex1 = Complex.INF;
      complex1.readResolve();
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.NaN.conjugate();
      complex2.toString();
      Complex complex3 = complex1.INF.pow(0.0);
      Complex complex4 = complex2.ONE.subtract(complex0);
      complex1.INF.abs();
      complex0.NaN.tan();
      Complex complex5 = complex0.reciprocal();
      complex0.conjugate();
      complex3.ZERO.divide(1178.683700882109);
      complex4.createComplex(1.0, 1178.683700882109);
      Complex complex6 = complex5.cos();
      complex6.cos();
      complex6.NaN.cosh();
      double double1 = 1963.078581;
      complex6.multiply(1963.078581);
      complex4.sqrt1z();
      int int0 = 0;
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(0);
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(3238.18802, 3238.18802);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.ONE.sinh();
      complex2.ONE.negate();
      complex0.toString();
      complex3.ZERO.getArgument();
      Complex.valueOf(0.0, (-1.0));
      Complex complex4 = complex2.negate();
      complex4.I.atan();
      complex2.I.sqrt();
      complex4.add(3238.18802);
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex3.subtract(complex2);
      Complex complex7 = complex6.I.sqrt1z();
      complex7.NaN.conjugate();
      Complex complex8 = complex7.I.tan();
      Complex.valueOf(3238.18802, 3238.18802);
      complex5.ZERO.reciprocal();
      complex1.isInfinite();
      Complex complex9 = complex5.add(6.283185307179586);
      Complex complex10 = complex9.ZERO.atan();
      complex5.multiply(37);
      Complex.valueOf(3238.18802, 0.0);
      complex7.multiply(631);
      complex8.subtract(0.0);
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.0);
      Complex complex1 = new Complex(2.07200288772583);
      complex1.ZERO.readResolve();
      complex0.ZERO.pow(complex1);
      Complex complex2 = complex0.pow((-1.899407107267079E-8));
      Complex complex3 = complex2.ONE.atan();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.INF.subtract(complex2);
      Complex complex6 = complex5.INF.createComplex(0.0, 1179.469588264833);
      complex6.I.getArgument();
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex0.pow(1.0);
      Complex complex9 = complex8.ONE.exp();
      complex9.subtract(0.0);
      complex0.NaN.toString();
      complex2.isNaN();
      Complex complex10 = complex0.multiply(complex2);
      Complex complex11 = complex10.INF.pow(complex2);
      complex10.ZERO.sqrt();
      Complex complex12 = complex0.divide(complex10);
      complex9.nthRoot(176);
      complex11.conjugate();
      complex5.tanh();
      Complex complex13 = complex5.conjugate();
      Complex complex14 = complex13.INF.divide(0.0);
      complex4.add(complex1);
      complex7.multiply(complex12);
      complex1.getArgument();
      complex8.pow(complex14);
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5573.86, (-1460.27415));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.atan();
      complex2.I.readResolve();
      Complex complex3 = complex2.ONE.subtract(complex0);
      complex0.ONE.sqrt();
      Complex complex4 = complex0.I.log();
      complex0.isNaN();
      complex1.NaN.sqrt();
      complex2.log();
      Complex complex5 = new Complex(5573.86);
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex5.INF.pow((-1460.27415));
      complex2.hashCode();
      Complex complex8 = complex6.conjugate();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex8.ONE.tan();
      Complex complex11 = complex10.NaN.multiply(complex5);
      Complex complex12 = complex7.sin();
      complex3.pow(0.0);
      complex1.subtract(complex8);
      complex0.asin();
      complex2.getArgument();
      complex12.divide(complex7);
      complex11.getReal();
      complex9.getImaginary();
      complex4.nthRoot(1480);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-2575.56807191), 698.8326);
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.I.add(698.8326);
      Complex complex3 = complex2.I.divide(698.8326);
      complex3.ONE.multiply((-2575.56807191));
      complex2.I.getField();
      Complex complex4 = complex0.cosh();
      complex4.INF.abs();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.NaN.cos();
      complex6.INF.toString();
      complex0.abs();
      Complex complex7 = complex0.tanh();
      complex6.multiply(1.184154459111628E-8);
      complex7.NaN.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.subtract(Double.POSITIVE_INFINITY);
      complex7.subtract(1582.00919347196);
      complex3.add(complex0);
      complex8.hashCode();
      complex4.getArgument();
      complex1.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(961.3704066786888, (-67.07684));
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.sqrt1z();
      complex2.NaN.acos();
      Complex.valueOf((-1757.03655), 1512.357);
      Complex complex3 = complex1.divide(0.0);
      complex3.subtract(complex1);
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex2.ZERO.add((-67.07684));
      Complex complex6 = Complex.NaN;
      complex5.INF.add(complex6);
      Complex complex7 = complex5.INF.sqrt1z();
      complex7.NaN.log();
      complex5.ZERO.conjugate();
      Complex.valueOf(961.3704066786888);
      complex1.multiply((-2450.10575027));
      complex4.multiply(3003);
      Complex complex8 = complex0.subtract((-67.07684));
      Complex complex9 = complex8.negate();
      complex9.ONE.add(6.283185307179586);
      Complex complex10 = Complex.valueOf((-2808.0));
      complex8.add(complex10);
      complex10.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.toString();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex2.ZERO.createComplex(531.5420372, 0.0);
      complex3.INF.exp();
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex2.NaN.reciprocal();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.I.divide(0.0);
      complex6.ONE.add(complex4);
      Complex complex7 = complex0.add(5084.08931024);
      complex4.INF.cosh();
      Complex.valueOf(0.0);
      Complex complex8 = complex7.pow((-20.0));
      Complex complex9 = complex8.I.cosh();
      complex9.I.multiply(1579);
      complex4.sinh();
      Complex complex10 = complex5.subtract(complex0);
      complex10.INF.divide(complex1);
      Complex complex11 = complex10.pow(complex7);
      Complex complex12 = complex6.sqrt1z();
      complex12.INF.reciprocal();
      Complex complex13 = complex6.sin();
      complex13.ZERO.getField();
      complex4.multiply(complex12);
      complex11.tanh();
      complex1.isNaN();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(0.0, 2.0169027167169864E-7);
      complex0.abs();
      complex0.hashCode();
      complex0.equals(complex1);
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex2.divide(complex1);
      complex3.ZERO.asin();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.multiply(1);
      complex2.NaN.tan();
      complex2.I.cos();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex.valueOf(0.3757305145263672, 0.0);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex3.ONE.sqrt1z();
      complex0.getArgument();
      Complex complex6 = complex0.I.sqrt();
      complex1.ZERO.getArgument();
      complex6.INF.nthRoot(1);
      complex4.NaN.log();
      complex4.NaN.asin();
      complex6.INF.exp();
      Complex complex7 = complex3.createComplex(1.5959614205422845E-225, 1.5959614205422845E-225);
      complex5.getImaginary();
      complex4.asin();
      complex3.sin();
      Complex complex8 = Complex.valueOf(0.0, (-2392.94301809711));
      complex3.readResolve();
      complex1.equals(complex4);
      Complex complex9 = complex8.sqrt1z();
      complex7.divide(complex9);
      complex9.readResolve();
      complex9.getReal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1605.167));
      complex0.divide(complex1);
      Complex complex2 = complex0.I.sqrt();
      complex2.NaN.asin();
      Complex complex3 = complex0.I.cosh();
      Complex complex4 = complex3.log();
      complex0.ONE.getField();
      Complex complex5 = complex0.acos();
      Complex complex6 = complex5.pow(complex2);
      Complex complex7 = complex6.ZERO.sin();
      Complex complex8 = complex6.tan();
      complex8.getImaginary();
      complex7.log();
      complex6.acos();
      complex2.atan();
      complex7.hashCode();
      Complex complex9 = complex4.sinh();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.I.multiply(complex1);
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.cos();
      complex2.I.multiply(5701);
      complex1.hashCode();
      complex0.add(complex2);
      Complex complex3 = Complex.valueOf((-1.0), (-1.0));
      complex3.cosh();
      Complex complex4 = complex2.pow(complex3);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex((-1264.477127885894), (-1264.477127885894));
      Complex complex2 = complex1.NaN.tan();
      complex0.getArgument();
      complex0.toString();
      complex2.subtract(complex1);
      complex0.multiply((-2772.11));
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.I.atan();
      complex2.NaN.negate();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex0.createComplex((-785.9763481), (-785.9763481));
      Complex complex5 = complex4.multiply(1073.908422136);
      Complex complex6 = complex3.NaN.multiply(complex4);
      complex1.ONE.toString();
      Complex complex7 = complex0.NaN.sqrt1z();
      Complex complex8 = complex7.ONE.sqrt();
      Complex complex9 = complex5.ONE.sqrt1z();
      Complex complex10 = Complex.valueOf((-785.9763481));
      complex5.NaN.createComplex((-785.9763481), (-785.9763481));
      Complex complex11 = complex4.divide(complex0);
      Complex complex12 = complex11.I.tan();
      Complex complex13 = complex11.ONE.exp();
      complex5.subtract(complex3);
      Complex complex14 = complex3.asin();
      complex14.hashCode();
      complex9.isInfinite();
      complex5.tanh();
      Complex complex15 = complex2.tanh();
      complex15.equals("");
      complex3.multiply(complex10);
      Complex.valueOf(0.0);
      Complex complex16 = complex13.sqrt();
      Complex complex17 = complex6.cos();
      complex17.isNaN();
      complex17.add(complex8);
      complex10.add(complex16);
      complex17.add(complex4);
      complex16.add(complex9);
      complex12.divide(1073.908422136);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ONE.negate();
      complex2.INF.multiply(2.2164316177368164);
      Complex complex3 = complex1.I.sin();
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex4.NaN.asin();
      complex1.NaN.log();
      complex0.INF.sqrt();
      Complex complex6 = Complex.valueOf(2179.1166442559047);
      complex6.hashCode();
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex0.sinh();
      complex8.NaN.tanh();
      complex8.getArgument();
      complex8.getImaginary();
      complex7.sqrt();
      complex5.cosh();
      complex6.isNaN();
      Complex.valueOf(Double.NaN, 0.0);
      complex1.multiply(86);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex0.ONE.multiply(37);
      Complex complex3 = complex0.I.add((-1621.660754890007));
      Complex complex4 = complex0.createComplex((-2516.041170201124), (-1734.345352593911));
      complex4.I.atan();
      Complex complex5 = complex0.negate();
      complex5.I.sqrt1z();
      Complex complex6 = complex2.pow(2841.57);
      complex6.NaN.conjugate();
      complex4.ONE.sinh();
      complex6.NaN.toString();
      Complex complex7 = complex1.INF.divide(complex5);
      complex7.I.log();
      Complex complex8 = Complex.valueOf(0.0);
      complex4.ONE.tanh();
      Complex complex9 = complex3.exp();
      complex4.isNaN();
      Complex complex10 = complex9.tan();
      complex1.reciprocal();
      complex9.NaN.reciprocal();
      Complex complex11 = complex8.cos();
      complex11.sin();
      complex2.tanh();
      Complex complex12 = complex10.tan();
      complex12.ZERO.tan();
      complex8.multiply(2.38873950760028E-116);
      complex4.reciprocal();
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = Complex.ONE;
      complex3.ONE.readResolve();
      complex0.pow(complex3);
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex1.pow((-1.0));
      complex4.getImaginary();
      Complex complex6 = complex0.ONE.subtract(complex5);
      complex6.multiply((-800.3));
      Complex complex7 = complex1.createComplex(662.692, (-800.3));
      complex0.ONE.negate();
      complex7.multiply(1156);
      Complex complex8 = complex4.add((-330.73357));
      complex8.hashCode();
      complex2.ONE.asin();
      Complex complex9 = complex2.add(119.02319035542479);
      Complex complex10 = complex4.tanh();
      complex5.equals(complex9);
      complex10.divide(2.13777494430542);
      complex0.subtract(662.692);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.acos();
      complex0.ZERO.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex1.atan();
      complex1.readResolve();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.NaN.pow(complex2);
      complex6.readResolve();
      complex6.isNaN();
      complex6.ZERO.sinh();
      Complex complex8 = complex1.ONE.sinh();
      complex0.ONE.multiply(complex1);
      complex8.INF.add(20.0);
      complex5.getField();
      complex3.ZERO.negate();
      Complex complex9 = complex1.multiply(complex4);
      complex9.NaN.divide(complex1);
      complex2.add(20.0);
      complex4.multiply(3024.56394485004);
      Complex complex10 = complex1.log();
      complex10.I.getArgument();
      Complex complex11 = complex3.sqrt1z();
      complex11.ZERO.readResolve();
      Complex complex12 = complex11.I.divide(1.5707963267948966);
      Complex complex13 = complex12.I.divide(20.0);
      Complex complex14 = Complex.NaN;
      complex10.NaN.add(complex14);
      complex2.pow(complex1);
      complex3.divide(complex4);
      Complex complex15 = complex9.pow(complex7);
      complex15.INF.readResolve();
      complex10.log();
      complex7.cosh();
      complex13.tanh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-416.290478259779));
      Complex complex1 = new Complex(610.00659);
      Complex complex2 = complex0.subtract(complex1);
      complex2.NaN.negate();
      Complex complex3 = complex0.INF.log();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      complex1.ONE.cosh();
      Complex.valueOf(610.00659);
      complex4.I.multiply(complex2);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2241.47868815534), (-3153.1767));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.INF.subtract(complex2);
      complex3.I.sin();
      Complex complex4 = complex0.subtract(complex1);
      complex4.ONE.acos();
      complex4.reciprocal();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.createComplex(0.0, 8.62880163941313E-60);
      Complex complex2 = complex0.I.negate();
      complex0.reciprocal();
      Complex complex3 = complex0.conjugate();
      complex3.divide(complex1);
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.INF.divide(complex1);
      complex2.ONE.toString();
      Complex complex3 = Complex.NaN;
      complex0.NaN.pow(complex3);
      Complex complex4 = complex0.conjugate();
      complex4.ONE.getArgument();
      complex0.log();
      complex4.tan();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1211.3865781295));
      complex0.pow((-1211.3865781295));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ONE.exp();
      complex3.I.toString();
      complex0.negate();
      complex1.NaN.sqrt();
      complex4.abs();
      complex0.add(complex2);
      complex4.getArgument();
      complex0.createComplex(Double.POSITIVE_INFINITY, 2.718281828459045);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex1.ZERO.createComplex((-1704.66), 0.0);
      Complex complex4 = complex3.NaN.pow((-1704.66));
      Complex complex5 = complex4.ONE.sqrt();
      complex5.INF.getArgument();
      Complex complex6 = complex4.NaN.multiply((-2633));
      Complex complex7 = complex6.subtract(0.0);
      Complex complex8 = complex7.ZERO.log();
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex7.INF.sin();
      Complex complex10 = complex3.NaN.acos();
      List<Complex> list0 = complex9.ONE.nthRoot(857);
      assertTrue(list0.contains(complex1));
      assertEquals(857, list0.size());
      
      Complex complex11 = complex9.NaN.reciprocal();
      complex11.ZERO.createComplex((-2633), (-2633));
      assertSame(complex6, complex10);
      
      complex0.isInfinite();
      Complex complex12 = complex0.exp();
      Complex complex13 = complex12.sqrt();
      assertEquals(0.47942553860420295, complex13.getImaginary(), 0.01);
      
      complex4.getImaginary();
      Complex complex14 = Complex.valueOf(1.0, (-1704.66));
      Complex.valueOf(0.7853981633974483);
      complex0.readResolve();
      Complex complex15 = complex1.cosh();
      Complex complex16 = complex15.I.add(complex14);
      assertEquals((-1703.66), complex16.getImaginary(), 0.01);
      assertEquals(1.0, complex16.getReal(), 0.01);
      
      Complex complex17 = complex0.sqrt1z();
      assertEquals(1.4142135623730951, complex17.getReal(), 0.01);
      
      Complex complex18 = complex12.multiply(2782);
      assertEquals(1503.121014925165, complex18.getReal(), 0.01);
      
      Complex complex19 = complex4.multiply((-1705.707755));
      assertFalse(complex19.equals((Object)complex8));
      assertSame(complex19, complex11);
      assertNotSame(complex0, complex2);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-646.678497));
      Complex complex1 = complex0.I.pow(0.0);
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.NaN.negate();
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      
      Complex complex4 = complex0.add((-956.99810334));
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.ZERO.divide((-646.678497));
      complex5.ZERO.readResolve();
      Complex complex7 = complex5.cosh();
      assertSame(complex7, complex3);
      
      double double0 = complex4.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = complex5.abs();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = complex6.toString();
      assertEquals("(-0.0, -0.0)", string0);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      
      Complex complex8 = complex1.conjugate();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.getField();
      Complex complex1 = complex0.negate();
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      complex0.getField();
      Complex complex2 = complex0.tan();
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }
}
