/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:39:34 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-120581.5625);
      Complex complex0 = Complex.valueOf((-120581.5625));
      int int0 = 2045398591;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.cos();
      complex0.nthRoot(2045398591);
      complex2.INF.createComplex(int0, int0);
      Complex complex3 = complex0.tanh();
      double double1 = (-241.639920875);
      complex3.INF.divide(double1);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex5.ZERO.divide(double0);
      complex2.sin();
      double double2 = 1.4259627797225802E-292;
      Complex complex7 = complex0.pow(double2);
      complex5.sinh();
      complex5.I.multiply(complex0);
      Complex complex8 = complex5.asin();
      double double3 = (-1.3980904496455115E-131);
      double double4 = 491.7;
      Complex complex9 = Complex.valueOf(double3, double4);
      complex4.toString();
      complex4.divide(complex9);
      complex1.log();
      Complex complex10 = complex7.subtract(double0);
      Complex complex11 = complex10.NaN.cos();
      Complex complex12 = Complex.ONE;
      complex11.I.multiply(complex12);
      complex5.divide(complex0);
      complex8.subtract((double) int0);
      complex6.tanh();
      complex11.divide(double3);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2735.8776546));
      Complex complex1 = complex0.INF.multiply((-945));
      Complex complex2 = complex1.I.add((double) (-945));
      complex2.ONE.multiply(complex1);
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.createComplex(0.2786078453063965, 0.2786078453063965);
      Object object0 = new Object();
      complex0.equals("org.apache.commons.math3.complex.Complex");
      complex0.toString();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex2.divide(20.0);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.ONE.divide(complex0);
      complex3.INF.sqrt();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.I.add((-486.708));
      Complex complex6 = complex5.ONE.add(20.0);
      Complex complex7 = complex2.multiply(469.0);
      complex7.ONE.abs();
      complex2.INF.divide((-486.708));
      Complex complex8 = Complex.valueOf(Double.NaN, 1915.0);
      complex8.I.add((-486.708));
      Complex.valueOf(469.0, 1.0);
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex7.cos();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex10.I.add(complex11);
      complex0.multiply(complex7);
      Complex complex13 = Complex.valueOf(1.0, 978.2075);
      Complex.valueOf(3252.0);
      complex11.getField();
      complex0.sqrt1z();
      complex1.tanh();
      complex9.tanh();
      complex7.readResolve();
      complex12.pow(complex13);
      complex10.exp();
      complex6.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ZERO;
      Complex.valueOf((-781.63827), (-781.63827));
      Complex complex3 = new Complex((-781.63827), (-781.63827));
      Complex complex4 = complex3.createComplex(20.0, Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex1.equals(object0);
      complex2.toString();
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex5.ZERO.divide((-781.63827));
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-347.25));
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
      complex1.divide((-347.25));
      Complex complex2 = Complex.ZERO;
      complex2.createComplex((-347.25), 20.0);
      Object object0 = new Object();
      Complex complex3 = Complex.ZERO;
      complex0.equals(complex3);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 20.0);
      complex4.toString();
      Complex complex5 = new Complex(17, 20.0);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-347.25));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex1.nthRoot(17);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.pow((-347.25));
      complex2.multiply(complex0);
      Complex complex6 = complex5.log();
      Complex complex7 = Complex.ONE;
      Complex complex8 = new Complex((-347.25), Double.NaN);
      complex8.divide(complex6);
      complex5.exp();
      complex0.pow(3797.063191);
      complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.9546569053899882E-262), (-1.9546569053899882E-262));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.sqrt1z();
      complex0.asin();
      Complex complex3 = complex1.pow((-1.9546569053899882E-262));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = new Complex(82.021094, (-20.0));
      complex3.log();
      complex4.equals(complex0);
      complex5.atan();
      Complex complex7 = complex0.tanh();
      complex7.INF.multiply((-20.0));
      Complex complex8 = new Complex(2.0);
      complex3.toString();
      Complex complex9 = Complex.ONE;
      complex6.tan();
      complex4.tanh();
      complex2.subtract(complex0);
      Complex.valueOf(82.021094);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(120581.5625);
      Complex complex1 = new Complex(120581.5625, 120581.5625);
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex1.I.pow(complex0);
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex1.reciprocal();
      complex5.ZERO.readResolve();
      Complex complex6 = complex5.cosh();
      complex4.INF.log();
      Complex complex7 = complex6.I.conjugate();
      Complex complex8 = complex4.multiply(120581.5625);
      Complex complex9 = complex1.tan();
      Complex complex10 = complex0.conjugate();
      Complex complex11 = complex10.NaN.pow(120581.5625);
      complex10.INF.acos();
      complex6.NaN.multiply(complex3);
      Complex complex12 = complex8.tan();
      Complex complex13 = complex0.sqrt();
      complex13.toString();
      complex8.createComplex(120581.5625, 120581.5625);
      complex7.multiply(120581.5625);
      Complex complex14 = complex9.sin();
      complex12.multiply(complex3);
      complex7.createComplex(120581.5625, (-681.6928044318));
      complex2.tanh();
      Complex complex15 = complex0.sqrt();
      complex11.multiply((-681.6928044318));
      complex15.log();
      Complex.valueOf(2.3093822298965837E116, (-120581.5625));
      complex14.asin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.9546569053899882E-262), (-1.9546569053899882E-262));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(complex0);
      complex2.log();
      complex0.nthRoot(2541);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-1471.27272));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex(823.25795, 823.25795);
      Complex complex4 = complex3.I.sqrt();
      complex2.subtract(complex3);
      Complex complex5 = complex1.sqrt();
      complex3.sqrt1z();
      Complex complex6 = complex4.asin();
      complex6.pow((-20.0));
      Complex complex7 = complex4.multiply(complex3);
      Complex complex8 = complex0.log();
      Complex complex9 = Complex.ONE;
      complex8.divide(complex5);
      complex7.exp();
      complex2.pow(823.25795);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-20.0), (-1471.27272));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(823.25795, 823.25795);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.multiply(37);
      Complex.valueOf(611.0, 2.0);
      Complex complex5 = new Complex((-1.0));
      complex2.divide(complex4);
      Complex complex6 = Complex.valueOf((double) 37);
      Complex complex7 = complex3.subtract(620.3);
      Complex complex8 = Complex.valueOf((double) 37, 1.244950238958056E-7);
      complex8.equals(complex1);
      complex0.getImaginary();
      Complex complex9 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex9.asin();
      complex3.isNaN();
      Complex complex10 = complex5.sinh();
      complex3.asin();
      complex0.nthRoot(759);
      complex6.divide(complex7);
      complex10.tan();
      Complex complex11 = Complex.ONE;
      complex11.add((-776.48));
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(4386.01, 4386.01);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.acos();
      complex1.I.nthRoot(17);
      Complex complex2 = complex1.NaN.pow(4386.01);
      Complex complex3 = complex0.subtract(1219.865);
      complex3.subtract(933.1097477531783);
      Complex complex4 = complex2.sqrt();
      complex0.cos();
      Complex.valueOf((-1.6455301428702371E7));
      Complex complex5 = Complex.ONE;
      complex4.equals(complex5);
      complex0.sinh();
      complex2.multiply(17);
      complex3.toString();
      complex1.multiply(1372);
      try { 
        complex4.nthRoot((-1005));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,005
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-347.25));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex1.nthRoot(17);
      Complex complex3 = Complex.I;
      complex3.multiply(17);
      Complex complex4 = new Complex((-7296967.695493149));
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = Complex.valueOf((-7296967.695493149));
      complex3.subtract(4.749161912444532);
      complex0.equals("FIRST_ROWS_NOT_INITIALIZED_YET");
      complex5.getImaginary();
      Complex complex7 = Complex.I;
      complex7.isNaN();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.asin();
      complex9.multiply((-3109));
      try { 
        complex6.nthRoot((-3109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,109
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(4386.01, 4386.01);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.acos();
      complex1.I.nthRoot(17);
      Complex complex2 = complex1.NaN.pow(4386.01);
      Complex complex3 = complex0.subtract(1219.865);
      Complex complex4 = complex3.subtract(933.1097477531783);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(37);
      Complex complex7 = Complex.valueOf(1.244950238958056E-7, 1.244950238958056E-7);
      Complex complex8 = new Complex((-1005));
      complex8.divide(complex4);
      Complex.valueOf(1.244950238958056E-7);
      complex0.subtract(1597.8028123895);
      complex1.equals(complex7);
      complex1.getImaginary();
      Complex complex9 = complex3.asin();
      complex1.isNaN();
      complex2.sinh();
      Complex complex10 = complex3.asin();
      complex1.multiply((-1005));
      complex9.nthRoot(2588);
      Complex complex11 = complex6.divide(complex8);
      complex10.tan();
      complex11.add(1587.6);
      complex11.sqrt();
      try { 
        complex7.nthRoot((-2146803287));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,146,803,287
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-347.25));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex1.nthRoot(17);
      complex2.sqrt();
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.valueOf(1.053956282234684E82);
      complex1.equals(complex4);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.INF.multiply(17);
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex3.asin();
      Complex complex9 = complex8.multiply(17);
      Complex complex10 = Complex.INF;
      complex10.nthRoot(17);
      complex2.divide(complex4);
      complex9.tan();
      complex4.add((double) 17);
      complex7.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-1471.27272));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex(823.25795, 823.25795);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = complex5.subtract(complex0);
      complex1.exp();
      Complex complex7 = complex3.sqrt1z();
      complex4.multiply(complex6);
      Complex complex8 = Complex.valueOf(7.200489472E10, (-2113.4342203));
      Complex complex9 = complex8.acos();
      complex7.add((-2113.4342203));
      complex3.abs();
      complex7.abs();
      Complex complex10 = Complex.NaN;
      complex10.exp();
      complex3.reciprocal();
      Complex complex11 = Complex.valueOf(430.2);
      complex11.multiply((-2477.4674));
      complex11.getArgument();
      Complex complex12 = Complex.valueOf((-3441.0));
      complex12.acos();
      complex9.abs();
      complex6.getField();
      Complex complex13 = Complex.NaN;
      Complex complex14 = complex13.tanh();
      complex14.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 1883.031750967939;
      Complex complex0 = Complex.valueOf(8.102596272284885, 8.102596272284885);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.abs();
      complex0.getImaginary();
      complex0.hashCode();
      complex0.tanh();
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.multiply(complex2);
      complex3.acos();
      Complex complex4 = Complex.NaN;
      complex4.add((-1707.48850528));
      complex2.abs();
      complex1.abs();
      Complex complex5 = complex3.exp();
      complex2.reciprocal();
      complex3.multiply(0.39157733228126257);
      complex3.getArgument();
      Complex complex6 = complex3.acos();
      complex0.abs();
      Complex complex7 = Complex.ZERO;
      complex7.getField();
      complex5.tanh();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-1471.27272));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex(823.25795, 823.25795);
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex2.subtract(complex3);
      complex5.subtract(complex0);
      Complex complex6 = (Complex)complex1.I.readResolve();
      Complex complex7 = complex2.createComplex(20.0, (-781.63827));
      complex1.equals(complex3);
      Complex complex8 = Complex.valueOf((-4056.513580490317));
      complex8.asin();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.cosh();
      complex10.ONE.getField();
      complex9.isNaN();
      complex5.sinh();
      complex4.asin();
      complex9.multiply(1);
      Complex complex11 = Complex.ZERO;
      complex11.nthRoot(1);
      complex7.divide(complex6);
      complex3.tan();
      complex7.add((-781.63827));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(4386.01, 4386.01);
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.acos();
      complex1.I.nthRoot(17);
      Complex complex2 = complex1.NaN.pow(4386.01);
      Complex complex3 = complex0.subtract(1219.865);
      Complex complex4 = complex3.subtract(933.1097477531783);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(37);
      Complex complex7 = Complex.valueOf(1.244950238958056E-7, 1.244950238958056E-7);
      Complex complex8 = new Complex((-1005));
      Complex complex9 = complex8.divide(complex4);
      Complex.valueOf(1.244950238958056E-7);
      complex0.subtract(1597.8028123895);
      complex1.equals(complex7);
      complex9.cosh();
      complex1.getField();
      complex3.isNaN();
      complex2.conjugate();
      Complex complex10 = complex6.sin();
      Complex complex11 = Complex.I;
      complex1.divide((double) 37);
      complex10.getImaginary();
      complex6.multiply((-26));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.cos();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(4386.01, (-1651.5161111935463));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.acos();
      complex1.I.nthRoot(17);
      Complex complex2 = complex1.NaN.pow(4386.01);
      Complex complex3 = complex0.subtract(1219.865);
      Complex complex4 = complex3.subtract(933.1097477531783);
      Complex complex5 = Complex.I;
      complex5.multiply(37);
      Complex complex6 = Complex.valueOf(1.244950238958056E-7, 1.244950238958056E-7);
      Complex complex7 = new Complex((-1005));
      Complex complex8 = complex7.divide(complex4);
      Complex complex9 = Complex.valueOf(1.244950238958056E-7);
      complex6.I.createComplex(1.244950238958056E-7, 1397.49548);
      Complex complex10 = complex0.subtract(1597.8028123895);
      complex1.equals(complex6);
      complex1.getImaginary();
      complex3.asin();
      complex1.isNaN();
      Complex complex11 = complex2.sinh();
      complex10.sin();
      Complex complex12 = Complex.I;
      complex11.divide((double) 37);
      complex2.getImaginary();
      complex9.multiply(17);
      Complex complex13 = Complex.NaN;
      complex8.add(complex13);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(4386.01, (-1651.5161111935463));
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(1368.2803605785323, (-1.0));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(1219.865);
      Complex complex4 = complex1.negate();
      complex3.readResolve();
      complex2.nthRoot(1);
      Complex complex5 = Complex.valueOf((double) (-632));
      Complex complex6 = complex5.multiply(1554);
      complex6.ZERO.getArgument();
      complex4.divide((-1.0));
      Complex complex7 = complex4.atan();
      complex3.exp();
      complex0.getArgument();
      Complex complex8 = complex7.log();
      complex8.asin();
      complex4.toString();
      complex8.tan();
      complex8.tanh();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3410181999206543, 2.3410181999206543);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ZERO.negate();
      complex2.INF.hashCode();
      complex2.INF.divide(complex1);
      complex1.INF.pow((-1.0));
      Complex complex3 = complex1.ZERO.negate();
      Object object0 = complex3.NaN.readResolve();
      complex1.multiply(2.0);
      complex3.ONE.abs();
      Complex.valueOf(1596.4155691546011);
      Complex complex4 = Complex.valueOf(2.2868466674913266E-7, 1596.4155691546011);
      complex4.multiply(311);
      Complex complex5 = complex1.exp();
      object0.toString();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = new Complex((-197.9496), 973.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = new Complex((-197.9496), 2.3616843223571777);
      complex5.readResolve();
      complex4.toString();
      Complex complex6 = Complex.INF;
      complex6.tan();
      complex6.createComplex(2.3616843223571777, (-3389.8549));
      Object object0 = complex5.readResolve();
      complex1.equals(object0);
      Complex complex7 = Complex.valueOf((-197.9496));
      Complex complex8 = Complex.INF;
      complex8.asin();
      Complex complex9 = Complex.NaN;
      complex4.cosh();
      complex0.isNaN();
      complex9.conjugate();
      complex8.sin();
      Complex complex10 = Complex.I;
      complex3.divide(1.0);
      complex7.getImaginary();
      Complex complex11 = Complex.ONE;
      complex11.multiply(935);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-1471.27272));
      Complex.valueOf((-20.0));
      Complex complex2 = Complex.I;
      complex1.hashCode();
      Complex complex3 = complex2.divide((-20.0));
      complex0.divide(complex3);
      Complex complex4 = Complex.ONE;
      complex4.exp();
      complex3.pow(0.39853681533838686);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
      Complex complex2 = complex1.atan();
      Complex complex3 = new Complex(823.25795, (-15365.799934920407));
      Complex complex4 = complex0.sqrt();
      complex2.subtract(complex4);
      Complex complex5 = null;
      try { 
        complex4.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-7682.9));
      Complex complex2 = Complex.valueOf((-7682.9));
      complex0.NaN.multiply(complex2);
      Complex complex3 = complex2.multiply((-1856.609));
      complex3.getArgument();
      complex2.acos();
      complex2.abs();
      Complex complex4 = Complex.valueOf((-7682.9));
      complex4.getField();
      complex1.tanh();
      complex2.conjugate();
      complex2.getReal();
      Complex complex5 = complex1.cosh();
      Complex complex6 = Complex.valueOf((-958.9));
      complex5.multiply(complex6);
      Complex complex7 = complex4.multiply(complex0);
      complex7.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.getImaginary();
      Complex complex1 = complex0.subtract(824.89);
      complex1.INF.hashCode();
      Complex complex2 = complex0.ONE.tanh();
      complex1.INF.getField();
      complex1.exp();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex4.NaN.acos();
      Complex complex5 = complex4.add(1.0);
      Complex complex6 = Complex.ONE;
      complex6.abs();
      complex3.abs();
      Complex complex7 = complex4.exp();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex5.getArgument();
      Complex complex10 = complex5.acos();
      complex6.abs();
      complex8.getField();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      complex11.tanh();
      complex6.conjugate();
      complex7.getReal();
      complex9.cosh();
      complex3.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2880.9907263084833), 7296967.695493149);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex2.NaN.subtract(7296967.695493149);
      Complex complex4 = complex1.ONE.sinh();
      complex4.NaN.subtract((-2880.9907263084833));
      complex3.ZERO.getArgument();
      complex3.ONE.subtract(20.0);
      Complex complex5 = complex1.reciprocal();
      Complex.valueOf((-1356.487053631), 20.0);
      Complex complex6 = complex0.divide(complex5);
      complex2.readResolve();
      complex0.tan();
      complex2.ZERO.exp();
      Complex complex7 = complex1.tan();
      complex7.subtract(complex2);
      complex6.tan();
      complex7.nthRoot(13);
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.getField();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.I.createComplex((-20.0), (-20.0));
      Complex complex4 = complex3.INF.sin();
      complex4.INF.acos();
      Complex complex5 = Complex.valueOf(0.25239890813827515);
      complex5.INF.divide(complex2);
      complex0.multiply(complex1);
      try { 
        complex0.ONE.nthRoot((-1182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,182
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(4386.01, (-1651.5161111935463));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.pow(4559.803606);
      complex3.subtract(complex0);
      complex3.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(4386.01, (-1651.5161111935463));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.acos();
      complex1.I.nthRoot(17);
      Complex complex2 = complex1.NaN.pow(4386.01);
      Complex complex3 = complex0.subtract(1219.865);
      Complex complex4 = complex3.subtract(933.1097477531783);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(37);
      Complex complex7 = Complex.valueOf(1.244950238958056E-7, 1.244950238958056E-7);
      Complex complex8 = new Complex((-1005));
      complex8.divide(complex4);
      Complex.valueOf(1.244950238958056E-7);
      complex0.subtract(1597.8028123895);
      complex1.equals(complex7);
      complex1.getImaginary();
      Complex complex9 = complex3.asin();
      complex1.isNaN();
      complex2.sinh();
      Complex complex10 = complex3.asin();
      complex1.multiply((-1005));
      complex9.nthRoot(2588);
      Complex complex11 = complex6.divide(complex8);
      complex10.tan();
      complex11.add(1587.6);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-1471.27272));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = new Complex(823.25795, 823.25795);
      complex4.I.sqrt();
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex5.subtract(complex2);
      complex1.I.readResolve();
      complex5.toString();
      complex0.tan();
      Complex complex7 = complex3.createComplex(20.0, (-781.63827));
      complex1.equals(complex4);
      Complex complex8 = Complex.valueOf((-4056.513580490317));
      complex8.asin();
      Complex complex9 = Complex.NaN;
      complex9.cosh();
      complex9.isNaN();
      complex6.conjugate();
      complex3.sin();
      Complex complex10 = Complex.I;
      complex10.divide((-1471.27272));
      complex7.getImaginary();
      complex1.multiply(935);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = complex1.multiply((-794));
      complex3.reciprocal();
      Complex complex4 = complex3.subtract((double) (-532));
      complex2.cosh();
      complex4.log();
      complex2.multiply(1170.511868);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.add(6.283185307179586);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex0.multiply(complex3);
      Complex complex9 = complex1.createComplex(0.0, 2039.1);
      Complex complex10 = complex0.add(6.283185307179586);
      complex10.ONE.abs();
      complex6.acos();
      complex6.subtract(781.63827);
      Complex complex11 = Complex.valueOf(1.0, 1.3144752979278564);
      complex7.log();
      complex8.log();
      complex9.cos();
      complex4.reciprocal();
      complex4.add(Double.NaN);
      Complex.valueOf(5837.7305508974);
      complex11.multiply((-2737));
      Complex.valueOf(781.63827);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-622.319008596), 1600.3);
      complex0.getImaginary();
      complex0.isInfinite();
      Complex complex1 = complex0.multiply(1157);
      complex0.reciprocal();
      Complex complex2 = complex1.subtract(1600.3);
      Complex complex3 = complex2.cosh();
      complex2.getArgument();
      Complex complex4 = complex0.log();
      complex0.multiply(4263.77);
      complex4.reciprocal();
      complex0.pow(complex1);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add((-2619.369133458255));
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.add(3.150242850860434E59);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex4.acos();
      Complex complex7 = Complex.valueOf((-5467.867356958035));
      complex5.subtract(20.0);
      complex3.hashCode();
      complex2.getReal();
      complex7.add(complex0);
      Complex complex8 = Complex.INF;
      complex8.createComplex((-1265.5264218317586), Double.NaN);
      Complex complex9 = Complex.I;
      complex9.nthRoot(2862);
      complex6.readResolve();
      complex5.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.150242850860434E59, 3.150242850860434E59);
      complex0.abs();
      complex0.getImaginary();
      Complex complex1 = complex0.subtract(4.45511616445571E59);
      complex1.hashCode();
      Complex complex2 = complex1.tanh();
      complex2.getField();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex0.acos();
      complex4.ONE.multiply(complex5);
      Complex complex7 = complex3.add(3166.1450000000004);
      complex6.abs();
      Complex complex8 = Complex.valueOf(3.150242850860434E59, (-13.5949243188));
      complex8.abs();
      Complex complex9 = complex6.exp();
      complex9.reciprocal();
      Complex complex10 = Complex.ZERO;
      complex10.multiply((-20.0));
      complex7.getArgument();
      complex9.acos();
      Complex complex11 = new Complex(3166.1450000000004);
      complex11.abs();
      Complex complex12 = Complex.ONE;
      complex12.getField();
      Complex complex13 = complex10.tanh();
      complex0.conjugate();
      complex13.getReal();
      complex3.cosh();
      complex1.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1870.2747616333784));
      complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex5.NaN.atan();
      complex1.toString();
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.NaN.asin();
      complex7.ONE.divide(0.0);
      complex6.divide(complex3);
      complex8.getArgument();
      complex6.tanh();
      complex0.divide(complex2);
      complex8.reciprocal();
      complex8.divide(1870.2747616333784);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(4386.01, (-318.8));
      Complex complex2 = Complex.ZERO;
      complex0.INF.tan();
      double double0 = 8.208715337901827E-9;
      Complex complex3 = Complex.valueOf(8.208715337901827E-9);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.add(complex4);
      double double1 = 1620.1533688;
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.INF;
      complex0.asin();
      complex5.pow(8.123105625617661);
      complex0.multiply(complex3);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.log();
      complex9.equals(complex7);
      complex6.atan();
      complex5.log();
      complex5.subtract((-1.2448938139338362E211));
      try { 
        complex6.nthRoot((-216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -216
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-1651.5161111935463), (-1651.5161111935463));
      Complex complex2 = Complex.ZERO;
      complex2.hashCode();
      Complex complex3 = complex2.acos();
      complex3.nthRoot(17);
      Complex complex4 = new Complex(951.4749497421, 2907.84);
      Complex complex5 = complex4.pow(2907.84);
      complex1.INF.hashCode();
      complex1.subtract(2.0);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex2.reciprocal();
      complex4.divide(complex6);
      complex8.getArgument();
      Complex complex10 = complex4.tanh();
      complex2.divide(complex7);
      complex10.reciprocal();
      complex9.divide(951.4749497421);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ZERO.add(6.283185307179586);
      Complex complex4 = complex3.I.asin();
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex0.multiply(complex3);
      complex1.createComplex(0.0, 2039.010232501801);
      Complex complex9 = complex0.add(6.283185307179586);
      complex9.ONE.abs();
      complex6.acos();
      Complex complex10 = complex6.subtract(781.63827);
      complex10.multiply((-1005));
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      complex9.divide(complex4);
      Complex.valueOf(781.63827);
      Complex complex11 = complex10.subtract((-183.0));
      complex6.equals(complex10);
      complex7.getImaginary();
      complex8.asin();
      complex11.isNaN();
      complex5.sinh();
      Complex complex12 = new Complex(0.0, (-1005));
      complex1.multiply((-1005));
      complex11.nthRoot(2588);
      complex6.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.getImaginary();
      Complex complex1 = complex0.subtract(824.89);
      complex1.INF.hashCode();
      Complex complex2 = complex0.ONE.tanh();
      complex1.INF.getField();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      Complex complex6 = complex5.NaN.acos();
      Complex complex7 = complex4.add(Double.POSITIVE_INFINITY);
      complex7.abs();
      complex7.abs();
      complex1.INF.exp();
      complex5.subtract(Double.NaN);
      complex7.exp();
      complex6.tanh();
      Object object0 = new Object();
      complex0.equals(complex6);
      Complex complex8 = Complex.valueOf(20.0, Double.NaN);
      complex5.isInfinite();
      complex8.cos();
      complex6.multiply(344);
      complex2.toString();
      complex1.createComplex(0.5606071061124398, 0.0);
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3410181999206543, 2.3410181999206543);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ZERO.negate();
      complex2.INF.divide(complex1);
      Complex complex3 = complex1.INF.pow((-1.0));
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = (Complex)complex4.NaN.readResolve();
      complex0.ONE.nthRoot(1);
      complex1.ZERO.asin();
      Complex complex6 = complex0.multiply((-632));
      complex3.add(20.0);
      complex5.atan();
      complex1.acos();
      Complex complex7 = Complex.valueOf((-1.0));
      complex3.subtract((double) 1);
      complex3.hashCode();
      complex6.getReal();
      complex7.add(complex3);
      Complex complex8 = Complex.valueOf((double) 1);
      complex8.INF.cos();
      Complex complex9 = complex8.createComplex((-632), (-20.0));
      complex4.equals(complex8);
      complex0.nthRoot(1);
      complex6.readResolve();
      complex6.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-622.319008596), 1600.3);
      complex0.getImaginary();
      complex0.isInfinite();
      Complex complex1 = complex0.add(1718.23228);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.divide(1718.23228);
      complex1.nthRoot(1346);
      Complex complex4 = complex0.atan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.tan();
      complex5.exp();
      complex0.getArgument();
      Complex complex7 = complex2.log();
      complex1.toString();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.createComplex(1.1593703222523284E-8, (-20.0));
      complex0.equals(complex6);
      complex0.asin();
      complex7.cosh();
      complex3.isNaN();
      complex7.conjugate();
      complex0.divide((double) 2864);
      complex4.getImaginary();
      complex9.multiply(1871);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.I.divide(6.283185307179586);
      complex1.ONE.toString();
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.INF.acos();
      Complex complex6 = complex4.ONE.asin();
      complex6.NaN.atan();
      complex0.abs();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex0.multiply(1073);
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex8.ZERO.pow(complex0);
      Complex complex11 = complex10.ONE.exp();
      complex11.INF.toString();
      complex8.isNaN();
      complex0.abs();
      complex9.subtract(complex1);
      Complex complex12 = complex7.subtract(20.0);
      complex8.NaN.exp();
      complex12.tanh();
      Object object0 = new Object();
      complex9.equals(object0);
      Complex complex13 = Complex.valueOf((double) 1073, 0.0);
      complex5.isInfinite();
      Complex complex14 = complex13.cos();
      complex14.multiply(1073);
      complex4.toString();
      complex1.createComplex(0.0, 1587.4051);
      complex4.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(975.2, 975.2);
      Complex complex1 = complex0.cosh();
      complex1.I.nthRoot(1286);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex2.NaN.multiply((-2631));
      Complex complex4 = complex3.ONE.exp();
      complex2.NaN.tanh();
      Complex complex5 = complex1.I.reciprocal();
      complex0.divide(complex1);
      complex0.isInfinite();
      Complex complex6 = complex1.atan();
      complex6.NaN.tan();
      complex4.cosh();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-1844.6), 0.0);
      Complex complex1 = complex0.ONE.exp();
      complex0.ONE.getArgument();
      complex0.readResolve();
      complex0.reciprocal();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.I.multiply((-2829.73008));
      Complex complex4 = complex1.NaN.log();
      complex2.sqrt1z();
      Complex complex5 = Complex.valueOf((-2829.73008));
      complex3.ZERO.sqrt1z();
      complex0.divide(4.048565732162643E78);
      Complex complex6 = complex2.multiply(complex1);
      complex6.I.toString();
      complex5.getImaginary();
      complex1.cosh();
      complex5.getField();
      complex3.add(1.096019026243815E274);
      complex4.multiply(4.048565732162643E78);
      complex1.abs();
      Complex.valueOf(2.718281828459045);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.05786345899105072, 0.0);
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.INF.asin();
      complex1.INF.toString();
      Complex complex3 = complex1.NaN.pow(complex2);
      Complex complex4 = complex0.NaN.createComplex((-2502.512553861111), 0.05786345899105072);
      complex4.ZERO.cos();
      complex1.I.cos();
      complex0.getField();
      Complex complex5 = complex1.pow((-1834.3788643730986));
      complex5.reciprocal();
      complex3.acos();
      complex4.add(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2999.254970863);
      Complex complex1 = complex0.exp();
      complex1.I.hashCode();
      complex0.nthRoot(764);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.NaN.negate();
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex0.INF.reciprocal();
      Complex complex7 = complex1.acos();
      complex0.ONE.nthRoot(1392);
      complex0.I.multiply(2999.254970863);
      complex4.sinh();
      Complex complex8 = complex1.tan();
      complex1.multiply(complex7);
      Complex complex9 = complex7.NaN.conjugate();
      complex9.NaN.multiply(complex0);
      Complex complex10 = complex9.reciprocal();
      complex10.ZERO.toString();
      Complex complex11 = complex5.cos();
      complex11.ZERO.negate();
      complex1.isInfinite();
      complex2.getReal();
      complex8.getArgument();
      Complex complex12 = complex3.cosh();
      Complex complex13 = complex12.sqrt1z();
      complex13.add(complex9);
      complex2.abs();
      complex4.tan();
      complex1.multiply(complex10);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-1471.27272));
      Complex complex2 = complex0.ZERO.divide(complex1);
      Complex complex3 = complex2.NaN.atan();
      Complex complex4 = new Complex(823.25795, 823.25795);
      complex4.I.sqrt();
      Complex complex5 = complex3.subtract(complex4);
      complex5.subtract(complex2);
      complex1.I.readResolve();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-20.0));
      complex0.createComplex(2.4920010566711426, 2.4920010566711426);
      complex1.multiply(0);
      complex1.hashCode();
      complex1.getReal();
      complex6.negate();
      complex5.acos();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      complex0.isNaN();
      complex2.ZERO.abs();
      Complex complex3 = complex0.ZERO.pow(0.0);
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.ONE.divide(complex3);
      complex6.NaN.reciprocal();
      complex2.ONE.abs();
      Complex complex7 = complex2.negate();
      Complex complex8 = complex7.add(complex1);
      Complex complex9 = Complex.valueOf(1.0);
      complex2.cos();
      complex2.INF.getField();
      Complex complex10 = complex4.cosh();
      complex10.divide(439.18691537922);
      Complex complex11 = complex10.multiply(complex2);
      complex11.NaN.reciprocal();
      complex10.divide(complex9);
      complex0.getImaginary();
      complex0.sqrt();
      complex10.getField();
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.NaN.atan();
      Complex complex3 = Complex.NaN;
      complex3.INF.pow(4559.803606);
      complex0.subtract(complex3);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1870.2747616333784));
      complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex4.INF.acos();
      complex5.NaN.atan();
      complex1.toString();
      Complex complex6 = complex0.negate();
      complex6.NaN.asin();
      complex6.ONE.divide(0.0);
      complex3.pow((-20.0));
      complex6.hashCode();
      Complex complex7 = complex2.acos();
      complex7.add((-20.0));
      complex7.multiply(872);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(4386.01, (-1651.5161111935463));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.NaN.acos();
      complex1.I.nthRoot(17);
      complex1.NaN.pow(4386.01);
      Complex complex2 = complex0.subtract(1219.865);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex2.reciprocal();
      complex6.ONE.divide(complex1);
      complex1.getArgument();
      complex4.ONE.tanh();
      complex2.ONE.divide(complex1);
      complex6.reciprocal();
      complex5.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.conjugate();
      Complex complex1 = complex0.acos();
      complex1.reciprocal();
      Complex complex2 = complex0.tanh();
      complex2.NaN.atan();
      Complex.valueOf(142.3825);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.38041436672210693, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.acos();
      complex1.ZERO.getField();
      complex0.toString();
      complex1.hashCode();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.reciprocal();
      complex1.ZERO.pow(complex0);
      complex2.hashCode();
      complex1.isInfinite();
      Complex complex5 = complex3.add((-1207.361992523));
      Complex complex6 = complex1.cosh();
      complex6.ONE.getArgument();
      Complex complex7 = complex5.add(complex4);
      complex5.I.toString();
      complex7.hashCode();
      complex7.INF.nthRoot(1385);
      complex7.getField();
      Complex complex8 = complex3.tanh();
      complex8.NaN.sinh();
      complex8.I.getArgument();
      Complex complex9 = complex4.pow((-2591.16627));
      complex9.tan();
      complex8.abs();
      complex1.sin();
      Complex.valueOf((-2591.16627));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(3.1962472803616787E178, 3.1962472803616787E178);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.exp();
      complex2.ONE.sqrt1z();
      complex1.ZERO.hashCode();
      Complex complex3 = complex0.multiply(1);
      complex3.toString();
      Complex complex4 = complex0.ZERO.sqrt1z();
      Complex complex5 = complex0.pow(complex3);
      complex5.ZERO.cosh();
      complex3.INF.exp();
      Complex complex6 = complex5.sqrt1z();
      complex6.getReal();
      complex4.INF.sinh();
      Complex complex7 = complex3.pow((double) 1);
      complex4.log();
      complex6.sinh();
      Complex complex8 = Complex.valueOf((double) 1, Double.NaN);
      Complex complex9 = complex8.I.atan();
      complex5.cosh();
      Complex complex10 = complex7.subtract(complex6);
      complex8.atan();
      complex0.cos();
      complex10.reciprocal();
      complex7.pow(1.4422595500946045);
      complex9.NaN.multiply(complex1);
      Complex complex11 = Complex.ZERO;
      complex11.cos();
      complex6.multiply(complex11);
      Complex.valueOf((-486.644));
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex(589.37450094597);
      Complex complex1 = complex0.sqrt1z();
      complex1.ONE.conjugate();
      complex1.I.abs();
      complex0.getField();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.negate();
      complex0.INF.cos();
      complex2.I.sqrt();
      Complex complex4 = Complex.valueOf(589.37450094597, 589.37450094597);
      complex4.I.log();
      complex3.log();
      Complex complex5 = complex4.cos();
      complex5.ZERO.reciprocal();
      complex4.add(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply((-2737));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-136.9535950436), (-136.9535950436));
      complex0.sqrt1z();
      Complex.valueOf((-136.9535950436), (-136.9535950436));
      complex0.readResolve();
      complex0.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.atan();
      complex1.ZERO.multiply((-532));
      complex0.reciprocal();
      complex1.subtract(20.0);
      Complex complex2 = complex0.cosh();
      complex1.getArgument();
      complex1.log();
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6197150945663452, 0.6197150945663452);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.ONE.divide(2.063924789428711);
      Complex complex4 = complex3.ZERO.tan();
      Complex complex5 = complex0.subtract(0.0);
      complex5.INF.toString();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex1.pow(complex6);
      complex3.getArgument();
      Complex complex8 = complex6.multiply(complex4);
      complex8.ONE.getArgument();
      complex6.ONE.log();
      complex2.sqrt();
      complex3.subtract(1.2897084285532175E95);
      complex6.sinh();
      Complex complex9 = complex4.acos();
      complex9.sqrt1z();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.INF.subtract((-1114.29337));
      Complex complex3 = Complex.valueOf(0.0, 64.72);
      Complex complex4 = complex1.ZERO.subtract(complex0);
      Complex complex5 = complex4.sin();
      complex5.ZERO.getField();
      complex5.INF.pow(0.0);
      complex2.NaN.getField();
      Complex complex6 = complex0.log();
      Complex complex7 = complex1.exp();
      complex7.NaN.getField();
      Complex complex8 = complex1.log();
      complex1.hashCode();
      complex6.isNaN();
      complex6.multiply((-1114.29337));
      complex3.exp();
      complex8.tanh();
      complex6.multiply((-1114.29337));
      complex7.tanh();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.nthRoot(528);
      complex0.I.abs();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.negate();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.tan();
      complex0.subtract(complex1);
      complex0.sqrt();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      complex0.getField();
      complex1.subtract(complex0);
      complex2.isInfinite();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-347.25));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.add(complex1);
      complex1.nthRoot(17);
      Complex complex3 = complex2.sqrt();
      complex1.cos();
      Complex complex4 = Complex.valueOf(1.053956282234684E82);
      complex1.equals(complex4);
      Complex complex5 = complex1.sinh();
      complex5.INF.multiply(17);
      complex3.ZERO.toString();
      complex5.multiply(17);
      complex0.nthRoot(17);
      complex3.subtract(complex0);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.toString();
      Complex complex1 = complex0.NaN.tanh();
      complex1.ONE.readResolve();
      complex0.isInfinite();
      complex0.atan();
      complex0.hashCode();
      complex0.multiply((-2498.2173250888));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex0.multiply(0.0);
      complex1.NaN.subtract(complex3);
      Complex complex4 = complex3.I.subtract(complex2);
      complex4.ONE.getArgument();
      Complex complex5 = complex3.I.tan();
      complex5.I.createComplex((-1.440995270758115E-291), 0.0);
      Complex complex6 = complex1.pow((-1.440995270758115E-291));
      complex2.cos();
      Complex complex7 = complex3.acos();
      complex4.getImaginary();
      complex7.INF.reciprocal();
      complex2.getArgument();
      complex6.atan();
      complex7.asin();
      complex7.nthRoot(1075);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.acos();
      complex0.ONE.nthRoot(20);
      Complex complex2 = complex1.I.sinh();
      complex0.ONE.getField();
      complex0.getArgument();
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.INF.tanh();
      complex0.hashCode();
      Complex complex3 = complex1.negate();
      complex3.I.sqrt1z();
      complex0.pow(complex2);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      complex0.equals("LN_MANT");
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.NaN.subtract((-7.177274244758699E-91));
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.ZERO.divide((-7.177274244758699E-91));
      Complex complex6 = complex0.tanh();
      complex6.NaN.readResolve();
      Complex complex7 = complex6.ZERO.cos();
      complex0.asin();
      Complex complex8 = complex7.multiply(356);
      Complex complex9 = complex3.multiply((-1938.156200556503));
      complex9.NaN.abs();
      complex8.conjugate();
      Complex complex10 = complex2.multiply(1);
      complex3.createComplex((-2374.6200493354063), (-1938.156200556503));
      complex10.acos();
      Complex complex11 = complex1.divide(complex8);
      complex5.sinh();
      complex11.reciprocal();
      Complex.valueOf(4.110787043867721E-160, 0.08513787388801575);
      Complex complex12 = new Complex(0.0, 0.0);
      complex9.add(complex12);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.017008920503326107, 0.017008920503326107);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.ZERO.multiply(0.017008920503326107);
      complex1.getArgument();
      Complex complex5 = complex1.exp();
      complex5.ONE.readResolve();
      complex2.multiply(complex4);
      Complex complex6 = complex3.multiply(3258);
      complex4.ZERO.multiply(complex2);
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.divide(complex7);
      Complex complex9 = complex8.ONE.multiply(complex5);
      complex4.getArgument();
      Complex complex10 = complex5.add(complex1);
      complex10.readResolve();
      Complex complex11 = complex9.createComplex(3258, 0.0);
      complex11.ZERO.cos();
      Complex complex12 = complex5.atan();
      complex6.isNaN();
      Complex complex13 = complex3.I.cos();
      Complex complex14 = complex13.acos();
      complex1.exp();
      complex6.sinh();
      complex13.ONE.conjugate();
      complex7.log();
      complex9.add(complex14);
      complex3.add(0.0);
      complex2.subtract((-3102.6259364699));
      complex12.hashCode();
      Complex complex15 = Complex.valueOf((double) 3258);
      complex15.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      double double0 = 1.0;
      Complex complex2 = complex1.I.add(1.0);
      Complex complex3 = complex1.INF.log();
      Complex complex4 = complex3.INF.cos();
      complex4.ZERO.getField();
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.valueOf(934.9046307);
      Complex complex7 = complex6.ZERO.divide(complex2);
      complex7.ZERO.cosh();
      complex5.reciprocal();
      complex6.sqrt1z();
      complex1.ONE.pow(1.0);
      Complex.valueOf(934.9046307);
      complex7.NaN.readResolve();
      complex6.negate();
      complex3.isNaN();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1082.812787, 1082.812787);
      complex0.acos();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex2.readResolve();
      Complex complex3 = new Complex(1082.812787, 1082.812787);
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = Complex.valueOf(1082.812787);
      complex3.ZERO.createComplex(0.0, 0.0);
      complex4.ZERO.toString();
      Complex complex7 = complex3.ONE.subtract(complex0);
      Complex complex8 = complex0.subtract(complex3);
      Complex complex9 = complex8.I.sin();
      complex9.I.negate();
      Complex complex10 = Complex.valueOf(1082.812787);
      complex10.ONE.tanh();
      complex8.ONE.sqrt();
      complex3.multiply(782);
      Complex complex11 = complex3.cosh();
      complex7.isNaN();
      Complex complex12 = complex0.multiply(complex3);
      complex3.INF.multiply(5.58656252899437E-8);
      complex11.ONE.subtract(complex9);
      complex12.I.sinh();
      complex6.cosh();
      Complex complex13 = complex6.subtract(1082.812787);
      Complex complex14 = complex11.tanh();
      complex14.abs();
      complex12.toString();
      complex3.getField();
      complex5.getImaginary();
      complex13.asin();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.abs();
      complex0.getImaginary();
      Complex complex1 = complex0.subtract(824.89);
      complex1.INF.hashCode();
      Complex complex2 = complex0.ONE.tanh();
      complex1.INF.getField();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ZERO.multiply(complex1);
      complex5.NaN.acos();
      Complex complex6 = complex4.add(Double.POSITIVE_INFINITY);
      complex6.abs();
      complex6.abs();
      Complex complex7 = complex1.INF.exp();
      Complex complex8 = complex7.reciprocal();
      complex8.ZERO.multiply(0.0);
      complex6.getArgument();
      Complex complex9 = complex0.ONE.acos();
      complex1.abs();
      complex7.getField();
      Complex complex10 = complex0.tanh();
      complex10.ZERO.conjugate();
      complex2.getReal();
      complex9.cosh();
      complex3.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.I.getField();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      double double0 = 3439.47325;
      Complex complex0 = new Complex(3439.47325);
      Complex complex1 = new Complex(3439.47325, 3439.47325);
      complex0.ZERO.multiply(723);
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.sin();
      complex1.I.hashCode();
      complex0.sinh();
      try { 
        complex2.nthRoot((-660));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -660
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.negate();
      complex1.toString();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1883.031750967939);
      Complex complex1 = Complex.I;
      complex1.I.hashCode();
      complex0.ZERO.divide((-882.88293));
      Complex complex2 = complex0.divide(complex1);
      complex2.exp();
      complex0.pow(1883.031750967939);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.3410181999206543, 2.3410181999206543);
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ZERO.negate();
      complex2.INF.divide(complex1);
      Complex complex3 = complex1.INF.pow((-1.0));
      Complex complex4 = complex1.ZERO.negate();
      complex4.NaN.readResolve();
      complex0.ONE.nthRoot(1);
      Complex complex5 = complex0.multiply((-632));
      complex5.ZERO.divide((-1.0));
      complex4.nthRoot(2864);
      Complex complex6 = complex2.atan();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex7.NaN.exp();
      complex6.getArgument();
      Complex complex9 = complex6.I.log();
      complex9.ZERO.toString();
      Complex complex10 = complex0.tan();
      complex10.ZERO.createComplex(20.0, (-1.0));
      complex2.equals(complex0);
      Complex complex11 = complex3.asin();
      complex1.cosh();
      complex8.isNaN();
      complex11.conjugate();
      Complex complex12 = complex3.sin();
      complex1.divide(2.022795961737854E153);
      complex12.getImaginary();
      complex6.multiply(1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex.valueOf((-2779.032503521));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.I.tan();
      complex3.ONE.sqrt1z();
      complex2.ONE.asin();
      Complex complex6 = complex4.INF.pow(1620.1533688);
      Complex complex7 = complex3.multiply(complex4);
      complex7.ZERO.log();
      complex0.equals(complex4);
      complex2.INF.atan();
      complex2.log();
      complex3.ZERO.subtract(566.3976202);
      complex2.nthRoot(17);
      complex6.createComplex(1620.1533688, Double.POSITIVE_INFINITY);
      complex5.sqrt1z();
      Complex complex8 = complex4.add((-845.7069915575464));
      complex8.NaN.sqrt1z();
      complex5.getReal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.INF.getField();
      complex0.abs();
      complex0.ONE.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.ONE.pow(Double.POSITIVE_INFINITY);
      complex2.NaN.getField();
      Complex complex4 = complex0.exp();
      complex4.INF.abs();
      Complex complex5 = complex4.subtract(complex0);
      complex5.toString();
      complex0.createComplex(0.0, 276.137369794476);
      complex1.hashCode();
      complex0.conjugate();
      Complex.valueOf(0.0, 0.0);
      complex3.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex0.asin();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.multiply(0.0);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex0.ONE.add(220.236);
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.I.add(0.0);
      complex5.NaN.hashCode();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex5.atan();
      Complex complex8 = complex6.I.cos();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex7.INF.conjugate();
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex0.NaN.sqrt();
      complex10.NaN.log();
      complex3.equals("(0.0, 0.0)");
      complex6.readResolve();
      Complex complex11 = complex4.conjugate();
      complex6.NaN.getField();
      Complex complex12 = complex6.add(810.952);
      complex12.INF.getArgument();
      assertTrue(complex6.equals((Object)complex2));
      
      complex11.pow(complex5);
      Complex complex13 = complex7.pow(2659.5);
      assertSame(complex4, complex10);
      assertSame(complex13, complex11);
      assertFalse(complex5.isInfinite());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = new Complex((-1935.5242302160818));
      Complex complex3 = complex0.add(complex2);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals((-1934.5242302160818), complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.add((-4920.1515259));
      Complex complex5 = complex4.ONE.exp();
      assertEquals(2.718281828459045, complex5.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals((-4919.310054915192), complex4.getReal(), 0.01);
      
      Complex complex6 = complex0.sqrt1z();
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
  }
}
