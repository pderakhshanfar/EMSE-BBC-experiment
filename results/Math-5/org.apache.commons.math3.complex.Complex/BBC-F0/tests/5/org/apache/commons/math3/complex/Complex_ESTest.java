/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:40:03 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(4941.197131620635);
      complex0.INF.abs();
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf(4.677993239821998E-210, Double.POSITIVE_INFINITY);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(1.8445514681108982E150);
      Complex complex1 = complex0.acos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tan();
      try { 
        complex0.nthRoot((-1420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,420
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.conjugate();
      complex0.toString();
      complex2.sqrt1z();
      complex3.negate();
      complex4.cos();
      Complex complex5 = Complex.NaN;
      complex3.equals(complex5);
      Complex complex6 = complex2.pow(complex1);
      Complex.valueOf(6.283185307179586);
      complex6.readResolve();
      Complex complex7 = Complex.I;
      complex0.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sinh();
      complex0.ZERO.hashCode();
      complex2.ONE.multiply(2259);
      Complex.valueOf(Double.NaN);
      complex0.ZERO.subtract(complex2);
      Complex.valueOf(5609.166180825744, 5609.166180825744);
      Complex complex3 = complex0.pow(5609.166180825744);
      complex3.divide(Double.NaN);
      complex0.divide((double) 2259);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-2.2696673856693997E-158), Double.POSITIVE_INFINITY);
      complex0.nthRoot(190);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-742.29));
      Complex complex1 = complex0.acos();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex1.tan();
      Complex.valueOf((-742.29));
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(4942.341282213);
      Complex complex1 = complex0.acos();
      complex1.tan();
      Complex complex2 = new Complex(6050.952226912005, (-550993.4441));
      complex0.INF.createComplex(1990699980, 6050.952226912005);
      // Undeclared exception!
      complex1.nthRoot(1990699980);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-742.29));
      Complex complex1 = complex0.acos();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf((-742.29), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.add((-819.62658308));
      complex3.abs();
      complex2.negate();
      Complex complex7 = complex0.conjugate();
      complex2.toString();
      Complex complex8 = complex5.sqrt1z();
      complex4.cos();
      complex6.readResolve();
      complex0.equals(complex8);
      Complex complex9 = complex8.pow(complex5);
      Complex.valueOf(1144.5348698809);
      complex7.sqrt();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cos();
      Complex complex1 = complex0.divide((-742.29));
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.abs();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.tan();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf((-20.0), (-2642.318818975081));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.exp();
      Complex complex5 = Complex.valueOf((-2642.318818975081));
      complex5.ONE.toString();
      complex4.multiply(1431);
      Complex complex6 = complex1.cosh();
      complex6.INF.add(5178.871476666137);
      complex0.tanh();
      complex3.nthRoot(37);
      complex2.log();
      Complex.valueOf((double) 1431, (-554.60443108122));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide((-4020.71112));
      complex2.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      complex3.multiply((-107));
      Complex complex4 = Complex.valueOf(35.250512816396);
      complex2.tanh();
      complex4.hashCode();
      Complex complex5 = Complex.ZERO;
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.07159365713596344);
      Complex complex2 = new Complex(0.07159365713596344, 0.07159365713596344);
      complex2.getArgument();
      Complex complex3 = complex1.tanh();
      complex0.getField();
      complex3.cosh();
      Complex complex4 = new Complex(0.07159365713596344);
      Complex.valueOf(0.07159365713596344);
      Complex complex5 = Complex.valueOf(0.07159365713596344, (-4803.600256486));
      complex5.readResolve();
      complex4.equals(complex2);
      complex2.sqrt();
      Complex complex6 = new Complex((-3.295268490032475E179), (-1947.38032765292));
      complex4.conjugate();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(125.46415501);
      Complex complex1 = complex0.acos();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.valueOf((-742.29));
      Complex complex4 = Complex.I;
      complex2.multiply((-1021));
      complex3.cosh();
      complex2.tanh();
      complex2.hashCode();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ZERO;
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.divide(2.0862779590338074);
      complex2.tan();
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = Complex.I;
      complex4.multiply((-1));
      Complex complex5 = complex2.cosh();
      complex3.tanh();
      complex5.hashCode();
      Complex complex6 = Complex.I;
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.3325583338737488);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ONE.reciprocal();
      complex0.abs();
      Complex complex3 = complex1.INF.pow((-550993.4441));
      Complex complex4 = complex0.ZERO.add(complex2);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex5.I.add((-550993.4441));
      Complex complex7 = complex6.I.add(550993.4441);
      complex7.ONE.multiply((-2281));
      complex5.multiply(0.3325583338737488);
      Complex complex8 = Complex.ONE;
      complex1.multiply(complex8);
      Complex complex9 = complex4.acos();
      complex2.INF.cos();
      Complex complex10 = complex9.conjugate();
      complex5.ONE.toString();
      Complex complex11 = complex10.I.tanh();
      complex5.getField();
      Complex complex12 = complex2.tanh();
      Complex complex13 = complex12.ZERO.divide(0.3325583338737488);
      complex13.ONE.exp();
      Complex complex14 = complex12.conjugate();
      Object object0 = new Object();
      complex9.equals(object0);
      complex8.abs();
      Complex complex15 = complex9.asin();
      complex0.multiply(37);
      complex3.multiply((double) 37);
      Complex complex16 = complex5.add(complex14);
      complex11.atan();
      complex16.add(complex15);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2503.23607);
      Complex complex1 = complex0.I.acos();
      complex1.INF.subtract(2503.23607);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.add((-810.8058598653438));
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.5301685333251953);
      complex5.subtract((-810.8058598653438));
      complex5.add(complex2);
      complex4.pow(2503.23607);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex(1446.937625977749, 1446.937625977749);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.exp();
      Complex.valueOf((-1299.833162500796), (-1810.084));
      complex4.cos();
      complex3.acos();
      complex2.createComplex((-30.9484397569), 1446.937625977749);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex complex6 = complex1.sqrt();
      complex0.atan();
      complex3.multiply(0.0);
      complex6.multiply(0.0);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.9013441705763093E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.I.pow((-2.9013441705763093E-8));
      Complex.valueOf(0.0);
      Complex complex4 = complex3.I.cos();
      complex2.INF.pow(complex1);
      Complex complex5 = complex4.ONE.pow(0.0);
      Complex complex6 = complex4.NaN.subtract((-84.4501));
      complex6.asin();
      complex5.ZERO.nthRoot(1288);
      Complex complex7 = complex0.pow(complex1);
      complex7.abs();
      Complex complex8 = Complex.valueOf((-861.0102371808997), 0.0);
      complex8.NaN.abs();
      complex8.exp();
      Complex complex9 = Complex.I;
      Complex complex10 = complex0.sqrt();
      complex10.ZERO.add((-2866.454699));
      Complex complex11 = new Complex((-2.9013441705763093E-8), (-861.0102371808997));
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sinh();
      complex0.ZERO.hashCode();
      complex2.ONE.multiply(2259);
      complex0.equals(")");
      Complex complex3 = complex0.tanh();
      Complex complex4 = new Complex(Double.NaN, Double.NaN);
      Complex complex5 = complex4.multiply(complex1);
      complex3.NaN.cosh();
      Complex complex6 = complex3.createComplex(Double.NaN, (-1683.468));
      Complex.valueOf(Double.NaN, 5609.166);
      complex3.NaN.sqrt();
      Complex complex7 = new Complex(2259, Double.NaN);
      complex6.add((-819.62658308));
      Complex.valueOf((-2310.32), Double.NaN);
      complex3.abs();
      Complex complex8 = complex0.exp();
      Complex.valueOf((-819.62658308), 1.557407724654902);
      complex6.cos();
      complex8.acos();
      Complex complex9 = complex4.createComplex((-1683.468), (-2310.32));
      complex9.sqrt1z();
      Complex complex10 = Complex.ONE;
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2.9013441705763093E-8));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.I.pow((-2.9013441705763093E-8));
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex3.I.cos();
      Complex complex6 = complex2.INF.pow(complex1);
      Complex complex7 = Complex.valueOf((-2.9013441705763093E-8));
      complex5.NaN.subtract((-84.4501));
      Complex complex8 = new Complex((-2.9013441705763093E-8), (-84.4501));
      complex7.ZERO.nthRoot(1288);
      Complex complex9 = complex0.pow(complex1);
      complex9.abs();
      complex6.abs();
      complex7.negate();
      Complex complex10 = Complex.valueOf(3229.2614456059);
      complex10.conjugate();
      Complex complex11 = Complex.INF;
      complex11.toString();
      Complex complex12 = complex10.sqrt1z();
      complex6.readResolve();
      complex12.equals(complex4);
      Complex complex13 = complex9.pow(complex5);
      Complex.valueOf((-19.354581135628));
      Complex.valueOf(4.810477380965351);
      Complex complex14 = complex9.sin();
      complex14.subtract(complex13);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = (-1.00051086720275);
      Complex complex1 = Complex.valueOf((-1.00051086720275));
      Complex complex2 = complex0.ONE.pow(complex1);
      complex2.ZERO.multiply((-3633));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(2503.23607);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.INF.subtract(0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = Complex.I;
      complex3.add((-810.8058598653438));
      complex2.tanh();
      complex1.sqrt1z();
      complex3.getField();
      complex3.divide(0.5301685333251953);
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex5.sqrt();
      Complex complex6 = new Complex((-1688.8781331710354));
      complex6.toString();
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex(1446.937625977749, 1446.937625977749);
      Complex complex3 = Complex.ZERO;
      complex2.isNaN();
      Complex complex4 = complex0.tan();
      complex4.NaN.pow((-2064.5268532));
      Object object0 = complex1.readResolve();
      complex4.equals(object0);
      Complex complex5 = Complex.valueOf((-69.461898), 4039.98918072832);
      complex5.sqrt();
      Complex complex6 = new Complex(Double.NaN, Double.NaN);
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(625.0);
      complex0.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.createComplex(5.148199748336684E-131, 0.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.sqrt();
      complex3.INF.nthRoot(1982);
      complex5.I.log();
      Complex complex6 = complex5.NaN.sqrt();
      complex4.NaN.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.sinh();
      complex7.equals(complex0);
      complex1.add(complex4);
      complex3.pow(complex6);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1132.232099821436, 1132.232099821436);
      complex0.NaN.toString();
      complex0.sin();
      Complex complex1 = complex0.sinh();
      complex1.hashCode();
      complex1.multiply(342);
      Complex complex2 = complex1.divide((double) (-1021));
      complex0.cosh();
      Complex complex3 = complex2.tanh();
      complex3.hashCode();
      complex1.atan();
      Complex complex4 = Complex.NaN;
      complex4.multiply(1482);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1132.232099821436, 1132.232099821436);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.divide(0.0);
      complex1.getField();
      Complex complex5 = complex4.pow(complex2);
      Complex complex6 = complex1.createComplex((-426.4042276868324), 1.0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.subtract(complex7);
      complex2.getArgument();
      complex3.sinh();
      complex3.pow(62.58005273804);
      complex8.pow(1132.232099821436);
      complex2.getReal();
      complex8.tanh();
      complex5.getImaginary();
      complex6.readResolve();
      complex4.divide(3.3730714236579374E186);
      complex5.pow((-1446.937625977749));
      complex7.pow(complex0);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.asin();
      complex1.I.cos();
      Complex complex2 = complex0.pow((-1258.937677844));
      Complex complex3 = complex2.ONE.subtract((-1258.937677844));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.createComplex((-2212.2751351455076), (-1258.937677844));
      complex4.NaN.tanh();
      complex1.sqrt1z();
      complex5.subtract(complex4);
      Complex complex6 = Complex.valueOf(2.414213562373095);
      complex6.ZERO.getArgument();
      complex1.nthRoot(41);
      Complex complex7 = complex3.multiply(380);
      Complex complex8 = complex4.cos();
      Complex complex9 = complex8.reciprocal();
      complex9.INF.createComplex(2122.2816838293506, 41);
      Complex.valueOf((-1258.937677844), (-882.534776));
      complex9.ZERO.sqrt1z();
      Complex complex10 = complex4.divide(complex6);
      complex0.pow(complex4);
      complex7.multiply((-2212.2751351455076));
      complex5.sin();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.ZERO.conjugate();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.ZERO.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.I.conjugate();
      complex0.toString();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.tanh();
      complex1.readResolve();
      complex0.createComplex(1.1353638172149658, (-2454.210738044));
      Object object0 = complex1.readResolve();
      complex5.equals(object0);
      complex2.multiply(complex7);
      complex1.toString();
      complex0.sin();
      Complex complex8 = complex5.pow(1.1353638172149658);
      complex7.pow(2.0);
      complex4.exp();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(Double.NaN);
      complex1.nthRoot(1488);
      Complex complex3 = new Complex(1488);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(2503.23607);
      Complex complex1 = complex0.I.acos();
      complex1.INF.subtract(0.0);
      Complex complex2 = Complex.valueOf(15.859651655567509);
      Complex complex3 = Complex.valueOf(0.0, 15.859651655567509);
      complex2.add((-798.714));
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.5301685333251953);
      Complex complex5 = complex4.subtract((-798.714));
      complex5.tanh();
      complex3.atan();
      Complex.valueOf(3622.68);
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sinh();
      complex0.ZERO.hashCode();
      complex2.ONE.multiply(2259);
      complex0.tanh();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex3.ONE.sin();
      Complex complex5 = Complex.valueOf(5609.166180825744, 5609.166180825744);
      Complex complex6 = complex0.pow(5609.166180825744);
      Complex complex7 = Complex.valueOf(Double.NaN, 1657.8912278631);
      complex2.multiply(complex5);
      complex6.multiply(complex5);
      Complex complex8 = complex6.createComplex(Double.NaN, (-1683.468));
      Complex.valueOf(Double.NaN, 5609.166180825744);
      complex0.NaN.asin();
      Complex complex9 = complex8.add((-819.62658308));
      Complex complex10 = complex7.negate();
      Complex complex11 = complex5.conjugate();
      complex11.ONE.toString();
      complex11.INF.sqrt1z();
      Complex complex12 = (Complex)complex0.readResolve();
      complex0.equals(complex12);
      complex10.pow(complex0);
      complex4.multiply(2259);
      complex9.createComplex(1.8939170679975288E-131, 2259);
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(344.7019);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      double double0 = (-1.5767664217491983E-4);
      Complex complex0 = new Complex((-999.4062235796), (-1.5767664217491983E-4));
      complex0.ONE.tanh();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sinh();
      complex2.ZERO.hashCode();
      Complex complex3 = complex2.I.multiply((-1021));
      complex2.divide(1132.232099821436);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.tanh();
      complex1.ZERO.nthRoot(1);
      complex2.hashCode();
      Complex complex6 = complex1.atan();
      complex5.multiply(3409);
      complex6.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1132.232099821436, 1132.232099821436);
      Complex complex1 = complex0.multiply(194.0);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.createComplex(194.0, 1556.9308581961);
      complex1.add((-6.017988576347111E220));
      complex3.pow(complex0);
      complex2.sqrt1z();
      complex3.hashCode();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide((-742.29));
      Complex complex3 = complex1.I.tan();
      complex3.ONE.exp();
      Complex complex4 = Complex.valueOf((-742.29));
      Complex complex5 = Complex.INF;
      complex5.hashCode();
      complex2.reciprocal();
      complex3.multiply(complex5);
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.subtract(complex4);
      complex7.pow(complex3);
      Complex.valueOf(20.0);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.tanh();
      complex1.log();
      Complex complex4 = complex2.I.divide(complex0);
      complex1.INF.asin();
      complex1.cosh();
      Complex.valueOf((-2333.50029775777), (-2333.50029775777));
      complex0.getArgument();
      complex0.ONE.exp();
      complex3.multiply((-2333.50029775777));
      complex3.negate();
      complex4.abs();
      complex0.pow(complex3);
      Complex complex5 = Complex.ZERO;
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(2503.23607);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.reciprocal();
      complex3.sinh();
      Complex complex5 = complex3.multiply(1009);
      Complex complex6 = complex2.acos();
      Complex complex7 = new Complex(1.0000000000000113, 2503.23607);
      complex0.subtract(complex7);
      complex1.subtract(complex3);
      Complex complex8 = complex7.multiply(0.33939332110771525);
      complex6.readResolve();
      Complex.valueOf(625.0);
      Complex complex9 = Complex.ONE;
      Object object0 = new Object();
      complex9.subtract(0.5707963267948966);
      complex9.multiply(complex5);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = new Complex(Double.NaN);
      Object object1 = complex11.readResolve();
      complex8.equals(object1);
      Complex complex12 = new Complex((-314.90403), 2.0031331601617008E-8);
      complex12.pow(1.628459873440512E-266);
      complex2.getField();
      complex12.asin();
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = Complex.valueOf((-104.506121));
      Complex complex5 = complex4.conjugate();
      complex5.createComplex(1.620899738203635E200, 711.51435906);
      complex3.asin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.atan();
      Complex.valueOf(1.9889545661436498E-7);
      complex0.isInfinite();
      complex7.createComplex(711.51435906, (-1.0000000000000113));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(472.29, 3.6637673548790206E194);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide((-742.29));
      Complex complex4 = complex1.tan();
      Complex complex5 = complex0.exp();
      Complex.valueOf(4.0889180422033095E8);
      Complex complex6 = Complex.INF;
      complex4.hashCode();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex3.multiply(complex4);
      Complex complex9 = complex8.asin();
      complex9.subtract(complex6);
      complex5.add(3.6637673548790206E194);
      complex2.pow(complex7);
      complex4.sqrt1z();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.sinh();
      complex0.ZERO.hashCode();
      complex2.ONE.multiply(2259);
      complex0.equals(")");
      complex0.tanh();
      Complex.valueOf(Double.NaN);
      Complex complex3 = Complex.valueOf(5609.166180825744, 5609.166180825744);
      Complex complex4 = complex0.pow(5609.166180825744);
      Complex complex5 = Complex.valueOf(Double.NaN, 1657.8912278631);
      Complex complex6 = complex2.multiply(complex3);
      complex4.multiply(complex3);
      Complex complex7 = complex4.createComplex(Double.NaN, (-1683.468));
      Complex.valueOf(Double.NaN, 5609.166180825744);
      complex0.NaN.asin();
      complex7.add((-819.62658308));
      complex6.abs();
      Complex complex8 = complex5.negate();
      Complex complex9 = complex3.conjugate();
      complex9.ONE.toString();
      complex9.INF.sqrt1z();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex8.pow(complex0);
      Complex.valueOf((-1823.565));
      Complex.valueOf((-17.979063391746));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(1.2612435745231905E181);
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.multiply(7);
      Complex complex4 = complex1.sqrt1z();
      complex4.I.cos();
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex4.INF.divide(complex0);
      complex6.INF.negate();
      Complex.valueOf((-515.9091));
      complex6.ZERO.toString();
      complex3.ONE.hashCode();
      Complex complex7 = complex0.divide(complex1);
      complex7.ZERO.tanh();
      complex3.I.getField();
      complex0.NaN.abs();
      complex3.add((double) 7);
      complex3.abs();
      complex6.ONE.createComplex(1.9889545661436498E-7, 1.1748409271240234);
      complex7.toString();
      complex7.cosh();
      complex2.add((-2548.652957921));
      Complex.valueOf(2315.903, (-2548.652957921));
      complex6.divide(1136357.0);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide((-742.29));
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = Complex.valueOf((-742.29));
      Complex complex6 = Complex.INF;
      complex6.hashCode();
      complex2.reciprocal();
      complex3.multiply(complex6);
      Complex complex7 = complex1.asin();
      Complex complex8 = complex7.subtract(complex5);
      complex3.add(Double.NaN);
      complex8.pow(complex3);
      complex4.sqrt1z();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(2503.23607);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = Complex.valueOf(2503.23607);
      Complex complex3 = complex1.sqrt();
      complex3.log();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.sinh();
      complex2.add(complex5);
      complex2.isInfinite();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(2503.23607);
      Complex complex1 = complex0.I.acos();
      complex1.INF.subtract(0.0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(2503.23607);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.createComplex((-8.893078799284047E-8), (-2423.31472272));
      complex2.atan();
      Complex.valueOf(1.0524719896550007E251);
      complex4.isInfinite();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(625.0);
      complex0.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.ONE.createComplex(5.148199748336684E-131, 0.0);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex1.sqrt();
      complex3.INF.nthRoot(1982);
      complex5.I.log();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex1.sinh();
      complex7.equals(complex0);
      complex1.add(complex4);
      complex3.pow(complex6);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex1.multiply(complex0);
      complex0.divide(complex3);
      Complex complex4 = complex3.log();
      complex3.hashCode();
      Complex.valueOf(1345.247225);
      complex2.sin();
      complex0.nthRoot(1984);
      Complex.valueOf(0.0, 0.0);
      complex2.divide(complex0);
      complex4.multiply((double) 1984);
      try { 
        complex4.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ZERO;
      complex2.getArgument();
      Complex complex3 = complex2.tanh();
      complex0.getField();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex3.cosh();
      complex4.tan();
      complex4.multiply((-2333.50029775777));
      Complex complex6 = complex5.negate();
      complex5.abs();
      complex1.pow(complex0);
      Complex complex7 = Complex.valueOf((-2333.50029775777), (-742.29));
      complex7.log();
      complex2.acos();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(625.0);
      complex0.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      complex0.exp();
      Complex complex3 = Complex.valueOf(625.0);
      Complex complex4 = Complex.INF;
      complex3.hashCode();
      complex1.reciprocal();
      Complex complex5 = complex3.multiply(complex2);
      complex2.asin();
      complex2.subtract(complex3);
      Complex complex6 = complex3.multiply(complex0);
      complex5.isNaN();
      complex2.isNaN();
      complex6.asin();
      complex2.getArgument();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7143988609313965);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.40546512603759766, 1.7143988609313965);
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      complex1.readResolve();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.add(complex4);
      complex0.sin();
      complex1.multiply(0.03126775389175134);
      complex5.tanh();
      complex0.hashCode();
      Complex complex6 = complex2.log();
      complex0.asin();
      Complex complex7 = complex3.log();
      Complex.valueOf((-5742.316877870162));
      Complex complex8 = Complex.valueOf(2423.30733199);
      complex4.add(complex6);
      complex7.add((-7.475571347653619E-8));
      complex0.add(1.7143988609313965);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex1.log();
      Complex complex5 = complex2.ONE.atan();
      complex2.I.divide(complex0);
      complex5.INF.asin();
      Complex complex6 = complex2.ZERO.add(complex1);
      complex4.NaN.createComplex(1.0, 1.0);
      complex0.reciprocal();
      complex0.log();
      complex0.log();
      complex1.getField();
      complex0.equals(complex3);
      Complex.valueOf((-1033.00619));
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.cosh();
      Complex.valueOf(0.0);
      Complex complex1 = complex0.add(3181.595739467992);
      complex0.ONE.toString();
      complex0.abs();
      complex1.tan();
      Complex complex2 = complex1.sin();
      Complex complex3 = Complex.valueOf(1921.5583126, Double.POSITIVE_INFINITY);
      complex3.NaN.acos();
      Complex.valueOf(229.87204);
      complex3.INF.getArgument();
      Complex complex4 = complex2.cos();
      complex4.ZERO.sqrt();
      Complex complex5 = Complex.valueOf(7.530840351477639E-188);
      complex1.getImaginary();
      Complex complex6 = Complex.valueOf((-20.0), Double.NaN);
      complex6.createComplex(1921.5583126, (-2837.736));
      Complex complex7 = complex1.multiply((-1484));
      complex7.ZERO.subtract(Double.NaN);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex5.divide(3181.595739467992);
      complex9.NaN.multiply(0.7853981633974483);
      Complex complex10 = complex8.tan();
      complex5.getImaginary();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1132.232099821436, 1132.232099821436);
      complex0.NaN.toString();
      complex0.sin();
      Complex complex1 = complex0.sinh();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.I.multiply((-1021));
      Complex complex3 = complex1.divide(1132.232099821436);
      complex0.reciprocal();
      Complex complex4 = complex0.I.cosh();
      complex4.ZERO.tanh();
      complex4.ONE.hashCode();
      complex4.ZERO.conjugate();
      complex3.createComplex(1132.232099821436, (-2423.31472272));
      complex3.atan();
      Complex.valueOf(0.0);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1132.232099821436, 1132.232099821436);
      complex0.NaN.toString();
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.I.multiply((-1021));
      complex0.divide(1132.232099821436);
      complex1.cosh();
      complex0.tanh();
      Complex complex2 = Complex.NaN;
      complex2.hashCode();
      complex1.conjugate();
      complex0.getArgument();
      complex0.createComplex((-2423.31472272), 2490.8623254386316);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.atan();
      complex4.tan();
      Complex.valueOf((double) (-1021));
      Complex complex5 = Complex.INF;
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.INF.cosh();
      Complex complex4 = complex1.add(1.7143988609313965);
      Complex complex5 = complex0.multiply((-1066));
      Complex complex6 = complex5.NaN.add((-488.0));
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.ZERO.cosh();
      complex8.ZERO.reciprocal();
      Complex complex9 = complex4.exp();
      complex9.I.conjugate();
      complex7.NaN.cosh();
      complex8.ONE.divide(1105.86117219737);
      complex2.getArgument();
      complex8.INF.abs();
      Complex complex10 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.NaN.pow(1.0);
      complex11.ZERO.asin();
      complex3.divide(1.7143988609313965);
      complex8.createComplex((-488.0), (-1929.86897));
      complex2.cosh();
      Complex complex12 = complex2.createComplex((-488.0), 1541.551406);
      complex8.getField();
      complex12.readResolve();
      complex1.atan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.I.getArgument();
      Complex complex2 = complex1.tanh();
      complex0.cosh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.cosh();
      complex3.divide(1856.141788);
      complex3.getArgument();
      complex3.abs();
      complex1.pow(334.010918638);
      complex5.asin();
      complex2.divide((-20.0));
      Complex complex6 = Complex.ONE;
      complex6.createComplex(334.010918638, Double.NaN);
      Complex complex7 = Complex.valueOf(0.3736028928213364, 6.833842035076675E301);
      Complex complex8 = complex7.cosh();
      complex3.createComplex((-3513.6575774), 1856.141788);
      complex3.getField();
      complex2.readResolve();
      complex4.atan();
      complex2.sqrt1z();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1132.232099821436, 1132.232099821436);
      complex0.NaN.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(567.0, 1.3655037879943848);
      Complex complex4 = complex2.multiply(2930);
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.cos();
      complex6.sin();
      complex1.nthRoot(2970);
      complex3.subtract(6.283185307179586);
      complex4.multiply(1132.232099821436);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.atan();
      Complex complex9 = complex2.pow(567.0);
      complex1.sqrt();
      complex9.getArgument();
      complex9.hashCode();
      Complex complex10 = Complex.NaN;
      complex10.readResolve();
      Object object0 = complex0.readResolve();
      complex10.equals(object0);
      Complex.valueOf((-1948.5003636926617));
      complex8.add(complex9);
      Complex complex11 = Complex.ZERO;
      complex11.sinh();
      Complex complex12 = Complex.ZERO;
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2490.8623254386316);
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(2490.8623254386316);
      Complex complex3 = complex2.subtract(2490.8623254386316);
      Complex complex4 = complex3.tanh();
      complex0.atan();
      complex2.NaN.subtract((-1722.147200947));
      Complex complex5 = Complex.valueOf(4498.098622157631, 2490.8623254386316);
      complex5.multiply(794);
      complex4.divide((double) 794);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(2503.23607);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      complex2.subtract(0.0);
      complex1.tanh();
      complex2.atan();
      complex0.multiply(1872);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(472.29, 3.6637673548790206E194);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.divide(complex0);
      complex0.nthRoot(3002);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex1.multiply(3002);
      Complex complex6 = complex5.log();
      complex2.getField();
      complex4.getField();
      complex3.getArgument();
      Complex complex7 = complex1.cos();
      Complex complex8 = complex0.sqrt1z();
      complex0.sinh();
      Complex complex9 = complex6.add((-2784.932606));
      Complex complex10 = complex2.multiply(complex9);
      complex7.hashCode();
      Complex complex11 = Complex.valueOf((-1.5707963267948966));
      complex11.multiply(complex3);
      complex11.hashCode();
      complex5.readResolve();
      Complex complex12 = complex3.exp();
      complex10.getReal();
      complex1.add(complex7);
      complex8.log();
      complex12.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide((-742.29));
      Complex complex3 = complex1.I.tan();
      Complex complex4 = complex3.ONE.exp();
      Complex complex5 = Complex.valueOf((-742.29));
      Complex complex6 = Complex.INF;
      complex6.hashCode();
      complex2.reciprocal();
      Complex complex7 = complex3.multiply(complex6);
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.subtract(complex5);
      complex9.multiply(complex5);
      complex8.isNaN();
      complex1.isNaN();
      complex4.asin();
      complex3.getArgument();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex0.ZERO.sin();
      complex0.INF.getField();
      double double0 = 6.283185307179586;
      double double1 = (-2534.830231578);
      Complex complex3 = Complex.valueOf(6.283185307179586, (-2534.830231578));
      complex2.multiply(2564);
      Complex complex4 = complex3.cos();
      complex4.cos();
      complex1.sin();
      try { 
        complex1.nthRoot((-177));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -177
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1828.0194387385);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(0.0, (-707.0));
      Complex complex5 = complex0.multiply(1727);
      Complex complex6 = complex4.log();
      complex1.getField();
      complex2.getField();
      complex4.getArgument();
      Complex complex7 = complex3.cos();
      complex7.sqrt1z();
      complex3.sinh();
      complex7.add(1478.9754879);
      complex6.multiply(complex5);
      complex2.hashCode();
      Complex complex8 = Complex.valueOf((-2125.8));
      try { 
        complex8.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1132.232099821436, 1132.232099821436);
      complex0.NaN.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sinh();
      complex2.ZERO.hashCode();
      Complex complex3 = complex2.I.multiply((-1021));
      Complex complex4 = complex2.divide(1132.232099821436);
      Complex complex5 = complex0.I.cosh();
      complex1.tanh();
      complex1.hashCode();
      Complex complex6 = complex5.conjugate();
      complex3.createComplex((-1021), (-1021));
      complex4.atan();
      Complex complex7 = Complex.valueOf(1132.232099821436);
      complex6.isInfinite();
      complex7.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(472.29, 3.6637673548790206E194);
      Complex complex1 = new Complex(3.6637673548790206E194);
      Complex complex2 = complex0.divide(complex1);
      complex2.tanh();
      complex1.log();
      complex2.atan();
      Complex complex3 = Complex.valueOf(472.29, 472.29);
      complex1.divide(complex3);
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf(1783.8655, 605.028);
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex3.asin();
      complex2.createComplex(0.04496899977862825, 66.4);
      complex7.reciprocal();
      complex7.log();
      complex6.log();
      Complex complex8 = Complex.INF;
      complex8.getField();
      complex0.equals(complex4);
      Complex.valueOf((-1033.00619));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex1.I.getArgument();
      Complex complex2 = complex1.tanh();
      complex0.ONE.getField();
      complex0.atan();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.multiply((-2333.50029775777));
      complex4.negate();
      complex0.abs();
      complex3.pow(complex0);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 0.0);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.divide(444.900641408148);
      Complex complex3 = Complex.I;
      complex2.subtract((-2055.23381808));
      Complex complex4 = new Complex(1715.15373, 3484.8);
      complex1.INF.divide(complex4);
      complex1.ONE.divide(complex3);
      complex1.equals(complex3);
      complex3.isInfinite();
      Complex complex5 = complex0.add(complex3);
      Complex complex6 = complex5.INF.tan();
      complex5.ONE.atan();
      complex6.sqrt();
      complex6.INF.reciprocal();
      Complex complex7 = complex2.sinh();
      complex7.sqrt();
      Complex complex8 = complex1.add(3704.3262058);
      complex8.ZERO.tanh();
      complex3.hashCode();
      complex0.I.divide(1.0);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex3.asin();
      complex10.isNaN();
      complex3.getImaginary();
      complex9.getImaginary();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-2251.0));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = Complex.valueOf((-719.42609817331), 0.0);
      complex1.I.nthRoot(1177);
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex5.multiply((-633));
      complex6.NaN.pow(complex2);
      complex2.exp();
      complex2.cosh();
      Complex complex7 = Complex.valueOf(1.334362017065677E-305, 0.0);
      Complex complex8 = complex7.ONE.createComplex(0.0, 1.334362017065677E-305);
      complex8.ONE.cosh();
      complex5.toString();
      complex0.INF.sin();
      complex7.multiply(complex4);
      complex3.pow(1405.45344);
      complex3.createComplex(1.334362017065677E-305, 1.334362017065677E-305);
      complex5.createComplex(0.0, (-557.5904));
      complex2.tanh();
      complex5.createComplex((-719.42609817331), (-6013.394));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.multiply((-3921));
      Complex complex2 = complex0.subtract(complex1);
      Complex.valueOf(0.0);
      complex2.INF.exp();
      Complex complex3 = complex0.add(0.0);
      complex3.NaN.pow((double) (-3921));
      complex0.divide(0.0);
      complex0.acos();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.sinh();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.subtract(Double.POSITIVE_INFINITY);
      complex1.INF.cosh();
      Complex complex4 = complex1.add(1.7143988609313965);
      Complex complex5 = complex0.multiply((-1066));
      complex5.NaN.add((-488.0));
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.ZERO.cosh();
      complex7.ZERO.reciprocal();
      Complex complex8 = complex4.exp();
      complex8.I.conjugate();
      complex6.NaN.cosh();
      complex7.ONE.divide(1105.86117219737);
      complex2.getArgument();
      complex7.INF.abs();
      Complex complex9 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.NaN.pow(1.0);
      complex10.ZERO.asin();
      Complex complex11 = complex3.divide(1.7143988609313965);
      complex7.createComplex((-488.0), (-1929.86897));
      complex2.cosh();
      Complex complex12 = complex2.createComplex((-488.0), 1541.551406);
      complex7.getField();
      complex12.readResolve();
      Complex complex13 = complex1.atan();
      complex13.I.sqrt1z();
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(2503.23607);
      Complex complex1 = complex0.I.acos();
      complex1.INF.subtract(0.0);
      complex0.tanh();
      Complex complex2 = complex1.atan();
      complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(1670.1661, 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(0.0, 20.0);
      Complex complex3 = complex2.ZERO.add((-3483.120607873));
      Complex complex4 = Complex.valueOf(1041.22, (-410.167));
      complex4.toString();
      Complex complex5 = complex1.ONE.createComplex(1670.1661, 1670.1661);
      Complex complex6 = complex0.negate();
      complex0.getImaginary();
      complex4.ZERO.sqrt();
      complex0.isNaN();
      complex6.NaN.subtract(complex4);
      Complex complex7 = complex0.add(0.0);
      complex6.getImaginary();
      complex7.ONE.sqrt1z();
      complex1.add(complex3);
      complex1.negate();
      Complex complex8 = complex0.subtract(0.0);
      Complex complex9 = complex8.ZERO.cosh();
      complex7.pow(1041.22);
      complex4.readResolve();
      complex2.divide(complex1);
      complex3.exp();
      complex5.sqrt();
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(472.29, 3.6637673548790206E194);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.divide(complex0);
      complex0.nthRoot(3002);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex2.NaN.atan();
      complex5.I.subtract(complex2);
      complex5.NaN.sinh();
      Complex complex6 = complex4.ZERO.pow((-43.920989019));
      complex6.cosh();
      Complex complex7 = complex4.sinh();
      Complex complex8 = Complex.valueOf(296.8188084360524, (-922.01797501136));
      complex8.NaN.conjugate();
      Complex complex9 = Complex.valueOf((-1057.9937080541), 472.29);
      complex9.I.pow(complex6);
      Complex complex10 = complex9.I.multiply(3002);
      complex3.atan();
      Complex complex11 = complex10.ZERO.subtract((-481.43));
      complex11.NaN.subtract((-20.0));
      Complex complex12 = complex2.multiply(472.29);
      Complex complex13 = complex3.INF.multiply(37);
      complex12.getField();
      Complex complex14 = complex4.tan();
      complex14.pow(280.45702);
      complex3.reciprocal();
      complex10.getField();
      complex13.reciprocal();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1057.428888));
      complex0.INF.toString();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.I.sqrt();
      complex2.INF.getField();
      complex0.ONE.tan();
      complex0.ONE.add(0.0);
      complex0.toString();
      complex0.NaN.add(0.0);
      complex0.tanh();
      Complex complex3 = complex0.multiply(1148);
      Complex complex4 = complex1.asin();
      complex1.multiply(complex3);
      try { 
        complex4.nthRoot((-3598));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,598
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(1.7143988609313965, 0.0);
      Complex complex1 = Complex.valueOf(1.7143988609313965);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.ONE.sqrt();
      complex2.I.reciprocal();
      complex3.ZERO.tanh();
      complex3.I.sqrt();
      Complex complex4 = complex3.ZERO.pow(complex1);
      Complex complex5 = complex4.divide(0.0);
      complex5.I.sin();
      Complex.valueOf(1.7143988609313965, (-1.0));
      Complex complex6 = Complex.valueOf(0.0, 1.8445514681108982E150);
      complex0.sinh();
      try { 
        complex6.nthRoot((-32));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -32
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(625.0);
      complex0.getArgument();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.createComplex(5.148199748336684E-131, 0.0);
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.sqrt();
      complex4.I.log();
      complex4.NaN.sqrt();
      Complex complex5 = complex1.sinh();
      complex5.equals(complex0);
      complex1.add(complex3);
      complex0.isInfinite();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(20.0);
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex0.I.pow(complex2);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.multiply((-951));
      complex5.hashCode();
      Complex complex6 = complex0.pow(20.0);
      complex6.NaN.hashCode();
      complex6.equals(complex2);
      Complex complex7 = complex2.cos();
      complex7.multiply(1438);
      complex6.add(complex3);
      Complex complex8 = complex1.sin();
      complex6.exp();
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.asin();
      Complex complex3 = complex1.ONE.cosh();
      complex1.ZERO.readResolve();
      Complex complex4 = complex0.NaN.negate();
      complex4.ZERO.hashCode();
      complex0.INF.asin();
      Complex complex5 = complex2.NaN.multiply(complex0);
      Complex complex6 = complex4.ONE.asin();
      complex6.INF.readResolve();
      complex0.divide(0.0);
      complex2.abs();
      complex3.pow(0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.equals(complex2);
      Complex complex7 = complex6.sqrt();
      complex5.add(complex7);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1132.232099821436, 1132.232099821436);
      complex0.NaN.toString();
      complex0.sin();
      Complex complex1 = complex0.sinh();
      complex1.ZERO.hashCode();
      Complex complex2 = complex1.I.multiply((-1021));
      Complex complex3 = complex1.divide(1132.232099821436);
      Complex complex4 = complex0.I.cosh();
      complex4.ZERO.tanh();
      complex4.ONE.hashCode();
      complex4.ZERO.conjugate();
      complex3.createComplex(1132.232099821436, (-2423.31472272));
      complex3.atan();
      Complex.valueOf(0.0);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.ZERO.cos();
      complex0.getImaginary();
      Complex complex2 = complex0.atan();
      complex2.ONE.sqrt();
      complex1.pow(866.3476452051984);
      complex2.NaN.multiply(1314);
      complex2.createComplex(866.3476452051984, 0.0);
      Complex.valueOf(0.0, (-1121.71061));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.divide((-742.29));
      Complex complex3 = complex1.I.tan();
      complex3.ONE.exp();
      Complex complex4 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex5 = complex1.multiply(2930);
      complex4.INF.cos();
      Complex complex6 = complex2.cos();
      Complex complex7 = complex2.I.sin();
      complex1.nthRoot(2930);
      Complex complex8 = complex4.subtract(Double.NaN);
      complex0.multiply(6.283185307179586);
      complex8.ONE.atan();
      complex8.ONE.pow(0.0);
      complex5.sqrt();
      complex2.getArgument();
      complex0.hashCode();
      Object object0 = complex3.readResolve();
      complex8.equals(object0);
      Complex complex9 = Complex.valueOf((-1.0));
      complex9.ZERO.add(complex6);
      complex1.sinh();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.NaN.createComplex(0.0, 0.0);
      complex0.ZERO.hashCode();
      complex0.divide(0.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = Complex.I;
      complex1.NaN.pow(complex2);
      complex0.NaN.pow((-566.137424));
      Complex complex3 = complex0.NaN.createComplex(0.0, (-566.137424));
      Complex complex4 = complex3.INF.tanh();
      Complex complex5 = complex3.conjugate();
      complex3.INF.hashCode();
      complex0.cosh();
      Complex complex6 = complex5.pow(complex0);
      Complex complex7 = complex0.I.tan();
      complex1.isNaN();
      complex6.cos();
      Complex complex8 = Complex.valueOf(6.283185307179586, 0.0);
      complex7.cos();
      Complex complex9 = complex4.subtract(Double.NaN);
      complex7.tan();
      complex8.acos();
      complex5.sin();
      complex9.pow((-566.137424));
      Complex.valueOf(3373.108);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.createComplex(0.0, 2301.059464);
      Complex complex2 = complex1.INF.add(0.0);
      complex2.NaN.acos();
      Complex complex3 = complex1.NaN.divide(0.0);
      complex2.NaN.asin();
      complex3.INF.log();
      complex0.getReal();
      Object object0 = new Object();
      complex3.equals(object0);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.0);
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.ONE.tanh();
      complex1.log();
      Complex complex4 = complex2.ONE.atan();
      complex2.I.divide(complex0);
      complex4.INF.asin();
      Complex complex5 = complex2.ZERO.add(complex1);
      Complex complex6 = complex5.NaN.asin();
      complex6.NaN.createComplex(1.0, 1.0);
      complex0.reciprocal();
      complex0.log();
      complex0.log();
      complex1.getField();
      complex0.equals(complex3);
      Complex.valueOf((-1033.00619));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex0.ONE.add(complex1);
      complex0.ONE.nthRoot(267);
      complex1.toString();
      Complex complex2 = complex1.add(3051.3637);
      Complex complex3 = complex1.divide(3051.3637);
      complex3.equals(complex0);
      Complex complex4 = complex1.INF.sin();
      complex3.ZERO.hashCode();
      complex3.nthRoot(119);
      Complex complex5 = complex1.log();
      complex5.I.add(3051.3637);
      complex5.INF.tan();
      complex1.cosh();
      Complex complex6 = Complex.valueOf((double) 267);
      Complex complex7 = complex6.reciprocal();
      complex7.INF.hashCode();
      complex2.multiply(complex6);
      complex4.log();
      complex3.nthRoot(119);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-2961.026442), (-2961.026442));
      Complex complex1 = complex0.pow((-2961.026442));
      Complex complex2 = Complex.valueOf((-2961.026442), (-2961.026442));
      Complex complex3 = complex1.ONE.subtract(complex2);
      complex3.conjugate();
      Complex complex4 = complex1.pow(2184.44951);
      Complex complex5 = Complex.valueOf((-3078.07189703495));
      complex0.hashCode();
      Complex complex6 = complex5.pow(complex1);
      Complex complex7 = complex5.divide((-2961.026442));
      complex7.NaN.subtract(complex2);
      Complex complex8 = complex6.ONE.pow(1008.51235851883);
      complex0.readResolve();
      Complex complex9 = complex4.add(0.0);
      complex3.sqrt1z();
      Complex complex10 = complex3.log();
      complex10.ONE.conjugate();
      complex4.equals("2'xmnx0LptqMdvkFSY");
      complex8.ONE.conjugate();
      complex7.pow(complex1);
      complex5.sqrt1z();
      complex4.hashCode();
      complex9.hashCode();
      complex8.getArgument();
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-1258.937677844));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.ONE.cosh();
      Complex complex3 = complex0.ZERO.divide((-1258.937677844));
      complex3.getField();
      Complex complex4 = complex2.INF.pow(complex0);
      complex4.ONE.createComplex((-1311.154434), 3.3730714236579374E186);
      complex1.ONE.subtract(complex2);
      complex0.NaN.getArgument();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.pow(1061.0);
      Complex complex7 = complex5.pow(Double.NaN);
      complex1.getReal();
      Complex complex8 = complex0.tanh();
      complex2.getImaginary();
      complex8.readResolve();
      complex5.divide((-1311.154434));
      complex6.pow(0.0);
      complex7.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(699.44);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.INF.multiply(complex0);
      complex2.NaN.exp();
      Complex.valueOf(699.44, 0.0);
      Complex complex3 = complex1.ONE.multiply(1);
      complex0.INF.log();
      complex1.ZERO.getField();
      complex1.INF.getField();
      complex0.getArgument();
      Complex complex4 = complex0.cos();
      complex4.I.sqrt1z();
      Complex complex5 = null;
      Complex complex6 = complex4.INF.sinh();
      complex6.NaN.add(0.0);
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.add(1215.84);
      complex1.readResolve();
      Complex complex2 = complex1.ZERO.add(1215.84);
      complex1.NaN.nthRoot(1904);
      complex0.getImaginary();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex2.NaN.cos();
      complex3.I.multiply(1904);
      complex4.I.add(complex1);
      complex1.ZERO.nthRoot(1904);
      complex2.ZERO.getField();
      Complex complex5 = complex2.add(20.0);
      complex2.add((-1.0));
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.INF.sqrt1z();
      Complex complex8 = complex3.log();
      Complex complex9 = complex8.ZERO.atan();
      complex4.I.hashCode();
      Complex complex10 = complex9.NaN.acos();
      complex5.isNaN();
      Complex complex11 = complex7.add(Double.NaN);
      complex11.INF.subtract(0.0);
      complex3.pow(complex4);
      complex4.cos();
      complex7.add(complex2);
      Complex complex12 = complex8.multiply(complex1);
      complex12.ONE.toString();
      Complex complex13 = complex2.add((double) 1904);
      complex13.add(1215.84);
      complex7.getReal();
      complex10.divide((-526.5));
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.4194410638967946E-8), (-3.4194410638967946E-8));
      Complex complex1 = Complex.valueOf((-3.4194410638967946E-8));
      complex1.ZERO.sin();
      Complex complex2 = complex1.exp();
      complex0.pow(complex1);
      Complex complex3 = complex2.I.exp();
      try { 
        complex3.ZERO.nthRoot((-1664));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,664
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(948.0, 948.0);
      Complex complex1 = complex0.ONE.createComplex((-283.64824171053124), (-283.64824171053124));
      complex0.INF.tanh();
      complex0.sqrt1z();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex0.ONE.sinh();
      complex3.I.multiply(948.0);
      complex0.INF.negate();
      complex2.conjugate();
      complex0.abs();
      Complex complex4 = complex1.tan();
      complex4.ZERO.cos();
      try { 
        complex0.nthRoot((-2467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,467
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.INF.divide(complex1);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.acos();
      complex0.hashCode();
      Complex complex2 = complex0.reciprocal();
      complex2.asin();
      complex1.ZERO.hashCode();
      Complex complex3 = complex2.reciprocal();
      complex1.getField();
      Complex complex4 = complex3.INF.add(complex0);
      complex3.equals("8'3+v QWPA&H/T");
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = complex5.NaN.asin();
      complex6.ZERO.reciprocal();
      complex2.toString();
      Complex.valueOf(0.0, 0.0);
      complex0.exp();
      complex1.add(complex4);
      complex3.getArgument();
      complex2.ZERO.pow(2.0);
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.NaN.pow(complex0);
      complex0.NaN.getArgument();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.NaN.tanh();
      complex5.ZERO.tanh();
      complex5.add(complex3);
      Complex complex6 = complex4.I.add(complex1);
      Complex complex7 = complex4.ZERO.asin();
      Complex complex8 = complex7.NaN.tan();
      complex4.INF.hashCode();
      Complex complex9 = complex4.sqrt1z();
      complex9.INF.abs();
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex10.NaN.sqrt();
      complex4.abs();
      complex3.sin();
      complex6.asin();
      complex4.getImaginary();
      complex8.getArgument();
      complex11.multiply(0);
      complex11.multiply(Double.POSITIVE_INFINITY);
      complex2.subtract(0.0);
      complex4.add(3987.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-1335.25609449), (-1335.25609449));
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.ZERO.cos();
      complex1.asin();
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      complex0.ONE.toString();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex3.INF.negate();
      complex4.I.multiply((-1201.597));
      complex4.toString();
      Complex complex5 = complex3.NaN.add(0.06520968675613403);
      complex5.NaN.readResolve();
      Complex complex6 = complex0.ZERO.tanh();
      complex6.cosh();
      Complex complex7 = complex3.ONE.tanh();
      complex7.INF.exp();
      Complex complex8 = complex7.ONE.pow(675.3235060321272);
      Complex complex9 = complex0.tan();
      Complex complex10 = complex9.ONE.sin();
      complex9.ONE.pow((-321.0));
      complex8.NaN.add(complex1);
      complex2.abs();
      complex9.cosh();
      Complex complex11 = complex10.multiply(983);
      Complex complex12 = complex8.tan();
      complex12.ZERO.hashCode();
      Complex complex13 = complex9.acos();
      complex2.pow(0.0);
      complex7.multiply(complex11);
      complex1.exp();
      complex13.createComplex((-20.0), (-321.0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.createComplex(1446.937625977749, 1446.937625977749);
      complex1.log();
      complex0.isNaN();
      complex2.isNaN();
      Complex complex3 = complex0.tan();
      complex3.ZERO.add(complex0);
      complex1.multiply(1446.937625977749);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.acos();
      complex5.ONE.multiply(549);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      complex0.NaN.toString();
      complex2.NaN.getField();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = complex3.ZERO.asin();
      Complex complex5 = complex4.ONE.divide((-20.0));
      Complex complex6 = complex1.ZERO.multiply(1141.5554);
      Complex complex7 = complex0.INF.sqrt();
      complex6.ZERO.negate();
      Complex complex8 = complex2.INF.asin();
      Complex complex9 = complex1.tan();
      complex9.INF.tanh();
      Complex complex10 = complex9.tan();
      Complex complex11 = complex1.multiply(complex7);
      Complex complex12 = complex11.INF.atan();
      complex12.ONE.subtract(complex8);
      complex11.ONE.acos();
      complex1.abs();
      complex10.cosh();
      complex1.acos();
      complex9.getReal();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.add((-2.812076759125914E-8));
      complex1.createComplex((-2.812076759125914E-8), (-2.812076759125914E-8));
      complex0.ZERO.hashCode();
      complex0.sin();
      complex1.acos();
      complex1.equals(complex0);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.divide(complex0);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.log();
      complex4.INF.hashCode();
      Complex complex5 = complex4.ONE.sin();
      List<Complex> list0 = complex1.nthRoot(1984);
      assertEquals(1984, list0.size());
      assertFalse(list0.contains(complex3));
      
      Complex complex6 = Complex.valueOf((-701.6217036416637), (-2567.569232));
      assertEquals((-2567.569232), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex0.divide(complex5);
      assertEquals(0.8414709848078965, complex5.getReal(), 0.01);
      assertTrue(complex7.equals((Object)complex2));
      assertTrue(complex4.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex7, complex0);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
  }
}
