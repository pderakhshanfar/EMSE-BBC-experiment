/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:49:13 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex(1789.5341075393012, 20.0);
      complex2.getArgument();
      Complex complex4 = complex0.asin();
      complex4.NaN.hashCode();
      complex4.hashCode();
      Complex complex5 = new Complex((-246.223));
      complex3.INF.divide(complex5);
      Complex complex6 = new Complex(20.0);
      Complex complex7 = complex3.tan();
      complex7.nthRoot(24);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 1585.07369828);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.sqrt();
      complex1.tanh();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ZERO.sinh();
      complex0.tan();
      complex1.pow((-20.0));
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1069.80968203031, 1.1219362668088805E7);
      complex0.ONE.nthRoot(369);
      Complex complex1 = new Complex(1.1219362668088805E7, 1069.80968203031);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply((-44));
      Complex complex4 = complex3.acos();
      complex4.ZERO.hashCode();
      complex4.readResolve();
      complex4.NaN.getArgument();
      Complex complex5 = complex3.INF.tanh();
      complex5.ZERO.reciprocal();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.ZERO.divide((-731.8819768));
      Complex complex8 = complex2.tan();
      complex8.INF.divide((double) (-44));
      Complex complex9 = new Complex((-44), (-1512.53681471));
      Complex complex10 = complex9.I.tanh();
      complex9.NaN.hashCode();
      Complex complex11 = complex6.pow(complex9);
      Complex complex12 = complex8.multiply(complex9);
      complex12.INF.sinh();
      Complex complex13 = complex11.reciprocal();
      complex12.sqrt();
      complex3.multiply(complex7);
      complex9.NaN.nthRoot(153);
      complex10.sinh();
      Complex complex14 = complex1.divide(complex10);
      complex0.multiply(1069.80968203031);
      Complex complex15 = complex14.conjugate();
      complex13.readResolve();
      complex15.multiply(3328.85912289159);
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.4216561713555547E276, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(4.4216561713555547E276);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.4216561713555547E276, Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(4.4216561713555547E276);
      Complex complex2 = complex1.NaN.divide(complex0);
      complex1.multiply(complex0);
      complex0.sin();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.NaN;
      complex2.ZERO.tanh();
      complex1.multiply(1.5707963267948966);
      Complex.valueOf((-1196.36259834));
      Complex complex3 = new Complex((-1141.279527596156), Double.POSITIVE_INFINITY);
      complex3.multiply(2.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1.1541756557557508E254);
      Complex complex2 = new Complex(2887.946061);
      complex1.sqrt1z();
      complex0.asin();
      complex2.abs();
      Complex complex3 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.4216561713555547E276, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply((-1555));
      Complex complex2 = complex1.tanh();
      complex2.multiply((-366));
      complex1.multiply((-366));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.881373587019543, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      complex2.INF.divide(complex0);
      complex2.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(9.067111966346, (-1.166799420361101E-7));
      Complex.valueOf((-1.166799420361101E-7), 9.067111966346);
      complex1.divide(complex2);
      complex0.cos();
      Complex complex3 = new Complex(9.067111966346);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(9.287016406260223E27);
      complex0.INF.conjugate();
      Complex complex1 = complex0.NaN.pow((-236.35518413969));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ONE.sin();
      complex0.readResolve();
      Complex complex4 = complex2.subtract(complex0);
      complex3.INF.abs();
      Complex complex5 = complex0.sqrt1z();
      complex3.subtract((-374.376));
      complex0.exp();
      Complex.valueOf((-236.35518413969));
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(6.3984347447610573E17, 7.602385197610123E-8);
      complex5.conjugate();
      complex4.nthRoot(3414);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      complex0.ONE.getField();
      Complex complex1 = complex0.sqrt1z();
      complex1.NaN.add(complex0);
      complex1.exp();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.I.conjugate();
      complex1.cosh();
      Complex complex4 = Complex.valueOf(2136.68, 2136.68);
      complex2.ZERO.conjugate();
      complex4.ZERO.cosh();
      complex1.multiply((-2145828952));
      complex2.abs();
      Complex complex5 = complex3.sqrt();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract(6.283185307179586);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.I;
      complex3.atan();
      Complex complex4 = complex0.divide(complex1);
      complex4.cos();
      complex1.reciprocal();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.multiply(complex2);
      Complex complex7 = Complex.valueOf(3.0381585517456254E-10, (-1.301267783434537E-7));
      complex7.hashCode();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.NaN;
      complex6.subtract(Double.NaN);
      complex0.abs();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, (-1299.078812358348));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      complex2.exp();
      complex1.divide((-256.107301965068));
      Complex complex3 = Complex.valueOf((-1299.078812358348));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.cos();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.ZERO;
      complex4.getReal();
      complex4.I.divide((double) 2110);
      Complex complex8 = complex6.multiply(2110);
      complex8.multiply(Double.POSITIVE_INFINITY);
      complex5.negate();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      complex2.divide(complex1);
      Complex complex3 = Complex.valueOf(10.276564932288816, 10.276564932288816);
      complex3.abs();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(2.968339103404105E-7);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.NaN.negate();
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.pow(complex5);
      complex6.ZERO.sinh();
      Complex complex7 = complex0.NaN.negate();
      Complex complex8 = complex5.add((-2405.98593881168));
      Complex complex9 = complex5.divide(complex4);
      complex0.sqrt();
      complex4.ONE.divide(4116.168);
      complex9.ZERO.getField();
      complex9.getField();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex9.sinh();
      complex11.INF.multiply(2648);
      complex2.I.exp();
      Complex complex12 = complex6.conjugate();
      complex3.equals(complex10);
      Complex complex13 = complex8.createComplex(4116.168, (-4.674900007989718E-9));
      complex2.conjugate();
      complex2.tan();
      complex13.abs();
      complex8.cosh();
      complex7.negate();
      complex11.log();
      complex4.sqrt1z();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 2.266777992248535;
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 1954.035296797859);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = (Complex)complex2.readResolve();
      complex0.cosh();
      Complex complex4 = Complex.valueOf((-3759.306), (-1858.2548647071));
      Complex complex5 = complex4.log();
      Complex complex6 = complex0.multiply(1569936343);
      Complex complex7 = complex3.add(complex2);
      complex0.hashCode();
      complex7.log();
      Complex complex8 = complex6.log();
      complex0.sqrt1z();
      Complex complex9 = Complex.I;
      complex9.getReal();
      complex1.hashCode();
      Complex complex10 = Complex.ZERO;
      complex10.isNaN();
      complex8.tanh();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.divide(2073.0166520517973);
      complex7.tan();
      complex10.cos();
      Complex complex13 = Complex.I;
      Complex complex14 = Complex.ZERO;
      complex5.getReal();
      Complex complex15 = complex2.multiply(1569936343);
      complex12.toString();
      complex15.asin();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 1.0;
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.I.exp();
      complex1.ZERO.nthRoot(3959);
      complex0.ZERO.add(0.0);
      complex1.sqrt();
      complex0.getField();
      Complex complex2 = Complex.ZERO;
      complex2.ZERO.cosh();
      // Undeclared exception!
      complex2.ZERO.nthRoot(1187);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1131.8275166901));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex((-2523.410398647729), 2.266777992248535);
      complex3.INF.negate();
      complex3.getArgument();
      Complex complex4 = complex1.cos();
      complex1.acos();
      Complex complex5 = Complex.valueOf(1687601.6224359095);
      complex5.divide(1625.0);
      Complex complex6 = complex2.pow((-2523.410398647729));
      Complex complex7 = Complex.valueOf(2351.2337);
      complex2.divide(complex7);
      Complex complex8 = Complex.INF;
      complex1.sqrt1z();
      complex4.divide(617.6987947788627);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 2.266777992248535);
      complex0.I.subtract((-4.8729113120576875));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.cos();
      Complex complex5 = complex2.reciprocal();
      complex5.multiply(complex0);
      complex3.hashCode();
      Complex complex6 = Complex.INF;
      complex4.multiply((-4.8729113120576875));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 1954.035296797859);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      complex2.readResolve();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf((-3759.306), (-1858.2548647071));
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.add(complex5);
      complex5.hashCode();
      complex6.log();
      complex3.log();
      Complex complex8 = complex4.sqrt1z();
      complex6.getReal();
      complex1.hashCode();
      complex0.isNaN();
      Complex complex9 = complex8.tanh();
      complex9.divide((-3759.306));
      Complex complex10 = new Complex(1.42436589329759E250);
      complex10.tan();
      complex9.cos();
      Complex complex11 = Complex.I;
      complex1.getReal();
      complex7.multiply(6620);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 1954.035296797859);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      complex2.readResolve();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf((-3759.306), (-1858.2548647071));
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.subtract(complex5);
      complex1.multiply(complex6);
      Complex complex8 = Complex.I;
      complex8.divide((-1858.2548647071));
      complex8.toString();
      Complex complex9 = complex1.tanh();
      complex1.readResolve();
      complex6.equals(complex9);
      Complex complex10 = complex1.conjugate();
      complex7.exp();
      Complex complex11 = complex1.exp();
      complex10.createComplex((-9.427143563390596E-8), (-2523.410398647729));
      complex1.sqrt1z();
      complex8.divide(16.60183393993584);
      complex1.cos();
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 1954.035296797859);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = (Complex)complex2.readResolve();
      complex3.I.nthRoot(2142);
      complex0.cosh();
      Complex complex4 = Complex.valueOf((-3759.306), (-3759.306));
      Complex complex5 = complex4.log();
      complex4.multiply(complex0);
      Complex complex6 = Complex.I;
      Complex complex7 = complex5.divide(2304.113078);
      complex4.toString();
      Complex complex8 = complex7.tanh();
      complex2.readResolve();
      Complex complex9 = Complex.I;
      complex5.equals(complex9);
      complex0.conjugate();
      complex4.exp();
      complex4.exp();
      Complex complex10 = complex9.createComplex((-20.0), 543.10631900918);
      complex6.getArgument();
      complex8.isNaN();
      complex10.tanh();
      Complex.valueOf(543.10631900918, (-13.05622));
      complex1.atan();
      Complex complex11 = complex3.tanh();
      complex11.getField();
      complex6.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      complex1.I.sqrt();
      Complex complex2 = complex1.INF.subtract(complex0);
      complex0.ZERO.hashCode();
      Complex complex3 = Complex.I;
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1521.56631494), 2837.2579360578566);
      Complex complex1 = complex0.I.reciprocal();
      complex0.NaN.multiply(complex1);
      complex1.I.hashCode();
      Complex complex2 = Complex.INF;
      complex2.subtract(0.0);
      Complex complex3 = Complex.ZERO;
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      complex1.ZERO.getField();
      Complex complex2 = complex0.I.asin();
      complex2.INF.getField();
      Complex complex3 = complex2.subtract(complex0);
      complex3.multiply(complex2);
      complex3.NaN.conjugate();
      Complex complex4 = complex1.divide(complex0);
      complex2.NaN.sinh();
      Complex complex5 = complex4.INF.pow(Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex6 = complex0.ONE.reciprocal();
      Complex complex7 = complex4.add(1548.0);
      complex7.pow(complex0);
      complex0.NaN.sqrt1z();
      complex4.subtract(complex1);
      complex7.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.add(631.7802243);
      complex8.ONE.sinh();
      Complex complex9 = complex5.cosh();
      complex9.I.createComplex(565.5584568757635, Double.POSITIVE_INFINITY);
      Complex complex10 = complex7.asin();
      Complex complex11 = complex7.pow(complex10);
      complex2.cosh();
      Complex complex12 = complex11.pow(complex6);
      complex12.ZERO.conjugate();
      try { 
        complex12.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1521.56631494), 2837.2579360578566);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex1.I.hashCode();
      Complex complex3 = complex2.pow(849.7267007347803);
      complex0.divide(complex1);
      Complex complex4 = Complex.INF;
      complex3.divide((-1387.8));
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.cos();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.27, 2.27);
      complex0.reciprocal();
      Complex complex1 = new Complex(2.28902292251587, 2.28902292251587);
      Complex complex2 = complex1.multiply(Double.NaN);
      Complex complex3 = complex2.NaN.exp();
      complex3.ONE.cosh();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.createComplex(185, (-2523.410398647729));
      complex0.getArgument();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex3.acos();
      complex2.divide(2.0);
      Complex complex6 = complex5.pow((-2523.410398647729));
      complex5.divide(complex2);
      Complex complex7 = Complex.INF;
      complex7.divide(2.0);
      complex6.tan();
      complex4.cos();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(2373.3420723, 3338.0);
      Complex complex1 = complex0.createComplex(2.266777992248535, (-1853.22));
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.acos();
      complex0.tan();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.createComplex(2.0, 2.0);
      Complex complex2 = complex0.divide((-2572.513));
      complex0.acos();
      complex2.tan();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1521.56631494), 2837.2579360578566);
      Complex complex1 = complex0.multiply(1159);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.add(complex1);
      complex3.hashCode();
      Complex complex4 = complex3.log();
      Complex complex5 = complex2.log();
      Complex.valueOf(8.082792416221215E-30, 2837.2579360578566);
      complex3.sqrt1z();
      complex3.getReal();
      complex4.getReal();
      complex5.hashCode();
      complex0.isNaN();
      Complex complex6 = Complex.ONE;
      complex6.isNaN();
      complex3.tanh();
      Complex.valueOf(2701.14908879, (double) 1159);
      Complex complex7 = complex0.atan();
      complex2.tan();
      Complex complex8 = Complex.INF;
      complex7.atan();
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1685884221736482, (-1344.9483));
      Complex complex1 = new Complex((-1344.9483));
      complex0.I.subtract(complex1);
      Complex complex2 = Complex.valueOf(0.6588751077651978);
      complex2.ONE.abs();
      complex0.I.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex3.I.subtract(complex4);
      Complex complex6 = complex0.subtract(1.0);
      Complex complex7 = complex3.ZERO.cos();
      complex7.ONE.sqrt();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex5.ONE.atan();
      complex5.NaN.subtract(complex8);
      complex5.reciprocal();
      Complex complex10 = complex4.createComplex((-4.8729113120576875), (-1065.1));
      complex3.reciprocal();
      Complex.valueOf(497.4);
      complex6.sin();
      complex5.pow((-1344.9483));
      complex8.sinh();
      Complex complex11 = complex5.multiply(complex9);
      complex11.sqrt();
      complex10.sqrt1z();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1521.56631494), 2837.2579360578566);
      Complex complex1 = complex0.multiply((-258));
      complex1.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.multiply(388083839);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex0.add(complex4);
      complex2.hashCode();
      complex0.log();
      Complex complex6 = complex3.log();
      Complex complex7 = Complex.valueOf(2837.2579360578566, Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.sqrt1z();
      complex0.getReal();
      complex5.getReal();
      complex8.hashCode();
      complex7.isNaN();
      complex0.isNaN();
      complex0.tanh();
      Complex complex9 = Complex.valueOf((-14.94786), (double) (-258));
      complex0.atan();
      complex6.tan();
      Complex complex10 = Complex.INF;
      complex7.atan();
      complex5.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 1954.035296797859);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex0.cosh();
      Complex.valueOf((-3759.306), (-1858.2548647071));
      complex1.acos();
      Complex complex5 = complex3.multiply((-3337));
      complex5.sinh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.add(complex6);
      complex5.hashCode();
      Complex complex8 = complex6.log();
      Complex complex9 = complex3.log();
      Complex complex10 = Complex.valueOf((-1312.34), 0.41421356237309515);
      complex6.sqrt1z();
      complex9.getReal();
      Complex complex11 = Complex.INF;
      complex11.getReal();
      complex9.hashCode();
      complex7.isNaN();
      complex10.isNaN();
      complex0.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2.0442017676224915E-4));
      complex8.atan();
      Complex complex12 = Complex.INF;
      complex4.atan();
      complex9.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 1953.2299313912376);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.valueOf((-3759.306), (-1858.2548647071));
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.cos();
      complex2.subtract(complex6);
      Complex complex8 = complex1.multiply(complex7);
      complex5.abs();
      Complex complex9 = complex8.multiply((-1978778339));
      Complex complex10 = complex9.cos();
      Complex complex11 = complex3.divide(2.968339103404105E-7);
      complex11.isInfinite();
      complex9.sqrt1z();
      complex0.multiply((-1978778339));
      complex5.exp();
      complex11.divide(1953.2299313912376);
      complex2.isInfinite();
      complex3.readResolve();
      Complex complex12 = complex7.acos();
      complex10.cosh();
      Complex complex13 = Complex.ZERO;
      complex13.pow(complex12);
      complex7.reciprocal();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(2837.2579360578566, (-4844.22));
      Complex complex1 = complex0.multiply(2837.2579360578566);
      Complex complex2 = complex0.pow(6.283185307179586);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.tanh();
      complex2.hashCode();
      Complex complex5 = new Complex(6.283185307179586, (-4844.22));
      complex5.pow(complex3);
      complex5.add((-1.0));
      complex5.abs();
      complex4.multiply(1);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex2.divide(3773.1604);
      complex7.isInfinite();
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = complex6.multiply(1);
      complex8.exp();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.divide(9.016946273084244E-9);
      complex11.isInfinite();
      complex7.readResolve();
      complex3.acos();
      complex6.cosh();
      complex9.pow(complex1);
      complex2.reciprocal();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex1.ZERO.pow(2.0);
      Complex complex4 = complex3.ZERO.sqrt();
      complex4.NaN.tanh();
      complex1.hashCode();
      Complex complex5 = Complex.INF;
      complex2.abs();
      Complex complex6 = complex3.multiply((-588));
      complex0.cos();
      Complex complex7 = complex3.divide((-2000.674354095512));
      complex6.isInfinite();
      Complex complex8 = complex3.sqrt1z();
      Complex complex9 = new Complex((-2000.674354095512));
      Complex complex10 = complex7.exp();
      Complex complex11 = complex5.divide(Double.POSITIVE_INFINITY);
      complex11.NaN.sinh();
      complex10.isInfinite();
      complex0.readResolve();
      Complex complex12 = complex1.acos();
      Complex complex13 = complex10.cosh();
      complex12.pow(complex8);
      Complex.valueOf((double) (-588), 2.0);
      complex13.cosh();
      Complex.valueOf(3640.31, 3640.31);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1521.56631494), 2837.2579360578566);
      Complex complex1 = complex0.I.reciprocal();
      complex0.NaN.multiply(complex1);
      complex1.I.hashCode();
      complex0.NaN.subtract(2837.2579360578566);
      Complex.valueOf(2837.2579360578566, 1.2579610347747803);
      complex1.tanh();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 2.266777992248535);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.divide(complex1);
      complex1.cos();
      Complex complex4 = complex3.multiply(1);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.multiply((-3337));
      complex7.ONE.sinh();
      Complex complex8 = complex4.add(complex5);
      complex2.hashCode();
      Complex complex9 = complex6.log();
      complex5.log();
      Complex complex10 = Complex.valueOf(941.02, 0.41421356237309515);
      complex10.sqrt1z();
      complex3.getReal();
      complex0.I.getArgument();
      complex5.getReal();
      complex1.hashCode();
      complex4.isNaN();
      complex9.isNaN();
      complex8.tanh();
      Complex complex11 = Complex.valueOf((-2.0442017676224915E-4), (double) (-3337));
      complex11.atan();
      complex3.tan();
      Complex complex12 = Complex.INF;
      complex12.atan();
      complex10.multiply(complex2);
      complex4.conjugate();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex3.cos();
      complex2.ONE.acos();
      Complex complex5 = complex4.multiply(1);
      complex2.cos();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex4.multiply(175);
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex7.add(complex8);
      complex9.hashCode();
      complex1.log();
      Complex complex10 = complex6.log();
      Complex.valueOf(0.9937246430420058, (double) 1);
      complex3.sqrt1z();
      complex0.getReal();
      complex10.getReal();
      complex9.hashCode();
      complex1.isNaN();
      complex10.isNaN();
      Complex complex11 = complex7.tanh();
      Complex complex12 = Complex.valueOf(1.1752011936438014, (double) 1);
      complex11.atan();
      complex7.tan();
      Complex complex13 = Complex.INF;
      complex12.atan();
      Complex complex14 = new Complex(175, Double.NaN);
      complex14.multiply(complex1);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 1954.035296797859);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      Complex complex3 = (Complex)complex2.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = Complex.valueOf((-3759.306), (-1858.2548647071));
      Complex complex6 = complex5.log();
      Complex complex7 = complex4.cos();
      Complex complex8 = complex2.subtract(complex6);
      complex1.multiply(complex7);
      Complex complex9 = Complex.I;
      complex9.divide((-1858.2548647071));
      complex9.toString();
      Complex complex10 = complex1.tanh();
      complex1.readResolve();
      complex7.equals(complex10);
      Complex complex11 = complex1.conjugate();
      complex8.exp();
      complex1.exp();
      complex11.createComplex((-9.427143563390596E-8), (-2523.410398647729));
      complex9.getArgument();
      complex0.isNaN();
      complex6.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2523.410398647729));
      complex2.atan();
      complex2.tan();
      Complex complex12 = Complex.INF;
      complex3.atan();
      complex10.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1521.56631494), 2837.2579360578566);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex1.I.hashCode();
      Complex complex3 = complex0.multiply((-1173));
      complex0.exp();
      Complex complex4 = complex3.divide((-319.46576563));
      complex1.isInfinite();
      complex2.readResolve();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, 2.0);
      Complex complex6 = complex5.acos();
      complex2.cosh();
      complex4.pow(complex6);
      Complex complex7 = Complex.valueOf((-2607.7295431));
      complex7.reciprocal();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      complex1.pow(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sqrt1z();
      complex3.readResolve();
      Complex complex4 = complex2.sin();
      complex4.ONE.conjugate();
      Complex complex5 = complex0.tanh();
      complex5.NaN.getArgument();
      complex0.hashCode();
      complex0.atan();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex4.NaN.divide(complex6);
      complex2.tan();
      complex2.atan();
      Complex complex7 = Complex.I;
      complex4.multiply(complex7);
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = Complex.valueOf(1703.98319, (-18.275));
      complex0.abs();
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.readResolve();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex3.NaN.sqrt1z();
      complex5.I.pow(2.0862779590338074);
      complex5.ZERO.conjugate();
      complex1.conjugate();
      complex1.getField();
      Complex complex6 = complex0.add((-1674.2));
      complex6.NaN.getArgument();
      complex4.atan();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.ZERO.multiply(1);
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = complex0.subtract(complex2);
      Complex.valueOf((double) 1, (double) 1);
      Complex complex7 = complex6.ZERO.asin();
      complex1.ONE.tanh();
      Complex complex8 = complex1.multiply(1079);
      complex1.abs();
      complex8.ZERO.multiply(1079);
      Complex complex9 = complex8.I.cos();
      complex9.NaN.atan();
      complex8.divide((double) 1079);
      complex3.isInfinite();
      complex1.sqrt1z();
      Complex complex10 = complex1.multiply(1079);
      complex10.INF.exp();
      complex3.ZERO.add(Double.NaN);
      complex10.divide(1623.0);
      Complex complex11 = complex5.pow((-2031.344));
      complex3.divide(complex6);
      complex11.divide((-991.3886089139553));
      complex2.tan();
      complex4.cos();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-1583.776773368681), (-1583.776773368681));
      complex0.toString();
      Complex complex1 = complex0.add((-1583.776773368681));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.atan();
      complex2.NaN.tanh();
      complex3.divide((-2793.235889069973));
      complex0.pow(complex3);
      complex0.multiply(0);
      complex2.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 2.266777992248535);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.divide(complex1);
      complex1.cos();
      Complex complex4 = complex3.multiply(1);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex1.multiply((-3337));
      complex7.ONE.sinh();
      Complex complex8 = complex4.add(complex5);
      complex2.hashCode();
      Complex complex9 = complex6.log();
      complex5.log();
      Complex complex10 = Complex.valueOf(941.02, 0.41421356237309515);
      complex10.sqrt1z();
      complex3.getReal();
      complex5.getReal();
      complex1.hashCode();
      complex4.isNaN();
      complex9.isNaN();
      complex8.tanh();
      Complex complex11 = Complex.valueOf((-2.0442017676224915E-4), (double) (-3337));
      complex11.atan();
      complex3.tan();
      Complex complex12 = Complex.INF;
      complex12.atan();
      complex10.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 2.266777992248535);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.I.exp();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex3.divide(Double.NaN);
      complex6.isInfinite();
      Complex complex7 = complex5.sqrt1z();
      complex3.multiply(171);
      complex2.exp();
      complex2.divide((-991.3886089139553));
      complex7.isInfinite();
      complex3.readResolve();
      complex2.acos();
      Complex complex8 = complex0.cosh();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex8.reciprocal();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex1.ZERO.pow(2.0);
      Complex complex4 = complex3.ZERO.sqrt();
      complex4.NaN.tanh();
      complex1.hashCode();
      Complex complex5 = complex0.add(0.0);
      complex2.abs();
      Complex complex6 = complex3.multiply((-588));
      complex0.cos();
      Complex complex7 = complex3.divide((-2000.674354095512));
      complex6.isInfinite();
      Complex complex8 = complex3.sqrt1z();
      complex7.multiply((-588));
      Complex complex9 = complex7.exp();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex9.isInfinite();
      complex0.readResolve();
      Complex complex10 = complex1.acos();
      Complex complex11 = complex9.cosh();
      complex10.pow(complex8);
      complex3.reciprocal();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5860490798950195, 1215.81596213);
      Complex complex1 = Complex.ZERO;
      complex1.INF.toString();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.multiply(complex1);
      complex0.hashCode();
      complex3.add(0.5860490798950195);
      complex3.tan();
      Complex complex4 = new Complex((-941.02));
      complex4.atan();
      complex0.conjugate();
      complex1.divide((-941.02));
      complex4.pow(complex3);
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.266777992248535, 1954.035296797859);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tan();
      complex2.readResolve();
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.valueOf((-3759.306), (-1858.2548647071));
      Complex complex5 = complex4.log();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex1.multiply(complex6);
      Complex complex9 = Complex.I;
      complex9.divide((-1858.2548647071));
      complex9.toString();
      Complex complex10 = complex1.tanh();
      complex1.readResolve();
      complex6.equals(complex10);
      Complex complex11 = complex1.conjugate();
      Complex complex12 = complex7.exp();
      Complex complex13 = complex1.exp();
      complex11.createComplex((-9.427143563390596E-8), (-2523.410398647729));
      complex9.getArgument();
      Complex complex14 = complex1.cos();
      complex1.acos();
      complex6.divide((-1858.2548647071));
      complex11.pow(2450.0233119480595);
      complex8.divide(complex0);
      complex12.divide(0.053244516253471375);
      complex14.tan();
      complex13.cos();
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      Complex.valueOf(822.438, (-2.185039863261519));
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.exp();
      complex3.abs();
      complex4.add(372.1993);
      complex0.toString();
      complex4.getImaginary();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.NaN.asin();
      Complex complex4 = complex1.ZERO.tan();
      complex4.ONE.cosh();
      complex0.ONE.readResolve();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex1.log();
      complex6.ZERO.cos();
      Complex complex7 = complex0.subtract(complex1);
      complex1.NaN.multiply(0);
      complex3.INF.multiply(complex5);
      complex7.toString();
      Complex complex8 = Complex.I;
      Complex complex9 = (Complex)complex0.readResolve();
      complex8.equals(complex9);
      Complex complex10 = complex7.conjugate();
      Complex complex11 = complex3.exp();
      complex11.ONE.exp();
      Complex complex12 = complex8.createComplex(2450.0233119480595, 2.0);
      complex12.I.getArgument();
      complex2.cos();
      Complex complex13 = complex5.divide(2450.0233119480595);
      complex1.isInfinite();
      complex9.readResolve();
      Complex complex14 = Complex.INF;
      complex14.acos();
      complex2.cosh();
      complex5.pow(complex11);
      complex13.reciprocal();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(3964.78306, 3964.78306);
      complex0.exp();
      Complex complex1 = Complex.valueOf(6.283185307179586, (-895.3295989146391));
      complex0.subtract(complex1);
      complex1.multiply(185);
      try { 
        complex1.nthRoot((-1153));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,153
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex0.ONE.getField();
      Complex.valueOf((-20.0), (-397.2357));
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex3.ONE.acos();
      Complex complex6 = complex2.ZERO.multiply((-397.2357));
      Complex complex7 = complex2.INF.asin();
      complex2.ONE.getArgument();
      Complex complex8 = complex1.subtract((-20.0));
      complex2.atan();
      Complex complex9 = complex1.NaN.divide(complex4);
      Complex complex10 = complex6.subtract((-2.749127978087685E126));
      complex3.NaN.sqrt1z();
      complex8.getReal();
      Complex complex11 = complex7.sinh();
      complex1.add(2808.404790853662);
      Complex complex12 = complex2.sinh();
      Complex complex13 = complex12.INF.sqrt1z();
      Complex complex14 = complex13.ONE.atan();
      complex5.abs();
      complex6.add(0.0);
      complex2.I.toString();
      Complex.valueOf((-2.749127978087685E126), 19.0);
      complex9.getArgument();
      complex10.abs();
      complex9.abs();
      complex11.getReal();
      try { 
        complex14.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      complex0.acos();
      Complex complex1 = complex0.I.negate();
      complex1.ZERO.tan();
      Complex complex2 = new Complex(1136.151648, 1.0);
      Complex complex3 = complex2.NaN.acos();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex0.pow(complex4);
      complex2.INF.multiply(1.0);
      Complex complex6 = complex4.ZERO.reciprocal();
      complex6.multiply(0.0);
      complex3.isNaN();
      Complex complex7 = complex0.NaN.sqrt1z();
      double double0 = (-1.7514953095665195E85);
      complex7.I.createComplex(1.0, (-1.7514953095665195E85));
      complex5.NaN.getArgument();
      complex2.sinh();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sinh();
      complex0.ZERO.readResolve();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex1.ZERO.cos();
      Complex complex5 = complex0.I.sinh();
      Complex complex6 = complex0.ZERO.sinh();
      Complex complex7 = complex6.ONE.tanh();
      Complex complex8 = complex5.sinh();
      complex8.asin();
      complex4.I.hashCode();
      complex8.INF.subtract(complex7);
      complex5.tanh();
      complex1.getField();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex4.negate();
      complex5.sqrt();
      Complex complex13 = complex11.reciprocal();
      complex10.ONE.getArgument();
      Complex complex14 = complex13.INF.acos();
      complex7.multiply(395.903923);
      Complex complex15 = complex11.tan();
      complex13.sin();
      complex0.hashCode();
      complex14.ONE.divide(complex12);
      complex14.subtract(complex13);
      Complex complex16 = complex10.divide(complex0);
      complex3.hashCode();
      complex13.NaN.createComplex(395.903923, 395.903923);
      Complex.valueOf(395.903923);
      complex16.cosh();
      complex14.asin();
      complex2.asin();
      complex15.tan();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.add(0.0);
      complex2.INF.multiply(0.0);
      complex2.INF.readResolve();
      Complex complex3 = complex0.I.sqrt1z();
      complex3.I.hashCode();
      complex0.ONE.acos();
      Complex complex4 = Complex.valueOf((-1541.979845), (-1541.979845));
      complex4.pow(complex1);
      Complex complex5 = complex2.pow(complex4);
      complex5.INF.cos();
      Complex complex6 = complex1.add(complex0);
      complex6.INF.acos();
      Complex complex7 = complex0.reciprocal();
      complex6.divide(complex7);
      complex1.divide(0.0);
      complex3.getArgument();
      complex7.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1521.56631494), 2837.2579360578566);
      Complex complex1 = complex0.I.reciprocal();
      complex0.NaN.multiply(complex1);
      complex1.I.hashCode();
      Complex complex2 = complex0.add(0.0);
      complex2.I.tan();
      Complex complex3 = complex0.atan();
      complex2.conjugate();
      complex3.divide(2837.2579360578566);
      complex0.pow(complex2);
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isNaN();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.I.multiply(0.0);
      Complex complex3 = complex1.ZERO.pow(2.0);
      Complex complex4 = complex3.ZERO.sqrt();
      Complex complex5 = complex4.NaN.tanh();
      complex1.hashCode();
      Complex complex6 = complex0.add(0.0);
      complex6.I.sqrt1z();
      Complex complex7 = Complex.valueOf(2.0);
      complex2.divide(complex7);
      complex6.hashCode();
      complex0.getArgument();
      Complex complex8 = complex0.reciprocal();
      complex4.I.acos();
      Complex complex9 = complex8.ZERO.sin();
      Complex complex10 = complex9.exp();
      complex0.equals(complex6);
      complex2.subtract(complex5);
      complex10.isInfinite();
      complex7.isNaN();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.0, 0.0);
      complex0.INF.add(complex1);
      Complex complex2 = complex0.sqrt();
      complex2.INF.nthRoot(1219);
      Complex complex3 = complex0.sinh();
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = Complex.ONE;
      complex3.I.subtract(complex1);
      complex1.I.nthRoot(3172);
      complex1.NaN.sqrt1z();
      complex1.ZERO.divide(complex3);
      Complex complex4 = complex2.I.pow(0.0);
      Complex.valueOf(2.345551464945955E-59, 2.345551464945955E-59);
      complex4.I.sqrt();
      Complex complex5 = complex1.INF.sin();
      Complex complex6 = Complex.valueOf((-20.0), (-2694.7403897716));
      complex1.add(complex2);
      complex4.sin();
      complex5.abs();
      Complex.valueOf((-196.0), Double.NaN);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getArgument();
      Complex complex1 = complex0.createComplex(822.438, (-3964.78306));
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.sqrt();
      complex0.sqrt1z();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex1.log();
      complex1.toString();
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex4.ONE.pow(822.438);
      complex4.readResolve();
      Complex complex7 = complex4.NaN.atan();
      complex7.ONE.add(0.7853981633974483);
      complex3.getArgument();
      complex5.ZERO.tan();
      complex5.hashCode();
      complex5.divide(complex6);
      complex4.asin();
      complex2.divide(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2309.880769);
      complex0.isNaN();
      Complex complex1 = complex0.tanh();
      complex0.getArgument();
      complex0.I.sin();
      complex1.INF.getField();
      complex0.abs();
      complex1.exp();
      complex0.ZERO.acos();
      complex1.equals(complex0);
      Complex complex2 = complex1.asin();
      complex2.ZERO.subtract(complex1);
      complex2.getField();
      complex1.subtract(2309.880769);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-829.8006208126378));
      Complex complex1 = complex0.conjugate();
      double double0 = (-450.1746160417);
      Complex.valueOf((-450.1746160417), 665.21);
      Complex complex2 = complex1.NaN.sinh();
      complex2.conjugate();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add((-2162.34357));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = complex0.divide(complex2);
      complex2.ZERO.sqrt();
      Complex complex5 = complex0.tan();
      complex3.exp();
      Complex complex6 = complex4.sin();
      complex5.subtract(complex6);
      Complex complex7 = complex6.cosh();
      complex3.sqrt();
      complex6.ZERO.exp();
      Complex complex8 = Complex.valueOf(6.466611224443739E245);
      complex8.ZERO.negate();
      complex2.equals(complex1);
      complex0.getArgument();
      Complex complex9 = complex7.multiply((-2847));
      complex6.ONE.sqrt1z();
      int int0 = 0;
      try { 
        complex9.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(0);
      Complex complex2 = complex0.pow((-16.430643));
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.INF.multiply(0);
      Complex complex5 = complex3.ZERO.add(complex1);
      Complex complex6 = complex5.reciprocal();
      complex6.ZERO.pow(0.0);
      complex4.NaN.exp();
      Complex complex7 = new Complex(6.283185307179586);
      Complex complex8 = complex7.ZERO.tanh();
      int int0 = 1;
      complex7.multiply(1);
      Complex.valueOf(0.0, 0.0);
      complex2.ZERO.toString();
      complex7.exp();
      complex7.tan();
      complex0.subtract(complex7);
      complex2.equals((Object) null);
      complex1.log();
      complex4.createComplex(6.283185307179586, 1);
      try { 
        complex8.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      complex0.INF.sqrt();
      double double0 = (-20.0);
      Complex complex1 = Complex.valueOf(2.0, (-20.0));
      complex1.exp();
      complex1.getArgument();
      complex0.ZERO.atan();
      Complex complex2 = null;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.0);
      try { 
        complex0.NaN.nthRoot((-3831));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,831
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.NaN.asin();
      complex1.ZERO.tan();
      complex0.ONE.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.log();
      complex5.ZERO.cos();
      Complex complex6 = complex0.subtract(complex1);
      complex3.INF.multiply(complex4);
      complex6.toString();
      Complex complex7 = complex6.tanh();
      Object object0 = complex0.readResolve();
      complex7.equals(object0);
      complex6.conjugate();
      Complex complex8 = complex3.exp();
      complex8.ONE.exp();
      Complex complex9 = complex7.createComplex(2450.0233119480595, 2.0);
      complex9.I.getArgument();
      complex2.cos();
      Complex complex10 = complex0.NaN.acos();
      complex10.ZERO.divide(2.0);
      complex1.pow(Double.POSITIVE_INFINITY);
      complex4.divide(complex2);
      complex2.divide(20.0);
      complex3.tan();
      complex9.cos();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.sqrt();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.NaN.sqrt();
      complex1.ZERO.multiply(1);
      complex2.ZERO.log();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex1.ONE.tanh();
      Complex complex7 = complex1.multiply(1079);
      complex1.abs();
      Complex complex8 = complex7.ZERO.multiply(1079);
      Complex complex9 = complex7.I.cos();
      Complex complex10 = complex9.NaN.atan();
      complex7.divide((double) 1079);
      complex3.isInfinite();
      complex1.sqrt1z();
      Complex complex11 = complex1.multiply(1079);
      Complex complex12 = complex11.INF.exp();
      complex12.NaN.divide(1623.0);
      complex0.isInfinite();
      complex10.NaN.readResolve();
      complex5.acos();
      Complex complex13 = complex5.cosh();
      complex6.pow(complex10);
      complex13.reciprocal();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.createComplex((-1858.2548647071), (-1858.2548647071));
      complex0.getImaginary();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.ONE.negate();
      complex3.ONE.readResolve();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.INF.acos();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex1.subtract(complex4);
      complex6.ONE.pow((-1858.2548647071));
      complex0.I.tanh();
      Complex complex7 = complex4.ZERO.sqrt();
      Complex complex8 = complex4.sqrt1z();
      complex8.ZERO.exp();
      complex6.getReal();
      Complex complex9 = complex4.multiply(1);
      complex9.sinh();
      complex6.createComplex(1.6944255828857422, (-1858.2548647071));
      Complex complex10 = complex1.sqrt();
      Complex complex11 = complex10.NaN.log();
      complex11.ONE.readResolve();
      complex4.cosh();
      Complex complex12 = complex4.log();
      complex12.INF.hashCode();
      complex11.equals(complex4);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(355.2);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.I;
      complex2.ZERO.abs();
      Complex complex3 = complex0.INF.multiply(complex2);
      complex3.ONE.divide(complex2);
      complex3.INF.hashCode();
      Complex complex4 = complex1.INF.multiply(0.0);
      complex4.NaN.acos();
      complex0.conjugate();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.log();
      complex1.pow(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.sqrt1z();
      complex3.readResolve();
      Complex complex4 = complex2.sin();
      complex4.ONE.conjugate();
      Complex complex5 = complex0.tanh();
      complex5.NaN.getArgument();
      complex0.hashCode();
      complex4.pow(complex2);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.ONE.exp();
      complex2.INF.readResolve();
      complex0.getImaginary();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.ZERO.tan();
      Complex complex5 = Complex.ZERO;
      complex4.ZERO.multiply(complex5);
      complex3.conjugate();
      Complex complex6 = complex1.add(0.0);
      Complex.valueOf(0.0, 0.0);
      complex6.INF.createComplex((-342.5978666), (-342.5978666));
      complex3.exp();
      complex6.conjugate();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.ZERO.add(152.08511391065608);
      complex0.NaN.log();
      complex1.ONE.pow(complex0);
      Complex complex2 = Complex.NaN;
      complex0.ZERO.exp();
      Complex complex3 = complex0.divide(complex2);
      complex3.I.createComplex(0.0, 0.0);
      complex2.equals(":/c5>{?fXq!EY");
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.NaN.negate();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex2.tan();
      complex7.log();
      complex4.isNaN();
      complex7.sqrt();
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.negate();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.multiply(185);
      complex1.nthRoot(185);
      Complex complex4 = complex2.divide(complex3);
      complex4.toString();
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.readResolve();
      complex0.getReal();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.I.pow(complex1);
      complex3.ONE.pow(0.0);
      complex1.asin();
      Complex complex4 = complex2.NaN.pow(complex0);
      complex2.NaN.atan();
      Complex complex5 = complex0.divide(0.0);
      complex2.NaN.divide(0.0);
      Complex complex6 = complex5.NaN.sqrt();
      complex4.sqrt1z();
      complex6.isInfinite();
      Complex.valueOf(0.0, 244.0577);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.NaN);
      Complex complex2 = complex0.ZERO.atan();
      complex2.NaN.createComplex((-587.074061530222), (-2292.08666932));
      complex2.ONE.negate();
      complex2.I.toString();
      Complex complex3 = complex1.INF.createComplex(Double.NaN, 0.0);
      Complex.valueOf(Double.NaN, 3544.841);
      complex3.log();
      complex0.asin();
      complex0.tanh();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getField();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.sinh();
      complex0.isNaN();
      complex2.sinh();
      complex0.cosh();
      complex2.getReal();
      complex2.getReal();
      Complex complex3 = complex1.sin();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5860490798950195, 1215.81596213);
      Complex complex1 = Complex.ZERO;
      complex1.INF.toString();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.INF.asin();
      complex3.I.reciprocal();
      Complex complex4 = complex1.I.atan();
      Complex complex5 = complex2.NaN.divide(complex1);
      complex5.INF.cos();
      Complex complex6 = complex1.ZERO.multiply((-1));
      Complex complex7 = complex1.NaN.cos();
      Complex complex8 = complex7.NaN.acos();
      complex8.multiply((-1));
      Complex complex9 = complex6.NaN.add(complex0);
      complex5.NaN.hashCode();
      Complex complex10 = complex6.INF.log();
      Complex complex11 = complex10.ZERO.log();
      Complex.valueOf((double) (-1), (double) (-1));
      Complex complex12 = complex0.ONE.sqrt1z();
      complex1.getReal();
      complex0.getReal();
      complex6.hashCode();
      complex5.isNaN();
      complex7.isNaN();
      Complex complex13 = complex4.tanh();
      complex13.ZERO.atan();
      complex12.tan();
      complex11.atan();
      complex9.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.NaN.negate();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(1382.2487655, 5.32346341339996E-260);
      complex3.NaN.subtract(complex2);
      complex2.pow(5.32346341339996E-260);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1927747883417406E-219, 0.0);
      Complex complex1 = complex0.sqrt();
      complex0.getField();
      Complex complex2 = complex0.log();
      complex1.divide(complex2);
      complex2.subtract(4344.0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-895.3295989146391), 0.0);
      complex0.multiply((-1331.183111048387));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.ZERO.cos();
      complex1.pow(Double.NaN);
      complex0.INF.sqrt1z();
      Complex complex2 = complex0.sqrt1z();
      complex0.ZERO.cos();
      Complex complex3 = complex2.ONE.multiply(complex0);
      complex0.equals(complex2);
      Complex complex4 = complex3.asin();
      complex0.createComplex(Double.NaN, Double.NaN);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-1583.776773368681), (-1583.776773368681));
      complex0.toString();
      complex0.add(0.0);
      Complex complex1 = complex0.subtract((-1583.776773368681));
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex((-1077.36), (-785.89514));
      Complex complex1 = complex0.I.log();
      complex0.hashCode();
      Complex.valueOf((-211.954));
      complex0.getField();
      complex1.getImaginary();
      Complex complex2 = Complex.ZERO;
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.pow((-2365.42254978));
      complex3.getReal();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex(115.400478675712, 1719.123918);
      Complex complex1 = complex0.subtract(1366.45);
      complex1.NaN.abs();
      complex1.ZERO.cosh();
      complex0.abs();
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1454.783601658, 20.0);
      Complex complex1 = Complex.NaN;
      complex1.INF.hashCode();
      complex0.equals(complex1);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex1.I.acos();
      Complex complex5 = complex2.ONE.cosh();
      complex5.ZERO.getField();
      Complex complex6 = complex0.createComplex(20.0, 1454.783601658);
      complex6.ZERO.getField();
      Complex complex7 = complex1.NaN.reciprocal();
      Complex complex8 = complex5.exp();
      complex2.ONE.toString();
      complex8.ZERO.subtract(complex2);
      Complex complex9 = complex8.NaN.multiply(2.0);
      Complex complex10 = complex8.INF.pow(complex5);
      complex5.ONE.cosh();
      complex10.sqrt1z();
      complex2.abs();
      complex1.nthRoot(1);
      Complex complex11 = complex3.negate();
      complex1.tanh();
      complex9.nthRoot(1);
      complex11.acos();
      Complex complex12 = complex1.NaN.exp();
      complex12.nthRoot(1);
      complex7.acos();
      Complex complex13 = new Complex(0.0);
      complex4.multiply(complex13);
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-500.6470276944));
      complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.INF.add((-500.6470276944));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.I.subtract(complex0);
      complex1.getField();
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = complex5.pow(0.0);
      complex6.abs();
      Complex complex7 = Complex.valueOf(2.0, 2.0);
      Complex complex8 = complex5.divide(complex4);
      complex8.getField();
      complex5.pow(complex1);
      complex0.getArgument();
      complex6.hashCode();
      complex7.createComplex((-3205.5), (-3987.6869895193367));
      complex6.reciprocal();
      complex5.sinh();
      complex8.sinh();
      complex5.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.NaN.cos();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex4.INF.divide(1.0);
      complex3.getField();
      Complex complex7 = complex4.sin();
      Complex complex8 = complex7.ONE.add(3021.7663014604);
      Complex complex9 = complex4.negate();
      Complex complex10 = complex9.I.asin();
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.8813735870195428, complex10.getImaginary(), 0.01);
      
      Complex.valueOf((-3738.459342072476));
      Complex complex11 = complex4.acos();
      Complex complex12 = complex5.sqrt1z();
      Complex complex13 = complex12.NaN.atan();
      Complex complex14 = complex12.INF.reciprocal();
      Complex complex15 = complex12.ONE.divide(1.0);
      Complex complex16 = complex15.I.sin();
      assertEquals(1.1752011936438014, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex12.multiply(complex5);
      complex12.NaN.getArgument();
      Complex complex18 = complex17.NaN.conjugate();
      assertSame(complex18, complex13);
      
      Complex complex19 = complex12.conjugate();
      Complex complex20 = complex2.acos();
      complex20.cos();
      complex4.I.getField();
      Complex complex21 = complex19.tanh();
      Complex complex22 = complex8.subtract(complex20);
      assertEquals(3022.7663014604, complex8.getReal(), 0.01);
      
      complex6.add(1.0);
      complex14.divide(complex11);
      assertSame(complex11, complex22);
      assertTrue(complex14.equals((Object)complex21));
      assertTrue(complex5.equals((Object)complex15));
  }
}
