/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:51:33 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(20.0);
      complex1.toString();
      Complex complex2 = new Complex(20.0, 20.0);
      complex1.INF.abs();
      Complex complex3 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(20.0);
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.cosh();
      complex3.abs();
      complex3.add(complex4);
      complex5.nthRoot(916);
      complex3.multiply((-211.542));
      Complex complex6 = complex4.reciprocal();
      complex6.isInfinite();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1572.83108645, 4.135457669031131E282);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.asin();
      complex0.I.pow(complex1);
      Complex complex3 = complex1.ONE.negate();
      complex3.NaN.sqrt1z();
      complex0.multiply((-1449));
      Complex.valueOf((-430.47531));
      Complex complex4 = complex0.sqrt1z();
      complex2.asin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-183.0), (-331.037402));
      Complex complex1 = complex0.multiply(1424711.7075496637);
      complex1.INF.getArgument();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.valueOf((-183.0));
      Complex complex6 = complex2.atan();
      Complex complex7 = complex1.INF.divide(complex6);
      complex7.ZERO.cos();
      Complex complex8 = complex1.divide(0.7853981633974483);
      Complex complex9 = complex8.INF.createComplex(1424711.7075496637, 0.7853981633974483);
      complex9.I.log();
      Complex complex10 = complex8.add(complex4);
      complex10.add(Double.POSITIVE_INFINITY);
      complex3.readResolve();
      complex6.add((-668.089));
      Complex complex11 = complex1.add(complex4);
      complex1.divide((-183.0));
      complex6.add(complex3);
      complex10.pow(0.7853981633974483);
      complex10.sin();
      complex5.tanh();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(20.0);
      complex1.toString();
      Complex complex2 = Complex.I;
      complex1.INF.abs();
      Complex complex3 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      complex4.hashCode();
      complex1.acos();
      Complex complex5 = Complex.NaN;
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(20.0);
      complex1.toString();
      Complex complex2 = Complex.I;
      complex1.INF.abs();
      Complex complex3 = complex1.add(complex2);
      complex3.I.pow(2.0);
      complex3.multiply((-1879));
      complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.cosh();
      complex4.abs();
      Complex complex5 = complex3.add(Double.POSITIVE_INFINITY);
      complex5.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex1.pow((double) (-1879));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.sqrt1z();
      complex1.abs();
      complex1.hashCode();
      Complex complex3 = Complex.valueOf((-4.342161053332263E165), 4.331138804900547E-4);
      Complex complex4 = Complex.ZERO;
      complex3.hashCode();
      Complex complex5 = complex3.acos();
      complex2.abs();
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex((-4.342161053332263E165));
      complex3.cos();
      Complex complex8 = complex6.tanh();
      complex5.readResolve();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.sqrt();
      complex6.isInfinite();
      complex7.divide((-1307.0));
      complex0.log();
      complex10.sin();
      Complex complex11 = Complex.I;
      Complex complex12 = new Complex(1679.94630362202, 1.0);
      complex12.multiply(19.0);
      complex5.multiply(complex9);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.valueOf(3096.771391445, (-20.668));
      Complex complex2 = complex0.sqrt1z();
      complex0.abs();
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-20.0), 3096.771391445);
      Complex complex4 = new Complex(1.0, 3096.771391445);
      complex3.hashCode();
      Complex complex5 = complex1.acos();
      complex5.NaN.log();
      complex3.abs();
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex(4.331138804900547E-4);
      complex2.cos();
      complex3.tanh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex1.sqrt();
      complex0.isNaN();
      Complex complex10 = complex0.divide(924.0);
      complex6.tan();
      Complex.valueOf(4.331138804900547E-4, 2072.421276);
      complex10.subtract(complex9);
      complex3.reciprocal();
      Complex complex11 = complex6.divide(3.499495390977608E-8);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.sqrt();
      complex0.isNaN();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.multiply(37);
      complex1.subtract((double) 37);
      Complex complex5 = complex3.subtract(complex4);
      Complex.valueOf(2.449293598294706E-15, 195.364825486504);
      complex4.multiply((-2147483642));
      complex5.reciprocal();
      Complex complex6 = Complex.ZERO;
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.INF.pow((-757.5328382937279));
      complex1.toString();
      complex4.ZERO.toString();
      Complex complex5 = complex1.ZERO.sqrt1z();
      complex0.hashCode();
      complex1.isInfinite();
      Complex complex6 = Complex.valueOf((-1.8013411720005014E-7), (-1.8013411720005014E-7));
      complex1.subtract((-1.8013411720005014E-7));
      Complex complex7 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.divide(complex2);
      Complex complex9 = Complex.NaN;
      complex7.abs();
      complex0.readResolve();
      complex4.sin();
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex9.pow(complex3);
      complex6.exp();
      Complex complex11 = Complex.valueOf((-3365.514), (-1151.40141));
      Complex complex12 = Complex.NaN;
      complex8.cos();
      complex11.tanh();
      Complex complex13 = Complex.I;
      complex10.divide(0.9999999650050461);
      complex10.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(3742.6920827);
      Complex complex1 = complex0.cos();
      complex1.getArgument();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.sqrt();
      complex3.isNaN();
      complex5.divide((-2.390421480210064E-8));
      Complex complex6 = complex1.log();
      complex6.I.multiply(complex4);
      complex6.sinh();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-239.39), 1126.9534);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.subtract((-239.39));
      complex3.pow((-726.167));
      complex3.divide(complex5);
      Complex complex8 = Complex.NaN;
      complex2.abs();
      complex4.readResolve();
      complex7.sin();
      Complex.valueOf(1126.9534);
      Complex complex9 = new Complex(6.350313675279947E-18, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.pow(complex8);
      Complex complex11 = complex10.exp();
      Complex.valueOf(6.283185307179586, 6.350313675279947E-18);
      Complex complex12 = Complex.NaN;
      complex1.cos();
      complex11.tanh();
      Complex complex13 = Complex.I;
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(20.0);
      complex1.toString();
      Complex complex2 = Complex.valueOf(20.0, 1193.613299);
      Complex complex3 = complex2.sqrt1z();
      complex3.INF.abs();
      complex2.hashCode();
      Complex.valueOf(20.0, 4.331138804900547E-4);
      Complex complex4 = new Complex(0.38308101892471313, (-3451.3));
      complex4.hashCode();
      complex1.acos();
      complex0.abs();
      Complex complex5 = Complex.NaN;
      complex3.log();
      Complex complex6 = Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
      complex6.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1151.40141, 1.0);
      complex1.ZERO.log();
      complex0.divide(complex1);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.atan();
      complex3.NaN.sqrt();
      Complex complex4 = complex0.asin();
      complex4.log();
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = new Complex(1.0, 20.0);
      Complex complex7 = complex6.tan();
      Complex complex8 = new Complex(1151.40141);
      complex2.pow(1151.40141);
      Complex complex9 = complex5.sqrt1z();
      complex9.sqrt1z();
      Complex complex10 = Complex.valueOf((-3213.91), (-971.298333));
      Complex complex11 = complex7.subtract(complex10);
      Complex complex12 = complex1.log();
      complex12.add(complex8);
      complex11.add(20.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(3480.62414853, 0.38308101892471313);
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(3480.62414853, 1321.6085);
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.valueOf(7.200489472E10, Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.log();
      complex5.multiply(complex3);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.tan();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex1.pow(0.38308101892471313);
      Complex complex9 = complex3.sqrt1z();
      complex8.sqrt1z();
      complex8.subtract(complex9);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1151.40141, 1.0);
      Complex complex2 = complex1.ZERO.log();
      complex2.ZERO.sin();
      complex0.divide(complex1);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.atan();
      complex4.NaN.sqrt();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.divide(complex3);
      Complex complex7 = complex3.acos();
      complex1.abs();
      Complex complex8 = (Complex)complex5.readResolve();
      Complex complex9 = complex4.sin();
      Complex complex10 = Complex.valueOf(1.0);
      complex7.pow(complex3);
      complex10.createComplex(1151.401844253338, 1.0);
      complex6.exp();
      Complex.valueOf(1151.401844253338, 1151.401844253338);
      Complex complex11 = Complex.NaN;
      Complex complex12 = new Complex(751.4535665435028);
      Complex complex13 = complex12.cos();
      complex0.tanh();
      Complex complex14 = Complex.ZERO;
      complex12.INF.sqrt();
      complex9.isNaN();
      Complex complex15 = complex14.divide(Double.POSITIVE_INFINITY);
      complex8.tan();
      complex9.subtract(20.0);
      complex15.subtract(complex5);
      complex13.multiply((-2147483642));
      complex10.reciprocal();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1463.2655), (-1463.2655));
      Complex complex1 = Complex.I;
      complex0.isNaN();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.NaN.multiply(1011);
      complex4.exp();
      Complex complex5 = complex4.ZERO.divide(20.60917723645451);
      Complex complex6 = complex0.NaN.add(0.0);
      Complex complex7 = complex1.subtract((double) 1011);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.divide(complex8);
      Complex complex10 = Complex.valueOf(0.0, 20.60917723645451);
      complex10.acos();
      complex8.abs();
      complex7.readResolve();
      Complex complex11 = complex7.sin();
      Complex.valueOf(20.60917723645451);
      complex2.pow(complex11);
      Complex complex12 = Complex.I;
      complex12.createComplex(1011, (-1504.4));
      Complex complex13 = Complex.valueOf((-1.0269233640424235E-292), (-2115.228177638147));
      complex1.isNaN();
      Complex complex14 = complex9.divide((-892.792072));
      complex14.tan();
      Complex complex15 = complex10.subtract(complex5);
      Complex complex16 = complex13.multiply((-1518500250));
      complex16.reciprocal();
      complex6.isInfinite();
      complex15.subtract((-2193.60255042));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1151.40141, 1.0);
      complex1.ZERO.log();
      complex0.divide(complex1);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.NaN.sqrt();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex3.ZERO.subtract(1151.40141);
      complex6.divide(complex2);
      Complex complex7 = complex2.acos();
      complex6.abs();
      complex5.readResolve();
      complex3.sin();
      Complex complex8 = Complex.valueOf(1.0);
      complex7.pow(complex6);
      complex8.createComplex(1151.40141, 1.0);
      Complex complex9 = Complex.valueOf((-892.792072), 1151.40141);
      Complex complex10 = new Complex(Double.NaN);
      complex2.sqrt1z();
      complex9.atan();
      try { 
        complex4.nthRoot((-1294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,294
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1151.40141, 1.0);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.divide(complex1);
      complex1.asin();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = Complex.ONE;
      complex6.subtract(1.0);
      complex2.divide(complex3);
      Complex complex7 = complex4.acos();
      complex7.abs();
      complex4.readResolve();
      Complex complex8 = complex1.sin();
      Complex complex9 = Complex.valueOf((-1148.753182223));
      complex9.pow(complex1);
      complex3.createComplex(2199.0, 0.0);
      Complex complex10 = Complex.valueOf((-892.792072), (-4.0852427502515625E-8));
      complex2.isNaN();
      complex0.divide(3188.591384);
      complex4.tan();
      complex6.subtract(complex8);
      complex9.multiply((-2147483642));
      complex10.reciprocal();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.isInfinite();
      Complex complex1 = complex0.multiply(946);
      Complex complex2 = new Complex((-20.0));
      complex2.sin();
      complex1.equals(complex0);
      complex1.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.multiply(946);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.NaN;
      complex4.add(complex6);
      Complex complex7 = complex1.asin();
      complex3.sin();
      Complex.valueOf(0.0, Double.NaN);
      complex2.sinh();
      Complex complex8 = Complex.I;
      Complex complex9 = new Complex((-2522.178412), Double.NaN);
      Complex complex10 = complex0.subtract(complex9);
      complex10.createComplex(2348.413, (-20.0));
      Object object0 = new Object();
      complex4.equals(complex9);
      complex10.pow(complex8);
      complex6.pow(complex7);
      Complex complex11 = Complex.I;
      Complex complex12 = Complex.NaN;
      complex11.pow(complex12);
      Complex complex13 = Complex.ZERO;
      complex13.multiply(1.2781631468016048E205);
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(5.390620378060543E-9, 5.390620378060543E-9);
      Complex complex1 = complex0.I.acos();
      complex1.asin();
      Complex complex2 = complex0.INF.asin();
      complex2.ZERO.abs();
      Complex complex3 = complex1.acos();
      Complex complex4 = Complex.ONE;
      complex4.multiply(2090);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.NaN;
      complex3.add(complex2);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.sin();
      Complex.valueOf(2053.7151741296, Double.NaN);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex1.cos();
      Complex complex11 = Complex.valueOf(5.390620378060543E-9, Double.POSITIVE_INFINITY);
      complex10.ONE.pow(complex11);
      complex5.tanh();
      complex8.NaN.exp();
      complex2.isNaN();
      complex8.subtract((-4282291.8469805));
      Complex.valueOf((-469.7094643154317));
      complex1.cos();
      Complex.valueOf((double) 2090, (double) 2090);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      complex0.acos();
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1463.2655), (-1463.2655));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-1463.2655));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.multiply(1);
      complex2.reciprocal();
      complex0.isInfinite();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.exp();
      complex3.INF.pow((-757.5328382937279));
      complex1.toString();
      Complex complex4 = complex1.ZERO.sqrt1z();
      complex2.add(3687.41810334148);
      Complex complex5 = complex4.sin();
      Complex complex6 = Complex.ZERO;
      complex1.equals(complex6);
      Complex complex7 = complex2.asin();
      Complex complex8 = Complex.ONE;
      complex8.multiply(1168);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.NaN;
      complex7.add(complex0);
      complex5.asin();
      complex1.sin();
      Complex.valueOf(1.522145133131402E263, 0.0);
      Complex complex11 = Complex.NaN;
      Complex complex12 = new Complex(3687.41810334148, 1.522145133131402E263);
      complex12.cos();
      complex12.tanh();
      complex3.isInfinite();
      complex9.subtract((-757.5328382937279));
      Complex.valueOf((double) 1168);
      complex10.cos();
      Complex.valueOf(7.90041744728452E-130, 7.90041744728452E-130);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.divide(1.184154459111628E-8);
      complex0.pow(complex1);
      complex0.abs();
      complex2.sqrt();
      Complex.valueOf(2163.0, 0.0);
      complex0.cosh();
      Complex.valueOf(0.0, Double.NaN);
      Complex complex3 = complex0.createComplex(Double.NaN, Double.NaN);
      complex0.pow(complex1);
      Complex complex4 = Complex.ONE;
      complex3.acos();
      Complex complex5 = Complex.valueOf((-2623.7857604), 2684.5796);
      complex5.log();
      Complex.valueOf((-2623.7857604));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1151.40141, 1.0);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.divide(complex1);
      complex1.asin();
      complex3.subtract(1.0);
      Complex complex4 = new Complex((-0.2627), (-1633.0));
      Complex complex5 = complex4.asin();
      complex2.abs();
      complex1.sqrt();
      Complex complex6 = Complex.valueOf(2333.0202, 6.283185307179586);
      Complex complex7 = complex5.cosh();
      Complex.valueOf(0.0, (-0.2627));
      Complex complex8 = complex2.createComplex((-708.56), 1151.40141);
      complex8.NaN.tan();
      complex7.pow(complex6);
      complex4.subtract(0.0);
      complex7.acos();
      complex7.log();
      Complex.valueOf((-579.1865391));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.divide((-390.0));
      complex0.exp();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.sqrt();
      complex0.add(complex2);
      complex3.subtract((-390.0));
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.divide(complex3);
      Complex complex7 = complex2.tan();
      complex3.equals(complex4);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.atan();
      complex2.cosh();
      Complex complex10 = Complex.INF;
      complex9.asin();
      complex5.sin();
      Complex.valueOf(0.0, 1492.660259478);
      complex8.cos();
      Complex complex11 = Complex.valueOf(20.0, 918.5455823203021);
      complex11.tanh();
      complex6.isInfinite();
      Complex complex12 = new Complex(1069.0);
      complex12.subtract(1267.53296);
      Complex.valueOf(0.0);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.exp();
      double double0 = (-757.5328382937279);
      complex3.INF.pow((-757.5328382937279));
      complex1.toString();
      Complex complex4 = complex1.ZERO.sqrt1z();
      complex0.hashCode();
      complex1.isInfinite();
      double double1 = (-1.8013411720005014E-7);
      Complex complex5 = Complex.valueOf((-1.8013411720005014E-7), (-1.8013411720005014E-7));
      complex5.ONE.hashCode();
      Complex complex6 = complex2.acos();
      complex6.I.log();
      complex1.sin();
      try { 
        complex4.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.3012989023072947), (-1.3012989023072947));
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex2 = complex1.cos();
      complex2.exp();
      Complex complex3 = complex1.multiply((-3512));
      Complex complex4 = complex3.exp();
      complex1.divide(Double.NaN);
      Complex complex5 = complex1.add((-1.0));
      Complex complex6 = Complex.NaN;
      complex6.add(complex5);
      complex5.abs();
      complex4.pow((-1747.05));
      Complex.valueOf(2.643738918824423, 20.0);
      Complex.valueOf(1732.6078539357723, Double.NaN);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.9999614773178638, 1.5707963267948966);
      complex0.readResolve();
      Complex complex2 = Complex.NaN;
      complex1.equals(complex2);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.exp();
      complex2.multiply((-2145080969));
      Complex complex5 = complex4.exp();
      complex2.divide((-8.472642266772353E218));
      complex0.add((double) 1011);
      complex3.add(complex5);
      complex5.abs();
      complex1.pow(Double.NaN);
      Complex.valueOf((-289.0), Double.NaN);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.INF.pow((-4095.138089));
      complex1.toString();
      Complex complex5 = complex1.ZERO.sqrt1z();
      complex0.hashCode();
      complex1.isInfinite();
      Complex complex6 = Complex.valueOf((-1.8013411720005014E-7), (-1.8013411720005014E-7));
      complex6.ONE.hashCode();
      Complex complex7 = complex2.acos();
      complex0.I.abs();
      complex7.readResolve();
      Complex complex8 = complex2.sin();
      complex8.ONE.multiply((-1063256451));
      Complex complex9 = Complex.valueOf((-4095.138089));
      complex9.INF.pow(complex1);
      complex7.createComplex((-4095.138089), (-4095.138089));
      complex7.isInfinite();
      Complex complex10 = complex2.acos();
      complex4.nthRoot(1737);
      complex3.log();
      complex9.acos();
      complex10.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.sin();
      complex1.equals(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.multiply(414);
      complex3.pow(2.5773993145581193);
      Complex complex6 = complex5.sinh();
      complex4.conjugate();
      Complex complex7 = complex3.subtract(complex4);
      complex4.createComplex(414, 414);
      complex6.equals("");
      complex7.pow(complex0);
      complex7.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.subtract((-1.82770041073856E-243));
      Complex complex2 = complex1.NaN.subtract((-1.82770041073856E-243));
      Complex complex3 = complex2.NaN.divide(complex1);
      complex3.NaN.negate();
      Complex complex4 = complex2.I.exp();
      complex2.I.tan();
      Complex complex5 = complex0.negate();
      complex0.getField();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex0.I.pow(complex5);
      Complex complex8 = complex7.ONE.subtract((-1.82770041073856E-243));
      complex8.I.sqrt1z();
      complex6.add(complex1);
      complex8.INF.tan();
      complex6.NaN.multiply(complex1);
      complex6.abs();
      Complex complex9 = complex1.subtract((-1.82770041073856E-243));
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex10.ONE.add(complex5);
      complex0.abs();
      Complex complex11 = complex5.divide((-1.82770041073856E-243));
      complex11.I.abs();
      complex9.INF.multiply(328);
      complex0.reciprocal();
      complex9.acos();
      Complex complex12 = complex0.NaN.divide(complex11);
      complex11.NaN.acos();
      complex12.INF.pow(2.6427060220157728E-5);
      Complex.valueOf((-1.82770041073856E-243));
      complex5.asin();
      complex4.multiply(405);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1463.2655), (-1463.2655));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-1463.2655));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.NaN.multiply(1011);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.ZERO.divide(20.0);
      complex0.NaN.add(0.0);
      Complex complex6 = complex1.add(complex0);
      complex0.abs();
      complex6.pow(2069.369915452648);
      Complex complex7 = Complex.valueOf((double) 1011, 2069.369915452648);
      Complex complex8 = complex7.multiply((-2815));
      complex8.I.add(0.0);
      Complex complex9 = complex0.sin();
      complex6.equals("3@O#j$Io\".");
      Complex complex10 = complex1.asin();
      Complex complex11 = complex10.multiply((-2815));
      complex5.I.pow((double) (-2815));
      complex11.NaN.sinh();
      Complex complex12 = complex2.conjugate();
      complex11.subtract(complex5);
      complex3.createComplex((-1.0), (-1.0));
      complex1.equals(complex5);
      complex4.pow(complex9);
      complex5.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(1.3637129731022491E-120);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(1608.0436, 1608.0436);
      Complex complex4 = complex3.sin();
      Complex complex5 = complex3.divide(complex4);
      complex2.log();
      Complex complex6 = complex0.sqrt1z();
      complex6.add(complex0);
      complex2.reciprocal();
      Complex complex7 = new Complex(1608.0436);
      Complex complex8 = complex7.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(1210.6820188424, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.atan();
      complex5.getField();
      Complex complex11 = complex8.subtract(complex1);
      complex10.equals(complex6);
      Complex complex12 = complex0.multiply((-110));
      complex5.reciprocal();
      complex11.isInfinite();
      complex12.asin();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1.3637129731022491E-120);
      complex0.asin();
      Complex complex1 = Complex.valueOf(480.284, 480.284);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf(480.284, 20.0);
      Complex complex4 = complex3.sin();
      complex2.divide(complex3);
      complex2.sqrt1z();
      Complex complex5 = complex3.add(complex4);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = new Complex(6.283185307179586);
      Complex complex8 = Complex.INF;
      complex8.createComplex((-1.0), (-151.4423866635));
      complex5.I.hashCode();
      Complex.valueOf(6.283185307179586, 1.3637129731022491E-120);
      complex6.atan();
      Complex complex9 = Complex.valueOf(1608.0436, (-1325723.206949988));
      Complex complex10 = complex9.subtract(complex0);
      complex2.equals("+oD2E~");
      complex7.multiply((-110));
      complex5.reciprocal();
      complex10.isInfinite();
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-20.0);
      Complex complex0 = new Complex((-20.0));
      complex0.isInfinite();
      Complex complex1 = complex0.multiply(946);
      double double1 = (-6.968742825553785E-8);
      Complex complex2 = complex1.add((-6.968742825553785E-8));
      complex2.sin();
      complex1.equals(complex0);
      complex1.pow(complex0);
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.INF.pow((-757.5328382937279));
      complex1.toString();
      Complex complex5 = complex1.ZERO.sqrt1z();
      complex0.hashCode();
      Complex complex6 = complex3.cos();
      complex0.add(complex6);
      complex4.equals((Object) null);
      Complex complex7 = complex0.cosh();
      Complex complex8 = Complex.valueOf((-757.5328382937279));
      Complex complex9 = Complex.valueOf((-757.5328382937279), (-757.5328382937279));
      complex9.multiply(complex4);
      Complex complex10 = complex8.multiply(complex2);
      Complex complex11 = complex5.exp();
      complex10.tanh();
      complex8.getReal();
      Complex complex12 = complex10.createComplex((-2968.3634354), (-292.43594558937383));
      Complex complex13 = complex1.asin();
      complex3.isInfinite();
      complex7.divide(complex13);
      complex3.createComplex((-757.5328382937279), 0.9999614773178638);
      Complex complex14 = complex11.add(complex13);
      complex12.cos();
      complex12.getReal();
      Complex complex15 = complex14.sqrt1z();
      complex5.isNaN();
      complex4.isInfinite();
      complex13.cos();
      complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex(2619.355, 2619.355);
      Complex complex1 = new Complex(1359.5937, 1359.5937);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.log();
      complex3.sqrt1z();
      Complex complex4 = Complex.valueOf(2619.355, 1359.5937);
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = Complex.valueOf((-5866.672134775533), 2619.355);
      Complex complex8 = complex2.cos();
      complex7.sin();
      Complex complex9 = complex6.tanh();
      Complex complex10 = complex6.multiply(complex8);
      Object object0 = new Object();
      complex10.equals(complex4);
      complex9.abs();
      Complex.valueOf(0.9916860498860248);
      Complex complex11 = complex5.negate();
      Complex complex12 = Complex.I;
      complex5.ONE.add(complex12);
      complex5.asin();
      complex7.hashCode();
      Complex complex13 = Complex.valueOf(Double.NaN, (-1.0440854056870505E-160));
      complex13.getField();
      complex7.sqrt();
      complex0.getReal();
      complex2.tan();
      complex13.sinh();
      complex11.getReal();
      complex6.sinh();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1463.2655), (-1463.2655));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex3.NaN.multiply(1011);
      complex1.createComplex(1011, (-1710.6924948443));
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.sin();
      Complex complex7 = new Complex(0.0, 4804.65);
      Complex complex8 = complex5.divide(complex7);
      Complex complex9 = complex2.log();
      complex3.sqrt1z();
      Complex complex10 = complex9.add(complex5);
      complex7.reciprocal();
      Complex complex11 = Complex.valueOf((-1710.6924948443), (double) 1011);
      Complex complex12 = complex11.cos();
      complex8.sin();
      Complex complex13 = complex1.tanh();
      complex1.multiply(complex5);
      Object object0 = new Object();
      complex4.equals(complex8);
      complex10.abs();
      Complex.valueOf(4804.65);
      Complex complex14 = complex1.negate();
      complex10.asin();
      complex11.ZERO.reciprocal();
      complex9.hashCode();
      complex14.getField();
      Complex complex15 = complex13.sqrt();
      complex15.getReal();
      complex6.tan();
      complex12.sinh();
      complex10.getReal();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1.3637129731022491E-120);
      complex0.asin();
      complex0.sinh();
      Complex complex1 = Complex.valueOf(1608.0436, 1608.0436);
      complex1.sin();
      Complex complex2 = Complex.I;
      // Undeclared exception!
      complex2.nthRoot(2050641972);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.divide(1.184154459111628E-8);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(1.5292916297912598, (-7.252724942149532E-8));
      Complex complex5 = complex4.cos();
      complex2.sin();
      Complex complex6 = complex5.tanh();
      complex6.multiply(complex3);
      Object object0 = new Object();
      complex0.equals((Object) null);
      Complex complex7 = Complex.ONE;
      complex1.abs();
      Complex.valueOf(1.184154459111628E-8);
      Complex complex8 = complex0.negate();
      Complex complex9 = complex3.asin();
      complex9.hashCode();
      complex7.getField();
      Complex complex10 = Complex.NaN;
      complex8.sqrt();
      Complex complex11 = Complex.I;
      complex11.getReal();
      complex5.tan();
      Complex complex12 = Complex.INF;
      complex12.sinh();
      Complex.valueOf(0.0, 1.078094720840454);
      complex11.getReal();
      Complex complex13 = Complex.valueOf(1819.0, 1.184154459111628E-8);
      complex13.sinh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(227.85184871);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.ZERO.atan();
      complex5.I.createComplex(6.283185307179586, 0.0);
      Complex complex6 = complex2.I.sinh();
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex0.divide(complex2);
      Complex complex9 = complex8.log();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex8.sin();
      Complex complex12 = complex1.tanh();
      complex8.multiply(complex10);
      Object object0 = new Object();
      complex12.equals((Object) null);
      Complex complex13 = Complex.ONE;
      complex9.abs();
      Complex complex14 = Complex.valueOf((-142.24805));
      complex14.INF.getArgument();
      Complex complex15 = complex0.negate();
      Complex complex16 = complex11.asin();
      complex7.hashCode();
      complex2.getField();
      Complex complex17 = Complex.NaN;
      complex4.sqrt();
      complex8.getReal();
      complex16.tan();
      complex15.sinh();
      Complex complex18 = Complex.valueOf(0.0, -0.0);
      complex18.getReal();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply((-1671.6562077));
      complex2.abs();
      complex2.cos();
      Complex complex3 = complex2.sqrt();
      complex3.getField();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.negate();
      Complex complex6 = complex1.conjugate();
      complex5.readResolve();
      complex5.isInfinite();
      Complex complex7 = complex1.pow((-3872.721));
      complex6.add((-328.8580583567));
      Complex complex8 = Complex.valueOf(360.2, 360.2);
      complex4.nthRoot(1521);
      complex7.divide(Double.NaN);
      Complex complex9 = Complex.valueOf((-328.8580583567), (-328.8580583567));
      complex8.getField();
      complex3.subtract(360.2);
      complex7.cosh();
      Complex complex10 = complex1.multiply((-597.986229245202));
      complex9.pow((-1763.58195));
      complex1.add(complex10);
      Object object0 = complex4.readResolve();
      complex4.equals(object0);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.tanh();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.divide(complex0);
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.ONE.exp();
      complex3.NaN.acos();
      Complex complex4 = complex3.INF.cos();
      complex4.INF.add(complex0);
      complex1.equals(complex1);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex3.ONE.pow(complex1);
      complex6.NaN.multiply(complex3);
      Complex complex7 = (Complex)complex5.INF.readResolve();
      complex7.nthRoot(1870);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(Double.NaN);
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.sin();
      Complex complex4 = complex3.tan();
      complex2.tanh();
      Complex complex5 = complex3.subtract((double) 1);
      Complex complex6 = complex5.multiply(complex0);
      complex6.NaN.cosh();
      complex6.cos();
      Complex complex7 = complex4.sin();
      complex5.createComplex(4.740753295616865E-138, 4.740753295616865E-138);
      Complex complex8 = complex4.reciprocal();
      complex8.multiply(Double.NaN);
      complex2.log();
      complex1.add(complex7);
      Complex.valueOf(Double.NaN, 0.5074998140335083);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.exp();
      complex3.INF.pow((-757.5328382937279));
      complex1.toString();
      Complex complex4 = complex1.ZERO.sqrt1z();
      complex0.hashCode();
      Complex complex5 = new Complex((-757.5328382937279), (-757.5328382937279));
      Complex complex6 = complex5.divide(complex2);
      Complex complex7 = complex6.divide(complex3);
      Complex complex8 = complex4.asin();
      complex7.add((-757.5328382937279));
      complex1.getImaginary();
      complex0.multiply(complex6);
      complex7.pow(complex8);
      Complex complex9 = Complex.INF;
      complex9.divide((-757.5328382937279));
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1.3637129731022491E-120);
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(1.3637129731022491E-120, 1654.29995318);
      complex2.I.divide(complex1);
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex0.add(1.3637129731022491E-120);
      complex0.getImaginary();
      Complex complex6 = complex5.conjugate();
      complex1.log();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.I;
      complex6.INF.multiply(complex8);
      Complex complex9 = complex7.multiply((-1724));
      complex9.getImaginary();
      Complex complex10 = complex4.pow(complex6);
      Complex.valueOf(1.0);
      complex10.pow(complex0);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(227.85184871);
      Complex complex1 = complex0.atan();
      complex0.I.negate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex3.ZERO.atan();
      complex4.I.createComplex(6.283185307179586, 0.0);
      Complex complex5 = new Complex(1.1165241398059789E-8, 227.85184871);
      complex0.divide(complex5);
      Complex complex6 = complex2.divide(complex0);
      complex3.asin();
      complex6.add(Double.NaN);
      Complex complex7 = new Complex(6.283185307179586, (-853.7656));
      complex7.getImaginary();
      Complex complex8 = Complex.INF;
      complex4.multiply(complex8);
      complex3.pow(complex1);
      Complex complex9 = Complex.I;
      complex9.divide(1.1165241398059789E-8);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = new Complex(1.3637129731022491E-120);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(1608.0436, 1608.0436);
      Complex complex4 = complex3.sin();
      complex3.divide(complex4);
      complex2.log();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = Complex.valueOf(1.3637129731022491E-120, 0.9999614773178638);
      Complex complex9 = complex1.cos();
      Complex complex10 = complex9.sin();
      complex10.tanh();
      complex9.multiply(complex4);
      Object object0 = new Object();
      complex7.equals(complex0);
      Complex complex11 = Complex.ONE;
      complex11.abs();
      Complex.valueOf((-3.348471032333413E-8));
      complex4.negate();
      Complex complex12 = complex10.asin();
      complex5.hashCode();
      complex8.getField();
      Complex complex13 = Complex.NaN;
      complex13.sqrt();
      complex5.getReal();
      complex12.tan();
      complex6.sinh();
      Complex complex14 = Complex.valueOf(1.0, (-3.348471032333413E-8));
      complex14.getReal();
      complex14.sinh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1151.40141, 1.0);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.NaN.sqrt();
      Complex complex7 = complex6.ONE.add(complex3);
      Complex complex8 = complex5.ZERO.subtract(1151.40141);
      Complex complex9 = complex8.divide(complex4);
      Complex complex10 = complex9.ZERO.tan();
      Complex complex11 = complex5.INF.add(0.0);
      complex0.equals(complex3);
      complex11.I.atan();
      Complex complex12 = complex2.cosh();
      complex12.ONE.abs();
      Complex complex13 = complex2.add(complex1);
      Complex complex14 = complex5.add(1.0);
      Complex complex15 = complex6.multiply(complex7);
      Complex complex16 = complex14.negate();
      Complex complex17 = new Complex(1.0, (-1497.9572664464));
      complex17.subtract(complex13);
      complex17.cos();
      complex15.readResolve();
      complex13.cosh();
      Complex complex18 = complex14.acos();
      complex18.add(0.9999614773178638);
      Complex complex19 = Complex.I;
      complex19.getReal();
      complex0.readResolve();
      complex14.subtract(complex10);
      complex16.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(227.85184871);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.ZERO.atan();
      complex5.I.createComplex(6.283185307179586, 0.0);
      Complex complex6 = complex2.I.sinh();
      complex6.INF.sin();
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex7.log();
      complex3.I.sqrt1z();
      complex8.add(complex0);
      complex3.I.reciprocal();
      Complex complex9 = Complex.valueOf(227.85184871, 227.85184871);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.ZERO.sin();
      complex11.ONE.tanh();
      complex7.INF.multiply(complex4);
      Object object0 = new Object();
      complex9.equals(object0);
      complex1.abs();
      Complex complex12 = Complex.valueOf((-140.49174207));
      complex6.negate();
      complex2.asin();
      complex11.hashCode();
      Complex complex13 = new Complex(6.283185307179586);
      complex13.getField();
      complex12.sqrt();
      complex10.getReal();
      complex7.tan();
      complex9.sinh();
      complex13.getReal();
      Complex complex14 = Complex.valueOf(0.0, (-2837.53));
      complex14.sinh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.INF.pow((-757.5328382937279));
      complex1.toString();
      complex1.ZERO.sqrt1z();
      complex0.hashCode();
      complex1.isInfinite();
      Complex complex5 = Complex.valueOf((-1.8013411720005014E-7), (-1.8013411720005014E-7));
      complex5.ONE.hashCode();
      Complex complex6 = complex2.acos();
      complex0.I.abs();
      Complex complex7 = Complex.I;
      Complex complex8 = complex0.cos();
      complex8.sin();
      Complex complex9 = Complex.valueOf((-757.5328382937279));
      complex9.INF.pow(complex1);
      Complex complex10 = complex6.createComplex((-757.5328382937279), 0.0);
      Complex complex11 = Complex.valueOf(0.0, (-892.792072));
      complex10.isNaN();
      Complex complex12 = complex2.ZERO.divide((-892.792072));
      complex11.NaN.cos();
      Complex complex13 = complex6.tan();
      complex1.ONE.log();
      complex11.ONE.sin();
      Complex complex14 = Complex.ZERO;
      complex4.subtract(complex14);
      complex11.cos();
      complex13.add(complex1);
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0, (-1.0));
      complex0.multiply(complex1);
      Complex complex2 = complex0.sin();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.add(0.0);
      complex1.negate();
      Complex.valueOf(1913.3153972166);
      complex2.sqrt();
      Complex complex5 = new Complex(7749.4652820557);
      complex5.sqrt1z();
      complex1.atan();
      try { 
        complex4.nthRoot((-1294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,294
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.sin();
      Complex.valueOf((-1778.845855538));
      Complex complex4 = complex2.NaN.tanh();
      Complex complex5 = complex2.ONE.add((-1778.845855538));
      Complex complex6 = complex4.asin();
      complex3.add(1661.32);
      Complex complex7 = Complex.I;
      complex7.getImaginary();
      complex5.multiply(complex6);
      Complex complex8 = new Complex(9.613505944809468, 1661.32);
      Complex complex9 = complex8.pow(complex3);
      complex9.divide((-51915.464960564736));
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex3.pow(complex2);
      complex1.abs();
      Complex complex5 = complex2.tan();
      complex0.getArgument();
      Complex complex6 = complex5.add((-20.0));
      complex6.getField();
      complex1.getArgument();
      Complex complex7 = complex6.add(1.1752011936438014);
      complex7.multiply(complex4);
      complex3.negate();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex1.cos();
      complex2.readResolve();
      complex9.cosh();
      Complex complex10 = complex5.acos();
      Complex complex11 = complex3.add(0.0);
      complex10.getReal();
      complex1.readResolve();
      complex4.subtract(complex5);
      complex11.acos();
      complex9.sinh();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.multiply((-2201.4184));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = Complex.valueOf(1.664279766968299E-81, (-2898.21796959577));
      complex0.NaN.getArgument();
      complex0.hashCode();
      Complex complex4 = complex2.NaN.pow(complex3);
      complex4.divide(complex1);
      complex0.sinh();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex2.pow(complex3);
      Complex complex8 = complex2.log();
      complex8.createComplex((-20.0), 2675.86);
      complex7.I.subtract(complex8);
      complex0.conjugate();
      complex3.hashCode();
      complex7.cosh();
      Complex complex9 = Complex.I;
      Complex complex10 = complex0.subtract(complex9);
      complex3.isInfinite();
      complex6.hashCode();
      complex10.nthRoot(1218);
      complex5.createComplex(0.0, (-3078.0592884));
      complex2.exp();
      complex9.hashCode();
      complex3.add((-643.5631011084));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-72.0), 184.34035636143);
      Complex complex1 = new Complex(184.34035636143);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex2.ONE.tanh();
      Complex complex5 = complex0.ZERO.add(complex1);
      complex0.NaN.pow(671.0);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.multiply(1);
      complex9.ZERO.subtract(complex6);
      complex5.acos();
      Complex complex10 = complex1.pow((-72.0));
      Complex complex11 = complex10.ZERO.cos();
      Complex complex12 = complex5.sqrt1z();
      complex12.ZERO.hashCode();
      Complex complex13 = Complex.I;
      complex11.ZERO.asin();
      complex1.divide(complex13);
      Complex complex14 = complex8.conjugate();
      complex14.nthRoot(14);
      complex7.cos();
      complex10.isNaN();
      complex11.sin();
      Complex complex15 = complex10.cos();
      complex15.cosh();
      Complex complex16 = complex3.negate();
      complex16.tanh();
      complex14.exp();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.0153537978961E-8), (-4.0153537978961E-8));
      complex0.ZERO.getArgument();
      complex0.readResolve();
      Complex complex1 = complex0.exp();
      complex0.equals((Object) null);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ZERO.divide(0.0);
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex3.I.pow(complex1);
      complex2.toString();
      Complex complex6 = complex2.INF.subtract(824.32);
      Complex complex7 = complex6.INF.cos();
      complex7.ONE.multiply(complex0);
      Complex complex8 = complex1.createComplex(824.32, 0.0);
      complex2.hashCode();
      complex2.INF.createComplex(390.0, 3074.0);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.cos();
      complex8.multiply(complex10);
      Complex complex11 = complex8.divide(complex4);
      complex11.INF.readResolve();
      Complex complex12 = complex10.pow(0.0);
      Complex complex13 = complex12.NaN.tanh();
      complex5.acos();
      complex6.pow(complex0);
      complex5.getReal();
      complex13.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(273.48995171038, 273.48995171038);
      complex0.tan();
      Complex complex1 = complex0.add(273.48995171038);
      Complex complex2 = complex1.exp();
      complex2.ZERO.acos();
      complex0.sin();
      complex1.asin();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.sin();
      complex1.I.toString();
      complex0.getReal();
      complex0.ONE.exp();
      complex2.ZERO.getArgument();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 31.8584680071081);
      Complex complex5 = complex2.NaN.add(Double.POSITIVE_INFINITY);
      complex5.NaN.getArgument();
      Complex complex6 = complex3.add(complex2);
      complex6.INF.sinh();
      complex0.getArgument();
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3616.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.asin();
      complex0.ZERO.abs();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.INF.subtract(complex4);
      complex1.INF.pow(complex5);
      Complex complex6 = Complex.valueOf((-3616.0), 0.0);
      Complex complex7 = complex5.ONE.add(1.0);
      Complex complex8 = complex2.I.atan();
      Complex complex9 = complex5.ZERO.cos();
      complex9.ONE.subtract(complex7);
      complex0.nthRoot(1);
      Complex complex10 = complex5.asin();
      complex3.sinh();
      complex10.sqrt1z();
      complex8.getField();
      complex8.getField();
      complex1.readResolve();
      complex2.abs();
      complex1.pow(0.0);
      Complex complex11 = complex5.cosh();
      complex6.acos();
      complex11.sin();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.add((-2017.2975));
      Complex complex2 = complex1.ZERO.cosh();
      complex2.ZERO.sqrt();
      Complex complex3 = new Complex((-2017.2975));
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = new Complex((-470.0), (-470.0));
      complex4.ONE.divide(complex5);
      Complex complex6 = complex3.multiply(0.0);
      complex3.abs();
      complex6.I.subtract(complex4);
      Complex complex7 = complex6.NaN.negate();
      complex3.I.readResolve();
      Complex complex8 = complex7.NaN.createComplex((-2688.24), (-4002.82797));
      Complex complex9 = complex4.INF.multiply(complex7);
      complex0.equals(complex3);
      complex8.ONE.getField();
      complex7.multiply(complex6);
      complex3.abs();
      complex9.ZERO.toString();
      complex0.add((-1464.059));
      complex4.cos();
      complex8.subtract(2017.2975);
      complex9.getArgument();
      complex4.abs();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(5.390620378060543E-9, 5.390620378060543E-9);
      Complex complex1 = complex0.I.acos();
      complex1.asin();
      Complex complex2 = complex0.INF.asin();
      complex2.ZERO.abs();
      Complex complex3 = complex1.acos();
      Complex.valueOf(0.0, 805.259359);
      Complex complex4 = complex0.multiply(541);
      Complex complex5 = complex4.tan();
      complex5.NaN.divide(0.0);
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex6.I.acos();
      complex1.getArgument();
      complex4.add(complex1);
      complex3.getReal();
      complex4.exp();
      Complex complex7 = complex3.divide(5.390620378060543E-9);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.add(120.951250349211);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex0.INF.tanh();
      Complex complex7 = complex1.ZERO.subtract(120.951250349211);
      complex7.asin();
      complex1.I.nthRoot(1089);
      complex0.I.getArgument();
      complex0.NaN.readResolve();
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.ZERO.multiply(0.0);
      Complex complex10 = complex9.ZERO.createComplex(1.5707963267948966, 1089);
      Complex complex11 = complex10.I.sqrt1z();
      complex11.ONE.hashCode();
      Complex complex12 = complex0.pow(complex8);
      complex12.INF.sqrt();
      Complex complex13 = complex12.reciprocal();
      complex1.subtract(complex9);
      complex6.tanh();
      complex6.subtract(complex8);
      complex4.multiply(complex9);
      complex3.toString();
      Complex complex14 = complex10.sqrt1z();
      complex14.nthRoot(1089);
      complex14.getField();
      complex4.getArgument();
      complex13.sqrt();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1151.40141, 1.0);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.NaN.sqrt();
      complex6.ONE.add(complex3);
      Complex complex7 = complex5.ZERO.subtract(1151.40141);
      Complex complex8 = complex7.divide(complex4);
      complex8.ZERO.tan();
      Complex complex9 = complex5.INF.add(0.0);
      complex0.equals(complex3);
      complex9.I.atan();
      Complex complex10 = complex2.cosh();
      complex10.ONE.abs();
      complex2.add(complex1);
      Complex complex11 = complex9.asin();
      complex11.ZERO.atan();
      Complex complex12 = complex3.sin();
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex13.cos();
      complex13.tanh();
      complex9.isInfinite();
      complex12.subtract(0.0);
      Complex complex14 = complex13.multiply(0.0);
      Complex complex15 = complex10.tan();
      complex15.multiply(0.0);
      complex14.reciprocal();
      complex15.isInfinite();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.I.readResolve();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.ZERO.add(complex0);
      complex3.I.getArgument();
      Complex complex4 = complex0.I.createComplex(3.2195361624179725E244, 0.0);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ONE.cos();
      complex6.ZERO.getField();
      complex5.INF.toString();
      complex1.toString();
      Complex complex7 = complex0.multiply(complex5);
      Complex complex8 = complex0.conjugate();
      complex4.abs();
      complex7.getField();
      Complex complex9 = complex5.reciprocal();
      complex9.abs();
      complex8.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = new Complex(0.0, (-1.0));
      complex1.multiply(complex2);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.NaN.pow(complex3);
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.pow(complex5);
      complex0.ZERO.toString();
      complex4.I.atan();
      Complex complex7 = complex0.INF.add((-20.0));
      complex7.NaN.cos();
      complex0.equals("NO_RESULT_AVAILABLE");
      Complex complex8 = complex0.atan();
      complex8.I.abs();
      complex3.ZERO.multiply(0.0);
      Complex complex9 = complex7.multiply(0.0);
      complex9.INF.add((-20.0));
      Complex complex10 = complex8.cos();
      complex6.getField();
      complex10.ONE.toString();
      Complex complex11 = complex10.negate();
      complex7.conjugate();
      Complex complex12 = complex7.log();
      complex9.multiply((-1724));
      complex7.getImaginary();
      complex10.pow(complex11);
      Complex complex13 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.pow(complex13);
      complex12.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-1463.2655), (-1463.2655));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.NaN.multiply(1011);
      Complex complex4 = complex1.NaN.createComplex((-1530.473626876), 0.0);
      Complex complex5 = complex3.exp();
      Complex complex6 = complex3.ZERO.divide(20.0);
      complex0.NaN.add(0.0);
      Complex complex7 = complex1.add(complex0);
      complex0.abs();
      complex7.pow(2069.369915452648);
      Complex complex8 = Complex.valueOf((double) 1011, 2069.369915452648);
      Complex complex9 = complex8.multiply((-2815));
      complex9.I.add(0.0);
      Complex complex10 = complex0.sin();
      complex7.equals("3@O#j$Io\".");
      Complex complex11 = complex1.asin();
      Complex complex12 = complex11.multiply((-2815));
      complex6.I.pow((double) (-2815));
      complex12.NaN.sinh();
      Complex complex13 = complex2.conjugate();
      complex12.subtract(complex6);
      complex3.createComplex((-1.0), (-1.0));
      complex4.equals(complex6);
      complex5.pow(complex10);
      complex6.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(2619.355, 2619.355);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.sinh();
      complex1.cosh();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.pow(complex1);
      complex3.ZERO.sqrt1z();
      complex1.NaN.abs();
      Complex complex4 = complex2.I.tan();
      complex4.getArgument();
      complex3.add(521.302826);
      complex3.getField();
      complex2.ZERO.getArgument();
      Complex complex5 = complex1.add((-1916.76943462));
      complex0.I.multiply(complex1);
      complex5.INF.negate();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.divide(1.184154459111628E-8);
      complex0.pow(complex1);
      Complex complex3 = complex1.INF.createComplex(1.184154459111628E-8, 1.5292916297912598);
      Complex complex4 = complex0.atan();
      complex4.NaN.subtract(complex3);
      complex4.equals(complex2);
      complex1.ONE.multiply(0);
      complex4.reciprocal();
      complex0.isInfinite();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(227.85184871);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.ZERO.atan();
      complex5.I.createComplex(6.283185307179586, 0.0);
      Complex complex6 = complex2.I.sinh();
      complex6.INF.sin();
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex7.log();
      complex3.I.sqrt1z();
      complex8.add(complex0);
      complex3.I.reciprocal();
      Complex complex9 = Complex.valueOf(227.85184871, 227.85184871);
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.ZERO.sin();
      complex11.ONE.tanh();
      complex7.INF.multiply(complex4);
      Object object0 = new Object();
      complex9.equals(object0);
      complex1.abs();
      Complex complex12 = Complex.valueOf(227.85184871);
      complex12.ZERO.negate();
      complex11.I.asin();
      complex8.NaN.hashCode();
      complex7.getField();
      complex11.sqrt();
      complex11.getReal();
      complex12.tan();
      complex2.sinh();
      complex8.getReal();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.NaN.exp();
      Complex complex4 = complex3.INF.pow((-757.5328382937279));
      complex1.toString();
      complex1.ZERO.sqrt1z();
      complex0.hashCode();
      complex1.isInfinite();
      Complex complex5 = Complex.valueOf((-1.8013411720005014E-7), (-1.8013411720005014E-7));
      complex5.ONE.hashCode();
      Complex complex6 = complex2.acos();
      complex0.I.abs();
      complex6.readResolve();
      Complex complex7 = complex0.cos();
      complex7.sin();
      Complex complex8 = Complex.valueOf((-757.5328382937279));
      complex8.INF.pow(complex1);
      Complex complex9 = complex6.createComplex((-757.5328382937279), 0.0);
      Complex complex10 = Complex.valueOf(0.0, (-892.792072));
      complex9.isNaN();
      complex2.ZERO.divide((-892.792072));
      Complex complex11 = complex6.tan();
      complex1.ONE.log();
      complex10.ONE.sin();
      Complex complex12 = Complex.ZERO;
      complex4.subtract(complex12);
      complex10.cos();
      complex11.add(complex1);
      Complex.valueOf((-1747.05836535102));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf((-1778.845855538));
      complex2.NaN.tanh();
      complex2.ONE.add((-1778.845855538));
      complex1.I.negate();
      Complex.valueOf(91.0);
      complex3.createComplex(1661.32, 1661.32);
      complex1.sqrt();
      complex4.sqrt1z();
      complex2.atan();
      try { 
        complex2.nthRoot((-1265));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,265
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-1632.8975763));
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.cosh();
      complex0.cos();
      complex1.getField();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex3.NaN.log();
      Complex complex6 = complex2.createComplex(0.0, 3411.41512958);
      Complex complex7 = Complex.valueOf(0.0, 3411.41512958);
      Complex complex8 = complex5.I.conjugate();
      complex1.isNaN();
      Complex.valueOf(474.08900655927073);
      Complex complex9 = complex0.multiply(complex6);
      Complex complex10 = complex9.multiply(complex2);
      Complex complex11 = complex1.exp();
      complex11.NaN.tanh();
      complex11.getReal();
      Complex complex12 = complex9.createComplex(3411.41512958, (-1.8981247089866317E-7));
      complex12.NaN.asin();
      complex10.isInfinite();
      complex4.divide(complex2);
      complex6.createComplex(720.983110107897, (-1.8981247089866317E-7));
      Complex complex13 = complex3.add(complex5);
      complex1.cos();
      complex4.getReal();
      complex9.sqrt1z();
      complex6.isNaN();
      complex2.isInfinite();
      complex7.getArgument();
      complex13.cos();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1006.733748019);
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.asin();
      complex0.multiply(0.0);
      complex0.asin();
      complex0.reciprocal();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.NaN.subtract((double) 1618);
      complex2.INF.add(complex1);
      complex2.ONE.reciprocal();
      complex1.I.nthRoot(1618);
      Complex complex3 = complex0.cos();
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex4 = complex3.ZERO.exp();
      complex4.NaN.hashCode();
      Complex complex5 = Complex.valueOf(1492.3991877808685, 0.0);
      complex3.isNaN();
      complex1.isNaN();
      complex3.ONE.createComplex(295.8617966132252, (-668.1337257917482));
      Complex complex6 = complex5.exp();
      complex6.toString();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex2.sinh();
      complex4.NaN.reciprocal();
      complex4.hashCode();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex5.ONE.pow(1.0);
      Complex complex7 = complex0.ZERO.acos();
      complex1.multiply(0.0);
      Complex complex8 = complex2.I.sqrt();
      complex8.I.divide(1.0);
      complex2.negate();
      complex7.INF.divide(complex1);
      Complex complex9 = complex1.ZERO.reciprocal();
      complex9.ZERO.toString();
      Complex complex10 = complex2.tanh();
      Complex.valueOf(1.0);
      complex10.INF.negate();
      complex7.tanh();
      complex10.getImaginary();
      complex6.divide(complex1);
      complex2.getImaginary();
      complex7.negate();
      Complex complex11 = complex10.acos();
      complex11.ZERO.add(Double.NaN);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2638.25652013);
      complex0.getImaginary();
      complex0.isNaN();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex2.ZERO.reciprocal();
      complex1.NaN.sin();
      Complex complex4 = complex2.NaN.subtract(0.0);
      Complex complex5 = complex4.ZERO.sin();
      complex5.ONE.multiply(1);
      Complex complex6 = complex4.NaN.conjugate();
      Complex complex7 = complex2.divide(1.767197002609876E-8);
      Complex complex8 = complex7.pow(2638.25652013);
      Complex complex9 = complex8.INF.multiply(17);
      complex1.ZERO.tan();
      Complex complex10 = complex9.I.pow(complex7);
      complex8.createComplex(1.767197002609876E-8, 0.0);
      complex9.hashCode();
      Complex complex11 = complex8.reciprocal();
      Complex complex12 = complex0.createComplex(0.0, 2638.25652013);
      Complex complex13 = complex0.multiply(complex3);
      complex13.ONE.toString();
      Complex complex14 = complex1.sqrt1z();
      complex6.ZERO.negate();
      complex3.isInfinite();
      complex11.tan();
      complex6.getImaginary();
      complex8.getField();
      complex14.multiply(complex10);
      complex9.subtract(0.6353566646575928);
      complex4.divide(2638.25652013);
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double double0 = 2486.93;
      Complex complex0 = Complex.valueOf(2486.93);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.log();
      complex2.ZERO.toString();
      double double1 = 1547.0;
      Complex complex3 = complex0.I.createComplex(2486.93, 1547.0);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex5.sin();
      Complex complex7 = new Complex(2486.93);
      Complex complex8 = complex7.ZERO.asin();
      complex8.INF.subtract(complex3);
      complex4.INF.multiply(complex7);
      complex6.ONE.log();
      complex1.getArgument();
      Complex complex9 = complex2.multiply(2486.93);
      complex9.INF.getArgument();
      Complex complex10 = complex2.divide(2486.93);
      complex10.INF.cos();
      Complex complex11 = complex6.reciprocal();
      Complex complex12 = complex11.INF.negate();
      Complex complex13 = complex0.asin();
      complex13.INF.multiply(17);
      complex9.sqrt1z();
      try { 
        complex12.nthRoot((-2703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,703
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(1.7129486892266285E256, 2114.0);
      complex0.getReal();
      Complex complex1 = complex0.createComplex(2556.392, 1530.7);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.ONE.atan();
      complex3.ZERO.negate();
      Complex.valueOf(2556.392);
      Complex complex4 = complex1.I.tan();
      Complex complex5 = complex1.I.divide(complex0);
      complex5.NaN.getArgument();
      complex0.getReal();
      Complex complex6 = complex1.multiply(0.0);
      complex4.createComplex((-738.63), 2114.0);
      Complex complex7 = complex4.divide(2114.0);
      complex7.ONE.asin();
      Complex.valueOf((-738.63));
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex6.atan();
      complex9.INF.log();
      complex8.atan();
      complex1.acos();
      complex8.add(1.601222826656464E-7);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3092.1252703), (-3092.1252703));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.negate();
      complex3.acos();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7311.96);
      complex0.INF.toString();
      complex0.getField();
      complex0.NaN.atan();
      Complex complex1 = complex0.multiply(1412);
      complex1.isNaN();
      complex0.tan();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.cosh();
      complex3.subtract(complex2);
      complex1.divide(complex3);
      Complex.valueOf(0.0, 71.849002);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(2.9271223293841774E-106);
      complex0.ONE.abs();
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.ZERO.tan();
      complex0.I.abs();
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      complex3.ONE.multiply(complex4);
      complex3.tanh();
      complex2.ONE.multiply(0.0);
      Complex complex5 = complex1.NaN.acos();
      Complex complex6 = complex5.ONE.tanh();
      complex2.readResolve();
      complex6.I.readResolve();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex1.ONE.multiply((-1261));
      complex1.pow(complex0);
      Complex complex2 = complex1.atan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.isInfinite();
      Complex.valueOf(3068.205324933511, (-20.0));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex1.I.asin();
      Complex complex5 = complex4.multiply(Double.NaN);
      double double0 = complex4.I.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex6 = complex0.cos();
      complex6.ONE.sqrt();
      complex6.getField();
      Complex complex7 = complex2.NaN.negate();
      Complex complex8 = complex1.conjugate();
      Complex complex9 = (Complex)complex3.readResolve();
      assertEquals(0.5403023058681398, complex9.getReal(), 0.01);
      
      complex1.isInfinite();
      Complex complex10 = complex4.pow(0.0);
      Complex complex11 = complex8.I.add(360.2);
      Complex complex12 = Complex.valueOf(Double.NaN, Double.NaN);
      List<Complex> list0 = complex8.nthRoot(1);
      assertTrue(list0.contains(complex1));
      assertEquals(1, list0.size());
      
      Complex complex13 = complex4.divide((double) 1);
      assertEquals(0.8813735870195428, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex10.subtract((-2660.0169));
      complex7.getField();
      complex2.subtract((-931.230694));
      Complex complex15 = complex10.cosh();
      Complex complex16 = complex15.multiply((-1.0));
      assertFalse(complex16.equals((Object)complex15));
      
      Complex complex17 = complex1.pow(1.0);
      complex6.add(complex2);
      complex14.equals(complex0);
      assertEquals(2661.0169, complex14.getReal(), 0.01);
      assertTrue(complex4.equals((Object)complex13));
      
      Complex complex18 = complex12.acos();
      assertSame(complex18, complex5);
      assertFalse(complex18.equals((Object)complex17));
      assertNotSame(complex18, complex11);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.pow((-1098.94361));
      complex2.I.exp();
      Complex complex3 = Complex.ZERO;
      complex0.multiply(complex3);
      Complex complex4 = complex1.acos();
      int int0 = (-3576);
      complex3.INF.multiply(3994);
      try { 
        complex4.INF.nthRoot((-3576));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,576
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
