/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:49:02 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.createComplex(1.6927716732025146, 2.935837009891444E241);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex(6.283185307179586);
      complex3.abs();
      complex2.acos();
      Complex complex5 = new Complex(3262.58, 3262.58);
      complex4.pow(complex3);
      complex0.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex0.toString();
      complex0.getArgument();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.NaN.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-811.278), 1.0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(3230.697);
      Complex complex1 = complex0.pow(1.965737856765605E-94);
      complex1.getField();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.sqrt();
      complex3.sinh();
      Complex complex7 = complex6.divide(complex2);
      complex6.add(61.55772471);
      complex6.add(61.55772471);
      complex1.toString();
      Complex complex8 = Complex.valueOf(9.605399);
      complex4.asin();
      Complex complex9 = Complex.valueOf(1087.82457, Double.POSITIVE_INFINITY);
      complex9.divide(1087.82457);
      complex7.atan();
      complex8.sqrt();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(complex0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-0.8813735870195429), Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.acos();
      complex4.NaN.reciprocal();
      complex4.ONE.reciprocal();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.asin();
      Complex complex1 = Complex.I;
      complex0.hashCode();
      complex1.acos();
      Complex complex2 = Complex.valueOf(5.5257514455273825E-8);
      Complex complex3 = complex1.tan();
      Object object0 = new Object();
      complex3.equals(complex1);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.log();
      complex5.ONE.toString();
      Complex complex6 = new Complex(5.5257514455273825E-8, 5.5257514455273825E-8);
      Complex complex7 = complex2.createComplex(6.283185307179586, 5.5257514455273825E-8);
      complex7.tan();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.INF.multiply(complex1);
      Complex complex3 = Complex.NaN;
      complex0.ZERO.divide(complex3);
      Complex complex4 = complex2.I.conjugate();
      complex0.I.readResolve();
      Complex complex5 = complex0.ONE.asin();
      Complex complex6 = complex5.ZERO.multiply(645);
      Complex complex7 = complex2.I.sqrt1z();
      complex6.ZERO.subtract(2797.7293);
      complex0.exp();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = Complex.INF;
      complex9.I.getArgument();
      complex7.INF.negate();
      complex8.INF.multiply(complex9);
      Complex complex10 = complex1.cosh();
      Complex complex11 = complex4.add(Double.NaN);
      complex0.I.add(complex1);
      complex1.readResolve();
      complex11.getField();
      Complex complex12 = complex7.atan();
      complex12.toString();
      Complex complex13 = complex12.atan();
      complex13.sqrt();
      Complex complex14 = complex10.sqrt1z();
      complex11.negate();
      complex14.sin();
      Complex complex15 = complex2.acos();
      complex15.I.toString();
      complex6.readResolve();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(complex0);
      complex1.acos();
      complex0.abs();
      Complex.valueOf(523.7757446513, 2.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      complex3.hashCode();
      Complex complex4 = complex0.tan();
      complex4.ZERO.createComplex(523.7757446513, Double.POSITIVE_INFINITY);
      complex4.NaN.conjugate();
      complex1.atan();
      Complex complex5 = complex4.subtract(Double.POSITIVE_INFINITY);
      complex0.hashCode();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      complex5.tanh();
      complex7.divide(complex6);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(978.87);
      Complex complex2 = complex1.divide(978.87);
      Complex complex3 = new Complex(2110.819564371, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.pow(0.0800878869904249);
      complex2.getField();
      complex2.nthRoot(17);
      Complex complex5 = complex3.asin();
      complex5.negate();
      Complex complex6 = complex4.divide((double) 17);
      Complex complex7 = Complex.INF;
      complex3.add(1009.383455);
      complex0.add(1009.383455);
      complex4.toString();
      Complex.valueOf((-1.0));
      Complex complex8 = complex6.divide(0.41421356237309515);
      Complex.valueOf(2186.4950473);
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.reciprocal();
      complex1.conjugate();
      complex0.ONE.multiply(701.5726943);
      Complex complex2 = complex1.createComplex(1171.4, 1171.4);
      Complex complex3 = complex1.reciprocal();
      complex3.multiply(0);
      complex1.createComplex(3263.2982, 1851.0213800593);
      complex1.atan();
      complex3.readResolve();
      complex0.abs();
      Complex complex4 = Complex.NaN;
      complex4.exp();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(3263.2982);
      Complex complex7 = new Complex((-0.8813735870195429), Double.POSITIVE_INFINITY);
      complex1.pow(complex3);
      complex0.log();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      Complex complex1 = new Complex((-493.469087059988), (-3392.5290979495417));
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf((-415.96628));
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.ONE;
      complex1.multiply(complex4);
      complex6.cosh();
      complex4.tan();
      complex6.abs();
      Complex complex7 = Complex.I;
      Complex complex8 = complex5.divide(complex3);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = Complex.valueOf(0.0, (-2555.6));
      Complex complex3 = complex2.tanh();
      complex3.NaN.atan();
      complex1.hashCode();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.acos();
      complex4.toString();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex1.tan();
      Complex complex8 = complex5.pow(complex1);
      Complex.valueOf(0.0, 1925.9918398);
      complex1.equals(complex8);
      Complex complex9 = Complex.I;
      complex1.divide(complex9);
      complex6.cos();
      complex0.divide(complex2);
      complex7.log();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-1205.93));
      Complex complex1 = complex0.tanh();
      complex0.hashCode();
      Complex complex2 = complex1.acos();
      complex2.toString();
      complex0.asin();
      complex0.tan();
      complex2.pow(complex0);
      Complex.valueOf(Double.NaN, (-433.8210852));
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.divide(complex0);
      Complex complex3 = complex2.cos();
      complex3.divide(complex2);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-433.82108517), (-433.82108517));
      Complex complex1 = Complex.valueOf(0.0800878869904249, 2.524614352748917);
      complex0.divide(complex1);
      Complex complex2 = new Complex(376.31493204925, 1.0013286066910267);
      Complex complex3 = complex0.multiply(3016);
      Complex complex4 = complex0.createComplex(0.4841829729864344, (-3837.691));
      complex1.atan();
      complex4.readResolve();
      complex3.abs();
      complex1.exp();
      Complex complex5 = Complex.NaN;
      Complex complex6 = new Complex(0.4841829729864344);
      Complex complex7 = new Complex((-2930.5275969), (-3837.691));
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.nthRoot(2009);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.log();
      complex1.sqrt();
      Complex complex3 = complex2.sqrt();
      complex2.ONE.subtract((double) 2009);
      Complex complex4 = complex3.pow((double) 2009);
      complex0.nthRoot(2009);
      complex4.readResolve();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.I;
      complex1.asin();
      Complex complex4 = complex2.createComplex(3263.2982, 3263.2982);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.multiply(0);
      Complex complex7 = complex5.atan();
      complex7.readResolve();
      complex5.abs();
      Complex complex8 = new Complex(0.0);
      complex8.exp();
      Complex complex9 = Complex.NaN;
      Complex complex10 = new Complex(0.0);
      Complex complex11 = new Complex(0.0, 282755.2740448519);
      complex6.pow(complex0);
      complex8.divide(292.0268554);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.tan();
      complex4.abs();
      complex5.equals(complex5);
      Complex complex6 = Complex.NaN;
      complex6.divide(complex0);
      complex2.cos();
      complex4.divide(complex6);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      complex1.I.hashCode();
      complex1.I.hashCode();
      complex0.ONE.getArgument();
      Complex complex2 = complex0.createComplex(0.0, (-1.0));
      complex1.divide(0.0);
      complex2.sqrt();
      complex2.getImaginary();
      Complex complex3 = new Complex((-1.0), 38.47841760435743);
      complex3.INF.multiply(complex1);
      Complex.valueOf(6.283185307179586);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-265.8746293108395));
      Complex complex1 = complex0.tanh();
      complex1.hashCode();
      Complex complex2 = Complex.valueOf(0.9999930253396107, 3070.072843);
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = new Complex(3070.072843, (-265.8746293108395));
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.asin();
      complex2.tan();
      Complex complex7 = Complex.ONE;
      complex6.multiply(complex3);
      Complex complex8 = complex3.cosh();
      complex1.tan();
      complex8.abs();
      complex0.toString();
      complex7.divide(complex6);
      complex8.log();
      Complex complex9 = Complex.I;
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.I;
      double double0 = (-803.0039503647997);
      Complex complex4 = complex3.divide((-20.0));
      complex1.log();
      complex2.subtract(complex4);
      complex2.divide(0.0);
      double double1 = Double.POSITIVE_INFINITY;
      complex1.pow(0.0);
      complex1.getField();
      int int0 = 707473407;
      // Undeclared exception!
      complex3.nthRoot(707473407);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex0.INF.divide(0.0);
      complex2.sqrt();
      complex3.getImaginary();
      Complex complex4 = new Complex(265.8746293108395, Double.NaN);
      Complex.valueOf((-2876.25243749089));
      Complex complex5 = new Complex(265.8746293108395, 5.6257755605305175E-204);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply(complex1);
      complex1.acos();
      complex0.abs();
      Complex complex3 = complex1.sqrt1z();
      complex1.abs();
      Complex complex4 = Complex.valueOf((-88.911), Double.NaN);
      Complex complex5 = complex2.createComplex(2666.7, 0.7853981633974483);
      Complex complex6 = Complex.I;
      complex6.hashCode();
      Complex complex7 = complex5.tan();
      complex7.createComplex(0.7853981633974483, 1.0);
      Complex complex8 = complex1.conjugate();
      Complex complex9 = complex4.atan();
      Complex complex10 = complex5.subtract(1.732435430048361E-21);
      complex4.toString();
      complex8.hashCode();
      Complex complex11 = complex5.sqrt();
      Complex complex12 = complex3.pow(523.7757446513);
      complex11.tanh();
      complex9.log();
      complex3.subtract(1.0);
      complex12.sqrt();
      complex10.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.INF.atan();
      complex4.NaN.abs();
      Complex complex5 = complex3.atan();
      complex3.INF.sinh();
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex3.reciprocal();
      complex7.multiply(269);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex6.acos();
      complex8.hashCode();
      Complex complex10 = complex9.divide(2.237122571844573);
      complex8.toString();
      Complex complex11 = complex10.tanh();
      complex11.NaN.nthRoot(1228);
      complex3.equals("X^<");
      Complex complex12 = complex1.divide(complex10);
      Complex complex13 = Complex.NaN;
      complex13.NaN.hashCode();
      complex12.equals(complex13);
      complex10.NaN.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = new Complex(6.283185307179586, 2.237122571844573);
      complex2.divide(complex14);
      Complex complex15 = complex14.acos();
      complex12.divide(Double.NaN);
      complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.log();
      complex0.ONE.toString();
      Complex complex2 = complex0.INF.divide(1678.77531);
      Complex complex3 = complex0.conjugate();
      complex3.ZERO.sin();
      complex3.isInfinite();
      complex1.log();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      complex1.INF.tanh();
      Complex complex2 = complex0.INF.divide(0.0);
      Complex complex3 = complex2.multiply((-2045222521));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex3.sin();
      complex1.multiply(complex5);
      complex3.multiply((-2045222521));
      Complex complex6 = complex3.pow(complex4);
      complex6.sqrt1z();
      Complex complex7 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.createComplex(34.1262, 3263.2982);
      complex3.exp();
      complex4.reciprocal();
      Complex complex5 = complex3.exp();
      Complex complex6 = new Complex((-1518.793), (-1518.793));
      complex6.getImaginary();
      Complex complex7 = new Complex((-544.6661538535), Double.POSITIVE_INFINITY);
      complex2.getField();
      complex6.readResolve();
      complex5.log();
      complex0.cos();
      Complex complex8 = Complex.valueOf(3263.2982, (-2122.0));
      complex8.sqrt1z();
      Complex complex9 = Complex.ONE;
      complex6.acos();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = new Complex(9.859622328905143E-8);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.subtract(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-2555.6));
      Complex complex2 = complex1.NaN.conjugate();
      complex0.isNaN();
      complex0.getReal();
      Complex complex3 = complex2.NaN.multiply((-803.0039503647997));
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex0.ONE.subtract(complex0);
      complex3.reciprocal();
      complex6.abs();
      complex0.exp();
      Complex complex7 = Complex.valueOf((-4.0573420909530794E223), 2399.18849155);
      Complex complex8 = complex5.pow((-177.10948452872665));
      complex8.sinh();
      Complex complex9 = Complex.I;
      complex7.pow(230.05);
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.createComplex(34.1262, 3263.2982);
      Complex complex5 = Complex.INF;
      complex0.exp();
      Complex complex6 = complex5.multiply(0);
      complex6.createComplex(0, 935.4074);
      Complex complex7 = Complex.valueOf((double) 0, 3263.2982);
      complex7.readResolve();
      complex7.abs();
      complex2.exp();
      Complex complex8 = Complex.NaN;
      Complex complex9 = new Complex((-695.07637455));
      Complex complex10 = Complex.I;
      complex10.pow(complex4);
      Complex.valueOf((double) 0, 3263.2982);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-265.8746293108395));
      Complex complex1 = complex0.tanh();
      complex1.hashCode();
      Complex complex2 = complex0.acos();
      complex0.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex4.pow(complex1);
      complex1.abs();
      Complex complex6 = complex0.reciprocal();
      complex5.exp();
      complex4.getImaginary();
      complex1.log();
      Complex complex7 = new Complex(0.0, 0.0);
      complex7.getField();
      complex6.readResolve();
      complex2.log();
      complex0.cos();
      complex3.sqrt1z();
      Complex complex8 = Complex.ONE;
      complex3.acos();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex(2.5246306599334645);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(4969.0, 3.607);
      Complex complex2 = complex0.multiply(1963);
      complex1.negate();
      Complex complex3 = complex0.sin();
      complex2.multiply(complex0);
      Complex complex4 = complex2.multiply((-1319));
      Complex complex5 = complex0.pow(complex4);
      complex3.sqrt1z();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.I.divide(1.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.tanh();
      complex0.tan();
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex2.negate();
      complex3.tan();
      Complex complex7 = new Complex(1.0);
      Complex complex8 = Complex.NaN;
      complex3.multiply(complex5);
      complex4.abs();
      Complex complex9 = complex0.multiply(37);
      complex0.subtract(complex1);
      complex6.getReal();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, (double) 37);
      complex10.getImaginary();
      complex9.tanh();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex10.acos();
      complex5.pow(0.7615941559557649);
      complex13.pow((-382.71524498883));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      complex3.NaN.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.abs();
      Complex complex5 = Complex.valueOf(495.35, 2.0);
      complex5.ONE.createComplex(495.35, (-813.0));
      Complex complex6 = complex5.sqrt();
      complex6.hashCode();
      Complex complex7 = complex0.tan();
      complex7.ZERO.createComplex(495.35, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.NaN.conjugate();
      complex2.atan();
      Complex complex9 = complex7.subtract(Double.POSITIVE_INFINITY);
      complex9.toString();
      complex1.hashCode();
      complex6.sqrt();
      complex2.sqrt();
      complex1.pow(427.8482129);
      complex9.tanh();
      complex7.log();
      complex1.subtract(Double.NaN);
      complex0.sqrt();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      complex2.NaN.toString();
      Complex complex3 = Complex.I;
      complex3.createComplex(34.1262, 3263.2982);
      Complex complex4 = Complex.ZERO;
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      complex3.NaN.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.abs();
      Complex complex5 = Complex.valueOf(495.35, 2.0);
      complex5.ONE.createComplex(495.35, (-813.0));
      Complex complex6 = complex5.sqrt();
      complex6.hashCode();
      Complex complex7 = complex0.tan();
      complex7.ZERO.createComplex(495.35, Double.POSITIVE_INFINITY);
      complex7.NaN.conjugate();
      complex2.atan();
      Complex complex8 = complex7.subtract(Double.POSITIVE_INFINITY);
      complex8.toString();
      complex1.hashCode();
      complex2.sqrt();
      complex1.pow(427.8482129);
      complex3.conjugate();
      complex3.sqrt();
      Complex complex9 = complex7.sqrt();
      complex9.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      complex0.isNaN();
      complex0.getReal();
      Complex complex2 = complex1.multiply((-3164.0));
      Complex complex3 = complex2.divide((-3164.0));
      Complex complex4 = complex2.log();
      complex2.subtract(complex0);
      Complex complex5 = complex0.divide((-2585.0));
      complex1.pow(4400.637841042583);
      complex4.getField();
      complex0.nthRoot(226);
      complex5.asin();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex1.divide(4400.637841042583);
      Complex complex8 = complex6.add(0.0);
      complex7.add((-1521.6557650781672));
      complex4.toString();
      Complex complex9 = complex7.cos();
      Complex complex10 = Complex.valueOf(0.0);
      complex3.divide(2.1932800507380152);
      complex2.toString();
      Complex complex11 = complex6.divide(complex0);
      complex9.add(complex11);
      complex10.multiply(Double.POSITIVE_INFINITY);
      complex8.isNaN();
      complex9.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(0.42416930198669434, 0.1510767638683319);
      Complex complex2 = complex0.multiply((-2045222521));
      complex2.I.negate();
      complex1.I.sin();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.multiply((-2045222521));
      complex1.pow(complex3);
      complex0.sqrt1z();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(835.26, 0.0);
      Complex complex1 = complex0.NaN.createComplex(835.26, 0.0);
      complex0.NaN.getArgument();
      Complex complex2 = complex0.divide(2.0);
      complex0.acos();
      Complex.valueOf(966.51597, (-3286.99164));
      complex2.sin();
      Complex complex3 = complex0.subtract(1681.5380621047138);
      complex3.tanh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      complex3.NaN.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.abs();
      Complex complex5 = Complex.valueOf(495.35, 2.0);
      Complex complex6 = complex5.sqrt();
      complex6.hashCode();
      Complex complex7 = complex0.tan();
      complex7.ZERO.createComplex(495.35, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.NaN.conjugate();
      complex2.atan();
      complex6.tanh();
      Complex complex9 = complex0.multiply(885);
      complex9.divide(complex8);
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      complex1.I.hashCode();
      complex1.I.hashCode();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = Complex.INF;
      complex3.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2240.7549));
      Complex complex4 = complex3.sqrt();
      complex4.hashCode();
      complex2.tan();
      Complex complex5 = complex3.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex0.conjugate();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex5.multiply((-1));
      Complex complex9 = Complex.INF;
      complex9.divide(complex3);
      complex8.multiply(726);
      complex7.createComplex(1.7379989624023438, 380.61);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      complex3.NaN.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.abs();
      Complex.valueOf(495.35, 2.0);
      Complex complex5 = Complex.valueOf((-214.9427065), 495.35);
      Complex complex6 = complex5.sqrt();
      complex3.hashCode();
      Complex complex7 = new Complex(Double.NaN);
      Complex complex8 = complex7.tan();
      complex6.createComplex(Double.NaN, 2.0);
      complex5.conjugate();
      Complex complex9 = Complex.I;
      complex9.atan();
      complex5.tanh();
      complex1.multiply((-35));
      complex1.divide(complex8);
      Complex complex10 = Complex.I;
      complex10.multiply(3462);
      complex2.createComplex(2.0, 885);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      complex3.NaN.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.abs();
      Complex complex5 = Complex.valueOf((-1289.0), 2.0);
      Complex complex6 = complex3.sqrt();
      complex2.hashCode();
      Complex complex7 = complex6.tan();
      complex7.I.add(complex1);
      Complex complex8 = complex1.createComplex(Double.POSITIVE_INFINITY, 2.0);
      complex6.conjugate();
      complex3.atan();
      complex5.tanh();
      complex7.multiply(3432);
      Complex complex9 = complex8.divide(complex1);
      Complex complex10 = complex8.multiply(951);
      Complex complex11 = complex9.createComplex(79.53173571, (-2880.7087));
      complex11.negate();
      complex10.divide(790.5237794);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      Complex complex4 = complex3.NaN.multiply(807.5156239885862);
      complex3.NaN.abs();
      Complex complex5 = complex1.sqrt1z();
      complex5.abs();
      Complex complex6 = Complex.valueOf(495.35, 2.0);
      Complex complex7 = complex6.sqrt();
      complex7.hashCode();
      Complex complex8 = complex0.tan();
      complex8.ZERO.createComplex(495.35, Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.NaN.conjugate();
      Complex complex10 = complex2.atan();
      complex7.tanh();
      complex8.ZERO.cosh();
      Complex complex11 = complex0.multiply(885);
      complex11.divide(complex9);
      complex10.multiply(885);
      Complex complex12 = complex11.createComplex((-175.5088747151848), Double.NaN);
      complex4.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      complex3.NaN.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.abs();
      Complex.valueOf(495.35, 2.0);
      complex4.hashCode();
      Complex complex5 = complex0.tan();
      complex5.NaN.conjugate();
      Complex complex6 = complex2.atan();
      complex6.I.sqrt();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.pow(2.0);
      complex7.nthRoot(1681);
      complex8.sin();
      complex2.nthRoot(1681);
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.NaN.tan();
      complex3.ONE.conjugate();
      Complex complex4 = complex0.negate();
      complex4.tan();
      Complex complex5 = complex0.NaN.cosh();
      complex5.ZERO.exp();
      Complex complex6 = complex4.multiply(complex2);
      Complex.valueOf(3148.3271601, 0.0);
      complex6.pow((-99.0279));
      Complex complex7 = new Complex(8.725629524586503E-103, 8.725629524586503E-103);
      complex7.add(complex1);
      complex0.multiply(8886110.0);
      Complex complex8 = Complex.ZERO;
      complex8.isNaN();
      complex7.multiply(2.414213562373095);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.atan();
      complex1.nthRoot(1475);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.asin();
      Complex complex7 = complex1.exp();
      complex1.hashCode();
      complex6.multiply(0.0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex1.divide(complex5);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 376.31493204925);
      Complex complex11 = complex8.cos();
      Complex complex12 = complex11.multiply(0.0);
      complex12.INF.negate();
      Complex.valueOf(4766.23312);
      complex6.asin();
      complex4.tan();
      complex4.multiply(complex11);
      complex9.cosh();
      complex7.tan();
      complex6.abs();
      complex6.toString();
      Complex complex13 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex14 = Complex.ZERO;
      complex14.log();
      complex2.subtract((double) 688);
      complex13.toString();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      complex3.NaN.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.abs();
      Complex complex5 = Complex.valueOf(495.35, 2.0);
      complex5.ONE.createComplex(495.35, (-813.0));
      Complex complex6 = complex5.sqrt();
      complex6.hashCode();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.ZERO.createComplex(495.35, Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.NaN.conjugate();
      complex2.atan();
      Complex complex10 = complex7.subtract(Double.POSITIVE_INFINITY);
      complex10.toString();
      complex1.hashCode();
      complex6.sqrt();
      complex2.sqrt();
      complex1.pow(427.8482129);
      complex10.tanh();
      complex9.nthRoot(37);
      complex5.readResolve();
      complex1.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.NaN.acos();
      complex3.NaN.abs();
      Complex complex4 = complex1.sqrt1z();
      complex4.abs();
      Complex complex5 = Complex.valueOf(495.35, 2.0);
      Complex complex6 = complex5.sqrt();
      complex6.hashCode();
      Complex complex7 = complex0.tan();
      complex7.ZERO.createComplex(495.35, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.NaN.conjugate();
      Complex complex9 = complex2.atan();
      complex6.tanh();
      Complex complex10 = complex0.multiply(885);
      complex10.divide(complex8);
      complex9.multiply(885);
      complex10.createComplex((-175.5088747151848), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      complex2.NaN.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.pow(complex0);
      complex0.NaN.abs();
      Complex complex6 = complex5.ONE.reciprocal();
      Complex complex7 = complex2.exp();
      complex2.getImaginary();
      Complex complex8 = complex7.log();
      complex0.getField();
      complex1.readResolve();
      Complex complex9 = complex0.log();
      complex4.cos();
      Complex.valueOf(Double.NaN);
      complex3.divide((-567.488489975));
      complex9.toString();
      Complex complex10 = complex8.acos();
      double double0 = 0.0;
      complex5.add((-1280.1896052266065));
      complex6.tanh();
      try { 
        complex10.nthRoot((-3120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,120
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.tanh();
      complex0.hashCode();
      Complex complex2 = complex0.acos();
      complex2.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.tan();
      Complex complex5 = complex2.pow(complex1);
      complex0.abs();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex3.exp();
      complex7.getImaginary();
      Complex complex8 = complex2.log();
      complex0.getField();
      complex2.readResolve();
      complex8.log();
      complex5.cos();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = Complex.ONE;
      complex10.acos();
      Complex complex11 = Complex.ZERO;
      complex11.isNaN();
      complex8.toString();
      complex4.conjugate();
      complex9.sqrt();
      complex11.sqrt();
      complex10.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.tanh();
      complex1.multiply(complex0);
      complex0.asin();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.INF.atan();
      complex6.I.add(complex0);
      Complex.valueOf(6.283185307179586);
      Complex complex7 = Complex.valueOf(6.283185307179586);
      Complex complex8 = complex7.INF.conjugate();
      complex8.sqrt();
      Complex complex9 = complex8.ZERO.add(6.283185307179586);
      complex9.acos();
      Complex complex10 = complex2.subtract(complex0);
      complex10.NaN.multiply(6.283185307179586);
      complex10.getField();
      Complex complex11 = complex4.log();
      complex2.getField();
      Complex complex12 = complex3.sqrt1z();
      complex12.NaN.sinh();
      complex12.isNaN();
      Complex complex13 = complex0.pow(6.283185307179586);
      Complex.valueOf(0.0, 2.1226166967029073E57);
      complex0.divide(2.1226166967029073E57);
      Complex complex14 = complex13.negate();
      Complex complex15 = complex1.divide(complex11);
      complex3.add(complex13);
      complex0.multiply((-46.397121317));
      complex14.isNaN();
      complex15.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      complex2.NaN.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.createComplex(34.1262, 3263.2982);
      Complex complex5 = complex1.reciprocal();
      complex2.ONE.exp();
      Complex complex6 = complex4.multiply(0);
      complex3.createComplex(1.4893842728520671E78, 0.0);
      complex6.readResolve();
      complex0.abs();
      complex3.exp();
      Complex complex7 = Complex.NaN;
      complex7.divide(3215.21057);
      complex5.pow(0.0);
      complex5.nthRoot(286);
      Complex complex8 = Complex.valueOf((double) 286);
      complex8.sin();
      complex2.nthRoot(751);
      Complex complex9 = Complex.ONE;
      complex9.log();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      complex2.NaN.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.pow(complex0);
      complex0.NaN.abs();
      complex5.ONE.reciprocal();
      Complex complex6 = complex2.exp();
      complex2.getImaginary();
      Complex complex7 = complex6.log();
      complex0.getField();
      Complex complex8 = (Complex)complex1.readResolve();
      complex8.multiply(Double.NaN);
      Complex complex9 = complex0.log();
      complex9.I.cos();
      Complex complex10 = complex3.ONE.sqrt1z();
      Complex complex11 = complex10.INF.acos();
      complex11.sqrt1z();
      complex4.isNaN();
      complex4.toString();
      complex7.conjugate();
      complex2.sqrt();
      complex0.sqrt();
      complex9.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = Complex.valueOf(0.0, (-2555.6));
      Complex complex4 = complex3.NaN.conjugate();
      complex0.isNaN();
      complex0.getReal();
      complex4.NaN.multiply((-803.0039503647997));
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = complex2.ONE.subtract(complex0);
      Complex complex8 = complex7.ZERO.divide((-1425.8210086));
      Complex complex9 = complex5.ONE.pow(Double.POSITIVE_INFINITY);
      complex9.INF.getField();
      complex5.ONE.nthRoot(969);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.divide((double) 969);
      Complex complex13 = complex12.add(0.0);
      complex6.add(1546.45);
      complex6.toString();
      Complex complex14 = complex4.cos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex15 = complex10.ZERO.divide(Double.POSITIVE_INFINITY);
      complex14.toString();
      complex6.divide(complex10);
      Complex complex16 = complex14.add(complex13);
      complex8.multiply((-803.0039503647997));
      complex16.isNaN();
      complex15.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.acos();
      complex2.subtract(1063.507554444076);
      complex0.toString();
      Complex complex4 = complex1.asin();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.tan();
      Complex complex6 = complex5.pow(complex2);
      complex5.abs();
      complex2.reciprocal();
      Complex complex7 = complex1.exp();
      complex3.getImaginary();
      Complex complex8 = Complex.INF;
      complex8.log();
      complex5.getField();
      complex7.readResolve();
      complex2.log();
      Complex complex9 = complex0.cos();
      Complex complex10 = Complex.valueOf((-62.1779), (-105.361724536));
      Complex complex11 = complex10.sqrt1z();
      Complex complex12 = complex5.acos();
      complex7.isNaN();
      complex1.toString();
      complex11.conjugate();
      complex6.sqrt();
      complex9.sqrt();
      complex12.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.tanh();
      complex1.multiply(complex0);
      complex0.asin();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.valueOf(6.283185307179586);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.INF.atan();
      complex6.I.add(complex0);
      Complex complex7 = Complex.valueOf(6.283185307179586);
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex8.INF.conjugate();
      complex9.sqrt();
      Complex complex10 = complex9.ZERO.add(6.283185307179586);
      Complex complex11 = complex10.acos();
      Complex complex12 = complex2.subtract(complex0);
      complex12.NaN.multiply(6.283185307179586);
      complex12.getField();
      Complex complex13 = complex4.log();
      complex2.getField();
      Complex complex14 = complex3.sqrt1z();
      complex14.NaN.sinh();
      complex14.isNaN();
      complex13.log();
      complex9.cos();
      complex14.sqrt1z();
      Complex complex15 = complex14.acos();
      Complex complex16 = Complex.NaN;
      complex16.isNaN();
      complex11.toString();
      complex0.conjugate();
      Complex complex17 = complex15.sqrt();
      complex12.sqrt();
      complex14.pow(complex9);
      complex17.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.atan();
      complex1.nthRoot(688);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.exp();
      complex2.hashCode();
      Complex complex6 = complex2.multiply(1.0);
      Complex complex7 = Complex.ZERO;
      complex7.divide(complex6);
      Complex complex8 = new Complex(3.601718675118614E-8, 376.31493204925);
      complex8.cos();
      Complex.valueOf(0.0);
      Complex complex9 = complex2.asin();
      complex0.NaN.tan();
      complex9.multiply(complex5);
      complex4.cosh();
      complex7.tan();
      complex3.abs();
      complex0.toString();
      Complex.valueOf(-0.0, (-1782.79470507));
      complex2.log();
      Complex complex10 = complex5.subtract(-0.0);
      complex10.sqrt();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.607, 3.607);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.NaN.sinh();
      Complex complex3 = Complex.valueOf(3.607, 1461.0671);
      complex3.divide((-461.457335278588));
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.divide(complex4);
      complex5.ZERO.createComplex(1461.0671, 0.0);
      complex2.add(complex1);
      complex0.multiply(1461.0671);
      complex1.isNaN();
      complex4.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = Complex.valueOf(0.0, (-2555.6));
      Complex complex4 = complex3.NaN.conjugate();
      complex0.isNaN();
      complex0.getReal();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.multiply((-38.47841760435743));
      complex4.hashCode();
      complex2.hashCode();
      Complex complex8 = complex6.negate();
      Complex complex9 = complex7.createComplex(6.283185307179586, (-2434.0));
      complex7.abs();
      complex9.toString();
      complex8.acos();
      Complex complex10 = complex9.multiply((-1842));
      complex10.INF.hashCode();
      complex5.sqrt();
      complex7.subtract(complex4);
      complex9.conjugate();
      complex8.sinh();
      complex8.cos();
      complex9.atan();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = Complex.valueOf(673.867884, 0.0);
      Complex complex3 = complex2.ONE.reciprocal();
      complex3.I.toString();
      complex1.NaN.getField();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex5.INF.log();
      complex6.ZERO.tan();
      complex5.toString();
      Complex complex8 = complex2.I.asin();
      Complex complex9 = complex2.multiply(0.0);
      Complex complex10 = Complex.valueOf(0.0, 673.867884);
      complex9.INF.sinh();
      complex0.isNaN();
      complex7.getReal();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex9.isNaN();
      complex10.getReal();
      complex0.pow(410.0);
      complex4.getField();
      complex8.atan();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = new Complex((-1225.27425972), 0.0);
      Complex complex1 = complex0.ONE.multiply(2630);
      Complex complex2 = complex1.NaN.sin();
      complex1.I.pow(2067.9618697);
      complex2.INF.subtract((double) 2630);
      complex1.NaN.acos();
      complex0.getField();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-2127.317272));
      complex1.I.subtract(complex0);
      complex1.ZERO.divide(complex0);
      Complex.valueOf((-2127.317272), (-2127.317272));
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.INF.pow(complex2);
      complex1.nthRoot(3516);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.INF.add((double) 3516);
      complex5.NaN.asin();
      Complex complex6 = complex4.sqrt1z();
      complex3.nthRoot(3516);
      complex6.sqrt();
      Complex complex7 = complex1.pow(0.0);
      complex7.NaN.hashCode();
      Complex complex8 = Complex.valueOf((-2127.317272), 802.7803958912473);
      complex8.multiply(1);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.607, 3.607);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      complex2.NaN.sinh();
      complex0.conjugate();
      complex0.sinh();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.subtract(0.0);
      complex2.NaN.toString();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex3.pow(complex0);
      complex0.NaN.abs();
      complex5.ONE.reciprocal();
      Complex complex6 = complex2.exp();
      complex2.getImaginary();
      Complex complex7 = complex6.log();
      complex0.getField();
      complex1.readResolve();
      Complex complex8 = complex0.log();
      complex8.I.cos();
      Complex complex9 = complex3.ONE.sqrt1z();
      complex9.INF.acos();
      complex4.isNaN();
      complex4.toString();
      complex7.conjugate();
      complex2.sqrt();
      complex0.sqrt();
      complex8.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply(0.0);
      complex1.toString();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex0.multiply((-992.724507));
      Complex complex4 = complex0.tan();
      complex4.ONE.readResolve();
      Complex complex5 = Complex.valueOf(0.2954642176628113, 1989.4);
      Complex complex6 = complex5.INF.reciprocal();
      Complex complex7 = complex6.I.asin();
      complex2.I.toString();
      Complex complex8 = complex3.INF.subtract(3.720075801577098E-44);
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex9.INF.multiply((-669.424405));
      complex3.abs();
      complex6.I.sqrt();
      Complex complex11 = complex7.add(complex0);
      Complex complex12 = complex6.add(complex3);
      Complex complex13 = complex6.I.sin();
      Complex complex14 = complex12.asin();
      complex11.equals(complex2);
      complex1.atan();
      complex13.ZERO.readResolve();
      complex10.INF.exp();
      complex14.tanh();
      complex0.NaN.getArgument();
      Complex complex15 = complex13.multiply((-1978.2292470971));
      complex15.INF.pow(complex10);
      complex15.add(complex10);
      complex8.asin();
      complex6.isNaN();
      complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.tanh();
      complex1.multiply(complex0);
      complex0.asin();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.valueOf(6.283185307179586);
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex5.INF.atan();
      complex6.I.add(complex0);
      Complex complex7 = Complex.valueOf(6.283185307179586);
      Complex complex8 = complex7.I.sqrt1z();
      Complex complex9 = complex8.INF.conjugate();
      complex9.sqrt();
      Complex complex10 = complex9.ZERO.add(6.283185307179586);
      complex10.acos();
      Complex complex11 = complex2.subtract(complex0);
      complex11.NaN.multiply(6.283185307179586);
      complex11.getField();
      Complex complex12 = complex4.log();
      complex2.getField();
      Complex complex13 = complex3.sqrt1z();
      complex13.NaN.sinh();
      complex13.isNaN();
      Complex complex14 = complex0.pow(6.283185307179586);
      Complex.valueOf(0.0, 2.1226166967029073E57);
      complex0.divide(2.1226166967029073E57);
      Complex complex15 = complex14.negate();
      Complex complex16 = complex1.divide(complex12);
      complex3.add(complex14);
      complex0.multiply((-46.397121317));
      complex15.isNaN();
      complex16.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.hashCode();
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.ZERO.multiply(complex2);
      complex2.I.nthRoot(297);
      complex0.ZERO.acos();
      Complex complex4 = complex1.conjugate();
      Complex.valueOf((double) 297, (double) 297);
      Complex complex5 = complex4.ZERO.createComplex(297, 297);
      Complex complex6 = complex1.reciprocal();
      complex0.negate();
      complex1.NaN.nthRoot(1);
      complex1.conjugate();
      complex1.isInfinite();
      complex4.sqrt1z();
      complex3.INF.subtract(complex5);
      Complex complex7 = complex6.asin();
      complex3.conjugate();
      complex3.exp();
      complex7.negate();
      complex0.negate();
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, (-380.77));
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex0.ONE.pow(complex1);
      complex0.ONE.toString();
      complex0.exp();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.sqrt();
      Complex complex3 = complex0.add(complex1);
      complex3.NaN.getArgument();
      complex3.I.getField();
      Complex complex4 = complex0.INF.add(complex1);
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.getField();
      complex4.INF.add(complex5);
      complex3.abs();
      complex2.pow(Double.NaN);
      complex0.multiply(3508);
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex0.reciprocal();
      complex6.conjugate();
      complex5.sqrt1z();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1142.723356039);
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1142.723356039);
      Complex complex2 = complex1.ONE.divide(complex0);
      complex2.ONE.tanh();
      Complex complex3 = complex1.createComplex(451.4306271653133, (-1536.3443735979458));
      complex3.ZERO.reciprocal();
      complex3.I.multiply((-4459));
      Complex complex4 = complex3.add(1142.723356039);
      Complex complex5 = complex3.INF.add(complex0);
      complex5.INF.sin();
      complex3.NaN.tan();
      complex4.NaN.getArgument();
      try { 
        complex3.nthRoot((-4459));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,459
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      complex1.INF.tanh();
      Complex complex2 = complex0.INF.divide(0.0);
      Complex complex3 = complex2.ZERO.sqrt();
      complex0.getImaginary();
      complex2.INF.add(0.0);
      complex0.isInfinite();
      complex0.getField();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.divide(complex3);
      complex2.cos();
      Complex complex6 = complex4.divide(complex5);
      complex6.log();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.multiply(1);
      complex3.NaN.negate();
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex0.ZERO.divide(complex1);
      complex0.I.abs();
      complex0.readResolve();
      Complex complex6 = complex0.multiply(765.348);
      Complex complex7 = complex6.NaN.negate();
      complex7.ONE.sinh();
      Complex.valueOf(0.0);
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex8.reciprocal();
      complex1.getField();
      complex1.tanh();
      complex8.getReal();
      Complex complex10 = complex1.tanh();
      complex10.NaN.abs();
      complex10.ONE.divide(complex6);
      Complex.valueOf(0.0, 765.348);
      Complex complex11 = Complex.valueOf((-1247.0));
      complex2.divide(0.0);
      complex8.exp();
      complex9.subtract((-1247.0));
      complex5.cosh();
      complex4.getField();
      complex11.multiply(0.0);
      Complex complex12 = Complex.valueOf(0.0);
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.ONE.cosh();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      complex0.isInfinite();
      Complex complex4 = complex2.negate();
      complex4.ONE.log();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex1.ONE.negate();
      complex6.ZERO.tan();
      Complex complex7 = complex4.ONE.pow(complex6);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex7.I.subtract(complex8);
      complex9.tanh();
      Complex complex10 = complex2.NaN.divide(0.0);
      complex10.ZERO.reciprocal();
      complex1.ONE.toString();
      Complex complex11 = complex5.ONE.tan();
      complex2.sin();
      complex1.readResolve();
      complex5.sqrt();
      Complex complex12 = complex4.pow(0.0);
      complex12.INF.divide(complex1);
      complex0.getField();
      complex11.tan();
      complex11.reciprocal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.abs();
      Complex complex1 = complex0.conjugate();
      complex1.I.log();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.I.multiply((-20.0));
      complex2.ZERO.sqrt();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex4.I.subtract(complex3);
      Complex complex6 = complex2.createComplex((-20.0), 2.0);
      complex6.getArgument();
      Complex complex7 = complex5.ZERO.sqrt1z();
      complex3.atan();
      complex7.cosh();
      complex5.ONE.sinh();
      complex5.INF.sqrt1z();
      Complex complex8 = Complex.valueOf(3450.420630738);
      complex8.asin();
      complex6.createComplex(0.0, (-1.0));
      Complex complex9 = complex0.divide(0.0);
      complex9.conjugate();
      complex5.conjugate();
      complex6.getImaginary();
      complex3.sqrt1z();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex((-373.0346438554783));
      Complex complex1 = complex0.ONE.createComplex(3300.070334498, 3300.070334498);
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex0.pow((-3468.31));
      Complex complex4 = complex3.INF.subtract((-3468.31));
      complex4.NaN.sqrt();
      complex2.ZERO.sqrt1z();
      Complex complex5 = complex0.divide((-373.0346438554783));
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex5.reciprocal();
      complex7.ONE.divide((-373.0346438554783));
      complex5.NaN.cos();
      Complex complex8 = complex6.INF.multiply(783);
      Complex complex9 = complex6.ZERO.sinh();
      complex6.INF.sin();
      Complex complex10 = complex5.multiply(1);
      Complex complex11 = complex1.subtract(complex6);
      Complex complex12 = complex11.ONE.subtract(complex6);
      complex12.INF.toString();
      complex0.subtract(complex1);
      complex10.atan();
      Complex complex13 = new Complex(1901.73);
      complex10.ZERO.subtract(complex13);
      complex9.getArgument();
      complex8.cosh();
      complex10.multiply(0.0);
      complex8.conjugate();
      Complex.valueOf((-1521.26));
      complex11.add(complex1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(59.0);
      complex0.INF.abs();
      Complex complex1 = complex0.subtract(59.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex2.INF.cosh();
      complex0.toString();
      complex0.isNaN();
      Complex complex4 = complex1.tan();
      complex0.NaN.atan();
      Complex complex5 = complex1.ONE.multiply(976);
      Complex complex6 = complex5.ONE.sin();
      complex5.INF.abs();
      complex5.abs();
      Complex complex7 = complex1.multiply(1);
      complex1.ZERO.toString();
      Complex complex8 = complex4.tan();
      complex8.negate();
      Complex complex9 = complex4.ZERO.asin();
      complex7.equals("(59.0, 0.0)");
      complex4.cosh();
      complex3.sqrt();
      complex6.exp();
      Complex complex10 = Complex.valueOf(59.0);
      complex10.ZERO.sqrt();
      complex10.subtract((double) 1);
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex1.NaN.tan();
      complex3.ONE.conjugate();
      Complex complex4 = complex0.negate();
      complex4.tan();
      complex0.NaN.cosh();
      Complex complex5 = complex4.multiply(complex2);
      Complex.valueOf(3148.3271601, 0.0);
      complex5.pow((-99.0279));
      complex4.sinh();
      complex3.pow((-2447.26015909));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = Complex.valueOf(0.0, (-2555.6));
      Complex complex4 = complex3.NaN.conjugate();
      complex0.isNaN();
      complex0.getReal();
      Complex complex5 = complex4.NaN.multiply((-803.0039503647997));
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex2.ONE.subtract(complex0);
      complex8.ZERO.divide((-1425.8210086));
      Complex complex9 = complex6.ONE.pow(Double.POSITIVE_INFINITY);
      complex9.INF.getField();
      complex6.ONE.nthRoot(969);
      Complex complex10 = complex2.asin();
      Complex complex11 = complex0.negate();
      Complex complex12 = complex11.divide((double) 969);
      complex12.add(0.0);
      complex7.add(1546.45);
      complex7.toString();
      Complex complex13 = complex4.cos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.ZERO.divide(Double.POSITIVE_INFINITY);
      complex13.toString();
      Complex complex14 = complex10.acos();
      complex14.NaN.add(0.0);
      complex1.tanh();
      complex10.nthRoot(969);
      complex5.nthRoot(2271);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(738.1);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.INF.readResolve();
      Complex complex2 = complex0.ZERO.tanh();
      complex0.ZERO.getField();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex0.exp();
      complex0.getField();
      Complex complex5 = complex3.sqrt();
      complex5.I.multiply(1);
      Complex.valueOf(738.1);
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex1.NaN.sinh();
      Complex complex8 = complex2.cos();
      complex8.ZERO.getField();
      complex2.equals(complex8);
      Complex complex9 = Complex.valueOf(0.0);
      complex5.readResolve();
      complex7.INF.conjugate();
      complex4.isInfinite();
      complex2.ONE.exp();
      complex8.isInfinite();
      complex9.exp();
      Complex complex10 = complex8.asin();
      complex10.I.divide((double) 1);
      complex1.asin();
      complex1.multiply(738.1);
      Complex.valueOf(1587.370739232, 0.0);
      Complex complex11 = complex7.sqrt();
      complex6.tan();
      complex5.nthRoot(1);
      complex8.sinh();
      complex11.divide(complex2);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ONE.exp();
      complex3.I.tan();
      Complex complex4 = complex2.NaN.asin();
      complex4.tan();
      Complex complex5 = complex2.multiply(0.0);
      complex5.INF.hashCode();
      complex0.I.hashCode();
      complex1.negate();
      Complex complex6 = complex0.ONE.createComplex((-1575.27), 0.0);
      complex1.ZERO.abs();
      complex0.toString();
      Complex complex7 = complex6.acos();
      complex7.ONE.multiply((-1842));
      complex7.INF.sqrt();
      try { 
        complex7.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply((-1));
      complex1.abs();
      complex1.I.tan();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.subtract((-2394.011824));
      Complex complex4 = complex3.NaN.divide(complex0);
      complex4.ONE.sqrt1z();
      Complex complex5 = complex4.INF.divide((-2394.011824));
      complex5.I.reciprocal();
      complex2.NaN.acos();
      Complex complex6 = complex2.NaN.negate();
      Complex complex7 = complex6.cos();
      complex6.I.sqrt1z();
      Complex complex8 = complex3.INF.conjugate();
      complex3.getArgument();
      complex3.log();
      Complex complex9 = complex2.sinh();
      complex9.INF.sin();
      complex0.INF.exp();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex8.subtract(complex10);
      Complex complex12 = complex11.INF.tanh();
      complex10.sinh();
      complex7.isNaN();
      complex12.multiply(389);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(2720.629);
      Complex complex1 = complex0.divide(2720.629);
      complex0.ONE.tan();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ZERO.pow((-40.9256977624006));
      complex3.INF.tanh();
      Complex complex4 = Complex.valueOf(2720.629);
      complex4.log();
      complex0.exp();
      complex0.nthRoot(1);
      complex2.getArgument();
      complex1.getReal();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.NaN.asin();
      Complex.valueOf((-40.9256977624006));
      complex5.acos();
      complex6.getArgument();
      Complex complex7 = complex2.subtract(0.0);
      complex0.acos();
      complex4.getField();
      complex7.isNaN();
      complex4.tanh();
      Complex.valueOf(0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      complex1.I.hashCode();
      complex1.I.hashCode();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.createComplex(0.0, (-1.0));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.ZERO.multiply(1);
      Complex complex6 = complex4.createComplex((-1340.655022212387), (-1.0));
      complex6.readResolve();
      complex4.abs();
      complex1.exp();
      complex2.divide((double) 1);
      Complex complex7 = complex3.NaN.pow(0.0);
      complex5.nthRoot(1681);
      complex5.sin();
      complex0.nthRoot(1);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.NaN.subtract(1.7077150344848633);
      Complex complex3 = complex2.createComplex(0.0, 0.0);
      Complex complex4 = complex0.subtract((-1817.137));
      Complex complex5 = complex4.INF.add(complex0);
      complex5.NaN.abs();
      Complex complex6 = complex4.pow(complex1);
      complex0.getField();
      Complex complex7 = complex4.add((-1817.137));
      complex7.sqrt();
      Complex complex8 = complex1.exp();
      Complex complex9 = complex4.ONE.multiply((-1));
      complex1.I.cosh();
      Complex complex10 = complex9.ONE.sqrt();
      Complex complex11 = complex6.pow(410.559);
      complex9.abs();
      complex8.multiply((-1));
      complex10.subtract(complex2);
      complex4.getReal();
      complex2.getImaginary();
      complex3.tanh();
      complex0.sqrt1z();
      complex11.acos();
      complex6.pow(0.0);
      complex9.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-1288.7768095681256), (-1288.7768095681256));
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.INF.reciprocal();
      Complex complex2 = complex0.cosh();
      complex2.INF.divide(complex1);
      complex2.INF.exp();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.INF.pow(1.0);
      Complex complex5 = complex4.INF.conjugate();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex7.NaN.sinh();
      Complex.valueOf((-661.0661), (-1.0));
      complex3.INF.tan();
      complex8.INF.tanh();
      complex7.readResolve();
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = complex9.subtract(complex4);
      Complex complex11 = complex9.cos();
      complex7.getArgument();
      complex3.subtract(complex9);
      complex10.sqrt();
      complex6.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.I.multiply((-52.6815183));
      complex0.NaN.sqrt1z();
      Complex complex2 = complex0.divide((-1.0));
      complex0.getField();
      complex2.toString();
      complex0.NaN.exp();
      Complex complex3 = complex1.conjugate();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.nthRoot(2009);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.abs();
      complex0.toString();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.atan();
      complex1.ZERO.nthRoot(688);
      Complex complex3 = complex2.I.asin();
      complex3.exp();
      complex1.hashCode();
      complex2.multiply(20.0);
      complex1.divide(complex2);
      Complex complex4 = complex2.cos();
      Complex complex5 = Complex.valueOf((double) 2009);
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex4.multiply(complex0);
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex4.tan();
      complex2.I.abs();
      complex1.toString();
      Complex.valueOf(20.0, 0.5330380201339722);
      complex8.log();
      Complex complex10 = complex6.subtract(4145.78966);
      complex10.ZERO.sqrt();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.acos();
      complex2.hashCode();
      complex3.INF.atan();
      complex2.multiply(complex0);
      Complex complex4 = complex2.ONE.sin();
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex5.divide((-1470.32486));
      complex4.I.divide(0.0);
      complex4.I.getArgument();
      Complex complex7 = complex0.reciprocal();
      complex0.NaN.add(0.0);
      Complex complex8 = complex7.negate();
      complex8.isNaN();
      Complex complex9 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex10 = complex9.createComplex((-2794.3806235), (-2794.3806235));
      complex9.INF.pow(0.0);
      Complex complex11 = complex8.tan();
      complex6.getField();
      Complex complex12 = complex0.sinh();
      Complex complex13 = complex11.multiply(37);
      complex6.pow(complex13);
      complex12.cos();
      complex6.createComplex(0.0, 0.0);
      complex7.asin();
      Object object0 = new Object();
      complex10.equals(object0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 0;
      Complex complex1 = Complex.INF;
      complex0.NaN.pow(complex1);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex(1687.968782);
      complex0.conjugate();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(1.997844754509471E-9);
      Complex complex1 = Complex.I;
      complex1.ONE.sinh();
      Complex complex2 = complex0.NaN.atan();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.add(1.997844754509471E-9);
      Complex complex5 = complex0.divide(complex4);
      complex3.NaN.exp();
      Complex complex6 = complex5.I.add((-228.994));
      Complex complex7 = complex1.INF.createComplex((-1355.2518), (-228.994));
      Complex complex8 = complex6.ZERO.sinh();
      Complex complex9 = complex5.ONE.cosh();
      Complex complex10 = complex4.pow(1.997844754509471E-9);
      complex4.add(complex5);
      complex7.readResolve();
      complex10.toString();
      complex2.getImaginary();
      Complex complex11 = complex2.multiply(1338);
      complex10.multiply(complex6);
      complex10.subtract(complex0);
      Complex complex12 = complex3.asin();
      complex12.cosh();
      complex3.nthRoot(1338);
      complex7.pow(complex4);
      complex6.tan();
      complex3.sin();
      complex11.isNaN();
      complex12.getField();
      complex8.pow(complex5);
      complex9.divide((-2285.67));
      Complex.valueOf((-4161.579231));
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.I.divide(1.0);
      complex1.createComplex(1.0, (-265.8746293108395));
      Complex complex2 = complex0.ZERO.add(0.0);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex2.ONE.multiply(0);
      Complex complex5 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex4.I.divide(complex2);
      Complex complex7 = complex1.negate();
      Complex complex8 = complex1.NaN.add(1.0);
      Complex complex9 = complex7.ZERO.tan();
      Complex complex10 = complex9.I.cos();
      Complex complex11 = complex10.I.subtract(complex1);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      complex10.divide(complex3);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex10.getReal(), 0.01);
      
      Complex complex12 = complex2.divide((-265.8746293108395));
      complex12.getField();
      assertEquals(-0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = complex0.multiply(0);
      Complex complex14 = Complex.valueOf(Double.POSITIVE_INFINITY, (-618.4448712164));
      Complex complex15 = complex13.INF.tanh();
      Complex complex16 = new Complex(2977.063);
      Complex complex17 = complex15.ZERO.add(complex16);
      Complex complex18 = complex17.negate();
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      
      Complex complex19 = complex13.log();
      Complex complex20 = complex19.reciprocal();
      Complex complex21 = complex4.reciprocal();
      List<Complex> list0 = complex13.nthRoot(1);
      assertTrue(list0.contains(complex11));
      
      Complex complex22 = complex21.tanh();
      Complex complex23 = complex20.divide(complex0);
      assertFalse(complex19.equals((Object)complex18));
      assertTrue(complex23.equals((Object)complex9));
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      
      Complex complex24 = complex8.cos();
      assertNotSame(complex24, complex14);
      assertSame(complex24, complex22);
      assertSame(complex8, complex6);
      
      Complex complex25 = Complex.valueOf((-624.9824691678027));
      assertEquals(0.0, complex25.getImaginary(), 0.01);
  }
}
