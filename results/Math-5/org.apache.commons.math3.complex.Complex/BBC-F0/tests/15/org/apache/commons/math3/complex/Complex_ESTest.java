/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:58:05 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-917.82370415876));
      Complex complex1 = complex0.NaN.add(1124.93270530389);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.add((-917.82370415876));
      complex0.add(complex3);
      complex3.nthRoot(555);
      Complex complex4 = Complex.INF;
      complex4.divide((double) 555);
      complex2.add(Double.NaN);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.pow(6.283185307179586);
      complex6.tan();
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.negate();
      complex2.log();
      Complex complex9 = complex6.exp();
      complex9.multiply(1);
      Complex complex10 = Complex.valueOf(Double.NaN);
      complex10.getField();
      complex7.asin();
      Complex.valueOf((double) 1);
      complex9.sqrt1z();
      Complex complex11 = complex0.divide(3406.79244317819);
      complex7.multiply(complex8);
      Complex complex12 = Complex.ONE;
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4134.952130534467));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      complex1.pow(complex1);
      Complex complex4 = complex2.cosh();
      Complex complex5 = Complex.INF;
      Complex.valueOf(1.0);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.tanh();
      complex7.sin();
      complex0.tan();
      Complex complex8 = complex4.log();
      complex0.negate();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf(1076.0);
      complex10.exp();
      Complex complex11 = complex7.multiply((-2146527660));
      complex3.getField();
      Complex complex12 = complex11.asin();
      Complex.valueOf((-4108.604537805));
      complex8.sqrt1z();
      Complex complex13 = Complex.ONE;
      complex8.createComplex(1.3325698375701904, 1.0);
      Complex complex14 = Complex.ZERO;
      complex14.subtract((-1212.44208));
      Complex.valueOf(299.5510885327939, (-1212.44208));
      complex12.atan();
      complex0.cos();
      complex10.createComplex(2072.3662715, (-2146527660));
      Complex.valueOf((double) (-2146527660));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.abs();
      complex0.tanh();
      Complex complex2 = Complex.valueOf((-2844.287));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.I;
      complex4.divide(complex1);
      Complex complex5 = new Complex(0.8813735870195428);
      complex3.pow(2372.518303431);
      complex2.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.subtract((-20.0));
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4134.952130534467));
      Complex complex1 = complex0.acos();
      complex1.ZERO.sin();
      Complex complex2 = Complex.I;
      complex1.divide(complex2);
      Complex complex3 = complex2.pow((-4134.952130534467));
      Complex complex4 = complex1.pow(complex3);
      complex3.cosh();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.acos();
      complex4.equals(complex7);
      complex4.multiply(Double.NaN);
      Complex complex8 = Complex.valueOf((-4134.952130534467), (-4134.952130534467));
      complex8.getField();
      complex3.abs();
      Complex.valueOf(Double.NaN);
      complex3.sqrt1z();
      complex8.toString();
      complex5.cos();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4134.952130534467));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.pow(2761.9219033177);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.I;
      complex2.acos();
      complex0.equals("");
      Complex complex8 = complex2.createComplex(1228.2785761, 1.0);
      complex5.asin();
      complex4.abs();
      complex6.log();
      complex1.exp();
      complex6.multiply((-478));
      complex8.getField();
      complex2.asin();
      complex2.atan();
      Complex complex9 = Complex.ONE;
      complex1.sqrt1z();
      complex7.createComplex(3.7772500667438066E-282, 8217.208953914178);
      complex9.divide(8217.208953914178);
      Complex complex10 = new Complex(1.0);
      Complex complex11 = new Complex(3.7772500667438066E-282, Double.POSITIVE_INFINITY);
      complex5.multiply(complex11);
      Complex complex12 = Complex.ONE;
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1.2631909085915044E114), (-1.2631909085915044E114));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.NaN.log();
      complex1.ZERO.sqrt();
      Complex complex3 = complex2.NaN.reciprocal();
      complex3.I.sqrt1z();
      complex1.ONE.multiply(1.0);
      Complex complex4 = complex0.acos();
      complex4.ONE.getField();
      complex1.abs();
      Complex complex5 = Complex.valueOf((-1987.4525));
      complex5.NaN.sqrt1z();
      complex0.toString();
      complex2.cos();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4134.952130534467));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      complex1.divide(complex2);
      Complex complex3 = complex2.pow((-4134.952130534467));
      complex1.pow(complex3);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.tan();
      Complex complex6 = Complex.I;
      complex5.tan();
      Complex complex7 = Complex.I;
      complex1.acos();
      Object object0 = new Object();
      Complex complex8 = Complex.ZERO;
      complex8.equals(complex7);
      double double0 = 2.0;
      complex7.createComplex((-4134.952130534467), 2.0);
      Complex complex9 = new Complex(20.0, 20.0);
      complex4.asin();
      complex7.abs();
      complex0.tanh();
      int int0 = 214;
      int int1 = (-1113);
      try { 
        complex4.nthRoot((-1113));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,113
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.ZERO;
      complex0.toString();
      Complex complex2 = complex0.add(complex1);
      double double1 = 2522132.2748967228;
      Complex complex3 = complex0.subtract(2522132.2748967228);
      Complex complex4 = complex2.cosh();
      complex4.add(complex3);
      complex2.log();
      double double2 = 1265.123491;
      Complex.valueOf(1265.123491);
      complex3.asin();
      Complex complex5 = complex2.sin();
      complex5.I.sqrt();
      Complex complex6 = Complex.ONE;
      try { 
        complex6.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      complex0.ZERO.tanh();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex2.ZERO.divide((-4.734813904255994E-8));
      complex3.INF.nthRoot(3595);
      complex2.INF.readResolve();
      complex0.subtract(complex1);
      Complex complex4 = new Complex((-675.991067702), 2931.05546386);
      Complex complex5 = Complex.valueOf((-860.18592), (-616.326441));
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.pow((-13.57039));
      Complex complex2 = Complex.valueOf((-13.57039));
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.cosh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.I;
      complex3.acos();
      complex4.equals(", ");
      Complex complex7 = complex5.createComplex((-4.734813904255994E-8), 2625.2005741);
      Complex complex8 = complex4.asin();
      complex0.abs();
      Complex complex9 = complex8.tanh();
      complex6.nthRoot(214);
      complex9.pow(20.0);
      Complex complex10 = new Complex((-13.57039), (-13.57039));
      complex7.asin();
      complex4.pow(0.12700522168479678);
      Complex complex11 = new Complex(1.2180059007352666, (-3.690554096892454));
      complex11.readResolve();
      complex10.reciprocal();
      complex9.abs();
      Complex complex12 = Complex.I;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      complex0.abs();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex1.I.log();
      Complex complex4 = Complex.valueOf(119.93288);
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex1.multiply((-2500));
      complex1.NaN.toString();
      complex6.atan();
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = complex7.INF.multiply(complex6);
      Complex complex9 = complex8.INF.divide(complex2);
      complex8.ZERO.add(complex3);
      complex6.I.sinh();
      complex9.ONE.getField();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex5.add(complex10);
      complex6.pow((double) (-2500));
      complex4.pow(complex6);
      complex2.abs();
      complex11.acos();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4108.604537805));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      complex1.divide(complex2);
      complex2.pow((-4108.604537805));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = complex3.pow((-4108.604537805));
      Complex complex6 = complex5.pow(complex0);
      complex4.cosh();
      complex1.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.acos();
      Object object0 = new Object();
      complex5.equals(object0);
      complex8.createComplex((-4108.604537805), 2.0);
      Complex complex9 = new Complex(20.0, 7.601944593000062);
      complex0.asin();
      complex6.abs();
      Complex complex10 = complex6.tanh();
      complex0.nthRoot(214);
      complex10.pow((double) 214);
      Complex complex11 = Complex.valueOf((-266.4), Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.INF;
      complex11.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-1228.2785761));
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = Complex.valueOf((-1228.2785761));
      complex0.subtract(complex1);
      Complex complex4 = complex3.INF.pow((-1228.2785761));
      complex4.add(complex1);
      complex0.nthRoot(4698);
      Complex complex5 = complex1.divide((-1228.2785761));
      complex1.add((double) 4698);
      complex5.ZERO.pow(6.283185307179586);
      Complex complex6 = complex1.tanh();
      complex3.tan();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.I.negate();
      Complex complex9 = complex2.cosh();
      complex9.log();
      Complex complex10 = complex0.exp();
      complex10.INF.multiply(4698);
      complex2.getField();
      Complex complex11 = complex6.asin();
      Complex complex12 = complex8.atan();
      complex12.NaN.sqrt1z();
      Complex complex13 = complex12.createComplex(4698, 0.04258377800237945);
      complex13.ZERO.divide(Double.POSITIVE_INFINITY);
      complex13.multiply(complex9);
      complex13.negate();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ZERO.tanh();
      complex2.NaN.hashCode();
      Complex complex4 = complex3.ZERO.tan();
      complex4.getArgument();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = (Complex)complex0.readResolve();
      complex0.equals(complex6);
      Complex complex7 = complex5.createComplex(0.0, 1.0);
      Complex complex8 = complex7.asin();
      complex3.abs();
      Complex.valueOf(20.0);
      Complex complex9 = complex8.tan();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.reciprocal();
      complex9.log();
      complex8.pow(Double.NaN);
      complex3.subtract(complex6);
      Complex complex12 = complex10.subtract(complex6);
      Complex complex13 = complex12.add(1.920871394985668E173);
      complex4.exp();
      complex10.isInfinite();
      complex12.isNaN();
      complex1.sqrt1z();
      complex11.hashCode();
      complex13.exp();
      complex12.negate();
      complex5.negate();
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(614.6254);
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.pow(complex1);
      complex0.cosh();
      Complex complex4 = Complex.ZERO;
      complex4.tan();
      Complex complex5 = Complex.I;
      complex5.acos();
      complex2.equals(complex4);
      complex0.createComplex(548929.7106696565, 2889.58915);
      complex4.asin();
      complex3.abs();
      complex2.tanh();
      try { 
        complex4.nthRoot((-1914));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,914
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-55.28316534771463));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.pow(20.046);
      Complex complex6 = complex3.pow(complex2);
      complex0.cosh();
      Complex complex7 = complex1.tan();
      Complex complex8 = Complex.I;
      complex5.acos();
      complex5.equals(complex8);
      Complex complex9 = complex6.createComplex((-3.690554096892454), 2.0);
      complex1.INF.sqrt();
      Complex complex10 = new Complex(7.601944593000062, 7.601944593000062);
      Complex complex11 = complex10.asin();
      complex9.abs();
      Complex complex12 = complex7.tanh();
      complex7.nthRoot(214);
      complex2.pow(20.0);
      Complex complex13 = complex11.multiply(1309.2224596331018);
      Complex complex14 = Complex.valueOf(2.0);
      complex14.INF.negate();
      complex10.reciprocal();
      complex0.acos();
      complex13.reciprocal();
      complex12.getReal();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      complex1.toString();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.acos();
      complex1.getReal();
      complex6.isNaN();
      complex5.equals(complex1);
      Complex complex7 = complex3.tan();
      Complex complex8 = complex1.sqrt1z();
      complex4.I.toString();
      Complex complex9 = complex2.multiply((-1878));
      complex0.add(0.7215118012645222);
      complex5.exp();
      complex3.getArgument();
      Complex complex10 = Complex.valueOf(2613.0);
      complex10.tan();
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = Complex.INF;
      complex12.log();
      Complex complex13 = Complex.valueOf(2613.0);
      complex13.pow(2613.0);
      complex2.subtract(complex4);
      complex3.add(0.7215118012645222);
      complex8.exp();
      complex7.isInfinite();
      Complex complex14 = Complex.ONE;
      complex14.isNaN();
      complex9.sqrt1z();
      complex11.hashCode();
      complex9.exp();
      complex13.negate();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-4108.604537805);
      Complex complex0 = Complex.valueOf(20.3748953309806);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.pow((-4108.604537805));
      complex1.pow(complex4);
      complex4.cosh();
      complex3.reciprocal();
      Complex complex5 = Complex.valueOf((-4108.604537805));
      complex5.negate();
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ZERO.tanh();
      complex2.NaN.hashCode();
      Complex complex4 = complex3.ZERO.tan();
      complex4.getArgument();
      Complex complex5 = Complex.valueOf(20.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex6 = complex5.createComplex(0.0, 1.0);
      complex6.asin();
      complex3.abs();
      Complex complex7 = complex5.tanh();
      try { 
        complex7.nthRoot((-618));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -618
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-55.28316534771463));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.pow((-3.690554096892454));
      Complex complex4 = Complex.valueOf((-55.28316534771463));
      Complex complex5 = complex4.pow(complex1);
      complex1.cosh();
      complex5.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.acos();
      complex7.equals(", ");
      Complex complex8 = complex2.createComplex(2625.2005741, (-480.3694429636844));
      complex8.asin();
      complex0.abs();
      Complex complex9 = complex6.tanh();
      complex4.nthRoot(214);
      Complex complex10 = complex3.pow(20.0);
      Complex complex11 = complex10.createComplex((-480.3694429636844), Double.POSITIVE_INFINITY);
      Complex complex12 = complex4.asin();
      complex9.cos();
      complex11.multiply((-1961.0));
      complex3.atan();
      Complex complex13 = Complex.I;
      complex10.getArgument();
      complex12.acos();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.sin();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.NaN.pow(complex2);
      complex1.INF.toString();
      Complex complex4 = complex2.asin();
      complex0.nthRoot(4680);
      complex1.INF.subtract((double) 4680);
      Complex complex5 = complex0.I.sqrt1z();
      complex2.ONE.toString();
      complex5.ONE.divide(1.0);
      Complex.valueOf((-8217.208953914178), (-1.132693295333231));
      Complex complex6 = Complex.valueOf((-8217.208953914178));
      complex0.divide(complex4);
      complex4.pow(550.58);
      complex6.readResolve();
      complex2.reciprocal();
      complex5.abs();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.3748953309806);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.pow((-4108.604537805));
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.tan();
      Complex complex8 = Complex.I;
      complex8.acos();
      complex5.equals(complex3);
      complex5.multiply(646);
      Complex.valueOf((-1262.67363));
      complex6.divide(complex7);
      Complex complex9 = Complex.valueOf(0.46424978971481323, 856.700767092);
      complex9.pow((-1262.67363));
      complex0.readResolve();
      Complex complex10 = complex6.reciprocal();
      complex10.abs();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.ONE.createComplex((-2693.68174047), (-2693.68174047));
      Complex complex3 = complex1.pow((-2693.68174047));
      complex2.readResolve();
      complex0.getReal();
      complex2.isInfinite();
      complex2.getReal();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.asin();
      complex6.nthRoot(7);
      complex6.readResolve();
      complex1.cosh();
      complex5.negate();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-55.28316534771463));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.pow((-3.690554096892454));
      Complex complex4 = Complex.valueOf((-55.28316534771463));
      Complex complex5 = complex4.pow(complex1);
      complex1.cosh();
      complex5.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.acos();
      complex7.equals(", ");
      Complex complex8 = complex2.createComplex(2625.2005741, (-480.3694429636844));
      complex8.asin();
      complex0.abs();
      Complex complex9 = complex6.tanh();
      complex4.nthRoot(214);
      Complex complex10 = complex3.pow(20.0);
      complex10.createComplex((-480.3694429636844), Double.POSITIVE_INFINITY);
      complex4.asin();
      complex9.cos();
      complex5.multiply(214);
      Complex complex11 = new Complex(1738, 1738);
      Complex complex12 = complex10.createComplex(20.046, 214);
      complex9.isInfinite();
      complex12.toString();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      complex0.NaN.exp();
      Complex complex1 = complex0.ONE.createComplex((-2693.68174047), (-2693.68174047));
      Complex complex2 = complex1.ONE.add(complex0);
      complex2.cos();
      complex0.multiply((-2035.54485834591));
      Complex complex3 = complex0.atan();
      complex3.getArgument();
      complex1.acos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.046);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.pow((-4108.604537805));
      complex4.cosh();
      Complex complex5 = complex0.tan();
      complex3.acos();
      complex0.equals(complex1);
      complex0.createComplex((-4108.604537805), (-3949.04769613723));
      Complex complex6 = complex3.asin();
      complex5.abs();
      complex6.tanh();
      // Undeclared exception!
      complex1.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.ZERO.divide((-4.734813904255994E-8));
      complex4.INF.nthRoot(3595);
      Complex complex5 = (Complex)complex3.INF.readResolve();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.atan();
      complex2.toString();
      Complex complex8 = complex2.add(complex7);
      Complex complex9 = complex6.NaN.subtract((double) 3595);
      complex8.cosh();
      complex4.getReal();
      complex5.isInfinite();
      complex7.getReal();
      complex9.hashCode();
      Complex complex10 = complex1.tanh();
      Complex complex11 = complex4.log();
      complex10.asin();
      complex4.nthRoot(3595);
      complex4.readResolve();
      complex3.cosh();
      complex11.negate();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.ZERO.divide((-4.734813904255994E-8));
      Complex complex5 = complex0.tanh();
      complex3.hashCode();
      complex3.NaN.add(complex1);
      Complex complex6 = complex4.atan();
      Complex complex7 = Complex.valueOf((-4.734813904255994E-8));
      Complex complex8 = complex5.cosh();
      complex5.divide(complex7);
      complex8.hashCode();
      complex3.toString();
      complex0.ZERO.readResolve();
      Complex complex9 = complex0.log();
      Complex.valueOf(822.33);
      complex6.getImaginary();
      complex3.nthRoot(1);
      complex0.divide((-4.734813904255994E-8));
      complex9.pow(822.33);
      complex8.atan();
      complex0.sqrt();
      Complex complex10 = Complex.INF;
      complex7.pow(complex10);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.I.multiply(complex0);
      Complex complex2 = complex1.ZERO.tanh();
      complex1.NaN.hashCode();
      Complex complex3 = complex2.ZERO.tan();
      complex3.getArgument();
      Complex complex4 = complex1.tan();
      complex3.tan();
      complex2.reciprocal();
      Complex complex5 = complex3.log();
      Complex complex6 = complex4.pow(0.0);
      Complex complex7 = complex5.subtract(complex6);
      Complex.valueOf(0.5707963267948966, (-264.28987));
      complex7.reciprocal();
      complex5.acos();
      complex6.pow(1.1817638600528107E-136);
      complex6.atan();
      complex6.sqrt();
      Complex complex8 = new Complex(2.414213562373095);
      complex5.pow(complex8);
      Complex complex9 = Complex.INF;
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.add(complex0);
      complex3.tanh();
      complex1.hashCode();
      Complex complex4 = complex1.tan();
      complex4.getArgument();
      Complex.valueOf((-710.0));
      complex0.tan();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = Complex.valueOf((-4.734813904255994E-8), (-710.0));
      Complex complex7 = complex6.pow((-4.734813904255994E-8));
      Complex complex8 = Complex.valueOf((-863.8039538915875), 0.5707963267948966);
      complex8.subtract(complex5);
      Complex complex9 = Complex.valueOf((-4.734813904255994E-8), 0.5707963267948966);
      complex5.reciprocal();
      complex7.acos();
      complex2.pow(0.0);
      complex6.atan();
      complex9.sqrt();
      Complex complex10 = Complex.INF;
      complex6.pow(complex10);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.INF.nthRoot(786);
      complex0.I.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex0.ONE.subtract((-708.2549));
      Complex complex5 = complex4.atan();
      Complex complex6 = complex2.atan();
      Complex complex7 = new Complex(822.33, 786);
      complex7.cosh();
      Complex complex8 = complex0.divide(complex6);
      complex5.hashCode();
      complex6.toString();
      complex8.log();
      Complex complex9 = Complex.valueOf(0.0);
      complex3.getImaginary();
      complex3.nthRoot(1076);
      Complex complex10 = complex1.divide(9.825376773739812E-4);
      complex4.multiply(complex9);
      complex1.log();
      complex10.getArgument();
      complex4.conjugate();
      complex1.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.046);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(complex1);
      Complex complex3 = complex1.pow((-4108.604537805));
      Complex complex4 = complex1.pow(complex3);
      complex3.cosh();
      complex0.tan();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.acos();
      complex4.equals(complex2);
      complex1.createComplex((-4108.604537805), (-480.3694429636844));
      Complex complex7 = complex5.asin();
      complex6.abs();
      Complex complex8 = complex2.tanh();
      complex2.nthRoot(214);
      complex8.pow((-4108.604537805));
      Complex complex9 = complex3.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex0.asin();
      complex5.I.cos();
      complex7.multiply(1738);
      Complex complex10 = new Complex((-480.3694429636844), 1.8011719796199461);
      complex10.ONE.createComplex((-480.3694429636844), 20.046);
      complex10.isInfinite();
      complex9.toString();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(535.4328192093774);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.tanh();
      complex2.ZERO.subtract(complex0);
      Complex complex3 = complex0.conjugate();
      complex3.I.abs();
      complex0.acos();
      complex1.divide(1.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.ZERO.divide((-4.734813904255994E-8));
      complex4.INF.nthRoot(3595);
      complex3.INF.readResolve();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.atan();
      complex2.toString();
      Complex complex7 = complex2.add(complex6);
      complex5.NaN.subtract((double) 3595);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.add(complex4);
      complex9.I.log();
      Complex.valueOf((double) 3595);
      Complex complex10 = complex1.asin();
      Complex complex11 = complex0.sin();
      complex11.NaN.getField();
      complex10.createComplex((-4.734813904255994E-8), (-4.734813904255994E-8));
      complex1.hashCode();
      complex10.subtract((double) 3595);
      Complex.valueOf((double) 3595, (double) 3595);
      complex7.multiply(0.0);
      complex0.sqrt1z();
      complex11.subtract((double) 3595);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1434.35793476827));
      complex1.equals(complex0);
      Complex complex2 = complex1.createComplex((-1434.35793476827), (-480.3694429636844));
      Complex complex3 = complex1.asin();
      Complex complex4 = complex2.pow(complex1);
      complex1.abs();
      Complex complex5 = complex1.tanh();
      complex4.nthRoot(224);
      complex2.pow(1434.35793476827);
      complex5.NaN.reciprocal();
      complex4.createComplex(1.5690805725407762, (-91.352316726448));
      complex3.asin();
      complex4.abs();
      complex5.cos();
      complex5.multiply(886);
      Complex complex6 = new Complex(0.9982842524803187, 224);
      Complex complex7 = complex6.createComplex((-480.3694429636844), (-20.0));
      complex7.isInfinite();
      complex4.toString();
      Complex complex8 = complex7.exp();
      complex8.getField();
      complex3.createComplex(0.0, 2832.6487546);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2035.54485834591));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.acos();
      complex1.equals(complex3);
      Complex complex7 = complex5.createComplex((-2205.705722899692), 2761.9219033177);
      complex7.pow(complex6);
      complex4.abs();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.tanh();
      complex9.nthRoot(224);
      complex0.pow(420.947944557);
      complex6.createComplex((-1.0), 1483.705167319);
      Complex complex10 = new Complex(420.947944557, 1483.705167319);
      complex10.asin();
      complex2.abs();
      complex10.isInfinite();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1350.0), (-1350.0));
      Complex complex1 = complex0.I.divide(2.0);
      complex1.I.divide(complex0);
      Complex complex2 = complex1.exp();
      complex2.abs();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-322.28136), (-322.28136));
      Complex complex1 = complex0.atan();
      complex0.ZERO.nthRoot(892);
      Complex complex2 = complex1.multiply((-1.0));
      complex1.abs();
      complex2.negate();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.multiply(complex3);
      complex4.ONE.readResolve();
      complex4.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2035.54485834591));
      Complex complex2 = Complex.valueOf((-2035.54485834591), (-2035.54485834591));
      Complex complex3 = complex2.multiply(1.7194287776947021);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.NaN;
      complex6.equals((Object) null);
      complex3.toString();
      complex4.acos();
      complex4.multiply(complex6);
      complex1.getImaginary();
      complex4.getField();
      Complex complex7 = Complex.ZERO;
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex3.abs();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.divide((-4.734813904255994E-8));
      Complex complex5 = Complex.INF;
      complex5.nthRoot(3595);
      complex0.readResolve();
      complex0.subtract(complex3);
      complex3.atan();
      complex3.toString();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = new Complex(2560.8968844);
      complex8.subtract((-928.80042));
      Complex complex9 = complex6.cosh();
      Complex complex10 = Complex.valueOf((double) 3595, (-928.80042));
      complex7.add(complex10);
      complex9.log();
      Complex.valueOf((-2022.5694160645576));
      Complex complex11 = complex2.asin();
      complex3.sin();
      complex7.getField();
      complex4.createComplex((-928.80042), 2560.8968844);
      complex1.hashCode();
      Complex complex12 = Complex.INF;
      complex12.subtract((double) 3595);
      Complex.valueOf(2560.8968844, (-928.80042));
      complex5.multiply((-0.9950352758051743));
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.divide((-1214.007515));
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.tanh();
      Complex complex7 = new Complex((-4.734813904255994E-8), 928.5);
      complex7.hashCode();
      Complex complex8 = complex5.add(complex1);
      complex4.atan();
      complex4.atan();
      Complex.valueOf((-4.734813904255994E-8));
      Complex complex9 = complex3.cosh();
      complex1.divide(complex3);
      complex6.hashCode();
      complex8.toString();
      Complex complex10 = complex3.log();
      Complex complex11 = Complex.valueOf((-4.734813904255994E-8));
      complex10.getImaginary();
      complex4.cosh();
      complex5.nthRoot(196);
      complex10.divide((-866.8197));
      Complex complex12 = complex8.multiply(complex5);
      Complex complex13 = Complex.NaN;
      complex13.hashCode();
      Complex complex14 = complex7.log();
      complex11.getField();
      complex14.getArgument();
      complex13.conjugate();
      complex9.pow(complex13);
      complex12.sqrt1z();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.ZERO.divide((-4.734813904255994E-8));
      Complex complex5 = complex3.sin();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex2.tan();
      Complex complex8 = Complex.I;
      Complex complex9 = complex4.acos();
      complex8.equals(complex6);
      Complex complex10 = complex5.createComplex(2694.80876721, (-480.3694429636844));
      Complex complex11 = complex7.asin();
      Complex complex12 = complex4.pow(complex11);
      complex1.abs();
      Complex complex13 = complex4.tanh();
      complex13.nthRoot(224);
      Complex complex14 = complex10.pow((-1766.2344716218192));
      complex2.createComplex((-4.734813904255994E-8), 2694.80876721);
      complex9.asin();
      complex5.abs();
      complex6.cos();
      complex2.multiply(1738);
      Complex complex15 = new Complex(Double.NaN, 0.0);
      Complex complex16 = Complex.ZERO;
      complex16.createComplex(Double.POSITIVE_INFINITY, 658.20547794);
      complex12.isInfinite();
      complex11.toString();
      complex10.exp();
      complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.046);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.pow((-4108.604537805));
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex3.cosh();
      complex4.hashCode();
      complex2.add(complex0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex0.atan();
      Complex complex8 = Complex.valueOf(20.046);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex3.divide(complex4);
      complex3.hashCode();
      complex5.toString();
      Complex complex11 = complex2.log();
      Complex complex12 = Complex.valueOf(2333.93);
      Complex complex13 = complex7.cosh();
      complex0.nthRoot(216);
      complex7.divide(400.842116);
      complex10.multiply(complex8);
      complex6.hashCode();
      Complex complex14 = complex11.log();
      complex14.getField();
      complex0.getArgument();
      Complex complex15 = complex9.conjugate();
      complex15.ZERO.add(complex3);
      complex12.pow(complex13);
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex2.toString();
      complex2.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex1.acos();
      complex4.getReal();
      complex4.isNaN();
      complex3.equals(complex5);
      complex1.I.tan();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex2.add(2.718281828459045);
      complex0.ONE.createComplex(2.718281828459045, 339.0);
      complex7.ONE.exp();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex8.sqrt();
      complex3.readResolve();
      Complex complex10 = new Complex(4385.260335946, 2.718281828459045);
      complex10.getReal();
      Complex complex11 = Complex.INF;
      complex4.multiply(complex11);
      complex11.readResolve();
      Complex complex12 = complex9.negate();
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ZERO.tanh();
      complex2.NaN.hashCode();
      Complex complex4 = complex3.ZERO.tan();
      complex4.getArgument();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = complex2.tan();
      complex1.reciprocal();
      complex0.log();
      complex3.pow(0.5707963267948966);
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = Complex.valueOf((-826.923), 0.5707963267948966);
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex9.acos();
      complex10.pow(0.5707963267948966);
      complex4.atan();
      complex6.sqrt();
      complex8.pow(complex3);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.046);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex2.pow((-4108.604537805));
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex4.cosh();
      complex0.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.acos();
      complex5.equals(complex3);
      complex2.createComplex((-4108.604537805), (-480.3694429636844));
      Complex complex9 = complex7.asin();
      complex1.pow(complex3);
      complex8.abs();
      Complex complex10 = complex3.tanh();
      complex3.nthRoot(224);
      complex10.pow((-4108.604537805));
      Complex complex11 = complex4.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex0.asin();
      complex6.abs();
      complex7.I.cos();
      complex9.multiply(1738);
      Complex complex12 = new Complex((-480.3694429636844), 1.8011719796199461);
      complex12.ONE.createComplex((-480.3694429636844), 20.046);
      complex12.isInfinite();
      complex11.toString();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.log();
      complex0.I.abs();
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex2.ZERO.tanh();
      complex2.NaN.hashCode();
      complex3.ZERO.tan();
      Complex complex4 = complex2.ONE.reciprocal();
      complex4.readResolve();
      Complex complex5 = complex1.createComplex(1.0, 1.0);
      Complex complex6 = complex1.sqrt();
      complex6.isInfinite();
      complex4.getArgument();
      Complex complex7 = complex3.multiply(0.0875862700108075);
      Complex complex8 = Complex.I;
      complex8.add(0.0875862700108075);
      complex5.exp();
      complex7.acos();
      Complex complex9 = new Complex(1.0, -0.0);
      complex9.pow(5591.42051163);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex2.toString();
      complex2.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex1.acos();
      complex4.getReal();
      complex4.isNaN();
      complex3.equals(complex5);
      Complex complex6 = complex1.I.tan();
      Complex complex7 = complex0.sqrt1z();
      complex7.ONE.multiply((-1878));
      Complex complex8 = complex2.add(0.0);
      complex8.ONE.exp();
      complex8.ZERO.getArgument();
      Complex complex9 = Complex.valueOf(2613.0);
      complex7.ZERO.tan();
      complex0.ZERO.reciprocal();
      complex5.log();
      Complex complex10 = complex9.pow(2613.0);
      complex10.INF.subtract(complex0);
      Complex complex11 = Complex.valueOf(20.0, 6.283185307179586);
      Complex complex12 = complex11.ZERO.divide(20.0);
      complex12.NaN.subtract(complex1);
      Complex complex13 = complex4.reciprocal();
      Complex complex14 = complex13.acos();
      complex13.pow(6.154786508667658E261);
      Complex complex15 = complex0.atan();
      complex13.sqrt();
      complex7.pow(complex6);
      complex14.toString();
      complex15.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex((-2035.54485834591), (-2035.54485834591));
      Complex complex4 = complex3.NaN.exp();
      Complex complex5 = complex3.ONE.createComplex((-2693.68174047), 2814.4112);
      Complex complex6 = complex3.multiply((-2035.54485834591));
      complex6.abs();
      complex4.negate();
      Complex complex7 = complex2.tan();
      complex5.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.I.abs();
      complex0.I.sinh();
      Complex complex2 = Complex.I;
      complex1.NaN.hashCode();
      complex2.ZERO.tan();
      complex0.ONE.reciprocal();
      Complex complex3 = complex0.NaN.sqrt();
      complex1.ONE.readResolve();
      complex0.getReal();
      complex3.isInfinite();
      Complex complex4 = complex0.multiply(complex1);
      complex4.ONE.sinh();
      complex3.readResolve();
      complex3.negate();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4108.604537805));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex1.ONE.pow(complex0);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex0.tan();
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.asin();
      complex6.pow(complex5);
      complex5.abs();
      Complex complex7 = complex3.tanh();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY);
      complex8.nthRoot(10);
      Complex complex9 = complex1.pow((double) 10);
      Complex complex10 = complex9.createComplex((-187.3), 1.5707963267948966);
      Complex complex11 = complex10.asin();
      complex2.abs();
      complex11.multiply(37);
      complex7.isInfinite();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.ZERO.divide((-4.734813904255994E-8));
      Complex complex5 = complex3.sin();
      Complex complex6 = complex0.tanh();
      complex5.hashCode();
      complex3.NaN.add(complex1);
      Complex complex7 = complex3.atan();
      Complex complex8 = complex4.atan();
      Complex complex9 = Complex.valueOf((-4.734813904255994E-8));
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex7.divide(complex9);
      complex10.hashCode();
      complex7.toString();
      Complex complex12 = complex7.log();
      Complex complex13 = Complex.valueOf(822.33);
      complex8.getImaginary();
      complex1.cosh();
      complex3.nthRoot(1);
      Complex complex14 = complex0.divide((-4.734813904255994E-8));
      complex5.multiply(complex13);
      complex14.hashCode();
      Complex complex15 = complex13.log();
      complex15.getField();
      complex8.getArgument();
      complex5.conjugate();
      complex11.pow(complex12);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex0.reciprocal();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.acos();
      complex5.ONE.sqrt();
      Complex complex6 = complex1.I.add(546.18211);
      complex6.multiply(546.18211);
      Complex complex7 = complex4.INF.asin();
      Complex complex8 = complex5.NaN.atan();
      complex1.equals((Object) null);
      complex5.toString();
      Complex complex9 = complex0.acos();
      complex9.ZERO.multiply(complex2);
      complex8.getImaginary();
      complex9.getField();
      complex7.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex8.multiply(546.18211);
      complex5.abs();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.INF.nthRoot(786);
      complex0.I.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex0.ONE.subtract((-708.2549));
      Complex complex5 = complex1.NaN.cos();
      complex5.ZERO.tanh();
      Complex complex6 = complex3.I.log();
      complex6.multiply((-708.2549));
      complex4.I.abs();
      Complex complex7 = Complex.valueOf((-708.2549), (-210.5191352137));
      Complex complex8 = complex0.divide(complex1);
      complex8.ONE.subtract((-708.2549));
      Complex complex9 = complex8.INF.log();
      Complex complex10 = complex2.INF.negate();
      complex9.ZERO.add(complex3);
      complex1.ONE.log();
      complex7.ONE.tan();
      complex0.conjugate();
      complex4.readResolve();
      Complex complex11 = Complex.valueOf((-3081.8932090875614), 2045.091192756745);
      complex11.I.divide(complex3);
      Complex complex12 = complex7.createComplex((-708.2549), (-708.2549));
      complex12.NaN.asin();
      Complex complex13 = complex3.add((-210.5191352137));
      complex13.atan();
      complex10.conjugate();
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.I.abs();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex3.ZERO.tanh();
      complex3.NaN.hashCode();
      Complex complex5 = complex4.ZERO.tan();
      Complex complex6 = new Complex(1.5373954550449549E190, (-1.3810978455418157));
      complex6.exp();
      complex2.createComplex(2814.4112, 2814.4112);
      complex5.multiply((-1669.16599));
      complex1.abs();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2035.54485834591));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.add((-2693.68174047));
      complex2.reciprocal();
      Complex complex4 = complex3.sqrt();
      complex4.readResolve();
      complex4.getReal();
      Complex complex5 = Complex.valueOf(0.40285754203796387, (-2035.54485834591));
      complex5.isInfinite();
      Complex complex6 = Complex.INF;
      Complex complex7 = new Complex((-2015.018));
      complex7.ONE.abs();
      complex6.multiply(complex7);
      complex7.readResolve();
      complex7.negate();
      complex3.negate();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.INF.nthRoot(786);
      complex0.I.toString();
      complex0.tanh();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex0.ONE.subtract((-708.2549));
      Complex complex4 = complex1.NaN.cos();
      complex4.ZERO.tanh();
      Complex complex5 = complex2.I.log();
      complex5.multiply((-708.2549));
      complex3.I.abs();
      Complex complex6 = Complex.valueOf((-708.2549), (-210.5191352137));
      Complex complex7 = complex0.divide(complex1);
      complex7.ONE.subtract((-708.2549));
      Complex complex8 = Complex.valueOf(1.0, 0.0);
      Complex complex9 = complex8.pow(complex7);
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex8.ZERO.add(complex2);
      complex1.ONE.log();
      complex6.ONE.tan();
      complex0.conjugate();
      complex3.readResolve();
      Complex complex12 = Complex.valueOf((-3081.8932090875614), 2045.091192756745);
      Complex complex13 = complex12.I.divide(complex2);
      complex7.getImaginary();
      Complex complex14 = complex6.createComplex((-708.2549), (-708.2549));
      complex14.NaN.asin();
      complex10.add(83.2155768788);
      Complex complex15 = Complex.ONE;
      complex13.equals(complex14);
      complex13.atan();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.INF.nthRoot(786);
      complex0.I.toString();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex0.ONE.subtract((-708.2549));
      complex1.NaN.cos();
      Complex.valueOf((-708.2549), 0.0);
      Complex complex5 = complex3.I.log();
      Complex complex6 = complex5.multiply((-708.2549));
      complex4.I.abs();
      Complex complex7 = Complex.valueOf((-708.2549), (-210.5191352137));
      Complex complex8 = complex0.divide(complex1);
      complex8.ONE.subtract((-708.2549));
      Complex complex9 = complex8.INF.log();
      Complex complex10 = complex9.pow(complex8);
      complex10.INF.negate();
      complex9.ZERO.add(complex3);
      complex1.ONE.log();
      complex7.ONE.tan();
      complex0.conjugate();
      Complex complex11 = (Complex)complex4.readResolve();
      Complex complex12 = Complex.valueOf((-3081.8932090875614), 2045.091192756745);
      complex12.I.divide(complex3);
      complex8.getImaginary();
      Complex complex13 = complex7.createComplex((-708.2549), (-708.2549));
      complex13.NaN.asin();
      Complex complex14 = complex9.add((-2339.307196433));
      complex2.atan();
      complex6.equals(complex9);
      complex14.atan();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4108.604537805));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.ONE.pow((-4108.604537805));
      Complex complex5 = complex1.ONE.pow(complex0);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex0.tan();
      complex7.NaN.acos();
      Object object0 = new Object();
      complex7.equals(object0);
      complex4.createComplex((-2659.4), (-480.3694429636844));
      complex6.asin();
      Complex complex8 = Complex.NaN;
      complex7.pow(complex8);
      complex8.abs();
      complex1.tanh();
      complex2.nthRoot(224);
      complex8.pow((-480.3694429636844));
      complex5.createComplex(Double.NaN, 224);
      Complex complex9 = Complex.valueOf(0.04987531172069825);
      complex9.asin();
      Complex complex10 = Complex.valueOf((-2724.9439250202));
      complex10.abs();
      complex5.multiply((-260));
      complex3.isInfinite();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double double0 = (-4108.604537805);
      Complex complex0 = Complex.valueOf((-4108.604537805));
      Complex complex1 = complex0.NaN.acos();
      complex0.I.tanh();
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.ONE.pow((-4108.604537805));
      Complex complex3 = complex1.ONE.pow(complex0);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.NaN.acos();
      Object object0 = complex1.readResolve();
      complex1.equals(object0);
      Complex complex7 = complex0.createComplex((-3241.992069), (-4108.604537805));
      complex2.asin();
      complex4.pow(complex0);
      complex2.abs();
      complex6.tanh();
      try { 
        complex7.nthRoot((-532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -532
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = (-155.0);
      Complex complex0 = Complex.valueOf((-949.81410147), (-155.0));
      complex0.getField();
      complex0.tanh();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.multiply(20.0);
      complex1.ONE.hashCode();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = complex0.pow(0.0);
      complex1.ZERO.exp();
      complex1.hashCode();
      Complex complex4 = complex2.ONE.sqrt1z();
      Complex complex5 = complex1.acos();
      complex5.readResolve();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex7.ONE.atan();
      complex0.readResolve();
      Complex complex9 = complex1.multiply(complex6);
      Complex complex10 = complex9.negate();
      complex9.multiply((-1));
      complex10.I.getArgument();
      complex2.getArgument();
      Complex complex11 = complex9.cosh();
      complex11.NaN.hashCode();
      complex9.tan();
      complex2.acos();
      complex8.getField();
      complex7.getField();
      complex9.getArgument();
      Complex complex12 = complex4.acos();
      complex3.createComplex(0.0, (-1732.65));
      Complex.valueOf(0.0);
      complex12.isNaN();
      complex4.tanh();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.divide(0.0);
      try { 
        complex2.ONE.nthRoot((-1656));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,656
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      complex1.I.pow(complex0);
      complex1.INF.readResolve();
      Complex complex2 = complex0.INF.multiply((-549));
      Complex complex3 = complex2.NaN.multiply(complex0);
      complex3.NaN.acos();
      complex0.getImaginary();
      complex0.getField();
      complex1.getArgument();
      Complex complex4 = Complex.valueOf(0.0, 273.0);
      complex4.isInfinite();
      complex2.hashCode();
      complex2.conjugate();
      try { 
        complex0.nthRoot((-549));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -549
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex((-724.79));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex3.NaN.add(complex2);
      complex3.ZERO.nthRoot(1937);
      complex4.ZERO.acos();
      Complex complex5 = complex4.divide(complex2);
      Complex.valueOf((double) 1937, (double) 1937);
      complex5.ONE.toString();
      Complex complex6 = Complex.valueOf((-724.79), (-724.79));
      Complex complex7 = complex6.NaN.createComplex((-1488.474145052), (-1488.474145052));
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex8.ZERO.multiply(207.16205679);
      complex6.createComplex(207.16205679, (-1.0));
      Complex.valueOf((double) 1937);
      complex0.atan();
      complex1.subtract(complex6);
      Complex complex10 = complex7.exp();
      complex10.negate();
      complex6.isNaN();
      Complex complex11 = complex9.log();
      complex8.hashCode();
      Complex.valueOf(207.16205679);
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex2.toString();
      complex2.conjugate();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.multiply(complex1);
      Complex complex5 = complex1.acos();
      complex4.getReal();
      complex4.isNaN();
      complex3.equals(complex5);
      Complex complex6 = complex1.I.tan();
      Complex complex7 = complex0.sqrt1z();
      complex7.ONE.multiply((-1878));
      Complex complex8 = complex2.add(0.0);
      complex8.ONE.exp();
      complex8.ZERO.getArgument();
      Complex complex9 = Complex.valueOf(2613.0);
      complex7.ZERO.tan();
      complex0.ZERO.reciprocal();
      complex5.log();
      Complex complex10 = complex9.pow(2613.0);
      complex10.INF.subtract(complex0);
      Complex.valueOf(20.0, 6.283185307179586);
      Complex complex11 = complex4.reciprocal();
      Complex complex12 = complex11.acos();
      complex11.pow(6.154786508667658E261);
      complex0.atan();
      complex11.sqrt();
      complex7.pow(complex6);
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1);
      Complex complex2 = complex1.I.add(5.5685313670430624E-8);
      complex2.ZERO.toString();
      complex2.ONE.multiply(complex0);
      Complex complex3 = complex0.I.multiply((-4452));
      complex3.sqrt();
      Complex complex4 = complex3.NaN.tanh();
      complex4.INF.sinh();
      Complex complex5 = complex0.ZERO.log();
      try { 
        complex5.NaN.nthRoot((-4452));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,452
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(520.7605657, 520.7605657);
      Complex complex1 = Complex.valueOf(520.7605657);
      complex0.ONE.add(complex1);
      Complex complex2 = complex1.NaN.exp();
      double double0 = 2.0;
      complex2.tanh();
      complex2.NaN.divide(2.0);
      complex0.add(complex1);
      Complex complex3 = complex1.ONE.reciprocal();
      int int0 = (-1246);
      try { 
        complex3.I.nthRoot((-1246));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,246
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      complex3.subtract(0.0);
      complex0.reciprocal();
      Complex complex4 = complex3.ONE.cosh();
      Complex complex5 = complex0.acos();
      Object object0 = null;
      double double0 = 546.18211;
      complex5.ONE.sqrt();
      Complex complex6 = complex1.I.add(546.18211);
      complex6.multiply(546.18211);
      complex4.INF.asin();
      Complex complex7 = complex5.NaN.atan();
      int int0 = (-1);
      try { 
        complex7.I.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(1430.407, 1430.407);
      complex0.INF.abs();
      complex0.INF.getArgument();
      Complex complex1 = complex0.I.log();
      complex1.NaN.getField();
      Complex complex2 = complex1.ONE.multiply(4521);
      Complex complex3 = complex2.atan();
      complex2.NaN.readResolve();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex2.pow(complex4);
      complex5.multiply(complex1);
      complex5.NaN.createComplex(1430.407, 6.773803682579552E-9);
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.INF.multiply(complex2);
      Complex complex7 = complex3.add(complex2);
      complex0.ONE.multiply(1251);
      complex0.abs();
      complex4.getField();
      Complex complex8 = complex4.tan();
      complex8.sqrt1z();
      Complex complex9 = complex3.pow(Double.POSITIVE_INFINITY);
      complex2.ZERO.cos();
      complex4.getReal();
      complex2.negate();
      complex6.sin();
      Complex complex10 = complex3.ONE.subtract(0.7853981633974483);
      complex10.INF.tan();
      Complex complex11 = complex2.divide(6.773803682579552E-9);
      complex9.getArgument();
      complex11.multiply(complex7);
      complex6.getReal();
      Complex.valueOf(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3359.1214759279);
      complex1.I.readResolve();
      Complex complex2 = complex0.pow(0.3041473627090454);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.ONE.multiply(3599);
      complex3.ZERO.abs();
      Complex.valueOf((-20.0));
      complex2.subtract(837.93487305);
      complex1.getImaginary();
      complex1.isInfinite();
      Complex complex5 = complex4.pow(0.0);
      complex5.add(complex0);
      Complex complex6 = complex5.divide(3359.1214759279);
      complex6.I.asin();
      complex2.tan();
      complex3.abs();
      complex0.acos();
      Complex.valueOf(0.0);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1955.663959574594, 54.04);
      Complex complex2 = complex0.I.asin();
      complex2.createComplex(1955.663959574594, 54.04);
      complex2.ZERO.subtract(complex1);
      Complex complex3 = complex1.NaN.reciprocal();
      complex1.getArgument();
      Complex complex4 = complex1.pow(0.0);
      Complex complex5 = complex4.divide(54.04);
      complex3.ONE.exp();
      Complex complex6 = complex5.NaN.createComplex(54.04, (-4073.22658));
      complex1.ZERO.add(3162.83);
      complex6.ONE.conjugate();
      complex3.multiply(1);
      complex6.negate();
      complex4.sqrt();
      complex4.cos();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1924.9825365511904));
      Complex complex1 = complex0.cosh();
      complex1.multiply((-1924.9825365511904));
      complex1.I.hashCode();
      Complex complex2 = complex0.sinh();
      complex2.INF.abs();
      complex2.cosh();
      complex2.tanh();
      complex1.negate();
      Complex complex3 = complex0.log();
      complex3.add(1328.897);
      Complex.valueOf(1328.897);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4108.604537805));
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex3.ONE.pow((-4108.604537805));
      Complex complex5 = complex1.ONE.pow(complex0);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex0.tan();
      complex7.NaN.acos();
      complex1.equals((Object) null);
      Complex complex8 = complex1.createComplex((-4108.604537805), (-480.3694429636844));
      Complex complex9 = complex0.ZERO.asin();
      Complex complex10 = complex8.NaN.pow(complex4);
      complex10.ZERO.abs();
      Complex complex11 = complex6.tanh();
      complex9.nthRoot(224);
      complex5.INF.pow(0.0);
      complex11.createComplex((-480.3694429636844), 0.0);
      complex4.asin();
      complex9.abs();
      complex2.multiply(224);
      complex9.isInfinite();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      Complex complex1 = complex0.I.add((-20.0));
      Complex complex2 = complex0.I.exp();
      complex1.NaN.toString();
      Complex complex3 = complex0.createComplex((-2073.39714107625), 4.062894701808608E154);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex7.ONE.sin();
      complex4.sinh();
      complex3.abs();
      complex3.reciprocal();
      complex5.abs();
      complex3.sin();
      Complex complex9 = complex2.cos();
      complex9.ONE.atan();
      complex8.multiply(1);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.734813904255994E-8), (-4.734813904255994E-8));
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.INF.add(complex0);
      Complex complex4 = complex3.ZERO.divide((-4.734813904255994E-8));
      complex4.INF.nthRoot(3595);
      complex3.INF.readResolve();
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex5.atan();
      complex2.toString();
      Complex complex7 = complex2.add(complex6);
      complex5.NaN.subtract((double) 3595);
      Complex complex8 = complex7.cosh();
      Complex complex9 = complex8.add(complex4);
      complex9.I.log();
      complex1.subtract(complex5);
      Complex.valueOf((double) 3595);
      Complex complex10 = complex1.asin();
      Complex complex11 = complex0.sin();
      complex11.NaN.getField();
      complex10.createComplex((-4.734813904255994E-8), (-4.734813904255994E-8));
      complex1.hashCode();
      complex10.subtract((-87.34303779502518));
      Complex.valueOf((double) 3595, (double) 3595);
      complex7.multiply(0.0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(439.0, 439.0);
      Complex complex1 = complex0.I.atan();
      complex0.NaN.hashCode();
      complex0.ZERO.divide(439.0);
      Complex complex2 = complex1.NaN.sinh();
      complex2.INF.add(complex0);
      Complex complex3 = Complex.valueOf((-1151.039), (-1151.039));
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex6.I.multiply((-2061));
      Complex complex8 = complex6.ONE.createComplex((-37.32085), 439.0);
      complex4.sinh();
      Complex complex9 = complex3.exp();
      complex9.subtract(complex5);
      complex0.isNaN();
      complex5.equals(complex8);
      complex7.createComplex(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.NaN.sinh();
      complex0.I.cos();
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex2.I.divide(complex0);
      complex0.readResolve();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3050.00134005514);
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.exp();
      complex2.NaN.negate();
      Complex complex3 = complex1.multiply(3050.00134005514);
      Complex complex4 = complex0.ONE.acos();
      complex3.isInfinite();
      complex0.getImaginary();
      complex0.INF.toString();
      Complex complex5 = complex0.subtract(2277.89322);
      complex5.I.getField();
      complex5.hashCode();
      Complex complex6 = complex4.sqrt();
      complex3.isNaN();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(1);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.sqrt1z();
      complex1.conjugate();
      complex2.ONE.getArgument();
      complex2.nthRoot(198);
      complex2.getField();
      complex2.acos();
      complex1.negate();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      complex0.I.abs();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex3.ZERO.tanh();
      complex3.NaN.hashCode();
      complex4.ZERO.tan();
      complex3.ONE.reciprocal();
      Complex complex5 = complex3.NaN.sqrt();
      complex3.ONE.readResolve();
      complex0.getReal();
      complex5.isInfinite();
      complex0.multiply(complex1);
      complex5.readResolve();
      complex5.negate();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2035.54485834591));
      complex1.asin();
      Complex complex2 = complex1.add((-2693.68174047));
      Complex complex3 = complex2.NaN.exp();
      complex2.ONE.createComplex((-2693.68174047), 2814.4112);
      Complex complex4 = complex2.multiply((-2035.54485834591));
      complex4.abs();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.asin();
      Complex.valueOf(3308.5, 0.0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = Complex.valueOf(2.433986351722258E-112, 2.433986351722258E-112);
      complex2.I.toString();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.negate();
      complex4.NaN.log();
      complex5.getArgument();
      complex4.I.conjugate();
      Complex.valueOf(211.988414, 0.0);
      complex5.add(complex4);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex4.pow(complex3);
      Complex complex8 = complex7.sinh();
      Complex.valueOf(0.0, Double.NaN);
      complex8.NaN.asin();
      complex1.I.abs();
      try { 
        complex6.nthRoot((-1642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,642
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.INF.subtract(complex0);
      complex0.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.tanh();
      complex2.ZERO.hashCode();
      complex5.ZERO.atan();
      complex3.atan();
      Complex.valueOf(822.33);
      complex0.ONE.cosh();
      Complex complex6 = complex5.divide(complex2);
      complex0.hashCode();
      complex1.toString();
      Complex complex7 = complex4.log();
      Complex.valueOf(822.33);
      complex2.getImaginary();
      complex1.cosh();
      complex2.nthRoot(17);
      complex7.divide((double) 17);
      Complex complex8 = complex4.multiply(complex6);
      complex8.hashCode();
      complex6.ZERO.log();
      complex7.getField();
      complex8.getArgument();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1350.50502, 1350.50502);
      Complex complex1 = complex0.ZERO.divide(42.3295);
      Complex complex2 = complex0.log();
      complex2.ZERO.sqrt1z();
      complex2.NaN.nthRoot(1146);
      complex1.sin();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.INF.nthRoot(786);
      complex0.I.toString();
      complex0.tanh();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex0.ONE.subtract((-708.2549));
      Complex complex4 = complex1.NaN.cos();
      complex4.ZERO.tanh();
      Complex complex5 = complex2.I.log();
      complex5.multiply((-708.2549));
      complex3.I.abs();
      Complex complex6 = Complex.valueOf((-708.2549), (-210.5191352137));
      Complex complex7 = complex0.divide(complex1);
      complex7.ONE.subtract((-708.2549));
      Complex complex8 = complex7.INF.log();
      Complex complex9 = complex8.pow(complex7);
      complex9.INF.negate();
      complex8.ZERO.add(complex2);
      complex1.ONE.log();
      complex6.ONE.tan();
      complex0.conjugate();
      complex3.readResolve();
      Complex complex10 = Complex.valueOf((-3081.8932090875614), 2045.091192756745);
      complex10.I.divide(complex2);
      complex7.getImaginary();
      Complex complex11 = complex6.createComplex((-708.2549), (-708.2549));
      complex11.NaN.asin();
      Complex complex12 = complex2.add((-210.5191352137));
      complex12.atan();
      complex1.equals(complex7);
      complex5.atan();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-779.2570208484389), (-779.2570208484389));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex3.INF.subtract(0.0);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex3.INF.createComplex(0.0, 0.0);
      complex2.ONE.getField();
      complex0.getArgument();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.ONE.cos();
      complex8.ONE.multiply(complex5);
      complex8.ONE.conjugate();
      complex1.isInfinite();
      Complex.valueOf(0.0);
      Complex complex9 = complex3.createComplex(0.0, 0.0);
      complex0.conjugate();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.log();
      complex2.I.subtract(complex1);
      Complex complex3 = complex1.ONE.divide(Double.NaN);
      Complex complex4 = complex0.add(complex1);
      Complex complex5 = complex1.add(complex0);
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = complex6.ONE.exp();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex5.tan();
      Complex complex9 = complex5.cos();
      Complex complex10 = complex9.sqrt();
      complex1.equals(complex10);
      complex10.isInfinite();
      Complex complex11 = complex0.add(2490.0);
      complex9.sqrt1z();
      complex3.readResolve();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex10.pow(complex12);
      Complex complex14 = complex13.ZERO.atan();
      assertEquals(0.0, complex14.getReal(), 0.01);
      
      complex11.getReal();
      complex9.multiply(1);
      Complex complex15 = complex8.divide(complex4);
      Complex complex16 = complex12.sqrt1z();
      Complex complex17 = complex16.ONE.pow(complex9);
      Complex complex18 = complex8.multiply(complex15);
      complex18.NaN.exp();
      assertSame(complex8, complex6);
      
      Complex complex19 = complex5.subtract(Double.NaN);
      assertSame(complex19, complex11);
      
      Complex complex20 = complex12.exp();
      complex20.multiply(complex2);
      assertFalse(complex2.equals((Object)complex14));
      
      boolean boolean0 = complex16.isNaN();
      assertSame(complex16, complex17);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.createComplex(1.2518336772918701, 1.2518336772918701);
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex1.ZERO.atan();
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex1.INF.conjugate();
      Complex complex5 = complex4.ZERO.cosh();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.ZERO.multiply((-304));
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      List<Complex> list0 = complex1.ZERO.nthRoot(1739);
      assertEquals(1739, list0.size());
      
      Complex complex7 = complex0.acos();
      complex0.INF.readResolve();
      Complex complex8 = complex0.createComplex((-750.621), (-1.0));
      Complex complex9 = complex8.sqrt();
      complex8.isInfinite();
      complex0.getArgument();
      complex9.multiply((-0.26160912104));
      assertEquals(0.018249860654033584, complex9.getReal(), 0.01);
      assertEquals((-27.39746946448547), complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex7.add((-1.0));
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex2.exp();
      Complex complex12 = complex11.acos();
      assertTrue(complex12.equals((Object)complex3));
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = complex1.pow(5591.42051163);
      assertTrue(complex0.equals((Object)complex6));
      assertTrue(complex13.equals((Object)complex4));
      assertTrue(complex13.isInfinite());
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1350.0), (-1350.0));
      Complex complex1 = complex0.I.divide(2.0);
      complex0.isInfinite();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.INF.pow(complex0);
      assertTrue(complex3.isNaN());
      
      Complex complex4 = complex2.atan();
      assertEquals(0.7853981633974483, complex4.getReal(), 0.01);
      assertEquals(0.2611190516392201, complex4.getImaginary(), 0.01);
      
      double double0 = complex2.getArgument();
      assertEquals((-1350.0), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.5, double0, 0.01);
  }
}
