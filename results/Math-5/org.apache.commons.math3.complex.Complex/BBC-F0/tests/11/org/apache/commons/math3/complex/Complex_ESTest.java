/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:43:08 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.3069802481237792E-8);
      Complex complex1 = new Complex(0.0);
      complex1.pow(1.3069802481237792E-8);
      Complex complex2 = complex0.multiply(1.3069802481237792E-8);
      Complex complex3 = Complex.INF;
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      complex2.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.2988535295611824E247);
      complex1.multiply((-1));
      Complex complex2 = complex1.sqrt1z();
      complex2.multiply(1.2988535295611824E247);
      Complex complex3 = complex0.tan();
      try { 
        complex3.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.2988535295611824E247);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.negate();
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.3069802481237792E-8);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.exp();
      complex1.conjugate();
      complex1.tan();
      complex1.getField();
      Complex complex3 = complex1.asin();
      complex3.abs();
      complex2.toString();
      Complex.valueOf(1.5707963267948966, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(1.2988535295611824E247);
      Complex complex2 = complex1.multiply(0);
      complex2.NaN.sinh();
      Complex complex3 = complex1.multiply((-1));
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = new Complex(Double.NaN);
      complex5.getArgument();
      complex4.multiply(17);
      Complex complex6 = complex3.tan();
      complex0.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      complex3.multiply(Double.NaN);
      complex4.reciprocal();
      complex5.tan();
      complex6.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.asin();
      Complex complex1 = complex0.tan();
      Object object0 = complex1.readResolve();
      complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sinh();
      complex3.ZERO.readResolve();
      Complex complex4 = complex2.NaN.log();
      Complex complex5 = complex3.I.pow(0.5734702348709106);
      complex5.INF.negate();
      complex2.multiply(17);
      Complex complex6 = complex2.multiply(17);
      Complex complex7 = complex0.multiply(0.5734702348709106);
      complex4.sqrt1z();
      complex0.getArgument();
      complex1.multiply((-2886));
      Complex complex8 = Complex.NaN;
      complex5.readResolve();
      complex7.equals(complex6);
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(2162.56877491529, 1619.62743888);
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.createComplex(1619.62743888, 2162.56877491529);
      Complex complex4 = complex2.log();
      complex0.getArgument();
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex4.multiply((-2146940366));
      Complex complex7 = complex4.asin();
      Complex complex8 = complex6.add(91.2305);
      Complex complex9 = complex4.log();
      complex4.sqrt();
      Complex complex10 = complex8.negate();
      Complex complex11 = complex5.reciprocal();
      complex1.subtract(Double.POSITIVE_INFINITY);
      complex10.tanh();
      Complex.valueOf(1619.62743888, (-1287.398835478));
      complex1.getArgument();
      complex0.subtract(91.2305);
      Complex complex12 = Complex.NaN;
      complex12.sin();
      complex11.multiply(20.0);
      complex10.toString();
      complex7.multiply(complex9);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1748.436093101));
      complex0.I.getArgument();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.5707963267948966);
      Complex complex4 = complex3.tanh();
      complex3.multiply(complex1);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex3.NaN.sin();
      complex5.conjugate();
      Object object0 = complex3.readResolve();
      ((Complex) object0).INF.atan();
      Complex complex7 = complex0.exp();
      complex5.readResolve();
      complex2.getField();
      complex7.getReal();
      complex4.reciprocal();
      Complex complex8 = complex3.divide(1.3937096689052236E65);
      complex1.asin();
      complex6.multiply(525);
      complex8.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.atan();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.createComplex(2.51946651720982E81, (-1748.436093101));
      complex6.log();
      Complex complex7 = complex4.multiply(2449.8401);
      Complex complex8 = Complex.NaN;
      complex8.isInfinite();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex3.multiply((-1368));
      Complex complex11 = complex5.createComplex(2.51946651720982E81, 2449.8401);
      Complex complex12 = complex10.pow(complex8);
      complex7.negate();
      complex2.sqrt();
      complex12.abs();
      complex10.reciprocal();
      complex9.cosh();
      complex0.pow((-1202.301783));
      complex3.conjugate();
      complex9.multiply(complex11);
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1.0);
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex2.multiply((-1));
      Complex complex4 = complex3.NaN.multiply(1.0);
      complex4.isNaN();
      complex2.sin();
      complex0.getReal();
      Complex complex5 = complex1.tan();
      complex0.tan();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = new Complex((-1863.2250364), 974.6971681);
      complex1.sinh();
      Complex complex8 = new Complex((-275.90426731), 1773.015);
      Complex complex9 = complex2.tan();
      Complex complex10 = Complex.NaN;
      complex10.multiply(complex9);
      complex7.sin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.getArgument();
      complex5.sqrt();
      Complex.valueOf(298.8684892321);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.pow(873.473);
      complex1.negate();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.divide(873.473);
      Complex complex5 = complex3.log();
      Complex complex6 = complex1.sinh();
      complex6.toString();
      complex4.subtract(2.0);
      complex5.isNaN();
      complex3.isNaN();
      Complex complex7 = complex2.sin();
      complex1.getReal();
      Complex complex8 = complex7.tan();
      complex2.tan();
      complex2.getReal();
      complex3.reciprocal();
      complex5.sinh();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.tan();
      Complex complex10 = complex4.multiply(complex8);
      complex3.sin();
      Complex.valueOf(873.473);
      complex10.getArgument();
      Complex complex11 = Complex.I;
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(2162.56877491529, 1619.62743888);
      complex0.ONE.negate();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.createComplex(2162.56877491529, 2162.56877491529);
      Complex complex3 = complex2.INF.log();
      complex3.ONE.getArgument();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.NaN.multiply((-2146940366));
      Complex complex6 = complex0.asin();
      complex6.add((double) (-2146940366));
      Complex complex7 = Complex.valueOf((double) (-2146940366));
      Complex complex8 = Complex.valueOf((-1.0000000000000004));
      Complex complex9 = complex4.multiply(1279);
      Complex complex10 = complex0.conjugate();
      complex1.equals((Object) null);
      complex7.sin();
      complex8.atan();
      complex6.nthRoot(1279);
      complex5.divide(1554.4545638530037);
      complex10.getReal();
      complex9.toString();
      Complex complex11 = new Complex(9.848636053777669E237);
      complex11.sqrt1z();
      complex2.add(complex9);
      Complex complex12 = Complex.I;
      complex12.pow(20.0);
      complex9.hashCode();
      complex12.getArgument();
      complex8.add(complex12);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.divide(0.5882205963134766);
      complex0.divide(3951.8);
      Complex complex4 = complex2.log();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex2.tan();
      complex6.getField();
      Complex complex8 = complex3.tanh();
      complex0.sinh();
      complex8.readResolve();
      Complex complex9 = complex7.acos();
      complex4.reciprocal();
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY);
      complex10.tan();
      complex9.pow((-3133.22059313));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1748.436093101));
      complex0.I.getArgument();
      Complex complex2 = complex1.ZERO.atan();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.5707963267948966);
      Complex complex4 = complex3.tanh();
      complex3.multiply(complex1);
      Complex complex5 = complex4.sinh();
      complex3.NaN.sin();
      Complex complex6 = complex3.pow(complex1);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = complex7.add(complex5);
      Complex complex9 = (Complex)complex3.readResolve();
      Complex complex10 = complex0.exp();
      Complex complex11 = (Complex)complex5.readResolve();
      complex2.getField();
      complex10.getReal();
      complex4.reciprocal();
      complex3.divide(1.3937096689052236E65);
      complex1.sinh();
      complex6.tan();
      complex9.tanh();
      complex5.acos();
      complex10.subtract(9.252840189663807E-148);
      Complex complex12 = complex8.createComplex(1.5707963267948966, 142.68);
      complex12.exp();
      complex11.subtract(2013.3);
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY, 1108.0);
      complex13.acos();
      Complex.valueOf(1.3937096689052236E65, (-256.0292566852));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(2162.56877491529, 1619.62743888);
      Complex complex1 = complex0.ONE.negate();
      complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(1.3937096689052236E65, (-2061.0522054288));
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex0.sinh();
      complex5.sin();
      Complex complex6 = Complex.valueOf(0.5403023058681398, (-1156.8497217613112));
      Complex complex7 = complex1.pow(complex6);
      Complex complex8 = Complex.valueOf(0.5403023058681398, 2162.56877491529);
      complex8.conjugate();
      Complex complex9 = complex0.add(complex7);
      complex2.readResolve();
      Complex complex10 = complex2.exp();
      complex10.readResolve();
      complex9.getField();
      complex4.getReal();
      Complex complex11 = complex8.reciprocal();
      Complex complex12 = complex9.divide((-990.48927));
      complex2.sinh();
      complex10.tan();
      complex5.multiply(complex1);
      complex11.sin();
      Complex.valueOf(2.0);
      complex8.getArgument();
      complex12.sqrt();
      complex3.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      complex0.multiply((-1.3961804471714283E-8));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(1455);
      Complex complex3 = Complex.valueOf(1348.15393548516);
      complex3.multiply((-1));
      Complex complex4 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.sqrt1z();
      complex4.getArgument();
      Complex complex6 = Complex.INF;
      complex6.multiply(663);
      Complex complex7 = complex5.tan();
      complex4.readResolve();
      complex1.equals(complex7);
      complex7.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.getField();
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex1.multiply((-1776));
      Complex complex4 = complex3.multiply((double) (-1));
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = Complex.valueOf((-1637.574), 1791.3798435);
      complex6.getArgument();
      complex5.multiply((-1073741824));
      complex2.tan();
      complex0.equals(complex4);
      complex1.conjugate();
      complex6.toString();
      complex1.createComplex((-699.6), (-1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      complex2.NaN.log();
      Complex complex5 = complex3.I.pow(1.5894502760862044);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex5.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.NaN.divide(2.0);
      complex8.ZERO.log();
      Complex complex9 = complex7.I.sinh();
      complex5.ONE.toString();
      complex2.I.subtract(Double.POSITIVE_INFINITY);
      complex6.isNaN();
      complex8.isNaN();
      complex8.sin();
      complex3.getReal();
      complex2.tan();
      complex7.tan();
      complex2.getReal();
      Complex complex10 = complex8.reciprocal();
      complex4.divide(Double.NaN);
      complex10.sinh();
      Complex complex11 = new Complex((-2657.64445062), Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.tan();
      complex1.multiply(complex5);
      complex12.sin();
      Complex.valueOf((-1823.6073752617754));
      complex9.getArgument();
      complex11.exp();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.tanh();
      complex2.pow(Double.NaN);
      complex0.cos();
      complex0.NaN.hashCode();
      Complex complex3 = Complex.valueOf((-371.436));
      Complex complex4 = complex3.multiply(2900);
      complex1.conjugate();
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex5 = complex1.sin();
      complex1.atan();
      complex4.nthRoot(2900);
      complex3.divide(Double.NaN);
      complex5.getReal();
      Complex complex6 = Complex.I;
      complex6.toString();
      complex5.sqrt1z();
      Complex complex7 = complex4.add(complex3);
      complex5.pow(Double.NaN);
      complex6.hashCode();
      complex7.getArgument();
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = Complex.INF;
      complex1.I.add(154.95987770816532);
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.atan();
      complex6.ZERO.getField();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex1.INF.tanh();
      Complex complex9 = complex1.multiply(complex6);
      Complex complex10 = complex6.sinh();
      complex9.ONE.pow(complex0);
      Complex complex11 = complex7.I.conjugate();
      Complex complex12 = complex10.NaN.add(complex3);
      complex9.readResolve();
      complex12.exp();
      complex7.readResolve();
      complex8.getField();
      complex6.getReal();
      complex4.reciprocal();
      complex11.divide(154.95987770816532);
      Complex complex13 = complex3.sinh();
      complex13.I.tan();
      Complex.valueOf(995.053, 0.0);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(23.159739097795097, 23.159739097795097);
      Complex complex1 = Complex.ZERO;
      complex0.readResolve();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.reciprocal();
      complex2.reciprocal();
      complex3.tan();
      complex0.pow((double) 7);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex1.I.add(154.95987770816532);
      Complex complex4 = complex0.INF.conjugate();
      complex4.ONE.cos();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.atan();
      complex6.ZERO.getField();
      Complex complex7 = complex4.subtract(complex6);
      Complex complex8 = complex2.asin();
      Complex complex9 = complex3.add(0.0);
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.pow(complex3);
      complex8.atan();
      complex7.readResolve();
      complex7.tanh();
      complex10.negate();
      Complex.valueOf(154.95987770816532, 154.95987770816532);
      complex9.acos();
      complex3.cosh();
      try { 
        complex11.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.subtract(complex0);
      Complex complex7 = complex0.ONE.acos();
      Complex complex8 = complex6.ONE.add(complex2);
      complex8.ONE.atan();
      Complex complex9 = complex2.subtract(2.0);
      Complex complex10 = complex9.negate();
      Complex complex11 = complex1.multiply(complex0);
      Complex complex12 = complex11.NaN.reciprocal();
      Complex complex13 = complex12.I.add(complex6);
      complex0.NaN.log();
      Complex complex14 = complex10.subtract((-168.657142671));
      Complex complex15 = complex5.pow(complex10);
      complex15.sinh();
      complex15.INF.toString();
      complex14.cos();
      complex9.sinh();
      complex15.pow(complex14);
      complex14.reciprocal();
      Complex complex16 = complex6.pow((-168.657142671));
      complex16.cosh();
      complex8.acos();
      complex13.add(complex7);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-295.172167), (-295.172167));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = Complex.valueOf((-295.172167), (-295.172167));
      Complex complex3 = complex0.INF.tanh();
      complex3.INF.getArgument();
      complex2.sin();
      Complex complex4 = complex1.ONE.cos();
      complex1.ZERO.abs();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex0.tan();
      Complex complex7 = Complex.valueOf(2.0619101524353027, (-295.172167));
      Complex complex8 = complex1.sin();
      Complex complex9 = complex5.multiply(2047);
      Complex complex10 = complex8.ZERO.subtract(0.7853981633974483);
      complex9.subtract(complex2);
      complex1.readResolve();
      Complex complex11 = complex5.cos();
      complex0.tanh();
      complex5.subtract(0.0);
      complex8.add(4178.873863);
      complex7.multiply(2.0619101524353027);
      Complex complex12 = complex6.pow(complex11);
      complex10.sqrt1z();
      complex12.divide((-452.3));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(1.0);
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex2.multiply((-1));
      Complex complex4 = complex3.NaN.multiply(1.0);
      complex4.I.sqrt1z();
      complex3.I.getArgument();
      Complex complex5 = complex3.multiply((-1));
      complex5.I.tan();
      Object object0 = complex3.readResolve();
      complex5.equals(object0);
      Complex complex6 = complex1.conjugate();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.NaN.nthRoot(1);
      Complex complex3 = Complex.valueOf(20.0);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.valueOf(20.0, 638.3721145333975);
      Complex complex6 = complex5.cosh();
      complex4.getField();
      Complex complex7 = complex6.subtract(20.0);
      Complex complex8 = Complex.valueOf(20.0);
      complex0.readResolve();
      complex5.sqrt1z();
      complex7.cos();
      Complex complex9 = complex7.reciprocal();
      complex2.isNaN();
      complex8.conjugate();
      Complex.valueOf(638.3721145333975);
      complex3.tan();
      complex9.tanh();
      Complex.valueOf(1515.7939281);
      Complex complex10 = Complex.valueOf(1272.035701916, (-0.9999998583772556));
      complex10.asin();
      complex4.toString();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.I.add(191.85303571198705);
      Complex complex3 = complex0.INF.conjugate();
      complex3.ONE.cos();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.atan();
      complex5.ZERO.getField();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.3937096689052236E65);
      Complex complex7 = complex1.INF.tanh();
      Complex complex8 = complex1.multiply(complex5);
      Complex complex9 = complex5.sinh();
      complex8.ONE.pow(complex0);
      Complex complex10 = complex6.I.conjugate();
      Complex complex11 = complex9.NaN.add(complex3);
      complex8.readResolve();
      complex2.add(191.85303571198705);
      Complex complex12 = complex11.exp();
      complex6.readResolve();
      complex7.getField();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex10.atan();
      complex12.getReal();
      Complex complex15 = new Complex(2045.4125669413);
      complex1.add(complex15);
      Complex complex16 = complex14.negate();
      Complex complex17 = complex9.cosh();
      Complex complex18 = Complex.INF;
      complex18.tanh();
      Complex complex19 = complex13.sin();
      complex19.sin();
      complex17.createComplex((-817.1606826), 0.29233678332516055);
      complex16.atan();
      complex15.negate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      complex2.NaN.log();
      Complex complex5 = complex3.I.pow(0.5734702348709106);
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex5.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.NaN.divide(2.0);
      complex8.ZERO.log();
      Complex complex9 = complex7.I.sinh();
      complex5.ONE.toString();
      complex2.I.subtract(Double.POSITIVE_INFINITY);
      complex6.isNaN();
      complex8.isNaN();
      complex8.sin();
      complex3.getReal();
      complex2.tan();
      complex7.tan();
      complex2.getReal();
      Complex complex10 = complex8.reciprocal();
      complex4.divide(Double.NaN);
      complex10.sinh();
      Complex complex11 = new Complex((-2657.64445062), Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.tan();
      complex1.multiply(complex5);
      complex12.sin();
      Complex.valueOf((-1823.6073752617754));
      complex9.getArgument();
      complex11.exp();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 2.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex4.conjugate();
      Complex complex7 = complex4.add(complex5);
      complex6.readResolve();
      complex1.add(2.0);
      Complex complex8 = complex7.exp();
      complex2.readResolve();
      complex8.getField();
      Complex complex9 = new Complex((-303.089));
      complex9.tan();
      complex8.getReal();
      Complex complex10 = complex4.reciprocal();
      complex9.divide(2.0);
      Complex complex11 = complex7.sinh();
      complex10.tan();
      complex6.multiply(complex0);
      complex0.sin();
      Complex.valueOf((-1895.4855332333));
      complex11.getArgument();
      Complex complex12 = Complex.NaN;
      complex12.exp();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      complex1.INF.reciprocal();
      complex1.I.add(154.95987770816532);
      Complex complex2 = complex0.INF.conjugate();
      complex2.ONE.cos();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.atan();
      complex4.ZERO.getField();
      Complex complex5 = new Complex(1.3937096689052236E65, 1.3937096689052236E65);
      Complex complex6 = new Complex(0.9799134227283257, Double.POSITIVE_INFINITY);
      complex6.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(3757.92821);
      complex0.nthRoot(875);
      Complex complex1 = complex0.tanh();
      complex1.ONE.getField();
      Complex complex2 = complex1.createComplex(3757.92821, 875);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex2.ONE.acos();
      complex4.ONE.divide((double) 875);
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.NaN.tan();
      complex0.pow(complex3);
      Complex complex7 = complex6.sin();
      complex2.pow((double) 875);
      complex6.log();
      complex7.toString();
      complex4.divide((-20.0));
      Complex complex8 = complex2.multiply(875);
      complex4.toString();
      complex8.equals(complex2);
      complex1.reciprocal();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sinh();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      Complex complex5 = complex2.NaN.log();
      Complex complex6 = complex3.I.pow(0.5734702348709106);
      complex4.add(2177.43);
      Complex complex7 = complex5.pow(complex1);
      complex3.atan();
      complex1.readResolve();
      complex3.tanh();
      Complex complex8 = Complex.valueOf(2177.43);
      complex8.negate();
      complex4.subtract(0.0);
      Complex complex9 = complex3.acos();
      complex4.cosh();
      complex9.sqrt();
      complex6.cos();
      Complex complex10 = complex7.sinh();
      complex1.tan();
      complex6.sqrt1z();
      complex10.tanh();
      complex8.toString();
      int int0 = (-4732);
      Complex complex11 = Complex.valueOf(1221.2634464314956, (double) (-4732));
      try { 
        complex11.nthRoot((-4732));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,732
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sinh();
      complex0.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.pow((-1369.5968423));
      Complex complex5 = complex4.negate();
      Complex complex6 = complex0.divide((-1369.5968423));
      Complex complex7 = complex1.divide(2.0);
      Complex complex8 = Complex.valueOf(2211.33093099, (-616.0));
      Complex complex9 = complex8.log();
      Complex complex10 = complex3.sinh();
      complex9.toString();
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex7.isInfinite();
      complex5.isNaN();
      complex10.sin();
      complex10.getReal();
      complex6.tan();
      complex1.tan();
      Complex complex11 = complex1.atan();
      complex9.getReal();
      Complex complex12 = complex6.add(complex9);
      complex9.negate();
      Complex complex13 = complex11.cosh();
      complex5.tanh();
      complex4.sin();
      complex13.sin();
      complex11.createComplex(2.0, 9.453598391231829E-8);
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1748.436093101));
      Complex complex2 = complex0.add(816.8438213849879);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.subtract(complex1);
      Complex complex7 = complex2.subtract(complex3);
      Complex complex8 = complex2.exp();
      complex6.getReal();
      complex5.reciprocal();
      Complex complex9 = complex4.sinh();
      complex5.getField();
      complex7.pow(complex6);
      Complex complex10 = complex4.pow(0.48670899868011475);
      Complex complex11 = complex4.cos();
      Complex complex12 = Complex.ZERO;
      complex12.pow(complex3);
      complex1.sin();
      complex0.pow((-198.395005170547));
      complex11.log();
      Complex complex13 = Complex.I;
      complex13.toString();
      Complex complex14 = complex7.divide(9.219544613762692E-9);
      complex4.multiply(0);
      complex9.toString();
      complex8.equals(complex10);
      complex9.reciprocal();
      complex14.isInfinite();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 1102.6040271414843;
      Complex complex0 = new Complex(1102.6040271414843);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.getArgument();
      complex0.atan();
      complex2.subtract(complex1);
      Complex complex3 = Complex.INF;
      complex3.asin();
      complex1.add(Double.NaN);
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.cos();
      complex1.sinh();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.sqrt1z();
      complex2.tanh();
      complex0.toString();
      Complex complex5 = Complex.valueOf((double) (-4732), 0.5480755859418556);
      complex5.nthRoot(680);
      Complex complex6 = complex3.log();
      complex5.hashCode();
      complex4.multiply((-2642));
      complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      Complex complex1 = complex0.tan();
      complex1.readResolve();
      Complex complex2 = complex0.INF.divide(6.283185307179586);
      Complex complex3 = complex1.I.cosh();
      complex2.readResolve();
      complex0.getReal();
      complex1.hashCode();
      Complex complex4 = complex3.ONE.sin();
      complex4.ONE.pow(0.0);
      Complex complex5 = complex1.subtract(complex0);
      complex5.NaN.nthRoot(974);
      Complex complex6 = complex1.divide(complex3);
      complex6.exp();
      complex0.I.subtract(0.0);
      complex0.pow(complex3);
      complex3.subtract(0.0);
      complex2.asin();
      Complex complex7 = Complex.valueOf(1.0);
      complex7.I.multiply(0);
      Complex.valueOf((double) 974, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(1102.6040271414843);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.ZERO.add(1102.6040271414843);
      Complex complex4 = complex0.NaN.negate();
      Complex complex5 = complex0.NaN.add(complex4);
      Complex complex6 = complex5.I.asin();
      Complex complex7 = complex6.ZERO.subtract(complex4);
      complex7.subtract(complex6);
      Complex complex8 = complex6.exp();
      complex0.getReal();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex2.sinh();
      complex9.getField();
      complex3.pow(complex2);
      Complex complex11 = complex3.pow((-198.395005170547));
      Complex complex12 = complex2.cos();
      complex11.pow(complex12);
      Complex complex13 = complex1.sin();
      complex9.pow((-20.0));
      Complex complex14 = complex8.log();
      complex14.toString();
      Complex complex15 = complex13.divide(1.1254286766052246);
      Complex complex16 = complex15.multiply(0);
      complex16.NaN.toString();
      complex10.equals(complex7);
      complex16.reciprocal();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1436.352));
      Complex complex1 = complex0.conjugate();
      complex1.INF.toString();
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.ONE.sqrt1z();
      complex3.INF.sin();
      complex3.INF.multiply(complex0);
      Complex complex4 = complex2.add((-3951.8));
      complex4.cosh();
      Complex complex5 = complex0.conjugate();
      complex4.ZERO.sinh();
      complex4.NaN.getArgument();
      complex5.isNaN();
      complex5.I.add(3539.632);
      Complex complex6 = complex0.sqrt();
      complex6.INF.divide(complex4);
      Complex complex7 = complex5.sqrt();
      complex7.ZERO.sinh();
      Complex complex8 = complex7.asin();
      complex8.hashCode();
      complex0.I.subtract(complex7);
      complex8.INF.abs();
      complex7.negate();
      Complex complex9 = complex2.sin();
      complex9.ZERO.reciprocal();
      complex0.cosh();
      Complex complex10 = complex9.tan();
      complex9.hashCode();
      complex9.getArgument();
      Complex complex11 = complex10.sqrt1z();
      complex6.sqrt();
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = (-2642);
      Complex complex1 = complex0.multiply((-2642));
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.conjugate();
      complex3.I.hashCode();
      Complex complex4 = complex1.add((double) (-2642));
      Complex complex5 = complex2.pow(complex4);
      complex5.ZERO.toString();
      complex1.isNaN();
      complex1.readResolve();
      Complex complex6 = complex4.INF.multiply(102.4169344603);
      complex3.multiply(102.4169344603);
      complex6.I.acos();
      double double0 = 0.0;
      Complex complex7 = Complex.valueOf(0.0);
      complex7.NaN.multiply(2900);
      complex7.INF.conjugate();
      complex4.equals(complex7);
      complex1.NaN.sin();
      complex2.atan();
      try { 
        complex5.nthRoot((-2642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,642
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      complex1.INF.reciprocal();
      Complex complex2 = complex1.I.add(154.95987770816532);
      Complex complex3 = complex0.INF.conjugate();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.atan();
      complex6.ZERO.getField();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.3937096689052236E65);
      Complex complex8 = complex1.INF.tanh();
      Complex complex9 = complex1.multiply(complex6);
      Complex complex10 = complex6.sinh();
      Complex complex11 = complex9.ONE.pow(complex0);
      Complex complex12 = complex7.I.conjugate();
      Complex complex13 = complex10.NaN.add(complex3);
      complex9.readResolve();
      complex2.add(154.95987770816532);
      Complex complex14 = complex13.exp();
      complex7.readResolve();
      complex8.getField();
      Complex complex15 = complex12.tan();
      complex6.getReal();
      complex4.reciprocal();
      complex12.divide(154.95987770816532);
      Complex complex16 = complex15.sinh();
      complex16.I.tan();
      complex16.ZERO.multiply(complex14);
      complex13.sin();
      Complex.valueOf((-1823.6073752617754));
      complex13.getArgument();
      complex5.exp();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      complex0.readResolve();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.I.multiply(complex2);
      Complex complex6 = complex1.cosh();
      Complex complex7 = complex3.sqrt();
      complex7.INF.hashCode();
      Complex complex8 = complex6.ZERO.divide(complex2);
      Complex complex9 = complex8.NaN.sqrt1z();
      Complex complex10 = complex1.INF.sinh();
      Complex complex11 = complex10.ZERO.divide(complex2);
      Complex complex12 = Complex.valueOf(0.0);
      complex3.INF.add(0.0);
      Complex complex13 = complex12.INF.sqrt();
      complex13.INF.cos();
      complex13.INF.subtract(complex0);
      complex13.INF.multiply((-257));
      Complex complex14 = complex5.sqrt1z();
      Complex complex15 = complex0.I.acos();
      complex15.INF.multiply(complex5);
      Complex complex16 = complex14.ONE.tan();
      complex3.getImaginary();
      Complex complex17 = complex0.exp();
      complex17.INF.pow(complex16);
      complex9.tanh();
      complex17.reciprocal();
      complex12.getArgument();
      complex11.readResolve();
      complex4.atan();
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.asin();
      complex2.ONE.tanh();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex4.INF.divide(1804.8677);
      complex5.ONE.cosh();
      complex4.NaN.toString();
      complex0.getReal();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.ZERO.acos();
      complex6.NaN.readResolve();
      Complex.valueOf((-8.330969967504819E-260), 1804.8677);
      Complex complex8 = complex4.log();
      Complex complex9 = complex8.INF.tan();
      Complex complex10 = new Complex((-3687.50182256037));
      complex10.INF.pow(516.78001);
      complex10.ONE.getArgument();
      complex1.equals(complex10);
      complex10.exp();
      complex6.getReal();
      complex2.multiply(6);
      Complex complex11 = complex0.pow(complex7);
      complex11.I.exp();
      complex5.acos();
      complex2.atan();
      complex9.cos();
      Complex.valueOf((-1651.352946), 1804.8677);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(997.270263);
      Complex complex1 = Complex.valueOf(997.270263);
      complex1.INF.createComplex(997.270263, (-1146.2245446200113));
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex0.ONE.divide(complex1);
      complex0.abs();
      complex1.getReal();
      Complex complex5 = complex1.INF.asin();
      complex5.INF.sqrt();
      complex5.NaN.subtract(0.0);
      complex1.cos();
      Complex complex6 = complex1.acos();
      complex6.I.negate();
      complex3.hashCode();
      complex4.conjugate();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      complex1.ONE.divide(complex0);
      Complex complex2 = complex1.atan();
      complex2.toString();
      complex1.readResolve();
      complex1.sqrt();
      complex2.getArgument();
      complex1.nthRoot(2017);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex2.NaN.hashCode();
      Complex complex3 = complex0.INF.multiply(1890.6725174274);
      complex3.I.getField();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.multiply(0);
      Complex complex6 = complex5.pow(1890.6725174274);
      complex6.readResolve();
      complex4.pow(1890.6725174274);
      complex1.hashCode();
      complex1.getReal();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(971.5345888);
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.ONE.asin();
      Complex complex2 = complex1.NaN.atan();
      complex0.createComplex(971.5345888, 0.0);
      Complex complex3 = complex1.I.log();
      complex2.ZERO.multiply(0.0);
      complex1.isInfinite();
      Complex complex4 = complex1.tanh();
      complex4.I.multiply((-1368));
      complex4.ONE.createComplex(971.5345888, 0.0);
      complex2.ZERO.pow(complex3);
      Complex complex5 = complex2.negate();
      complex3.sqrt();
      complex5.abs();
      complex5.reciprocal();
      Complex complex6 = complex3.cosh();
      complex6.ZERO.pow(Double.NaN);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.divide(complex2);
      complex1.I.subtract(complex3);
      Complex complex5 = complex4.INF.atan();
      complex5.INF.getArgument();
      Complex complex6 = complex0.subtract(complex2);
      complex6.INF.acos();
      Complex complex7 = complex4.multiply((-162));
      complex7.ZERO.cos();
      complex7.sinh();
      Complex complex8 = Complex.valueOf((double) (-162));
      complex8.ONE.negate();
      complex4.getReal();
      Complex complex9 = Complex.valueOf(0.7853981633974483, 0.7853981633974483);
      complex9.conjugate();
      complex5.subtract(407.5339684705);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.sqrt();
      Complex complex1 = complex0.sin();
      complex1.NaN.multiply(complex0);
      Complex complex2 = complex0.multiply((-2371));
      complex0.INF.log();
      complex2.ONE.pow((-1.602000800745108E-9));
      complex2.multiply(1688.74341857877);
      complex2.isNaN();
      complex0.toString();
      complex2.createComplex((-1.602000800745108E-9), (-1.602000800745108E-9));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.abs();
      complex0.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.createComplex(0.0, 1.0);
      complex2.ZERO.getArgument();
      complex0.ONE.readResolve();
      complex1.getArgument();
      complex1.isNaN();
      Complex complex3 = complex0.multiply((-5347));
      Complex complex4 = complex3.subtract(complex2);
      complex4.INF.getField();
      Complex complex5 = complex4.sinh();
      complex5.NaN.toString();
      Complex complex6 = complex2.multiply(complex3);
      Complex complex7 = complex6.divide(1.0);
      complex7.I.toString();
      Complex complex8 = Complex.valueOf(0.0, (-20.0));
      Complex complex9 = complex3.tan();
      Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex0.NaN.exp();
      complex9.add(complex10);
      Complex complex11 = complex9.tanh();
      complex3.add(complex8);
      complex11.isNaN();
      complex11.subtract(87.7803728727);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-279.9830363930657), (-2784.2));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3757.92821);
      complex0.nthRoot(875);
      Complex complex2 = complex0.tanh();
      complex2.ONE.getField();
      Complex complex3 = complex2.createComplex(3757.92821, 875);
      complex2.cosh();
      Complex complex4 = complex3.ONE.acos();
      complex4.ONE.divide((double) 875);
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.NaN.tan();
      complex6.getField();
      complex2.tanh();
      Complex complex7 = complex3.sinh();
      complex7.INF.readResolve();
      Complex complex8 = complex7.acos();
      Complex complex9 = complex8.I.reciprocal();
      complex7.reciprocal();
      complex1.tan();
      complex9.pow(3757.92821);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.5140150088220166E-8), (-1.5140150088220166E-8));
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex3.I.divide(0.0);
      complex4.ONE.sqrt();
      complex3.I.divide((-1.5140150088220166E-8));
      Complex complex5 = complex0.cosh();
      complex5.INF.sqrt();
      complex1.ONE.sqrt1z();
      complex0.ZERO.getArgument();
      Complex complex6 = complex1.multiply((-150));
      Complex complex7 = complex1.add(169.12124268791322);
      complex7.I.reciprocal();
      complex2.sin();
      complex3.sqrt();
      complex0.tanh();
      complex0.exp();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.cos();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sinh();
      complex2.ZERO.readResolve();
      complex1.NaN.log();
      Complex complex3 = complex2.I.pow(0.5734702348709106);
      complex3.INF.negate();
      Complex complex4 = complex3.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.NaN.divide(2.0);
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex4.I.sinh();
      complex3.ONE.toString();
      complex1.I.subtract(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
      complex5.isNaN();
      complex5.sin();
      complex2.getReal();
      Complex complex8 = complex1.tan();
      Complex complex9 = complex4.tan();
      complex6.atan();
      complex0.getReal();
      Complex complex10 = complex2.add(complex1);
      complex10.negate();
      complex9.cosh();
      complex3.tanh();
      complex3.sin();
      complex2.sin();
      complex7.createComplex(2.0, (-817.1606826));
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.toString();
      complex0.INF.getField();
      complex0.I.createComplex(6.283185307179586, 6.283185307179586);
      complex0.getReal();
      complex0.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, (-896.193));
      Complex complex2 = complex0.I.pow(complex1);
      complex0.hashCode();
      Complex complex3 = complex0.add((-896.193));
      complex0.NaN.asin();
      complex3.ONE.multiply((-896.193));
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.I.atan();
      complex4.NaN.reciprocal();
      Complex complex6 = complex3.conjugate();
      complex1.NaN.abs();
      Complex complex7 = complex1.sin();
      Complex complex8 = complex2.pow(0.0);
      complex8.subtract((-896.193));
      Complex complex9 = complex5.conjugate();
      complex7.negate();
      complex0.isInfinite();
      complex1.cosh();
      complex6.divide((-1477.0719075302));
      complex9.sqrt();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.divide(complex2);
      complex0.getReal();
      complex3.NaN.sqrt1z();
      Complex complex4 = complex1.multiply(Double.POSITIVE_INFINITY);
      complex4.NaN.conjugate();
      complex3.getField();
      Complex complex5 = complex1.pow(0.0);
      Complex complex6 = complex5.ONE.createComplex(0.4228905439376831, Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex3.divide(0.0);
      complex8.I.tanh();
      complex3.I.multiply(complex6);
      complex3.INF.multiply(complex7);
      complex3.isInfinite();
      complex0.cos();
      complex3.readResolve();
      Complex.valueOf(1704.87048398875, (-1723.1843247));
      complex3.getField();
      complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.conjugate();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.I.sin();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.INF.log();
      Complex.valueOf(2649.082128798513, 2649.082128798513);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex5.ONE.conjugate();
      Complex complex7 = complex4.NaN.cosh();
      complex0.hashCode();
      Complex complex8 = complex4.sqrt();
      complex6.ONE.multiply(complex0);
      complex8.INF.conjugate();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex0.log();
      Complex complex11 = complex4.NaN.sin();
      complex11.I.getField();
      complex9.INF.divide(complex3);
      complex7.NaN.cos();
      complex9.divide(0.0);
      Complex complex12 = complex11.tanh();
      complex8.NaN.getField();
      Complex complex13 = complex1.divide(0.0);
      complex12.sinh();
      Complex complex14 = Complex.valueOf(0.0, 1653.596409264816);
      complex7.multiply(complex14);
      complex8.sqrt1z();
      complex10.getImaginary();
      complex14.getField();
      Complex complex15 = complex13.multiply(17);
      complex15.NaN.getField();
      complex5.tan();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.ONE.divide(3914.0);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.cos();
      complex4.NaN.divide((-1.0953484767704112E226));
      Complex complex5 = Complex.valueOf(95.2312433280094, 95.2312433280094);
      complex0.asin();
      complex5.atan();
      complex3.getReal();
      Complex complex6 = Complex.valueOf(Double.NaN, (-5.676200971739166E-8));
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1511.46));
      Complex complex1 = Complex.valueOf((-1511.46), (-5649.0));
      Complex complex2 = complex1.I.log();
      complex2.NaN.divide((-5649.0));
      complex0.isInfinite();
      Complex complex3 = complex0.negate();
      complex3.I.getField();
      Complex complex4 = complex0.multiply((-20.0));
      complex4.I.getField();
      Complex complex5 = complex4.add((-20.0));
      Complex complex6 = complex5.NaN.conjugate();
      complex5.INF.conjugate();
      complex6.ONE.cosh();
      complex3.ONE.tanh();
      Complex complex7 = complex0.tan();
      complex7.negate();
      complex2.multiply(complex3);
      complex6.cosh();
      complex2.atan();
      complex7.getReal();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1748.436093101));
      complex0.I.getArgument();
      complex1.ZERO.atan();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.INF.asin();
      complex3.I.add(0.0);
      Complex complex4 = complex0.pow(complex1);
      complex2.ONE.atan();
      complex4.readResolve();
      Complex complex5 = complex1.ONE.tanh();
      complex5.INF.negate();
      complex5.ZERO.subtract((-1748.436093101));
      Complex complex6 = complex4.acos();
      complex1.cosh();
      complex1.ONE.sqrt();
      Complex complex7 = complex4.cos();
      complex7.sinh();
      complex7.tan();
      complex0.sqrt1z();
      complex3.tanh();
      complex6.toString();
      int int0 = (-4732);
      try { 
        complex1.nthRoot((-4732));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,732
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.sqrt();
      complex2.divide(complex0);
      Complex.valueOf((-1863.8751));
      complex0.I.getField();
      Complex complex3 = complex0.divide(Double.NaN);
      complex0.INF.sin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.pow(complex4);
      complex5.cosh();
      Complex complex6 = Complex.NaN;
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex1.ZERO.abs();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex3.NaN.multiply(655);
      complex0.multiply(complex1);
      complex4.INF.divide((-2932.65));
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex3.ZERO.cos();
      complex6.getField();
      Complex complex7 = new Complex((-1785.64653), (-1785.64653));
      complex7.I.toString();
      Complex complex8 = complex5.divide(complex7);
      Complex complex9 = complex8.sin();
      complex3.readResolve();
      Complex complex10 = complex3.divide((double) 655);
      Complex complex11 = complex4.sin();
      Complex complex12 = complex7.NaN.exp();
      complex12.ZERO.multiply(835);
      Complex complex13 = complex11.ZERO.negate();
      complex9.ZERO.negate();
      Complex complex14 = complex2.sin();
      complex14.ONE.readResolve();
      complex3.sqrt1z();
      complex9.add(complex0);
      Complex complex15 = complex6.cos();
      complex13.multiply((double) 835);
      complex15.cos();
      complex10.createComplex(913.9, 2373.266345);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      complex0.ONE.asin();
      Complex complex1 = complex0.divide(0.3723714351654053);
      Complex complex2 = complex1.conjugate();
      complex2.ONE.divide(complex0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-77.0));
      complex0.NaN.tanh();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.log();
      complex3.ONE.readResolve();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.log();
      complex5.reciprocal();
      Complex complex6 = complex1.add(214.608);
      Complex complex7 = complex6.ONE.log();
      Complex complex8 = complex7.ZERO.multiply(1);
      complex8.acos();
      complex2.multiply(complex4);
      complex7.createComplex(5244.1058, 214.608);
      complex6.negate();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.NaN.nthRoot(1);
      Complex.valueOf((double) 1);
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex1.INF.cosh();
      complex4.I.getField();
      Complex complex5 = complex0.subtract(0.3318578004837036);
      Complex.valueOf(Double.NaN);
      complex5.readResolve();
      complex5.sqrt1z();
      complex5.cos();
      complex0.reciprocal();
      complex1.isNaN();
      complex1.conjugate();
      Complex complex6 = Complex.valueOf(2231.738656742);
      complex6.tan();
      Complex complex7 = complex0.tanh();
      Complex.valueOf((-2695.736));
      complex3.asin();
      complex5.toString();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(2814.045275, 6.818588687884566E-9);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(2814.045275);
      complex3.ZERO.divide(1.7879230976104736);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = new Complex(6.818588687884566E-9, Double.NaN);
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = Complex.ZERO;
      complex7.NaN.pow(1211.25871743);
      complex7.I.conjugate();
      complex6.ONE.add(complex7);
      Complex complex8 = complex6.ONE.pow(complex4);
      complex0.cosh();
      complex5.readResolve();
      complex1.tan();
      complex4.getArgument();
      complex8.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.log();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex complex5 = complex2.createComplex(20.0, 20.0);
      Complex complex6 = complex4.asin();
      Complex complex7 = complex3.tanh();
      complex7.ZERO.conjugate();
      Complex complex8 = complex5.sin();
      assertEquals(2.2146463048385474E8, complex8.getReal(), 0.01);
      
      Complex complex9 = complex2.sin();
      complex9.INF.atan();
      complex9.I.negate();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex9.ZERO.exp();
      Complex complex12 = complex3.subtract(complex9);
      complex9.getField();
      Complex complex13 = complex3.exp();
      complex12.toString();
      Complex complex14 = complex6.add(0.6664261817932129);
      Complex complex15 = complex12.negate();
      complex15.NaN.abs();
      complex0.divide(complex3);
      Complex complex16 = complex1.multiply(complex15);
      assertEquals(0.7615941559557649, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex17 = complex14.createComplex((-105.8502846), 20.0);
      Complex complex18 = complex17.ONE.multiply(1);
      assertTrue(complex18.equals((Object)complex11));
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertSame(complex14, complex7);
      
      Complex complex19 = complex13.pow((-105.8502846));
      assertSame(complex19, complex16);
      
      Complex complex20 = complex6.acos();
      assertNotSame(complex20, complex10);
  }
}
