/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:44:13 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow(complex2);
      complex1.sqrt();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.ZERO;
      complex3.pow(430.159233);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.multiply((-1));
      Complex complex2 = complex0.createComplex((-1040.939311541446), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.multiply(2361);
      Complex complex4 = Complex.valueOf(3983.95333348, Double.POSITIVE_INFINITY);
      complex4.multiply(complex0);
      Complex complex5 = complex3.pow(Double.POSITIVE_INFINITY);
      complex5.tanh();
      Complex.valueOf((double) 2361);
      complex0.multiply((-1));
      complex1.multiply((-2207));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tan();
      complex1.tan();
      complex1.tanh();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.ZERO.toString();
      complex1.log();
      Complex complex2 = complex1.atan();
      complex2.I.createComplex(1.812535285949707, 1.812535285949707);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(2088.0, (-1.3108606792380822E-9));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      complex2.I.abs();
      Complex complex3 = Complex.valueOf((-1.3108606792380822E-9), (-1.3108606792380822E-9));
      Complex complex4 = complex3.pow(complex1);
      complex3.exp();
      Complex complex5 = complex0.pow(2088.0);
      complex4.tan();
      complex5.add(486.48);
      Complex complex6 = new Complex(1.0, Double.NaN);
      complex6.toString();
      complex4.tanh();
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(2088.0, (-1.3108606792380822E-9));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      complex2.I.abs();
      Complex complex3 = Complex.valueOf((-1.3108606792380822E-9), (-1.3108606792380822E-9));
      Complex complex4 = complex3.pow(complex1);
      Complex.valueOf(2088.0);
      complex3.sqrt();
      complex4.sqrt();
      Complex complex5 = complex1.INF.sqrt1z();
      Complex complex6 = Complex.ZERO;
      complex1.sqrt();
      complex2.tanh();
      Complex complex7 = Complex.ZERO;
      complex5.tan();
      Complex complex8 = new Complex(2088.0, Double.POSITIVE_INFINITY);
      complex8.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex complex1 = Complex.valueOf(985.6623436560931, 333459.5625096307);
      complex1.pow(complex0);
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex1.sqrt();
      complex2.sqrt();
      complex3.sqrt1z();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex((-20.0), (-120.01166904));
      complex5.pow(0.0);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1.544673396032028E296);
      Complex complex1 = complex0.sqrt();
      complex0.subtract(1.544673396032028E296);
      Complex complex2 = complex1.sqrt();
      complex0.sqrt1z();
      complex1.tanh();
      Complex complex3 = Complex.ZERO;
      complex1.pow(1.544673396032028E296);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex.valueOf((-1550.8271), 20.0);
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.cosh();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2905.47921));
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex2.NaN.getArgument();
      Complex complex3 = complex2.NaN.multiply(complex0);
      complex0.multiply(complex1);
      complex3.NaN.readResolve();
      complex0.ONE.cosh();
      Complex complex4 = complex1.negate();
      complex4.I.conjugate();
      complex4.INF.divide(complex1);
      Complex complex5 = complex4.asin();
      complex5.I.createComplex((-497.228419782), (-2905.47921));
      complex0.reciprocal();
      Complex complex6 = complex1.log();
      complex6.sin();
      complex2.conjugate();
      complex2.asin();
      // Undeclared exception!
      complex5.nthRoot(2146455618);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      complex0.ZERO.sqrt();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(2087.9315428813134, (-1.3108606792380822E-9));
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex((-771.77441599), 7.643929162488675);
      complex2.cosh();
      Complex complex3 = Complex.valueOf(1.0000000013108608, Double.POSITIVE_INFINITY);
      complex2.tan();
      complex3.acos();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(2087.9315428813134, 2087.9315428813134);
      complex0.cos();
      Complex.valueOf(19.88509850346967);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(3666.423614778286);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-5.4826958838142734E144), (-5.4826958838142734E144));
      complex0.getField();
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(1.0611230602364477E-139);
      complex2.NaN.abs();
      complex3.tanh();
      Complex complex4 = complex2.divide(complex3);
      complex4.ONE.createComplex(Double.NaN, Double.NaN);
      Complex complex5 = complex0.tan();
      complex1.multiply(complex2);
      complex0.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-8.386923035320549E-9), (-8.386923035320549E-9));
      Complex complex1 = Complex.NaN;
      complex1.NaN.negate();
      complex1.I.atan();
      Complex complex2 = Complex.valueOf((-8.386923035320549E-9));
      Complex complex3 = complex0.ONE.divide(complex1);
      complex0.pow(6.283185307179586);
      Complex complex4 = complex2.ZERO.reciprocal();
      complex4.readResolve();
      complex0.reciprocal();
      complex2.conjugate();
      complex0.toString();
      Complex complex5 = complex3.multiply((-8.386923035320549E-9));
      Complex complex6 = complex1.negate();
      complex6.ONE.sqrt();
      Complex.valueOf((-8.386923035320549E-9));
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-1316.732473704), (-1316.732473704));
      Complex complex1 = complex0.INF.tanh();
      complex0.NaN.abs();
      Complex complex2 = complex1.add(complex0);
      complex0.nthRoot(870);
      complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      complex1.getField();
      complex1.toString();
      Complex complex4 = complex2.atan();
      complex1.getField();
      complex0.ONE.tanh();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.cos();
      Complex.valueOf(179.5);
      complex6.ONE.tan();
      Complex complex7 = complex5.I.log();
      Complex complex8 = complex3.cosh();
      complex8.pow(Double.NaN);
      complex4.sinh();
      complex0.sin();
      complex1.readResolve();
      complex7.readResolve();
      complex2.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex0.NaN.getArgument();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex1.NaN.atan();
      complex4.NaN.asin();
      Complex complex5 = complex0.sinh();
      complex5.NaN.add(complex2);
      complex0.cosh();
      complex3.subtract(Double.NaN);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.subtract(1449.62);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.add(complex0);
      complex2.abs();
      complex3.log();
      complex3.readResolve();
      Complex complex4 = Complex.ONE;
      complex4.tanh();
      complex1.readResolve();
      Complex complex5 = Complex.ZERO;
      complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 1227.9);
      complex0.readResolve();
      complex0.I.multiply(2890);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide(753.39);
      Object object0 = new Object();
      complex1.ZERO.readResolve();
      complex1.equals(object0);
      Complex.valueOf((double) 2890);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.divide((double) 2890);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.ZERO.sin();
      complex6.I.toString();
      complex2.abs();
      Complex.valueOf(820.067);
      Complex complex7 = complex2.tan();
      complex7.INF.multiply(complex1);
      complex3.equals(complex5);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ONE.add((-291.0));
      complex2.I.add(0.0);
      Complex.valueOf(Double.NaN, (-291.0));
      Complex complex3 = new Complex(Double.NaN);
      Complex complex4 = complex1.tan();
      complex4.tan();
      complex4.ZERO.hashCode();
      Complex complex5 = complex1.acos();
      complex0.pow((-1829.564));
      complex5.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
      Complex complex1 = Complex.ZERO;
      Complex.valueOf((-1598.138));
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.subtract((-891.854));
      complex2.nthRoot(868);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.getField();
      Complex complex1 = complex0.subtract(2.0);
      complex1.tanh();
      Complex complex2 = complex1.acos();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sqrt();
      complex3.ONE.sinh();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.cos();
      complex5.ONE.pow(complex4);
      complex1.getField();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex0.add(Double.POSITIVE_INFINITY);
      complex7.INF.divide(Double.POSITIVE_INFINITY);
      complex3.add(complex0);
      Complex complex8 = complex7.pow(Double.POSITIVE_INFINITY);
      complex2.INF.conjugate();
      complex8.ONE.sqrt1z();
      complex7.subtract(complex6);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.asin();
      Complex complex1 = complex0.atan();
      complex0.hashCode();
      Complex complex2 = new Complex(0.8414709848078965);
      complex1.INF.add(Double.NaN);
      complex1.getField();
      Complex.valueOf(0.8414709848078965, 0.0);
      complex1.readResolve();
      Complex complex3 = Complex.NaN;
      Object object0 = new Object();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ONE.add((-291.0));
      complex2.I.add(0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.asin();
      Complex complex6 = complex4.divide(0.0);
      complex6.sin();
      complex2.subtract(complex6);
      complex1.isNaN();
      complex1.getField();
      Complex.valueOf(4169.572595193156, (-312.0));
      complex2.readResolve();
      complex1.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.NaN.exp();
      complex3.ONE.asin();
      Complex complex6 = complex4.pow(6.283185307179586);
      complex2.readResolve();
      Complex complex7 = complex1.subtract(0.9808930158615112);
      Complex complex8 = complex7.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.multiply((-290.0));
      complex2.tan();
      complex9.hashCode();
      complex5.asin();
      complex5.getImaginary();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      complex10.divide(complex6);
      Complex.valueOf((-1357.95617));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ONE.add((-291.0));
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.I.cos();
      complex2.pow(complex6);
      complex2.multiply((-291.0));
      Complex complex9 = complex6.add((-1330.115626185));
      complex9.I.getField();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.INF.acos();
      complex3.equals(complex7);
      complex8.acos();
      complex5.log();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.negate();
      complex2.NaN.toString();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.NaN.exp();
      complex3.ONE.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.nthRoot(1375);
      complex5.toString();
      complex4.asin();
      Complex.valueOf((-309.2262677757));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2087.9315428813134, (-1.3108606792380822E-9));
      complex0.cos();
      Complex.valueOf(20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.subtract(3665.845871883566);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-213.0158), (-213.0158));
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex2.multiply(1866543885);
      Complex complex4 = complex3.ONE.multiply((double) 1866543885);
      Complex complex5 = complex3.ONE.sqrt1z();
      Complex complex6 = complex5.INF.acos();
      complex6.ZERO.cosh();
      complex6.NaN.sqrt();
      complex0.negate();
      complex1.reciprocal();
      Complex complex7 = complex0.NaN.multiply(complex2);
      complex0.ZERO.negate();
      Complex complex8 = Complex.valueOf(0.9746697040894156, Double.NaN);
      Complex complex9 = complex4.acos();
      complex7.I.hashCode();
      complex9.I.pow(complex5);
      complex9.NaN.multiply(complex1);
      Complex complex10 = complex0.cosh();
      Complex complex11 = complex4.add((-213.0158));
      complex7.INF.multiply(complex3);
      complex2.createComplex(1866543885, (-452.2034));
      complex2.nthRoot(1866543885);
      complex7.I.exp();
      complex4.I.tanh();
      Complex complex12 = complex7.subtract(1557.2804);
      complex12.pow(complex10);
      Complex complex13 = Complex.I;
      complex8.multiply(complex13);
      complex3.readResolve();
      complex11.cosh();
      complex9.multiply(complex8);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.negate();
      complex2.I.createComplex(1604.78166042, 1604.78166042);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.NaN.exp();
      complex0.asin();
      Complex complex6 = new Complex(0.0, (-1097.3378318));
      complex6.divide((-1097.3378318));
      complex0.sin();
      complex4.subtract(complex5);
      complex3.isNaN();
      complex0.getField();
      Complex complex7 = Complex.valueOf((-1097.3378318), 1077.76565);
      complex7.readResolve();
      complex3.INF.tanh();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.getField();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(2087.9315428813134, (-1.3108606792380822E-9));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.negate();
      complex2.I.abs();
      Complex.valueOf((-1.5428176644851999E35));
      Complex complex4 = complex1.pow(868.49254);
      complex2.readResolve();
      complex2.subtract(1.296329466559064E-35);
      complex2.sqrt1z();
      Complex complex5 = Complex.ZERO;
      complex0.tan();
      complex4.hashCode();
      Complex complex6 = complex1.asin();
      Complex complex7 = Complex.ZERO;
      complex6.divide(complex3);
      complex1.subtract((-0.4383831140634439));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.380286345847567E70));
      Complex complex1 = complex0.negate();
      complex1.abs();
      Complex complex2 = Complex.valueOf(2.380286345847567E70, 2.380286345847567E70);
      complex1.pow(complex0);
      complex2.getField();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex0.subtract(2.380286345847567E70);
      complex4.sqrt();
      complex3.atan();
      complex0.abs();
      complex2.log();
      complex2.readResolve();
      complex2.tanh();
      Complex complex5 = Complex.NaN;
      complex5.acos();
      Complex complex6 = Complex.INF;
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 1.0;
      Complex complex1 = new Complex(1.0, (-1961.21467779175));
      Complex complex2 = complex1.cosh();
      Complex.valueOf((-1961.21467779175), 1.0);
      complex2.tan();
      Complex complex3 = Complex.I;
      complex1.hashCode();
      Complex complex4 = Complex.ZERO;
      complex4.log();
      complex3.I.multiply(1.0);
      complex2.atan();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2751.0);
      complex0.getArgument();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.add(2751.0);
      Complex complex4 = complex2.INF.subtract(complex3);
      complex1.asin();
      Complex complex5 = complex2.NaN.cos();
      complex5.NaN.getArgument();
      Complex complex6 = complex2.tanh();
      complex6.toString();
      Complex complex7 = complex1.add(complex0);
      complex2.NaN.hashCode();
      complex1.NaN.subtract((-3.784600043778247E13));
      Complex complex8 = Complex.valueOf(2751.0, (-3.784600043778247E13));
      complex8.ZERO.atan();
      complex7.tanh();
      complex0.divide((-2827.8516521083));
      complex4.tan();
      complex3.divide(0.0);
      complex7.subtract(768.49654789711);
      complex3.divide(complex2);
      complex0.pow((-3.784600043778247E13));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      complex1.ZERO.negate();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.I;
      complex2.NaN.exp();
      complex2.ONE.asin();
      Complex complex4 = complex2.divide(0.0);
      Complex complex5 = complex4.ZERO.sin();
      complex4.subtract(complex0);
      complex5.isNaN();
      complex0.ZERO.getField();
      Complex.valueOf(0.0, 0.0);
      complex2.readResolve();
      Complex complex6 = Complex.valueOf(2911.797688024, 0.0);
      complex2.equals(complex6);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.divide(5.76686738430634E-8);
      complex3.subtract(5.76686738430634E-8);
      Complex complex5 = complex2.add((-290.0));
      Complex.valueOf(5.76686738430634E-8);
      complex4.getField();
      Complex complex6 = Complex.valueOf((-232.913905267989));
      Complex complex7 = complex6.sinh();
      complex4.getArgument();
      complex7.getField();
      Complex complex8 = Complex.ONE;
      complex5.atan();
      complex1.readResolve();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex5.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex2.ZERO.divide(complex0);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = (Complex)complex2.ZERO.readResolve();
      complex5.NaN.abs();
      complex1.ONE.sqrt1z();
      complex4.multiply(complex3);
      complex6.abs();
      complex2.toString();
      complex2.getReal();
      Complex complex7 = complex5.subtract(complex1);
      complex7.sinh();
      complex6.toString();
      complex5.reciprocal();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex((-1946.607882), (-440.854));
      Complex complex1 = complex0.sinh();
      complex1.getField();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.pow((-440.854));
      Complex complex5 = complex2.asin();
      complex1.pow(0.0);
      complex5.readResolve();
      complex4.subtract(983.6892482684575);
      complex0.subtract(20.0);
      Complex complex6 = new Complex((-4.357990742470246E217));
      Complex complex7 = complex6.multiply((-3324.184511));
      complex0.tan();
      complex7.hashCode();
      complex6.asin();
      complex2.getImaginary();
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex.valueOf(1030.2244594789177);
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      complex0.readResolve();
      complex0.tanh();
      Complex complex1 = Complex.I;
      complex1.acos();
      Complex complex2 = Complex.ONE;
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      complex1.ZERO.negate();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.NaN.exp();
      Complex complex5 = complex0.add(complex3);
      complex1.abs();
      Complex complex6 = complex5.log();
      complex3.readResolve();
      complex6.tanh();
      complex1.acos();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = new Complex((-3224.6933901782));
      Complex complex7 = complex6.cos();
      complex4.pow(complex5);
      complex7.multiply((-3224.6933901782));
      Complex complex8 = complex7.sinh();
      complex3.add(2308.4);
      complex4.getField();
      complex8.subtract(complex1);
      Complex complex9 = Complex.valueOf((-3224.6933901782), (-2.227647301474917E234));
      Complex complex10 = complex9.exp();
      complex2.acos();
      complex10.isNaN();
      complex2.acos();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ONE.add((-291.0));
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.ONE.subtract(complex4);
      Complex complex6 = Complex.NaN;
      complex0.subtract(complex6);
      Complex complex7 = complex2.pow(20.0);
      complex3.readResolve();
      Complex complex8 = complex7.subtract((-291.0));
      complex3.subtract(0.38109784554181547);
      complex2.multiply(20.0);
      complex5.tan();
      Complex complex9 = new Complex(0.0, 0.9999999999999885);
      complex9.hashCode();
      Complex complex10 = new Complex(1109.0, 0.38109784554181547);
      complex10.asin();
      complex3.getImaginary();
      Complex complex11 = Complex.ONE;
      complex11.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.negate();
      complex3.INF.getArgument();
      complex3.ZERO.sqrt1z();
      complex2.ZERO.divide(complex0);
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = (Complex)complex2.ZERO.readResolve();
      complex4.NaN.abs();
      Complex complex6 = complex1.ONE.sqrt1z();
      complex4.ONE.subtract(0.7853981633974483);
      Complex complex7 = complex2.add(Double.NaN);
      complex7.ONE.hashCode();
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.NaN.getField();
      complex8.NaN.sinh();
      complex8.getArgument();
      complex6.getField();
      Complex complex9 = Complex.ONE;
      complex9.atan();
      complex5.readResolve();
      complex8.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      complex1.INF.divide((-1958.8854876847));
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.ONE.getArgument();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.ONE.subtract(complex3);
      complex5.ONE.sqrt1z();
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex4.cos();
      complex4.NaN.getArgument();
      Complex complex8 = complex6.NaN.asin();
      complex8.atan();
      Complex complex9 = Complex.NaN;
      complex0.pow(complex7);
      Complex.valueOf(0.0, Double.NaN);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.I.log();
      complex6.pow(complex10);
      complex11.ZERO.tanh();
      try { 
        complex3.nthRoot((-8361));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -8,361
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.divide(complex3);
      complex4.INF.multiply(0.0);
      complex4.readResolve();
      complex4.INF.multiply(0.0);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex4.ONE.divide(20.0);
      complex0.INF.atan();
      complex4.I.hashCode();
      complex5.I.add(complex0);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex2.sqrt1z();
      complex6.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.negate();
      complex1.subtract(2.9032581477488686E284);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.NaN;
      complex3.exp();
      Complex complex4 = complex2.asin();
      complex0.divide(0.0);
      Complex complex5 = complex2.sin();
      Complex complex6 = Complex.NaN;
      complex6.subtract(complex3);
      Complex complex7 = Complex.NaN;
      complex7.isNaN();
      complex2.getField();
      complex1.atan();
      complex4.readResolve();
      Complex complex8 = Complex.valueOf(682.832927198, 1451.554);
      complex5.equals(complex8);
      complex6.createComplex(1767.62, 682.832927198);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.valueOf((-1.747018414872141E-8), 3.883965133552399E-34);
      complex1.getImaginary();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(0.8414709848078965);
      complex3.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.multiply(2145968061);
      Complex complex7 = complex2.pow(complex4);
      Complex complex8 = complex7.multiply(complex1);
      complex4.exp();
      complex6.tan();
      complex8.pow(complex6);
      Complex complex9 = Complex.valueOf(0.15270408136508878, (-2408.267));
      complex9.add(complex4);
      complex3.negate();
      Complex.valueOf(0.8414709848078965);
      complex7.hashCode();
      Complex complex10 = new Complex((-3268.68));
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(1.747018414872141E-8, (-1591.4322138599364));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract((-1591.4322138599364));
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.asin();
      complex2.INF.multiply((-5061));
      Complex complex6 = complex3.divide(1415.9321);
      Complex complex7 = complex0.sin();
      complex0.subtract(complex7);
      complex7.isNaN();
      complex2.getField();
      complex5.atan();
      Complex complex8 = Complex.NaN;
      complex8.readResolve();
      complex6.equals("");
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1946.607882), (-440.854));
      Complex complex1 = complex0.sinh();
      complex1.getField();
      Complex complex2 = complex1.log();
      complex0.add(complex2);
      Complex complex3 = complex1.pow((-440.854));
      Complex complex4 = complex2.asin();
      Complex complex5 = complex1.pow(0.0);
      complex4.readResolve();
      Complex complex6 = complex3.subtract(983.6892482684575);
      complex0.subtract(20.0);
      Complex complex7 = complex5.multiply(1435.6);
      complex0.tan();
      complex7.hashCode();
      Complex complex8 = complex0.asin();
      complex1.getImaginary();
      complex6.divide(complex8);
      complex4.subtract((-440.854));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(4268.194806883462, 4268.194806883462);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.negate();
      complex4.abs();
      Complex complex5 = Complex.valueOf(0.8414709848078965, 4268.194806883462);
      Complex complex6 = Complex.ONE;
      complex2.pow(complex6);
      complex5.getField();
      Complex complex7 = complex5.sqrt();
      complex7.subtract(1.7344443111550211E-34);
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex2.cosh();
      Complex complex10 = new Complex(0.8414709848078965);
      Complex complex11 = complex10.atan();
      Complex complex12 = Complex.NaN;
      complex12.getArgument();
      complex12.asin();
      complex12.createComplex(2388.8799, 2388.8799);
      Complex complex13 = complex1.atan();
      complex13.INF.multiply(complex11);
      complex10.hashCode();
      complex5.multiply(763);
      Complex complex14 = complex9.sinh();
      Complex complex15 = complex8.sin();
      complex15.pow(complex14);
      complex6.sqrt();
      complex2.subtract(4268.194806883462);
      Complex complex16 = Complex.valueOf((-1.3108606792380822E-9));
      complex16.getImaginary();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex1.getField();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.add(complex2);
      complex3.NaN.pow(0.0);
      complex3.INF.asin();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.ONE.pow(0.0);
      complex2.I.readResolve();
      Complex complex6 = complex1.INF.subtract(0.0);
      complex6.subtract(993.3674963);
      Complex complex7 = complex4.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex7.I.tan();
      complex7.hashCode();
      complex3.sqrt();
      complex7.subtract((-1756.0788363));
      complex7.isInfinite();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(2087.0315179, (-1.3108606792380822E-9));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      complex2.negate();
      complex2.I.abs();
      Complex complex3 = Complex.valueOf((-1.3108606792380822E-9), (-1.3108606792380822E-9));
      Complex complex4 = complex3.pow(complex1);
      complex3.getField();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex4.NaN.subtract((-1219.89));
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex7.INF.cosh();
      complex8.I.atan();
      complex1.getArgument();
      complex4.ZERO.asin();
      Complex complex9 = complex0.createComplex((-1.3108606792380822E-9), (-8.217417866463338E-14));
      Complex complex10 = complex8.atan();
      complex4.hashCode();
      complex7.multiply((-2131));
      Complex complex11 = complex6.sinh();
      complex11.NaN.sin();
      complex10.pow(complex5);
      complex9.asin();
      complex1.getImaginary();
      complex3.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex1.getField();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.NaN.pow(0.0);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = Complex.valueOf(2002.2011624464753, 773.734149);
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.INF;
      complex8.asin();
      complex8.divide(773.734149);
      complex3.sin();
      Complex complex9 = Complex.ZERO;
      complex9.subtract(complex5);
      Complex complex10 = Complex.valueOf(0.0);
      complex10.isNaN();
      complex1.getField();
      complex4.atan();
      complex1.readResolve();
      complex7.equals("qj");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-129.6), (-129.6));
      Complex complex1 = complex0.ONE.multiply(2743);
      Complex complex2 = complex1.INF.negate();
      complex2.NaN.subtract((-557.0));
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex4.I.sqrt();
      complex5.I.readResolve();
      Complex complex6 = complex4.I.asin();
      complex6.I.add(complex3);
      Complex complex7 = complex0.divide((-129.6));
      complex7.NaN.nthRoot(2743);
      Complex complex8 = Complex.valueOf((double) 2743);
      complex8.nthRoot(2743);
      Complex complex9 = complex7.multiply((-1118.7806));
      complex9.ONE.add(588.00219754975);
      Complex complex10 = complex4.sqrt1z();
      complex10.INF.exp();
      Complex.valueOf((-1118.7806), (-20.0));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-1844.0973976), 98.7452822848929);
      Complex complex1 = new Complex((-1844.0973976));
      Complex complex2 = complex0.INF.pow(complex1);
      complex0.INF.abs();
      Complex.valueOf(98.7452822848929);
      complex0.getField();
      complex1.asin();
      Complex.valueOf(98.7452822848929, 0.0);
      complex0.getArgument();
      complex2.pow(3.088097068834538);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt1z();
      complex0.getReal();
      Complex complex2 = complex0.sin();
      complex2.ZERO.readResolve();
      Complex complex3 = complex1.sinh();
      complex3.I.hashCode();
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.valueOf(1.3887944613766301E-11);
      complex3.NaN.cosh();
      complex0.ONE.multiply(complex3);
      Complex complex6 = complex0.subtract(complex5);
      complex3.I.readResolve();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex4.asin();
      Complex complex9 = complex8.I.divide(0.0);
      complex5.isInfinite();
      Complex complex10 = complex8.ONE.exp();
      complex10.ZERO.log();
      Complex complex11 = complex6.add(complex1);
      complex7.hashCode();
      complex11.ZERO.acos();
      Complex complex12 = complex11.sin();
      complex8.I.reciprocal();
      complex9.nthRoot(4615);
      complex12.isNaN();
      Complex.valueOf((double) 4615, 1112.2192);
      complex8.sin();
      complex12.NaN.pow(complex1);
      complex4.add(6.283185307179586);
      complex12.nthRoot(4615);
      complex2.pow((-20.0));
      complex9.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(320.44078, (-247.8866884355));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.multiply(complex0);
      Complex complex6 = complex5.INF.subtract(complex3);
      Complex complex7 = complex3.sinh();
      complex7.ONE.add((-3795.9236263043495));
      complex5.I.readResolve();
      Complex complex8 = complex0.pow(320.44078);
      Complex complex9 = complex5.add(complex8);
      complex9.I.sqrt();
      complex9.ZERO.hashCode();
      Complex.valueOf((-2.227647301474917E234), (-2.227647301474917E234));
      Complex.valueOf(0.0, 0.0);
      complex1.INF.tan();
      Complex complex10 = Complex.valueOf(Double.NaN, 320.44078);
      Complex complex11 = Complex.valueOf((-247.8866884355));
      complex8.divide(Double.NaN);
      Complex complex12 = complex7.cos();
      complex12.INF.getArgument();
      Complex complex13 = complex6.subtract(complex7);
      complex4.multiply(complex8);
      complex0.readResolve();
      complex11.toString();
      complex10.createComplex(0.0, 2466.0);
      complex2.abs();
      complex2.getImaginary();
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex1.INF.sin();
      complex3.toString();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.I.multiply(0.0);
      complex5.NaN.conjugate();
      Complex complex7 = complex5.sin();
      complex6.abs();
      complex1.I.acos();
      Complex complex8 = complex3.pow(complex5);
      complex4.I.toString();
      Complex complex9 = complex8.subtract(complex5);
      complex9.ONE.negate();
      Complex complex10 = complex7.pow((-1598.1240558));
      complex10.ONE.sqrt();
      complex0.ZERO.subtract(0.0);
      Complex.valueOf(1.8178532123565674, 1784.87);
      Complex complex11 = complex2.divide(complex8);
      complex0.abs();
      complex5.INF.acos();
      Complex complex12 = complex11.add(Double.NaN);
      complex12.multiply(2166.0063884907186);
      complex1.multiply((-1521));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = Complex.valueOf(0.0, (-2106.9694527));
      Complex complex5 = complex4.ONE.atan();
      complex1.toString();
      Complex complex6 = complex1.I.negate();
      complex6.NaN.getArgument();
      Complex complex7 = complex2.subtract(0.0);
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.conjugate();
      complex9.ZERO.hashCode();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex10.multiply(complex0);
      Complex complex12 = complex10.sqrt();
      complex11.asin();
      complex1.INF.add(complex2);
      Complex.valueOf((-2106.9694527), (-4472.84));
      complex3.INF.subtract(0.0);
      complex7.multiply(1711);
      complex5.acos();
      complex12.multiply(complex0);
      complex12.asin();
      complex1.hashCode();
      complex4.cosh();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.ONE.readResolve();
      Complex complex2 = complex0.sqrt();
      complex2.isNaN();
      Complex complex3 = complex2.divide(1.2579610347747803);
      Complex complex4 = complex2.pow(1.2579610347747803);
      Complex complex5 = complex4.add(complex1);
      Complex complex6 = complex4.ONE.add(0.0);
      complex4.INF.nthRoot(160);
      Complex complex7 = complex4.atan();
      Complex complex8 = complex7.NaN.atan();
      complex7.ONE.sinh();
      Complex complex9 = complex3.tan();
      complex0.isNaN();
      Complex complex10 = complex1.pow(20.0);
      complex4.ZERO.divide(0.0);
      complex2.sqrt1z();
      complex4.getImaginary();
      Complex complex11 = complex9.sqrt1z();
      complex10.isNaN();
      Complex complex12 = complex6.ONE.createComplex(0.0, (-3433.689154285));
      complex12.sqrt1z();
      complex11.add((-531.414));
      complex6.nthRoot(1);
      complex6.getReal();
      complex3.subtract((-342.064));
      complex5.getField();
      Complex complex13 = complex8.asin();
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1030.2244594789177);
      Complex.valueOf(20.0, 0.0);
      complex0.nthRoot(872);
      complex0.ONE.toString();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-4504.104068313902), (-4504.104068313902));
      complex0.cosh();
      Complex.valueOf(1.0, (-442.357651));
      Complex complex1 = complex0.tanh();
      complex0.ONE.tan();
      Complex complex2 = complex1.ONE.atan();
      complex0.hashCode();
      complex0.ONE.log();
      complex0.cosh();
      complex2.divide((-4504.104068313902));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sinh();
      complex1.ZERO.negate();
      Complex complex2 = complex0.subtract(0.0);
      complex2.ONE.reciprocal();
      complex2.NaN.exp();
      complex2.ONE.asin();
      Complex complex3 = complex2.divide(0.0);
      Complex complex4 = complex3.ZERO.sin();
      complex3.subtract(complex0);
      complex4.isNaN();
      complex0.ZERO.getField();
      complex4.atan();
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.getField();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex1.divide(5.76686738430634E-8);
      Complex complex5 = complex2.multiply(complex3);
      complex5.ONE.abs();
      complex5.INF.toString();
      complex4.getReal();
      complex0.subtract(complex3);
      complex5.sinh();
      complex4.toString();
      complex2.reciprocal();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1511.0);
      Complex complex1 = complex0.tan();
      complex1.NaN.cos();
      complex0.hashCode();
      complex1.INF.multiply(2313);
      complex0.hashCode();
      complex1.getField();
      Complex complex2 = complex0.reciprocal();
      complex1.pow((-547.066755162));
      complex2.createComplex((-547.066755162), (-547.066755162));
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-972.0));
      Complex complex1 = complex0.INF.createComplex(2.3895230293273926, (-962.177165));
      complex0.ZERO.divide((-962.177165));
      Complex complex2 = complex1.I.multiply(37);
      complex1.ZERO.getField();
      complex1.nthRoot(1073);
      complex0.isNaN();
      Complex complex3 = complex2.I.divide((double) 37);
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex2.I.negate();
      complex4.I.hashCode();
      Complex complex6 = complex1.add(complex0);
      complex6.ZERO.log();
      complex2.readResolve();
      complex4.subtract((-962.177165));
      complex5.subtract(20.0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex1.getField();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.add(complex2);
      complex3.NaN.pow(0.0);
      complex3.INF.asin();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.ONE.pow(0.0);
      complex2.I.readResolve();
      Complex complex5 = complex1.INF.subtract(0.0);
      complex5.subtract(993.3674963);
      Complex complex6 = complex4.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex6.I.tan();
      complex6.hashCode();
      complex3.asin();
      complex4.getImaginary();
      complex6.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.ZERO.exp();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = Complex.valueOf(Double.NaN, (-1101.945));
      Complex complex5 = complex2.I.createComplex(1679.82, 0.0);
      Complex complex6 = complex5.INF.cos();
      Complex complex7 = complex3.I.multiply(0.0);
      complex0.asin();
      Complex complex8 = complex0.cosh();
      complex8.getReal();
      complex7.getImaginary();
      complex4.divide(complex0);
      Complex complex9 = Complex.valueOf(2059.8, 0.0);
      Complex complex10 = complex9.log();
      complex2.pow(complex3);
      Complex complex11 = complex10.cos();
      complex11.ZERO.readResolve();
      complex6.cosh();
      complex0.isNaN();
      Complex complex12 = Complex.valueOf(0.0);
      complex4.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(2087.0315179, (-1.3108606792380822E-9));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.I.sinh();
      complex2.negate();
      complex2.I.abs();
      Complex complex3 = Complex.valueOf((-1.3108606792380822E-9), (-1.3108606792380822E-9));
      Complex complex4 = complex3.pow(complex1);
      complex3.getField();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex4.NaN.subtract((-1219.89));
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex7.INF.cosh();
      complex8.I.atan();
      complex1.getArgument();
      complex4.ZERO.asin();
      complex0.createComplex((-1.3108606792380822E-9), (-8.217417866463338E-14));
      Complex complex9 = complex8.atan();
      complex4.hashCode();
      complex7.multiply((-2131));
      Complex complex10 = complex6.sinh();
      complex10.NaN.sin();
      complex9.pow(complex5);
      Complex complex11 = complex8.sqrt();
      complex11.INF.subtract((-8.217417866463338E-14));
      complex8.isInfinite();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1227.9));
      complex0.subtract((-1227.9));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(1136.0);
      Complex complex2 = Complex.valueOf(0.4190443754196167);
      complex1.ONE.toString();
      Complex complex3 = new Complex(1.1551692104697154E-8);
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex4.multiply(1.1551692104697154E-8);
      complex6.INF.conjugate();
      complex3.conjugate();
      Complex complex7 = complex5.atan();
      complex7.ONE.hashCode();
      Complex complex8 = complex3.ZERO.sinh();
      complex5.abs();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex9.conjugate();
      complex2.conjugate();
      complex3.ONE.sqrt1z();
      Complex complex11 = Complex.valueOf((-2336.517386), 1136.0);
      complex2.atan();
      Complex complex12 = complex1.negate();
      complex12.INF.toString();
      complex8.isInfinite();
      complex0.conjugate();
      complex1.atan();
      complex11.add(complex10);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.log();
      complex1.NaN.subtract(complex0);
      Complex complex2 = complex1.I.negate();
      Complex.valueOf(0.0, 0.0);
      complex0.NaN.nthRoot(1070);
      complex1.ZERO.acos();
      Complex complex3 = complex1.I.sqrt();
      Complex complex4 = complex0.I.sinh();
      complex3.readResolve();
      Complex complex5 = complex0.pow(0.0);
      complex5.abs();
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex6 = complex1.tanh();
      complex6.I.atan();
      Complex complex7 = complex6.INF.pow(complex3);
      complex7.ONE.conjugate();
      Complex complex8 = complex1.pow(complex4);
      complex8.ZERO.multiply(1070);
      complex8.isInfinite();
      complex1.ONE.pow((double) 1070);
      Complex complex9 = complex1.log();
      complex5.add(complex9);
      Complex complex10 = complex1.cosh();
      complex9.exp();
      Complex complex11 = complex2.reciprocal();
      complex11.pow((-343.2605678579));
      complex10.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      complex0.ONE.getArgument();
      Complex complex1 = complex0.subtract(4.664436780622191E168);
      Complex complex2 = complex1.divide(0.0);
      complex2.I.pow(complex1);
      complex2.ONE.sqrt();
      Complex.valueOf(0.0, 4.664436780622191E168);
      Complex complex3 = complex1.multiply(complex2);
      complex3.readResolve();
      complex3.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.sinh();
      complex0.ONE.hashCode();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.sin();
      complex0.isNaN();
      complex0.getImaginary();
      complex2.getArgument();
      Complex complex5 = complex2.pow(complex4);
      Complex complex6 = complex3.sqrt();
      complex6.add(0.0);
      Complex complex7 = complex0.sinh();
      complex4.NaN.divide(complex5);
      Complex complex8 = complex7.I.pow(complex0);
      try { 
        complex8.I.nthRoot((-1879));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,879
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.multiply(6.283185307179586);
      Complex complex4 = complex0.divide(complex3);
      complex4.INF.multiply(0.0);
      complex4.readResolve();
      complex4.INF.multiply(0.0);
      Complex complex5 = complex4.acos();
      complex4.ONE.divide(20.0);
      complex0.INF.atan();
      complex5.I.add(complex0);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.315287232107949E-7);
      Complex complex1 = complex0.INF.sinh();
      complex1.ONE.toString();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.sinh();
      complex0.divide(8.315287232107949E-7);
      complex3.pow(complex2);
      complex3.getImaginary();
      Complex complex4 = complex0.I.divide(460.0);
      complex4.atan();
      complex1.conjugate();
      complex0.ONE.add(8.315287232107949E-7);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex1.add(complex0);
      complex5.add(0.0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(5.1271712215233855E64);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.ONE.createComplex(5.1271712215233855E64, 5.1271712215233855E64);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.INF.subtract(complex4);
      Complex complex7 = complex1.ONE.divide(complex5);
      complex5.nthRoot(720);
      Complex complex8 = complex1.cos();
      complex6.readResolve();
      complex4.pow(complex7);
      complex8.nthRoot(2967);
      complex5.sinh();
      Complex complex9 = Complex.valueOf(2.487138271331787, (-20.0));
      complex5.ZERO.divide(1998.3);
      Complex complex10 = complex9.log();
      complex4.subtract(complex7);
      complex5.add(903.0812898004);
      complex2.getArgument();
      Complex complex11 = complex7.subtract(complex0);
      complex3.multiply(complex11);
      complex4.cosh();
      complex10.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.INF.divide((-1958.8854876847));
      Complex complex3 = complex1.ZERO.sqrt1z();
      complex3.ONE.getArgument();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.ONE.subtract(complex4);
      complex6.ONE.sqrt1z();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex5.cos();
      complex5.NaN.getArgument();
      Complex complex9 = complex7.NaN.asin();
      complex9.atan();
      Complex complex10 = Complex.valueOf((-1958.8854876847), 371.29051963);
      complex5.INF.pow(complex8);
      complex10.ZERO.add(complex2);
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.I.log();
      complex7.pow(complex11);
      complex12.ZERO.tanh();
      try { 
        complex4.nthRoot((-8361));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -8,361
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.ONE.add((-291.0));
      Complex complex3 = complex2.I.add(0.0);
      Complex complex4 = Complex.INF;
      complex3.ONE.subtract(complex4);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex6.I.cos();
      complex2.pow(complex5);
      Complex complex8 = complex2.multiply(650.58);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex5.add((-1330.115626185));
      complex10.I.getField();
      complex1.subtract(complex9);
      Complex complex11 = complex0.exp();
      Complex complex12 = complex11.INF.acos();
      complex3.equals(complex6);
      complex7.acos();
      complex9.log();
      complex12.negate();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex0.negate();
      complex3.INF.getArgument();
      Complex complex4 = complex3.ZERO.sqrt1z();
      Complex complex5 = complex2.ZERO.divide(complex0);
      Complex complex6 = complex0.multiply(complex3);
      complex2.ZERO.readResolve();
      complex6.NaN.abs();
      complex1.ONE.sqrt1z();
      complex6.ONE.subtract(0.7853981633974483);
      Complex complex7 = complex2.add(0.0);
      complex7.ONE.hashCode();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.NaN.getField();
      complex8.NaN.sinh();
      complex8.getArgument();
      complex5.getImaginary();
      complex8.ZERO.divide(0.0);
      complex5.hashCode();
      complex8.getImaginary();
      complex4.abs();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.subtract(0.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex2.ONE.exp();
      Complex complex3 = complex1.ZERO.add(complex0);
      complex0.ZERO.abs();
      complex0.log();
      complex0.readResolve();
      Complex complex4 = complex3.tanh();
      complex4.INF.acos();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.subtract(0.0);
      Complex complex1 = complex0.ZERO.tanh();
      complex1.INF.acos();
      Complex.valueOf(0.0);
      Complex complex2 = complex0.createComplex(82.2, 82.2);
      complex2.getField();
      complex1.ONE.log();
      Complex complex3 = complex2.ONE.multiply(2348.7501);
      complex3.conjugate();
      Complex complex4 = complex0.exp();
      complex1.sqrt();
      complex4.createComplex(82.2, 1176.27);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.INF.pow(complex3);
      complex4.reciprocal();
      Complex complex5 = complex3.I.sin();
      complex5.NaN.cos();
      Complex complex6 = complex0.ONE.exp();
      complex6.NaN.acos();
      complex2.ONE.getArgument();
      complex2.readResolve();
      complex0.readResolve();
      complex1.equals("");
      complex6.conjugate();
      complex2.INF.cos();
      Complex complex7 = complex6.multiply(complex2);
      Complex complex8 = complex2.INF.add(217.69036);
      complex8.INF.createComplex(100.759066314, 5429.91748682298);
      Complex complex9 = Complex.valueOf(217.69036, 7.116780143398601E-9);
      complex9.NaN.log();
      Complex complex10 = complex7.divide(0.5601736307144165);
      complex10.ZERO.pow(100.759066314);
      complex7.tanh();
      complex1.readResolve();
      int int0 = (-1834);
      try { 
        complex5.nthRoot((-1834));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,834
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.divide(491.5230203798);
      Complex complex2 = complex1.ONE.add(491.5230203798);
      complex0.toString();
      complex0.readResolve();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.exp();
      complex1.NaN.createComplex(491.5230203798, 491.5230203798);
      complex0.getImaginary();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.ONE.pow(complex3);
      Complex complex7 = complex3.add(complex6);
      Complex complex8 = complex7.ZERO.multiply(1);
      complex8.NaN.getField();
      Complex complex9 = complex7.INF.acos();
      Complex complex10 = complex9.INF.add(complex3);
      complex0.abs();
      complex3.equals(complex4);
      Complex complex11 = complex2.log();
      Complex complex12 = complex1.pow(0.0);
      complex0.equals(complex4);
      complex5.nthRoot(1);
      Complex complex13 = complex0.add(complex12);
      complex1.sinh();
      complex13.exp();
      Complex.valueOf(0.0, 3731.438265085163);
      complex11.atan();
      complex10.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.ONE.subtract((double) 2993);
      complex3.NaN.tan();
      complex2.INF.nthRoot(2993);
      Complex complex4 = complex2.divide(4036.696219521961);
      complex4.createComplex((-2084.962971424), 2993);
      Complex complex5 = complex0.subtract(4036.696219521961);
      complex0.toString();
      Complex complex6 = complex5.ZERO.sqrt();
      Complex complex7 = complex1.asin();
      complex7.NaN.divide(4036.696219521961);
      Complex.valueOf((-1868.88));
      complex2.NaN.divide(complex6);
      complex5.readResolve();
      Complex complex8 = complex0.subtract(complex4);
      complex0.asin();
      Complex complex9 = complex8.reciprocal();
      complex2.multiply(17);
      Complex complex10 = complex4.sin();
      Complex complex11 = complex10.negate();
      complex11.negate();
      Complex complex12 = complex4.add(complex7);
      complex9.readResolve();
      complex12.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1585.76));
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.multiply(0.0);
      complex0.getField();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.sinh();
      complex0.INF.createComplex(1366.742713377, 1053.0);
      Complex complex1 = complex0.pow((-264.0));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.divide(4472.005038);
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.I.reciprocal();
      double double0 = complex3.ONE.abs();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals((-1.0), complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.ZERO.reciprocal();
      Complex complex5 = complex4.NaN.conjugate();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.pow(complex6);
      Complex complex8 = complex7.INF.pow(complex1);
      Complex complex9 = Complex.valueOf(20.0, 4472.005038);
      Complex complex10 = complex9.NaN.asin();
      Complex complex11 = complex6.sqrt1z();
      Complex complex12 = complex11.ONE.add(complex7);
      complex0.getArgument();
      Complex complex13 = complex8.asin();
      Complex complex14 = complex13.ZERO.tanh();
      Complex complex15 = complex11.negate();
      complex10.add(4472.005038);
      Complex complex16 = complex15.tanh();
      Complex complex17 = complex16.ZERO.multiply(4472.005038);
      assertTrue(complex17.equals((Object)complex14));
      assertSame(complex15, complex12);
      
      Complex.valueOf(3034.03133652054, 0.3519763946533203);
      Complex complex18 = complex1.ONE.tan();
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex18.getReal(), 0.01);
      
      Complex complex19 = complex0.sinh();
      Complex complex20 = complex13.divide(6.741722283079056E-274);
      Complex complex21 = complex20.conjugate();
      assertSame(complex21, complex16);
      
      complex5.isInfinite();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(2.236133437915863E-4, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertSame(complex4, complex19);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-653.10302), 20.0);
      double double0 = complex0.getReal();
      assertEquals((-653.10302), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(20.0, complex0.getImaginary(), 0.01);
  }
}
