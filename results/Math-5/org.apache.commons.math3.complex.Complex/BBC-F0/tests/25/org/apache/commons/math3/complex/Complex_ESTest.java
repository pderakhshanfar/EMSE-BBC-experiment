/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:49:04 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
      Complex.valueOf(20.0, (-1562.648));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1782879829406738);
      Complex complex1 = complex0.createComplex(1.1782879829406738, 0.5092618465423584);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.createComplex(0.5092618465423584, Double.NaN);
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.ONE.divide(complex1);
      Complex complex6 = complex2.divide(complex1);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex0.multiply((-2071));
      complex8.I.multiply(complex6);
      Complex complex9 = Complex.valueOf((-941.4140451), 1.6311047615028601E7);
      complex9.ZERO.getField();
      complex9.NaN.getArgument();
      Complex complex10 = complex7.pow(complex3);
      complex10.INF.getField();
      complex6.abs();
      Complex complex11 = complex10.multiply((-2071));
      complex6.I.nthRoot(713);
      complex10.I.nthRoot(745);
      complex8.pow(complex5);
      complex11.I.tanh();
      complex10.sqrt();
      complex5.negate();
      complex6.abs();
      complex11.negate();
      try { 
        complex10.nthRoot((-2135870467));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,135,870,467
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.subtract(1.0);
      Complex complex4 = new Complex((-39.177528142086686), 3.1520070828798975E-212);
      complex3.asin();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.conjugate();
      Complex complex4 = new Complex((-4.503599627370496E15), 1186.0328262);
      complex3.INF.add(complex4);
      Complex complex5 = complex0.divide((-436.1));
      complex5.subtract(complex1);
      Complex complex6 = complex0.NaN.tan();
      complex5.sqrt1z();
      complex3.atan();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex.valueOf((-745.4), (-745.4));
      Complex complex2 = new Complex((-745.4), Double.POSITIVE_INFINITY);
      complex2.tan();
      complex2.multiply(1689.9440615931214);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.I.cos();
      Complex complex3 = new Complex((-745.4), Double.POSITIVE_INFINITY);
      complex2.sqrt();
      complex0.sqrt();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-296.354), (-296.354));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      complex2.divide(complex0);
      Complex complex3 = Complex.ZERO;
      complex0.pow(complex3);
      Complex complex4 = new Complex((-296.354), (-296.354));
      Complex complex5 = complex0.exp();
      Complex complex6 = Complex.INF;
      complex6.getImaginary();
      Complex complex7 = new Complex((-296.354), Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex((-296.354));
      Complex complex9 = new Complex(1173.0, 1173.0);
      complex3.tan();
      complex5.multiply(2142904770);
      complex7.multiply((-127));
      Complex complex10 = new Complex((-296.354));
      complex8.add(complex6);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex((-2000.171555664), (-2000.171555664));
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(0.9595214310032456);
      complex0.abs();
      Complex complex3 = Complex.ONE;
      complex3.tan();
      complex0.toString();
      Complex complex4 = complex3.multiply(2828.669741092921);
      Complex complex5 = new Complex(2828.669741092921, 0.9595214310032456);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex0.multiply(complex3);
      complex7.pow(2828.669741092921);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex1.divide(2828.669741092921);
      complex9.asin();
      Complex complex10 = new Complex((-1379.4078762));
      complex10.exp();
      Complex complex11 = Complex.valueOf(2155.67185181);
      complex11.atan();
      complex3.getImaginary();
      Complex complex12 = new Complex(2155.67185181, (-2000.171555664));
      complex6.getField();
      complex8.atan();
      complex1.multiply(1488.13972988);
      Complex complex13 = new Complex(2.1911705292066328E128);
      try { 
        complex4.nthRoot((-1218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,218
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex((-2000.171555664), (-2000.171555664));
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex((-2000.171555664));
      complex0.I.abs();
      complex0.tan();
      complex1.I.toString();
      Complex complex3 = complex1.conjugate();
      complex0.INF.subtract(complex3);
      Complex complex4 = complex0.multiply(complex0);
      Complex complex5 = complex4.ZERO.pow((-2000.171555664));
      complex4.I.sqrt();
      Complex complex6 = complex4.divide((-2000.171555664));
      complex6.NaN.asin();
      Complex complex7 = complex5.INF.exp();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex1.createComplex((-20.0), 1.0);
      complex0.getImaginary();
      Complex complex10 = new Complex((-2000.171555664));
      complex0.getField();
      complex8.NaN.atan();
      Complex complex11 = complex7.multiply(18.93028596005697);
      complex9.tanh();
      complex11.ONE.pow(complex0);
      try { 
        complex6.nthRoot((-1218));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,218
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = Complex.NaN;
      complex1.INF.abs();
      complex0.divide(complex0);
      Complex complex2 = new Complex((-745.3698905701));
      try { 
        complex2.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = Complex.NaN;
      complex1.INF.abs();
      Complex complex2 = Complex.valueOf((-745.3698905701), Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex((-745.3698905701));
      complex2.asin();
      Complex complex4 = new Complex((-745.3698905701), (-745.3698905701));
      complex0.getImaginary();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex0.nthRoot(262);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(2568.5374926159);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract(2568.5374926159);
      complex3.INF.abs();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.pow(complex4);
      complex4.asin();
      complex4.exp();
      complex2.reciprocal();
      complex3.divide(complex0);
      Complex complex6 = Complex.NaN;
      complex5.acos();
      complex0.getField();
      complex3.conjugate();
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      complex0.abs();
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex((-296.354), (-296.354));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.multiply((-296.354));
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex2.multiply(complex1);
      complex1.pow((-296.354));
      complex5.sqrt();
      Complex complex6 = complex4.divide((-15.4));
      Complex complex7 = complex3.asin();
      Complex complex8 = complex6.exp();
      complex7.atan();
      Complex complex9 = Complex.NaN;
      complex9.getImaginary();
      Complex complex10 = new Complex(1354.542143, (-3732.73));
      complex4.getField();
      complex8.atan();
      Complex complex11 = complex5.multiply((-2394.28885));
      Complex complex12 = new Complex(2394.28885);
      try { 
        complex11.nthRoot((-5252));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -5,252
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.subtract((-745.3698905701));
      complex1.abs();
      complex0.divide(complex4);
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex4.exp();
      Complex complex8 = new Complex((-1.1211083853006645E-156), Double.POSITIVE_INFINITY);
      complex6.getImaginary();
      complex8.asin();
      complex0.pow(complex7);
      complex1.hashCode();
      Complex complex9 = Complex.I;
      complex9.tan();
      Complex complex10 = complex0.asin();
      complex5.hashCode();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow((-244.5));
      Complex complex2 = complex0.INF.exp();
      complex0.NaN.abs();
      complex0.negate();
      Complex complex3 = complex0.NaN.sinh();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex2.multiply(395);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ONE.atan();
      complex7.ONE.add((-1.0));
      Complex complex8 = complex1.divide(complex5);
      complex8.I.exp();
      complex5.INF.abs();
      complex0.INF.atan();
      complex6.I.readResolve();
      complex2.I.hashCode();
      Complex complex9 = complex2.multiply(395);
      complex9.NaN.pow(complex2);
      complex7.readResolve();
      Complex complex10 = complex0.I.subtract((-971855.9365773397));
      Complex complex11 = complex5.multiply(complex1);
      complex11.ZERO.sqrt1z();
      Complex complex12 = complex1.sqrt();
      complex12.negate();
      Complex complex13 = complex4.add((-4.768920119497491E-8));
      complex10.pow(complex9);
      try { 
        complex13.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 0.8876711293893295);
      Complex complex2 = new Complex((-785.5), 1158.9753520234);
      complex2.getField();
      complex0.equals(complex1);
      complex0.isNaN();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.valueOf(990.866852);
      complex4.equals(complex5);
      complex5.multiply(4426);
      complex3.tanh();
      complex1.reciprocal();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.INF;
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-296.354), (-296.354));
      Complex complex1 = Complex.valueOf((-296.354));
      Complex complex2 = complex0.sin();
      complex2.sin();
      Complex complex3 = Complex.valueOf((-296.354), (-296.354));
      Complex complex4 = complex3.NaN.add(complex1);
      complex1.divide(complex3);
      complex3.NaN.createComplex((-296.354), (-296.354));
      complex0.readResolve();
      complex1.getImaginary();
      complex0.pow(complex4);
      Complex complex5 = complex3.acos();
      Complex complex6 = new Complex((-1133.983105863), (-1133.983105863));
      complex6.getField();
      complex5.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract((-745.3698905701));
      complex3.INF.abs();
      Complex complex4 = complex0.divide(complex1);
      complex4.asin();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.atan();
      complex6.getImaginary();
      Complex complex7 = new Complex((-349.2081), 2314.84701259);
      Complex complex8 = complex1.add((-349.2081));
      complex3.getField();
      complex8.equals(complex5);
      Complex complex9 = complex3.subtract(1644.87503874);
      Complex complex10 = new Complex((-0.9277127914661496), 979.3692227853506);
      complex10.asin();
      complex3.ZERO.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex9.multiply((-20.0));
      complex11.ONE.subtract(complex5);
      complex4.equals(complex1);
      complex11.add(2097.52969583);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract((-745.3698905701));
      complex3.INF.abs();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex4.asin();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.atan();
      complex8.getImaginary();
      complex7.divide(1.0);
      Complex complex9 = complex7.asin();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex5.atan();
      complex10.getImaginary();
      Complex complex12 = new Complex(0.00547115294514732, (-1.0));
      Complex complex13 = complex0.add(0.8876711293893295);
      complex6.getField();
      Object object0 = complex8.readResolve();
      complex4.equals(object0);
      complex12.isNaN();
      complex11.tanh();
      Complex complex14 = complex0.tan();
      Complex complex15 = Complex.ONE;
      Complex complex16 = new Complex(1.0);
      complex15.equals(complex16);
      complex14.multiply(0.00547115294514732);
      complex11.cos();
      complex2.abs();
      complex13.getArgument();
      complex8.add(complex12);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex1.pow((-745.3698905701));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex3.pow(2398.048899329382);
      Complex complex7 = complex2.sqrt();
      Complex complex8 = complex7.divide(2398.048899329382);
      Complex complex9 = complex0.asin();
      complex2.exp();
      Complex complex10 = complex2.atan();
      complex9.getImaginary();
      Complex complex11 = new Complex(0.2976420521736145, 2398.048899329382);
      Complex complex12 = new Complex(9.770510970673519E-8);
      Complex complex13 = complex12.add(2.0);
      complex0.getField();
      complex6.equals(complex9);
      complex6.isNaN();
      complex9.tanh();
      complex5.tan();
      complex8.equals(complex12);
      Complex complex14 = complex13.multiply(0.2976420521736145);
      complex14.ZERO.sqrt1z();
      complex10.cos();
      Complex complex15 = new Complex(390.525);
      complex15.abs();
      complex15.getArgument();
      complex11.add(complex15);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3604.286));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.valueOf((-428.0), (-1.626));
      Complex complex6 = complex3.add(complex1);
      Complex complex7 = complex6.divide(complex4);
      complex7.createComplex(0.12534179286695157, 0.12534179286695157);
      complex4.readResolve();
      complex5.getImaginary();
      Complex complex8 = complex1.negate();
      complex4.conjugate();
      complex1.toString();
      complex7.reciprocal();
      Complex complex9 = new Complex(3446.977183445749);
      complex7.divide(complex9);
      Complex complex10 = Complex.valueOf(3160.1852942833, (-428.0));
      Complex complex11 = complex10.multiply(1289);
      complex11.exp();
      complex8.multiply((-2873));
      complex10.tanh();
      complex1.reciprocal();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-2000.171555664), (-2000.171555664));
      Complex complex1 = Complex.INF;
      complex0.I.add(complex1);
      complex0.I.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.subtract(complex2);
      complex3.I.toString();
      Complex complex4 = complex3.multiply(1.0);
      Complex complex5 = new Complex((-2000.171555664));
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex4.createComplex((-2000.171555664), (-1279063.8639999998));
      Complex complex8 = Complex.valueOf(1.0, (-1279063.8639999998));
      complex6.getImaginary();
      Complex complex9 = complex7.negate();
      complex5.toString();
      complex9.reciprocal();
      Complex complex10 = complex1.divide(complex4);
      complex10.tanh();
      complex5.tan();
      Complex complex11 = Complex.ONE;
      complex11.equals((Object) null);
      complex2.multiply((-2000.171555664));
      Complex complex12 = complex1.cos();
      complex9.abs();
      complex1.getArgument();
      complex12.add(complex8);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.hashCode();
      complex0.nthRoot(2867);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = (Complex)complex0.readResolve();
      complex2.getImaginary();
      Complex complex4 = new Complex(0.8876711293893295, (-911.001));
      Complex complex5 = complex0.add(3812.5899273631);
      complex3.getField();
      complex5.equals(complex4);
      complex5.isNaN();
      Complex complex6 = new Complex(20.0);
      Complex complex7 = complex6.tanh();
      complex4.tan();
      Complex complex8 = new Complex((-20.0));
      Object object0 = new Object();
      complex8.equals(object0);
      complex3.multiply(20.0);
      Complex complex9 = complex1.cos();
      complex3.abs();
      Complex complex10 = complex9.NaN.cosh();
      complex4.getArgument();
      complex7.add(complex9);
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.pow(complex0);
      complex3.sinh();
      complex2.acos();
      complex1.getField();
      complex4.acos();
      Complex complex5 = Complex.valueOf((-1133.983105863));
      complex5.nthRoot(2313);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.nthRoot(292);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.readResolve();
      complex1.getImaginary();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = Complex.ZERO;
      complex4.toString();
      complex2.reciprocal();
      complex1.divide(complex4);
      complex4.multiply(292);
      complex1.exp();
      complex4.multiply(695);
      Complex complex5 = complex2.tanh();
      complex5.reciprocal();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-296.354), (-296.354));
      Complex complex1 = Complex.valueOf((-296.354));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf((-296.354));
      Complex complex5 = complex4.NaN.add(complex1);
      Complex complex6 = complex3.conjugate();
      complex6.NaN.atan();
      complex3.pow((-296.354));
      complex3.multiply(complex5);
      Complex.valueOf(0.2976420521736145);
      Complex complex7 = complex4.sqrt();
      complex7.sinh();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.acos();
      complex9.getField();
      Complex complex10 = new Complex(0.2976420521736145);
      complex5.nthRoot(2313);
      complex10.toString();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2433054447174072);
      Complex complex1 = complex0.I.multiply((-2699));
      complex0.ONE.toString();
      complex0.abs();
      Complex complex2 = Complex.valueOf(3939.6827622, 1.2433054447174072);
      Complex complex3 = complex0.NaN.multiply((-2699));
      complex3.I.tan();
      complex0.isInfinite();
      complex2.ONE.divide(508.1582665);
      Complex complex4 = complex1.add(1700.45075264);
      Complex complex5 = complex2.negate();
      complex4.pow(complex3);
      complex4.subtract(complex2);
      Complex complex6 = complex4.asin();
      complex6.ONE.sinh();
      Complex complex7 = Complex.INF;
      complex7.INF.sqrt1z();
      complex7.ONE.createComplex(0.0, 508.1582665);
      complex0.multiply(complex7);
      Complex complex8 = complex5.exp();
      complex3.conjugate();
      complex8.getArgument();
      complex8.abs();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.hashCode();
      complex0.nthRoot(2867);
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.reciprocal();
      complex3.atan();
      Complex complex4 = complex3.sqrt1z();
      complex2.getField();
      complex3.acos();
      complex4.nthRoot(2867);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((double) 292, (double) 292);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf((double) 292);
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex0.createComplex(292, (-2849.3314454));
      complex0.readResolve();
      complex0.getImaginary();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.conjugate();
      complex7.toString();
      Complex complex8 = complex4.reciprocal();
      complex1.divide(complex5);
      complex8.multiply(292);
      Complex complex9 = complex8.exp();
      Complex complex10 = Complex.ONE;
      complex10.multiply(7);
      complex0.tanh();
      complex9.reciprocal();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex1.subtract((-548.15554));
      complex1.abs();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.divide(complex2);
      Complex complex4 = Complex.valueOf((-548.15554), Double.NaN);
      complex1.pow(complex4);
      complex3.add((-349.2081));
      complex4.readResolve();
      complex3.readResolve();
      Complex complex5 = new Complex((-1131.789466), (-548.15554));
      complex0.multiply(complex5);
      complex0.hashCode();
      complex3.multiply((-1131.789466));
      complex5.multiply(complex1);
      complex5.negate();
      Complex complex6 = Complex.valueOf(0.2786078453063965, (-20.0));
      complex6.nthRoot(2998);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.cos();
      complex2.tan();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      complex0.sin();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sinh();
      complex2.conjugate();
      Complex complex3 = complex1.divide((-745.3698905701));
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = Complex.INF;
      complex5.tan();
      complex5.add(complex4);
      Complex complex6 = new Complex((-1.0), 2150.6);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.hashCode();
      List<Complex> list0 = complex0.nthRoot(2867);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.pow((-348.48213833645696));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.divide(648.55732);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.asin();
      Complex complex8 = complex5.exp();
      complex8.atan();
      complex7.getImaginary();
      Complex complex9 = new Complex(20.0, 925.252840549);
      complex2.add((-2271.8314888059));
      complex7.getField();
      Object object0 = complex2.readResolve();
      complex8.equals(object0);
      complex4.isNaN();
      Complex complex10 = Complex.I;
      Complex complex11 = complex8.INF.asin();
      complex11.ZERO.atan();
      complex10.tanh();
      Complex complex12 = complex4.tan();
      complex12.equals(list0);
      complex4.multiply(0.0);
      Complex complex13 = new Complex((-2271.8314888059), 2867);
      complex13.cos();
      complex8.abs();
      complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract((-745.3698905701));
      complex3.INF.abs();
      Complex complex4 = complex0.divide(complex1);
      complex3.pow(complex4);
      complex4.asin();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex1.atan();
      complex6.getImaginary();
      Complex complex7 = new Complex((-349.2081), 2314.84701259);
      Complex complex8 = complex1.add((-349.2081));
      complex3.getField();
      complex8.equals(complex5);
      Complex complex9 = complex3.subtract(1644.87503874);
      Complex complex10 = new Complex((-0.9277127914661496), 979.3692227853506);
      complex10.asin();
      Complex complex11 = complex9.multiply((-20.0));
      complex4.equals(complex1);
      Complex complex12 = new Complex(0.0, (-8.745525834919404E-8));
      complex12.sqrt();
      complex12.multiply((-1398.7661430973726));
      complex10.atan();
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.subtract(1965.61);
      complex1.isInfinite();
      Complex complex3 = complex2.cos();
      complex3.INF.abs();
      Complex complex4 = complex0.I.sinh();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = Complex.I;
      complex0.hashCode();
      complex3.isInfinite();
      Complex complex6 = complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      complex6.getField();
      complex1.ZERO.hashCode();
      Complex complex7 = Complex.valueOf(3084.0, Double.POSITIVE_INFINITY);
      complex7.readResolve();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex5.multiply(complex7);
      complex4.hashCode();
      Complex complex10 = complex9.multiply(1965.61);
      complex10.negate();
      complex4.nthRoot(284);
      complex8.cos();
      complex5.tan();
      complex9.sinh();
      complex2.createComplex(57.6084388054672, 0.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.sin();
      Complex complex2 = complex1.subtract((-2826.2282));
      Complex complex3 = Complex.I;
      complex3.abs();
      Complex complex4 = complex3.divide(complex0);
      complex4.ZERO.asin();
      complex1.pow(complex0);
      Complex complex5 = complex2.add((-1688.8778113237));
      Complex complex6 = (Complex)complex5.readResolve();
      Complex complex7 = (Complex)complex3.readResolve();
      complex0.divide(complex7);
      complex2.sinh();
      Complex complex8 = new Complex((-543.9));
      complex8.cos();
      complex1.abs();
      complex8.pow(complex3);
      complex6.conjugate();
      complex8.subtract(0.0);
      complex0.sinh();
      complex8.subtract(1.1752011936438014);
      Complex complex9 = Complex.valueOf(1434.84, (-1.3366540360587255E-8));
      complex5.add(complex9);
      complex5.cosh();
      Complex.valueOf((-543.9));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2000.171555664), (-2000.171555664));
      Complex complex1 = new Complex((-2000.171555664));
      complex0.I.add(complex1);
      complex0.I.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.subtract(complex2);
      complex3.I.toString();
      Complex complex4 = complex3.multiply(1.0);
      Complex complex5 = new Complex((-2000.171555664));
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex4.createComplex((-2000.171555664), (-1279063.8639999998));
      complex3.readResolve();
      complex6.getImaginary();
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.conjugate();
      complex5.toString();
      Complex complex10 = complex8.reciprocal();
      complex9.divide(complex4);
      Complex complex11 = complex10.multiply(4316);
      Complex complex12 = complex7.exp();
      complex12.multiply((-558));
      complex9.tanh();
      complex11.reciprocal();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-296.354), (-296.354));
      Complex complex1 = Complex.valueOf((-296.354));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf((-296.354));
      Complex complex5 = complex4.NaN.add(complex1);
      complex3.conjugate();
      Complex complex6 = complex3.pow((-296.354));
      Complex complex7 = complex3.multiply(complex5);
      Complex complex8 = complex4.pow(0.2976420521736145);
      complex4.sqrt();
      complex8.divide(0.00547115294514732);
      complex4.asin();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.atan();
      complex6.getImaginary();
      Complex complex11 = new Complex(0.8876711293893295, Double.NaN);
      Complex complex12 = complex7.add(9.770510970673519E-8);
      ComplexField complexField0 = complex10.getField();
      complex0.equals(complex12);
      complex6.isNaN();
      Complex complex13 = complex4.tanh();
      complex8.tan();
      complex6.equals(complexField0);
      complex8.multiply(9.770510970673519E-8);
      complex13.cos();
      complex11.abs();
      complex8.getArgument();
      complex8.add(complex13);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract((-745.3698905701));
      complex3.INF.abs();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.pow(complex4);
      complex0.add((-349.2081));
      Complex complex6 = (Complex)complex1.readResolve();
      complex1.readResolve();
      complex2.getImaginary();
      Complex complex7 = new Complex((-296.354), Double.POSITIVE_INFINITY);
      complex7.NaN.reciprocal();
      complex5.add(0.1353352832366127);
      complex5.getField();
      Complex complex8 = new Complex(4.232889602759328E-304);
      complex0.equals(complex8);
      complex6.isNaN();
      complex8.tanh();
      Complex complex9 = complex1.tan();
      complex2.equals(complex9);
      Complex complex10 = new Complex((-349.2081), 1.086550235748291);
      Complex complex11 = complex10.multiply(2.2952518463134766);
      complex8.cos();
      complex11.abs();
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.subtract(1965.61);
      complex2.I.readResolve();
      complex1.isInfinite();
      Complex complex3 = complex2.cos();
      complex3.INF.abs();
      complex0.I.sinh();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.INF.subtract(0.2637155055999756);
      complex0.hashCode();
      complex3.isInfinite();
      Complex complex5 = complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      complex5.INF.getField();
      complex1.ZERO.hashCode();
      Complex complex6 = Complex.valueOf(3084.0, Double.POSITIVE_INFINITY);
      Complex complex7 = (Complex)complex6.readResolve();
      Complex complex8 = complex6.reciprocal();
      Complex complex9 = complex8.ONE.divide(complex6);
      Complex complex10 = complex1.sinh();
      complex10.I.cos();
      complex10.ZERO.abs();
      complex8.pow(complex1);
      complex8.abs();
      complex7.createComplex(0.09819523318950196, 0.0);
      complex6.multiply(complex0);
      complex3.exp();
      Complex complex11 = complex5.conjugate();
      complex11.getArgument();
      complex9.abs();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.subtract(1965.61);
      Complex complex3 = (Complex)complex2.I.readResolve();
      complex2.isInfinite();
      Complex complex4 = complex2.cos();
      complex4.INF.abs();
      complex0.I.sinh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.INF.subtract(0.2637155055999756);
      complex0.hashCode();
      complex5.isInfinite();
      Complex complex6 = complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      complex6.INF.getField();
      complex1.ZERO.hashCode();
      Complex complex7 = Complex.valueOf(3084.0, Double.POSITIVE_INFINITY);
      Complex complex8 = (Complex)complex7.readResolve();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex9.ONE.divide(complex7);
      Complex complex11 = complex1.sinh();
      complex11.I.cos();
      Complex complex12 = complex8.subtract(0.2637155055999756);
      Complex complex13 = complex3.asin();
      complex6.multiply(1257.0);
      complex12.equals((Object) null);
      Complex complex14 = Complex.ONE;
      complex14.sqrt();
      complex13.multiply(0.7615941559557649);
      Complex complex15 = Complex.valueOf(0.0, 3084.0);
      complex15.atan();
      complex10.cosh();
      complex8.nthRoot(2187);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      complex1.sin();
      Complex complex2 = complex1.subtract(4928.29);
      complex1.abs();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex0.add(4928.29);
      complex1.readResolve();
      complex1.readResolve();
      complex3.multiply(complex1);
      complex1.hashCode();
      complex4.multiply(586.214689);
      complex3.negate();
      complex1.nthRoot(167);
      complex5.cos();
      Complex complex6 = new Complex(586.214689);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = Complex.valueOf((-1133.983105863), (-1133.983105863));
      Complex complex6 = complex0.acos();
      Object object0 = complex6.INF.readResolve();
      complex0.getField();
      Complex complex7 = complex6.I.subtract(Double.NaN);
      complex7.sin();
      complex7.ZERO.negate();
      complex7.ONE.log();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.tanh();
      complex9.ONE.add((-40.22957622849347));
      complex8.NaN.subtract(0.0);
      Complex complex10 = Complex.ZERO;
      complex10.multiply(Double.NaN);
      complex9.equals(object0);
      complex2.sqrt();
      complex4.multiply(0.0);
      complex5.atan();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-2000.171555664), (-2000.171555664));
      Complex complex1 = new Complex((-2000.171555664));
      complex0.I.add(complex1);
      complex0.I.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.subtract(complex2);
      complex3.I.toString();
      complex3.multiply(1.0);
      Complex complex4 = complex1.conjugate();
      complex4.pow(1.0);
      Complex complex5 = complex3.multiply(complex0);
      Complex complex6 = complex5.ZERO.pow(0.0);
      Complex complex7 = complex5.I.sqrt();
      Complex complex8 = complex5.divide((-2000.171555664));
      Complex complex9 = complex8.NaN.asin();
      complex6.INF.exp();
      complex1.atan();
      complex0.getImaginary();
      Complex complex10 = new Complex((-2000.171555664), (-2000.171555664));
      Complex complex11 = complex10.ZERO.add(0.0);
      complex5.divide(complex7);
      complex9.multiply(4316);
      complex0.exp();
      Complex complex12 = complex8.multiply(1);
      complex10.tanh();
      complex11.reciprocal();
      complex12.isInfinite();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-296.354), (-296.354));
      Complex complex1 = Complex.valueOf((-296.354));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf((-296.354), (-296.354));
      Complex complex5 = complex4.NaN.add(complex1);
      Complex complex6 = complex4.NaN.createComplex((-296.354), (-296.354));
      Complex complex7 = complex4.INF.tanh();
      Complex complex8 = (Complex)complex0.readResolve();
      complex1.getImaginary();
      complex1.negate();
      Complex complex9 = complex1.conjugate();
      complex0.toString();
      complex9.reciprocal();
      Complex complex10 = new Complex((-296.354));
      complex10.getField();
      complex5.equals((Object) null);
      complex6.isNaN();
      complex7.tanh();
      complex1.tan();
      Complex complex11 = (Complex)complex1.readResolve();
      complex6.equals(complex11);
      complex1.multiply(0.0);
      complex3.cos();
      complex3.abs();
      complex8.sqrt();
      Complex complex12 = Complex.valueOf(1.736302375793457, 1.736302375793457);
      complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.subtract((-2826.2282));
      Complex complex4 = Complex.I;
      complex4.abs();
      Complex complex5 = complex4.divide(complex0);
      complex1.pow(complex0);
      Complex complex6 = complex3.add((-1688.8778113237));
      complex6.readResolve();
      complex4.readResolve();
      Complex complex7 = complex2.multiply(complex6);
      complex3.hashCode();
      complex5.multiply(259.687902);
      complex3.negate();
      complex3.nthRoot(2998);
      complex7.cos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.nthRoot(292);
      complex0.equals(complex0);
      Complex complex1 = Complex.valueOf(0.10379679501056671, (-3210.56713103));
      complex1.add(complex0);
      complex0.multiply(294.0939);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.NaN.abs();
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ONE.sqrt();
      complex3.NaN.multiply(complex0);
      complex1.I.atan();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.NaN);
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex5.ONE.acos();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex0.atan();
      complex8.sqrt1z();
      Complex complex9 = new Complex(Double.NaN);
      Complex complex10 = Complex.I;
      complex6.add(complex10);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.subtract(1965.61);
      complex2.I.readResolve();
      complex1.isInfinite();
      Complex complex3 = complex2.cos();
      complex3.INF.abs();
      complex0.I.sinh();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.INF.subtract(0.2637155055999756);
      complex0.hashCode();
      complex3.isInfinite();
      Complex complex5 = complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      complex5.INF.getField();
      complex1.ZERO.hashCode();
      Complex complex6 = Complex.valueOf(3084.0, Double.POSITIVE_INFINITY);
      complex6.readResolve();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.ONE.divide(complex6);
      Complex complex9 = complex1.sinh();
      complex9.I.cos();
      complex9.ZERO.abs();
      complex7.pow(complex1);
      complex7.abs();
      complex2.conjugate();
      complex0.subtract(0.0);
      complex8.sinh();
      complex4.subtract(3084.0);
      complex8.add(complex5);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract((-745.3698905701));
      complex3.INF.abs();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex4.asin();
      complex4.exp();
      Complex complex7 = complex1.atan();
      complex7.getImaginary();
      Complex complex8 = new Complex((-349.2081), 2314.84701259);
      Complex complex9 = complex1.add((-349.2081));
      complex3.getField();
      Complex complex10 = new Complex(0.0);
      complex9.equals(complex10);
      complex10.isNaN();
      complex9.tanh();
      Complex complex11 = complex8.tan();
      Complex complex12 = Complex.valueOf(1277.2048);
      complex12.equals(complex3);
      Complex complex13 = Complex.NaN;
      complex13.multiply(0.0);
      complex5.cos();
      complex6.abs();
      complex6.sqrt();
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.subtract(1965.61);
      complex2.I.readResolve();
      complex1.isInfinite();
      Complex complex3 = complex2.cos();
      complex3.INF.abs();
      Complex complex4 = complex0.I.sinh();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.INF.subtract(0.2637155055999756);
      complex0.hashCode();
      complex3.isInfinite();
      complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      complex3.log();
      Complex complex7 = complex2.reciprocal();
      complex4.tanh();
      Complex complex8 = Complex.ZERO;
      complex8.add(3084.0);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 0.2637155055999756);
      complex0.asin();
      Complex complex10 = complex3.multiply(1965.61);
      Object object0 = new Object();
      complex6.equals(object0);
      complex7.sqrt();
      complex10.multiply(0.2637155055999756);
      complex7.atan();
      Complex complex11 = Complex.ONE;
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.asin();
      complex0.ONE.tanh();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.NaN.sinh();
      Complex.valueOf((-1133.983105863), (-1133.983105863));
      Complex complex4 = complex0.acos();
      Complex complex5 = (Complex)complex4.INF.readResolve();
      complex0.getField();
      Complex complex6 = complex4.I.subtract(Double.NaN);
      Complex complex7 = complex6.sin();
      complex6.ZERO.negate();
      complex4.getField();
      complex0.hashCode();
      Complex complex8 = Complex.valueOf((-1133.983105863), (-1133.983105863));
      complex3.readResolve();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex6.divide(complex3);
      complex0.sinh();
      Complex complex11 = complex10.cos();
      Complex complex12 = Complex.valueOf(Double.NaN, 1.3405964389498495E-8);
      complex12.abs();
      complex2.pow(complex8);
      Complex complex13 = new Complex((-896.2552547438484), 3320.858983739626);
      complex13.abs();
      complex9.conjugate();
      Complex complex14 = Complex.ZERO;
      complex14.subtract(0.0);
      complex11.sinh();
      complex7.subtract(Double.NaN);
      complex5.add(complex14);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      Complex complex1 = Complex.valueOf(0.0, 0.999999979413738);
      Complex complex2 = complex0.multiply((-742));
      Complex complex3 = complex0.tan();
      complex3.isInfinite();
      Complex complex4 = complex1.divide((-1604.477555));
      Complex complex5 = complex2.add(1700.45075264);
      Complex complex6 = complex0.negate();
      Complex complex7 = complex1.pow(complex4);
      complex7.subtract(complex5);
      Complex complex8 = complex6.asin();
      complex7.sinh();
      Complex complex9 = Complex.INF;
      complex3.sqrt1z();
      complex2.createComplex((-2868.468821), 2372.4947748);
      Complex complex10 = complex0.multiply(complex8);
      complex4.exp();
      complex10.conjugate();
      complex7.getArgument();
      complex2.abs();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4928.29);
      complex0.readResolve();
      complex0.getField();
      Complex complex1 = complex0.subtract(508.15826648746935);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.negate();
      Complex complex4 = Complex.valueOf(508.15826648746935);
      Complex complex5 = complex4.log();
      Complex complex6 = new Complex(4928.29);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.INF;
      complex8.tanh();
      complex3.add(508.15826648746935);
      complex0.subtract(1.034295393635379E59);
      complex7.asin();
      Complex complex9 = complex2.multiply(508.15826648746935);
      Complex complex10 = Complex.ONE;
      complex5.equals(complex10);
      complex3.sqrt();
      Complex complex11 = Complex.I;
      complex11.multiply(776.7332);
      complex3.atan();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-745.3698905701));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.subtract((-745.3698905701));
      complex3.INF.abs();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex3.pow(complex4);
      complex0.add((-349.2081));
      complex1.readResolve();
      complex1.readResolve();
      complex1.INF.multiply(complex0);
      complex4.hashCode();
      Complex complex6 = complex5.multiply(Double.POSITIVE_INFINITY);
      complex6.INF.negate();
      complex2.nthRoot(2998);
      complex3.cos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.I.readResolve();
      complex0.ONE.negate();
      Complex complex2 = complex0.asin();
      complex2.I.createComplex((-2050.29043782593), Double.POSITIVE_INFINITY);
      complex2.log();
      complex2.sin();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      complex0.I.readResolve();
      complex0.INF.divide(0.0);
      complex0.sqrt();
      Complex complex2 = complex0.sinh();
      complex2.sqrt();
      complex0.I.readResolve();
      Complex complex3 = complex2.ONE.subtract(complex0);
      complex1.getImaginary();
      complex3.subtract(complex0);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getReal();
      Complex complex1 = Complex.ZERO;
      complex1.NaN.cosh();
      complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex2.I.sin();
      Complex complex5 = complex1.INF.tanh();
      Complex complex6 = complex0.subtract(complex1);
      complex4.INF.atan();
      Complex complex7 = complex6.multiply(complex5);
      Complex complex8 = complex4.sqrt1z();
      complex8.ONE.readResolve();
      Complex complex9 = complex5.conjugate();
      complex7.nthRoot(17);
      complex6.isNaN();
      complex4.add(complex7);
      Complex complex10 = complex7.sinh();
      complex6.ONE.multiply(complex9);
      complex0.exp();
      complex5.cos();
      complex9.sin();
      Complex complex11 = complex10.sqrt();
      Complex complex12 = complex11.ZERO.divide((-974.598));
      complex6.exp();
      complex5.getField();
      complex12.I.multiply(17);
      complex10.add(complex6);
      complex12.atan();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.ONE.subtract(0.0);
      complex0.getImaginary();
      complex0.NaN.createComplex((-614.0420242967457), (-614.0420242967457));
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex0.multiply(1.0);
      Complex complex5 = complex4.NaN.pow(1409.2726686606084);
      complex4.I.multiply(0.0);
      complex5.INF.add(complex3);
      complex4.ONE.exp();
      complex4.getReal();
      Complex complex6 = complex3.pow(complex4);
      complex6.INF.sin();
      Complex complex7 = complex1.sqrt1z();
      complex7.asin();
      Complex.valueOf((-1433.41058), 1.0);
      complex2.sqrt();
      Complex.valueOf((-614.0420242967457));
      complex4.nthRoot(1);
      complex2.negate();
      complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1034.4));
      Complex complex1 = Complex.valueOf((-1034.4), 20.0);
      complex0.divide(complex1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.reciprocal();
      complex3.I.pow(20.0);
      Complex.valueOf(1.5692921723471877E-213);
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex2.createComplex((-1034.4), 20.0);
      complex2.ZERO.pow((-1034.4));
      Complex complex6 = complex4.pow(0.0);
      complex6.hashCode();
      complex0.exp();
      complex6.sqrt();
      complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(4.6588861918718874E-15);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.multiply(complex1);
      complex1.ZERO.toString();
      Complex complex4 = complex3.I.subtract(complex2);
      complex4.ONE.abs();
      complex4.readResolve();
      Complex complex5 = complex1.conjugate();
      complex4.acos();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex6.add(0.45994341373443604);
      Complex complex8 = complex7.add(0.45994341373443604);
      complex7.multiply(complex8);
      complex0.sin();
      Complex complex9 = Complex.INF;
      complex7.pow(complex9);
      complex5.pow(1.0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.NaN.abs();
      Complex complex2 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ONE.sqrt();
      complex3.NaN.multiply(complex0);
      Complex complex4 = complex1.I.atan();
      complex4.ONE.readResolve();
      Complex complex5 = complex0.ONE.atan();
      Complex complex6 = complex5.ONE.acos();
      complex5.INF.reciprocal();
      Complex complex7 = complex0.atan();
      complex7.sqrt1z();
      complex5.add(Double.NaN);
      Complex complex8 = Complex.I;
      complex6.add(complex8);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-2000.171555664), (-2000.171555664));
      Complex complex1 = new Complex((-2000.171555664));
      complex0.I.add(complex1);
      complex0.I.abs();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.subtract(complex2);
      complex3.I.toString();
      complex3.multiply(1.0);
      Complex complex4 = complex1.conjugate();
      complex4.pow(1.0);
      Complex complex5 = complex3.multiply(complex0);
      Complex complex6 = complex5.ZERO.pow(0.0);
      complex5.I.sqrt();
      Complex complex7 = complex5.divide((-2000.171555664));
      complex7.NaN.asin();
      Complex complex8 = complex6.INF.exp();
      Complex complex9 = complex1.atan();
      complex0.getImaginary();
      Complex complex10 = new Complex((-2000.171555664), (-2000.171555664));
      Complex complex11 = complex10.ZERO.add(0.0);
      complex11.INF.getField();
      complex0.equals(complex10);
      complex9.isNaN();
      complex9.tanh();
      complex1.tan();
      complex6.equals("qU*%9'|\"5|>Kf");
      Complex complex12 = complex6.multiply(1.0);
      Complex complex13 = complex6.cos();
      complex8.abs();
      complex13.sqrt();
      complex12.getArgument();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.log();
      Complex complex1 = complex0.NaN.divide(258.243);
      Complex complex2 = Complex.valueOf(258.243);
      complex0.abs();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.I.cos();
      complex1.sqrt();
      complex4.asin();
      complex5.isInfinite();
      complex2.exp();
      complex3.isInfinite();
      complex4.toString();
      complex1.isNaN();
      Complex complex6 = complex0.subtract(complex2);
      complex6.createComplex(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2433054447174072);
      complex0.I.multiply((-2699));
      Complex complex1 = complex0.INF.sin();
      complex1.ONE.toString();
      complex0.abs();
      Complex complex2 = Complex.valueOf(3939.6827622, 1.2433054447174072);
      Complex complex3 = complex0.NaN.multiply((-2699));
      complex3.I.tan();
      complex0.isInfinite();
      complex2.ONE.divide(508.15826648746935);
      Complex complex4 = complex1.add(1700.45075264);
      Complex complex5 = complex2.negate();
      complex4.pow(complex3);
      complex4.subtract(complex2);
      Complex complex6 = complex4.asin();
      complex6.ONE.sinh();
      Complex complex7 = Complex.INF;
      complex7.INF.sqrt1z();
      complex7.ONE.createComplex(0.0, 508.15826648746935);
      complex1.multiply(complex7);
      Complex complex8 = complex5.exp();
      complex3.conjugate();
      complex8.getArgument();
      complex8.abs();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.valueOf((-2592.0));
      complex1.NaN.subtract(complex2);
      Complex complex3 = new Complex((-2592.0), 4.0651709187617596E-117);
      Complex complex4 = complex3.NaN.conjugate();
      complex4.ZERO.asin();
      Complex complex5 = complex0.divide(complex3);
      complex5.ONE.pow(4.0651709187617596E-117);
      Complex complex6 = complex3.I.multiply(1419.216328574);
      complex6.asin();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex7.I.add(4.0651709187617596E-117);
      Complex complex9 = complex0.divide(470.5130029);
      complex9.asin();
      Complex complex10 = complex7.multiply(1352);
      Object object0 = complex3.readResolve();
      complex10.equals(object0);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4928.29);
      Complex complex1 = complex0.ZERO.cos();
      complex0.getField();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1447.42768809171), (-1447.42768809171));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex1.NaN.conjugate();
      complex1.ZERO.sinh();
      Complex complex5 = complex0.pow(0.0);
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex6.add((-1447.42768809171));
      complex0.NaN.multiply(1);
      complex5.sin();
      complex0.tan();
      complex1.createComplex(0.0, (-2459.8908045716));
      complex4.add(complex6);
      Complex complex8 = complex7.tanh();
      complex8.ONE.getArgument();
      complex4.exp();
      complex3.divide(complex0);
      complex2.sin();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow(853.224);
      Complex complex3 = complex0.negate();
      complex2.I.multiply(4198);
      complex3.log();
      complex3.hashCode();
      complex1.getField();
      Complex complex4 = complex3.negate();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex3.negate();
      complex6.ONE.tan();
      Complex complex7 = complex4.add((-3789.16837297641));
      Complex complex8 = complex7.I.subtract(complex5);
      complex8.exp();
      complex4.NaN.add(853.224);
      complex7.NaN.add(0.0);
      Complex complex9 = complex0.NaN.pow(0.0);
      Complex complex10 = complex1.ONE.sqrt1z();
      complex1.getArgument();
      complex4.isInfinite();
      complex6.getImaginary();
      complex2.readResolve();
      Complex complex11 = Complex.ONE;
      complex5.pow(complex11);
      Complex complex12 = Complex.valueOf((-831.499), 0.0);
      complex1.getImaginary();
      complex9.getField();
      complex12.tan();
      complex10.subtract((-3789.16837297641));
      Complex.valueOf(1885.89, 0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(3.216046320616945E29);
      Complex complex1 = complex0.NaN.sqrt1z();
      complex1.NaN.divide(complex0);
      Complex complex2 = complex0.conjugate();
      complex0.isNaN();
      Complex complex3 = complex1.reciprocal();
      complex3.INF.atan();
      complex3.NaN.readResolve();
      complex3.getField();
      complex2.getArgument();
      Complex complex4 = complex0.acos();
      complex4.multiply(complex2);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex1.divide(complex3);
      complex6.ZERO.multiply(0);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      complex1.ONE.pow(complex0);
      complex1.INF.sqrt();
      complex1.I.asin();
      Complex complex2 = complex0.ZERO.multiply((-284.0421));
      complex2.INF.readResolve();
      double double0 = (-2034.0);
      double double1 = 0.0;
      try { 
        complex0.nthRoot((-2494));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,494
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 82.5830360588);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(1900.598);
      int int0 = 1;
      complex0.INF.nthRoot(1);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.nthRoot(292);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf(0.10379679501056671, (-3210.56713103));
      complex1.add(complex0);
      complex0.multiply(294.0939);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex3.cosh();
      complex4.INF.getArgument();
      complex1.ONE.pow(1.5707963267948966);
      complex2.I.sqrt();
      complex2.I.pow(1.5707963267948966);
      complex1.getArgument();
      int int0 = (-808);
      try { 
        complex2.nthRoot((-808));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -808
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(25.13096385463503);
      complex1.ZERO.cosh();
      Complex complex2 = complex0.multiply((-2124.1815803991008));
      Complex complex3 = complex0.ONE.pow(20.0);
      complex3.NaN.toString();
      complex2.getField();
      complex0.INF.multiply((-2124.1815803991008));
      Complex complex4 = complex0.ONE.multiply(complex2);
      Complex complex5 = complex4.I.cos();
      try { 
        complex5.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.reciprocal();
      complex0.hashCode();
      complex0.nthRoot(2867);
      Complex complex2 = complex1.INF.sin();
      complex0.readResolve();
      complex1.getReal();
      complex2.multiply(1);
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1132.0));
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex1.INF.hashCode();
      Complex complex3 = complex1.INF.exp();
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex3.ONE.tan();
      Complex complex6 = complex4.NaN.cos();
      complex6.ZERO.pow(complex0);
      Complex complex7 = complex0.exp();
      Complex complex8 = Complex.valueOf((-1132.0), 0.0);
      complex1.ZERO.multiply(complex8);
      Complex complex9 = complex3.add(0.0);
      Complex complex10 = complex9.ONE.subtract(complex0);
      complex10.ONE.pow(Double.POSITIVE_INFINITY);
      complex4.isInfinite();
      Complex complex11 = complex7.log();
      Complex complex12 = complex11.NaN.sin();
      complex12.ZERO.multiply(0);
      complex11.INF.exp();
      complex5.abs();
      Complex complex13 = complex7.negate();
      complex13.NaN.exp();
      complex1.asin();
      complex13.divide(Double.NaN);
      Complex complex14 = complex2.sinh();
      complex14.INF.sqrt();
      complex7.readResolve();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.subtract((-380.115));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.pow(complex1);
      complex3.hashCode();
      Complex complex4 = complex2.tan();
      complex4.INF.asin();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      complex0.sinh();
      complex0.conjugate();
      Complex complex2 = complex0.divide((-436.1));
      Complex complex3 = complex2.subtract(complex1);
      complex0.NaN.tan();
      complex3.ONE.add(complex1);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.subtract(1965.61);
      complex2.I.readResolve();
      complex1.isInfinite();
      Complex complex3 = complex2.cos();
      complex3.INF.abs();
      complex0.I.sinh();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.INF.subtract(0.2637155055999756);
      complex0.hashCode();
      complex3.isInfinite();
      Complex complex6 = complex1.ONE.subtract(Double.POSITIVE_INFINITY);
      complex6.INF.getField();
      complex1.ZERO.hashCode();
      Complex complex7 = Complex.valueOf(3084.0, Double.POSITIVE_INFINITY);
      complex7.readResolve();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex8.ONE.divide(complex7);
      Complex complex10 = complex1.sinh();
      complex10.I.cos();
      complex10.ZERO.abs();
      Complex complex11 = complex8.pow(complex1);
      complex8.abs();
      complex2.conjugate();
      Complex complex12 = complex0.subtract(0.0);
      Complex complex13 = complex9.sinh();
      complex12.subtract((-1.0));
      complex11.add(complex5);
      complex13.cosh();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.NaN.cosh();
      complex0.NaN.log();
      complex1.getField();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.pow(complex2);
      complex2.add(0.0);
      Complex complex5 = Complex.NaN;
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3595.345112279));
      complex0.NaN.toString();
      Complex complex1 = complex0.subtract((-3595.345112279));
      Complex complex2 = complex0.divide(1192.09395);
      complex2.getImaginary();
      complex0.toString();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex4.INF.add((-1939.0));
      Complex complex6 = complex5.ONE.subtract(741.5);
      Complex complex7 = complex1.multiply(0.0);
      complex7.ZERO.sinh();
      Complex complex8 = complex1.sin();
      Complex complex9 = complex3.INF.exp();
      Complex complex10 = complex3.negate();
      Complex complex11 = complex10.add(complex1);
      Complex complex12 = complex0.INF.sqrt();
      Complex complex13 = complex12.NaN.multiply((-3595.345112279));
      complex9.cos();
      complex10.ZERO.tanh();
      Complex complex14 = complex0.createComplex((-1321.14220658122), (-3595.345112279));
      complex3.ONE.getField();
      complex9.getImaginary();
      Complex complex15 = complex8.negate();
      complex14.I.multiply((-728.5005105714898));
      complex11.sqrt();
      complex13.readResolve();
      complex15.divide(complex14);
      complex6.multiply(1);
      complex12.cos();
      complex13.getField();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2325.83890116053, (-2.6993478083348727E-303));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1374.4726));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.ONE.divide(2005.79113);
      complex0.pow(complex1);
      complex1.subtract((-370.90020914032004));
      Complex complex2 = complex0.divide(2005.79113);
      complex2.I.subtract(2760.183109527493);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(133.1225963653683, 0.0);
      Complex complex1 = complex0.ZERO.negate();
      complex1.I.getArgument();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1870.339390767655));
      Complex.valueOf((-1870.339390767655));
      Complex complex2 = complex0.ONE.add((-2158.5));
      complex1.createComplex(1.0839714455426386E-8, (-1870.339390767655));
      Complex complex3 = complex0.pow(complex1);
      complex2.INF.exp();
      complex1.getField();
      complex3.toString();
      Complex complex4 = complex2.tanh();
      complex4.ZERO.asin();
      complex2.getReal();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.ONE.tanh();
      Complex complex3 = complex1.INF.pow(complex0);
      Complex complex4 = complex3.NaN.sinh();
      Complex.valueOf((-1133.983105863), (-1133.983105863));
      Complex complex5 = complex0.acos();
      Object object0 = complex5.INF.readResolve();
      complex0.getField();
      Complex complex6 = complex5.I.subtract(Double.NaN);
      complex6.sin();
      complex6.ZERO.negate();
      complex6.ONE.log();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex7.tanh();
      complex8.ONE.add(0.0);
      complex7.NaN.subtract(0.0);
      Complex complex9 = complex7.asin();
      complex9.multiply(Double.NaN);
      complex8.equals(object0);
      Complex complex10 = complex2.sqrt();
      complex4.multiply(0.0);
      complex10.atan();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = new Complex((-296.354), (-296.354));
      Complex complex1 = Complex.valueOf((-296.354));
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.valueOf((-296.354), (-296.354));
      Complex complex5 = complex4.NaN.add(complex1);
      complex4.NaN.createComplex((-296.354), (-296.354));
      complex4.INF.tanh();
      complex0.readResolve();
      complex1.getImaginary();
      complex1.negate();
      Complex complex6 = complex1.conjugate();
      complex0.toString();
      complex6.reciprocal();
      complex5.divide(complex2);
      Complex complex7 = complex1.multiply(4316);
      complex7.exp();
      complex3.multiply((-1210));
      complex7.tanh();
      complex5.reciprocal();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.INF.subtract(0.0);
      Complex complex3 = complex1.NaN.add(0.0);
      Complex complex4 = complex0.INF.multiply(628);
      complex4.abs();
      complex0.reciprocal();
      Complex complex5 = complex1.ONE.subtract((-1062.3317));
      Complex complex6 = complex2.divide(0.0);
      complex6.NaN.add(0.0);
      Complex complex7 = complex3.negate();
      complex2.getReal();
      Complex complex8 = complex5.tan();
      Object object0 = complex8.readResolve();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.add((-853.5));
      Complex complex2 = complex0.negate();
      complex2.ZERO.pow(complex0);
      Complex complex3 = complex0.atan();
      complex3.INF.hashCode();
      complex0.readResolve();
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = complex4.sqrt1z();
      complex5.sqrt();
      Complex complex6 = complex2.createComplex(0.2607102394104004, (-853.5));
      Complex complex7 = complex6.atan();
      Complex complex8 = complex1.ONE.conjugate();
      assertEquals(1.0, complex8.getReal(), 0.01);
      
      complex0.getReal();
      Complex complex9 = complex1.cos();
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      complex0.log();
      Complex complex10 = complex1.multiply(complex3);
      Complex complex11 = complex10.reciprocal();
      complex11.NaN.negate();
      assertSame(complex11, complex10);
      
      complex0.isNaN();
      complex2.acos();
      complex4.negate();
      Complex complex12 = complex3.add(0.0);
      assertSame(complex12, complex5);
      
      complex7.subtract(0.0);
      assertEquals(1.5707959689032243, complex7.getReal(), 0.01);
      assertEquals((-0.001171646589665148), complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.add(0.0);
      Complex complex3 = complex2.multiply(0.0);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      
      Complex complex4 = complex0.acos();
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.isInfinite();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex3.I.sqrt1z();
      assertEquals(1.4142135623730951, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      complex3.INF.getField();
      complex0.hashCode();
      Object object0 = complex2.readResolve();
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(object0.equals((Object)complex1));
      assertNotSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.ONE.readResolve();
      complex0.NaN.exp();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex3.subtract(2477.0);
      double double0 = complex4.NaN.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      Complex complex6 = complex4.asin();
      complex6.ZERO.hashCode();
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = Complex.I;
      Complex complex8 = complex3.pow(complex7);
      Complex complex9 = complex4.sqrt1z();
      Complex complex10 = complex1.subtract(complex8);
      assertSame(complex8, complex3);
      
      Object object0 = new Object();
      complex7.equals(object0);
      Complex complex11 = complex9.exp();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex11.getReal(), 0.01);
      assertTrue(complex9.equals((Object)complex1));
      
      Complex complex12 = Complex.valueOf(0.0, Double.NaN);
      Complex complex13 = complex4.add(complex12);
      assertFalse(complex13.equals((Object)complex2));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertSame(complex12, complex5);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertSame(complex13, complex10);
  }
}
