/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:48:09 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2.277490434635744E11));
      complex1.asin();
      Complex complex2 = Complex.valueOf(1636.75944656701, (-4185.47727));
      Complex complex3 = complex1.tan();
      complex3.nthRoot(830);
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-4185.47727));
      Complex complex7 = complex6.tan();
      Complex complex8 = new Complex((-845516.0303999999));
      Complex complex9 = complex1.subtract(complex7);
      complex9.add(complex6);
      complex9.pow((double) 830);
      complex0.multiply(20.0);
      complex0.acos();
      complex9.cosh();
      complex3.abs();
      complex4.reciprocal();
      complex7.abs();
      Complex complex10 = Complex.INF;
      complex5.nthRoot(1556);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.ONE;
      complex2.multiply(0.9999999999999746);
      Complex complex4 = Complex.ONE;
      complex3.pow(complex4);
      Complex complex5 = Complex.valueOf(20.0);
      complex5.tanh();
      complex0.ZERO.sqrt();
      complex1.nthRoot(1381);
      complex0.conjugate();
      complex4.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.asin();
      complex2.abs();
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = complex3.tan();
      complex3.sinh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ZERO;
      complex3.add(complex5);
      Complex complex7 = new Complex(1839.04, Double.NaN);
      complex7.multiply((-1820.6));
      complex0.acos();
      complex0.reciprocal();
      complex2.abs();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(complex0);
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      complex0.hashCode();
      Complex complex3 = complex2.tan();
      complex1.divide(465.91606);
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      complex1.abs();
      Complex complex2 = Complex.valueOf(1121.2, 2239.0672038565035);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.sinh();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.NaN;
      complex3.NaN.multiply(complex6);
      Complex complex7 = complex3.add(complex0);
      Complex complex8 = complex4.I.multiply((-3204));
      complex8.ZERO.pow(2239.0672038565035);
      Complex complex9 = complex2.multiply((-919.52));
      complex9.acos();
      Complex complex10 = Complex.I;
      complex8.reciprocal();
      complex5.abs();
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(3.8072183820435085E293);
      complex0.INF.log();
      Complex complex1 = Complex.I;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(1.5707963267948966, (-921.41184));
      Complex complex1 = complex0.I.asin();
      complex1.ONE.subtract(2.0);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex0.log();
      complex3.ZERO.atan();
      complex3.add(2.0);
      Complex complex4 = complex1.add((-128.3453009900035));
      Complex complex5 = complex4.ONE.log();
      complex4.I.acos();
      Complex complex6 = complex2.negate();
      complex6.reciprocal();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.divide(Double.NaN);
      complex0.NaN.asin();
      complex0.ONE.createComplex(1214.025650157696, 1214.025650157696);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-893.528));
      complex0.INF.divide(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.exp();
      complex0.createComplex(Double.POSITIVE_INFINITY, 4642.32508);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = new Complex(2.0, (-0.3118209738411757));
      Complex complex2 = new Complex(Double.NaN, (-0.3118209738411757));
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.divide(complex3);
      Complex.valueOf(2.0, (-0.3118209738411757));
      complex0.tan();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(3.8072183820435085E293, 3.8072183820435085E293);
      Complex complex1 = Complex.valueOf(3.8072183820435085E293);
      complex0.readResolve();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5.437621235842016E-4);
      Complex complex1 = complex0.negate();
      complex1.abs();
      complex0.readResolve();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.ONE.sinh();
      complex2.getField();
      Complex complex4 = complex2.I.pow(complex0);
      complex4.I.add(complex3);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.add(9.070955547940684E-5);
      Complex complex7 = complex6.subtract(complex5);
      complex7.abs();
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex2.divide(complex6);
      Complex complex10 = complex2.atan();
      complex10.ZERO.hashCode();
      complex8.negate();
      Complex.valueOf(20.0);
      complex9.toString();
      complex4.subtract(9.070955547940684E-5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      complex2.INF.toString();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.ONE.multiply(complex3);
      complex4.INF.multiply(complex3);
      Complex complex5 = complex3.NaN.createComplex(1.7778006940716296E-4, 1.7778006940716296E-4);
      complex3.ZERO.tan();
      complex3.negate();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex1.multiply((-5771.5918054));
      complex8.I.add(complex7);
      Complex complex9 = complex0.pow(complex7);
      complex2.I.log();
      Complex complex10 = complex2.asin();
      Complex complex11 = complex10.ONE.atan();
      complex2.tan();
      Complex complex12 = complex9.divide(complex7);
      Complex complex13 = complex6.tan();
      complex13.I.sqrt1z();
      complex8.readResolve();
      complex2.multiply((-1167086));
      complex13.reciprocal();
      complex1.equals(complex12);
      complex11.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(complex0);
      complex0.getReal();
      Complex complex2 = complex0.asin();
      complex0.pow(0.0);
      Complex complex3 = complex2.add(9.07095586626383E-5);
      complex2.add(complex1);
      Complex.valueOf(2.0);
      Complex complex4 = complex3.multiply(9.07095586626383E-5);
      complex1.tanh();
      Complex complex5 = complex4.reciprocal();
      complex5.acos();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(10.461825002242957, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      complex0.getReal();
      Complex complex3 = Complex.valueOf((-2756.0491756769547), (-2756.0491756769547));
      complex1.tan();
      complex2.reciprocal();
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(10.461825002242957, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      complex0.getReal();
      Complex.valueOf((-2756.0491756769547), (-2756.0491756769547));
      Complex complex3 = complex1.tan();
      complex3.hashCode();
      complex3.NaN.subtract(1130.02816);
      Complex complex4 = Complex.ZERO;
      complex1.ONE.abs();
      complex4.reciprocal();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.pow((-919.52));
      Complex complex3 = complex1.add(1.0033721426962048E-8);
      Complex complex4 = Complex.valueOf((-919.52));
      complex2.add(complex4);
      Complex.valueOf(2560.31070668);
      complex2.multiply(Double.NaN);
      Complex complex5 = Complex.valueOf(Double.NaN, (-0.8407712554027597));
      complex5.tanh();
      complex3.multiply(1477.7785328343664);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = Complex.valueOf((-890.86292312), (-23.499642858));
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.subtract(complex1);
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = Complex.I;
      complex6.getReal();
      complex4.toString();
      complex1.negate();
      Complex complex7 = Complex.valueOf(1254094.4276114148, (-731.469));
      Complex complex8 = new Complex(37.0);
      Complex complex9 = complex8.tan();
      Complex complex10 = Complex.ZERO;
      complex2.add(complex0);
      complex6.multiply(Double.NaN);
      complex5.acos();
      Complex complex11 = new Complex(37.0);
      complex9.tanh();
      complex3.tanh();
      complex6.pow(1204.8251);
      Complex complex12 = Complex.ZERO;
      complex12.tanh();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = new Complex(397.405267718524, 397.405267718524);
      Complex complex2 = complex1.subtract(complex0);
      complex2.divide(complex0);
      complex0.getReal();
      Complex complex3 = Complex.valueOf(2142.661, Double.NaN);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sinh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.add(complex2);
      complex7.NaN.reciprocal();
      Complex complex8 = complex4.multiply(2933.4);
      complex4.acos();
      double double0 = -0.0;
      Complex complex9 = new Complex(-0.0);
      complex7.tan();
      Complex complex10 = complex1.tanh();
      Complex complex11 = Complex.NaN;
      complex7.tanh();
      Complex complex12 = complex10.pow(Double.NaN);
      complex12.ZERO.cosh();
      int int0 = (-269);
      try { 
        complex8.nthRoot((-269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -269
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = new Complex(10.461825002242957, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      complex0.getReal();
      Complex complex3 = Complex.valueOf((-2756.0491756769547), (-2756.0491756769547));
      complex1.tan();
      Complex complex4 = Complex.ZERO;
      complex0.add(complex4);
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex3.acos();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex4.isInfinite();
      Complex complex6 = complex2.exp();
      complex0.add(complex6);
      complex1.multiply(813);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex((-1091.88140622553));
      Complex complex3 = new Complex((-20.0));
      complex3.NaN.hashCode();
      Complex complex4 = complex1.tanh();
      complex3.tanh();
      complex0.pow(2290.06);
      complex2.add(complex4);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = new Complex(10.461825002242957, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide(complex2);
      complex0.getReal();
      complex3.getReal();
      Complex complex4 = Complex.valueOf((-161.53578681), 10.461825002242957);
      complex4.tan();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.add(complex5);
      complex1.multiply(1254094.4276114148);
      complex1.acos();
      Complex complex7 = Complex.NaN;
      complex3.tan();
      complex1.tanh();
      complex7.tanh();
      complex6.pow(10.461825002242957);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = new Complex(10.461825002242957, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      complex0.getReal();
      Complex complex3 = Complex.valueOf((-2756.0491756769547), (-2756.0491756769547));
      complex1.tan();
      Complex complex4 = Complex.ZERO;
      complex0.add(complex4);
      complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.acos();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex4.isInfinite();
      Complex complex7 = complex2.exp();
      complex0.add(complex7);
      complex5.multiply(1281);
      complex3.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = new Complex(10.461825002242957, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.divide(complex2);
      complex0.getReal();
      Complex complex4 = Complex.valueOf((-2756.0491756769547), (-2756.0491756769547));
      complex1.tan();
      Complex complex5 = Complex.ZERO;
      complex0.add(complex5);
      complex5.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.acos();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex6.tan();
      complex3.tanh();
      Complex complex8 = Complex.NaN;
      complex8.tanh();
      complex4.pow(0.40741634368896484);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.negate();
      complex1.ZERO.pow(2237.585);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.add(complex0);
      complex4.ZERO.getArgument();
      complex4.INF.add((-919.52));
      complex2.ZERO.subtract((-919.52));
      complex0.INF.sqrt1z();
      complex4.isInfinite();
      complex4.sqrt1z();
      complex2.isInfinite();
      Complex.valueOf(4.6588861918718874E-15, 0.0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1196.0));
      complex0.getField();
      Complex complex1 = new Complex(418.90936292, 5.437621235842016E-4);
      complex1.getField();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.divide(complex2);
      complex3.getReal();
      Complex complex4 = Complex.valueOf((-919.52), 20.0);
      Complex complex5 = complex4.tan();
      Complex complex6 = Complex.ZERO;
      complex2.add(complex5);
      complex0.multiply(0.6905817003766437);
      Complex complex7 = complex2.acos();
      Complex complex8 = new Complex((-1196.0));
      Complex complex9 = complex3.tan();
      complex9.tanh();
      Complex complex10 = new Complex(418.90936292);
      complex10.tanh();
      complex7.pow(0.5534584522247314);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-893.528));
      complex0.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.negate();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      complex1.getField();
      Complex complex3 = new Complex(5014.3516832, 1.0);
      complex2.getField();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex4.divide(complex0);
      complex1.getReal();
      Complex complex7 = complex4.multiply(1901);
      Complex complex8 = Complex.NaN;
      complex8.tan();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.NaN;
      complex5.add(complex10);
      Complex complex11 = complex7.multiply((double) 1901);
      complex6.add((-21.36952517002848));
      complex11.subtract(Double.NaN);
      complex10.sqrt1z();
      Complex complex12 = Complex.valueOf((-21.36952517002848), -0.0);
      complex12.subtract(complex7);
      Complex complex13 = new Complex(1.0, 5014.3516832);
      complex13.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.negate();
      complex1.ZERO.pow(2237.585);
      Complex complex3 = complex0.exp();
      complex3.ZERO.multiply(complex2);
      complex3.add(complex0);
      complex0.tan();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.sqrt();
      complex0.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sqrt();
      complex2.abs();
      complex0.ONE.readResolve();
      Complex complex3 = complex0.I.tan();
      complex0.ONE.cos();
      Complex complex4 = Complex.ONE;
      complex4.I.acos();
      complex3.multiply(1125);
      Complex complex5 = complex1.atan();
      complex5.multiply(0.0);
      complex3.cos();
      Complex complex6 = new Complex((-21.36952517002848));
      complex1.subtract(complex2);
      complex5.pow(24.48);
      Complex complex7 = complex4.asin();
      complex3.add(3643.621459721);
      complex2.toString();
      complex7.readResolve();
      complex4.divide(0.0);
      complex6.nthRoot(1453);
      complex4.toString();
      complex3.cosh();
      complex4.getField();
      Complex complex8 = Complex.I;
      complex8.pow((-575.10176367));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.237894048535414E-172, 908.15);
      Complex complex1 = complex0.ZERO.conjugate();
      complex1.ONE.readResolve();
      Complex complex2 = complex1.ZERO.add(78.95683520871486);
      complex2.readResolve();
      complex1.sqrt();
      complex1.exp();
      complex1.NaN.sqrt();
      complex1.I.nthRoot(1102);
      complex0.ONE.sqrt1z();
      Complex complex3 = Complex.valueOf(101.65538821513607);
      complex1.I.conjugate();
      Complex complex4 = complex0.subtract((-1472.0982097325025));
      Complex complex5 = complex0.multiply(complex4);
      Complex.valueOf(2.237894048535414E-172);
      Complex.valueOf(2.237894048535414E-172, (double) 1102);
      Complex complex6 = Complex.valueOf(908.15, (-746.60941));
      complex6.ZERO.negate();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex3.add(2.237894048535414E-172);
      complex8.INF.sqrt();
      complex0.add(complex5);
      complex1.cosh();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex9.ZERO.acos();
      complex10.NaN.subtract((-1870.65903930126));
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      complex0.INF.negate();
      Complex complex2 = complex1.ZERO.pow(2237.585);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.add(complex0);
      complex4.ZERO.getArgument();
      complex2.asin();
      Complex complex5 = complex4.add(Double.NaN);
      complex2.toString();
      Object object0 = new Object();
      complex5.divide((-2318.54558985649));
      try { 
        complex3.nthRoot((-2034458192));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,034,458,192
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.negate();
      complex0.toString();
      Complex complex4 = complex3.sinh();
      complex4.toString();
      complex3.hashCode();
      Complex complex5 = complex2.subtract(7.091600108064668E-8);
      Complex complex6 = Complex.I;
      complex4.exp();
      complex1.getArgument();
      complex5.hashCode();
      complex5.equals(complex4);
      complex0.exp();
      complex1.sin();
      complex3.reciprocal();
      complex2.cos();
      complex0.subtract(1.7767978843119276);
      complex6.isInfinite();
      complex4.getField();
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      complex1.INF.reciprocal();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex4.ONE.negate();
      complex5.toString();
      Complex complex6 = complex4.INF.sinh();
      complex6.INF.toString();
      complex1.hashCode();
      Complex complex7 = complex2.subtract(0.0);
      Complex complex8 = Complex.I;
      complex8.ZERO.exp();
      complex7.getArgument();
      Complex complex9 = complex2.add(3421.514176598);
      complex9.subtract(0.0);
      complex3.sqrt1z();
      Complex complex10 = Complex.ONE;
      complex10.ONE.pow(Double.NaN);
      complex10.subtract(complex4);
      complex3.reciprocal();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex1.pow(2.0);
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.add(complex2);
      complex3.getArgument();
      double double0 = 2.0;
      complex5.add(2.0);
      // Undeclared exception!
      complex5.ZERO.nthRoot(2146650143);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.getField();
      Complex complex1 = new Complex(1.0, 653.3539133230286);
      complex0.getField();
      Complex complex2 = complex1.subtract(complex0);
      complex2.getField();
      Complex complex3 = complex1.divide(complex0);
      complex3.getReal();
      complex2.multiply(1390);
      complex0.tan();
      Complex complex4 = Complex.ZERO;
      complex1.add(complex2);
      complex0.multiply((-1197.73519584));
      Complex.valueOf(487.4373875300082, 2.210442148596269E80);
      complex0.tanh();
      Complex.valueOf(2.0, 0.08692999184131622);
      Complex.valueOf((double) 1901);
      Complex complex5 = new Complex(2.210442148596269E80, 163.58847833075714);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-1722.4), 2.1288872215266507E-8);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex1.NaN.multiply(2.1288872215266507E-8);
      complex0.ONE.subtract(complex1);
      Complex complex5 = complex3.ONE.multiply(7);
      complex5.I.pow((-1722.4));
      Complex complex6 = complex2.sqrt1z();
      complex6.toString();
      complex1.nthRoot(206);
      complex1.getField();
      Complex complex7 = complex3.reciprocal();
      complex7.ZERO.readResolve();
      complex5.cosh();
      complex1.sin();
      complex3.pow(complex2);
      Complex complex8 = complex2.log();
      complex8.NaN.sin();
      complex2.nthRoot(1356);
      Complex complex9 = Complex.valueOf((double) 7, (-1722.4));
      complex9.I.acos();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = new Complex((-919.52), (-919.52));
      complex4.getField();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.INF;
      complex6.getReal();
      Complex complex7 = complex0.multiply(1901);
      complex3.tan();
      Complex complex8 = Complex.ZERO;
      complex4.add(complex7);
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf((-919.52), 2.210442148596269E80);
      Complex complex9 = new Complex((-919.52));
      Complex.valueOf(2.210442148596269E80, 5.437621235842016E-4);
      Complex.valueOf(2125.63278015435);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.add(complex0);
      complex4.INF.add((-919.52));
      complex2.ZERO.subtract((-919.52));
      complex0.INF.sqrt1z();
      Complex complex5 = complex1.NaN.cosh();
      complex4.getArgument();
      Complex.valueOf((-919.52));
      complex1.conjugate();
      complex5.conjugate();
      complex4.negate();
      complex0.pow(1200.1367184498533);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-3.141592653589793));
      Complex complex3 = (Complex)complex0.readResolve();
      complex0.getField();
      Complex complex4 = new Complex((-2432.23113));
      Complex complex5 = complex1.subtract(complex4);
      complex4.getField();
      complex0.divide(complex3);
      complex0.getReal();
      complex4.multiply(7);
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.ZERO;
      complex1.add(complex6);
      complex0.multiply((-3.141592653589793));
      Complex.valueOf(40799.0, 2.210442148596269E80);
      complex2.tanh();
      Complex.valueOf(2.210442148596269E80, Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf((-1031.717831404));
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 2693.723);
      Complex complex2 = complex0.subtract(6.283185307179586);
      complex1.INF.multiply(complex0);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.atan();
      Complex complex6 = new Complex(6.283185307179586);
      Complex complex7 = complex4.I.pow(0.0);
      complex6.abs();
      Complex complex8 = complex2.multiply(complex5);
      Complex complex9 = complex0.pow(complex6);
      Complex complex10 = complex9.NaN.sqrt();
      complex8.equals(complex5);
      complex5.getField();
      complex1.cosh();
      Complex.valueOf(2693.723);
      complex3.hashCode();
      complex5.atan();
      complex10.isNaN();
      complex0.cos();
      complex2.reciprocal();
      complex7.divide((-376.139983185));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.INF.reciprocal();
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex2.ZERO.cos();
      complex5.ONE.negate();
      complex2.toString();
      Complex complex6 = complex5.INF.sinh();
      complex6.INF.toString();
      complex1.hashCode();
      Complex complex7 = complex2.subtract(0.0);
      Complex complex8 = complex7.ZERO.exp();
      complex7.I.getArgument();
      complex8.NaN.hashCode();
      complex2.equals(complex2);
      complex1.ONE.divide(complex8);
      complex2.exp();
      Complex complex9 = complex3.sin();
      complex7.toString();
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex10.NaN.cos();
      complex10.I.sqrt();
      complex11.NaN.nthRoot(1205);
      complex5.subtract(0.0);
      complex9.isInfinite();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.getField();
      Complex complex1 = new Complex(2.0, 1.0);
      complex0.I.getField();
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.getField();
      complex0.ONE.divide(complex1);
      complex0.getReal();
      complex0.INF.multiply(1901);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.ZERO;
      complex4.add(complex3);
      complex3.multiply(2.210442148596269E80);
      Complex.valueOf(2.0, 5.437621235842016E-4);
      complex1.tanh();
      Complex.valueOf(0.08692999184131622, 1.0);
      Complex.valueOf((-37.47841760435743));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.getArgument();
      Complex.valueOf((-3.141592653589793));
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.add((-2432.23113));
      complex2.readResolve();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.pow(complex4);
      complex0.divide((-0.6905817003766437));
      complex5.multiply(2575.45117868);
      complex3.sqrt1z();
      Complex complex6 = Complex.ZERO;
      complex0.getArgument();
      complex4.hashCode();
      Object object1 = complex1.readResolve();
      object0.equals(object1);
      Complex complex7 = complex2.exp();
      complex1.sin();
      complex1.asin();
      Complex complex8 = Complex.INF;
      complex8.hashCode();
      Object object2 = new Object();
      Object object3 = complex7.readResolve();
      complex7.equals(object3);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cosh();
      complex1.getArgument();
      Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.conjugate();
      complex0.getImaginary();
      complex3.conjugate();
      complex2.negate();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.add(complex0);
      complex4.INF.add((-919.52));
      Complex complex5 = complex2.ZERO.subtract((-919.52));
      Complex complex6 = complex0.INF.sqrt1z();
      Complex complex7 = complex2.subtract(complex1);
      complex7.NaN.cosh();
      complex4.getArgument();
      Complex.valueOf(3.141592653589793);
      complex5.conjugate();
      complex6.getImaginary();
      complex2.conjugate();
      complex1.negate();
      complex1.sqrt1z();
      complex3.add(complex2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = Complex.valueOf((-2090.2172));
      complex3.NaN.tan();
      complex2.ONE.negate();
      Complex.valueOf(3320.2217026560465, 3320.2217026560465);
      Complex complex4 = complex0.multiply((-845516.0303999999));
      try { 
        complex4.NaN.nthRoot((-2917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,917
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      complex0.asin();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.add(0.0);
      complex0.pow(complex3);
      Complex complex5 = complex0.sin();
      complex0.cosh();
      complex1.negate();
      complex2.readResolve();
      Complex.valueOf(0.0);
      complex4.tan();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.getArgument();
      Complex.valueOf((-3.141592653589793));
      complex0.readResolve();
      Complex complex2 = complex1.add((-2432.23113));
      complex2.readResolve();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex0.divide((-0.6905817003766437));
      complex5.multiply(2575.45117868);
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = Complex.ZERO;
      complex8.add(complex6);
      complex7.multiply(3.495384792953975E-252);
      Complex complex9 = Complex.valueOf((-3.141592653589793), 0.0);
      complex9.tanh();
      Complex.valueOf(4.806078883451016E-80, 3.495384792953975E-252);
      Complex.valueOf((-3539.272118571));
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.pow(complex0);
      complex2.reciprocal();
      complex1.cosh();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex2.negate();
      complex3.toString();
      Complex complex5 = complex1.sinh();
      complex4.toString();
      complex2.hashCode();
      Complex complex6 = complex5.subtract((-934.886699454935));
      Complex complex7 = Complex.I;
      complex6.exp();
      complex5.getArgument();
      Complex complex8 = Complex.ONE;
      complex8.hashCode();
      complex5.equals(complex7);
      Complex complex9 = complex6.exp();
      Complex complex10 = complex5.sin();
      complex10.toString();
      complex5.cos();
      complex9.nthRoot(1240);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(3.141592653589793);
      Complex complex3 = Complex.valueOf(3.141592653589793);
      complex3.readResolve();
      Complex complex4 = complex2.add(433.03492);
      complex2.readResolve();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.acos();
      complex4.pow(complex1);
      complex4.divide((-919.52));
      Complex complex7 = complex2.multiply(0.28008490800857544);
      complex6.sqrt1z();
      complex7.add(complex2);
      complex5.multiply(433.03492);
      Complex complex8 = Complex.I;
      complex8.tanh();
      Complex.valueOf((-1.0), (-4.740494808228372E-43));
      Complex.valueOf(433.03492);
      Complex.valueOf(433.03492);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-293.9), (-293.9));
      Complex complex1 = complex0.tan();
      complex1.readResolve();
      complex1.exp();
      Complex.valueOf((-1748.8531835), (-1748.8531835));
      Complex complex2 = Complex.I;
      complex2.cos();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex0.abs();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf((-2282.2));
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex1.multiply(complex6);
      complex6.ZERO.getArgument();
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = complex8.ZERO.multiply(7);
      complex9.I.atan();
      complex9.NaN.multiply(1455.0);
      Complex complex10 = complex2.cos();
      Complex complex11 = new Complex((-2282.2));
      Complex complex12 = complex1.ONE.subtract(complex11);
      Complex complex13 = complex10.INF.pow(0.0);
      complex13.INF.asin();
      Complex complex14 = complex13.NaN.add(Double.NaN);
      complex14.NaN.subtract(complex12);
      complex14.ZERO.toString();
      complex1.readResolve();
      Complex complex15 = complex3.divide(0.0);
      complex15.I.nthRoot(1248);
      complex0.toString();
      Complex complex16 = complex14.cosh();
      complex16.I.createComplex((-1.2618366811281002E-7), 0.0);
      complex2.getField();
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.INF.add((-919.52));
      Complex complex6 = complex2.ZERO.subtract((-919.52));
      Complex complex7 = complex0.INF.sqrt1z();
      Complex.valueOf((-919.52), (-203.8675));
      Complex complex8 = complex1.cos();
      Complex complex9 = complex0.pow(complex8);
      Complex complex10 = new Complex((-919.52));
      complex5.multiply(complex4);
      complex0.getField();
      complex6.ZERO.divide(complex3);
      complex0.toString();
      complex6.acos();
      Complex complex11 = new Complex((-203.8675));
      complex11.multiply(complex4);
      complex7.sinh();
      Complex complex12 = Complex.INF;
      complex12.toString();
      complex9.getImaginary();
      complex11.add(1727.9660721299192);
      complex5.divide(4.473779311490168E-38);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.getField();
      Complex complex1 = new Complex(2.0, 1.0);
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.getField();
      Complex complex3 = complex0.ONE.divide(complex1);
      complex0.getReal();
      Complex complex4 = complex0.INF.multiply(1901);
      Complex complex5 = complex0.tan();
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex7.subtract(complex6);
      complex3.cosh();
      complex8.getArgument();
      Complex.valueOf((-661.444));
      Complex complex9 = complex2.conjugate();
      complex2.getImaginary();
      complex2.conjugate();
      complex4.negate();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.INF;
      complex1.I.acos();
      Complex complex4 = complex2.divide(complex3);
      complex4.NaN.cos();
      complex1.asin();
      Complex complex5 = Complex.ONE;
      complex4.multiply(0.23957195317984703);
      Complex complex6 = Complex.INF;
      complex6.tanh();
      Complex complex7 = Complex.valueOf((-1175.24570257), 0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.getField();
      Complex complex1 = new Complex(2.0, 1.0);
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.getField();
      Complex complex3 = complex0.ONE.divide(complex1);
      complex0.getReal();
      Complex complex4 = complex0.INF.multiply(1901);
      Complex complex5 = complex3.subtract((-3340.593));
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.exp();
      Complex complex8 = Complex.I;
      complex8.getArgument();
      Complex complex9 = Complex.ZERO;
      complex9.hashCode();
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
      Complex complex10 = complex2.exp();
      complex8.sin();
      complex10.toString();
      complex8.reciprocal();
      complex4.cos();
      complex9.nthRoot(3151);
      complex8.subtract((-3340.593));
      complex7.isInfinite();
      complex6.getField();
      Complex complex11 = new Complex((-0.6905817003766437), 911.14);
      complex11.cosh();
      complex9.equals("(0.5403023058681398, -0.8414709848078965)");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = (Complex)complex1.ZERO.readResolve();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.acos();
      complex0.I.atan();
      complex4.NaN.abs();
      Complex complex5 = complex3.subtract(complex4);
      Complex complex6 = complex5.pow(complex2);
      complex6.ONE.readResolve();
      Complex complex7 = Complex.I;
      complex5.multiply(complex1);
      complex4.getField();
      complex1.toString();
      Complex complex8 = complex7.acos();
      complex2.multiply(complex3);
      Complex complex9 = complex8.sinh();
      complex9.toString();
      complex5.getImaginary();
      complex1.add((-2.1285279690332652));
      complex4.createComplex(Double.NaN, (-20.0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.getField();
      Complex complex1 = Complex.valueOf((-1734.4581665362898), 214.62347821662163);
      complex1.ZERO.getArgument();
      Complex complex2 = Complex.ZERO;
      complex1.divide(complex0);
      Complex complex3 = complex1.multiply((-20.0));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(878.87266, 20.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.add((-293.9));
      Complex complex3 = complex2.acos();
      complex0.getArgument();
      Complex complex4 = Complex.valueOf(1193.915984267098);
      Complex complex5 = Complex.NaN;
      complex4.equals(complex5);
      complex2.multiply(0);
      complex3.divide(0.022752498304317283);
      complex5.createComplex(2.414213562373095, 0.5596157312393188);
      Complex complex6 = complex0.acos();
      complex6.multiply(0);
      Complex complex7 = complex5.tan();
      complex7.tanh();
      Complex complex8 = Complex.INF;
      complex8.tanh();
      Complex complex9 = Complex.ONE;
      complex9.pow(367.6528061);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.NaN.multiply(complex1);
      complex0.tanh();
      complex0.tan();
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.valueOf(0.8393889049772831, (-552.3947661));
      Complex complex4 = complex3.divide(complex2);
      complex4.asin();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex3.asin();
      complex5.hashCode();
      Object object0 = complex0.readResolve();
      complex6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1729.0857602784324), (-1729.0857602784324));
      complex0.INF.getField();
      Complex complex1 = new Complex((-1729.0857602784324), 1.0);
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.getField();
      complex0.ONE.divide(complex1);
      complex0.getReal();
      complex0.INF.multiply(1901);
      Complex complex3 = complex0.tan();
      complex0.readResolve();
      Complex complex4 = complex3.exp();
      Complex.valueOf((-1729.0857602784324), 1.0);
      complex4.INF.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex2.multiply(complex5);
      complex6.NaN.getField();
      complex6.ONE.toString();
      complex4.acos();
      Complex complex7 = complex4.multiply(complex2);
      Complex complex8 = complex7.sinh();
      complex8.ONE.add((double) 1901);
      complex8.INF.toString();
      complex4.getImaginary();
      complex4.add((-1968.18348456971));
      complex2.toString();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.negate();
      complex1.I.toString();
      Complex complex2 = complex1.divide(complex0);
      complex2.INF.divide(complex0);
      Complex complex3 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex1.ONE.exp();
      complex1.I.abs();
      Complex complex4 = complex1.ZERO.createComplex(3095.6059564, 0.0);
      complex0.INF.getField();
      complex0.readResolve();
      complex0.abs();
      complex4.I.log();
      complex1.toString();
      complex4.pow(complex2);
      Complex complex5 = complex3.add(940.794);
      complex5.pow(Double.POSITIVE_INFINITY);
      complex5.hashCode();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex1.ZERO.acos();
      complex0.getImaginary();
      complex0.ONE.add(0.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = complex0.I.pow(2.0);
      complex5.NaN.log();
      Complex complex6 = Complex.valueOf((double) 1);
      Complex.valueOf((-1006.434542341), (-1880.91));
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.I.hashCode();
      complex7.NaN.getArgument();
      complex3.equals((Object) null);
      complex2.atan();
      complex4.sin();
      complex6.conjugate();
      complex0.multiply(1282);
      complex6.hashCode();
      Complex.valueOf(2.0, 4992.5);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.divide(complex3);
      complex1.asin();
      complex4.pow(complex1);
      Complex complex5 = complex4.asin();
      complex0.hashCode();
      complex0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      try { 
        complex0.ZERO.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-665.093254911899), 1.0);
      complex0.INF.getField();
      Complex complex1 = complex0.createComplex((-665.093254911899), (-665.093254911899));
      Complex complex2 = complex1.ONE.add(4032.15);
      Complex complex3 = complex1.INF.pow(complex0);
      complex3.I.abs();
      Complex complex4 = complex1.ONE.conjugate();
      complex4.NaN.multiply(complex2);
      Complex complex5 = complex0.cosh();
      complex5.INF.sinh();
      complex0.abs();
      complex5.equals(complex2);
      Complex complex6 = complex1.sqrt();
      complex3.acos();
      complex0.toString();
      Complex complex7 = complex5.subtract(complex0);
      Complex complex8 = Complex.valueOf(5722.0, 9.453598391231829E-8);
      complex8.abs();
      complex7.tan();
      complex6.createComplex(2329.35977, (-147.37299247));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      complex1.NaN.nthRoot(1);
      Complex complex2 = complex1.ONE.multiply(3.059023470086686E-7);
      Complex complex3 = complex0.asin();
      complex2.subtract(complex1);
      complex0.asin();
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.multiply(3.059023470086686E-7);
      complex5.equals(complex2);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.NaN.pow(complex1);
      complex0.tanh();
      Complex complex3 = complex2.I.acos();
      complex3.ZERO.cos();
      Complex complex4 = Complex.INF;
      complex4.abs();
      Complex.valueOf((-2323.374507857292));
      Complex complex5 = complex1.ZERO.sin();
      Complex complex6 = complex0.divide(complex4);
      complex6.NaN.multiply(0.0);
      complex4.readResolve();
      Complex complex7 = complex4.subtract(complex6);
      complex7.sqrt1z();
      Complex complex8 = complex1.subtract(0.0);
      complex6.sinh();
      complex8.hashCode();
      complex7.isInfinite();
      Complex complex9 = complex0.multiply(276.29338);
      complex9.sinh();
      complex5.pow(complex3);
      complex7.asin();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.cos();
      complex0.ONE.hashCode();
      Complex complex3 = complex1.I.sqrt1z();
      complex3.INF.conjugate();
      complex0.isNaN();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.NaN.cosh();
      Complex complex6 = complex4.INF.tanh();
      Complex complex7 = complex6.I.acos();
      complex7.ONE.nthRoot(1);
      Complex complex8 = complex0.multiply((-671));
      complex8.NaN.pow((double) (-671));
      complex2.INF.negate();
      Complex.valueOf(0.0, 20.0);
      complex5.conjugate();
      complex4.createComplex((-1034.0414901500774), (-1034.0414901500774));
      complex8.divide(complex2);
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.NaN.cos();
      complex10.INF.cosh();
      complex10.I.toString();
      try { 
        complex6.nthRoot((-671));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -671
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2394.241222372, 2394.241222372);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.multiply(1);
      complex2.ZERO.nthRoot(1);
      Complex complex3 = Complex.valueOf(2394.241222372, (double) 1);
      complex1.isInfinite();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.ZERO.tan();
      complex1.ZERO.multiply(1);
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex5.sinh();
      Complex complex10 = complex9.NaN.pow((double) 1);
      complex10.I.getField();
      complex2.getField();
      complex0.asin();
      complex1.divide(complex3);
      complex8.atan();
      complex6.tanh();
      Complex.valueOf(1.0, (-2658.0));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.INF.getField();
      Complex complex1 = new Complex(2.0, 1.0);
      Complex complex2 = complex1.subtract(complex0);
      complex2.NaN.getField();
      complex0.ONE.divide(complex1);
      complex0.getReal();
      complex0.INF.multiply(1901);
      Complex complex3 = complex0.tan();
      complex0.readResolve();
      Complex complex4 = complex3.exp();
      Complex.valueOf(2.0, 1.0);
      Complex complex5 = complex4.INF.cos();
      complex5.I.pow(complex1);
      Complex complex6 = Complex.I;
      Complex complex7 = complex2.multiply(complex6);
      complex7.NaN.getField();
      complex7.ONE.toString();
      complex4.acos();
      Complex complex8 = complex4.multiply(complex2);
      Complex complex9 = complex8.sinh();
      complex9.INF.toString();
      complex4.getImaginary();
      complex4.add((-1968.18348456971));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-2423.914052));
      complex0.NaN.readResolve();
      Complex complex1 = complex0.add((-2423.914052));
      complex1.INF.createComplex((-1.0155552195374609E-134), 1513.188247);
      complex0.I.sin();
      complex0.INF.multiply(1823.67919087);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      complex0.getArgument();
      Complex complex2 = Complex.valueOf(0.0);
      complex0.readResolve();
      Complex complex3 = complex2.add(0.0);
      complex1.readResolve();
      Complex complex4 = Complex.NaN;
      complex4.ZERO.acos();
      complex3.INF.pow(complex4);
      complex3.divide(2575.45117868);
      Complex complex5 = complex1.multiply(2575.45117868);
      Complex complex6 = complex0.sqrt1z();
      complex6.add(complex5);
      complex3.multiply(2575.45117868);
      complex6.tanh();
      Complex.valueOf(1588.067148975539, 0.0);
      Complex.valueOf(0.0);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-125.8176945548377), 9.529727908157224E95);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.reciprocal();
      complex2.I.add((-125.8176945548377));
      Complex complex3 = complex2.INF.acos();
      complex3.NaN.hashCode();
      Complex complex4 = complex1.tan();
      complex4.INF.abs();
      complex4.getImaginary();
      Complex complex5 = complex1.sin();
      complex5.INF.sin();
      complex0.isInfinite();
      complex4.pow(9.529727908157224E95);
      complex0.atan();
      complex0.createComplex(1.0, 0.0);
      Complex complex6 = complex4.add(0.0);
      complex6.acos();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.hashCode();
      complex0.NaN.reciprocal();
      complex0.getArgument();
      Complex complex1 = complex0.cosh();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex((-5403.2346));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.NaN.sqrt();
      complex2.INF.pow((-1593.9716529099862));
      Complex complex4 = complex2.NaN.multiply(complex1);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex0.I.createComplex((-6.97066538508643E-8), 0.0);
      complex5.isInfinite();
      Complex complex7 = complex2.sinh();
      complex7.INF.sin();
      Complex complex8 = Complex.valueOf((-5403.2346));
      Complex complex9 = complex8.multiply(0);
      complex9.I.cos();
      complex9.NaN.abs();
      Complex complex10 = complex6.sqrt();
      complex10.INF.log();
      Complex complex11 = complex2.negate();
      Complex complex12 = complex11.multiply(768.1820248633671);
      complex12.NaN.toString();
      Complex complex13 = complex3.log();
      complex13.I.toString();
      complex2.subtract((double) 0);
      complex9.getImaginary();
      complex10.tanh();
      complex0.divide((-1847.7268333603122));
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2908.0);
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.multiply(2908.0);
      complex2.ONE.sqrt();
      complex1.NaN.abs();
      Complex complex3 = Complex.NaN;
      Complex.valueOf(2908.0);
      Complex complex4 = Complex.valueOf(2908.0, 2908.0);
      complex4.reciprocal();
      complex0.ONE.sin();
      complex4.ONE.pow(2908.0);
      complex2.INF.multiply(complex3);
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.sqrt();
      complex0.getArgument();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.sqrt();
      complex2.abs();
      complex0.ONE.readResolve();
      Complex complex3 = complex0.I.tan();
      Complex complex4 = complex0.ONE.cos();
      Complex complex5 = complex3.NaN.add(1.5707963267948966);
      Complex complex6 = complex5.I.acos();
      complex0.ONE.getArgument();
      Complex complex7 = Complex.valueOf(1193.915984267098);
      complex1.equals(complex7);
      Complex complex8 = complex7.multiply(0);
      Complex complex9 = complex7.divide(1.5707963267948966);
      complex3.createComplex(0.5596157312393188, 1193.915984267098);
      Complex complex10 = complex9.ONE.acos();
      complex10.INF.multiply(0);
      complex4.tan();
      complex8.tanh();
      complex1.tanh();
      complex6.pow((-3380.934668));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.multiply(455);
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.ZERO.sqrt1z();
      complex0.ZERO.abs();
      complex2.NaN.hashCode();
      complex2.I.atan();
      Complex complex5 = complex2.ONE.acos();
      Complex complex6 = complex5.I.reciprocal();
      Complex complex7 = complex2.add(complex0);
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex0.subtract(complex7);
      Complex complex10 = Complex.valueOf(1768.4656851179675, 0.0);
      complex5.NaN.cos();
      Complex complex11 = Complex.valueOf((double) 455, 0.0);
      Complex complex12 = complex5.multiply(complex11);
      Complex complex13 = complex12.NaN.multiply(1768.4656851179675);
      complex9.I.add((double) 455);
      Complex.valueOf(6.283185307179586);
      Complex complex14 = complex8.multiply((double) 455);
      complex11.NaN.exp();
      complex10.isInfinite();
      complex12.divide(0.0);
      complex9.isInfinite();
      complex4.equals(complex1);
      complex6.atan();
      complex13.exp();
      complex14.getReal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3666.25771));
      Complex complex1 = complex0.I.add(0.0);
      complex1.INF.readResolve();
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex0.log();
      complex3.getField();
      Complex complex4 = complex2.multiply(0.0);
      Complex complex5 = complex4.ZERO.tanh();
      complex1.ONE.nthRoot(1);
      complex2.ZERO.getArgument();
      complex0.nthRoot(1);
      complex0.getReal();
      complex1.subtract(complex4);
      complex5.nthRoot(1582);
      complex0.subtract((-599.701970747216));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.sqrt1z();
      complex3.I.subtract(complex2);
      complex1.hashCode();
      complex2.I.getArgument();
      try { 
        complex2.nthRoot((-2520));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,520
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.NaN.sqrt1z();
      complex3.I.exp();
      complex3.ONE.pow(complex1);
      Complex complex4 = complex0.subtract((-1503.9107));
      Complex complex5 = complex2.ZERO.subtract(complex0);
      complex5.INF.log();
      complex4.reciprocal();
      complex2.acos();
      complex3.add(complex2);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.abs();
      Complex complex1 = complex0.I.multiply((-4363));
      Complex complex2 = complex1.INF.subtract(0.0);
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex3.INF.atan();
      Complex.valueOf((-1.0), 1.1177616119384766);
      complex1.sin();
      Complex complex5 = complex0.createComplex(401.861806, 0.0);
      complex5.I.getField();
      complex5.NaN.add(complex4);
      Complex complex6 = complex2.multiply((-4363));
      complex6.NaN.sinh();
      complex4.ONE.sinh();
      complex5.ZERO.divide(2.0);
      Complex complex7 = complex4.subtract(0.0);
      complex7.INF.multiply((-4363));
      complex3.readResolve();
      complex2.INF.add(complex0);
      complex4.atan();
      complex1.pow(complex5);
      Complex complex8 = complex2.divide(complex0);
      complex8.multiply(0.0);
      Complex.valueOf(1520.025, 401.861806);
      complex8.getArgument();
      complex4.cos();
      complex5.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 2693.723);
      Complex complex2 = complex0.subtract(6.283185307179586);
      complex1.INF.multiply(complex0);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex2.divide(complex4);
      Complex complex7 = complex4.I.pow(0.0);
      complex6.abs();
      Complex complex8 = complex2.multiply(complex5);
      Complex complex9 = complex0.pow(complex6);
      Complex complex10 = complex9.NaN.sqrt();
      complex8.equals(complex5);
      complex5.getField();
      complex1.cosh();
      Complex.valueOf(2693.723);
      complex3.hashCode();
      complex5.atan();
      complex10.isNaN();
      complex0.cos();
      complex2.reciprocal();
      complex7.divide((-376.139983185));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex0.abs();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf((-2282.2));
      Complex complex5 = complex4.ONE.atan();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex1.multiply(complex6);
      complex6.ZERO.getArgument();
      Complex complex8 = complex7.add(complex3);
      Complex complex9 = complex8.ZERO.multiply(7);
      complex9.I.atan();
      complex9.NaN.multiply(1455.0);
      Complex complex10 = complex2.cos();
      Complex complex11 = new Complex((-2282.2));
      complex1.ONE.subtract(complex11);
      Complex complex12 = complex10.INF.pow(0.0);
      complex12.INF.asin();
      Complex complex13 = complex12.NaN.add(Double.NaN);
      complex13.ZERO.toString();
      complex1.readResolve();
      Complex complex14 = complex3.divide(0.0);
      complex14.I.nthRoot(1248);
      complex0.toString();
      complex13.cosh();
      complex2.getField();
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.INF.reciprocal();
      complex1.ONE.cosh();
      Complex complex4 = complex2.ZERO.cos();
      Complex complex5 = complex4.ONE.negate();
      complex5.toString();
      Complex complex6 = complex4.INF.sinh();
      complex6.INF.toString();
      complex1.hashCode();
      Complex complex7 = complex2.subtract(0.0);
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.ZERO.exp();
      complex8.I.getArgument();
      complex9.NaN.hashCode();
      complex2.equals(complex8);
      complex2.exp();
      Complex complex10 = complex3.sin();
      complex7.toString();
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex11.NaN.cos();
      complex12.NaN.nthRoot(1205);
      complex4.subtract(0.0);
      complex10.isInfinite();
      complex1.getField();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.add(799.20155648612);
      Complex complex1 = Complex.valueOf(693.140998);
      Complex complex2 = complex1.sqrt();
      complex1.ONE.asin();
      Complex complex3 = complex0.ZERO.pow(complex1);
      complex0.multiply(0);
      Complex complex4 = complex1.cos();
      complex4.sqrt();
      complex4.I.pow(complex2);
      complex4.tan();
      complex1.isNaN();
      complex2.getField();
      complex1.isInfinite();
      complex3.hashCode();
      complex0.createComplex(799.20155648612, 799.20155648612);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-919.52));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.add(complex0);
      complex4.INF.add((-919.52));
      complex2.ZERO.subtract((-919.52));
      Complex complex5 = complex0.INF.sqrt1z();
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = complex6.NaN.cosh();
      complex4.getArgument();
      Complex.valueOf((-919.52));
      complex1.conjugate();
      complex0.getImaginary();
      complex7.conjugate();
      complex4.negate();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getField();
      Complex complex1 = complex0.INF.sinh();
      complex0.createComplex(0.0, 1144.4662937744479);
      Complex complex2 = complex1.pow(complex0);
      complex2.nthRoot(1768);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-699.0829882557));
      Complex complex1 = Complex.valueOf((-699.0829882557));
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex.valueOf((-699.0829882557), 2.415329933166504);
      Complex complex3 = complex0.pow(complex1);
      complex1.I.abs();
      complex3.conjugate();
      complex1.tan();
      Complex complex4 = Complex.NaN;
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      complex1.ZERO.readResolve();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.acos();
      complex3.NaN.abs();
      complex2.subtract(complex3);
      Complex complex4 = complex2.reciprocal();
      complex4.I.cosh();
      complex4.ONE.subtract(complex2);
      complex2.isNaN();
      complex2.isNaN();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0);
      complex1.NaN.reciprocal();
      complex1.NaN.getField();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.add(532.1);
      complex0.tanh();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex3.ZERO.log();
      complex6.I.cos();
      complex0.I.pow(0.0);
      Complex complex7 = complex3.ONE.cos();
      complex4.I.getArgument();
      complex1.cosh();
      complex3.cosh();
      Complex complex8 = complex5.reciprocal();
      complex8.multiply((-189.482));
      complex4.ZERO.multiply((double) 0);
      complex8.getArgument();
      complex5.getReal();
      complex7.cos();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-293.9), (-293.9));
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(185.8769473876555, 0.0);
      Complex.valueOf(0.0, 0.0);
      complex0.getArgument();
      complex0.I.readResolve();
      complex0.ZERO.multiply(0.0);
      Complex complex1 = complex0.tanh();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.conjugate();
      complex5.NaN.add(0.0);
      Complex complex6 = complex2.pow(complex3);
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.ZERO.cosh();
      complex1.negate();
      complex6.readResolve();
      Complex.valueOf(0.0);
      complex8.tan();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.isNaN();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex2.I.sinh();
      complex2.INF.divide(complex0);
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.ONE.multiply(0.0);
      complex6.ONE.toString();
      Complex complex7 = complex6.ONE.multiply(1702);
      complex7.NaN.log();
      complex6.readResolve();
      Complex complex8 = complex1.I.pow(complex4);
      Complex complex9 = complex8.NaN.pow(0.0);
      complex9.NaN.abs();
      complex5.divide(Double.NaN);
      complex2.multiply(103);
      Complex.valueOf(1.97577, 1.97577);
      complex3.getImaginary();
      complex8.reciprocal();
      Complex complex10 = complex7.conjugate();
      complex10.toString();
      complex9.multiply(2.2535347938537598);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 1660.11070073567;
      Complex complex1 = Complex.valueOf(0.0, 1660.11070073567);
      complex1.I.sqrt1z();
      Complex complex2 = complex1.INF.divide(complex0);
      complex2.NaN.asin();
      complex0.isInfinite();
      Complex complex3 = complex0.tan();
      complex0.ONE.abs();
      Complex complex4 = complex3.INF.atan();
      complex0.ZERO.sinh();
      complex0.hashCode();
      complex4.isInfinite();
      complex4.getField();
      complex3.sin();
      try { 
        complex0.I.nthRoot((-391));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -391
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1487.746934);
      Complex complex1 = complex0.I.multiply(0.0);
      Complex complex2 = complex0.NaN.asin();
      complex0.toString();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex4.NaN.multiply((-939));
      complex1.I.readResolve();
      complex4.INF.getArgument();
      Complex complex6 = complex0.log();
      assertEquals(7.3050181296927255, complex6.getReal(), 0.01);
      
      Complex complex7 = complex0.subtract(0.0);
      complex1.readResolve();
      complex3.NaN.add(0.0);
      List<Complex> list0 = complex1.nthRoot(37);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(37, list0.size());
      assertTrue(list0.contains(complex1));
      
      Complex complex8 = complex7.I.tan();
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex5.multiply(complex7);
      Complex complex10 = complex9.sqrt1z();
      assertSame(complex9, complex10);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex11 = complex0.tan();
      complex11.NaN.nthRoot(1553);
      complex4.isNaN();
      assertSame(complex4, complex2);
      
      Complex complex12 = complex11.add(0.7853981633974483);
      assertEquals(1.0, complex11.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex12.getReal(), 0.01);
      
      complex3.exp();
      assertTrue(complex0.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex1.NaN.pow(0.0);
      complex2.createComplex(1.0, 0.0);
      Complex complex3 = complex0.tan();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(1.557407724654902, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.ONE.cosh();
      Complex complex6 = complex5.INF.multiply(983);
      Complex complex7 = complex4.INF.sqrt();
      complex7.ZERO.getArgument();
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      
      complex4.ZERO.sin();
      Complex complex8 = complex4.multiply(complex0);
      complex4.isNaN();
      complex2.multiply(0.0);
      Complex complex9 = complex2.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
      
      Complex complex10 = complex8.reciprocal();
      Complex complex11 = complex10.add(complex6);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex5.getReal(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      
      Complex complex12 = Complex.valueOf(0.0, (-953.0));
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals((-953.0), complex12.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.ONE.add((-805.0512118));
      assertEquals((-804.0512118), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.multiply(complex2);
      assertEquals(6.283185307179586, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      complex0.I.add(complex1);
      Complex complex2 = complex0.log();
      int int0 = 0;
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
