/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:41:36 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(1.5707963267948966, Double.POSITIVE_INFINITY);
      complex3.pow(complex4);
      Complex complex6 = new Complex(1.5707963267948966);
      Complex complex7 = complex5.exp();
      Complex complex8 = complex2.pow(complex7);
      Complex complex9 = Complex.ONE;
      complex9.multiply(complex5);
      complex1.asin();
      complex3.cosh();
      complex0.multiply((-1));
      complex2.pow(complex8);
      complex3.nthRoot(2678);
      Complex complex10 = Complex.valueOf(4.1215410760803866E18);
      complex10.sqrt();
      complex8.abs();
      complex7.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((double) 2711, Double.POSITIVE_INFINITY);
      complex1.multiply(942);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.divide(1627.3484673325);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex.valueOf(3.3212950284273017E149, 4.041399585161321E-8);
      complex1.conjugate();
      complex1.INF.cosh();
      Complex complex3 = complex1.I.createComplex((-1144.08476596374), 3.3212950284273017E149);
      Complex complex4 = Complex.valueOf(1.0, (-409.33741698622));
      Complex complex5 = complex3.I.createComplex(4.24835413113866E-18, 85.151244447);
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex0.multiply(complex4);
      complex2.ONE.subtract(complex7);
      Complex complex8 = complex2.NaN.tan();
      Complex complex9 = complex3.negate();
      complex9.ZERO.pow(complex2);
      complex6.ONE.multiply(1042.0);
      complex8.I.getField();
      complex4.log();
      complex2.add(complex7);
      complex1.acos();
      Complex complex10 = complex8.pow(complex6);
      Complex.valueOf(2.0, 1627.3484673325);
      Complex complex11 = complex5.multiply(1497);
      complex11.add(complex10);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = new Complex(5.7798977922675E-228, (-20.0));
      Complex complex2 = complex1.multiply(5.7798977922675E-228);
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.valueOf(5.7798977922675E-228);
      complex4.sin();
      complex3.readResolve();
      complex2.tan();
      Complex complex5 = Complex.valueOf((-20.0), (-20.0));
      complex1.tan();
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sin();
      complex0.add(complex3);
      Complex complex4 = new Complex((-523.00235), (-1863.138864829));
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex(6.283185307179586, Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex((-1863.138864829));
      complex4.cos();
      Complex complex8 = complex5.exp();
      complex0.pow(complex2);
      Complex complex9 = Complex.valueOf((-523.00235));
      complex9.abs();
      Complex complex10 = new Complex(7.164663249266942E-88, Double.POSITIVE_INFINITY);
      complex6.multiply((-626.5087812));
      complex1.pow((-523.00235));
      Complex complex11 = Complex.INF;
      complex11.tan();
      complex8.nthRoot(1848);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = Complex.INF;
      complex1.tan();
      Complex complex2 = Complex.valueOf(1573.064240180505, 20.0);
      complex2.tan();
      Complex complex3 = new Complex(7.099449830809996E-294);
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sin();
      Complex complex3 = new Complex(1379.0956634992, 1379.0956634992);
      Complex complex4 = new Complex((-3693.00199080242), Double.POSITIVE_INFINITY);
      complex2.tan();
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.6993968486785889);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.pow(complex2);
      complex4.abs();
      Complex complex6 = new Complex(2.1301292155181736E133, 2306.571693);
      Complex complex7 = complex5.multiply(398.69);
      complex3.pow(2.1301292155181736E133);
      Complex complex8 = Complex.valueOf((-5.2744376732859406E250));
      complex8.tan();
      complex8.sqrt1z();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex7.cos();
      complex10.multiply(complex9);
      complex7.createComplex(1.6993968486785889, 1.6993968486785889);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      complex0.multiply(1.6993968486785889);
      Complex complex2 = complex0.tan();
      complex2.reciprocal();
      complex2.add(Double.NaN);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.divide(2.4621305031382827E-33);
      Complex complex5 = complex4.tan();
      Complex complex6 = complex1.exp();
      complex6.add((-1444.0));
      complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.multiply(1.9617326259613037);
      Complex complex3 = complex2.tan();
      complex2.abs();
      Complex complex4 = complex1.sin();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, (-5.946190852360168E-8));
      complex3.readResolve();
      complex1.tan();
      Complex complex6 = new Complex(1.9617326259613037, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.NaN;
      complex8.NaN.reciprocal();
      complex6.pow(complex2);
      complex5.sqrt();
      complex6.multiply(Double.NaN);
      complex7.cosh();
      complex4.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(3766.01561709);
      Complex complex2 = complex1.I.subtract(7.099449830809996E-294);
      complex2.abs();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.add(complex1);
      complex4.acos();
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.atan();
      complex2.getArgument();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.add(0.7853981633974483);
      Complex complex5 = complex1.divide((-1031.0));
      complex4.tan();
      complex5.exp();
      complex0.add(2641.9037110090712);
      Complex complex6 = Complex.valueOf((double) (-2216));
      try { 
        complex6.nthRoot((-2216));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,216
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.atan();
      complex3.ONE.acos();
      Complex complex4 = complex3.tanh();
      complex3.NaN.multiply(1.3262420952742104E-4);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex3.add(complex0);
      complex6.I.nthRoot(1038);
      Complex complex7 = Complex.valueOf(1.3262420952742104E-4);
      Complex complex8 = complex5.divide(0.23412620198885903);
      complex8.abs();
      Complex complex9 = complex4.cos();
      complex9.ONE.multiply(1179);
      complex8.negate();
      Complex complex10 = new Complex(1.3262420952742104E-4);
      complex9.hashCode();
      complex3.tan();
      complex5.sin();
      complex2.sqrt1z();
      complex7.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      complex1.getArgument();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex1.add(20.0);
      Complex complex4 = complex1.divide(1912.8216);
      Complex complex5 = complex4.tan();
      complex3.exp();
      Complex complex6 = complex0.add((-1800.367));
      complex6.abs();
      Complex complex7 = complex4.subtract(complex1);
      complex0.tanh();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.asin();
      Complex complex9 = Complex.ZERO;
      complex7.toString();
      complex2.log();
      Complex complex10 = Complex.I;
      complex10.sqrt();
      complex5.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      complex0.atan();
      Complex complex1 = Complex.ONE;
      complex1.sin();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = new Complex((-523.00235), 1209.1627055716006);
      complex0.tan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex5.cos();
      complex2.tan();
      Complex complex6 = new Complex((-523.00235), Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.NaN;
      complex5.cos();
      complex8.pow(complex3);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex0.hashCode();
      Complex complex3 = complex2.tan();
      complex0.sin();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.sin();
      complex1.readResolve();
      Complex complex3 = new Complex((-523.00235), 3371.4);
      complex0.tan();
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(7106640.8041475285);
      complex2.cos();
      complex5.exp();
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.NaN;
      complex6.cos();
      complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-991.008557998793), 2.1863350868225098);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(Double.NaN);
      complex2.cos();
      complex3.exp();
      complex4.tan();
      Complex complex5 = Complex.NaN;
      complex0.cos();
      complex0.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tan();
      complex1.abs();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.sin();
      Complex complex5 = new Complex(2.823809533122494, 3245.9);
      complex3.readResolve();
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex(0.0, (-3161.87669146191));
      complex2.exp();
      Complex complex9 = complex8.tan();
      Complex complex10 = Complex.NaN;
      complex4.cos();
      complex9.getArgument();
      complex0.getReal();
      complex6.exp();
      complex10.pow((-3161.87669146191));
      Complex complex11 = new Complex(2.5938024520874023, (-2657.3));
      Complex complex12 = complex8.subtract(20.0);
      complex10.sqrt();
      complex10.reciprocal();
      Complex complex13 = complex3.reciprocal();
      Complex complex14 = Complex.ZERO;
      complex13.divide((-1547.52157639));
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.tan();
      complex1.abs();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex2.sin();
      Complex complex5 = new Complex(2.823809533122494, 1.6993968486785889);
      Object object0 = complex3.readResolve();
      complex5.tan();
      Complex complex6 = new Complex(20.0, 2048.6806805748943);
      Complex complex7 = new Complex(1.2030221387249185E-4, (-3161.87669146191));
      Complex complex8 = complex4.add(0.33907391687780264);
      complex2.abs();
      complex3.subtract(complex5);
      complex6.tanh();
      complex0.asin();
      Complex complex9 = Complex.ZERO;
      object0.toString();
      complex6.log();
      complex6.sqrt();
      complex8.divide((-3161.87669146191));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.cosh();
      complex0.tan();
      Complex complex3 = Complex.INF;
      complex3.abs();
      complex3.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 5754.9355);
      complex1.getArgument();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.INF;
      complex4.multiply(complex5);
      Complex complex6 = Complex.ZERO;
      complex2.add(complex6);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex1.hashCode();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.cos();
      complex4.getArgument();
      complex1.getReal();
      Complex complex5 = Complex.ZERO;
      complex1.exp();
      Complex complex6 = complex1.pow(1533.3528);
      complex3.subtract(8.017654713159388E-225);
      Complex complex7 = complex6.sqrt();
      complex1.reciprocal();
      complex7.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex1.divide(Double.POSITIVE_INFINITY);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      complex0.multiply(1.6993968486785889);
      Complex complex2 = complex0.tan();
      complex0.abs();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = new Complex(1211.74);
      Complex complex5 = Complex.ZERO;
      complex0.tan();
      complex5.sin();
      complex0.sqrt1z();
      Complex complex6 = complex2.tan();
      complex6.asin();
      complex3.multiply(1211.74);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex1.hashCode();
      Complex complex2 = new Complex((-207.647650442462), 4717.507554387);
      complex0.isNaN();
      Complex complex3 = complex2.acos();
      Complex complex4 = new Complex(1673.9658516961);
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex1.createComplex((-1885.02530542), 709.81215606981);
      Complex complex7 = complex1.divide((-1.0));
      complex5.divide(complex4);
      complex4.getField();
      complex0.multiply(complex7);
      Complex complex8 = Complex.INF;
      complex8.abs();
      complex3.readResolve();
      complex1.conjugate();
      Complex.valueOf(709.81215606981);
      complex6.cosh();
      complex7.sqrt();
      Complex complex9 = Complex.NaN;
      complex9.reciprocal();
      Complex.valueOf(1.5707963267948966, 2.137365001350446);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(1211.74);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = new Complex((-1.1603891006723397E-7), Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.tan();
      complex1.cos();
      complex0.getArgument();
      complex0.getReal();
      Complex complex6 = new Complex(0.7853981633974483);
      complex5.pow((-402.001801577));
      complex5.subtract(2577.7763777116);
      complex0.sqrt();
      complex4.reciprocal();
      Complex complex7 = Complex.valueOf((-2021.1146980641047), Double.POSITIVE_INFINITY);
      complex7.divide(1648.995707984);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex0.abs();
      Complex.valueOf(1211.74);
      Complex complex2 = new Complex((-4493.624));
      complex2.add(complex0);
      Complex complex3 = new Complex(1211.74, (-2098.2114542867816));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.cos();
      complex3.getArgument();
      complex3.getReal();
      Complex complex6 = new Complex(1639.581664152737);
      complex2.pow(Double.NaN);
      complex0.subtract(1211.74);
      complex5.sqrt();
      Complex complex7 = new Complex(4.8677119923665573E-278, (-614.516405212));
      complex7.reciprocal();
      complex3.reciprocal();
      complex6.divide(8.252595441266278E-4);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(1.6993968486785889);
      Complex complex3 = complex0.tan();
      complex0.abs();
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = new Complex(1211.74);
      Complex complex6 = complex3.add(complex5);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-2021.1146980641047));
      complex2.NaN.tan();
      complex3.cos();
      complex7.getArgument();
      complex2.getReal();
      Complex complex8 = new Complex(1.6993968486785889);
      Complex complex9 = complex6.pow(1773.36409108);
      complex9.subtract(2283.2020429297);
      complex8.sqrt();
      complex3.reciprocal();
      Complex complex10 = complex5.reciprocal();
      complex4.divide((-2021.1146980641047));
      Complex complex11 = Complex.INF;
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-4757.109485955309), (-1221.5));
      Complex complex2 = complex0.sin();
      complex1.multiply((-4757.109485955309));
      Complex complex3 = complex2.tan();
      complex2.abs();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex2.negate();
      Complex complex6 = Complex.NaN;
      complex0.exp();
      complex0.nthRoot(2180);
      Complex complex7 = complex1.add((-1221.5));
      complex0.abs();
      Complex complex8 = complex7.subtract(complex4);
      Complex complex9 = complex3.tanh();
      complex6.negate();
      Complex complex10 = Complex.INF;
      Complex complex11 = Complex.NaN;
      complex8.multiply((-1));
      complex5.toString();
      complex4.log();
      complex0.createComplex((-1.0), 1772.2);
      Complex complex12 = Complex.INF;
      complex9.atan();
      complex1.tan();
      Complex complex13 = Complex.valueOf(1.0);
      Complex complex14 = complex13.sinh();
      complex1.isInfinite();
      complex14.cosh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5337974510118784E144, (-1199.569534169328));
      complex0.INF.getArgument();
      Complex complex1 = Complex.valueOf(1.5337974510118784E144);
      complex1.equals(complex0);
      complex1.reciprocal();
      Complex.valueOf((-1624.0), 2.1197632724087982E-4);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4717.507554387, 4717.507554387);
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.add(4717.507554387);
      Complex complex3 = complex0.divide(complex2);
      complex3.ONE.hashCode();
      complex0.I.tan();
      complex3.ZERO.add(complex2);
      Complex complex4 = complex0.sin();
      Complex complex5 = new Complex(0.0, 4717.507554387);
      complex4.ZERO.readResolve();
      Complex complex6 = complex3.tan();
      Complex complex7 = new Complex(4717.507554387, 20.0);
      Complex complex8 = complex6.tan();
      Complex complex9 = complex1.cos();
      complex0.getArgument();
      complex9.getReal();
      complex0.exp();
      complex8.pow(0.0);
      Complex complex10 = complex0.subtract(1.5707963267948966);
      complex6.sqrt();
      complex2.reciprocal();
      complex10.reciprocal();
      Complex complex11 = Complex.ZERO;
      complex11.divide(Double.POSITIVE_INFINITY);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-1199.569534169328));
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex((-1199.569534169328), 1.5337974510118784E144);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.add(complex0);
      complex4.hashCode();
      complex1.isNaN();
      Complex complex5 = complex3.acos();
      Complex complex6 = new Complex(1.408559707497606E293, (-2554.72608490815));
      Complex complex7 = complex5.multiply(complex6);
      Complex complex8 = complex4.createComplex(1.3262420952742104E-4, 0.0);
      complex2.divide((-0.9999986101150921));
      Complex complex9 = complex7.divide(complex3);
      complex8.getField();
      Complex complex10 = Complex.ZERO;
      complex4.multiply(complex10);
      complex9.abs();
      complex1.readResolve();
      complex2.conjugate();
      Complex complex11 = complex7.cosh();
      complex11.sqrt();
      Complex complex12 = Complex.NaN;
      complex8.reciprocal();
      Complex.valueOf(0.6897233724594116, 0.6897233724594116);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      complex1.subtract(1.0);
      complex0.sqrt();
      Complex complex2 = complex0.reciprocal();
      complex0.reciprocal();
      Complex complex3 = complex2.divide(0.9998037022525558);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.reciprocal();
      complex1.tanh();
      complex2.createComplex(0.8813735870195428, Double.POSITIVE_INFINITY);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract(0.41421356237309515);
      Complex complex2 = complex0.ZERO.multiply((-1));
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.INF.readResolve();
      complex3.getField();
      complex0.toString();
      complex2.ONE.nthRoot(426);
      complex0.NaN.sqrt1z();
      complex0.divide(complex2);
      Complex complex4 = complex2.exp();
      complex4.INF.exp();
      Complex complex5 = complex3.ONE.reciprocal();
      Complex complex6 = complex1.pow((double) (-1));
      complex6.multiply(complex5);
      complex1.abs();
      Complex complex7 = complex3.ONE.multiply((double) (-1));
      complex0.divide((double) 426);
      complex7.ONE.getArgument();
      Complex complex8 = complex1.exp();
      Complex.valueOf(4.3079982556221595E-8);
      Complex complex9 = Complex.valueOf(6.890014851450124E-89);
      complex9.INF.sinh();
      complex3.abs();
      complex2.sqrt();
      complex7.createComplex(0.9999986101150921, Double.NaN);
      complex8.reciprocal();
      Complex complex10 = Complex.valueOf((double) 426);
      complex10.INF.hashCode();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(6.890014851450124E-89);
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.ONE.log();
      complex0.abs();
      Complex complex4 = complex0.ONE.negate();
      complex4.INF.divide(complex1);
      Complex complex5 = complex1.exp();
      complex2.INF.nthRoot(297);
      Complex complex6 = complex5.ONE.sqrt();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      complex2.toString();
      complex2.readResolve();
      Complex complex7 = complex6.log();
      complex1.abs();
      complex6.sinh();
      complex3.atan();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1689.888666022));
      complex1.conjugate();
      Complex complex2 = complex0.atan();
      complex2.getArgument();
      Complex.valueOf((-1689.888666022));
      Complex complex3 = complex2.add((-1689.888666022));
      double double0 = (-1593.1915085486091);
      complex0.divide((-1593.1915085486091));
      complex1.tan();
      Complex complex4 = complex2.negate();
      complex3.exp();
      int int0 = 2619;
      // Undeclared exception!
      complex4.nthRoot(1073741848);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1309.82116842476, (-170.266212903));
      complex1.multiply(2180);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1199.569534169328));
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex((-1199.569534169328), 1.5337974510118784E144);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.add(complex0);
      Complex complex5 = new Complex(0.6897233724594116, 1872.02135024);
      complex3.tan();
      complex4.getArgument();
      Complex.valueOf(1.5337974510118784E144);
      complex3.multiply(complex1);
      Complex complex6 = complex5.add(complex1);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(0.29619067907333374, 186.831156751);
      Complex complex1 = new Complex(186.831156751);
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.add(complex3);
      complex4.subtract(0.29619067907333374);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.add((-7.698155155722897E-8));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.ZERO.createComplex((-7.698155155722897E-8), (-7.698155155722897E-8));
      complex1.INF.sinh();
      complex3.ONE.conjugate();
      Complex complex5 = complex2.I.add(complex1);
      complex5.INF.sqrt1z();
      complex5.ONE.cosh();
      complex0.isInfinite();
      Complex complex6 = complex0.multiply(complex1);
      complex6.exp();
      complex6.ONE.sin();
      Complex complex7 = complex2.divide((-7.698155155722897E-8));
      complex7.ZERO.nthRoot(37);
      Complex complex8 = complex2.subtract((-7.698155155722897E-8));
      complex8.INF.multiply((-568));
      Complex complex9 = complex6.divide((-2094.2875));
      complex9.I.toString();
      complex8.sinh();
      complex1.multiply((-1.0));
      complex4.toString();
      Complex.valueOf((double) 37, 0.6857960224151611);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(2.807397988979441E75, 1309.82116842476);
      complex0.getReal();
      complex0.exp();
      Complex complex1 = Complex.ZERO;
      complex1.pow(1773.36409108);
      Complex complex2 = complex0.subtract((-20.0));
      Complex complex3 = complex0.sqrt();
      Complex.valueOf((-20.0));
      complex2.reciprocal();
      complex2.divide(2.807397988979441E75);
      complex3.tanh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(4717.507554387, 4717.507554387);
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.add(4717.507554387);
      Complex complex3 = complex0.divide(complex2);
      complex3.ONE.hashCode();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = complex3.ZERO.add(complex2);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = (Complex)complex6.ZERO.readResolve();
      Complex complex9 = complex3.tan();
      complex4.INF.sinh();
      complex9.hashCode();
      complex0.isNaN();
      Complex complex10 = complex9.acos();
      complex3.NaN.multiply(complex4);
      complex1.hashCode();
      Complex complex11 = complex8.divide(complex9);
      complex7.getField();
      complex9.multiply(complex10);
      complex2.abs();
      Complex complex12 = new Complex((-48.11602153));
      complex5.readResolve();
      complex0.conjugate();
      Complex complex13 = Complex.ONE;
      complex13.cosh();
      Complex complex14 = Complex.valueOf(115.42734461807);
      Complex complex15 = complex14.sqrt();
      complex12.sin();
      complex6.hashCode();
      Complex.valueOf(115.42734461807);
      complex2.divide(115.42734461807);
      complex11.getReal();
      complex15.asin();
      Complex complex16 = Complex.valueOf(782.352048932818, 2.1238058974550874E-214);
      complex5.pow(complex16);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(1.6993968486785889);
      Complex complex3 = complex0.tan();
      complex0.abs();
      Complex complex4 = complex1.NaN.atan();
      Complex complex5 = new Complex(0.9999998667464167, 0.9999998667464167);
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = complex4.sin();
      Complex complex8 = new Complex(0.9999998667464167, 1211.74);
      complex8.exp();
      complex7.readResolve();
      Complex complex9 = complex0.tan();
      complex1.hashCode();
      complex5.isNaN();
      Complex complex10 = complex5.acos();
      Complex complex11 = new Complex(1.6993968486785889, (-4.117971654572494E154));
      Complex complex12 = complex10.multiply(complex11);
      complex8.createComplex(2533.262160314, 1211.74);
      Complex complex13 = complex6.divide((-809.620705));
      Complex complex14 = complex9.divide(complex7);
      complex7.getField();
      complex7.multiply(complex4);
      complex14.abs();
      complex3.readResolve();
      Complex complex15 = complex13.conjugate();
      complex15.I.cosh();
      complex2.cosh();
      complex12.sqrt();
      Complex complex16 = Complex.NaN;
      complex8.reciprocal();
      Complex.valueOf(2407.90594, 2407.90594);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(4717.507554387, 4717.507554387);
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.add(4717.507554387);
      Complex complex3 = complex0.divide(complex2);
      complex3.ONE.hashCode();
      Complex complex4 = complex0.I.tan();
      Complex complex5 = new Complex(213.53048256, 213.53048256);
      Complex complex6 = complex4.add(complex5);
      complex5.add(complex4);
      Complex complex7 = new Complex(4.539993096841499E-5, (-515.5075197482024));
      Complex complex8 = complex2.tan();
      Complex complex9 = complex2.cos();
      complex8.getArgument();
      Complex complex10 = Complex.ONE;
      complex10.getReal();
      complex5.exp();
      Complex complex11 = Complex.I;
      complex11.pow(1.0);
      complex4.subtract((-423.228));
      complex7.sqrt();
      Complex complex12 = new Complex(2809.3783932);
      complex12.reciprocal();
      Complex complex13 = Complex.INF;
      complex13.reciprocal();
      complex6.divide(0.5795059204101562);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      complex1.conjugate();
      complex1.equals(complex1);
      complex0.reciprocal();
      Complex.valueOf((-294.95419657), 1.395158290863037);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      complex0.sin();
      Complex complex1 = complex0.multiply(1.6993968486785889);
      Complex complex2 = complex0.tan();
      complex0.abs();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.negate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.exp();
      complex5.nthRoot(2180);
      complex4.add(1211.74);
      complex0.abs();
      Complex complex7 = complex6.subtract(complex0);
      complex7.tanh();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex3.multiply((-1689));
      complex6.toString();
      Complex complex11 = complex2.log();
      complex3.createComplex(1772.2, 2.403310071255359);
      Complex complex12 = Complex.INF;
      complex12.atan();
      complex6.tan();
      complex5.sinh();
      complex11.isInfinite();
      complex5.cosh();
      Complex complex13 = Complex.valueOf((double) 2619);
      complex13.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(3874.142);
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(1212.8066276278278, 3055.223268);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = new Complex(1212.8066276278278, 3055.223268);
      Complex complex6 = Complex.NaN;
      complex6.tan();
      Complex complex7 = complex2.cos();
      Complex complex8 = Complex.ONE;
      complex8.getArgument();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex0.exp();
      complex10.pow(1211.74);
      complex4.subtract(0.0);
      Complex complex11 = Complex.NaN;
      complex11.sqrt();
      complex7.reciprocal();
      Complex.valueOf(0.0);
      complex6.divide(839.23046);
      complex8.tanh();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      complex0.readResolve();
      Complex complex2 = complex0.tan();
      complex0.hashCode();
      complex1.isNaN();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.valueOf((-1506.1372481), (-788.039907));
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = complex0.createComplex((-149.57129), 0.7071067811865476);
      complex5.divide((-149.57129));
      Complex complex7 = Complex.valueOf((-1506.1372481), (-149.57129));
      complex3.hashCode();
      complex1.divide(complex2);
      complex1.getField();
      complex0.multiply(complex3);
      complex2.abs();
      Complex complex8 = new Complex(543.4249648616666);
      complex7.readResolve();
      complex8.conjugate();
      complex6.cosh();
      Complex complex9 = complex0.sqrt();
      complex9.sin();
      complex9.hashCode();
      Complex.valueOf(0.17922431230545044);
      Complex complex10 = complex4.divide((-1506.1372481));
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4002440108047496, (-37.664629363));
      Complex complex1 = Complex.valueOf((-37.664629363));
      complex1.add(complex0);
      complex0.toString();
      Complex complex2 = complex1.sin();
      complex1.I.atan();
      Complex complex3 = complex2.ONE.pow(complex0);
      Complex complex4 = Complex.valueOf((-37.664629363));
      Complex complex5 = complex1.ZERO.multiply(complex2);
      complex5.I.abs();
      Complex complex6 = complex4.subtract(0.002761211978352358);
      complex3.pow((-37.664629363));
      Complex.valueOf((-37.664629363), (-1.0));
      complex4.abs();
      complex3.pow((-1.0));
      Complex complex7 = complex6.pow(complex0);
      complex0.toString();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-0.33907391687780264), 20.0);
      complex0.getReal();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.807397988979441E75, 1309.82116842476);
      Complex complex2 = new Complex(2.11976335178327E-4, 2.807397988979441E75);
      complex0.getField();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.multiply(complex3);
      complex2.abs();
      Complex complex5 = Complex.INF;
      complex5.readResolve();
      complex4.conjugate();
      Complex complex6 = Complex.I;
      complex6.cosh();
      complex4.sqrt();
      complex0.sin();
      complex3.hashCode();
      Complex.valueOf(2.807397988979441E75);
      complex6.divide(1309.82116842476);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = Complex.valueOf((-381.166627));
      Complex complex3 = complex2.divide(complex0);
      complex0.getField();
      Complex complex4 = complex0.multiply(complex2);
      complex1.abs();
      complex0.readResolve();
      complex2.ONE.divide(complex3);
      complex2.conjugate();
      complex2.cosh();
      complex3.sqrt();
      complex4.sin();
      complex3.hashCode();
      Complex.valueOf((-7.099449830809996E-294));
      complex0.divide(2995.87748056);
      Complex complex5 = new Complex(2995.87748056, 3125.1879);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(1.6993968486785889);
      Complex complex3 = complex0.tan();
      complex0.abs();
      complex1.NaN.atan();
      Complex complex4 = new Complex(1.6993968486785889, 1211.74);
      Complex complex5 = complex3.add(complex4);
      complex1.add(complex3);
      Complex complex6 = new Complex(2.403310071255359, (-2021.1146980641047));
      complex2.NaN.tan();
      complex3.cos();
      complex6.getArgument();
      complex5.sqrt1z();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(3766.01561709);
      Complex complex2 = complex1.I.subtract(7.099449830809996E-294);
      complex2.abs();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex3.add(complex1);
      complex0.getArgument();
      complex3.getReal();
      complex4.exp();
      Complex complex5 = complex2.pow(182.917);
      complex1.subtract(Double.NaN);
      complex5.sqrt();
      Complex complex6 = complex3.multiply(800.8409);
      complex2.reciprocal();
      Complex complex7 = Complex.I;
      complex7.reciprocal();
      complex6.divide(0.7853981633974483);
      complex7.tanh();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      complex1.hashCode();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex4.exp();
      complex4.readResolve();
      complex1.tan();
      complex0.hashCode();
      complex3.isNaN();
      complex6.acos();
      Complex complex7 = complex5.multiply(complex3);
      complex4.createComplex(543.4249648616666, 543.4249648616666);
      Complex complex8 = complex7.divide(0.17922431230545044);
      Complex complex9 = new Complex(543.4249648616666, (-473.611926));
      complex9.NaN.hashCode();
      Complex complex10 = complex8.divide(complex9);
      complex2.getField();
      complex5.multiply(complex7);
      complex10.abs();
      Complex complex11 = new Complex(543.4249648616666);
      complex11.readResolve();
      complex1.conjugate();
      Complex complex12 = complex5.cosh();
      complex8.sqrt();
      complex1.sin();
      complex12.hashCode();
      Complex.valueOf((-0.33907391687780264));
      complex1.divide(1.904987444853009E-11);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(2.807397988979441E75, Double.NaN);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.cos();
      complex2.getArgument();
      complex3.getReal();
      Complex complex4 = complex2.exp();
      complex1.pow((-4580.1181));
      complex2.subtract(2.807397988979441E75);
      complex4.sqrt();
      complex3.multiply((-2021.1146980641047));
      complex0.reciprocal();
      Complex complex5 = complex0.reciprocal();
      complex5.divide(1212.8066276278278);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(4717.5076, 4717.5076);
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.add(4717.5076);
      Complex complex3 = complex0.divide(complex2);
      complex3.ONE.hashCode();
      Complex complex4 = complex0.I.tan();
      complex3.ZERO.add(complex2);
      Complex complex5 = complex2.exp();
      complex4.nthRoot(2619);
      complex1.add(6.283185307179586);
      complex2.abs();
      Complex complex6 = complex3.subtract(complex5);
      Complex complex7 = complex3.tanh();
      Complex complex8 = new Complex(0.0);
      Complex complex9 = Complex.NaN;
      complex2.multiply((-1689));
      complex6.toString();
      Complex complex10 = complex5.log();
      complex9.createComplex(4717.507705988169, (-2030.0129516531367));
      Complex complex11 = complex8.atan();
      complex5.tan();
      complex4.sinh();
      complex9.isInfinite();
      complex11.cosh();
      complex10.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.toString();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.ZERO.exp();
      Complex complex5 = complex4.I.sinh();
      complex5.ZERO.getArgument();
      Complex complex6 = complex1.INF.pow(complex0);
      complex6.ONE.reciprocal();
      Complex complex7 = complex0.cos();
      complex4.add(complex6);
      Complex complex8 = complex0.multiply(37);
      Complex complex9 = Complex.valueOf(2388.5804557336073, (-1533.8555735));
      complex9.INF.createComplex(2121.1813, 1280.033553837);
      complex8.multiply(complex9);
      Complex complex10 = Complex.valueOf((-1.2930091396008281E-8), (double) 37);
      complex3.subtract(complex7);
      complex5.subtract(complex7);
      complex7.isInfinite();
      Complex complex11 = complex2.subtract((-1.2930091396008281E-8));
      Complex complex12 = complex1.sqrt1z();
      Complex complex13 = complex10.sin();
      complex13.negate();
      complex12.ZERO.tan();
      complex12.divide(complex10);
      complex7.divide(complex11);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.sin();
      complex0.pow(0.0);
      complex2.multiply((-3525));
      Complex complex4 = Complex.valueOf((double) (-3525), 0.0);
      complex4.getArgument();
      complex0.ONE.add(3.141592653589793);
      complex3.subtract(3329.0718461430274);
      complex0.abs();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.asin();
      complex0.getField();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getImaginary();
      Complex complex1 = Complex.I;
      complex0.abs();
      Complex complex2 = complex0.subtract(complex0);
      complex2.tanh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.valueOf(1.06662762782776);
      Complex complex6 = complex5.asin();
      complex6.INF.sqrt1z();
      complex0.multiply(1);
      complex0.toString();
      Complex complex7 = complex0.log();
      complex7.I.subtract((double) 1);
      Complex complex8 = complex0.createComplex(1, (-2091.6768));
      complex3.atan();
      complex8.tan();
      complex2.sinh();
      complex0.isInfinite();
      complex0.cosh();
      complex4.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.sqrt1z();
      complex2.ZERO.multiply(3208);
      complex0.ZERO.tanh();
      complex0.isInfinite();
      Complex complex3 = complex1.tan();
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.multiply(1.6993968486785889);
      Complex complex3 = complex0.tan();
      complex0.abs();
      complex1.NaN.atan();
      Complex complex4 = new Complex(1.6993968486785889, 1211.74);
      Complex complex5 = complex3.add(complex4);
      complex1.add(complex3);
      Complex complex6 = new Complex(2.403310071255359, (-2021.1146980641047));
      complex2.NaN.tan();
      complex3.cos();
      complex6.getArgument();
      complex2.getReal();
      Complex complex7 = complex5.exp();
      Complex complex8 = complex5.pow(1773.36409108);
      complex8.subtract(2283.2020429297);
      complex7.sqrt();
      complex5.multiply((-3066.021332776));
      complex3.reciprocal();
      Complex complex9 = complex4.reciprocal();
      complex9.divide(1773.36409108);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.divide(complex0);
      Complex complex1 = complex0.I.asin();
      complex1.INF.acos();
      complex0.conjugate();
      Complex complex2 = complex0.sin();
      complex2.add((-961.37683828189));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2264.8591969);
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf(2264.8591969, 2264.8591969);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.I.add(complex1);
      Complex.valueOf(2264.8591969);
      complex2.reciprocal();
      complex2.INF.atan();
      complex1.INF.atan();
      complex3.createComplex(2264.8591969, 1553.75831892);
      complex2.sin();
      Complex complex4 = complex3.createComplex((-339.6788599), (-797.15896));
      Complex complex5 = Complex.valueOf((-339.6788599));
      Complex.valueOf((-797.15896));
      complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(2.50909423828125, 1.0);
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex0.multiply((-0.9999430520026332));
      complex0.pow(complex2);
      Complex complex3 = Complex.valueOf(1952.3983269878, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0);
      complex3.equals(complex5);
      complex4.reciprocal();
      complex1.subtract((-0.9884961116572022));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5337974510118784E144, (-1199.569534169328));
      complex0.INF.getArgument();
      Complex complex1 = Complex.valueOf(1.5337974510118784E144);
      Complex complex2 = complex0.multiply(complex1);
      complex2.add(complex1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(3874.142);
      Complex complex1 = complex0.createComplex(922.58, 187.4);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.add(187.4);
      Complex complex5 = complex2.multiply((-1110.43));
      complex2.toString();
      complex2.tanh();
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = complex1.multiply(0.0);
      complex7.tan();
      complex2.abs();
      Complex complex8 = new Complex(922.58, 922.58);
      Complex complex9 = complex8.add(complex7);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.add(complex7);
      complex9.getArgument();
      complex9.getReal();
      complex6.exp();
      Complex complex12 = complex4.pow((-256.370272));
      Complex complex13 = complex11.subtract(9.295948298604103E-8);
      complex13.sqrt();
      complex2.multiply((-464.36212222773));
      complex11.reciprocal();
      complex12.reciprocal();
      complex12.divide(0.8813735870195428);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add((-256.370272));
      Complex complex2 = complex0.multiply((-256.370272));
      complex2.toString();
      Complex complex3 = complex1.tanh();
      complex2.pow(complex1);
      Complex complex4 = complex0.multiply((-1.0));
      Complex complex5 = complex4.tan();
      complex5.abs();
      Complex complex6 = complex4.add(complex0);
      complex5.add(complex0);
      complex6.getArgument();
      complex2.getReal();
      Complex complex7 = Complex.valueOf((-2382.252));
      complex7.exp();
      complex3.pow(1872.32484);
      Complex complex8 = complex4.subtract((-2382.252));
      complex1.sqrt();
      Complex complex9 = complex1.multiply(474.110497);
      complex1.reciprocal();
      complex5.reciprocal();
      complex9.divide(Double.NaN);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.INF.acos();
      Complex complex5 = complex0.conjugate();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.asin();
      complex5.multiply(2621);
      complex5.toString();
      complex7.log();
      complex6.createComplex(6.283185307179586, 2621);
      complex0.atan();
      complex4.tan();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      complex8.sinh();
      complex6.isInfinite();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.divide(0.0);
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.NaN.createComplex((-2685.75380714526), 2293.0);
      complex1.subtract(complex0);
      Complex.valueOf(1.0, (-2685.75380714526));
      Complex complex4 = complex0.sinh();
      complex4.acos();
      Complex complex5 = complex4.createComplex((-2685.75380714526), 9.295948298604103E-8);
      complex2.atan();
      complex3.tanh();
      complex5.pow(964.0);
      complex2.log();
      Complex complex6 = Complex.valueOf((-2685.75380714526));
      complex6.readResolve();
      Complex complex7 = Complex.INF;
      complex7.asin();
      Complex.valueOf((-2685.75380714526));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.add((-1145.00982515));
      Complex complex2 = complex0.sqrt();
      complex2.getArgument();
      complex2.abs();
      complex0.getImaginary();
      complex1.nthRoot(368);
      Complex complex3 = new Complex(368, 1.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex1.sqrt1z();
      complex0.abs();
      Complex complex7 = Complex.valueOf((-1145.00982515));
      complex7.readResolve();
      Complex complex8 = Complex.valueOf((double) 368, 1872.32484);
      Complex complex9 = complex4.atan();
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.multiply(1.0);
      complex11.exp();
      Complex complex12 = complex8.add(complex4);
      complex2.toString();
      complex6.multiply(117.17542542506344);
      complex8.cos();
      complex8.nthRoot(2621);
      complex9.divide(complex5);
      complex12.toString();
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = new Complex(2974.41, 2974.41);
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex4.tan();
      Complex complex7 = new Complex(2974.41, 2974.41);
      complex2.equals(complex7);
      complex1.getReal();
      Complex complex8 = complex6.multiply(complex4);
      Complex complex9 = complex5.divide((-2206.90814));
      Complex complex10 = complex3.pow(1.5707963267948966);
      complex8.exp();
      complex8.divide((-2206.90814));
      Complex complex11 = complex9.negate();
      complex0.reciprocal();
      Complex complex12 = complex11.tanh();
      Complex complex13 = new Complex(2974.41, 1011.758436);
      Complex complex14 = complex13.subtract(complex7);
      Complex.valueOf((-20.0), 2381.67684);
      complex10.asin();
      Complex complex15 = complex9.acos();
      complex15.NaN.multiply((-20.0));
      complex9.exp();
      complex0.tanh();
      complex7.readResolve();
      complex2.sqrt1z();
      complex9.subtract(2974.41);
      complex14.cos();
      complex12.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex1.INF.getArgument();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.pow(0.0);
      complex4.ZERO.abs();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex1.I.atan();
      Complex complex7 = complex6.NaN.subtract(0.0);
      complex7.INF.toString();
      Complex complex8 = complex5.tan();
      complex4.toString();
      complex3.isNaN();
      complex4.isInfinite();
      Complex complex9 = complex5.tan();
      complex9.I.cos();
      Complex complex10 = complex5.divide(0.0);
      Complex complex11 = complex10.INF.acos();
      complex5.hashCode();
      Complex complex12 = complex2.atan();
      Complex complex13 = complex12.ONE.multiply(complex8);
      complex13.INF.multiply(361);
      Complex.valueOf(0.0);
      Complex complex14 = complex13.tan();
      complex10.getField();
      complex11.getArgument();
      complex0.divide(0.0);
      Complex complex15 = complex13.cos();
      complex15.NaN.subtract(1480.85293066892);
      Complex complex16 = complex14.subtract(0.7853981633974483);
      Complex.valueOf(Double.NaN, 2.2364990583200056E-234);
      complex16.toString();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.add(complex0);
      complex0.ZERO.toString();
      complex2.toString();
      complex1.ONE.getField();
      Complex complex3 = complex0.ZERO.reciprocal();
      Complex complex4 = complex3.sinh();
      complex0.I.getField();
      complex1.INF.multiply(0.0);
      Complex.valueOf(885.169076035, 885.169076035);
      complex0.hashCode();
      Complex complex5 = complex1.sqrt();
      complex5.abs();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = Complex.valueOf((-20.0), 515.52671186);
      Complex complex8 = complex5.atan();
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
      Complex complex9 = complex7.cos();
      complex9.INF.cos();
      complex8.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.pow(3766.01561709);
      complex1.I.subtract(7.099449830809996E-294);
      Complex complex2 = complex1.NaN.divide(3766.01561709);
      Complex complex3 = complex0.divide(3766.01561709);
      complex1.sqrt1z();
      Complex complex4 = complex2.pow(complex3);
      Complex.valueOf(7.099449830809996E-294, 4833.7884);
      Complex complex5 = complex4.multiply(complex2);
      complex5.isNaN();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.add((-1145.00982515));
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(0.0, (-1395.53));
      complex1.NaN.sinh();
      complex0.NaN.acos();
      Complex complex3 = complex0.createComplex(0.0, (-1395.53));
      Complex complex4 = complex3.ZERO.atan();
      complex4.tanh();
      complex3.I.pow(0.0);
      Complex complex5 = complex2.log();
      complex5.NaN.readResolve();
      complex5.asin();
      Complex.valueOf((-1145.00982515));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.NaN.divide(complex1);
      Complex complex2 = complex0.I.asin();
      complex2.INF.acos();
      Complex complex3 = complex0.conjugate();
      complex0.sin();
      Complex complex4 = complex3.multiply(3.2558720916543104E-263);
      complex4.I.pow(complex1);
      complex4.INF.sqrt1z();
      complex2.equals(complex3);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.I.subtract(complex0);
      complex2.ZERO.sqrt();
      complex0.ONE.getArgument();
      Complex complex3 = complex0.NaN.tanh();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex0.divide(1.0);
      Complex complex6 = complex5.I.subtract(complex0);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex7.NaN.exp();
      Complex complex9 = complex7.INF.sin();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex9.INF.pow(complex10);
      Complex complex12 = complex4.sinh();
      complex12.NaN.atan();
      complex4.isInfinite();
      Complex complex13 = complex0.exp();
      Complex complex14 = complex1.pow(complex13);
      complex14.INF.pow(complex5);
      complex0.nthRoot(1077);
      complex5.hashCode();
      complex2.abs();
      complex3.multiply(1077);
      Complex complex15 = complex4.multiply(complex8);
      complex15.reciprocal();
      complex11.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.toString();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex2.I.getArgument();
      Complex complex3 = complex1.sqrt();
      double double0 = 1.2145042419433594;
      Complex complex4 = complex0.ZERO.pow(complex3);
      Complex complex5 = complex4.NaN.acos();
      complex1.ONE.pow(1.0);
      complex5.INF.divide(complex1);
      Complex complex6 = Complex.valueOf(1.2145042419433594);
      try { 
        complex6.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = 0.0;
      double double1 = (-1950.2419857459);
      Complex complex1 = complex0.I.subtract((-1950.2419857459));
      complex1.INF.sinh();
      Complex complex2 = complex1.add(complex0);
      complex2.I.exp();
      complex0.add(0.0);
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1918.45);
      Complex complex1 = complex0.acos();
      complex0.NaN.getField();
      Complex complex2 = complex1.INF.sinh();
      complex2.NaN.hashCode();
      complex0.isInfinite();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.NaN.atan();
      complex1.INF.negate();
      Complex complex3 = complex0.INF.acos();
      complex3.ZERO.subtract(1.0);
      Complex complex4 = complex1.NaN.sqrt1z();
      Complex complex5 = complex3.subtract(0.0);
      Complex complex6 = complex0.ZERO.add(0.0);
      complex0.NaN.readResolve();
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.I.negate();
      complex3.hashCode();
      Complex complex10 = Complex.valueOf((-25.533), 0.0);
      complex10.INF.readResolve();
      complex10.INF.asin();
      complex10.ONE.abs();
      complex7.getImaginary();
      complex6.readResolve();
      complex6.getField();
      complex2.isInfinite();
      complex0.acos();
      complex0.I.reciprocal();
      Complex complex11 = complex1.subtract(0.0);
      complex11.NaN.log();
      complex5.atan();
      complex9.reciprocal();
      complex4.getImaginary();
      complex7.multiply(2094);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.divide(0.0);
      complex1.ZERO.readResolve();
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.NaN.createComplex((-2685.75380714526), 2293.0);
      Complex complex4 = complex1.subtract(complex0);
      complex1.NaN.abs();
      complex1.getImaginary();
      complex0.ONE.nthRoot(2621);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex5.sqrt1z();
      complex7.abs();
      complex1.readResolve();
      Complex complex8 = Complex.valueOf((-6.0490084078440215E175), (double) 2621);
      complex8.ZERO.atan();
      complex8.NaN.multiply((-2685.75380714526));
      Complex complex9 = complex4.exp();
      Complex complex10 = complex2.add(complex9);
      complex10.ZERO.toString();
      Complex complex11 = complex3.multiply(1.6544084224626834E220);
      complex11.ZERO.cos();
      complex6.nthRoot(1842);
      complex4.INF.divide(complex6);
      complex9.toString();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.I.add(0.0);
      Complex complex5 = complex4.ONE.conjugate();
      complex1.NaN.hashCode();
      Complex complex6 = Complex.valueOf(0.0, 20.0);
      complex0.I.sqrt();
      complex3.NaN.nthRoot(7);
      complex6.ZERO.tan();
      complex4.INF.abs();
      complex5.INF.tan();
      complex5.INF.cos();
      complex1.I.createComplex(567.4, 567.4);
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex7.I.add(complex8);
      complex7.tan();
      Complex complex10 = complex2.pow(complex7);
      complex10.atan();
      complex7.multiply((-1));
      complex3.hashCode();
      complex0.conjugate();
      complex9.conjugate();
      complex8.ZERO.sinh();
      complex7.NaN.sin();
      Complex.valueOf(0.0, 0.0);
      complex10.conjugate();
      complex8.cosh();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.createComplex(922.58, 187.4);
      Complex complex2 = complex1.I.sqrt();
      complex2.INF.add((-256.370272));
      Complex complex3 = complex0.NaN.multiply(474.110497);
      complex3.ONE.toString();
      Complex complex4 = complex0.ONE.tanh();
      Complex complex5 = complex0.INF.pow(complex1);
      complex5.ONE.multiply(0.0);
      Complex complex6 = complex0.tan();
      complex6.NaN.abs();
      Complex complex7 = complex6.add(complex4);
      Complex complex8 = complex0.ONE.add(complex7);
      complex0.getArgument();
      complex4.getReal();
      Complex complex9 = complex8.exp();
      complex6.INF.pow((-256.370272));
      complex9.subtract(922.58);
      complex8.NaN.sqrt();
      complex8.multiply(800.8409);
      Complex complex10 = complex2.reciprocal();
      complex7.INF.reciprocal();
      complex9.divide((-401.21));
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.subtract((-5.526819276639527E-9));
      Complex complex1 = Complex.I;
      complex1.NaN.createComplex(0.0, (-3093.36522804266));
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.getArgument();
      complex2.ONE.pow(complex0);
      Complex complex3 = Complex.valueOf(2.35385270340419584E17);
      complex2.subtract(2.35385270340419584E17);
      complex1.I.cos();
      Complex complex4 = Complex.valueOf((-3093.36522804266), 0.0);
      complex2.readResolve();
      complex4.divide(complex1);
      Complex complex5 = complex1.divide(0.0);
      complex5.abs();
      complex3.getReal();
      Complex.valueOf(0.0, 1840.6202704622);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.I.sqrt();
      int int0 = 1;
      complex1.ZERO.multiply(1);
      complex1.NaN.exp();
      try { 
        complex1.I.nthRoot((-375));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -375
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.NaN.exp();
      complex3.ONE.sinh();
      complex3.INF.multiply(0.0);
      complex0.I.getArgument();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex4.I.reciprocal();
      complex4.toString();
      complex5.ONE.createComplex(1.5707963267948966, 2.0);
      Complex complex6 = complex0.pow(complex1);
      complex5.asin();
      complex4.getImaginary();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex0.sin();
      complex9.INF.multiply(1.5707963267948966);
      Complex complex10 = complex8.asin();
      complex5.sqrt1z();
      Complex complex11 = complex10.tan();
      complex11.NaN.nthRoot(669);
      complex11.NaN.negate();
      Complex.valueOf(Double.NaN);
      complex0.abs();
      complex1.toString();
      Complex.valueOf(Double.NaN);
      complex5.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1.6993968486785889, 1.6993968486785889);
      Complex complex1 = complex0.sin();
      complex0.sqrt1z();
      complex0.isInfinite();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.INF.subtract(complex0);
      complex3.I.cos();
      complex3.ONE.toString();
      complex1.getArgument();
      Complex complex4 = complex0.ZERO.sinh();
      complex1.INF.toString();
      complex1.INF.subtract(complex2);
      Complex complex5 = complex0.acos();
      complex1.cos();
      Complex complex6 = complex5.NaN.log();
      complex1.ONE.pow(0.0);
      Complex complex7 = complex0.pow(0.0);
      complex7.ZERO.asin();
      complex7.INF.createComplex(1516.664438676, (-19.16637641734297));
      complex7.ZERO.toString();
      Complex complex8 = complex2.acos();
      Complex.valueOf((-3877.358929588961));
      complex8.ONE.subtract(Double.NaN);
      complex8.INF.toString();
      complex5.getArgument();
      Complex complex9 = complex5.createComplex((-0.5113252103366475), (-0.5113252103366475));
      complex6.I.reciprocal();
      Complex complex10 = complex6.subtract(complex0);
      complex10.getArgument();
      complex4.readResolve();
      complex9.readResolve();
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(2974.41);
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ZERO;
      complex2.ZERO.add(1213.79724);
      Complex complex3 = complex2.NaN.divide(6.989914264479507E-28);
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex4.ZERO.negate();
      Complex complex6 = complex3.NaN.exp();
      complex3.nthRoot(1204);
      Complex complex7 = complex6.ZERO.add(6.989914264479507E-28);
      complex3.I.abs();
      Complex complex8 = complex0.subtract(complex2);
      complex2.tanh();
      Complex complex9 = complex3.cosh();
      Complex complex10 = complex9.I.asin();
      complex0.multiply(1);
      complex8.toString();
      complex9.log();
      complex4.createComplex(1213.79724, 6.989914264479507E-28);
      complex6.I.atan();
      complex1.tan();
      complex7.sinh();
      complex5.isInfinite();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.INF.atan();
      complex0.I.getArgument();
      Complex complex3 = new Complex(0.0, 0.0);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.tan();
      complex0.equals(complex3);
      complex3.getReal();
      complex2.NaN.multiply(complex5);
      complex2.divide((-2206.90814));
      Complex complex7 = complex5.ONE.pow(2381.67684);
      complex5.ZERO.exp();
      Complex complex8 = complex3.divide((-677.3198973956352));
      complex4.I.negate();
      Complex complex9 = complex8.NaN.reciprocal();
      complex9.I.tanh();
      complex1.subtract(complex5);
      Complex.valueOf(0.0, 293.0);
      Complex complex10 = complex4.asin();
      Complex complex11 = complex8.acos();
      complex5.INF.exp();
      complex11.tanh();
      complex7.readResolve();
      complex6.sqrt1z();
      complex10.subtract(1078.0);
      complex11.cos();
      complex7.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.496772856703278E-221, 6.496772856703278E-221);
      complex0.ONE.readResolve();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      complex0.tan();
      Complex complex2 = complex0.sqrt1z();
      complex2.add(0.0);
      complex1.createComplex((-1416.3656291), (-1416.3656291));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(4717.507554387, 4717.507554387);
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.add(4717.507554387);
      Complex complex3 = complex0.divide(complex2);
      complex2.multiply(258);
      complex3.ONE.hashCode();
      Complex complex4 = complex0.I.tan();
      complex3.ZERO.add(complex2);
      Complex complex5 = complex0.sin();
      complex5.ZERO.exp();
      complex5.ZERO.readResolve();
      Complex complex6 = complex3.tan();
      complex6.hashCode();
      complex0.isNaN();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex3.NaN.multiply(complex4);
      complex8.NaN.nthRoot(258);
      Complex complex9 = complex7.ZERO.createComplex(4717.507554387, 4717.507554387);
      complex2.I.divide(0.17922431230545044);
      Complex complex10 = complex9.NaN.divide(complex0);
      complex7.ONE.getField();
      complex2.multiply(complex3);
      complex6.abs();
      complex6.ONE.readResolve();
      complex10.NaN.conjugate();
      complex9.NaN.cosh();
      complex10.nthRoot(37);
      Complex complex11 = complex2.sqrt();
      complex11.NaN.sin();
      complex10.hashCode();
      complex3.getImaginary();
      Complex.valueOf(2.11976335178327E-4);
      complex9.divide(2.11976335178327E-4);
      complex10.getReal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.acos();
      complex1.subtract(932.6822513503782);
      Complex complex2 = complex0.pow(0.0);
      complex2.exp();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3874.142, 0.0);
      complex0.nthRoot(250);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(1067.153);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.acos();
      complex0.ZERO.tanh();
      Complex complex2 = complex0.ZERO.tanh();
      complex0.hashCode();
      complex2.abs();
      complex0.multiply(complex2);
      Complex complex3 = complex2.sin();
      complex2.INF.tanh();
      Complex complex4 = complex3.ONE.tan();
      complex4.negate();
      Complex complex5 = complex3.sqrt();
      complex0.getImaginary();
      complex2.isNaN();
      Complex complex6 = complex1.acos();
      complex6.INF.toString();
      complex5.readResolve();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.cos();
      complex2.ONE.conjugate();
      complex2.ZERO.pow(complex3);
      Complex complex4 = complex2.I.divide(complex0);
      complex4.ZERO.log();
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.multiply(1200.0);
      Complex complex1 = complex0.add((-330.13583957007273));
      complex0.readResolve();
      Complex complex2 = complex0.sin();
      complex2.NaN.hashCode();
      Complex complex3 = Complex.I;
      Complex complex4 = complex1.INF.subtract(complex3);
      Complex complex5 = complex4.I.divide(complex2);
      Complex complex6 = new Complex((-3.8809601937571554E-8), (-330.13583957007273));
      complex5.INF.multiply(complex6);
      complex0.getField();
      complex1.tanh();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.getImaginary();
      complex1.ZERO.asin();
      Complex complex2 = complex1.multiply((-1545));
      complex1.cosh();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.exp();
      complex0.cosh();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex((-702.0), (-702.0));
      int int0 = 0;
      try { 
        complex0.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      complex0.I.multiply(complex1);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.abs();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.ZERO.negate();
      complex1.I.getArgument();
      complex0.I.getField();
      complex1.NaN.getField();
      Complex complex3 = complex0.tan();
      complex2.isNaN();
      complex0.cos();
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = 2.0;
      Complex complex0 = new Complex(2.0);
      complex0.ZERO.asin();
      complex0.equals("ifr9(");
      int int0 = (-1977);
      try { 
        complex0.nthRoot((-1977));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,977
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = new Complex(2.50909423828125, 1.0);
      Complex complex1 = new Complex(1952.3983269878, 0.0);
      Complex complex2 = complex0.divide(complex1);
      complex2.multiply(37);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      complex1.I.cos();
      Complex complex3 = complex0.createComplex((-194.71860331), (-194.71860331));
      Complex complex4 = complex3.NaN.sqrt();
      complex4.INF.subtract(complex2);
      complex0.ONE.pow(complex1);
      Complex complex5 = complex0.INF.acos();
      complex2.readResolve();
      complex1.tan();
      Complex complex6 = complex2.subtract(complex3);
      complex6.INF.cosh();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      complex0.INF.abs();
      Complex complex2 = complex0.ZERO.reciprocal();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.sqrt();
      complex0.ZERO.multiply(1);
      Complex.valueOf(0.0, (-2941.916855));
      Complex complex4 = complex1.multiply((-3172.8));
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex1.sinh();
      complex6.ONE.cosh();
      complex3.readResolve();
      complex5.getField();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex1.divide((-3172.8));
      complex4.getField();
      complex2.conjugate();
      complex7.sinh();
      complex7.negate();
      complex1.getArgument();
      complex8.exp();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2264.8591969);
      complex0.INF.toString();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.I.add(complex1);
      Complex.valueOf(2264.8591969);
      complex2.reciprocal();
      complex2.INF.atan();
      complex1.INF.atan();
      complex3.createComplex(2264.8591969, 1553.75831892);
      complex2.sin();
      Complex complex4 = complex3.createComplex((-339.6788599), (-797.15896));
      Complex complex5 = Complex.valueOf((-339.6788599));
      Complex.valueOf((-797.15896));
      complex4.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = new Complex(2285.0);
      Complex complex1 = complex0.INF.conjugate();
      complex0.getField();
      complex0.getImaginary();
      complex0.toString();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ZERO.acos();
      complex3.ZERO.add(complex0);
      complex0.subtract(complex2);
      Complex complex4 = complex2.I.multiply(449.025967374);
      Complex complex5 = complex4.NaN.divide(complex1);
      complex5.NaN.sin();
      int int0 = (-2212);
      complex3.NaN.getField();
      try { 
        complex4.ZERO.nthRoot((-2212));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,212
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1742.0880418), 1820.984355692383);
      Complex complex1 = new Complex((-1742.0880418));
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.cosh();
      complex3.ZERO.toString();
      complex3.ONE.negate();
      complex3.I.abs();
      Complex complex4 = complex1.sqrt1z();
      complex0.readResolve();
      complex2.isInfinite();
      Complex complex5 = complex1.multiply(0);
      Complex complex6 = complex2.I.createComplex((-1411.0), 1820.984355692383);
      complex5.INF.log();
      Complex complex7 = complex2.multiply(complex4);
      complex7.ONE.log();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.pow((-2959.1993));
      complex9.ONE.asin();
      complex8.add(complex4);
      Complex complex10 = complex6.cos();
      complex10.cosh();
      complex5.subtract(complex10);
      complex6.isNaN();
      complex10.getImaginary();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3955.4869);
      Complex complex1 = complex0.NaN.divide(1261.486699);
      Complex complex2 = Complex.valueOf(3955.4869, 0.0);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex0.add((-782.285845307));
      Complex complex5 = complex4.multiply((-1829.477));
      Complex complex6 = complex5.ZERO.subtract(complex1);
      Complex complex7 = complex5.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      
      Complex complex8 = complex4.multiply(1);
      complex8.NaN.abs();
      List<Complex> list0 = complex2.nthRoot(1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
      
      complex3.ONE.multiply(2.0);
      Complex complex9 = complex8.I.pow(2450.0001);
      assertEquals((-1.5707963224880433E-4), complex9.getImaginary(), 0.01);
      assertEquals((-0.9999999876629945), complex9.getReal(), 0.01);
      
      Complex complex10 = complex8.multiply(complex4);
      Complex complex11 = complex10.multiply(complex2);
      assertEquals(3.982860820789347E10, complex11.getReal(), 0.01);
      
      Complex complex12 = complex10.NaN.sqrt1z();
      Complex complex13 = complex2.subtract(complex3);
      assertSame(complex13, complex12);
      
      Complex.valueOf(1364.81438);
      Complex.valueOf(0.0, 0.0);
      complex0.getReal();
      complex2.equals(complex10);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      
      double double0 = complex6.getArgument();
      assertTrue(complex6.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertEquals(Double.NaN, double0, 0.01);
  }
}
