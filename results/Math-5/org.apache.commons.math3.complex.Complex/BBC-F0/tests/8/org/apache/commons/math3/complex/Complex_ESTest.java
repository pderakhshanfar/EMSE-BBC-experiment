/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:40:49 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1061.6888124089053), 20.0);
      Complex complex1 = complex0.ONE.asin();
      complex1.NaN.createComplex((-59.6644), (-1061.6888124089053));
      complex0.tan();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex0.divide(complex1);
      Complex complex2 = complex0.sin();
      complex2.I.divide((-20.0));
      Complex complex3 = complex0.negate();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1061.6888124089053), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = new Complex(1285.4218785959654, 1.5707963267948966);
      Complex complex3 = complex2.subtract(3.1153596872213255E196);
      Complex complex4 = complex1.sin();
      complex4.acos();
      Complex complex5 = Complex.I;
      Complex.valueOf(1.5707963267948966);
      Complex complex6 = Complex.NaN;
      complex6.add(complex5);
      Complex complex7 = complex3.sqrt1z();
      complex1.multiply((-1644.505826));
      complex7.nthRoot(37);
      Complex complex8 = Complex.I;
      complex4.conjugate();
      complex6.divide(502.58528739);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1075.3789803), Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.INF.add(complex0);
      complex0.multiply(complex1);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex((-439.067129986));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.sinh();
      Complex complex3 = new Complex(2.648804063996459E-170, 2.648804063996459E-170);
      complex1.asin();
      Complex complex4 = Complex.ZERO;
      complex4.tanh();
      complex0.tan();
      Complex.valueOf(1787.928091572);
      Complex complex5 = new Complex(4188.77485, Double.NaN);
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-343.2), (-343.2));
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.pow(complex0);
      complex4.ONE.multiply((-7.92266379665354E-120));
      complex4.abs();
      complex3.toString();
      complex1.divide((-343.2));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.982538093450217E86), (-5.275210583909726E-8));
      complex0.acos();
      Complex complex1 = complex0.sqrt();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1075.3789803), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sqrt();
      complex1.abs();
      Complex complex2 = new Complex(0.0024787522852420807, Double.POSITIVE_INFINITY);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex((-1256.484));
      Complex complex1 = Complex.valueOf((-1256.484));
      complex0.ONE.add(complex1);
      Complex complex2 = Complex.valueOf(20.0, 2.2034826278686523);
      complex2.tanh();
      Complex.valueOf(1647.399919303);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.sqrt1z();
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-390.4515044), 1.4047281742095947);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.sqrt();
      complex2.NaN.abs();
      Complex complex3 = new Complex(Double.NaN, (-390.4515044));
      complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1075.3789803), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.pow(3.664369805875646);
      complex0.getArgument();
      complex1.sin();
      Complex complex2 = new Complex(1924.7876);
      Complex complex3 = complex2.multiply((-81.64007567056586));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(3.664369805875646);
      Complex complex6 = complex5.exp();
      complex3.sinh();
      Complex.valueOf(0.45209347184868215);
      complex3.getArgument();
      complex3.cosh();
      complex6.add(1.5707963267948966);
      complex0.multiply((-81.64007567056586));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-7.25680516883106E-8));
      complex0.INF.log();
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex.valueOf((-13.902611458230767), (-13.902611458230767));
      Complex complex0 = new Complex(1167.4691948587, 1167.4691948587);
      Complex complex1 = complex0.subtract(1167.4691948587);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf((-13.902611458230767));
      complex4.getArgument();
      complex4.cosh();
      Complex complex5 = complex3.add((-1767.0340239308));
      complex1.multiply(3.141592653589793);
      complex5.log();
      complex2.createComplex(0.46853768825531006, 3.2441826014060764E125);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4047281742095947, (-20.0));
      Complex complex1 = new Complex((-3032.34856), (-390.4515044));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-7.25680516883106E-8));
      Complex complex1 = complex0.tanh();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = (-1894.0);
      double double1 = (-1.0);
      Complex complex0 = Complex.valueOf((-1894.0), (-1.0));
      complex0.ONE.acos();
      Complex complex1 = complex0.pow(1518.0);
      complex0.abs();
      Complex complex2 = Complex.valueOf(1518.0);
      complex2.cosh();
      double double2 = (-2026.819);
      Complex complex3 = complex0.ZERO.add(complex1);
      complex3.INF.multiply((-2026.819));
      try { 
        complex2.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(0.8100388440354638);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.exp();
      complex2.ONE.cosh();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.ZERO.tanh();
      complex3.ZERO.multiply(1269.36);
      Complex complex4 = complex0.NaN.multiply(complex1);
      complex4.INF.sqrt1z();
      Complex complex5 = new Complex((-21.13));
      complex5.abs();
      complex5.NaN.tanh();
      complex0.ONE.multiply(complex5);
      Complex complex6 = complex0.pow(complex5);
      complex6.I.pow(21.13);
      Complex complex7 = complex2.subtract(Double.NaN);
      Complex complex8 = complex7.divide(complex6);
      Complex complex9 = complex6.ZERO.subtract(466.49);
      complex9.ONE.sqrt();
      complex8.NaN.getArgument();
      Complex complex10 = complex8.NaN.asin();
      complex10.toString();
      complex2.cos();
      complex2.pow(complex0);
      complex0.acos();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1924.7949), (-1924.7949));
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = Complex.valueOf((-1924.7949));
      complex3.ZERO.asin();
      Complex complex4 = complex3.ONE.conjugate();
      complex0.divide(complex3);
      complex0.ONE.getField();
      Complex complex5 = complex4.I.add((-1924.7949));
      complex5.add(7.64816199137814E37);
      complex5.I.add(complex2);
      complex5.getField();
      Complex complex6 = complex1.log();
      complex6.INF.abs();
      Complex.valueOf((-2896.0));
      Complex complex7 = complex6.ZERO.tan();
      complex4.ONE.atan();
      complex1.multiply(634.042);
      Complex complex8 = Complex.valueOf(634.042);
      complex8.ONE.getArgument();
      Complex complex9 = complex4.createComplex(Double.POSITIVE_INFINITY, (-1924.7949));
      Complex complex10 = complex9.ONE.multiply(complex3);
      complex10.I.acos();
      Complex complex11 = complex2.pow(634.042);
      complex11.I.divide(complex8);
      complex3.I.multiply(2128.7189428716);
      complex7.createComplex(2128.7189428716, (-0.012249575462859298));
      // Undeclared exception!
      complex8.nthRoot(2146945487);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.810038844035, 0.810038844035);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      complex2.toString();
      complex0.toString();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex3.subtract(Double.POSITIVE_INFINITY);
      complex6.toString();
      Complex complex7 = complex4.cosh();
      complex1.INF.reciprocal();
      Complex complex8 = complex5.tanh();
      complex8.sqrt1z();
      complex7.sqrt();
      complex2.getField();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.add(6.283185307179586);
      complex2.ZERO.reciprocal();
      complex2.add(6.283185307179586);
      Complex complex3 = complex0.pow(complex1);
      complex3.ZERO.getArgument();
      complex1.abs();
      complex0.divide(Double.NaN);
      Complex.valueOf(Double.NaN, 3.3058299602856804E-8);
      Complex complex4 = Complex.NaN;
      Complex complex5 = new Complex(3.3058299602856804E-8, 0.9997413179788767);
      complex5.ZERO.tan();
      complex5.cosh();
      complex5.tanh();
      complex4.sqrt1z();
      complex5.sqrt();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(6.283185307179586);
      Complex complex3 = complex2.add(Double.NaN);
      Complex complex4 = complex3.pow(complex1);
      complex1.nthRoot(1149);
      complex4.conjugate();
      complex0.pow(1483.910150962435);
      complex1.readResolve();
      complex0.tanh();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = Complex.ONE;
      complex2.ZERO.subtract(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.INF;
      Complex complex5 = complex0.acos();
      Complex complex6 = complex0.sqrt();
      complex6.abs();
      complex4.pow(Double.NaN);
      complex4.readResolve();
      complex6.cos();
      complex3.divide(complex4);
      complex1.atan();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-170.308581907), 1539.785055813352);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.subtract((-3145.2));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex2.multiply((-551.32595));
      complex2.divide(1.0070909418550386E152);
      complex5.toString();
      complex0.toString();
      complex2.add(complex3);
      complex6.subtract((-3145.2));
      complex2.toString();
      complex0.cosh();
      complex3.tanh();
      complex4.sqrt1z();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.exp();
      complex0.INF.abs();
      Complex complex2 = complex0.subtract((-81.64007567056586));
      complex2.ONE.readResolve();
      Complex complex3 = complex2.atan();
      complex3.NaN.divide(complex2);
      Complex complex4 = complex3.INF.divide(1020.2230187080256);
      complex4.INF.cos();
      Complex complex5 = complex3.pow(complex1);
      Complex complex6 = complex5.pow(Double.POSITIVE_INFINITY);
      complex5.getArgument();
      Complex complex7 = complex6.sin();
      complex3.NaN.multiply((-81.64007567056586));
      Complex complex8 = complex7.I.subtract((-81.64007567056586));
      complex3.exp();
      Complex complex9 = complex2.sinh();
      Complex complex10 = Complex.valueOf((-675.7017992557666));
      complex9.ZERO.getArgument();
      complex9.I.cosh();
      Complex complex11 = complex6.add(3306.86868862);
      complex11.NaN.multiply(complex8);
      complex4.tanh();
      Complex complex12 = complex4.pow(0.8100388440354638);
      complex12.INF.sqrt();
      complex3.abs();
      complex1.abs();
      Complex complex13 = complex10.pow(12.817360692055711);
      complex13.cos();
      complex4.divide(complex9);
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex(0.0, 4.999126524757713E-197);
      Complex complex4 = complex2.createComplex(3516.6, 1.0);
      Complex complex5 = complex2.divide(complex3);
      complex4.add(0.0);
      complex1.abs();
      complex5.getImaginary();
      complex4.hashCode();
      complex5.abs();
      complex5.asin();
      Complex complex6 = Complex.ZERO;
      complex6.sqrt();
      complex0.isNaN();
      complex4.isNaN();
      Complex complex7 = Complex.INF;
      complex7.isInfinite();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      complex1.negate();
      Complex complex3 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(261.550086210855, (-1619.140703));
      complex2.isNaN();
      Complex complex5 = complex0.tanh();
      complex1.abs();
      complex3.getImaginary();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, (-1619.140703));
      complex6.hashCode();
      complex6.abs();
      complex5.asin();
      Complex complex7 = complex1.sqrt();
      complex2.isNaN();
      complex1.isNaN();
      complex6.isInfinite();
      complex7.tan();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = complex0.createComplex((-4.637025318037353E-306), (-4.637025318037353E-306));
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex0.add((-4.637025318037353E-306));
      complex0.abs();
      complex2.getImaginary();
      complex2.hashCode();
      complex2.abs();
      Complex complex4 = Complex.ZERO;
      complex4.asin();
      complex4.sqrt();
      complex3.isNaN();
      Complex complex5 = Complex.ONE;
      complex5.isNaN();
      complex4.isInfinite();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.valueOf((-629.389), (-629.389));
      complex1.ZERO.readResolve();
      Complex complex3 = complex0.divide((-629.389));
      complex3.INF.divide((-629.389));
      Complex complex4 = complex3.ONE.add((-629.389));
      complex4.ZERO.toString();
      Complex complex5 = Complex.valueOf((-629.389), 2.0);
      Complex complex6 = Complex.ZERO;
      Object object0 = new Object();
      complex2.equals(object0);
      complex1.tan();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.NaN.asin();
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = (Complex)complex2.ZERO.readResolve();
      complex0.INF.nthRoot(289);
      Complex complex5 = complex0.divide((-629.389));
      Complex complex6 = complex5.ONE.add((-629.389));
      complex6.ZERO.toString();
      complex6.INF.createComplex(0.0, 0.0);
      Complex complex7 = complex5.divide(complex0);
      complex1.NaN.add(0.0);
      complex7.abs();
      complex0.getImaginary();
      complex3.subtract(20.0);
      complex2.nthRoot(3669);
      complex4.conjugate();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.subtract((-1205.44));
      complex3.I.tan();
      Complex complex4 = Complex.valueOf((-1205.44), (-1205.44));
      Complex complex5 = complex0.ONE.reciprocal();
      Complex.valueOf(760.5410062466148);
      complex5.INF.exp();
      Complex complex6 = complex3.INF.multiply(1794);
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex1.log();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex0.ZERO.subtract(complex6);
      Complex complex11 = complex9.INF.subtract(20.0);
      complex3.NaN.add(1245.734885215);
      Complex complex12 = complex1.sqrt();
      complex11.isInfinite();
      complex1.reciprocal();
      Complex complex13 = complex7.tan();
      complex12.ZERO.acos();
      complex4.toString();
      Complex complex14 = complex12.multiply(20.0);
      complex2.readResolve();
      complex14.pow(complex4);
      complex12.multiply(complex13);
      Complex complex15 = complex7.pow(complex12);
      complex15.abs();
      complex10.add(complex8);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex(0.0, 4.999126524757713E-197);
      Complex complex4 = complex2.subtract((-990.5719534975));
      complex4.sin();
      Complex complex5 = Complex.ONE;
      complex5.acos();
      complex4.pow(complex5);
      Complex.valueOf(228.317587);
      complex3.add(complex1);
      complex3.divide(Double.NaN);
      Complex.valueOf(228.317587, Double.NaN);
      complex2.cosh();
      Complex complex6 = complex0.tanh();
      complex4.sin();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      complex2.divide((double) 1354);
      Complex complex3 = Complex.valueOf(1968.33718674136, 904.162);
      Complex complex4 = complex3.cosh();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex(0.0, 4.999126524757713E-197);
      Complex complex4 = complex3.subtract(172106.75523682957);
      complex4.sin();
      complex4.acos();
      Complex complex5 = complex3.pow(complex0);
      Complex.valueOf((-861.634223965));
      complex3.add(complex2);
      complex4.sinh();
      Complex complex6 = Complex.INF;
      complex5.multiply(5.110570767783429E-4);
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(1.557407724654902, 1.557407724654902);
      complex0.equals(object0);
      complex0.nthRoot(672);
      Complex complex2 = new Complex(20.0, 672);
      Complex complex3 = complex2.tan();
      Complex.valueOf(20.0, 1.557407724654902);
      Complex complex4 = complex1.log();
      complex3.divide(complex4);
      complex4.asin();
      Complex complex5 = new Complex((-1880.43637), 20.0);
      Complex complex6 = Complex.I;
      complex1.subtract(complex5);
      Complex.valueOf(3.0, (double) 672);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.tan();
      complex0.acos();
      complex4.sqrt();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.atan();
      Complex complex2 = Complex.valueOf(1183.841);
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.nthRoot(118);
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.valueOf(2.905173460021615E-6, 0.6301699876785278);
      complex0.log();
      complex0.divide(complex4);
      Complex complex6 = complex5.asin();
      Complex complex7 = new Complex((-116.2923065), Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.I;
      complex6.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(2461.982202959445, 2461.982202959445);
      Complex complex4 = complex3.conjugate();
      complex4.pow(0.0);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.tan();
      complex6.pow(complex2);
      Complex complex7 = Complex.valueOf(0.0);
      complex2.atan();
      complex6.divide(370.35838);
      Complex complex8 = Complex.valueOf(370.35838, (-1507.72));
      Complex complex9 = complex7.conjugate();
      complex9.toString();
      complex7.subtract(6.371169881282093E-4);
      Complex complex10 = complex8.multiply((-2878));
      complex0.reciprocal();
      Complex complex11 = complex8.conjugate();
      complex3.readResolve();
      complex10.atan();
      Complex complex12 = complex11.multiply(complex1);
      complex12.reciprocal();
      complex5.divide(0.0);
      Complex complex13 = Complex.INF;
      complex4.divide(2461.982202959445);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(2461.982202959445, 2461.982202959445);
      Complex complex4 = Complex.INF;
      complex4.pow(0.0);
      complex4.reciprocal();
      Complex complex5 = complex1.tan();
      complex5.pow(complex2);
      Complex.valueOf(0.0);
      Complex complex6 = complex2.atan();
      Complex complex7 = Complex.valueOf(2461.982202959445);
      Complex complex8 = Complex.valueOf((-3743.609));
      complex1.nthRoot(1341);
      complex6.tan();
      Complex.valueOf((-3579.0), (-3579.0));
      complex6.log();
      complex7.divide(complex6);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.I;
      complex10.subtract(complex8);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(2461.982202959445, 2461.982202959445);
      Complex complex4 = complex3.conjugate();
      complex4.pow(0.0);
      complex4.reciprocal();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.pow(complex2);
      Complex.valueOf(0.0);
      Complex complex7 = complex2.atan();
      Complex.valueOf(2461.982202959445);
      Complex complex8 = Complex.valueOf((double) 118);
      complex0.nthRoot(1341);
      complex8.tan();
      Complex.valueOf((double) 118, 1.224029779434204);
      complex8.log();
      Complex complex9 = complex8.divide(complex2);
      complex9.asin();
      Complex complex10 = new Complex(1963.36, 9.318532410862293E-219);
      Complex complex11 = Complex.I;
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      complex0.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.subtract(172106.75523682957);
      complex3.sin();
      Complex complex4 = Complex.valueOf((-1.5707963267948966), (-952.77315));
      complex4.cosh();
      Complex complex5 = Complex.valueOf(1182.4257, 0.6558555402721363);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.acos();
      Complex complex3 = complex1.acos();
      complex0.I.readResolve();
      Complex complex4 = complex0.cos();
      complex2.exp();
      Complex complex5 = complex3.sinh();
      Complex complex6 = Complex.INF;
      complex2.multiply(2.0);
      complex4.getField();
      complex4.subtract(complex5);
      Complex complex7 = Complex.valueOf(9.953987539669746E-4, 20.0);
      complex7.multiply(2146352653);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = new Complex((-1775.0), (-1775.0));
      complex2.add((-1775.0));
      complex1.negate();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = complex0.tan();
      Complex complex3 = new Complex(0.0, 4.999126524757713E-197);
      Complex complex4 = complex3.subtract(172106.75523682957);
      Complex complex5 = complex4.sin();
      complex4.acos();
      complex3.pow(complex0);
      Complex.valueOf((-861.634223965));
      Complex complex6 = complex3.add(complex2);
      Complex complex7 = complex6.divide(172106.75523682957);
      Complex complex8 = Complex.valueOf(1897.7577176581, (-1507.72));
      Complex complex9 = complex7.conjugate();
      complex9.toString();
      complex2.subtract(101.316699311643);
      Complex complex10 = complex0.multiply(110);
      complex6.reciprocal();
      complex6.conjugate();
      complex3.readResolve();
      complex5.atan();
      Complex complex11 = complex9.multiply(complex10);
      complex11.reciprocal();
      complex8.divide((-861.634223965));
      Complex complex12 = Complex.INF;
      complex12.divide(1897.7577176581);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(4.066036653218687E-8);
      Complex complex1 = new Complex(4.066036653218687E-8, (-2179.605759512785));
      Complex complex2 = complex0.add(complex1);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ZERO.subtract(complex0);
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.pow(0.0);
      Complex complex6 = complex4.ONE.reciprocal();
      complex6.I.tan();
      Complex complex7 = complex5.INF.pow(complex0);
      Complex complex8 = Complex.valueOf(0.0);
      complex8.NaN.atan();
      Complex complex9 = Complex.valueOf(2944.524340588455);
      complex7.nthRoot(106);
      complex3.tan();
      Complex.valueOf(0.47584593296051025, 0.0);
      Complex complex10 = Complex.valueOf(2.0653935146671156E-8);
      complex10.log();
      Complex complex11 = Complex.I;
      Complex complex12 = complex9.divide(complex11);
      complex3.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.sqrt();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf(1.0);
      complex2.subtract(1.0);
      complex1.equals(complex2);
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      complex2.I.tan();
      complex1.equals(complex2);
      complex2.equals((Object) null);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.NaN.log();
      complex1.ZERO.createComplex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      complex1.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 0.3381449580192566);
      complex1.divide(complex2);
      Complex complex3 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(complex0);
      complex1.negate();
      complex2.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(261.550086210855, (-1619.140703));
      complex2.isNaN();
      Complex complex3 = complex0.tanh();
      complex3.hashCode();
      Complex complex4 = Complex.ZERO;
      complex4.multiply(685.682953);
      Complex.valueOf(261.550086210855, 1.557407724654902);
      Complex complex5 = new Complex((-1329.0));
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2179.605759512785));
      complex1.exp();
      Complex complex2 = complex1.I.subtract((-2179.605759512785));
      Complex complex3 = new Complex((-2179.605759512785), (-2179.605759512785));
      complex2.divide(complex3);
      Complex complex4 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(2461.982202959445, 2461.982202959445);
      Complex complex4 = complex3.conjugate();
      complex4.pow(0.0);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex1.tan();
      complex6.pow(complex2);
      Complex.valueOf(0.0);
      Complex complex7 = complex2.atan();
      Complex.valueOf(2461.982202959445);
      Complex complex8 = Complex.valueOf((-213.66620417));
      complex8.nthRoot(1341);
      complex5.tan();
      Complex complex9 = Complex.valueOf((-1021.0), (-1079.39298));
      complex2.log();
      Complex complex10 = complex9.divide(complex7);
      complex10.asin();
      Complex complex11 = new Complex(118, 118);
      Complex complex12 = Complex.I;
      complex11.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
      Complex complex1 = complex0.reciprocal();
      complex1.ONE.conjugate();
      Complex complex2 = Complex.valueOf(1.2567331790924072);
      Complex complex3 = new Complex(1.2567331790924072, 0.0);
      complex3.conjugate();
      complex3.atan();
      complex2.cos();
      Complex complex4 = new Complex(1.2567331790924072);
      complex4.divide(261.550086210855);
      Complex.valueOf(2.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2385.0);
      Complex complex1 = complex0.NaN.sqrt();
      complex0.add(complex1);
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.ZERO.divide(2385.0);
      Complex complex4 = complex0.sinh();
      complex4.toString();
      complex2.INF.subtract(complex3);
      Complex complex5 = complex2.divide(1.0347704887390137);
      complex2.ONE.sqrt();
      complex5.NaN.sin();
      complex5.nthRoot(1073);
      complex4.sqrt1z();
      Complex.valueOf(2385.0, (-972.27228));
      complex3.negate();
      complex2.cosh();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      complex0.isNaN();
      complex2.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.ZERO.subtract(complex0);
      Complex complex5 = complex0.conjugate();
      complex5.ZERO.pow(0.0);
      Complex complex6 = complex0.I.tan();
      complex6.NaN.sinh();
      Complex complex7 = complex5.I.divide(complex2);
      complex3.I.exp();
      complex5.INF.pow(complex0);
      Complex complex8 = Complex.valueOf(0.0);
      complex8.NaN.atan();
      Complex complex9 = Complex.valueOf(2944.524340588455);
      complex9.nthRoot(118);
      complex8.tan();
      Complex complex10 = Complex.valueOf(0.0, (-1021.0));
      complex10.NaN.log();
      complex8.readResolve();
      complex10.readResolve();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex7.getField();
      complex3.subtract(complex2);
      complex8.multiply(1186);
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.ONE.log();
      complex2.INF.add(3460.6450010522);
      complex0.ONE.add(complex2);
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex1.sqrt();
      complex4.tanh();
      Complex complex5 = (Complex)complex4.ZERO.readResolve();
      Complex complex6 = complex0.exp();
      complex1.sinh();
      complex0.multiply(complex5);
      complex3.negate();
      Complex complex7 = complex6.pow((-4212.387529897559));
      Complex.valueOf((-4212.387529897559), (-2.9620735197149963E10));
      Complex complex8 = Complex.INF;
      complex8.isNaN();
      Complex complex9 = complex7.tanh();
      complex9.hashCode();
      Complex complex10 = Complex.valueOf(2554.72091083, (-2.9620735197149963E10));
      Complex complex11 = Complex.INF;
      complex11.multiply(complex5);
      complex10.multiply((-1368));
      complex1.divide(3460.6450010522);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.I.subtract(0.0);
      complex0.nthRoot(1354);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.divide(complex1);
      complex1.subtract(complex2);
      complex0.toString();
      complex1.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.multiply(complex1);
      complex3.negate();
      Complex complex4 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.isNaN();
      Complex complex6 = complex5.tanh();
      complex6.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY, 684.85726);
      complex1.multiply(complex2);
      complex5.multiply((-3835));
      complex4.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(2.69449520111084);
      Complex complex1 = complex0.NaN.atan();
      complex1.toString();
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex0.subtract(2902.16131437);
      complex3.INF.getArgument();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex2.createComplex(2902.16131437, 0.0);
      complex5.NaN.hashCode();
      Complex complex6 = complex5.subtract(3178.717312930901);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex2.sqrt1z();
      complex9.ZERO.sqrt();
      complex9.NaN.negate();
      Complex complex10 = complex7.atan();
      complex10.I.exp();
      complex10.I.tanh();
      Complex complex11 = complex0.pow(complex6);
      complex11.INF.multiply(1432);
      complex4.acos();
      complex8.add(0.0);
      complex0.I.negate();
      Complex complex12 = Complex.valueOf((-1268.208748), Double.POSITIVE_INFINITY);
      complex4.acos();
      complex5.NaN.readResolve();
      Complex.valueOf((-1268.208748), (-414.8587172));
      complex5.multiply(complex9);
      complex12.multiply(1432);
      complex9.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.tan();
      complex0.ONE.divide(Double.NaN);
      Complex complex2 = complex0.I.acos();
      complex1.acos();
      complex0.I.readResolve();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.INF.add(1.9816080314987707);
      complex3.negate();
      complex3.toString();
      complex1.isNaN();
      Complex complex5 = complex2.reciprocal();
      complex5.I.acos();
      complex4.sqrt1z();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.conjugate();
      complex2.atan();
      complex1.cos();
      Complex complex3 = new Complex(282.424172);
      complex3.divide((-172106.75523682957));
      Complex.valueOf(282.424172, 4.413745413236018E-197);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = Complex.ONE;
      complex3.equals(complex4);
      Complex complex5 = Complex.NaN;
      complex1.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-414.8587172));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.I.sqrt();
      complex3.INF.hashCode();
      Complex complex4 = complex3.INF.tan();
      complex0.ONE.hashCode();
      Complex complex5 = new Complex(2385, 2385);
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.INF;
      complex7.add((double) 2385);
      Complex complex8 = Complex.valueOf(2.414213562373095);
      Complex complex9 = complex1.negate();
      complex1.hashCode();
      Complex complex10 = complex0.add(complex5);
      complex2.reciprocal();
      Complex complex11 = complex10.subtract(344213.510470754);
      Complex complex12 = complex0.sinh();
      complex9.log();
      complex10.isInfinite();
      complex4.reciprocal();
      complex1.getField();
      complex6.equals(complex12);
      complex10.I.tanh();
      complex11.readResolve();
      complex7.tan();
      Complex complex13 = complex2.cosh();
      complex1.tanh();
      complex8.multiply(1966.774210951874);
      complex11.sqrt();
      complex4.multiply(344213.510470754);
      complex13.isNaN();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      complex1.equals(complex2);
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow((-5.968586877433824E-8));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex1.tan();
      complex2.divide(complex4);
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = Complex.valueOf(1.2372493743896484);
      complex1.atan();
      Complex.valueOf(1.2372493743896484);
      complex6.nthRoot(118);
      Complex complex7 = complex1.tan();
      Complex complex8 = Complex.valueOf((-1546.056582240787), (-1546.056582240787));
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.multiply(complex5);
      complex4.negate();
      complex5.pow(1.557407724654902);
      Complex complex11 = Complex.valueOf(1.2372493743896484, (double) 118);
      complex6.isNaN();
      complex11.tanh();
      complex10.hashCode();
      Complex complex12 = Complex.valueOf(1.2372493743896484, (-3679.11910430491));
      Complex complex13 = new Complex(1.557407724654902);
      complex7.multiply(complex13);
      complex12.multiply(107);
      complex6.divide((double) 118);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.acos();
      complex1.acos();
      complex0.I.readResolve();
      Complex complex3 = complex0.cos();
      complex3.INF.add(0.0);
      complex3.negate();
      complex3.toString();
      complex1.isNaN();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getReal();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ONE.conjugate();
      complex2.conjugate();
      Complex complex3 = complex1.ZERO.subtract(complex0);
      Complex complex4 = complex0.conjugate();
      complex4.ZERO.pow(0.0);
      Complex complex5 = complex3.ONE.reciprocal();
      complex5.I.tan();
      complex5.I.divide(complex2);
      complex4.INF.pow(complex0);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = Complex.valueOf(2944.524340588455);
      complex8.nthRoot(118);
      Complex complex9 = complex6.tan();
      Complex complex10 = Complex.valueOf(0.0, (-1021.0));
      Complex complex11 = complex10.NaN.log();
      complex11.NaN.multiply(complex8);
      complex11.NaN.negate();
      complex3.pow(0.0);
      Complex complex12 = Complex.valueOf((-1021.0), 0.0);
      complex0.isNaN();
      complex12.tanh();
      complex9.hashCode();
      Complex complex13 = Complex.valueOf(2944.524340588455, 2890.0);
      complex9.multiply(complex13);
      complex7.multiply(118);
      complex13.divide(2890.0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5322813987731934);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(1.5322813987731934);
      complex2.I.subtract(complex0);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex0.INF.multiply(complex1);
      complex4.ZERO.toString();
      Complex complex5 = complex4.sqrt1z();
      complex4.I.hashCode();
      Complex complex6 = complex4.ONE.sinh();
      complex6.ONE.acos();
      Complex complex7 = complex0.subtract(complex6);
      complex0.atan();
      complex5.hashCode();
      complex7.multiply(complex6);
      complex7.tanh();
      Complex complex8 = complex5.tanh();
      complex2.INF.sqrt();
      complex3.ONE.pow(complex6);
      complex8.add((-1946.8379367307));
      complex3.pow(complex7);
      complex6.exp();
      complex7.isInfinite();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex9.sinh();
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-414.8587172));
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.I.sqrt();
      complex3.INF.hashCode();
      complex3.INF.tan();
      complex3.NaN.multiply(2375);
      complex0.asin();
      complex2.ONE.add(complex0);
      complex0.ZERO.negate();
      Complex complex4 = complex0.I.atan();
      double double0 = (-1456.248695178);
      complex4.ONE.multiply((-1456.248695178));
      Complex complex5 = complex0.tanh();
      complex5.getImaginary();
      Complex complex6 = complex4.asin();
      complex4.INF.createComplex(0.0, (-414.8587172));
      complex6.INF.add(complex5);
      Complex complex7 = null;
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      complex0.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.ONE.sqrt();
      complex3.ONE.asin();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.INF.abs();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex5.I.sinh();
      Complex complex7 = complex5.NaN.subtract(complex4);
      complex7.I.sqrt1z();
      Complex complex8 = complex0.ZERO.multiply(749);
      complex2.INF.toString();
      Complex complex9 = complex1.cos();
      Complex complex10 = complex2.tanh();
      complex10.ONE.getField();
      Complex complex11 = complex2.pow((-1679.077811121));
      complex11.I.multiply(complex9);
      complex0.asin();
      complex8.add(0.0);
      complex8.abs();
      Complex complex12 = complex11.add(complex8);
      Complex complex13 = complex8.reciprocal();
      complex13.negate();
      complex6.isInfinite();
      complex13.add(complex12);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2699.1496925);
      complex0.ZERO.tanh();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex0.negate();
      complex3.INF.readResolve();
      complex3.getArgument();
      complex0.subtract(2699.1496925);
      complex0.cos();
      complex2.multiply(2699.1496925);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.acos();
      complex0.NaN.nthRoot(116);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.multiply(complex2);
      complex3.NaN.add(complex2);
      complex1.createComplex(0.0, (-2111.49640183978));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      complex0.ZERO.multiply((-481));
      Complex complex2 = complex1.ZERO.multiply(0.0);
      Complex complex3 = complex0.atan();
      complex0.getArgument();
      complex2.abs();
      complex3.I.exp();
      complex1.getField();
      complex1.sqrt1z();
      complex2.exp();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = complex4.INF.reciprocal();
      complex5.readResolve();
      complex5.ONE.tanh();
      complex4.NaN.cosh();
      complex5.sqrt1z();
      Complex complex6 = complex2.negate();
      complex6.INF.sin();
      complex1.isNaN();
      complex3.tanh();
      Complex.valueOf((double) (-481), 1628.975642991111);
      complex4.multiply(1088);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex0.NaN.atan();
      complex2.ZERO.subtract(complex0);
      Complex complex3 = complex0.INF.sqrt();
      complex3.I.getArgument();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex5.sin();
      Complex complex7 = complex5.acos();
      complex7.I.pow(complex2);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex5.add(complex8);
      Complex complex10 = complex9.divide(1.5707963267948966);
      Complex complex11 = Complex.valueOf((-1.6390743801589046E-9), 1.5707963267948966);
      Complex complex12 = complex11.NaN.conjugate();
      complex12.toString();
      complex9.ONE.subtract((-2912.819));
      complex1.multiply(1830);
      complex4.reciprocal();
      Complex complex13 = complex10.conjugate();
      complex13.ONE.readResolve();
      complex3.atan();
      Complex complex14 = complex10.multiply(complex12);
      complex14.I.reciprocal();
      complex6.divide(1.5707963267948966);
      complex9.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0);
      Complex complex2 = complex0.I.add(complex1);
      complex0.I.toString();
      complex0.abs();
      Complex complex3 = new Complex(1.0);
      Complex complex4 = complex0.I.pow(complex3);
      Complex complex5 = complex0.ZERO.sqrt1z();
      Complex complex6 = complex3.ZERO.subtract(complex2);
      complex3.NaN.negate();
      complex5.ZERO.cosh();
      Complex complex7 = complex6.ONE.asin();
      Complex complex8 = complex0.log();
      Complex.valueOf(1.0);
      complex4.toString();
      complex8.reciprocal();
      complex4.getImaginary();
      Complex complex9 = complex4.cosh();
      complex7.ONE.cosh();
      complex9.ONE.pow(complex0);
      Complex complex10 = complex4.ONE.acos();
      complex6.sinh();
      Complex complex11 = complex9.multiply(739);
      Complex complex12 = complex1.exp();
      complex12.sqrt();
      complex5.subtract(20.0);
      complex11.cos();
      complex0.divide((double) 739);
      Complex.valueOf((-0.12502530217170715));
      complex7.sqrt1z();
      complex7.negate();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(2.69449520111084);
      Complex complex1 = complex0.NaN.atan();
      complex1.toString();
      Complex complex2 = complex0.INF.multiply(0.0);
      Complex complex3 = complex0.subtract(2902.16131437);
      complex3.INF.getArgument();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex2.createComplex(2902.16131437, 0.0);
      complex5.NaN.hashCode();
      Complex complex6 = complex5.subtract(3178.717312930901);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex2.sqrt1z();
      complex9.ZERO.sqrt();
      complex9.NaN.negate();
      Complex complex10 = complex7.atan();
      complex10.I.exp();
      Complex complex11 = complex10.I.tanh();
      Complex complex12 = complex0.pow(complex6);
      complex12.INF.multiply(1432);
      complex4.acos();
      complex8.add(0.0);
      complex0.I.negate();
      Complex.valueOf((-1268.208748), Double.POSITIVE_INFINITY);
      complex4.acos();
      complex5.NaN.readResolve();
      complex11.multiply(2726.79615);
      Complex.valueOf((double) 1432, (-20.0));
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex2.I.pow(complex0);
      Complex complex4 = complex3.I.pow((-223.25663175));
      complex4.multiply((-223.25663175));
      Complex complex5 = complex1.I.negate();
      Complex complex6 = complex2.ONE.subtract(1.8446779251098633);
      complex1.hashCode();
      complex0.getArgument();
      complex2.NaN.pow(complex5);
      complex6.ONE.cosh();
      Complex complex7 = complex1.reciprocal();
      complex7.INF.tan();
      try { 
        complex7.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.NaN.asin();
      complex2.INF.pow(complex1);
      complex2.ZERO.readResolve();
      Complex complex3 = complex0.divide((-629.389));
      Complex complex4 = complex3.ONE.add((-629.389));
      complex4.ZERO.toString();
      complex4.INF.createComplex(0.0, 0.0);
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex1.NaN.add(0.0);
      complex5.abs();
      complex0.getImaginary();
      complex3.hashCode();
      complex1.abs();
      complex2.asin();
      Complex complex7 = complex6.sqrt();
      complex6.isNaN();
      complex3.isNaN();
      complex7.isInfinite();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.getField();
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.tan();
      complex3.getField();
      Complex complex5 = complex3.log();
      Complex complex6 = complex3.negate();
      complex4.sinh();
      complex6.ZERO.tan();
      Complex complex7 = complex5.divide((-3948.0633940773496));
      complex7.I.getField();
      Complex complex8 = complex6.multiply(1023);
      Complex complex9 = complex8.sqrt1z();
      Complex complex10 = complex4.I.tanh();
      Complex complex11 = Complex.I;
      Complex complex12 = complex9.ONE.multiply(complex11);
      complex4.multiply(2793.0);
      Complex complex13 = complex9.pow(complex8);
      Complex complex14 = complex13.reciprocal();
      complex8.acos();
      complex5.sinh();
      Complex complex15 = complex3.divide(complex0);
      Complex complex16 = complex8.log();
      complex16.NaN.add(0.0);
      complex13.getImaginary();
      complex5.subtract(complex7);
      complex14.divide(complex15);
      complex1.getField();
      complex1.conjugate();
      Complex complex17 = complex12.divide(complex10);
      complex17.I.sinh();
      complex17.multiply(552.204113);
      complex2.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      double double0 = 1366.031638624148;
      Complex complex0 = Complex.valueOf(1366.031638624148);
      complex0.NaN.readResolve();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.negate();
      complex3.NaN.multiply(complex0);
      complex3.INF.conjugate();
      Complex complex4 = complex0.ZERO.add(3989.415322331683);
      complex4.INF.cosh();
      complex1.asin();
      complex0.INF.abs();
      Complex complex5 = complex0.pow(1366.031638624148);
      Complex complex6 = complex5.NaN.sin();
      complex6.acos();
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.cos();
      double double1 = (-819.431355233845);
      Complex complex9 = complex8.add((-819.431355233845));
      complex0.isNaN();
      complex9.multiply((-819.431355233845));
      complex4.sqrt();
      complex1.NaN.subtract(complex2);
      Complex.valueOf((-819.431355233845), 0.0);
      try { 
        complex6.nthRoot((-187));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -187
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(660.2177, 660.2177);
      Complex complex1 = complex0.pow(660.2177);
      complex0.ONE.abs();
      Complex complex2 = complex0.createComplex(660.2177, 660.2177);
      Complex complex3 = Complex.valueOf(102.794);
      Complex complex4 = complex3.I.pow(complex2);
      complex4.subtract(complex3);
      Complex complex5 = complex3.add((-3450.0));
      complex5.INF.hashCode();
      complex5.getArgument();
      Complex complex6 = complex5.multiply(790);
      complex6.sinh();
      complex1.reciprocal();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-32.696), (-2239.523550933));
      complex0.ONE.sin();
      Complex complex1 = complex0.conjugate();
      int int0 = 0;
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex2.INF.tan();
      complex3.INF.subtract(complex0);
      Complex complex4 = complex0.pow((-2309.4));
      complex4.isInfinite();
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex0.reciprocal();
      complex5.INF.abs();
      Complex complex7 = complex6.acos();
      Complex complex8 = complex7.ZERO.asin();
      complex1.abs();
      Complex complex9 = complex7.createComplex(Double.NaN, (-2309.4));
      complex5.ZERO.log();
      complex9.pow(609.2215651008);
      complex5.getField();
      Complex complex10 = Complex.ZERO;
      complex4.add(complex10);
      complex10.abs();
      Complex complex11 = complex10.conjugate();
      complex11.ONE.sqrt();
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.subtract(0.0);
      complex0.equals(complex1);
      complex2.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1118.37);
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex0.NaN.add(complex1);
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.I.negate();
      complex3.ONE.tanh();
      complex0.abs();
      Complex complex4 = complex1.log();
      complex4.INF.getArgument();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2506117820739746);
      complex0.NaN.getField();
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.NaN.log();
      complex1.INF.sin();
      Complex complex2 = complex1.INF.add(1.2506117820739746);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.asin();
      complex4.reciprocal();
      Complex complex6 = complex0.sqrt();
      complex4.acos();
      complex2.createComplex(1.2506117820739746, 1.2506117820739746);
      Complex complex7 = complex5.asin();
      complex6.NaN.multiply(complex1);
      complex3.getArgument();
      complex6.getField();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.multiply(0.0);
      complex1.I.subtract(complex2);
      complex2.getReal();
      complex0.abs();
      Complex complex3 = complex1.acos();
      complex1.getArgument();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = Complex.valueOf((-2989.33864));
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.valueOf(0.0);
      complex3.ZERO.divide(complex7);
      complex6.getArgument();
      complex5.NaN.pow(complex6);
      Complex complex8 = complex4.ZERO.sqrt();
      complex0.ONE.subtract(complex2);
      complex8.ZERO.subtract((-2330.107377881));
      complex4.NaN.readResolve();
      complex0.toString();
      complex0.conjugate();
      complex3.equals(complex6);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.exp();
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.conjugate();
      complex0.atan();
      complex1.cos();
      complex0.divide(282.424172);
      Complex.valueOf(5.4203784018566126E-8, (-2647.20437008));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cosh();
      Complex complex1 = complex0.subtract(1123.005);
      complex1.ZERO.tan();
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex0.sin();
      complex1.acos();
      Complex.valueOf(1123.005);
      Complex complex5 = complex2.INF.divide(1123.005);
      complex5.I.log();
      Complex.valueOf((-1.3902314592614197E-7), 0.0);
      complex5.NaN.getField();
      Complex complex6 = complex3.createComplex(1123.005, (-234.4366850751));
      complex2.conjugate();
      Complex complex7 = complex3.divide((-2177.4));
      complex7.cos();
      Complex complex8 = complex0.conjugate();
      complex8.I.sqrt();
      complex8.INF.acos();
      complex7.multiply((-3210));
      Complex complex9 = complex6.subtract(0.0);
      complex4.hashCode();
      complex9.subtract((-3.492984900939992E-8));
      complex3.pow(0.0);
      complex4.tan();
      complex0.readResolve();
      complex6.hashCode();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-461.7086));
      complex0.ZERO.subtract(complex1);
      Complex complex2 = complex1.ZERO.exp();
      Complex complex3 = complex1.sqrt1z();
      complex3.ZERO.abs();
      complex0.getReal();
      Complex complex4 = complex0.divide((-67.910158658));
      Complex.valueOf((-2005.33862369833), (-16.14456054192));
      complex0.INF.createComplex(0.0, (-3330.86403));
      complex4.ZERO.add(complex1);
      Complex complex5 = complex1.ONE.add((-461.7086));
      Complex complex6 = complex4.ONE.acos();
      complex6.I.multiply(complex2);
      complex2.subtract(0.0);
      complex5.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, 1.0);
      int int0 = 0;
      complex0.NaN.sinh();
      complex1.ZERO.subtract(0.0);
      complex0.ZERO.getField();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.9921976327896118, 0.9921976327896118);
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.I.negate();
      complex2.NaN.subtract(0.9921976327896118);
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.INF.multiply(0.9921976327896118);
      Complex complex6 = complex0.divide(0.0);
      complex6.I.toString();
      complex1.toString();
      complex5.ZERO.add(complex4);
      complex5.subtract(0.0);
      complex3.toString();
      complex0.log();
      complex4.sqrt();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0));
      complex0.NaN.subtract(complex1);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(42);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.add(complex0);
      complex2.INF.pow(complex0);
      Complex complex3 = complex0.NaN.divide(Double.POSITIVE_INFINITY);
      complex3.NaN.exp();
      Complex complex4 = Complex.valueOf(1.494655405262451E154);
      complex0.NaN.pow(complex2);
      complex4.INF.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex0.atan();
      complex0.cos();
      complex3.exp();
      complex5.multiply((-1.0));
      complex5.divide((-4312.0203346));
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getArgument();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex3.ZERO.sinh();
      complex4.ONE.exp();
      complex0.subtract(1.5707963267948966);
      complex2.ZERO.conjugate();
      Complex complex5 = complex0.multiply(3981.4589);
      Complex complex6 = complex5.INF.negate();
      complex6.ONE.cosh();
      complex0.ONE.cos();
      complex3.I.asin();
      Complex complex7 = Complex.valueOf(2.0);
      Complex complex8 = complex1.multiply(complex7);
      Complex complex9 = complex8.ONE.createComplex(1.4198782892306878E-112, 3981.4589);
      complex9.ZERO.multiply(1.5707963267948966);
      Complex complex10 = complex8.multiply(complex3);
      try { 
        complex10.I.nthRoot((-2895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,895
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(135.148033, 0.0);
      Complex complex2 = Complex.valueOf((-1594.0), 0.0);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.ONE.pow(complex0);
      List<Complex> list0 = complex1.ZERO.nthRoot(1);
      assertTrue(list0.contains(complex0));
      
      Complex complex5 = complex4.NaN.atan();
      complex5.getField();
      List<Complex> list1 = complex0.nthRoot(851);
      assertEquals(851, list1.size());
      
      Complex complex6 = complex0.atan();
      Complex.valueOf((-1.0809972724404233E-287), (-44.892623));
      Complex complex7 = complex6.ZERO.multiply(complex1);
      complex1.getReal();
      Complex complex8 = complex4.cos();
      double double0 = complex6.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex9 = complex8.pow((-1594.0));
      complex1.hashCode();
      Complex complex10 = complex0.exp();
      Complex complex11 = complex10.ZERO.add((double) 1);
      complex0.divide(complex10);
      Complex complex12 = complex3.multiply(complex2);
      Complex complex13 = complex7.divide(0.0);
      complex8.abs();
      Complex complex14 = complex9.multiply(1109);
      assertSame(complex14, complex13);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      Complex complex15 = complex12.pow(complex11);
      assertEquals(3.111626674558366E-10, complex15.getImaginary(), 0.01);
      
      complex12.divide(complex11);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex10.equals((Object)complex11));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 288.060534618457;
      Complex complex1 = Complex.valueOf(288.060534618457, 288.060534618457);
      complex1.ZERO.multiply(288.060534618457);
      complex0.I.cos();
      int int0 = 0;
      try { 
        complex1.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(1123.10790196539);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex1.negate();
      assertEquals(-0.0, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.INF.divide(complex1);
      Complex complex4 = complex0.pow(0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex3));
  }
}
