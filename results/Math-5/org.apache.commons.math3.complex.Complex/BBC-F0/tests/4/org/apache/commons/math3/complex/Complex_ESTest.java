/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:56:45 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(5.8840879519086286E-204, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply(5.8840879519086286E-204);
      complex1.nthRoot(39);
      Complex complex3 = new Complex(3.7311513682845094E303, 7.106131178251279);
      Complex complex4 = Complex.valueOf(1.8089985847473145);
      Complex complex5 = complex4.subtract(2162.67821268);
      Complex complex6 = complex4.sqrt1z();
      complex6.sinh();
      complex2.abs();
      Complex complex7 = Complex.valueOf(7.106131178251279);
      complex1.multiply((-70));
      Complex complex8 = Complex.I;
      complex8.tan();
      complex5.toString();
      complex7.subtract((double) 39);
      complex0.sqrt();
      Complex.valueOf(5.8840879519086286E-204, 2162.67821268);
      complex5.tan();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.3864043951034546, (-20.0));
      complex1.pow((-1.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 6.0);
      Complex complex1 = complex0.pow(2.252467360815066);
      complex1.NaN.nthRoot(7);
      Complex complex2 = complex1.tan();
      complex2.atan();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-854.09157185539), Double.POSITIVE_INFINITY);
      complex0.ONE.toString();
      Complex complex1 = complex0.INF.pow(Double.POSITIVE_INFINITY);
      complex1.ONE.subtract(2.4240442814945802E83);
      complex0.INF.nthRoot(1157);
      Complex complex2 = complex0.ONE.add((-854.09157185539));
      Complex complex3 = complex0.ZERO.exp();
      complex3.ONE.getArgument();
      Complex complex4 = complex3.NaN.sqrt();
      complex4.I.abs();
      Complex complex5 = Complex.valueOf((-20.0));
      complex0.I.getArgument();
      Complex complex6 = complex5.ZERO.add(1245.61);
      complex6.multiply(complex0);
      complex5.INF.negate();
      Complex complex7 = complex0.cosh();
      complex7.toString();
      Complex complex8 = complex6.cosh();
      complex8.INF.subtract(complex6);
      Complex complex9 = complex2.sin();
      complex7.getField();
      complex3.sinh();
      Complex complex10 = complex7.createComplex(Double.POSITIVE_INFINITY, 6.283185307179586);
      complex10.NaN.multiply(1.5707963267948966);
      complex3.negate();
      complex9.sin();
      complex8.negate();
      complex7.tan();
      complex5.negate();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(312.0);
      Complex complex3 = complex2.sinh();
      complex3.abs();
      Complex complex4 = Complex.I;
      complex3.acos();
      complex1.toString();
      Complex complex5 = complex2.subtract(1.5806960140212913E135);
      complex0.sqrt();
      complex1.createComplex(1.5806960140212913E135, 2.0);
      complex5.subtract(312.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-0.005097645397590852));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf((-0.005097645397590852), 6.0);
      Complex complex4 = complex3.cos();
      Complex complex5 = Complex.ONE;
      complex5.sin();
      complex4.sin();
      complex0.reciprocal();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex3.pow(2.252467360815066);
      complex7.tan();
      Complex complex8 = new Complex(20.0, (-2839.5432401355247));
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(623, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add(2246.728562859255);
      Complex complex2 = Complex.valueOf(2246.728562859255, 326.713560051425);
      complex2.multiply(17);
      complex1.multiply(578);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.multiply(20.0);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-21.959435399708266), (-21.959435399708266));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.ZERO.tanh();
      complex3.I.exp();
      Complex complex4 = complex2.ONE.sqrt();
      complex4.readResolve();
      Complex complex5 = complex0.add((-21.959435399708266));
      Complex complex6 = complex5.multiply(complex0);
      complex6.I.sqrt();
      Complex complex7 = complex3.createComplex(606.08945282838, 8.94912101169977E158);
      Complex complex8 = complex1.ZERO.pow(complex0);
      Complex complex9 = complex7.sqrt1z();
      complex9.abs();
      complex8.cos();
      Complex.valueOf(1.0, (-744.6));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(5.8840879519086286E-204, Double.NaN);
      Complex complex2 = Complex.valueOf(7.106131178251279);
      Complex complex3 = Complex.valueOf((-2651.9385672), 2203.9);
      complex3.subtract((-2651.9385672));
      Complex complex4 = complex2.tan();
      Complex complex5 = complex3.sinh();
      complex1.abs();
      Complex.valueOf(Double.NaN);
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.NaN;
      complex7.acos();
      complex4.tan();
      Complex complex8 = Complex.I;
      complex8.toString();
      complex1.subtract(2377.755477);
      complex4.hashCode();
      complex4.sqrt();
      complex2.pow(complex5);
      complex6.getField();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.subtract(complex0);
      Complex complex2 = complex0.sinh();
      complex1.toString();
      Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.acos();
      complex3.divide(2758.94069043866);
      Complex complex4 = new Complex(2.0);
      Complex complex5 = Complex.NaN;
      complex5.INF.divide(Double.NaN);
      complex5.divide(2.0);
      Complex complex6 = Complex.ONE;
      complex2.tanh();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.nthRoot(17);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.ONE.sinh();
      Complex complex3 = complex1.ZERO.tan();
      complex3.ONE.getArgument();
      complex0.isInfinite();
      complex3.toString();
      Complex complex4 = complex0.log();
      complex3.atan();
      Complex complex5 = complex4.atan();
      complex3.createComplex(17, 17);
      complex2.subtract((double) 17);
      Complex complex6 = Complex.ZERO;
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(6.0, 5.8840879519086286E-204);
      Complex complex2 = Complex.valueOf((-2253.597675214));
      Complex complex3 = complex2.subtract(5.8840879519086286E-204);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex0.tan();
      complex5.I.hashCode();
      Complex complex6 = complex5.sinh();
      complex6.INF.abs();
      Complex.valueOf(1493.8484238873768);
      Complex complex7 = Complex.I;
      Complex complex8 = complex4.acos();
      Complex complex9 = Complex.valueOf((-276.78259601), 5.8840879519086286E-204);
      Complex complex10 = complex3.tan();
      complex8.toString();
      Complex complex11 = complex1.subtract(6.0);
      complex11.I.sinh();
      complex11.negate();
      complex9.hashCode();
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY);
      complex12.sqrt();
      complex5.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-493.5));
      complex1.I.divide(complex0);
      complex1.NaN.sinh();
      complex0.I.add(complex1);
      complex0.atan();
      Complex complex2 = new Complex(2256.63052);
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.I;
      complex2.multiply(1274886900);
      complex1.pow((-493.5));
      Complex complex5 = new Complex(Double.NaN);
      complex3.multiply(2969);
      // Undeclared exception!
      complex1.nthRoot(1274886900);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(6.0, 5.8840879519086286E-204);
      Complex complex2 = Complex.valueOf((-2253.597675214));
      complex2.subtract(5.8840879519086286E-204);
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex0.tan();
      complex4.I.hashCode();
      Complex complex5 = complex4.sinh();
      complex5.INF.abs();
      Complex complex6 = Complex.valueOf(1493.8484238873768);
      Complex complex7 = Complex.I;
      Complex complex8 = complex3.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2253.597675214));
      complex4.tan();
      complex1.toString();
      complex3.subtract(0.5850973129272461);
      Complex complex9 = new Complex(7.456824943331887E-9);
      complex9.sinh();
      complex1.negate();
      complex6.hashCode();
      complex9.sqrt();
      complex2.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.exp();
      Complex complex1 = complex0.multiply(1833);
      Complex complex2 = complex0.divide(complex1);
      complex2.getArgument();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1143.106459013901);
      complex1.add(complex0);
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.valueOf((double) (-2000), 3087.1419);
      Complex complex6 = complex5.sin();
      complex6.NaN.pow(complex4);
      complex1.sin();
      complex2.reciprocal();
      complex4.log();
      Complex complex7 = Complex.NaN;
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 995.429928758427;
      Complex complex0 = Complex.valueOf(995.429928758427, 995.429928758427);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(6.0, 5.8840879519086286E-204);
      Complex complex2 = Complex.valueOf((-2253.597675214));
      Complex complex3 = Complex.valueOf(6.0, 4693.716606);
      Complex complex4 = complex3.subtract((-17.81525704176076));
      complex4.multiply(complex0);
      Complex complex5 = complex1.tan();
      complex3.hashCode();
      Complex complex6 = complex2.sinh();
      complex1.abs();
      Complex complex7 = Complex.valueOf((-268.71944133284));
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.I;
      complex9.acos();
      Complex.valueOf(6.0, (-17.81525704176076));
      Complex complex10 = Complex.ONE;
      complex10.tan();
      complex6.toString();
      Complex complex11 = complex6.subtract(15.852996349421304);
      complex5.sinh();
      complex11.negate();
      complex5.hashCode();
      Complex complex12 = Complex.valueOf((-17.81525704176076));
      complex12.sqrt();
      complex7.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex((-261.94219), 984.9002);
      Complex complex3 = Complex.valueOf(1.8718984127044678);
      complex0.subtract((-2253.597675214));
      Complex complex4 = complex0.multiply(complex3);
      Complex complex5 = complex2.tan();
      complex1.hashCode();
      complex5.sinh();
      complex3.createComplex((-2253.597675214), (-261.94219));
      complex5.abs();
      Complex.valueOf((-261.94219));
      Complex complex6 = Complex.I;
      complex6.acos();
      Complex.valueOf((-2253.597675214), (-1289.7577142833));
      complex4.tan();
      complex3.toString();
      Complex complex7 = complex6.subtract(1.3922696570638494E-8);
      complex3.sinh();
      Complex complex8 = complex6.negate();
      complex8.hashCode();
      Complex complex9 = complex7.sqrt();
      complex9.pow(complex7);
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(2.1077440662171152E-207);
      complex1.INF.pow((-1.0));
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.I;
      complex5.subtract(complex3);
      Complex.valueOf(1868.30638484787);
      complex2.readResolve();
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      Complex complex6 = complex0.atan();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.asin();
      complex2.ZERO.exp();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-638.0), (-638.0));
      complex0.ONE.getField();
      complex0.getReal();
      Complex complex1 = complex0.pow((-638.0));
      complex1.ZERO.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf((-638.0));
      complex3.ZERO.createComplex((-638.0), (-409.466954172));
      Complex complex4 = Complex.valueOf(3.861525553653117E-227);
      complex4.reciprocal();
      Complex complex5 = complex4.reciprocal();
      complex3.acos();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-638.0), (-638.0));
      complex0.NaN.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.reciprocal();
      complex1.INF.cosh();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf(6.283185307179586, (-1.0));
      Complex complex6 = complex3.multiply(complex5);
      complex6.pow(3487.242185864);
      complex1.readResolve();
      Complex complex7 = complex4.divide(3674.3506);
      Complex complex8 = complex6.atan();
      complex0.readResolve();
      complex5.equals("SIGNIFICANCE_LEVEL");
      Complex complex9 = complex5.add((-851.49736));
      Complex complex10 = complex7.sqrt();
      Complex complex11 = complex5.negate();
      Complex complex12 = complex0.multiply(3512.0228427198);
      Complex complex13 = complex3.multiply(complex10);
      complex8.pow(3512.0228427198);
      complex2.INF.subtract(Double.NaN);
      complex5.readResolve();
      complex11.cosh();
      Complex complex14 = complex9.multiply(3512.0228427198);
      complex10.add(complex0);
      complex3.cosh();
      complex13.subtract(complex3);
      complex12.tanh();
      complex14.atan();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-196.169));
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.pow(complex1);
      complex2.cos();
      complex1.reciprocal();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-638.0), (-638.0));
      Complex complex1 = new Complex((-638.0), (-638.0));
      Complex complex2 = Complex.valueOf(1605.1);
      Complex complex3 = complex2.subtract(6.283185307179586);
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex0.tan();
      complex5.hashCode();
      complex0.sinh();
      complex5.abs();
      Complex.valueOf(1605.1);
      Complex complex6 = complex0.reciprocal();
      complex0.acos();
      Complex.valueOf(1140.6248, 1125.975);
      Complex complex7 = complex1.tan();
      complex1.toString();
      complex4.subtract((-276.78259601));
      complex7.negate();
      complex6.hashCode();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow((-233.4));
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex1.negate();
      Complex complex3 = Complex.valueOf((-233.4), 7.326955749884755E-202);
      complex1.NaN.getField();
      Complex complex4 = complex2.divide((-0.001013172265970752));
      complex0.equals("EMPTY_STRING_FOR_IMAGINARY_CHARACTER");
      Complex complex5 = complex2.pow(complex1);
      Complex complex6 = complex4.atan();
      Complex complex7 = complex6.multiply((-0.001013172265970752));
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex5.ONE.asin();
      complex9.ZERO.exp();
      Complex complex10 = complex9.I.cos();
      complex10.cos();
      Complex complex11 = complex1.reciprocal();
      Complex.valueOf(20.496018349, 7.326955749884755E-202);
      complex3.log();
      Complex complex12 = complex1.conjugate();
      complex11.abs();
      complex4.tanh();
      complex0.tanh();
      complex5.nthRoot(1179);
      complex4.negate();
      complex8.pow((-224.37185279726623));
      complex12.multiply(310.797314);
      Complex.valueOf((-0.001013172265970752));
      complex12.reciprocal();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-2525.812693292957);
      Complex complex0 = new Complex(2769.03762115743, (-2525.812693292957));
      Complex complex1 = complex0.cosh();
      complex1.ONE.asin();
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex.valueOf(420.16228027);
      Complex complex2 = complex1.createComplex(1586.75891575, (-1295.289));
      complex2.add((double) (-2000));
      Complex complex3 = complex1.tanh();
      complex2.toString();
      complex3.multiply(complex0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2242.979);
      Complex complex2 = (Complex)complex0.ZERO.readResolve();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.tanh();
      complex1.pow(complex2);
      Complex complex5 = complex2.tanh();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.multiply(2969);
      Complex complex8 = new Complex(Double.NaN);
      Complex complex9 = complex8.multiply(1082);
      complex0.nthRoot(978);
      complex2.toString();
      Complex complex10 = Complex.INF;
      complex5.subtract(complex10);
      complex4.cos();
      Complex.valueOf((double) (-2445), Double.NaN);
      complex0.add(2.0);
      complex7.subtract(100.99049);
      complex0.negate();
      complex5.hashCode();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(6.283185307179586, 5.8840879519086286E-204);
      Complex complex2 = new Complex(5.8840879519086286E-204);
      complex1.sinh();
      complex0.tan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sinh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.tan();
      Complex complex7 = complex2.subtract(complex1);
      Complex complex8 = Complex.I;
      Complex.valueOf((-20.0));
      complex3.equals(complex4);
      complex7.atan();
      complex6.cos();
      complex1.multiply(50.2162);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex1.tan();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.I;
      complex6.INF.subtract(complex5);
      Complex.valueOf(57.4210483);
      Object object0 = complex6.readResolve();
      complex3.equals(object0);
      Complex complex8 = complex7.atan();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.pow(Double.NaN);
      Complex complex3 = complex2.log();
      complex2.exp();
      Complex complex4 = complex0.multiply(747);
      complex3.divide(complex0);
      complex4.getArgument();
      complex1.sqrt1z();
      complex1.add(Double.NaN);
      complex0.hashCode();
      complex3.multiply(complex1);
      Complex complex5 = Complex.I;
      complex0.divide((-1606.7032614954026));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.INF.createComplex((-435.8589), (-435.8589));
      Complex complex2 = complex1.NaN.acos();
      complex0.ZERO.multiply(3176);
      Complex complex3 = complex1.NaN.tanh();
      Complex complex4 = complex1.tan();
      complex4.nthRoot(1);
      complex2.subtract(complex4);
      Complex complex5 = Complex.I;
      complex3.atan();
      Complex complex6 = Complex.valueOf((-435.8589), (double) 606);
      complex6.exp();
      complex4.tanh();
      complex1.createComplex(490.15290034, 490.15290034);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.INF.createComplex((-435.8589), (-435.8589));
      Complex complex2 = complex1.NaN.acos();
      complex0.ZERO.multiply(3176);
      complex1.NaN.tanh();
      complex0.toString();
      Complex complex3 = complex0.divide(complex1);
      complex1.ONE.sqrt1z();
      complex1.I.subtract(complex3);
      complex1.multiply((-435.8589));
      Complex complex4 = complex1.sqrt1z();
      complex4.I.hashCode();
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex4.log();
      complex6.ONE.pow(complex3);
      complex5.sinh();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex0.ONE.pow(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ONE.sqrt();
      complex3.INF.getArgument();
      complex0.ONE.sinh();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex0.toString();
      Complex complex5 = complex4.exp();
      Complex complex6 = new Complex((-4.330693978322885E-8));
      complex5.INF.subtract(complex6);
      complex4.toString();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex5.cos();
      complex8.NaN.sqrt();
      complex5.ONE.sqrt1z();
      Complex complex9 = Complex.valueOf(646.0, 1845.912224054);
      complex7.divide(Double.POSITIVE_INFINITY);
      complex9.multiply((-4.330693978322885E-8));
      complex6.add(1845.912224054);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.asin();
      Complex complex7 = new Complex((-5.275210583909726E-8), 0.0);
      complex7.multiply(37);
      complex5.nthRoot(37);
      complex1.toString();
      complex0.subtract(complex5);
      complex4.cos();
      Complex.valueOf((-1.0), (-5.275210583909726E-8));
      complex7.add((-1.0));
      Complex.valueOf((double) 0, 0.0);
      complex6.createComplex(1781.7768363549665, 37);
      Complex complex8 = complex0.divide(complex7);
      Complex.valueOf(2248.814, (-1.0));
      complex1.pow((-43.0));
      complex5.cos();
      complex5.add(complex8);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.sinh();
      complex3.toString();
      complex3.multiply(0.0);
      Complex complex4 = Complex.valueOf(368.89, 231.2594728);
      complex4.sin();
      Complex complex5 = Complex.valueOf(0.0);
      complex5.sin();
      complex2.getArgument();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex1.sqrt();
      complex0.sinh();
      complex7.isInfinite();
      Complex complex8 = complex1.sinh();
      complex8.acos();
      complex6.getField();
      complex0.multiply(complex8);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex(1.092935562133789, 1.092935562133789);
      Complex.valueOf(0.0);
      Complex complex1 = complex0.pow(1.092935562133789);
      Complex complex2 = complex1.ZERO.tanh();
      Complex complex3 = complex2.INF.sqrt1z();
      complex0.equals("xuz_4%Vx*l1");
      complex1.toString();
      complex3.tan();
      complex0.nthRoot(606);
      Complex complex4 = Complex.I;
      complex2.equals(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.atan();
      complex0.exp();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      complex1.cos();
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf((-20.0));
      complex2.createComplex((-409.466954172), (-409.466954172));
      Complex complex4 = new Complex((-409.466954172));
      complex4.add((-6080.833777773832));
      Complex complex5 = Complex.INF;
      complex5.getArgument();
      Complex complex6 = complex3.tanh();
      complex0.pow(complex4);
      complex0.tanh();
      complex6.divide(493.5);
      Complex complex7 = complex1.multiply(complex2);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.INF;
      complex1.tan();
      Complex complex5 = complex3.subtract(complex2);
      Complex complex6 = Complex.I;
      Complex.valueOf(57.4210483);
      Object object0 = complex5.readResolve();
      complex3.equals(object0);
      Complex complex7 = complex6.atan();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(542.2097082585084);
      Complex complex2 = complex1.pow(2.0);
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.exp();
      complex4.multiply((-2944));
      Complex complex5 = complex1.divide(complex4);
      complex1.getArgument();
      complex1.sqrt1z();
      Complex complex6 = Complex.I;
      complex6.add((double) (-2944));
      Complex complex7 = complex3.pow(0.0018443027687460873);
      complex2.add(1.9801242125083718E-4);
      complex5.hashCode();
      complex3.tan();
      Complex complex8 = complex3.divide(542.2097082585084);
      complex7.getArgument();
      complex1.getImaginary();
      Complex complex9 = Complex.ZERO;
      complex9.sin();
      complex0.abs();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-77.9861127239));
      complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sin();
      complex2.NaN.cosh();
      Complex complex3 = complex0.I.acos();
      Complex complex4 = complex3.I.reciprocal();
      complex4.I.nthRoot(1772);
      complex1.INF.getArgument();
      complex1.readResolve();
      Complex complex5 = complex2.asin();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.I.add(complex6);
      Complex complex8 = complex7.ONE.add((-2.7663203939320167E-8));
      complex5.abs();
      complex0.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = complex1.sinh();
      complex3.tan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.tan();
      complex5.subtract(complex4);
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.valueOf((-1.0));
      complex8.equals("/mU");
      complex6.atan();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-493.5));
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex0.I.add(complex1);
      complex0.atan();
      Complex complex6 = complex4.subtract(complex1);
      complex6.I.toString();
      complex1.divide((-493.5));
      complex0.sinh();
      Complex complex7 = Complex.valueOf(646.0);
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.I;
      complex8.equals(complex1);
      complex5.atan();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2242.979);
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tanh();
      complex1.toString();
      complex1.multiply(complex3);
      complex1.cos();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-638.0));
      complex0.ONE.getField();
      complex0.getReal();
      Complex complex1 = complex0.pow((-638.0));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = Complex.valueOf((-638.0));
      complex4.ZERO.createComplex((-638.0), (-409.466954172));
      Complex complex5 = complex4.add(Double.POSITIVE_INFINITY);
      complex4.ONE.getArgument();
      Complex complex6 = complex5.ONE.tanh();
      complex1.pow(complex3);
      complex1.ONE.tanh();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex3.multiply(complex2);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = Complex.valueOf(1.7663064617118723E-8);
      Complex complex4 = complex3.ONE.acos();
      complex3.INF.getField();
      complex3.cosh();
      Complex complex5 = complex1.NaN.add(0.0);
      complex5.pow(complex0);
      complex5.INF.hashCode();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex6.INF.sqrt();
      Complex complex8 = Complex.valueOf(130.44927327, (-587.5177807686));
      complex1.nthRoot(7);
      complex5.subtract(0.0);
      complex1.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.multiply((double) 7);
      complex2.isInfinite();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex7.pow(complex6);
      Complex complex12 = complex11.INF.multiply(complex10);
      complex12.negate();
      complex0.add(complex5);
      Complex complex13 = complex1.multiply(130.44927327);
      complex13.NaN.pow(0.0);
      complex9.exp();
      complex4.multiply(7);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-77.9861127239));
      complex0.NaN.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex1.cos();
      complex0.divide((-1020.1279244));
      complex4.getReal();
      complex2.getArgument();
      Complex complex5 = Complex.valueOf(3.141592653589793);
      complex5.getImaginary();
      complex3.abs();
      complex2.toString();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(2.1077440662171152E-207);
      Complex complex2 = complex1.INF.pow((-1.0));
      complex2.ZERO.log();
      Complex complex3 = complex1.NaN.exp();
      complex3.ONE.multiply((-477));
      complex3.ONE.divide(complex1);
      complex0.getArgument();
      complex2.sqrt1z();
      Complex complex4 = complex0.add((-1606.7032614954026));
      complex4.ONE.hashCode();
      complex2.multiply(complex3);
      Complex complex5 = Complex.I;
      complex5.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = Complex.ONE;
      complex2.pow(2242.979);
      Complex complex3 = complex2.add((-3043.333782));
      complex0.hashCode();
      Complex complex4 = complex0.tan();
      complex4.ZERO.asin();
      complex2.ONE.readResolve();
      complex2.divide((-46.287078));
      complex1.getArgument();
      complex0.getImaginary();
      complex0.sin();
      complex0.abs();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.conjugate();
      Complex complex1 = complex0.INF.add(2.1077440662171152E-207);
      Complex complex2 = complex1.INF.pow((-1.0));
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex4.ONE.multiply((-477));
      complex4.ONE.divide(complex1);
      complex0.getArgument();
      Complex complex6 = complex2.sqrt1z();
      Complex complex7 = complex0.add((-1606.7032614954026));
      complex7.ONE.pow(1221.3706605955574);
      Complex complex8 = complex7.tan();
      complex6.exp();
      complex3.divide(1221.3706605955574);
      Complex complex9 = complex5.subtract(complex8);
      complex7.getField();
      complex0.abs();
      complex9.sqrt1z();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.valueOf(652.11744619754);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.pow(complex1);
      complex0.hashCode();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = Complex.valueOf(210.784195, (-2060.77001295726));
      complex2.nthRoot(2756);
      Complex complex7 = complex6.subtract((-8.638415150333099E-8));
      complex6.divide((-1883.562534725));
      complex4.multiply(652.11744619754);
      complex7.isInfinite();
      Complex complex8 = complex0.atan();
      Complex complex9 = complex6.pow(complex1);
      complex5.multiply(complex9);
      complex8.negate();
      Complex complex10 = complex9.add(complex6);
      complex2.multiply(2.0);
      complex2.pow((-3289.019184101));
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-638.0));
      complex0.ONE.getField();
      complex0.getReal();
      Complex complex1 = complex0.pow((-638.0));
      Complex complex2 = complex1.ZERO.cos();
      Complex complex3 = complex1.ONE.log();
      Complex complex4 = Complex.valueOf((-638.0));
      complex4.ZERO.createComplex((-638.0), (-409.466954172));
      Complex complex5 = complex4.add(Double.POSITIVE_INFINITY);
      complex5.ONE.tanh();
      complex1.pow(complex3);
      complex1.ONE.tanh();
      complex0.tanh();
      complex2.toString();
      Complex complex6 = complex4.multiply(complex1);
      complex3.cos();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2206.49089);
      complex0.readResolve();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.divide(2206.49089);
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex1.createComplex(0.0, 0.0);
      complex0.ZERO.subtract(complex3);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = complex6.I.conjugate();
      complex7.NaN.tan();
      Complex.valueOf(2206.49089);
      complex4.getReal();
      Complex complex8 = complex6.sqrt();
      complex8.ONE.log();
      complex8.ZERO.sqrt();
      Complex complex9 = complex8.ZERO.pow(0.0);
      complex9.I.nthRoot(315);
      complex1.readResolve();
      Complex complex10 = complex3.sin();
      complex10.I.acos();
      complex2.getArgument();
      Object object0 = new Object();
      complex10.equals(object0);
      complex4.tan();
      complex5.pow(0.0);
      complex6.cosh();
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.NaN.tanh();
      complex1.ZERO.negate();
      complex1.NaN.createComplex(20.0, 1499.140079091);
      complex0.hashCode();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.multiply(Double.NaN);
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.I.conjugate();
      Complex complex6 = complex0.subtract((-1.1862263158849434E-9));
      Complex complex7 = complex3.ONE.negate();
      complex7.getField();
      Complex complex8 = complex3.add(4677.4658);
      complex5.NaN.abs();
      Complex complex9 = complex6.INF.asin();
      Complex complex10 = complex8.I.cosh();
      complex5.multiply(Double.NaN);
      complex2.negate();
      complex2.divide(complex6);
      Complex.valueOf(20.0, (-1.1862263158849434E-9));
      Complex complex11 = complex4.add(complex5);
      Complex complex12 = new Complex((-1095.5563170569549));
      Complex complex13 = complex9.add(complex12);
      complex9.log();
      complex11.conjugate();
      complex13.tan();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(995.007848);
      complex0.exp();
      Complex complex1 = complex0.asin();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.atan();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex1.INF.sqrt();
      complex2.INF.cos();
      complex3.INF.readResolve();
      complex2.ONE.sin();
      complex0.ZERO.acos();
      complex0.hashCode();
      complex0.readResolve();
      complex1.getArgument();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ZERO.atan();
      complex0.readResolve();
      complex5.log();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6295130252838135);
      Complex complex1 = new Complex(1376.62, 1376.62);
      complex0.subtract(complex1);
      int int0 = (-344);
      Complex.valueOf((-1049.6372117335295), 1.6295130252838135);
      try { 
        complex0.nthRoot((-344));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -344
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.abs();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex2.subtract(0.0);
      complex4.INF.tanh();
      Complex complex5 = complex0.divide(0.0);
      Complex complex6 = complex2.asin();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      complex7.INF.cosh();
      Complex complex8 = complex5.divide(complex0);
      complex2.getReal();
      Complex complex9 = new Complex(0.0, (-2645.3971602));
      complex9.multiply(37);
      complex3.multiply(complex9);
      Complex complex10 = Complex.valueOf((-2645.3971602));
      complex10.INF.multiply(1.1342556476593018);
      Complex complex11 = complex10.ZERO.createComplex(6.283185307179586, (-4357.53166639));
      complex11.reciprocal();
      Complex.valueOf(0.0, (-2689.02695388));
      complex3.isInfinite();
      Complex complex12 = complex9.log();
      complex12.readResolve();
      complex2.add((double) 37);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.NaN.exp();
      Complex complex3 = Complex.valueOf((-935.64814901));
      complex1.NaN.reciprocal();
      complex0.getField();
      complex0.getArgument();
      complex0.ZERO.sqrt();
      complex3.getReal();
      complex1.getImaginary();
      complex3.createComplex((-1.0), (-1.0));
      complex1.getField();
      complex2.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-136.4899558946984), 0.0);
      complex0.NaN.hashCode();
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.pow(0.0);
      complex2.ZERO.reciprocal();
      complex1.ZERO.getField();
      complex1.INF.toString();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.sqrt1z();
      complex1.cosh();
      Complex complex5 = complex0.sinh();
      complex5.hashCode();
      complex5.ZERO.hashCode();
      complex0.ONE.createComplex((-1.8042191582018579E-28), Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex4.conjugate();
      complex4.equals("");
      complex7.readResolve();
      complex6.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.cosh();
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2242.979);
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.multiply(complex1);
      complex2.divide(3794.130451);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.subtract(2778.246846495045);
      Complex complex2 = complex0.sqrt();
      complex1.ZERO.divide(complex2);
      Complex complex3 = complex2.pow(complex0);
      complex3.NaN.toString();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.add(2.1077440662171152E-207);
      Complex complex2 = complex1.INF.pow((-1.0));
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.NaN.exp();
      Complex complex5 = complex4.ONE.multiply((-477));
      complex4.ONE.divide(complex1);
      complex0.getArgument();
      complex2.sqrt1z();
      Complex complex6 = complex0.add((-1606.7032614954026));
      Complex complex7 = complex6.ONE.pow(1221.3706605955574);
      complex7.ZERO.add(0.0);
      complex6.hashCode();
      Complex complex8 = complex6.tan();
      complex8.NaN.divide((-1.0));
      complex0.getArgument();
      complex1.getImaginary();
      complex3.sinh();
      complex5.sin();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex((-1830.36), 1316.887);
      Complex complex1 = complex0.INF.createComplex(1316.887, (-1830.36));
      complex1.ZERO.sin();
      complex1.ONE.hashCode();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.valueOf((-4253.1481304));
      complex4.ONE.reciprocal();
      complex0.ONE.multiply((-958));
      complex4.ONE.multiply(0.0);
      Complex complex5 = complex0.ONE.multiply(0);
      Complex complex6 = complex3.ONE.cosh();
      complex2.getReal();
      complex3.multiply(complex0);
      complex5.I.multiply(0);
      complex6.readResolve();
      Complex complex7 = complex0.ZERO.log();
      complex5.getImaginary();
      complex5.NaN.getField();
      complex6.add(complex0);
      complex5.readResolve();
      complex5.createComplex(0.0, 0);
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.ZERO.divide(complex0);
      Complex complex4 = complex2.NaN.createComplex(0.0, 0.0);
      double double0 = 20.0;
      Complex complex5 = complex2.ZERO.negate();
      Complex complex6 = complex5.INF.multiply(1);
      Complex complex7 = complex3.NaN.divide(20.0);
      Complex complex8 = complex7.INF.divide(0.0);
      complex0.getReal();
      Complex complex9 = complex5.INF.add(complex7);
      complex9.NaN.pow(complex1);
      complex2.isInfinite();
      complex0.abs();
      Complex complex10 = complex3.createComplex(0.0, (-1316.0));
      complex10.INF.conjugate();
      complex7.I.toString();
      complex7.isInfinite();
      Complex complex11 = complex6.subtract(complex8);
      complex4.sinh();
      complex11.ONE.nthRoot(1);
      complex10.exp();
      try { 
        complex4.nthRoot((-2169));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,169
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.pow(2350.856666533);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.createComplex(1772.231618713204, 0.0);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.ONE.reciprocal();
      Complex complex3 = complex2.NaN.createComplex(0.0, 0.0);
      complex1.ZERO.sinh();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex2.ONE.pow(0.0);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.subtract(complex6);
      Complex complex8 = complex7.NaN.reciprocal();
      complex8.I.nthRoot(1838);
      complex1.ONE.cosh();
      complex0.getReal();
      Complex complex9 = complex0.NaN.cosh();
      Complex complex10 = complex9.ZERO.add(0.0);
      Complex complex11 = complex10.INF.pow(complex5);
      complex10.NaN.getField();
      Complex complex12 = complex1.subtract(complex11);
      complex12.INF.multiply(0.0);
      complex0.hashCode();
      complex0.getImaginary();
      complex9.reciprocal();
      complex0.abs();
      complex1.toString();
      Complex complex13 = complex7.sqrt1z();
      complex13.NaN.abs();
      complex4.getField();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1.092935562133789, 1.092935562133789);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.pow(1.092935562133789);
      Complex complex3 = complex2.ZERO.tanh();
      Complex complex4 = complex3.INF.sqrt1z();
      complex0.equals("xuz_4%Vx*l1");
      complex2.toString();
      complex2.toString();
      Complex complex5 = complex0.multiply(0.0);
      Complex.valueOf(0.0, 1093.0644);
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex6.ONE.sin();
      complex6.INF.getArgument();
      Complex complex8 = complex7.NaN.cosh();
      complex8.ONE.sqrt();
      complex1.sinh();
      complex7.isInfinite();
      Complex complex9 = complex4.sinh();
      Complex complex10 = complex9.acos();
      complex10.getField();
      complex9.multiply(complex2);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = Complex.valueOf(652.11744619754);
      complex0.ONE.subtract((-8.638415150333099E-8));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.tan();
      complex3.I.sinh();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.INF.acos();
      Complex.valueOf(1.0, (-1176.8111948281));
      complex6.tan();
      complex0.toString();
      Complex complex7 = complex1.subtract(2293.0);
      complex1.negate();
      complex7.hashCode();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.negate();
      Complex complex1 = complex0.cosh();
      complex1.INF.reciprocal();
      complex1.ONE.asin();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.NaN.sqrt();
      complex0.multiply((-1577));
      complex1.INF.reciprocal();
      complex2.ONE.conjugate();
      Complex complex3 = complex0.createComplex(3429.2802, 3429.2802);
      complex1.getArgument();
      complex3.NaN.atan();
      complex1.I.tan();
      complex2.getField();
      complex1.cos();
      complex0.exp();
      Complex complex4 = complex0.log();
      complex4.INF.pow(complex2);
      Complex.valueOf(6.283185307179586, 3429.2802);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-493.5);
      Complex complex1 = Complex.valueOf((-493.5));
      Complex complex2 = complex1.I.divide(complex0);
      complex2.ONE.acos();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex0.I.add(complex1);
      complex0.atan();
      Complex complex5 = complex3.subtract(complex1);
      complex5.I.toString();
      Complex complex6 = complex1.divide((-493.5));
      double double1 = 646.0;
      complex6.ZERO.multiply((-493.5));
      complex1.I.createComplex(646.0, 646.0);
      Complex complex7 = complex6.divide(646.0);
      complex7.I.atan();
      Complex complex8 = complex1.asin();
      int int0 = 0;
      int int1 = 37;
      complex4.NaN.multiply(37);
      try { 
        complex8.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex1.reciprocal();
      Complex.valueOf((double) (-2000));
      complex2.sqrt();
      complex1.I.sqrt1z();
      try { 
        complex0.NaN.nthRoot((-2000));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,000
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(34.481463984);
      complex1.ZERO.sin();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.ZERO.subtract(2933.9685);
      complex0.getImaginary();
      Complex complex4 = complex0.createComplex(Double.NaN, Double.NaN);
      complex0.hashCode();
      complex2.ONE.pow(Double.NaN);
      Complex complex5 = complex4.subtract(complex0);
      complex3.isInfinite();
      complex5.multiply(1);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.readResolve();
      double double0 = (-928.042526714);
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.INF.add(complex1);
      complex1.pow((-928.042526714));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.NaN.multiply(complex2);
      try { 
        complex4.nthRoot((-964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -964
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.atan();
      complex0.NaN.multiply(complex1);
      complex0.INF.atan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(0.0, (-2095.366971012847));
      Complex complex4 = complex3.ZERO.add(1415.0);
      complex4.sqrt();
      complex4.INF.getField();
      complex0.INF.divide(complex3);
      complex2.NaN.abs();
      complex2.NaN.nthRoot(325);
      Complex complex5 = complex2.INF.multiply((-1733.9));
      Complex.valueOf(0.0);
      Complex complex6 = complex0.divide(complex2);
      complex6.ONE.getField();
      Complex complex7 = complex6.pow(complex2);
      complex6.ZERO.atan();
      complex3.I.subtract(0.0);
      Complex complex8 = complex7.INF.pow(967.855499357);
      Complex complex9 = complex5.reciprocal();
      Complex complex10 = complex3.divide(complex5);
      complex9.INF.sin();
      complex10.readResolve();
      complex9.sinh();
      complex10.exp();
      complex8.isNaN();
      Complex complex11 = complex5.sinh();
      complex11.ZERO.exp();
      Complex.valueOf(1192.4799704, 1415.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1);
      Complex complex1 = new Complex(1, 2555.047564);
      Complex complex2 = complex0.I.multiply(complex1);
      complex1.I.pow(complex2);
      complex1.I.nthRoot(2461);
      Complex complex3 = complex2.add(0.0);
      complex3.ONE.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.INF.subtract((double) 1);
      Complex complex6 = complex5.ONE.tanh();
      complex6.ONE.exp();
      complex1.ONE.pow(2555.047564);
      complex4.conjugate();
      complex1.abs();
      complex3.abs();
      Complex complex7 = complex1.negate();
      Complex complex8 = complex7.multiply(complex2);
      complex8.I.getField();
      complex8.I.atan();
      complex4.equals(complex1);
      complex8.multiply(0.0);
      complex4.cos();
      complex7.cosh();
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-4625.63091), 3491.8);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ONE.atan();
      complex2.NaN.add(complex1);
      complex1.ONE.abs();
      Complex complex3 = complex1.ZERO.multiply((-4625.63091));
      complex1.hashCode();
      complex0.getArgument();
      Complex complex4 = complex0.sinh();
      complex1.INF.reciprocal();
      complex4.abs();
      Complex complex5 = complex4.multiply((-1703));
      Complex complex6 = complex0.sinh();
      complex6.cosh();
      Complex complex7 = complex5.exp();
      complex1.getArgument();
      complex0.ONE.toString();
      Complex complex8 = complex1.atan();
      Complex complex9 = complex8.I.exp();
      Complex complex10 = complex9.I.tanh();
      Complex complex11 = complex8.conjugate();
      complex7.atan();
      Complex complex12 = complex11.cos();
      Complex complex13 = complex12.NaN.divide(611.31523733);
      complex12.INF.multiply(complex10);
      complex1.pow(Double.POSITIVE_INFINITY);
      complex3.pow((-1.0));
      complex6.getImaginary();
      Complex complex14 = complex13.sin();
      Complex complex15 = complex14.ZERO.acos();
      complex15.ZERO.subtract(1.0);
      complex2.add(complex8);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.ONE.sqrt1z();
      complex0.toString();
      complex0.asin();
      complex3.cosh();
      Complex complex4 = Complex.valueOf((-526.6));
      complex4.ONE.subtract(complex3);
      complex0.atan();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex0.INF.conjugate();
      complex0.isInfinite();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.I.cos();
      Complex complex4 = complex1.acos();
      complex4.reciprocal();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.ZERO.sin();
      complex1.pow(1816.0559075);
      Complex.valueOf(0.0);
      Complex complex7 = complex6.ZERO.subtract(complex3);
      complex1.tanh();
      complex4.abs();
      Complex complex8 = Complex.valueOf((-247.186319));
      complex6.isNaN();
      complex8.toString();
      complex3.exp();
      complex3.add(1.5707963267948966);
      complex2.conjugate();
      complex1.hashCode();
      complex5.cosh();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-223.83284));
      Complex complex1 = complex0.pow(20.0);
      complex1.cos();
      Complex complex2 = complex0.ZERO.divide(20.0);
      complex0.getReal();
      complex0.getArgument();
      complex0.getImaginary();
      complex1.abs();
      complex0.toString();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-3068.223));
      complex0.sin();
      complex0.createComplex((-3068.223), 0.0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1178.395708));
      Complex complex1 = complex0.ZERO.divide((-1178.395708));
      complex1.NaN.divide(complex0);
      complex0.ZERO.multiply(complex1);
      try { 
        complex1.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.tan();
      complex0.I.reciprocal();
      Complex complex2 = complex1.I.subtract(0.0);
      complex2.ZERO.toString();
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ONE.cos();
      complex4.ONE.multiply(0);
      Complex complex5 = complex0.NaN.reciprocal();
      Complex complex6 = complex5.ZERO.atan();
      complex6.ONE.add(complex1);
      Complex complex7 = complex5.sinh();
      complex7.reciprocal();
      complex7.NaN.sqrt();
      complex1.ZERO.conjugate();
      complex0.atan();
      complex1.getImaginary();
      complex7.divide(0.0);
      complex3.negate();
      complex3.nthRoot(1445);
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1551.3534138));
      complex0.ONE.add(0.0);
      Complex complex1 = complex0.add((-2780.43714031172));
      complex1.INF.multiply(complex0);
      complex1.toString();
      complex0.getImaginary();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt();
      Complex complex1 = complex0.tanh();
      complex1.multiply(complex0);
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      complex0.hashCode();
      Complex complex2 = complex1.cosh();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex2.pow(1610.6);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex1.ZERO.sin();
      ComplexField complexField0 = complex0.INF.getField();
      Complex complex2 = new Complex(4.505432606253564E64);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.atan();
      complex4.NaN.sqrt();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex4.log();
      complex7.I.getField();
      Complex complex8 = complex6.ZERO.tan();
      Complex complex9 = complex0.pow((-1153.14329));
      Complex complex10 = complex1.sinh();
      Complex complex11 = complex5.ZERO.sin();
      complex10.NaN.hashCode();
      complex6.INF.getField();
      Complex complex12 = complex6.acos();
      complex12.ONE.exp();
      complex3.add(complex5);
      Complex complex13 = complex12.sinh();
      assertEquals(2.3012989023072947, complex13.getReal(), 0.01);
      
      complex8.equals(complexField0);
      Complex complex14 = complex7.add(complex8);
      complex14.ZERO.hashCode();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertTrue(complex14.equals((Object)complex9));
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      
      complex11.ZERO.acos();
      Complex complex15 = Complex.valueOf((-2969.682), 0.0);
      Complex complex16 = complex5.sqrt1z();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      complex4.getImaginary();
      Complex complex17 = complex11.multiply(0.0);
      assertTrue(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex6));
      assertTrue(complex17.equals((Object)complex8));
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex3);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex0.I.tan();
      assertEquals(0.7615941559557649, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.subtract(complex0);
      Complex complex6 = Complex.I;
      complex5.equals(complex6);
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex7 = complex1.atan();
      assertSame(complex7, complex3);
      
      Complex complex8 = complex2.cos();
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.equals((Object)complex2));
  }
}
