/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:41:30 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.atan();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.546119213104248, (-1433.18127664));
      Complex complex1 = complex0.multiply(2427.2900925249137);
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.I.reciprocal();
      Complex complex4 = complex3.ZERO.asin();
      complex3.ZERO.cosh();
      complex3.INF.exp();
      Complex complex5 = complex0.subtract(2.546119213104248);
      Complex complex6 = Complex.valueOf(2.546119213104248, 2.546119213104248);
      complex6.NaN.subtract(complex5);
      complex6.INF.readResolve();
      complex3.ZERO.add(complex5);
      complex0.divide(complex6);
      Complex complex7 = complex5.sqrt();
      complex4.subtract(complex2);
      complex3.pow(complex7);
      complex0.sqrt1z();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(Double.NaN);
      complex1.getImaginary();
      Complex.valueOf(Double.NaN);
      Complex complex2 = Complex.NaN;
      complex2.asin();
      Object object0 = new Object();
      Complex complex3 = Complex.INF;
      complex3.divide((-4.41909071122557E-8));
      complex3.add(Double.NaN);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5996166206245285E172);
      Complex complex1 = complex0.ZERO.cos();
      double double0 = 1839800.4789414518;
      complex1.I.pow(1839800.4789414518);
      complex0.pow(2.5996166206245285E172);
      Complex complex2 = complex0.ZERO.add((-2065.64));
      complex2.ONE.toString();
      Complex complex3 = null;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1780.2586212432), 20.0);
      Complex complex1 = complex0.tan();
      complex1.atan();
      complex1.createComplex(2.0, (-903.90309515));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7205605650112321, Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex0.abs();
      Complex complex1 = Complex.valueOf(20.0, 1223811.6212730866);
      complex1.I.sqrt();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.pow(1.7205605650112321);
      complex1.cosh();
      Complex complex2 = new Complex(1.858688365657144E8);
      complex2.getImaginary();
      Complex complex3 = Complex.ZERO;
      complex0.asin();
      Complex complex4 = Complex.ZERO;
      complex1.abs();
      Complex complex5 = new Complex((-2546354.8158644056), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.negate();
      Complex complex5 = complex1.multiply(736);
      complex0.hashCode();
      Complex complex6 = new Complex(736, (-1370.4150001519));
      complex6.pow(complex4);
      complex4.log();
      complex6.getReal();
      complex3.add(complex2);
      Complex complex7 = complex2.sinh();
      Complex complex8 = Complex.ONE;
      complex4.divide(complex3);
      Complex complex9 = Complex.valueOf((-1184.18687));
      complex5.getArgument();
      complex1.hashCode();
      Complex complex10 = Complex.I;
      complex7.equals(complex10);
      complex9.tanh();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7205605650112321, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf((-520.66518027));
      complex1.getArgument();
      complex2.hashCode();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-6.751434891261518E-56));
      complex1.equals(complex4);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7205605650112321, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex1.pow(complex0);
      complex0.tan();
      Complex complex2 = complex1.cos();
      complex2.getField();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 1739.71957245747);
      complex0.readResolve();
      Complex complex1 = new Complex((-1380.99736), 1.0);
      complex0.divide(complex1);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ZERO;
      complex3.tanh();
      Complex complex4 = complex3.cosh();
      complex0.cos();
      complex0.log();
      Complex.valueOf((-2648.0), 798.0);
      complex4.reciprocal();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-3033.836637));
      complex0.readResolve();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply(Double.NaN);
      Complex complex3 = complex2.subtract(Double.NaN);
      complex3.hashCode();
      Complex complex4 = complex1.divide((-1504.0682643736));
      complex4.getArgument();
      Complex complex5 = new Complex(0.43471480780518434);
      Complex complex6 = complex5.pow(Double.NaN);
      complex2.exp();
      Complex complex7 = new Complex(Double.NaN, Double.NaN);
      complex7.subtract(Double.NaN);
      Complex complex8 = complex3.acos();
      complex8.sqrt1z();
      Complex complex9 = new Complex(2.0);
      Complex.valueOf((-1.1182114525064027E7), 2890.491790056811);
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.36426329612731934);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex0.multiply(0.36426329612731934);
      Complex complex5 = complex0.multiply(1207.4319);
      Complex complex6 = complex2.subtract((-1723.463940907));
      complex5.hashCode();
      Complex complex7 = complex3.divide(0.15442964434623718);
      complex7.getArgument();
      Complex complex8 = complex4.pow(Double.NaN);
      Complex complex9 = complex1.exp();
      complex5.subtract(Double.NaN);
      complex9.acos();
      Complex complex10 = complex8.sqrt1z();
      Complex complex11 = new Complex((-1827.5008698796303));
      Complex.valueOf(1.0, 1207.4319);
      complex6.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex((-1723.463940907), 355.04416225269983);
      Complex complex1 = complex0.multiply(355.04416225269983);
      Complex complex2 = Complex.ZERO;
      complex2.isNaN();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex2.pow(complex1);
      complex3.acos();
      Complex complex5 = Complex.ZERO;
      complex5.getField();
      complex0.getImaginary();
      Complex complex6 = Complex.valueOf(1.3924360275268555, 2211.3765);
      complex0.abs();
      complex4.tan();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.ONE.nthRoot(2491);
      Complex complex2 = complex0.createComplex(0.07734906601442743, (-20.0));
      complex0.nthRoot(46);
      complex2.asin();
      complex2.tan();
      complex2.abs();
      Complex complex3 = Complex.I;
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.acos();
      Complex complex4 = Complex.ONE;
      complex0.isNaN();
      Complex complex5 = complex3.cos();
      complex5.INF.nthRoot(3933);
      Complex complex6 = complex2.cos();
      complex1.tanh();
      Complex complex7 = new Complex(1192.1312967194392);
      Complex complex8 = complex4.sinh();
      complex8.INF.abs();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.createComplex(1255.0168781847947, 8.18942426109357E231);
      complex6.nthRoot(2520);
      complex10.asin();
      complex2.tan();
      complex9.abs();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = Complex.valueOf(336.4906683874606, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, (-215.865313948375));
      complex2.ONE.log();
      complex0.getArgument();
      complex5.isInfinite();
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex4.add(0.0);
      complex6.NaN.hashCode();
      complex6.subtract(complex4);
      Complex complex8 = complex6.subtract(complex7);
      complex8.INF.abs();
      Complex complex9 = complex8.multiply((-215.865313948375));
      complex1.ONE.cosh();
      complex6.isInfinite();
      complex3.getImaginary();
      Complex complex10 = new Complex(1.0, 1.0);
      complex9.add(Double.POSITIVE_INFINITY);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = Complex.valueOf(336.4906683874606);
      complex12.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.multiply(336.4906683874606);
      Complex complex3 = complex1.log();
      complex1.hashCode();
      complex2.getImaginary();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ONE;
      complex5.readResolve();
      complex0.toString();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1723.463940907), 355.04416225269983);
      Complex complex1 = complex0.multiply(355.04416225269983);
      Complex complex2 = Complex.valueOf(355.04416225269983);
      Complex complex3 = complex1.tanh();
      Complex complex4 = new Complex((-1723.463940907));
      complex2.sinh();
      complex3.sqrt();
      complex2.createComplex(0.07734906601442743, 379.39152441122);
      complex1.nthRoot(2119110031);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex1.ONE.multiply(336.4906683874606);
      Complex complex4 = complex3.I.add(complex0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.createComplex(Double.POSITIVE_INFINITY, (-215.865313948375));
      complex2.ONE.log();
      Complex complex5 = Complex.ZERO;
      complex5.abs();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = new Complex(336.4906683874606);
      complex7.acos();
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex2.divide(complex1);
      Complex complex5 = complex0.tan();
      complex4.acos();
      Complex.valueOf(0.0);
      complex5.nthRoot(799);
      complex4.exp();
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex1.ONE.multiply(336.4906683874606);
      complex3.I.add(complex0);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.createComplex(Double.POSITIVE_INFINITY, (-215.865313948375));
      Complex complex6 = complex2.ONE.log();
      complex0.getArgument();
      complex5.isInfinite();
      Complex complex7 = complex0.conjugate();
      complex4.add(0.0);
      complex2.getReal();
      complex7.NaN.hashCode();
      Complex complex8 = complex7.subtract(complex4);
      Complex complex9 = complex8.createComplex((-3891.929855), 336.4906683874606);
      complex9.isNaN();
      Complex complex10 = complex6.sin();
      complex0.pow(complex10);
      complex1.acos();
      complex5.cosh();
      complex3.getField();
      Complex.valueOf(58.7081452671622, 0.0);
      complex1.abs();
      complex3.tan();
      complex7.atan();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide(1192.1312967194392);
      Complex complex2 = complex0.ZERO.log();
      complex0.INF.hashCode();
      complex0.getImaginary();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.valueOf(2682.9350155392303, (-1967.7524));
      complex4.tanh();
      complex0.sqrt1z();
      complex4.multiply(0.0);
      Complex.valueOf(2.536961912893389E-9);
      Complex.valueOf(1213.8186023064256, 20.0);
      complex1.multiply(complex5);
      complex3.abs();
      complex5.tan();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      complex1.atan();
      complex0.abs();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex1.tanh();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sqrt1z();
      complex1.readResolve();
      complex8.tan();
      Complex complex9 = complex2.acos();
      complex4.createComplex(2124.68, 1.5220721252262592E-6);
      complex4.isNaN();
      Complex complex10 = complex6.sin();
      complex5.pow(complex3);
      complex8.acos();
      complex10.cosh();
      complex5.getField();
      complex2.getImaginary();
      Complex.valueOf((-3511.34506), (-623.4273947529));
      complex9.createComplex(1595.730496, 2124.68);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      complex1.atan();
      complex0.abs();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex0.asin();
      complex2.exp();
      complex3.tanh();
      Complex complex5 = new Complex(1595.730496);
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.valueOf(1595.730496);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex1.pow(1595.730496);
      Complex complex10 = Complex.valueOf((-1.5707963267948966));
      complex9.equals(complex0);
      complex9.exp();
      Complex complex11 = Complex.INF;
      complex10.multiply(complex11);
      complex1.tan();
      Complex.valueOf(2682.9350155392303, 1595.730496);
      complex5.tanh();
      complex7.sqrt1z();
      complex6.multiply(20.0);
      Complex.valueOf(2682.9350155392303);
      Complex complex12 = Complex.valueOf((-12.241518446546), 20.0);
      complex7.multiply(complex12);
      complex8.abs();
      complex4.tan();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.exp();
      complex1.tanh();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex4.sqrt1z();
      complex6.readResolve();
      complex3.tan();
      Complex complex8 = complex4.acos();
      Complex complex9 = complex2.createComplex((-19.10412460093854), (-387.6));
      complex5.isNaN();
      Complex complex10 = complex8.sin();
      complex0.pow(complex9);
      Complex complex11 = complex7.acos();
      complex10.cosh();
      complex10.getField();
      complex11.getImaginary();
      Complex.valueOf(1.032632930606967, (-1870.8373332734313));
      complex3.createComplex(0.0, 0.3634567956738324);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 1595.730496;
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      complex1.atan();
      Complex complex2 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex3.ONE.tanh();
      complex4.NaN.sqrt1z();
      complex4.INF.multiply(1);
      Complex complex5 = Complex.valueOf(1595.730496, (double) 1);
      complex2.NaN.tan();
      complex0.acos();
      Complex complex6 = complex5.multiply(1);
      complex4.hashCode();
      complex0.ZERO.abs();
      Complex complex7 = null;
      try { 
        complex6.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.sqrt1z();
      complex1.multiply(1);
      complex0.readResolve();
      Complex complex5 = complex2.tan();
      complex5.acos();
      Complex complex6 = complex5.createComplex((-19.10412460093854), 0.0);
      complex4.isNaN();
      Complex complex7 = complex2.sin();
      complex7.pow(complex4);
      Complex complex8 = Complex.NaN;
      complex8.acos();
      complex7.cosh();
      complex4.getField();
      complex3.getImaginary();
      Complex.valueOf(1.0, 2909.594588895813);
      complex0.toString();
      complex6.createComplex((-488.303284), 4.588037824983901);
      complex7.add(0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.asin();
      complex3.exp();
      complex4.tanh();
      Complex complex6 = new Complex(1595.730496);
      complex6.sinh();
      Complex complex7 = complex2.pow(20.0);
      complex7.exp();
      Complex complex8 = complex1.subtract(0.0);
      Complex complex9 = complex2.sqrt();
      complex9.isNaN();
      complex7.multiply(1.5707963267948966);
      complex1.pow(1595.730496);
      Complex complex10 = Complex.valueOf(0.5098485946655273);
      complex0.divide(complex10);
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.reciprocal();
      complex8.sqrt1z();
      complex5.reciprocal();
      Complex complex13 = Complex.I;
      complex13.cos();
      Complex complex14 = complex2.cos();
      complex14.sinh();
      complex5.hashCode();
      complex12.divide(complex7);
      complex10.sqrt1z();
      complex12.subtract(0.5098485946655273);
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.tanh();
      Complex complex6 = new Complex(0.0);
      complex3.sinh();
      Complex complex7 = complex4.pow(2546354.8158644056);
      complex2.exp();
      Complex complex8 = complex0.subtract(0.0);
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex8.atan();
      Complex complex11 = complex8.negate();
      Complex complex12 = complex9.multiply(1484);
      Complex complex13 = Complex.INF;
      complex10.log();
      complex12.getReal();
      Complex complex14 = complex11.conjugate();
      Complex complex15 = complex6.add(complex3);
      complex5.tan();
      complex1.divide(complex13);
      Complex complex16 = complex12.conjugate();
      complex16.getArgument();
      Complex complex17 = complex13.log();
      complex17.ZERO.toString();
      complex7.hashCode();
      complex14.equals("j~RXUc>]");
      complex8.abs();
      complex15.atan();
      complex11.conjugate();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.90310227565917E-9);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.ONE.tan();
      complex4.ZERO.nthRoot(375);
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex1.cos();
      Complex complex7 = complex3.add((-1715.0));
      complex5.ZERO.subtract((-1715.0));
      Complex complex8 = complex6.ZERO.exp();
      Complex complex9 = complex0.tanh();
      Complex complex10 = complex6.subtract(8.90310227565917E-9);
      complex10.ONE.nthRoot(375);
      complex5.pow(8.90310227565917E-9);
      complex7.subtract(complex9);
      Complex complex11 = complex4.divide(complex2);
      Complex complex12 = complex1.ZERO.cos();
      complex11.multiply(392);
      complex11.getField();
      complex11.sqrt();
      complex2.add((-532.219924806455));
      Complex.valueOf((double) 392);
      Object object0 = complex2.readResolve();
      complex8.equals(object0);
      complex6.pow(complex0);
      complex2.sin();
      complex8.atan();
      Complex complex13 = complex12.sqrt();
      complex13.ZERO.multiply(701);
      complex11.toString();
      complex5.acos();
      complex12.atan();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = Complex.valueOf((-1725.5));
      complex3.I.multiply((-1725.5));
      Complex complex4 = complex1.NaN.multiply((-1725.5));
      complex4.INF.subtract((-1725.5));
      complex1.NaN.hashCode();
      complex0.I.getArgument();
      Complex complex5 = complex0.negate();
      Complex complex6 = complex5.ZERO.pow(1.5707963267948966);
      Complex.valueOf(1.5707963267948966);
      complex5.equals(complex1);
      Complex complex7 = complex1.exp();
      complex7.NaN.multiply(complex4);
      complex7.ONE.tan();
      Complex complex8 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex9 = complex8.NaN.tanh();
      complex6.sqrt1z();
      complex1.multiply(1.5707963267948966);
      Complex complex10 = Complex.valueOf((-1725.5));
      complex10.multiply(complex1);
      complex7.abs();
      complex2.tan();
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = new Complex(1.0, 1.0);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.I.createComplex(7.076135457313529E-62, 1.0);
      complex1.getReal();
      complex1.conjugate();
      Complex complex5 = complex4.add(complex3);
      complex2.multiply(1.0);
      complex0.pow(1.0);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = new Complex(1.0);
      complex9.sqrt1z();
      Complex complex10 = complex4.reciprocal();
      Complex complex11 = complex8.cos();
      Complex complex12 = complex6.cos();
      complex4.sinh();
      complex4.hashCode();
      complex12.divide(complex2);
      Complex complex13 = complex7.sqrt1z();
      complex13.log();
      Complex complex14 = Complex.valueOf(2.0);
      complex14.readResolve();
      complex11.isNaN();
      complex10.isNaN();
      complex8.toString();
      complex6.subtract(2.0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      complex1.abs();
      Complex complex2 = Complex.valueOf(0.0, (-921.0));
      complex0.sin();
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex0.isInfinite();
      complex2.nthRoot(397);
      Complex complex4 = complex3.createComplex(Double.NaN, 0.0);
      complex4.ZERO.multiply(Double.NaN);
      complex4.ONE.log();
      Complex complex5 = complex4.add((-783.6454566));
      complex2.isNaN();
      complex3.I.multiply(Double.NaN);
      Complex complex6 = complex2.pow((double) 397);
      complex6.INF.divide(complex4);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex6.ZERO.sqrt1z();
      complex8.ONE.reciprocal();
      complex8.INF.cos();
      Complex complex9 = complex6.cos();
      complex8.INF.sinh();
      complex3.hashCode();
      complex8.divide(complex3);
      Complex complex10 = complex9.sqrt1z();
      complex10.ZERO.log();
      complex9.I.readResolve();
      complex0.isNaN();
      complex3.isNaN();
      complex9.toString();
      complex5.subtract(2.0);
      Complex.valueOf(2.0, (-4.801131671405377E-10));
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.sqrt1z();
      complex0.readResolve();
      complex2.INF.divide(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex0.createComplex(56.58, 0.0);
      complex4.isNaN();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.pow(complex6);
      Complex complex8 = complex5.acos();
      Complex complex9 = new Complex(56.58, Double.POSITIVE_INFINITY);
      complex1.getField();
      complex8.getImaginary();
      Complex.valueOf(0.0, (-1840.23));
      complex7.reciprocal();
      complex3.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.atan();
      complex0.abs();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.asin();
      complex1.exp();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex4.pow(0.0);
      Complex complex7 = complex6.exp();
      complex7.subtract((-0.5574077246549021));
      complex0.sqrt();
      complex3.atan();
      complex6.negate();
      complex4.subtract(complex2);
      complex5.subtract(3935.073);
      complex3.pow(51.78156);
      complex7.getReal();
      complex0.add(complex7);
      Complex complex8 = Complex.ZERO;
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      complex1.INF.abs();
      Complex complex2 = Complex.valueOf(0.0, (-921.0));
      complex0.sin();
      complex1.exp();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex0.pow(1.5804200403673568E-61);
      Complex complex6 = complex5.exp();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.subtract(638.1920861951488);
      Complex complex9 = complex1.sqrt();
      Complex complex10 = complex1.atan();
      complex2.negate();
      complex1.multiply(957);
      complex2.pow(complex6);
      complex9.log();
      complex6.getReal();
      Complex complex11 = complex8.conjugate();
      Complex complex12 = complex4.add(complex11);
      Complex complex13 = complex5.sinh();
      complex3.tan();
      Complex complex14 = Complex.I;
      complex6.divide(complex12);
      complex13.conjugate();
      complex1.getArgument();
      complex3.log();
      complex6.hashCode();
      complex10.equals(complex5);
      complex0.abs();
      Complex complex15 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      complex1.INF.abs();
      Complex complex2 = Complex.valueOf(0.0, (-921.0));
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.ONE.multiply(complex2);
      complex0.isInfinite();
      complex2.nthRoot(432);
      Complex complex5 = complex4.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex5.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex5.add((-783.6454566));
      complex2.isNaN();
      Complex complex7 = complex4.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.pow((double) 432);
      complex8.INF.divide(complex5);
      complex4.reciprocal();
      Complex complex9 = complex8.ZERO.sqrt1z();
      complex3.sin();
      complex8.acos();
      complex5.cosh();
      complex7.getField();
      complex9.getImaginary();
      Complex complex10 = Complex.valueOf((-2215.9311105), (-2546354.8158644056));
      complex10.toString();
      complex1.createComplex((-1.7999197335480384E-103), 432);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.asin();
      complex2.exp();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex5.pow(0.0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.subtract((-0.5574077246549021));
      complex0.sqrt();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex7.negate();
      Complex complex12 = complex4.multiply(957);
      complex12.hashCode();
      complex3.ZERO.pow(complex6);
      Complex complex13 = complex7.log();
      complex10.getReal();
      Complex complex14 = complex10.conjugate();
      complex11.add(complex9);
      complex3.sinh();
      complex14.tan();
      Complex complex15 = Complex.I;
      complex15.divide(complex3);
      complex7.conjugate();
      complex4.getArgument();
      complex13.log();
      complex13.hashCode();
      complex13.equals(complex8);
      complex10.abs();
      Complex complex16 = Complex.NaN;
      complex7.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      complex1.atan();
      Complex complex2 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.NaN.sqrt1z();
      complex4.INF.multiply(1);
      complex4.ONE.readResolve();
      complex2.NaN.tan();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.createComplex(0.0, (-19.10412460093854));
      complex0.isNaN();
      complex6.sin();
      Complex complex8 = complex7.pow(complex6);
      complex8.acos();
      Complex complex9 = complex2.cosh();
      complex9.ONE.getField();
      complex7.getImaginary();
      Complex.valueOf(0.0, 0.0);
      complex5.toString();
      complex8.createComplex(1595.730496, 0.0);
      complex7.add((-945.245));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      complex1.INF.abs();
      Complex complex2 = Complex.valueOf(0.0, (-921.0));
      Complex complex3 = complex0.sin();
      Complex complex4 = complex0.ONE.multiply(complex2);
      complex0.isInfinite();
      complex2.nthRoot(397);
      complex4.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex0.sqrt1z();
      Complex complex5 = complex0.multiply(397);
      complex1.readResolve();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex1.acos();
      Complex complex8 = Complex.I;
      Complex complex9 = complex8.createComplex((-19.10412460093854), 0.0);
      complex6.isNaN();
      Complex complex10 = complex0.sin();
      complex7.pow(complex4);
      complex9.acos();
      complex6.cosh();
      complex5.getField();
      complex10.getImaginary();
      Complex.valueOf(0.0, Double.NaN);
      complex3.toString();
      complex8.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.multiply(1);
      Complex complex6 = Complex.INF;
      complex6.readResolve();
      complex2.tan();
      Complex complex7 = complex0.acos();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.createComplex(3839.94149, 1192.1312967194392);
      complex5.isNaN();
      complex9.sin();
      complex4.pow(complex7);
      complex5.acos();
      complex2.cosh();
      complex9.getField();
      complex8.getImaginary();
      Complex.valueOf(2043.0335561140048, 1300.4665756530524);
      complex6.toString();
      complex5.createComplex(1277.109786, 3.7018617149442434E-7);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      complex1.atan();
      Complex complex2 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex3.ONE.tanh();
      complex4.NaN.sqrt1z();
      Complex complex5 = complex4.INF.multiply(1);
      complex4.ONE.readResolve();
      complex2.NaN.tan();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.createComplex(0.0, (-19.10412460093854));
      complex0.isNaN();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex7.pow(complex6);
      complex9.acos();
      Complex complex10 = complex2.cosh();
      complex10.ONE.getField();
      complex7.getImaginary();
      Complex complex11 = Complex.INF;
      complex11.hashCode();
      Complex complex12 = Complex.ONE;
      Complex.valueOf(1.2806954766390988E-33, 1.2806954766390988E-33);
      complex12.equals("");
      Complex complex13 = new Complex(1595.730496);
      complex13.abs();
      Complex complex14 = complex3.atan();
      complex14.I.sqrt1z();
      complex8.atan();
      complex2.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex2 = complex1.acos();
      complex2.abs();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = Complex.valueOf(Double.NaN);
      Complex complex5 = new Complex(324.0973);
      Complex complex6 = complex5.sqrt();
      complex4.ZERO.subtract(complex3);
      Complex complex7 = complex6.sqrt1z();
      complex7.INF.sin();
      Complex complex8 = new Complex(2294.4054146037);
      complex4.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = new Complex(1595.730496, 1595.730496);
      Complex complex3 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex4 = Complex.valueOf(1595.730496, 1595.730496);
      Complex complex5 = complex3.acos();
      complex4.abs();
      Complex complex6 = complex5.add(complex0);
      complex6.sqrt();
      Complex complex7 = complex0.sqrt();
      complex3.sqrt1z();
      complex1.exp();
      Complex complex8 = new Complex(0.0);
      complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.tanh();
      complex1.sqrt1z();
      Complex complex4 = complex1.multiply(1);
      complex3.readResolve();
      complex0.tan();
      Complex complex5 = complex1.acos();
      complex2.createComplex(1, (-1245.036551));
      complex1.isNaN();
      Complex complex6 = complex5.sin();
      Complex complex7 = Complex.I;
      complex0.pow(complex7);
      complex4.acos();
      complex0.cosh();
      complex7.getField();
      Complex complex8 = Complex.INF;
      complex8.getImaginary();
      Complex.valueOf(0.0, 3409.00551883);
      Complex complex9 = Complex.I;
      complex9.toString();
      complex6.createComplex((-19.10412460093854), 0.0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex4 = complex0.I.multiply(complex3);
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex5.NaN.sqrt1z();
      complex5.INF.multiply(1);
      Complex complex7 = Complex.valueOf(1595.730496, (double) 1);
      complex3.NaN.tan();
      Complex complex8 = complex0.acos();
      Complex complex9 = complex0.createComplex(0.0, (-19.10412460093854));
      complex0.isNaN();
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex10.cos();
      complex9.cos();
      Complex complex12 = complex2.sinh();
      Complex complex13 = Complex.ONE;
      complex13.hashCode();
      Complex complex14 = complex13.divide(complex12);
      Complex complex15 = complex14.sqrt1z();
      complex15.INF.abs();
      complex6.log();
      complex11.readResolve();
      complex1.isNaN();
      complex8.isNaN();
      complex3.toString();
      complex12.tanh();
      Complex.valueOf(0.0);
      complex6.divide(complex11);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.divide(1192.1312967194392);
      Complex complex1 = complex0.ZERO.log();
      complex0.INF.hashCode();
      complex0.getImaginary();
      Complex complex2 = complex1.sinh();
      complex0.I.readResolve();
      complex0.atan();
      complex0.reciprocal();
      complex1.exp();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(6.403477383195494E-34, 6.403477383195494E-34);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex1.nthRoot(1260);
      complex0.equals("~");
      complex2.toString();
      complex0.isInfinite();
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.ZERO;
      complex4.getReal();
      complex1.sqrt();
      complex1.toString();
      complex2.pow(2.0);
      complex0.readResolve();
      Complex complex5 = complex2.pow(complex3);
      complex5.negate();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.valueOf(0.0, 1.764200470879736E51);
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex1.reciprocal();
      Complex complex12 = Complex.valueOf(1332.427165, 2772.6788);
      complex12.getReal();
      Complex complex13 = complex10.sqrt();
      Complex complex14 = Complex.valueOf(2772.6788);
      complex14.asin();
      complex11.conjugate();
      complex13.sinh();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      complex0.abs();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.asin();
      complex2.exp();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex3.sinh();
      Complex complex7 = complex5.pow(0.0);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex8.subtract((-0.5574077246549021));
      complex0.sqrt();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex7.negate();
      complex4.multiply(957);
      complex3.ZERO.pow(complex6);
      Complex complex12 = complex7.log();
      complex10.getReal();
      Complex complex13 = complex10.conjugate();
      complex11.add(complex9);
      complex3.sinh();
      complex13.tan();
      Complex complex14 = Complex.I;
      complex14.divide(complex3);
      complex7.conjugate();
      complex4.getArgument();
      complex12.log();
      complex12.hashCode();
      complex12.equals(complex8);
      complex10.abs();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.sqrt1z();
      Complex complex4 = complex2.sqrt1z();
      complex2.getImaginary();
      Complex complex5 = complex0.multiply(complex2);
      complex5.tanh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex2.multiply((-2040109465));
      complex4.readResolve();
      complex0.tan();
      Complex complex8 = complex0.acos();
      complex3.isNaN();
      Complex complex9 = complex6.sin();
      complex9.pow(complex3);
      Complex complex10 = complex7.acos();
      Complex complex11 = complex8.cosh();
      complex7.getField();
      complex11.getImaginary();
      Complex.valueOf(0.0, 0.5403023058681398);
      complex3.toString();
      complex10.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = new Complex(1.0, 1.0);
      complex0.I.pow(complex1);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.I.createComplex(7.076135457313529E-62, 1.0);
      complex0.nthRoot(2520);
      complex2.asin();
      complex1.NaN.reciprocal();
      complex3.tan();
      complex1.abs();
      complex3.subtract(Double.POSITIVE_INFINITY);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      complex1.INF.abs();
      Complex complex2 = Complex.valueOf(0.0, (-921.0));
      complex0.sin();
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex0.isInfinite();
      complex2.nthRoot(397);
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex complex5 = complex4.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.ONE.log();
      complex4.add((-783.6454566));
      complex2.isNaN();
      complex0.acos();
      complex0.createComplex(9.429257929713919E-133, (-0.5574077246549021));
      complex4.isNaN();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sin();
      complex4.pow(complex1);
      complex6.acos();
      Complex complex9 = complex5.cosh();
      complex6.getField();
      complex8.getImaginary();
      Complex.valueOf((-783.6454566), (-0.5403023058681398));
      complex6.toString();
      complex9.createComplex((-1873.2724810017228), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      complex1.atan();
      Complex complex2 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex3 = complex0.I.multiply(complex2);
      Complex complex4 = complex3.ONE.tanh();
      Complex complex5 = complex4.NaN.sqrt1z();
      complex4.INF.multiply(1);
      complex4.ONE.readResolve();
      complex2.NaN.tan();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex0.createComplex(0.0, (-19.10412460093854));
      complex0.isNaN();
      complex6.sin();
      Complex complex8 = complex7.pow(complex6);
      complex8.acos();
      Complex complex9 = complex2.cosh();
      complex9.ONE.getField();
      complex7.getImaginary();
      Complex.valueOf(0.0, 0.0);
      complex5.toString();
      complex8.createComplex(1595.730496, 0.0);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = new Complex(1.0, 1.0);
      complex0.I.pow(complex1);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.I.createComplex(7.076135457313529E-62, 1.0);
      complex1.getReal();
      Complex complex4 = complex1.conjugate();
      complex3.add(complex2);
      complex4.sinh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.tan();
      complex6.divide(complex0);
      complex1.conjugate();
      complex4.getArgument();
      complex4.log();
      complex4.hashCode();
      complex0.equals(complex4);
      complex2.abs();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex4 = complex0.I.multiply(complex3);
      Complex complex5 = complex4.ONE.tanh();
      complex5.NaN.sqrt1z();
      Complex complex6 = complex5.multiply(1);
      complex2.readResolve();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.tan();
      complex0.acos();
      Complex complex9 = complex0.createComplex(118.0, Double.POSITIVE_INFINITY);
      complex6.isNaN();
      Complex complex10 = complex0.sin();
      complex6.pow(complex7);
      complex9.acos();
      Complex complex11 = complex7.cosh();
      complex11.getField();
      complex10.getImaginary();
      Complex.valueOf(Double.NaN, 0.0);
      complex9.toString();
      complex8.createComplex(0.0, (-20.0));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.730496);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.sqrt1z();
      complex0.getImaginary();
      Complex complex4 = complex0.I.multiply(complex3);
      Complex complex5 = complex4.ONE.tanh();
      complex5.NaN.sqrt1z();
      Complex complex6 = Complex.valueOf(141.80010492);
      Complex complex7 = complex6.multiply(1073741824);
      complex3.readResolve();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex2.acos();
      Complex complex10 = complex9.createComplex(8.62880163941313E-60, 5.3331719086630523E-8);
      complex4.isNaN();
      Complex complex11 = complex7.sin();
      Complex complex12 = complex4.pow(complex3);
      complex11.acos();
      complex8.cosh();
      complex10.getField();
      Complex complex13 = Complex.I;
      complex13.getImaginary();
      Complex.valueOf(0.4330751895904541, 0.0);
      complex12.toString();
      Complex complex14 = Complex.ONE;
      complex14.createComplex((-7.229596196793864E-4), 1836.0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.acos();
      complex0.ZERO.abs();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.sqrt();
      complex0.sqrt();
      Complex complex3 = complex0.sqrt1z();
      complex3.I.exp();
      Complex complex4 = new Complex(0.0);
      complex0.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.multiply(complex0);
      complex0.isNaN();
      Complex complex3 = complex2.I.multiply(complex1);
      Complex complex4 = complex3.ONE.sinh();
      complex3.ZERO.readResolve();
      complex2.abs();
      complex0.toString();
      complex2.equals(complex1);
      Complex complex5 = complex1.pow((-151.295));
      complex5.getField();
      Complex complex6 = complex0.multiply(0.0);
      complex6.ONE.divide(0.0);
      complex0.getArgument();
      complex2.ZERO.add(complex6);
      complex0.ONE.reciprocal();
      Complex complex7 = complex0.multiply(20.0);
      Complex complex8 = complex1.createComplex(1453.254721, 0.0);
      complex8.I.exp();
      complex7.sinh();
      complex4.add(21.0);
      complex7.subtract(1453.254721);
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex((-1277.5769788971), (-1277.5769788971));
      Complex complex2 = complex0.NaN.tan();
      complex2.NaN.getArgument();
      complex1.I.add(0.0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex0.pow(complex3);
      complex4.toString();
      complex3.ZERO.pow(complex2);
      complex0.isInfinite();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex7.ONE.sqrt1z();
      complex4.hashCode();
      Complex complex9 = complex5.sqrt1z();
      complex0.isInfinite();
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex2.atan();
      complex10.INF.createComplex((-1277.5769788971), (-1277.5769788971));
      complex11.getArgument();
      Complex complex12 = complex1.conjugate();
      Complex complex13 = complex12.ZERO.sinh();
      complex5.atan();
      complex0.ONE.acos();
      complex10.ZERO.cosh();
      Complex complex14 = complex9.pow(Double.NaN);
      complex14.NaN.createComplex(2.5610814094543457, 1.0697050094604492);
      complex10.toString();
      complex0.asin();
      complex13.divide(Double.NaN);
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-691.6019204429));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.INF.add(complex0);
      complex1.NaN.sinh();
      Complex complex4 = complex0.asin();
      complex4.ZERO.reciprocal();
      Complex complex5 = complex0.I.atan();
      Complex complex6 = complex5.I.tanh();
      complex6.NaN.tan();
      Complex complex7 = complex0.createComplex((-20.0), (-691.6019204429));
      complex7.pow((-20.0));
      Complex.valueOf((-9.457084582570225E263), (-9.457084582570225E263));
      complex5.sqrt1z();
      complex0.ZERO.acos();
      complex7.subtract(0.0);
      Complex complex8 = complex0.pow(complex3);
      Complex complex9 = Complex.valueOf((-2313.35996630593), (-2313.35996630593));
      complex9.ONE.nthRoot(217);
      Complex complex10 = complex8.exp();
      complex10.NaN.createComplex((-2313.35996630593), 0.0);
      complex7.createComplex(0.0, 217);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      complex1.reciprocal();
      complex1.conjugate();
      complex1.I.sinh();
      Complex complex2 = complex0.I.tanh();
      Complex complex3 = Complex.valueOf((-3840.65), 0.0);
      Complex complex4 = complex3.add(3569.99199);
      Complex complex5 = complex3.I.divide(2426.0);
      complex3.divide(complex5);
      Complex complex6 = Complex.valueOf(1708.0);
      complex5.INF.createComplex((-951.7), 7.824500749252316E-9);
      complex0.hashCode();
      Complex complex7 = complex3.sqrt();
      complex7.ONE.asin();
      complex7.NaN.add(1612.94440054);
      Complex complex8 = complex6.sqrt1z();
      complex8.sqrt();
      Complex complex9 = complex5.add(complex2);
      complex4.isNaN();
      Complex complex10 = complex3.log();
      Complex complex11 = complex10.ZERO.sqrt1z();
      Complex complex12 = complex11.INF.sinh();
      complex12.ZERO.tan();
      complex12.hashCode();
      complex10.toString();
      complex12.getReal();
      complex9.log();
      Complex complex13 = complex3.pow(complex6);
      complex13.I.multiply(complex3);
      complex12.readResolve();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.divide(1192.1312967194392);
      Complex complex2 = complex0.ZERO.log();
      complex0.INF.hashCode();
      complex0.getImaginary();
      complex2.sinh();
      complex0.I.readResolve();
      complex2.toString();
      complex2.divide(0.0);
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.pow(240.810832764);
      Complex complex3 = complex1.add(complex2);
      complex1.INF.pow(complex2);
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex0.readResolve();
      Complex complex5 = complex1.multiply(complex2);
      Complex complex6 = complex5.INF.createComplex(0.0, 0.0);
      complex6.getField();
      Complex.valueOf(0.0);
      complex0.acos();
      complex2.toString();
      Complex complex7 = complex5.atan();
      complex4.log();
      complex7.ZERO.multiply(0.0);
      complex0.subtract(0.0);
      Complex complex8 = complex3.sin();
      complex8.sqrt();
      complex3.getArgument();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = (-2339);
      Complex complex1 = complex0.multiply((-2339));
      Complex complex2 = complex1.INF.tan();
      complex2.getField();
      complex1.abs();
      try { 
        complex1.nthRoot((-2339));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,339
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      complex1.INF.abs();
      Complex complex2 = Complex.valueOf(0.0, (-921.0));
      complex0.sin();
      Complex complex3 = complex0.ONE.multiply(complex2);
      complex0.isInfinite();
      complex2.nthRoot(397);
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex4.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex4.ONE.log();
      complex4.add((-783.6454566));
      complex2.isNaN();
      complex3.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.pow((double) 397);
      complex5.INF.divide(complex4);
      complex3.reciprocal();
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex6.ONE.reciprocal();
      complex6.INF.cos();
      Complex complex7 = complex5.cos();
      complex6.INF.sinh();
      complex3.hashCode();
      complex6.divide(complex3);
      Complex complex8 = complex7.sqrt1z();
      complex8.ZERO.log();
      complex7.I.readResolve();
      complex0.isNaN();
      complex3.isNaN();
      complex7.toString();
      complex6.tanh();
      Complex complex9 = Complex.valueOf((double) 397);
      complex6.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-225.22607692), (-1.0));
      complex0.NaN.cosh();
      Complex complex1 = complex0.INF.divide((-1387.2040915));
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.multiply((-2110.08));
      complex2.isInfinite();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.multiply(complex4);
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.I.log();
      Complex complex3 = complex1.ONE.acos();
      Complex complex4 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex5 = complex4.NaN.pow(6.283185307179586);
      Complex complex6 = complex4.INF.cos();
      complex4.ONE.divide(complex0);
      Complex complex7 = complex4.ONE.sinh();
      Complex complex8 = complex1.subtract(6.283185307179586);
      Complex complex9 = complex8.conjugate();
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex10 = complex0.tan();
      complex10.I.add(complex5);
      complex2.sqrt1z();
      complex3.getReal();
      complex7.getArgument();
      complex9.multiply(complex6);
      Complex complex11 = complex1.cos();
      complex4.asin();
      complex11.nthRoot(458);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-2501.02));
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.multiply(2220);
      complex0.INF.multiply(2220);
      Complex complex3 = complex0.divide(complex1);
      complex3.INF.multiply((-2501.02));
      Complex.valueOf(1.9617326259613037, 4974.88);
      complex3.I.subtract(complex2);
      complex1.subtract((-1477.0475230968602));
      complex0.INF.sinh();
      complex3.sinh();
      complex0.cosh();
      complex1.getField();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.createComplex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.ONE.multiply(complex0);
      Complex complex4 = complex3.sin();
      complex4.INF.getField();
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex5.INF.sqrt1z();
      Complex complex7 = Complex.valueOf(3084.037, 0.0);
      Complex complex8 = complex7.I.tan();
      complex8.hashCode();
      complex2.hashCode();
      Complex complex9 = complex7.sin();
      complex9.exp();
      Complex complex10 = Complex.valueOf((-1090.423408546), (-2149.1853657));
      complex6.cos();
      complex5.getArgument();
      complex8.isNaN();
      complex3.pow(0.0);
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.1275002921718894E-6), (-2.1275002921718894E-6));
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = Complex.valueOf(2273.7);
      Complex complex5 = complex3.INF.sqrt();
      complex5.abs();
      complex4.INF.subtract(0.0);
      complex1.NaN.divide((-2985.8378797771707));
      complex4.NaN.acos();
      Complex complex6 = complex0.cos();
      Complex complex7 = Complex.valueOf(2273.7);
      complex7.I.reciprocal();
      complex6.I.hashCode();
      complex1.ZERO.tanh();
      complex6.ONE.abs();
      complex0.divide(complex1);
      Complex complex8 = complex3.add(complex7);
      complex4.nthRoot(1);
      complex2.createComplex(606.52856678, (-3690.877025));
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.NaN.hashCode();
      Complex complex3 = complex2.NaN.subtract(1421.0);
      complex3.I.conjugate();
      Complex complex4 = complex0.asin();
      complex4.hashCode();
      complex3.toString();
      complex3.add(1421.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = new Complex(1.0, 1.0);
      complex0.I.pow(complex1);
      Complex complex2 = complex0.NaN.sqrt();
      Complex complex3 = complex2.I.createComplex(7.076135457313529E-62, 1.0);
      complex0.nthRoot(2520);
      complex2.asin();
      complex3.tan();
      complex1.abs();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      double double0 = (-391.4198);
      Complex complex0 = new Complex((-391.4198));
      Complex complex1 = complex0.ONE.conjugate();
      int int0 = 0;
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex(6.403477383195494E-34, 6.403477383195494E-34);
      complex0.getField();
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.add((-3310.3291162));
      complex2.ZERO.log();
      complex2.INF.hashCode();
      Complex complex3 = complex2.ONE.sinh();
      complex3.ZERO.atan();
      complex3.NaN.subtract(complex1);
      complex0.NaN.pow(complex3);
      Complex complex4 = complex1.createComplex((-1.0), 0.0);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex5.pow(complex1);
      complex5.divide(complex6);
      Complex complex7 = complex5.multiply((-1574));
      complex7.I.reciprocal();
      complex4.multiply(complex3);
      try { 
        complex1.nthRoot((-1574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,574
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3789.51911198104), (-220.217324664));
      Complex complex1 = complex0.ZERO.pow((-3789.51911198104));
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.ZERO.negate();
      complex3.INF.sqrt();
      complex3.ZERO.subtract(complex0);
      complex0.I.subtract(1.8597132378953187E-240);
      Complex complex4 = complex0.pow((-220.217324664));
      complex3.getReal();
      Complex complex5 = complex2.add(complex4);
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(636.1539);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.add(complex2);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex7.ONE.tanh();
      complex8.NaN.add(complex2);
      complex6.multiply(complex5);
      complex5.getArgument();
      complex5.cosh();
      Complex complex9 = complex1.cosh();
      complex7.pow(1574.918);
      complex9.add((-437.37163));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      Complex complex1 = complex0.ZERO.multiply((-392));
      Complex complex2 = complex0.INF.add(0.0);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.subtract(complex1);
      Complex complex4 = complex0.NaN.atan();
      Complex complex5 = complex4.NaN.multiply(2.1858142063550155E-134);
      complex5.divide(complex4);
      complex4.ONE.readResolve();
      complex0.getImaginary();
      Complex complex6 = complex0.INF.sin();
      Complex complex7 = complex2.multiply(3127);
      complex7.I.toString();
      Complex complex8 = complex2.asin();
      complex7.getArgument();
      Complex complex9 = complex4.subtract(complex8);
      complex1.isInfinite();
      Complex complex10 = complex6.I.tan();
      complex10.cosh();
      Complex complex11 = complex9.ONE.sqrt1z();
      complex11.ONE.abs();
      try { 
        complex8.nthRoot((-392));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -392
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.I.sqrt1z();
      complex2.ZERO.toString();
      complex0.abs();
      Complex complex4 = complex1.cos();
      complex4.INF.asin();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.tanh();
      complex6.INF.sinh();
      complex2.INF.pow(0.0);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex1.subtract(0.0);
      Complex complex9 = complex7.sqrt();
      complex0.atan();
      Complex complex10 = complex9.INF.negate();
      Complex complex11 = complex8.multiply((-1277));
      complex11.ONE.log();
      complex9.getReal();
      Complex complex12 = complex8.conjugate();
      Complex complex13 = complex3.add(complex10);
      complex6.sinh();
      complex9.tan();
      Complex complex14 = complex13.divide(complex7);
      Complex complex15 = complex14.conjugate();
      complex15.ONE.getArgument();
      complex15.I.log();
      complex12.hashCode();
      complex4.equals(complex5);
      complex5.abs();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf((-2529.23789), 0.0);
      Complex complex1 = Complex.INF;
      complex0.NaN.add(complex1);
      try { 
        complex0.nthRoot((-2571));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,571
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(1481.6102307, 0.0);
      Complex complex1 = Complex.valueOf((-10.875849691));
      complex0.pow(1481.6102307);
      complex1.createComplex((-1670.38), 1158.5627948919);
      Complex complex2 = complex1.INF.pow(complex0);
      complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.NaN.sin();
      Complex complex5 = complex3.sqrt1z();
      complex4.I.add(0.0);
      Complex complex6 = complex5.tan();
      complex4.isNaN();
      Complex complex7 = complex2.cosh();
      complex7.NaN.getArgument();
      complex7.I.negate();
      Complex complex8 = complex3.tan();
      complex8.ONE.add(1158.5627948919);
      complex0.readResolve();
      complex4.exp();
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1612);
      Complex.valueOf((double) 1612, (-1145.272024554527));
      complex0.getReal();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-1145.272024554527));
      complex0.pow((-1145.272024554527));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.exp();
      complex0.ZERO.getField();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf((-1.0));
      Complex complex4 = complex3.INF.cosh();
      complex4.I.getField();
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ONE.divide(complex0);
      complex0.INF.acos();
      Complex complex6 = complex3.I.divide((-1.0));
      Complex complex7 = complex6.INF.conjugate();
      complex6.ZERO.cos();
      complex4.ZERO.atan();
      Complex complex8 = complex3.INF.conjugate();
      Complex complex9 = complex0.sin();
      complex4.isInfinite();
      complex8.nthRoot(180);
      complex0.readResolve();
      complex2.sqrt1z();
      Complex complex10 = complex2.divide((-1759.5));
      Complex complex11 = complex0.conjugate();
      Complex complex12 = complex1.sqrt1z();
      complex10.atan();
      Complex.valueOf(0.0);
      complex4.readResolve();
      complex3.cos();
      Complex complex13 = complex12.multiply(180);
      complex11.add(complex13);
      complex9.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      List<Complex> list0 = complex2.nthRoot(1260);
      complex0.equals(list0);
      complex2.toString();
      complex1.isInfinite();
      Complex complex3 = complex0.atan();
      complex2.getReal();
      complex3.sqrt();
      complex0.toString();
      double double0 = 284.6222537;
      Complex complex4 = complex2.pow(284.6222537);
      complex2.readResolve();
      complex2.pow(complex3);
      complex4.negate();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.subtract(3419.2384767097);
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.I.conjugate();
      complex0.nthRoot(2165);
      Complex complex4 = complex0.NaN.multiply(complex1);
      complex4.divide(complex0);
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex5.NaN.sqrt();
      complex5.ZERO.sqrt();
      complex1.abs();
      Complex complex7 = complex0.negate();
      complex1.pow(complex7);
      Complex complex8 = complex1.conjugate();
      complex8.NaN.hashCode();
      Complex complex9 = complex8.sinh();
      complex7.divide(584.436052033);
      complex2.readResolve();
      complex2.abs();
      complex4.ZERO.cos();
      complex1.log();
      complex8.getReal();
      complex8.hashCode();
      complex9.cos();
      complex3.abs();
      Complex complex10 = complex9.log();
      Complex complex11 = complex4.sqrt1z();
      complex11.ONE.atan();
      complex7.add(complex6);
      Complex complex12 = Complex.valueOf(0.0);
      complex10.multiply(complex12);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2208.104843));
      complex0.INF.acos();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf(0.0);
      complex3.negate();
      Complex complex4 = complex1.I.acos();
      complex0.toString();
      Complex complex5 = complex2.divide((-2208.104843));
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex4.multiply(1);
      complex7.ZERO.sinh();
      Complex complex9 = Complex.valueOf((-2208.104843), (-2208.104843));
      complex6.I.sqrt1z();
      Complex complex10 = complex2.NaN.createComplex(1, (-6.269066061111782E-9));
      Complex complex11 = complex9.ZERO.atan();
      complex7.isNaN();
      complex4.divide(complex5);
      complex11.cos();
      Complex complex12 = complex5.subtract((double) 1);
      complex11.getImaginary();
      complex12.INF.reciprocal();
      complex6.getArgument();
      complex12.getImaginary();
      complex5.isNaN();
      complex8.sinh();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.INF.hashCode();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf((-1.0));
      Complex complex3 = complex1.ONE.multiply(336.4906683874606);
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.createComplex(Double.POSITIVE_INFINITY, (-215.865313948375));
      Complex complex7 = complex2.ONE.log();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      complex0.getArgument();
      complex6.isInfinite();
      Complex complex8 = complex0.conjugate();
      Complex complex9 = complex5.add(0.0);
      complex2.getReal();
      complex8.NaN.hashCode();
      complex8.subtract(complex5);
      complex6.isNaN();
      Complex complex10 = complex8.subtract(complex9);
      complex9.INF.readResolve();
      complex8.ONE.negate();
      complex10.INF.abs();
      Complex complex11 = complex10.exp();
      Complex complex12 = complex10.multiply((-215.865313948375));
      Complex complex13 = complex3.ONE.cosh();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex12.ZERO.exp();
      assertFalse(complex14.equals((Object)complex7));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      
      complex8.isInfinite();
      double double0 = complex4.getImaginary();
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(336.4906683874606, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      complex5.cosh();
      Complex complex15 = complex12.add(0.49999999999999994);
      assertSame(complex15, complex11);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      double double1 = complex5.abs();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      
      Complex complex16 = complex2.reciprocal();
      assertTrue(complex16.equals((Object)complex2));
      
      complex8.negate();
      assertFalse(complex0.equals((Object)complex10));
  }
}
