/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:56:54 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(683.97);
      Complex complex2 = complex1.negate();
      complex2.I.readResolve();
      complex1.NaN.tan();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 237.4121349849);
      complex0.ZERO.hashCode();
      Complex complex4 = complex3.ZERO.sin();
      complex4.INF.asin();
      Complex complex5 = complex2.add(complex3);
      Complex complex6 = complex2.divide(683.97);
      complex6.INF.getArgument();
      double double0 = (-3931.0166433);
      Complex complex7 = Complex.valueOf((-3931.0166433), Double.POSITIVE_INFINITY);
      complex7.NaN.sinh();
      complex5.ONE.multiply(complex7);
      complex5.INF.subtract(0.9999997940005639);
      complex5.abs();
      try { 
        complex5.nthRoot((-2144799293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,144,799,293
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1238, Double.POSITIVE_INFINITY);
      complex0.multiply(1199);
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.divide(20.0);
      complex3.tan();
      complex0.toString();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-1816.7698447930502);
      Complex complex0 = Complex.valueOf((-1816.7698447930502));
      Complex complex1 = complex0.INF.pow((-1816.7698447930502));
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.I.exp();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-670.072), (-670.072));
      Complex complex1 = complex0.ONE.negate();
      complex1.INF.multiply((-670.072));
      Complex complex2 = complex0.exp();
      complex2.ONE.multiply(2316.1580057424476);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf((-670.072), 1.1768108384670781E-7);
      Complex complex5 = complex4.subtract(1.1188538074493408);
      complex5.subtract(Double.NaN);
      complex3.multiply(complex0);
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex((-2446.57686125663));
      complex0.INF.toString();
      Complex complex1 = complex0.multiply(865);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.pow((-2446.57686125663));
      complex3.reciprocal();
      complex3.acos();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex3.pow(1624695.733643948);
      Complex complex4 = Complex.valueOf((-447.2382577), Double.POSITIVE_INFINITY);
      complex4.divide(Double.POSITIVE_INFINITY);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex(637.3179609982658);
      complex0.nthRoot(1);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.add(0.5590575933456421);
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.cos();
      complex0.reciprocal();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = Complex.valueOf(20.0);
      complex6.tanh();
      complex5.divide(complex3);
      complex2.getField();
      complex1.abs();
      complex2.reciprocal();
      Complex complex7 = new Complex(20.0);
      complex4.tan();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-670.072), (-670.072));
      Complex complex1 = complex0.ONE.negate();
      complex1.INF.multiply((-670.072));
      Complex complex2 = complex0.exp();
      complex2.ONE.multiply(2314.003134565);
      complex0.readResolve();
      Complex complex3 = complex0.add(complex2);
      complex1.getField();
      complex2.ONE.tan();
      Complex.valueOf((-291.72681463), (-1212.6));
      complex0.pow((-4491.931494349));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex4.acos();
      complex4.I.getArgument();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex4.pow((-291.72681463));
      complex4.divide((-1489.0));
      complex5.subtract(29.5877975);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(1675.3022304);
      complex0.nthRoot(1409);
      Complex complex1 = Complex.valueOf(1675.3022304, (double) 1409);
      Complex complex2 = complex1.pow((double) 1409);
      complex2.getImaginary();
      complex1.cosh();
      complex2.multiply(1675.3022304);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(637.3179609982658);
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex complex2 = complex0.add(637.3179609982658);
      complex2.asin();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.multiply(3367.0);
      Complex complex5 = complex1.tanh();
      complex4.sqrt1z();
      complex2.sinh();
      Complex complex6 = complex3.pow(637.3179609982658);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sqrt();
      complex8.getField();
      complex6.reciprocal();
      complex5.negate();
      complex7.add(complex1);
      complex5.tan();
      complex1.getArgument();
      Complex.valueOf(637.3179609982658);
      complex8.subtract((-2727.875639450089));
      complex4.getField();
      Complex complex9 = Complex.valueOf(3367.0, 1.9711751621240536E163);
      complex9.add(complex0);
      Complex complex10 = new Complex(1.9711751621240536E163, 0.0);
      complex10.sqrt1z();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = (-2446.57686125663);
      Complex complex0 = Complex.ONE;
      complex0.add((-2446.57686125663));
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.cos();
      double double1 = 3367.0;
      complex3.multiply(1196.677495154);
      complex1.tanh();
      complex2.sqrt1z();
      Complex complex4 = Complex.valueOf(3367.0);
      complex4.ONE.asin();
      try { 
        complex4.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(2116288.9849869846, 187.20188242994357);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.subtract(7.91829631566543E-4);
      Complex complex4 = complex1.multiply(2116288.9849869846);
      complex0.sqrt();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.sqrt1z();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex6.pow(187.20188242994357);
      Complex complex9 = Complex.INF;
      complex9.I.hashCode();
      complex9.sqrt();
      complex3.I.cos();
      complex4.getField();
      complex8.reciprocal();
      complex2.negate();
      Complex complex10 = complex5.add(complex4);
      Complex complex11 = complex0.divide((-3097.989638350759));
      complex3.tan();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.negate();
      complex13.tan();
      complex11.toString();
      complex7.pow(complex6);
      Complex complex14 = new Complex(4.7613641572445654E170, 3367.0);
      complex14.sin();
      Complex complex15 = Complex.NaN;
      complex15.add(3367.0);
      Complex complex16 = Complex.ZERO;
      complex10.multiply(374.3147314);
      complex6.acos();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(637.3179609982658);
      Complex complex1 = new Complex((-8.204903560604627E-9), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.asin();
      complex0.sin();
      complex1.subtract((-5485.092852));
      Complex complex3 = complex0.asin();
      complex2.getArgument();
      Complex complex4 = complex0.subtract(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.pow(complex0);
      complex1.getArgument();
      complex3.pow((-0.6622486721878449));
      complex4.toString();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.tan();
      complex1.getArgument();
      Complex.valueOf(5.5906456251308664E-8);
      complex6.sinh();
      complex7.tanh();
      complex3.divide(complex6);
      complex7.negate();
      complex2.conjugate();
      Complex complex8 = Complex.NaN;
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-1.1306860837934988E281));
      Complex complex2 = complex0.add((-434.5182261554));
      Complex complex3 = complex1.asin();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.multiply((-3248.9712058297));
      complex3.tanh();
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex6.sinh();
      Complex complex9 = Complex.NaN;
      complex9.pow((-3248.9712058297));
      Complex complex10 = Complex.INF;
      complex6.sqrt();
      complex8.getField();
      complex2.reciprocal();
      complex4.negate();
      Complex complex11 = complex4.add(complex0);
      Complex complex12 = Complex.NaN;
      complex12.divide(186.398230902);
      complex7.tan();
      complex6.negate();
      Complex complex13 = complex5.exp();
      complex11.getReal();
      complex9.acos();
      Complex complex14 = Complex.I;
      complex14.log();
      Complex complex15 = Complex.NaN;
      Object object0 = new Object();
      Object object1 = new Object();
      complex13.equals(object1);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(637.3179609982658);
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex complex2 = complex0.add(637.3179609982658);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.subtract(637.3179609982658);
      Complex complex6 = complex5.asin();
      complex1.getArgument();
      Complex complex7 = complex4.subtract((-8.204903560604627E-9));
      Complex complex8 = complex6.pow(complex5);
      complex7.getArgument();
      complex8.pow((-3.141592653589793));
      complex8.toString();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex9.tan();
      complex3.getArgument();
      complex10.cos();
      Complex.valueOf(7.066491077377918E172, 339.0);
      Complex.valueOf(637.3179609982658);
      int int0 = 179478;
      // Undeclared exception!
      complex10.nthRoot(179478);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(936.7540129431378, Double.NaN);
      Complex complex1 = new Complex(936.7540129431378);
      Complex complex2 = Complex.I;
      complex2.divide(534.6);
      Complex complex3 = Complex.NaN;
      complex3.exp();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.I;
      complex1.log();
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.I;
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(637.5766509065638);
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      complex1.add(637.5766509065638);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.tanh();
      complex6.sqrt1z();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sinh();
      complex6.pow(201.39472);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex6.sqrt();
      complex7.getField();
      complex0.reciprocal();
      Complex complex11 = complex2.negate();
      complex2.add(complex10);
      complex11.divide(201.39472);
      complex6.tan();
      complex1.negate();
      Complex complex12 = Complex.INF;
      complex12.exp();
      complex3.getReal();
      complex7.acos();
      Complex complex13 = Complex.I;
      complex5.log();
      Complex complex14 = Complex.NaN;
      Object object0 = new Object();
      Complex complex15 = Complex.INF;
      Complex.valueOf((-856.75));
      complex15.equals(complex6);
      complex8.sqrt();
      Complex.valueOf((-1592.65024), (-856.75));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(631.4493592313662);
      complex0.nthRoot(1409);
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex.valueOf(631.4493592313662, 631.4493592313662);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.cos();
      complex3.INF.nthRoot(1409);
      complex2.reciprocal();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex2.tanh();
      complex4.divide(complex1);
      Complex complex7 = Complex.I;
      complex7.multiply(1409);
      complex5.acos();
      Complex complex8 = Complex.valueOf(852.609, 631.4493592313662);
      Complex complex9 = complex8.atan();
      complex6.multiply(1409);
      complex7.cos();
      complex9.getField();
      Complex complex10 = new Complex((-8.204903560604627E-9), 631.4493592313662);
      complex7.add(complex10);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = complex0.INF.add(0.9758068501562432);
      complex2.ONE.toString();
      complex2.getArgument();
      Complex complex3 = complex0.INF.atan();
      complex0.getField();
      complex1.INF.negate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex1.sinh();
      complex5.I.abs();
      complex5.NaN.pow(complex1);
      Complex complex6 = complex5.I.acos();
      complex6.I.sqrt1z();
      Complex complex7 = complex4.negate();
      complex7.I.multiply(0.9758068501562432);
      Complex complex8 = complex2.createComplex(0.9758068501562432, (-20.0));
      Complex complex9 = complex8.ONE.asin();
      complex9.ONE.tan();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.ONE.tanh();
      Complex complex12 = complex10.pow(0.9758068501562432);
      complex12.tan();
      complex4.readResolve();
      complex0.negate();
      complex0.divide(0.9758068501562432);
      complex10.asin();
      complex3.atan();
      complex11.reciprocal();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(637.3179609982658);
      complex0.nthRoot(1409);
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex complex2 = complex0.add(637.3179609982658);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.cos();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.multiply(976.8532466779);
      complex3.sqrt();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex5.sqrt1z();
      complex3.sinh();
      complex6.pow((-375.88750597469));
      Complex complex9 = Complex.INF;
      Complex complex10 = complex4.sqrt();
      complex7.getField();
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex4.negate();
      Complex complex13 = complex12.add(complex6);
      complex12.divide((double) 1409);
      complex11.tan();
      complex8.negate();
      complex6.getField();
      complex1.exp();
      complex13.getReal();
      Complex complex14 = Complex.valueOf(637.3179609982658);
      complex14.acos();
      Complex complex15 = Complex.I;
      Complex complex16 = complex8.log();
      Complex complex17 = Complex.NaN;
      Object object0 = new Object();
      complex1.equals(object0);
      complex16.sqrt();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(637.3179609982658);
      complex0.nthRoot(1409);
      complex0.add(637.3179609982658);
      Complex complex1 = complex0.add((double) 1409);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.cos();
      complex2.reciprocal();
      Complex complex5 = complex1.reciprocal();
      complex1.tanh();
      Complex complex6 = new Complex(637.3179609982658, 637.3179609982658);
      complex6.divide(complex0);
      Complex complex7 = new Complex(407.0425237, 1.4521524906158447);
      complex4.getField();
      complex6.abs();
      complex6.reciprocal();
      Complex complex8 = Complex.ONE;
      complex2.divide(637.3179609982658);
      complex4.tan();
      Complex complex9 = complex5.negate();
      complex3.getField();
      Complex complex10 = complex3.exp();
      complex3.getReal();
      Complex complex11 = complex10.acos();
      Complex complex12 = Complex.I;
      complex11.log();
      Complex complex13 = Complex.NaN;
      Object object0 = new Object();
      complex7.equals(object0);
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(637.3179609982658);
      complex0.nthRoot(1409);
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex complex2 = complex0.add(637.3179609982658);
      complex2.asin();
      Complex complex3 = complex1.cos();
      complex1.multiply(3367.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex1.tanh();
      complex4.sqrt1z();
      complex2.sinh();
      Complex complex6 = complex3.pow(637.3179609982658);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sqrt();
      complex8.getField();
      Complex complex9 = complex6.reciprocal();
      complex5.negate();
      complex7.add(complex1);
      complex0.divide(3367.0);
      complex3.tan();
      Complex complex10 = complex1.negate();
      complex9.getField();
      Complex complex11 = complex6.exp();
      Complex complex12 = Complex.valueOf(637.3179609982658, (-20.0));
      complex12.getReal();
      complex11.asin();
      complex0.acos();
      complex10.log();
      Object object0 = new Object();
      complex0.equals(complex4);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.7006726968568243E282, 2.7006726968568243E282);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.ONE.createComplex(2042.506055649, 2.7006726968568243E282);
      complex3.INF.multiply(622);
      Complex complex4 = complex2.multiply(complex0);
      Complex.valueOf(2.4240442814945802E83, 1088.988);
      complex0.I.log();
      Complex complex5 = complex4.INF.asin();
      complex0.divide(2.7006726968568243E282);
      complex5.I.sinh();
      complex5.sqrt();
      complex5.INF.abs();
      complex5.subtract((-2597.1352871));
      complex1.multiply(complex2);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(637.5766509065638);
      complex0.nthRoot(1409);
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex complex2 = complex0.add(637.5766509065638);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.cos();
      complex4.reciprocal();
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.reciprocal();
      complex4.tanh();
      Complex complex8 = complex6.divide(complex3);
      Complex complex9 = complex7.sin();
      complex7.getField();
      complex8.abs();
      complex9.reciprocal();
      Complex complex10 = Complex.ONE;
      Complex complex11 = complex10.divide(Double.NaN);
      complex3.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.toString();
      complex6.equals(complex11);
      complex5.reciprocal();
      Complex complex12 = complex0.conjugate();
      complex3.asin();
      Complex complex13 = complex5.negate();
      complex1.add((-1120.8783469583277));
      complex12.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(637.3179609982658);
      complex0.nthRoot(1409);
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex complex2 = complex0.add(637.3179609982658);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.sqrt();
      complex0.cos();
      complex4.reciprocal();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.reciprocal();
      complex4.tanh();
      complex1.pow(329.93651171535);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex5.divide(complex7);
      complex6.sin();
      complex7.getField();
      complex8.abs();
      Complex complex9 = new Complex((-406502.9857812304));
      complex9.tan();
      complex2.toString();
      complex2.pow(complex4);
      complex3.sin();
      complex6.add(637.3179609982658);
      complex6.asin();
      complex5.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-999.91), (-999.91));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.INF.divide(complex0);
      Complex complex4 = complex2.pow((-999.91));
      complex0.log();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex2.multiply(complex3);
      complex2.getArgument();
      complex3.sqrt1z();
      complex6.sinh();
      complex5.pow(Double.NaN);
      complex4.sqrt();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.I;
      complex4.subtract(complex8);
      complex0.readResolve();
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex((-999.91), (-999.91));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.divide(complex0);
      complex1.pow((-999.91));
      complex0.sinh();
      complex1.multiply(complex2);
      complex1.getArgument();
      complex0.tan();
      complex2.add((-5744.8));
      Complex complex3 = new Complex(0.7853981633974483);
      Complex.valueOf((-4120.02816043));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.40871500968933105, 0.40871500968933105);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex1.cos();
      complex0.reciprocal();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.tan();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = Complex.valueOf((-1.8170464148576554E7));
      complex8.tanh();
      complex1.pow((-1334.629));
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf(0.0);
      complex8.divide(complex10);
      complex6.sin();
      complex0.getField();
      complex0.abs();
      Complex complex11 = complex0.reciprocal();
      complex5.pow(complex9);
      complex11.getReal();
      Complex.valueOf((-1334.629));
      complex0.toString();
      complex4.equals(complex1);
      Complex complex12 = complex6.reciprocal();
      complex12.conjugate();
      complex2.asin();
      complex3.negate();
      complex12.add((-2.749127978087685E126));
      complex7.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-2446.57686125663), (-2446.57686125663));
      complex0.INF.toString();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.add((-2446.57686125663));
      complex2.ZERO.log();
      Complex complex3 = complex1.acos();
      complex2.tanh();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.add(0.0);
      complex5.add(complex4);
      complex3.negate();
      Complex complex6 = complex4.asin();
      complex6.ONE.sinh();
      complex1.reciprocal();
      complex3.conjugate();
      complex1.toString();
      Complex complex7 = complex4.pow(complex3);
      complex0.sin();
      complex2.add((double) 865);
      complex4.asin();
      complex2.exp();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex((-9.340259278913173E-8));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.pow((-99.11));
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.sinh();
      complex4.multiply(complex5);
      complex1.getArgument();
      Complex complex6 = complex0.tan();
      complex6.INF.getField();
      complex5.I.acos();
      complex5.add(4.3079982556221595E-8);
      Complex complex7 = new Complex((-9.340259278913173E-8));
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex((-2446.57686125663), (-2446.57686125663));
      complex0.INF.toString();
      Complex complex1 = complex0.sin();
      complex0.I.add((-2446.57686125663));
      Complex complex2 = complex0.multiply(865);
      complex1.acos();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.NaN.multiply((-686));
      complex3.cos();
      complex2.INF.multiply(0.0);
      Complex complex5 = complex4.ONE.sqrt();
      complex2.getArgument();
      Complex complex6 = complex5.tan();
      complex3.add((double) 865);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex((-999.91), (-999.91));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.INF.divide(complex0);
      complex2.pow((-999.91));
      complex3.readResolve();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = Complex.valueOf((-0.16821808053257947), 1378.906);
      complex6.tan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.negate();
      Complex complex9 = new Complex(1378.906, 471.109224555876);
      Complex complex10 = complex4.pow(complex9);
      Complex complex11 = complex5.createComplex(1660.385, 8.294152030430268E-5);
      Complex complex12 = complex11.divide(1660.385);
      complex10.log();
      complex6.nthRoot(322);
      Complex complex13 = complex8.conjugate();
      Complex complex14 = complex12.sin();
      Complex.valueOf((-20.0), 0.9999995274747413);
      Complex.valueOf((-4811.689929836705));
      complex13.multiply(1494.6);
      Complex complex15 = Complex.NaN;
      complex15.reciprocal();
      complex13.negate();
      complex6.readResolve();
      complex14.toString();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ZERO.add(complex1);
      complex0.INF.getArgument();
      complex0.abs();
      complex0.getImaginary();
      complex0.readResolve();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.ONE.reciprocal();
      Complex complex5 = complex0.sqrt1z();
      complex5.I.readResolve();
      Complex complex6 = complex0.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.cos();
      Complex complex8 = complex7.INF.tanh();
      complex4.INF.exp();
      complex8.I.subtract(Double.POSITIVE_INFINITY);
      complex6.atan();
      Complex complex9 = complex8.ONE.conjugate();
      complex9.ZERO.asin();
      complex9.I.pow(complex4);
      complex2.exp();
      complex6.divide(complex7);
      Complex complex10 = complex2.cos();
      complex2.readResolve();
      complex10.add(Double.POSITIVE_INFINITY);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(637.5766509065638);
      Complex complex1 = complex0.add(2.74330017872121E-197);
      Complex complex2 = Complex.valueOf(2396.264518, 2.74330017872121E-197);
      Complex complex3 = complex2.add((-6314.1252429272145));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.cos();
      complex0.reciprocal();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex1.tanh();
      complex4.divide(complex7);
      Complex complex9 = complex0.sin();
      complex6.getField();
      complex8.abs();
      complex8.reciprocal();
      Complex complex10 = complex3.pow(complex5);
      complex5.getReal();
      Complex complex11 = Complex.valueOf((-0.9861447070874785));
      complex6.toString();
      complex10.equals(complex9);
      Complex complex12 = Complex.ONE;
      complex12.reciprocal();
      complex9.conjugate();
      complex11.asin();
      Complex complex13 = new Complex(2715.4288569589);
      complex13.negate();
      complex7.add((-6314.1252429272145));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2075.4088164);
      Complex complex1 = complex0.multiply(2075.4088164);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.sqrt1z();
      complex1.sinh();
      Complex complex4 = complex2.pow(1876.672327070269);
      complex2.sqrt();
      complex4.getField();
      complex1.reciprocal();
      complex3.sinh();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex4.add(complex0);
      complex6.divide((-3.5997360512765566E-9));
      Complex complex7 = complex5.tan();
      complex7.negate();
      complex0.getField();
      complex3.exp();
      Complex complex8 = Complex.ZERO;
      complex8.getReal();
      complex4.asin();
      Complex complex9 = Complex.ZERO;
      complex9.acos();
      complex0.log();
      Object object0 = new Object();
      Complex complex10 = Complex.INF;
      complex7.equals(complex10);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-999.91), (-999.91));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.INF.divide(complex0);
      complex2.pow((-999.91));
      Complex complex3 = complex0.log();
      complex0.sinh();
      Complex complex4 = Complex.INF;
      complex4.subtract((-999.91));
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.pow(complex2);
      complex3.getReal();
      Complex.valueOf(Double.NaN);
      complex2.toString();
      Complex complex4 = Complex.NaN;
      complex4.equals(complex1);
      complex2.nthRoot(333);
      complex4.asin();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.exp();
      complex0.ZERO.subtract(0.02316705882549286);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.add((-3383.80840901));
      Complex complex3 = complex1.ONE.add(complex0);
      Complex complex4 = complex1.NaN.negate();
      complex4.reciprocal();
      complex1.ONE.conjugate();
      complex1.toString();
      Complex complex5 = complex2.pow(complex3);
      Complex complex6 = complex1.sin();
      complex5.abs();
      complex4.exp();
      complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.40871500968933105, 0.40871500968933105);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.I.subtract(complex2);
      complex0.hashCode();
      complex4.I.getArgument();
      complex2.ONE.getArgument();
      Complex complex5 = complex4.divide(0.40871500968933105);
      complex5.ONE.negate();
      complex2.isNaN();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex0.tanh();
      complex7.I.toString();
      complex7.cosh();
      complex7.hashCode();
      Complex complex8 = complex6.sqrt();
      Complex complex9 = complex0.createComplex(0.40871500968933105, 0.0);
      complex8.hashCode();
      Complex complex10 = Complex.valueOf(0.0);
      Complex complex11 = complex10.add(complex0);
      complex11.readResolve();
      complex9.sin();
      complex4.cosh();
      Complex complex12 = complex3.reciprocal();
      complex3.toString();
      complex12.createComplex(736.2298052, Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex6.equals(object0);
      complex6.abs();
      complex10.exp();
      complex12.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1442.6182856291741);
      Complex complex1 = complex0.ZERO.add(1442.6182856291741);
      Complex complex2 = Complex.INF;
      complex0.subtract(complex1);
      complex1.divide(complex0);
      Complex complex3 = complex0.pow(1442.6182856291741);
      complex3.ONE.exp();
      complex2.log();
      complex2.sinh();
      Complex complex4 = new Complex(1442.6182856291741, 1442.6182856291741);
      complex2.getArgument();
      complex0.tan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.add(847.6007);
      Complex complex7 = new Complex(847.6007);
      complex5.subtract(complex6);
      complex2.createComplex(847.6007, 692.29);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-2446.57686125663), (-2446.57686125663));
      complex0.INF.toString();
      Complex complex1 = complex0.sin();
      complex0.I.add((-2446.57686125663));
      Complex complex2 = complex0.multiply(865);
      complex1.acos();
      Complex complex3 = Complex.valueOf((double) 865, (double) 865);
      Complex complex4 = complex3.NaN.multiply((-686));
      complex3.cos();
      complex2.INF.multiply(0.0);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex5.INF.tanh();
      complex0.INF.sqrt1z();
      complex6.INF.sinh();
      Complex complex7 = complex4.NaN.pow((double) 865);
      complex7.INF.sqrt();
      complex6.NaN.getField();
      Complex complex8 = complex3.INF.reciprocal();
      Complex complex9 = complex0.sinh();
      complex1.ZERO.negate();
      complex9.NaN.add(complex3);
      complex4.ONE.divide((-2272.82));
      complex9.ZERO.tan();
      complex2.negate();
      complex1.getField();
      complex8.exp();
      complex4.getReal();
      complex3.asin();
      Complex complex10 = complex5.INF.acos();
      complex6.log();
      Object object0 = new Object();
      complex6.equals(object0);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(637.5766509065638);
      complex0.nthRoot(1409);
      Complex complex1 = complex0.add((-8.204903560604627E-9));
      Complex complex2 = complex0.add(637.5766509065638);
      complex2.asin();
      Complex complex3 = complex1.sqrt();
      complex0.cos();
      complex3.reciprocal();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex4.reciprocal();
      complex3.tanh();
      complex1.pow(329.93651171535);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = complex5.sin();
      complex6.getField();
      complex7.abs();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex8.pow(complex1);
      complex4.getReal();
      Complex complex11 = Complex.valueOf(1.61949812578045E-182);
      complex0.toString();
      complex10.equals(complex6);
      complex9.reciprocal();
      Complex.valueOf(Double.NaN, 5.092753117288608E212);
      complex8.conjugate();
      complex11.asin();
      complex3.negate();
      complex7.add(637.5766509065638);
      complex9.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 242.270285144);
      complex0.ONE.nthRoot(7);
      Complex complex1 = Complex.valueOf((-808.34329), 20.0);
      Complex complex2 = Complex.valueOf((double) 7);
      complex2.I.getArgument();
      Complex complex3 = complex1.createComplex(1490.53415, 0.3121675414510701);
      complex3.hashCode();
      Complex complex4 = Complex.valueOf((-3690.0));
      Complex complex5 = new Complex(1490.53415, 1.5707963267948966);
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = Complex.ZERO;
      complex7.readResolve();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex0.reciprocal();
      complex1.toString();
      Complex complex11 = complex4.createComplex(3.7254431343766676E-4, 2.0);
      complex9.equals(complex10);
      complex11.abs();
      complex8.exp();
      complex2.subtract(complex7);
      complex7.tanh();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.exp();
      Complex complex1 = complex0.ZERO.subtract(0.02316705882549286);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.add((-3383.80840901));
      Complex complex4 = complex2.ONE.add(complex0);
      Complex complex5 = complex2.NaN.negate();
      complex5.reciprocal();
      complex2.ONE.conjugate();
      complex2.toString();
      Complex complex6 = complex3.pow(complex4);
      complex2.sin();
      complex1.add(complex6);
      complex4.divide(Double.NaN);
      complex0.asin();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex(2.2273635587196807E-39, 2.2273635587196807E-39);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.subtract(complex0);
      complex1.divide(complex2);
      Complex complex4 = complex3.pow(637.5766509065638);
      Complex complex5 = complex2.log();
      Complex complex6 = complex5.sinh();
      complex6.multiply(complex4);
      complex0.getArgument();
      complex2.tan();
      complex6.add(782.31952877464);
      complex2.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.cos();
      complex1.NaN.pow((-1681.119147062065));
      complex2.ZERO.toString();
      complex1.nthRoot(1);
      Complex complex3 = complex0.add((double) 1);
      Complex complex4 = complex3.NaN.add((double) 1);
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex3.ZERO.cos();
      Complex complex7 = complex3.reciprocal();
      complex5.INF.tan();
      Complex complex8 = complex3.reciprocal();
      complex3.ONE.tanh();
      Complex complex9 = complex8.INF.pow((-205.1905775));
      Complex complex10 = complex5.divide(complex3);
      complex8.sin();
      complex10.getField();
      complex6.abs();
      complex9.INF.reciprocal();
      Complex complex11 = complex0.pow(complex10);
      complex8.getReal();
      Complex complex12 = Complex.valueOf(0.5);
      complex12.ZERO.toString();
      complex8.equals(complex12);
      complex4.reciprocal();
      complex9.conjugate();
      Complex complex13 = Complex.valueOf(1.0);
      complex13.equals(complex7);
      Complex complex14 = new Complex(1.0);
      complex14.abs();
      complex11.exp();
      complex11.subtract(complex13);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(637.5766509065638);
      Complex complex1 = complex0.add(2.74330017872121E-197);
      Complex complex2 = Complex.valueOf(2396.264518, (-4416.982797866937));
      Complex complex3 = complex2.add((-6314.1252429272145));
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.cos();
      complex0.reciprocal();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex4.reciprocal();
      Complex complex8 = complex1.tanh();
      Complex complex9 = complex4.pow((-205.1905775));
      complex4.divide(complex7);
      Complex complex10 = complex0.sin();
      complex9.getField();
      complex8.abs();
      complex8.reciprocal();
      Complex complex11 = complex3.pow(complex5);
      complex5.getReal();
      Complex complex12 = Complex.valueOf((-0.9861447070874785));
      complex6.toString();
      complex11.equals(complex10);
      Complex complex13 = Complex.ONE;
      complex13.reciprocal();
      complex10.conjugate();
      complex12.asin();
      Complex complex14 = new Complex(2715.4288569589);
      complex14.negate();
      complex7.add((-6314.1252429272145));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(1442.6182856291741);
      Complex complex1 = complex0.ZERO.add(1442.6182856291741);
      Complex complex2 = new Complex((-1152.78783));
      Complex complex3 = complex1.reciprocal();
      complex2.sqrt1z();
      complex3.subtract(complex2);
      complex3.pow(1442.6182856291741);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.INF.pow(complex1);
      complex3.I.add(complex0);
      Complex complex4 = complex2.ZERO.sqrt1z();
      Complex complex5 = complex4.INF.sqrt1z();
      Complex complex6 = complex2.ONE.createComplex(0.0, 6.39485115791896E288);
      complex6.add(6.39485115791896E288);
      Complex complex7 = complex0.add(complex1);
      complex5.negate();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.conjugate();
      complex7.toString();
      Complex.valueOf(6.39485115791896E288, (-4039.252684501));
      complex8.readResolve();
      complex9.equals(complex10);
      Complex complex11 = Complex.INF;
      complex2.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex0.ZERO.subtract(0.02316705882549286);
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(246.6139730126695, (-279.0354));
      complex4.hashCode();
      complex1.abs();
      complex0.abs();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex0.add(complex5);
      Object object0 = new Object();
      Complex complex7 = new Complex(1.0);
      complex2.equals(complex7);
      complex2.multiply(complex4);
      Complex complex8 = Complex.ZERO;
      complex6.pow((-472.644209308));
      complex1.multiply(complex7);
      Complex complex9 = complex4.pow((-3383.80840901));
      complex4.add(complex9);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-999.91), (-999.91));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.INF.divide(complex0);
      complex2.pow((-999.91));
      Complex complex4 = complex0.log();
      complex0.sinh();
      complex2.multiply(complex3);
      complex2.getArgument();
      complex4.tan();
      complex3.add((-5744.8));
      Complex complex5 = new Complex(Double.NaN);
      complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ONE.divide(0.05694137513637543);
      Complex complex3 = complex0.NaN.pow(0.0);
      Complex complex4 = complex2.ZERO.subtract(0.0);
      complex0.hashCode();
      complex3.toString();
      complex2.INF.toString();
      Complex complex5 = complex1.add(0.0);
      complex5.getField();
      complex2.pow(complex0);
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.createComplex(2.0, (-73.9441132));
      complex3.divide(complex6);
      complex1.equals(complex3);
      complex7.ONE.pow(complex3);
      Complex complex8 = complex0.atan();
      complex4.multiply(0);
      complex3.hashCode();
      complex1.multiply(complex6);
      complex8.readResolve();
      complex3.cos();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-452.6001016794), (-1.4291517981101049E-8));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex1.add(0.0);
      complex2.isInfinite();
      Complex complex6 = complex5.tanh();
      complex5.INF.multiply(0);
      complex6.ZERO.tan();
      complex1.sinh();
      complex6.hashCode();
      Complex complex7 = complex4.createComplex(951.3103493858321, (-452.6001016794));
      complex7.ZERO.readResolve();
      complex7.ONE.asin();
      complex7.I.divide((-479.2037788454961));
      complex7.createComplex(0.0, (-685.2938667023817));
      Complex complex8 = complex0.asin();
      complex1.I.sinh();
      Complex complex9 = complex5.log();
      complex3.subtract(0.0);
      complex4.tanh();
      complex7.toString();
      complex9.sqrt();
      Complex complex10 = new Complex(1072.536899500266);
      complex8.add(complex10);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex1.INF.createComplex((-20.0), (-4329.58030318544));
      complex2.sin();
      Complex complex3 = complex0.NaN.reciprocal();
      complex0.ONE.hashCode();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex5.sinh();
      complex6.ONE.log();
      Complex complex7 = complex3.multiply(complex5);
      Complex complex8 = complex5.multiply(complex3);
      Complex complex9 = complex0.ONE.subtract(complex8);
      Complex complex10 = complex4.subtract(complex7);
      Complex complex11 = complex7.tanh();
      complex0.sqrt1z();
      Complex complex12 = complex4.reciprocal();
      complex11.NaN.reciprocal();
      complex12.I.nthRoot(415);
      complex11.ONE.getField();
      complex6.readResolve();
      complex11.getArgument();
      complex11.pow((-4329.58030318544));
      complex9.getImaginary();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-2446.57686125663), (-2446.57686125663));
      complex0.INF.toString();
      Complex complex1 = complex0.sin();
      complex0.I.add((-2446.57686125663));
      Complex complex2 = complex0.multiply(865);
      complex1.acos();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.NaN.multiply((-686));
      complex3.cos();
      complex2.INF.multiply(0.0);
      Complex complex5 = complex4.ONE.sqrt();
      Complex complex6 = complex5.INF.tanh();
      complex0.INF.sqrt1z();
      complex6.INF.sinh();
      Complex complex7 = complex4.NaN.pow((double) 865);
      complex7.INF.sqrt();
      complex6.NaN.getField();
      Complex complex8 = complex3.INF.reciprocal();
      Complex complex9 = complex0.sinh();
      complex1.ZERO.negate();
      complex9.NaN.add(complex3);
      complex4.ONE.divide((-2272.82));
      complex9.ZERO.tan();
      complex2.negate();
      complex1.getField();
      complex8.exp();
      complex4.getReal();
      complex3.asin();
      Complex complex10 = complex5.INF.acos();
      complex6.log();
      Object object0 = new Object();
      complex6.equals(object0);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.INF.cos();
      complex1.NaN.pow((-1681.119147062065));
      complex2.ZERO.toString();
      complex1.nthRoot(1);
      Complex complex3 = complex0.add((double) 1);
      Complex complex4 = complex3.NaN.add((double) 1);
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex3.ZERO.cos();
      Complex complex7 = complex3.reciprocal();
      complex5.INF.tan();
      Complex complex8 = complex3.reciprocal();
      complex3.ONE.tanh();
      Complex complex9 = complex8.INF.pow((-205.1905775));
      Complex complex10 = complex5.divide(complex3);
      complex8.sin();
      complex10.getField();
      complex6.abs();
      complex9.INF.reciprocal();
      Complex complex11 = complex0.pow(complex10);
      complex8.getReal();
      Complex complex12 = Complex.valueOf(0.5);
      complex12.ZERO.toString();
      complex8.equals(complex12);
      Complex complex13 = complex4.reciprocal();
      complex9.conjugate();
      complex7.asin();
      complex13.negate();
      complex11.add(1.9873779569310022E-227);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.INF.tan();
      complex3.I.reciprocal();
      Complex complex4 = complex1.createComplex(3014.1718720551216, 3014.1718720551216);
      Complex complex5 = complex4.ZERO.add(complex1);
      complex5.I.tan();
      Complex complex6 = complex4.I.atan();
      Complex complex7 = complex6.INF.sqrt1z();
      Complex.valueOf(3014.1718720551216);
      complex1.add(complex0);
      complex7.tanh();
      complex3.getReal();
      Complex complex8 = complex2.add(complex5);
      complex8.NaN.divide(3014.1718720551216);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1134.04, (-2020.0));
      Complex complex1 = complex0.I.tanh();
      complex0.subtract(0.0);
      complex0.ZERO.add((-2020.0));
      Complex complex2 = Complex.valueOf((-2020.0), (-2020.0));
      Complex complex3 = complex0.pow(complex2);
      complex3.getArgument();
      Complex complex4 = complex1.atan();
      complex4.multiply(0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.I.add((-1109.75432));
      complex3.log();
      complex2.INF.tan();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.ZERO.divide(complex1);
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = complex6.NaN.atan();
      complex7.INF.getField();
      Complex.valueOf(3.76);
      complex1.ONE.tan();
      complex6.isInfinite();
      complex6.atan();
      Complex complex8 = complex5.add(complex0);
      Complex complex9 = complex1.add(0.0);
      complex9.INF.acos();
      complex4.negate();
      complex5.acos();
      complex4.exp();
      complex5.multiply((-1109.75432));
      complex8.acos();
      complex5.createComplex((-2246.40039165908), 330.0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 391;
      complex0.multiply(391);
      complex0.I.hashCode();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.subtract(0.0);
      complex3.subtract(complex2);
      complex3.NaN.createComplex(0.0, 345);
      complex3.I.nthRoot(345);
      complex0.subtract(667.9367);
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4.618575323863973E-8));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.pow(complex2);
      Complex complex5 = complex0.NaN.sqrt1z();
      Complex complex6 = complex1.ONE.tan();
      complex6.ZERO.add(complex5);
      Complex complex7 = complex5.NaN.cosh();
      complex2.NaN.add(1.978536584535392E-284);
      complex7.NaN.getArgument();
      complex0.hashCode();
      Complex complex8 = complex4.multiply(Double.NaN);
      Complex complex9 = complex8.NaN.asin();
      complex9.NaN.exp();
      complex8.multiply((-2458.67));
      complex8.tanh();
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = 1442.6182856291741;
      Complex complex0 = new Complex(1442.6182856291741);
      Complex complex1 = complex0.ZERO.add(1442.6182856291741);
      Complex complex2 = complex1.I.cos();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = complex3.NaN.subtract(complex1);
      complex4.ZERO.readResolve();
      Complex complex5 = new Complex((-1152.78783));
      Complex complex6 = Complex.valueOf((-1152.78783));
      Complex complex7 = complex0.add(complex5);
      Complex complex8 = complex5.NaN.reciprocal();
      complex8.pow((double) 0);
      Complex complex9 = complex7.ZERO.multiply(0);
      complex9.ONE.pow((double) 0);
      complex7.I.hashCode();
      Complex complex10 = complex6.asin();
      complex6.isInfinite();
      Complex complex11 = complex6.tan();
      complex0.isInfinite();
      complex6.divide(complex0);
      complex10.conjugate();
      complex6.cos();
      complex2.getArgument();
      try { 
        complex11.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.getField();
      Complex complex1 = complex0.multiply((-18.9788));
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = Complex.valueOf(1.9521772861480713);
      Complex complex2 = complex0.subtract(complex1);
      complex2.ZERO.multiply((-791.62174728));
      Complex complex3 = Complex.valueOf(1.9521772861480713, Double.NaN);
      complex3.I.toString();
      Complex complex4 = complex2.subtract(complex0);
      complex4.hashCode();
      complex1.readResolve();
      complex2.sqrt();
      complex1.pow((-791.62174728));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1476.2669), 20.0);
      complex0.NaN.subtract(20.0);
      Complex complex1 = complex0.tanh();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow((-3073.1));
      Complex complex2 = complex1.I.exp();
      complex1.I.multiply(17);
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex4.INF.divide(1313.859);
      complex1.ONE.abs();
      complex0.readResolve();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.asin();
      Complex complex9 = complex8.ZERO.log();
      complex9.multiply(complex1);
      complex8.abs();
      Complex complex10 = Complex.valueOf((double) 17);
      Complex complex11 = complex10.negate();
      Complex complex12 = complex10.INF.conjugate();
      complex12.ONE.getArgument();
      complex11.I.getArgument();
      complex0.pow((-324.669079912938));
      complex7.ONE.abs();
      complex6.readResolve();
      complex11.ONE.toString();
      complex11.abs();
      complex7.add(complex2);
      complex0.add(17.0);
      Complex complex13 = complex2.multiply(complex5);
      complex6.getImaginary();
      complex7.log();
      complex13.hashCode();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf(700.95812602114, 1035.2933420953);
      complex0.ONE.exp();
      complex0.ZERO.getField();
      Complex complex1 = complex0.tanh();
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.cosh();
      complex1.getField();
      Complex complex3 = complex1.multiply(0.0);
      Complex complex4 = Complex.valueOf(1035.2933420953, 1035.2933420953);
      Complex complex5 = complex0.divide(complex4);
      Complex complex6 = complex5.I.conjugate();
      complex5.ZERO.cosh();
      complex5.NaN.hashCode();
      complex4.NaN.sin();
      Complex complex7 = complex4.add(700.95812602114);
      complex7.I.add(complex3);
      complex7.I.divide(complex0);
      complex0.ONE.acos();
      complex7.isNaN();
      complex7.cosh();
      complex2.tanh();
      complex4.getReal();
      complex1.divide(1035.2933420953);
      complex6.pow(700.95812602114);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.9821451970481713E-7));
      Complex complex1 = complex0.acos();
      complex1.cosh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ONE.pow(0.0);
      Complex complex4 = complex3.INF.sqrt1z();
      Complex complex5 = complex1.multiply(complex2);
      complex5.ONE.cos();
      complex2.hashCode();
      complex5.getArgument();
      Complex complex6 = complex4.sinh();
      complex1.sin();
      complex6.multiply(1481);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.acos();
      Complex.valueOf(0.0);
      Complex complex3 = complex0.subtract(0.0);
      complex3.multiply(0);
      complex0.hashCode();
      complex3.isInfinite();
      Complex complex4 = complex0.cos();
      Complex complex5 = Complex.INF;
      complex5.NaN.tan();
      complex0.multiply(complex5);
      complex4.getArgument();
      complex0.isNaN();
      Complex complex6 = complex4.exp();
      complex2.getReal();
      complex1.sin();
      complex4.sinh();
      Complex complex7 = Complex.valueOf(-0.0, -0.0);
      Complex complex8 = complex6.divide(complex7);
      complex8.tan();
      Complex.valueOf(0.0, 0.0);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = complex0.atan();
      complex2.INF.cosh();
      Complex complex5 = complex4.INF.divide(0.0);
      complex5.I.multiply(complex2);
      complex3.toString();
      complex4.subtract((-3342.873485613521));
      complex2.conjugate();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(1.5707963267948966, 20.0);
      complex2.I.atan();
      complex0.INF.atan();
      Complex complex3 = complex1.add(0.0);
      Complex complex4 = complex0.multiply(1);
      complex4.NaN.cos();
      complex0.divide(1.5707963267948966);
      complex3.acos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.40871500968933105, 0.40871500968933105);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.I.subtract(complex2);
      complex0.hashCode();
      complex4.I.getArgument();
      complex2.ONE.getArgument();
      Complex complex5 = complex4.divide(0.40871500968933105);
      Complex complex6 = complex5.ONE.negate();
      complex2.isNaN();
      Complex complex7 = complex4.tanh();
      complex2.I.tanh();
      Complex complex8 = complex7.ZERO.cosh();
      complex8.ONE.hashCode();
      Complex complex9 = complex7.I.sqrt();
      complex9.INF.createComplex(0.40871500968933105, 0.0);
      complex3.hashCode();
      Complex complex10 = Complex.valueOf(0.40871500968933105);
      complex0.add(complex3);
      complex0.I.readResolve();
      Complex complex11 = complex2.sin();
      complex10.cosh();
      Complex complex12 = complex2.reciprocal();
      complex12.toString();
      complex10.createComplex(0.40871500968933105, 0.40871500968933105);
      complex6.equals(complex11);
      complex5.abs();
      complex12.exp();
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-358.57031375175));
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 1;
      complex0.I.readResolve();
      double double0 = 0.0;
      Complex complex1 = complex0.ZERO.add(0.0);
      complex1.I.sqrt1z();
      Complex complex2 = complex0.ZERO.reciprocal();
      complex2.ONE.getField();
      complex1.pow(0.0);
      try { 
        complex1.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.INF.readResolve();
      complex0.NaN.add(complex2);
      Complex complex3 = complex0.atan();
      Complex complex4 = Complex.valueOf(0.0, 6.283185307179586);
      complex4.INF.negate();
      complex4.ZERO.sinh();
      complex3.getField();
      complex3.atan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(461.4697, 461.4697);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.createComplex(Double.NaN, Double.NaN);
      complex1.I.acos();
      Complex complex2 = complex0.sinh();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1518.6955709007884);
      Complex complex1 = Complex.valueOf(1518.6955709007884);
      Complex complex2 = complex1.ONE.multiply((-2217));
      Complex complex3 = complex2.ZERO.atan();
      complex3.NaN.sin();
      Complex complex4 = complex1.pow(complex0);
      complex4.ONE.readResolve();
      Complex complex5 = complex0.add(complex1);
      complex5.I.multiply(1518.6955709007884);
      complex1.getImaginary();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex1.ZERO.sinh();
      complex2.INF.pow(complex1);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex3.INF.sqrt1z();
      complex2.ONE.createComplex(0.0, 6.39485115791896E288);
      complex1.I.hashCode();
      complex0.abs();
      complex4.I.abs();
      Complex complex5 = complex1.sqrt();
      complex5.NaN.add(complex0);
      Object object0 = new Object();
      complex5.equals(object0);
      Complex complex6 = complex4.multiply(complex2);
      complex6.ONE.atan();
      complex3.pow(476.2158677257356);
      complex5.multiply(complex6);
      complex1.pow((-716.968401384));
      complex1.add(complex6);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ONE.nthRoot(7);
      Complex complex1 = Complex.valueOf((-808.34329), 20.0);
      Complex complex2 = complex1.I.add((-1.0));
      complex2.I.getArgument();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex5.subtract(0.0);
      complex6.add(complex4);
      Complex complex7 = complex0.pow(complex1);
      complex7.I.sin();
      complex2.add(399.0);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.asin();
      complex0.INF.hashCode();
      complex1.INF.tan();
      Complex complex2 = complex0.pow(2059.9848351);
      Complex complex3 = complex2.createComplex(2059.9848351, 2059.9848351);
      Complex complex4 = complex0.negate();
      complex3.pow(0.0);
      Complex complex5 = complex4.NaN.add(complex1);
      Complex complex6 = complex5.INF.log();
      Complex complex7 = Complex.INF;
      complex6.ONE.add(complex7);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.NaN.atan();
      Complex complex10 = complex4.INF.reciprocal();
      complex9.ZERO.nthRoot(37);
      complex8.I.abs();
      Complex complex11 = complex2.divide(complex4);
      complex3.getField();
      List<Complex> list0 = complex11.ZERO.nthRoot(528);
      assertEquals(528, list0.size());
      assertTrue(list0.contains(complex10));
      
      Complex complex12 = complex4.multiply(1.0);
      Complex complex13 = complex11.acos();
      String string0 = complex13.I.toString();
      assertEquals((-0.8812732711737624), complex13.getImaginary(), 0.01);
      assertEquals("(0.0, 1.0)", string0);
      
      complex9.reciprocal();
      Complex.valueOf((double) 37);
      Complex complex14 = complex4.subtract(1.0);
      Complex complex15 = complex9.sqrt();
      assertEquals(0.7616565008830166, complex8.getReal(), 0.01);
      
      complex12.ONE.subtract(0.0);
      complex2.isInfinite();
      complex2.add(2.0);
      Complex complex16 = complex1.tan();
      assertSame(complex16, complex15);
      
      Complex complex17 = complex12.tan();
      assertEquals((-0.7615941559557649), complex17.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex14));
      assertEquals(-0.0, complex17.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(1228.094);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.tanh();
      complex2.ONE.tanh();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      
      complex0.readResolve();
      Complex complex3 = complex0.sinh();
      complex3.multiply(complex1);
      Complex complex4 = complex3.ONE.tanh();
      assertEquals(0.7615941559557649, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex1.I.multiply(1);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(1.0, complex5.getImaginary(), 0.01);
      
      String string0 = complex3.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      
      List<Complex> list0 = complex1.nthRoot(293);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(complex2));
      assertTrue(list0.contains(complex3));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.subtract(complex0);
      double double0 = complex1.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex1.getArgument();
      Complex complex3 = complex0.sin();
      assertSame(complex3, complex2);
      assertSame(complex3, complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.exp();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex0.ZERO.subtract(0.02316705882549286);
      assertEquals((-0.02316705882549286), complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.add((-3383.80840901));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals((-3383.80840901), complex4.getReal(), 0.01);
      
      Complex complex5 = complex3.ONE.add(complex0);
      assertTrue(complex5.equals((Object)complex1));
      
      Complex complex6 = complex3.NaN.negate();
      Complex complex7 = complex6.reciprocal();
      assertSame(complex7, complex6);
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex3.ONE.conjugate();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      String string0 = complex3.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex9 = Complex.valueOf(0.12038381397724152, 0.12038381397724152);
      assertEquals(0.12038381397724152, complex9.getImaginary(), 0.01);
      
      Complex complex10 = (Complex)complex0.readResolve();
      boolean boolean0 = complex0.equals(complex10);
      assertTrue(boolean0);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex10.isInfinite());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sqrt();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ZERO.exp();
      String string0 = complex2.toString();
      assertEquals("(2.0, 0.0)", string0);
      
      Complex complex3 = (Complex)complex0.ZERO.readResolve();
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.NaN.pow(1625.02);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex4.pow(0.0);
      Complex complex7 = complex6.I.reciprocal();
      complex7.ONE.getArgument();
      Complex complex8 = complex1.subtract(0.0);
      Complex complex9 = complex7.pow((-9.27398924154364E-153));
      assertEquals((-1.0), complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(1.4567548235352138E-152, complex9.getImaginary(), 0.01);
      
      complex8.toString();
      complex8.exp();
      assertTrue(complex8.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex(7.694785471490595E23);
      Complex complex1 = Complex.valueOf((-20.0), 0.0);
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex1.ZERO.negate();
      assertEquals((-20.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex3.getReal(), 0.01);
      
      Complex complex4 = complex0.NaN.pow(0.0);
      assertNotSame(complex4, complex2);
      
      Complex complex5 = complex0.cosh();
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      assertTrue(complex5.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.readResolve();
      complex0.equals("UH");
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.sqrt();
      complex2.I.getField();
      Complex complex3 = complex1.exp();
      complex0.readResolve();
      complex3.toString();
      Complex complex4 = complex2.INF.divide(2846.929802342085);
      complex2.ZERO.divide(complex4);
      Complex complex5 = complex4.ZERO.tanh();
      complex5.I.exp();
      complex4.ZERO.divide(complex0);
      Complex.valueOf(0.0);
      try { 
        complex2.nthRoot((-878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -878
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.8428773880004883, 1.8428773880004883);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.ONE.exp();
      Complex complex4 = complex2.ONE.exp();
      Complex complex5 = complex4.ZERO.createComplex(1.8428773880004883, 1.8428773880004883);
      Complex complex6 = complex2.divide(1562.54837055);
      complex6.getField();
      assertEquals(0.001005278528588522, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex2.exp();
      Complex complex8 = complex7.INF.atan();
      complex1.getImaginary();
      Complex complex9 = complex3.multiply((-122.3078586524355));
      assertEquals((-332.4672296526528), complex9.getReal(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      complex1.hashCode();
      assertTrue(complex1.equals((Object)complex5));
      
      complex8.getField();
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(1.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex1.divide(0.0);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.ONE.add(0.0);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex6.cosh();
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex2.asin();
      assertEquals(0.08490695411011774, complex8.getReal(), 0.01);
      
      complex1.asin();
      Complex complex9 = complex6.divide(complex1);
      assertEquals(0.5356970668023275, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex2.reciprocal();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex complex11 = Complex.valueOf(0.0);
      assertFalse(complex11.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.exp();
      Complex complex1 = Complex.valueOf((-806.855320358));
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
