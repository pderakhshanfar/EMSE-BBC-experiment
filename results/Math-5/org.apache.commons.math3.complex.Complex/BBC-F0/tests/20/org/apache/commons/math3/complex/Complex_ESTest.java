/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:57:42 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.pow(complex0);
      Complex complex3 = complex1.negate();
      complex0.tan();
      Complex complex4 = complex3.createComplex((-1642.4), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.negate();
      complex0.sqrt();
      Complex complex6 = new Complex((-1297.0649));
      complex5.multiply(complex2);
      Complex complex7 = Complex.ZERO;
      // Undeclared exception!
      complex7.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1038.856204507079), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.tanh();
      Complex complex3 = complex1.NaN.sqrt1z();
      complex2.NaN.readResolve();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ONE.multiply(complex2);
      complex3.ONE.conjugate();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex0.divide(0.0);
      Complex complex7 = complex6.ONE.multiply(1.892856346657855E140);
      Complex complex8 = complex6.acos();
      complex8.ZERO.pow(complex3);
      Complex complex9 = complex4.atan();
      complex9.NaN.toString();
      complex9.asin();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex1.subtract((-2.329967807055457E-10));
      Complex complex12 = complex11.subtract((-2.329967807055457E-10));
      Complex complex13 = complex5.atan();
      complex2.toString();
      complex13.atan();
      Complex complex14 = complex5.pow(298.385138);
      Complex complex15 = complex14.ZERO.reciprocal();
      complex10.cosh();
      complex7.asin();
      complex15.add(1.892856346657855E140);
      complex12.reciprocal();
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.acos();
      complex1.NaN.abs();
      complex0.sqrt1z();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.3746284207627468E-4, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex1.createComplex(4079.45656, 1.3746284207627468E-4);
      complex3.I.conjugate();
      complex3.subtract(complex0);
      Complex complex4 = complex2.ONE.sinh();
      complex4.ONE.sinh();
      complex4.sinh();
      complex4.INF.hashCode();
      Complex complex5 = complex0.NaN.add(complex2);
      complex5.NaN.subtract(complex1);
      complex0.getField();
      complex1.I.multiply(157.1863);
      Complex complex6 = complex2.subtract(complex1);
      complex6.INF.conjugate();
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex2.negate();
      complex0.abs();
      Complex complex9 = complex8.subtract(complex7);
      complex9.multiply((-480));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0965324942770584E171));
      complex0.I.abs();
      complex0.pow(2.958670452353541E176);
      complex0.getField();
      Complex complex1 = complex0.acos();
      complex1.INF.getArgument();
      Complex.valueOf((-1.0965324942770584E171));
      Complex complex2 = complex0.sqrt();
      complex2.exp();
      Complex complex3 = complex0.add(1.0);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.2598826911426535);
      Complex complex1 = Complex.valueOf((-407.0999), (-20.0));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf(407.0999, 407.0999);
      Complex complex4 = complex3.createComplex((-20.0), (-119.90661244241));
      complex1.getReal();
      Complex complex5 = new Complex((-119.90661244241), (-407.0999));
      Complex complex6 = complex2.pow(complex5);
      complex6.getImaginary();
      complex0.negate();
      complex1.sqrt();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.2598826911426535);
      Complex complex1 = Complex.valueOf(20.0);
      complex0.reciprocal();
      complex1.tanh();
      complex0.cosh();
      complex1.toString();
      Complex complex2 = Complex.ZERO;
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.15967999718296227);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0);
      complex1.readResolve();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex1.cos();
      complex4.subtract((double) 0);
      complex0.subtract(Double.NaN);
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex1 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex2 = complex1.multiply(683);
      complex0.readResolve();
      Complex complex3 = Complex.NaN;
      complex2.subtract(complex0);
      complex0.cos();
      Complex complex4 = complex3.subtract((-2.1837008256131314E7));
      complex2.subtract((double) 683);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1402.982), (-1280.345179240139));
      complex0.exp();
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(823);
      complex0.toString();
      Complex complex1 = new Complex(1.9551968436114924, 2785.0);
      Complex complex2 = complex1.exp();
      complex2.cos();
      complex1.subtract((-510.329414822565));
      Complex.valueOf((-2.1837008256131314E7), (-370.909));
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.conjugate();
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.ONE.asin();
      // Undeclared exception!
      complex2.I.nthRoot(2089076461);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(793);
      Object object0 = new Object();
      complex0.toString();
      complex0.equals(object0);
      Complex complex1 = new Complex(2785.0, 1380.937);
      complex1.exp();
      Complex complex2 = new Complex(1.5707963267948966);
      complex0.asin();
      complex1.multiply((-0.999999999998968));
      Complex complex3 = Complex.ZERO;
      complex3.ZERO.getArgument();
      complex2.sqrt();
      Complex complex4 = Complex.valueOf(2785.0, 1.5707963267948966);
      complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.asin();
      complex1.readResolve();
      Complex complex2 = new Complex((-1537.820666813));
      Complex complex3 = complex2.log();
      Complex complex4 = new Complex((-1537.820666813), Double.NaN);
      Complex complex5 = complex4.acos();
      Complex complex6 = complex1.exp();
      Complex complex7 = new Complex((-1537.820666813), Double.NaN);
      Complex complex8 = complex7.add(complex3);
      complex6.atan();
      Complex complex9 = complex8.atan();
      complex2.sin();
      complex0.sqrt1z();
      Complex complex10 = Complex.NaN;
      complex9.getImaginary();
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.INF;
      complex6.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex1 = new Complex(0.0, (-510.329414822565));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex.valueOf(4.285128462851149E-47, 35.39066291);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex0.reciprocal();
      complex4.hashCode();
      complex1.sqrt();
      complex3.isNaN();
      Complex complex5 = complex2.multiply(3.5471180281159325E-219);
      complex5.NaN.add((-510.329414822565));
      Object object0 = new Object();
      Complex complex6 = Complex.valueOf(1496.33, 5.3393125705958075E87);
      complex6.multiply(1.4366366947356988E-6);
      complex6.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(823);
      Object object0 = new Object();
      complex0.toString();
      complex0.equals(object0);
      Complex complex1 = new Complex(1.9551968436114924, 2785.0);
      Complex complex2 = complex1.exp();
      Complex complex3 = new Complex((-510.329414822565));
      Complex complex4 = complex3.asin();
      complex4.multiply(1214.433920713077);
      complex3.add((-2293.99));
      complex2.isInfinite();
      complex3.conjugate();
      Complex complex5 = Complex.valueOf(2.3639917373657227);
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.subtract(complex1);
      Complex complex2 = complex0.subtract(1179.89);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.9987622893254038E-7), (-5.235397688850367E180));
      complex0.ZERO.getField();
      Complex complex1 = complex0.ONE.divide((-1.9987622893254038E-7));
      complex0.nthRoot(799);
      Complex complex2 = complex0.add(complex1);
      complex2.NaN.negate();
      complex0.sin();
      Complex complex3 = new Complex(Double.NaN);
      complex3.acos();
      complex3.NaN.hashCode();
      complex0.add(complex3);
      complex3.sin();
      complex1.subtract((-155.21631785));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(823);
      Complex complex1 = Complex.valueOf(1.9551968436114924, Double.NaN);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 7.020668578160457E-251);
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.NaN;
      complex1.pow(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf((-2356.2977320664), Double.POSITIVE_INFINITY);
      complex4.getImaginary();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.negate();
      Complex complex7 = Complex.INF;
      complex7.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(0);
      complex0.asin();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = Complex.NaN;
      complex1.sinh();
      Complex complex4 = complex2.pow(complex1);
      complex4.multiply(0.005626184384002369);
      complex4.nthRoot(2524);
      Complex complex5 = complex1.add((-40.6113015));
      complex0.isInfinite();
      Complex complex6 = complex4.conjugate();
      complex5.acos();
      Complex complex7 = new Complex(1053.05516670882, Double.POSITIVE_INFINITY);
      complex7.log();
      complex4.conjugate();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(260437.11163314164);
      Complex complex2 = Complex.valueOf(0.0, (-1886.79036));
      complex0.INF.abs();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex1.ONE.atan();
      Complex complex5 = complex1.ONE.cosh();
      complex3.ONE.reciprocal();
      Complex complex6 = complex5.I.sqrt();
      complex0.divide(complex1);
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.INF.cos();
      complex9.negate();
      complex8.ONE.readResolve();
      complex0.pow(0.0);
      complex7.subtract(1020.6598094035087);
      Complex complex10 = Complex.valueOf(1020.6598094035087, (-510.329414822565));
      complex10.cos();
      complex6.sinh();
      Complex.valueOf((-4237.187224012));
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.2598826911426535);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = Complex.valueOf(6.2598826911426535, (-212.38));
      Complex complex3 = complex2.reciprocal();
      complex3.createComplex(6.2598826911426535, (-668.4254));
      complex0.getReal();
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf(5.449616519413847E90);
      Complex complex6 = complex4.pow(complex5);
      complex1.getImaginary();
      complex4.tan();
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.pow(2678.2);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex2.I.log();
      Complex complex5 = complex2.ZERO.acos();
      complex5.I.exp();
      Complex complex6 = complex0.add(complex0);
      complex3.I.atan();
      complex6.I.atan();
      complex1.acos();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(0.0, (-177.74035327449));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.createComplex(20.0, 0.0);
      complex3.getReal();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.pow(complex0);
      Complex complex6 = complex0.multiply(0.005626184384002369);
      complex4.I.nthRoot(2524);
      Complex complex7 = complex3.add(Double.POSITIVE_INFINITY);
      complex7.isInfinite();
      complex4.conjugate();
      Complex complex8 = complex6.acos();
      complex7.log();
      complex8.conjugate();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.2598826911426535);
      Complex complex1 = Complex.valueOf((-407.0999), (-20.0));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.createComplex(20.0, 20.0);
      complex0.getReal();
      Complex complex4 = complex2.sinh();
      complex4.pow(complex3);
      complex2.getImaginary();
      complex1.tan();
      complex4.negate();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-177.74035327449), (-0.06807066611911228));
      complex0.reciprocal();
      Complex complex2 = complex0.ONE.pow(20.0);
      Complex complex3 = complex2.I.sinh();
      complex3.multiply((-2001793922));
      complex2.sqrt1z();
      complex1.pow(6.789527378582775E-122);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.I;
      complex5.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, (-177.74035327449));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex0.createComplex(20.0, 0.0);
      complex3.getReal();
      Complex complex4 = complex2.sinh();
      complex4.pow(complex0);
      complex4.getImaginary();
      complex1.tan();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2828.36743925), 0.0);
      Complex complex1 = complex0.subtract(3605.367223);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.valueOf(3605.367223);
      Complex complex4 = complex3.tan();
      complex4.sinh();
      complex2.nthRoot(819);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex1.log();
      complex4.getField();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex5.add(complex3);
      complex6.multiply((-428));
      Complex complex8 = complex7.sinh();
      Complex complex9 = Complex.ZERO;
      complex8.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.ONE.sqrt();
      complex3.asin();
      Complex complex4 = complex1.I.add((-407.0999));
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.I.divide(complex4);
      complex5.I.hashCode();
      Complex complex7 = complex5.sinh();
      complex0.add(complex5);
      complex0.subtract(complex4);
      complex4.getField();
      Complex complex8 = complex0.ONE.sin();
      Complex complex9 = complex8.divide(complex1);
      complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.valueOf(1868.3);
      complex6.subtract(complex8);
      Object object0 = new Object();
      complex6.equals(object0);
      complex7.divide(complex1);
      complex10.sqrt();
      complex9.cosh();
      complex1.log();
      complex1.subtract(948.5994729072961);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2828.36743925), 0.0);
      Complex complex1 = complex0.subtract(3605.367223);
      complex1.subtract(complex0);
      Complex complex2 = Complex.valueOf(3605.367223);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ONE.acos();
      Complex complex6 = complex0.atan();
      complex6.conjugate();
      Complex.valueOf((-1586.455433260709), 3605.367223);
      complex3.acos();
      Complex complex7 = Complex.valueOf(3605.367223, (-1233.439632691));
      complex0.multiply(complex7);
      Object object0 = new Object();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = Complex.I;
      complex9.ONE.reciprocal();
      complex8.tanh();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1226.088387922), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.INF;
      complex0.atan();
      Complex complex3 = complex2.cos();
      complex0.atan();
      complex1.readResolve();
      Complex complex4 = complex3.acos();
      Complex complex5 = Complex.ONE;
      complex5.atan();
      Complex complex6 = Complex.I;
      complex0.tanh();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.sinh();
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-948.6));
      Complex complex1 = complex0.multiply((-2188.9026007));
      complex1.ONE.getArgument();
      complex1.INF.getArgument();
      complex0.NaN.nthRoot(945);
      Complex complex2 = complex1.acos();
      complex2.I.atan();
      complex1.NaN.conjugate();
      Complex complex3 = Complex.valueOf((double) 945, (-1233.439632691));
      Complex complex4 = complex0.acos();
      complex4.I.multiply(complex0);
      complex4.readResolve();
      complex3.sqrt();
      Complex complex5 = Complex.valueOf(6.837671137556327E30, (-765.283989471527));
      complex5.sin();
      Complex complex6 = new Complex((-1586.455433260709), (-1233.439632691));
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-177.74035327449), (-0.06807066611911228));
      complex0.reciprocal();
      Complex complex2 = complex0.ONE.pow(20.0);
      complex2.I.sinh();
      Complex complex3 = Complex.valueOf(6.789527378582775E-122);
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      complex1.tan();
      complex0.hashCode();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-948.6));
      Complex complex1 = complex0.multiply((-2188.9026007));
      complex1.ONE.getArgument();
      complex1.subtract(complex0);
      Complex.valueOf((-209.228));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.sinh();
      complex3.nthRoot(819);
      Complex complex4 = Complex.valueOf(3814.144739963203, (double) 819);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.log();
      complex5.getField();
      complex1.sqrt1z();
      Complex complex7 = Complex.I;
      complex7.add(complex6);
      Complex complex8 = Complex.I;
      Complex complex9 = complex4.pow(complex1);
      Complex.valueOf((double) 819);
      complex2.subtract((-209.228));
      complex3.asin();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.reciprocal();
      complex1.equals(object0);
      Complex complex2 = complex0.sinh();
      complex2.multiply(complex0);
      complex1.readResolve();
      Complex complex3 = Complex.NaN;
      complex3.sqrt();
      complex3.sin();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-1233.439632691));
      Complex complex1 = complex0.divide((-688.20801259823));
      complex1.NaN.subtract((-688.20801259823));
      complex0.multiply((-0.9999977773899571));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-948.6));
      Complex complex1 = complex0.multiply((-2188.9026007));
      complex1.ONE.getArgument();
      complex1.INF.getArgument();
      complex0.NaN.nthRoot(945);
      Complex complex2 = complex1.acos();
      complex2.I.atan();
      complex1.NaN.conjugate();
      Complex complex3 = Complex.valueOf((double) 945, (-1233.439632691));
      Complex complex4 = complex0.acos();
      complex4.I.multiply(complex0);
      Complex complex5 = (Complex)complex4.readResolve();
      complex3.sqrt();
      complex3.sin();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(0.0);
      complex2.ONE.toString();
      complex1.ONE.add(0.0);
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex5.I.add(complex1);
      complex6.ZERO.multiply(91);
      complex5.ONE.getField();
      complex5.NaN.exp();
      complex4.ONE.createComplex((-5.002774317612589E-8), (-5.002774317612589E-8));
      complex3.sqrt();
      complex1.sinh();
      complex0.asin();
      complex1.I.divide(0.034552380442619324);
      complex3.reciprocal();
      Complex complex7 = Complex.INF;
      complex6.equals(complex7);
      complex2.sinh();
      complex6.nthRoot(91);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-177.74035327449), 0.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.log();
      Complex complex4 = Complex.I;
      complex4.conjugate();
      complex3.getField();
      complex3.add(20.0);
      Complex complex5 = complex3.pow(20.0);
      complex3.abs();
      Complex complex6 = complex2.sin();
      Complex complex7 = Complex.valueOf(0.0, 20.0);
      complex7.sqrt();
      complex5.acos();
      Complex complex8 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      complex8.isNaN();
      complex0.equals(complex1);
      complex6.conjugate();
      complex1.subtract(763.0);
      complex6.sqrt();
      complex7.tan();
      Complex complex9 = Complex.I;
      complex9.hashCode();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(0.0);
      complex2.ONE.toString();
      complex1.ONE.add(0.0);
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex5.I.add(complex1);
      complex6.ZERO.multiply(91);
      complex5.ONE.getField();
      complex5.NaN.exp();
      Complex complex7 = complex4.ONE.createComplex((-5.002774317612589E-8), (-5.002774317612589E-8));
      Complex complex8 = complex3.sqrt();
      complex1.sinh();
      complex0.asin();
      Complex complex9 = complex1.I.divide(0.034552380442619324);
      Complex.valueOf(0.0, 0.0);
      complex0.isNaN();
      complex8.hashCode();
      Complex complex10 = complex6.sin();
      complex1.cos();
      Complex complex11 = complex10.INF.exp();
      complex4.pow(complex7);
      complex5.getImaginary();
      complex9.tan();
      complex11.negate();
      complex1.nthRoot(91);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      Complex complex1 = complex0.reciprocal();
      complex1.equals(object0);
      complex0.sinh();
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.acos();
      complex0.cosh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sinh();
      try { 
        complex3.ONE.nthRoot((-1879558957));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,879,558,957
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1226.088387922), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.pow(0.0);
      Complex complex3 = complex2.reciprocal();
      complex1.ONE.abs();
      complex3.cosh();
      complex3.sinh();
      complex0.equals("");
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1226.088387922), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sqrt1z();
      complex1.isInfinite();
      Complex complex3 = complex0.multiply((-1));
      Complex complex4 = complex2.atan();
      complex0.getField();
      Complex complex5 = complex3.pow(complex1);
      complex4.hashCode();
      complex0.multiply((-851));
      complex0.abs();
      Complex complex6 = Complex.valueOf((-1226.088387922));
      complex6.subtract((-784.50746883021));
      complex1.getField();
      complex0.sinh();
      complex3.getField();
      complex3.abs();
      complex4.tanh();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex7.sinh();
      complex4.multiply((-4094.8817209375748));
      complex8.tanh();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-2828.36743925), 1.5732207298278809);
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(1.5732207298278809, (-2828.36743925));
      complex2.INF.abs();
      Complex complex3 = Complex.valueOf(1.5732207298278809);
      Complex complex4 = complex0.NaN.reciprocal();
      complex0.INF.hashCode();
      complex1.nthRoot(1302);
      complex3.getField();
      complex1.sinh();
      complex0.getField();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.tanh();
      Complex complex7 = Complex.ONE;
      complex5.sinh();
      complex2.multiply(Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex((-282.790432));
      Complex complex1 = complex0.ONE.add((-282.790432));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.multiply((-1919.0));
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex0.ONE.sqrt1z();
      complex3.isInfinite();
      Complex complex6 = complex1.multiply(1196);
      complex6.NaN.atan();
      complex0.getArgument();
      complex2.getField();
      Complex complex7 = complex0.pow(complex1);
      complex4.ONE.hashCode();
      complex0.multiply((-851));
      complex0.abs();
      complex7.ZERO.subtract((-1919.0));
      complex5.createComplex((-282.790432), 1418.129);
      complex5.readResolve();
      complex1.add(3.456595573934475E-209);
      complex6.tanh();
      complex1.divide(1418.129);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex1 = new Complex(0.0, (-510.329414822565));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = Complex.valueOf(4.285128462851149E-47, 35.39066291);
      Complex complex4 = complex2.ONE.subtract(complex1);
      Complex complex5 = complex0.reciprocal();
      complex5.atan();
      Complex complex6 = Complex.valueOf((-0.21479797932279832));
      Complex complex7 = complex6.atan();
      Complex complex8 = Complex.INF;
      complex8.sin();
      complex5.sqrt1z();
      complex7.getArgument();
      Complex complex9 = complex6.log();
      Complex complex10 = complex8.log();
      Complex complex11 = complex4.conjugate();
      complex8.getField();
      Complex complex12 = Complex.ONE;
      Complex complex13 = complex12.add((-785.063358448891));
      Complex complex14 = complex6.pow(3.141592653589793);
      complex9.abs();
      complex13.sin();
      Complex complex15 = complex9.sqrt();
      complex5.acos();
      complex7.isNaN();
      complex3.equals(complex11);
      complex15.conjugate();
      complex14.subtract(763.0);
      complex10.sqrt();
      complex7.tan();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1.5732207298278809, 1.5732207298278809);
      Complex complex2 = Complex.NaN;
      complex0.pow(complex2);
      Complex complex3 = Complex.valueOf((-2016.8346748473), 2.0);
      complex3.abs();
      Complex complex4 = Complex.valueOf(1632.9674634979274);
      complex3.reciprocal();
      Complex complex5 = Complex.I;
      complex5.nthRoot(1302);
      Complex complex6 = complex3.createComplex(813.173442480266, 813.173442480266);
      complex0.readResolve();
      Complex complex7 = Complex.I;
      complex7.add(5.5375196488302575E305);
      complex7.tanh();
      complex6.divide(2016.8356664999792);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2828.36743925), 0.0);
      Complex complex1 = complex0.subtract(3605.367223);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(3605.367223);
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sinh();
      complex2.nthRoot(819);
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex1.log();
      complex4.getField();
      complex0.sqrt1z();
      complex6.add(complex1);
      Complex complex7 = Complex.I;
      complex7.pow(complex1);
      Complex complex8 = Complex.valueOf(0.0);
      complex8.subtract(0.0);
      complex4.asin();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(3304.3159849);
      Complex complex1 = Complex.valueOf(3304.3159849, 3304.3159849);
      complex1.INF.getField();
      Complex complex2 = complex0.NaN.multiply(complex1);
      complex0.equals("$u. @<hAKm ");
      Complex complex3 = complex0.acos();
      complex3.INF.toString();
      Complex complex4 = complex3.I.pow(complex1);
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.negate();
      complex6.toString();
      Complex complex7 = complex1.acos();
      complex7.ONE.readResolve();
      Complex complex8 = complex2.sqrt1z();
      complex8.I.negate();
      complex8.abs();
      Complex complex9 = complex6.divide(3304.3159849);
      complex6.ZERO.createComplex(Double.NaN, 3431.70447);
      complex2.getImaginary();
      Complex complex10 = complex3.multiply(complex0);
      complex2.add(complex9);
      Complex complex11 = Complex.valueOf(0.0, Double.NaN);
      complex11.negate();
      Complex complex12 = complex4.negate();
      Object object0 = complex8.readResolve();
      complex5.equals(object0);
      Complex complex13 = complex12.tanh();
      complex10.getReal();
      Complex complex14 = complex13.sqrt();
      complex14.NaN.sqrt();
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Object object0 = complex0.readResolve();
      complex0.INF.reciprocal();
      complex0.equals(object0);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(3719.3524, (-1371.3));
      Complex complex1 = complex0.multiply((-70.80314008548));
      Complex complex2 = complex1.ONE.sqrt();
      complex1.I.sin();
      complex0.isNaN();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex0.cosh();
      complex1.getField();
      complex3.sqrt();
      complex1.I.conjugate();
      complex4.createComplex(1163.855961963, 2.4137404318673354E119);
      Complex complex6 = complex5.asin();
      complex6.nthRoot(1269);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.sqrt1z();
      complex0.toString();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.ZERO.sin();
      complex2.INF.add((-5262.5));
      complex0.sqrt1z();
      Complex.valueOf(Double.NaN, (-5262.5));
      Complex complex5 = complex3.pow(complex4);
      complex5.NaN.cos();
      Complex complex6 = complex1.sqrt();
      complex6.negate();
      complex6.reciprocal();
      Complex complex7 = Complex.valueOf(Double.NaN);
      complex0.equals(complex7);
      Complex complex8 = complex7.tan();
      Complex.valueOf((-1195.1));
      complex8.sqrt();
      Complex complex9 = complex4.divide(complex7);
      complex9.INF.nthRoot(1);
      complex9.ONE.atan();
      complex4.log();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf(0.0);
      complex2.ONE.toString();
      complex1.ONE.add(0.0);
      Complex complex5 = complex3.I.acos();
      Complex complex6 = complex5.I.add(complex1);
      Complex complex7 = complex6.ZERO.multiply(91);
      complex5.ONE.getField();
      complex5.NaN.exp();
      Complex complex8 = complex4.ONE.createComplex((-5.002774317612589E-8), (-5.002774317612589E-8));
      Complex complex9 = complex3.sqrt();
      Complex complex10 = complex1.sinh();
      complex0.asin();
      Complex complex11 = complex1.I.divide(0.034552380442619324);
      Complex.valueOf(0.0, 0.0);
      complex0.isNaN();
      complex9.hashCode();
      Complex complex12 = complex6.sin();
      Complex complex13 = complex1.cos();
      complex12.INF.exp();
      Complex.valueOf(4.0889180422033095E8, 0.0);
      complex12.cos();
      complex5.cos();
      complex7.hashCode();
      complex13.pow((double) 91);
      complex10.getImaginary();
      complex8.negate();
      complex11.subtract(1.817649308779104E117);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.NaN.tan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.I.add(complex2);
      Complex complex4 = complex0.I.conjugate();
      complex4.NaN.multiply((-6.751434891261518E-56));
      complex2.ZERO.getField();
      Complex complex5 = complex0.divide((-6.751434891261518E-56));
      complex3.I.subtract(Double.POSITIVE_INFINITY);
      complex5.NaN.subtract(Double.POSITIVE_INFINITY);
      complex5.equals((Object) null);
      complex3.getField();
      Object object0 = new Object();
      complex1.equals(object0);
      Complex.valueOf(2304.6519445, 2304.6519445);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex0.ZERO.pow(0.0);
      complex1.INF.divide(complex0);
      Complex complex3 = complex2.INF.divide(complex1);
      complex3.INF.cosh();
      complex1.I.cos();
      Complex complex4 = complex0.ZERO.tan();
      try { 
        complex4.ZERO.nthRoot((-3606));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,606
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 0.0;
      complex0.INF.sinh();
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.sinh();
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(1883.8243999822007, 1883.8243999822007);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.INF.sin();
      Complex complex3 = complex2.ZERO.log();
      Complex complex4 = complex1.ZERO.multiply(0.0);
      complex0.NaN.negate();
      complex2.INF.sqrt1z();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      Complex complex6 = complex0.INF.multiply(complex1);
      complex6.ONE.createComplex(1883.8243999822007, 0.6160298585891724);
      Complex complex7 = complex0.I.tan();
      complex7.INF.sqrt1z();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex0.atan();
      complex9.I.divide(0.0);
      Complex complex10 = complex0.cosh();
      complex0.NaN.nthRoot(1443);
      complex0.ZERO.toString();
      complex7.isNaN();
      complex6.pow((-2.8583500869462184E28));
      complex8.getReal();
      complex10.isNaN();
      Complex complex11 = complex3.subtract(0.0);
      complex5.log();
      complex4.multiply((-2507.544899770653));
      Complex complex12 = Complex.INF;
      complex5.add(complex12);
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-948.6));
      Complex complex1 = complex0.multiply((-2188.9026007));
      complex1.ONE.getArgument();
      complex1.INF.getArgument();
      complex0.NaN.nthRoot(945);
      Complex complex2 = complex1.acos();
      complex2.I.atan();
      complex1.NaN.conjugate();
      Complex complex3 = Complex.valueOf((double) 945, (-1233.439632691));
      Complex complex4 = complex0.acos();
      complex4.I.multiply(complex0);
      complex4.readResolve();
      complex3.sqrt();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex((-1580.0), (-1580.0));
      complex0.NaN.sqrt();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.NaN.subtract((-1580.0));
      complex2.ONE.cosh();
      Complex complex3 = complex1.tan();
      complex1.log();
      complex0.reciprocal();
      complex3.tan();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(673.858286461764, 673.858286461764);
      Complex complex1 = complex0.pow(673.858286461764);
      complex1.I.asin();
      complex0.divide(673.858286461764);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.INF.multiply(357);
      Complex complex3 = complex0.ONE.sin();
      complex0.getField();
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex4.sin();
      complex0.nthRoot(357);
      Complex complex7 = complex2.negate();
      complex0.isNaN();
      complex6.getReal();
      complex5.nthRoot(357);
      complex7.getArgument();
      Complex complex8 = complex7.add(complex3);
      complex6.INF.tan();
      Complex complex9 = Complex.valueOf(4762.04278227013, 4762.04278227013);
      Complex complex10 = complex8.ZERO.tanh();
      complex0.I.sqrt();
      Complex complex11 = complex4.conjugate();
      complex11.ZERO.multiply(complex8);
      Complex complex12 = complex3.createComplex(1853.89119749788, 156.7778);
      complex9.readResolve();
      complex10.multiply(990.72);
      complex10.ZERO.add(complex12);
      complex6.subtract(0.0);
      complex10.acos();
      complex1.acos();
      complex12.sinh();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.NaN.getField();
      complex0.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.cos();
      Complex complex1 = complex0.I.asin();
      complex1.INF.sqrt1z();
      complex0.createComplex(Double.POSITIVE_INFINITY, (-364.865602));
      complex1.cosh();
      complex1.exp();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.ZERO.tan();
      Complex complex4 = complex3.ONE.subtract(1370.856);
      complex4.ZERO.abs();
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex2.asin();
      complex2.divide(complex1);
      complex6.abs();
      Complex complex7 = complex2.sqrt1z();
      complex6.ZERO.getField();
      Complex complex8 = complex7.INF.createComplex(1.5707963267948966, 1.5707963267948966);
      Complex complex9 = complex8.ONE.acos();
      complex9.I.log();
      Complex complex10 = complex2.createComplex(2521.7826523462304, 1.5707963267948966);
      Complex complex11 = complex5.multiply(complex1);
      Complex complex12 = Complex.valueOf(1370.856, Double.POSITIVE_INFINITY);
      Complex complex13 = complex6.divide(complex11);
      complex13.INF.reciprocal();
      complex13.I.getArgument();
      Complex complex14 = complex10.pow((-5023.555203364));
      complex6.hashCode();
      Complex complex15 = complex7.pow((-2395.1829070986));
      complex15.ONE.readResolve();
      complex15.INF.readResolve();
      complex15.I.exp();
      complex5.multiply((-528));
      complex12.getField();
      complex11.getArgument();
      complex14.multiply(1);
      complex12.add(complex15);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.exp();
      complex0.isNaN();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ZERO.asin();
      complex3.pow((-160.0));
      Complex complex4 = complex3.pow(complex1);
      complex4.ZERO.exp();
      complex0.I.readResolve();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex0.multiply(complex2);
      complex7.I.sqrt();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex2.cosh();
      Complex complex10 = complex9.INF.subtract(complex2);
      complex5.abs();
      complex0.NaN.sinh();
      Complex complex11 = complex6.add(complex8);
      complex10.ONE.sqrt();
      complex7.divide(complex5);
      complex10.getArgument();
      complex0.cosh();
      complex8.subtract(0.7853981633974483);
      complex11.cosh();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2588.9), (-2588.9));
      Complex complex1 = new Complex((-0.2499999997677497), (-0.2499999997677497));
      Complex complex2 = complex0.NaN.subtract(complex1);
      complex0.isInfinite();
      complex0.isInfinite();
      complex1.INF.createComplex((-2588.9), 9.352382323649647E257);
      Complex complex3 = complex0.reciprocal();
      complex3.INF.abs();
      Complex complex4 = complex0.sqrt1z();
      complex1.INF.atan();
      Complex complex5 = complex1.NaN.sin();
      Complex complex6 = complex5.INF.atan();
      complex6.ONE.negate();
      complex4.NaN.abs();
      Complex complex7 = complex0.sqrt1z();
      complex7.ONE.cosh();
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex8.I.multiply((-0.2499999997677497));
      complex9.INF.add(9.352382323649647E257);
      Complex complex10 = complex9.NaN.divide(complex7);
      Complex complex11 = complex4.sqrt();
      complex11.getField();
      complex2.isInfinite();
      complex4.pow(Double.POSITIVE_INFINITY);
      complex4.divide(Double.NaN);
      Complex complex12 = complex1.log();
      complex8.add((-2588.9));
      complex12.divide(1.6358907222747803);
      complex6.asin();
      complex9.readResolve();
      complex11.add(complex8);
      complex1.subtract(3903.5);
      complex7.pow(complex10);
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2678.2);
      complex0.I.pow(2678.2);
      complex1.cos();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.asin();
      complex3.I.readResolve();
      complex2.I.log();
      Complex complex4 = complex2.ZERO.acos();
      complex4.I.exp();
      Complex complex5 = complex0.add(complex1);
      complex5.add(complex4);
      complex3.I.atan();
      complex5.I.atan();
      Complex complex6 = complex0.sin();
      complex3.INF.sqrt1z();
      complex6.ZERO.getArgument();
      complex6.I.log();
      Complex complex7 = complex6.ZERO.log();
      Complex complex8 = complex6.ZERO.conjugate();
      complex8.INF.getField();
      Complex complex9 = complex0.add(2678.2);
      complex6.pow(763.0);
      complex5.abs();
      Complex complex10 = complex7.sin();
      complex10.ZERO.sqrt();
      Complex complex11 = complex1.acos();
      complex7.isNaN();
      complex0.equals(complex9);
      complex11.conjugate();
      complex9.subtract((-7507.35));
      complex3.sqrt();
      complex11.tan();
      complex11.hashCode();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.I.asin();
      Complex complex4 = complex3.atan();
      complex0.NaN.exp();
      Complex complex5 = complex4.I.createComplex(3570.4, 1024.81987);
      Complex complex6 = complex5.ONE.createComplex(0.0, 963.1148334457586);
      Complex complex7 = complex6.ZERO.cosh();
      complex5.ONE.log();
      complex3.INF.multiply(complex1);
      Complex complex8 = complex4.I.pow(complex0);
      Complex complex9 = complex4.I.subtract(complex1);
      complex8.ONE.tanh();
      Complex complex10 = complex0.add((-4951.28));
      Complex complex11 = complex1.reciprocal();
      complex10.divide(complex11);
      complex9.ZERO.sin();
      complex8.hashCode();
      complex10.readResolve();
      complex9.toString();
      complex9.sinh();
      complex2.getImaginary();
      complex11.atan();
      Complex complex12 = complex3.divide((-566.9247892983));
      complex7.cos();
      complex6.cosh();
      complex6.multiply(0);
      complex5.multiply(0);
      Complex complex13 = complex12.acos();
      complex13.tan();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ONE.getArgument();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.NaN.sinh();
      complex1.conjugate();
      complex0.getImaginary();
      complex0.abs();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.ONE.tanh();
      complex4.I.readResolve();
      Complex complex5 = complex3.INF.multiply((-1));
      complex3.sqrt1z();
      complex5.pow(0.0);
      complex4.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = 0.09761576354503632;
      Complex complex0 = Complex.valueOf(0.09761576354503632, 2080.3);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.NaN.subtract(complex1);
      complex3.ONE.tan();
      double double1 = (-1.8889614379831606E233);
      complex0.INF.divide((-1.8889614379831606E233));
      Complex.valueOf(2080.3);
      complex2.ZERO.toString();
      Complex complex4 = complex1.pow(complex0);
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5167.164352, 5167.164352);
      complex0.NaN.toString();
      Complex complex1 = complex0.negate();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.sin();
      complex2.divide(complex0);
      Complex complex3 = complex0.exp();
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.subtract(0.0);
      complex1.equals(complex4);
      complex3.getImaginary();
      complex0.sin();
      complex1.nthRoot(1);
      complex3.createComplex(0.0, 2836.751);
      complex0.sqrt();
      Complex complex6 = Complex.INF;
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(0.0);
      complex1.ONE.subtract(complex0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.tan();
      complex0.sinh();
      complex0.nthRoot(819);
      Complex.valueOf((double) 819, 0.0);
      Complex complex4 = complex2.log();
      complex3.getField();
      Complex complex5 = complex4.sqrt1z();
      complex4.ONE.add(complex2);
      complex5.ZERO.pow(complex0);
      Complex complex6 = complex2.subtract((-1422.3649));
      complex6.asin();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1226.088387922), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.pow(0.0);
      Complex complex3 = complex2.reciprocal();
      complex1.ONE.abs();
      Complex complex4 = complex0.atan();
      complex4.cos();
      complex1.I.atan();
      complex0.readResolve();
      complex1.acos();
      complex3.atan();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.NaN.subtract(complex1);
      complex0.ZERO.divide(0.0);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-2828.36743925), 1.5732207298278809);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.pow(complex1);
      complex2.INF.abs();
      Complex complex3 = Complex.valueOf(1.5732207298278809);
      complex0.NaN.reciprocal();
      complex1.nthRoot(1302);
      complex0.INF.createComplex((-533.5333954742442), 5.914537964556077E-8);
      complex3.readResolve();
      complex2.add((double) 1302);
      complex3.tanh();
      complex0.divide(5.914537964556077E-8);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.ZERO.tan();
      complex0.hashCode();
      complex0.reciprocal();
      complex0.abs();
      complex2.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(1);
      Complex complex2 = complex0.I.divide(940.201295);
      Complex complex3 = complex0.ZERO.pow((-450.5));
      Complex complex4 = complex0.ONE.acos();
      complex3.I.conjugate();
      complex1.createComplex(940.201295, 0.0);
      complex4.NaN.subtract((double) 1);
      complex3.I.atan();
      Complex complex5 = complex3.ONE.multiply(complex0);
      Complex complex6 = complex5.ZERO.atan();
      complex6.I.divide(complex1);
      Complex complex7 = complex0.INF.asin();
      Complex complex8 = complex7.ZERO.acos();
      complex8.INF.createComplex(1, (-1693.587587373));
      complex8.I.reciprocal();
      complex4.INF.abs();
      Complex complex9 = Complex.valueOf(1185.59144827653, (-20.0));
      complex9.NaN.multiply(complex2);
      Complex complex10 = complex0.createComplex(0.0, 0.0);
      complex1.toString();
      complex1.hashCode();
      complex1.nthRoot(1);
      Complex complex11 = Complex.valueOf(0.0, (-450.5));
      complex11.NaN.cos();
      complex4.hashCode();
      complex2.multiply(1);
      complex10.reciprocal();
      complex1.multiply((-2017.56611581));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-282.790432));
      Complex complex1 = complex0.ONE.add((-282.790432));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.multiply((-1919.0));
      Complex complex4 = complex3.ONE.divide(complex1);
      Complex complex5 = complex0.ONE.sqrt1z();
      complex2.isInfinite();
      Complex complex6 = complex1.multiply(1196);
      Complex complex7 = complex6.NaN.atan();
      complex0.getArgument();
      complex2.getField();
      Complex complex8 = complex0.pow(complex1);
      complex4.ONE.hashCode();
      Complex complex9 = complex0.multiply((-851));
      complex0.abs();
      complex8.ZERO.subtract((-1919.0));
      complex8.INF.getField();
      Complex complex10 = complex4.sinh();
      complex10.ZERO.getField();
      complex8.abs();
      complex5.tanh();
      complex2.asin();
      complex7.sinh();
      Complex complex11 = complex2.multiply((-1919.0));
      complex9.tanh();
      complex11.getReal();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = new Complex(5.3393125705958075E87, 5.3393125705958075E87);
      Complex complex1 = new Complex(0.0, (-510.329414822565));
      Complex complex2 = complex0.I.subtract(complex1);
      Complex.valueOf(4.285128462851149E-47, 35.39066291);
      Complex complex3 = complex2.ONE.subtract(complex1);
      Complex complex4 = complex0.reciprocal();
      complex4.hashCode();
      complex1.sqrt();
      complex3.isNaN();
      Complex complex5 = complex2.multiply(3.5471180281159325E-219);
      complex5.NaN.add((-510.329414822565));
      Object object0 = new Object();
      complex0.I.toString();
      complex2.equals(object0);
      complex5.ZERO.exp();
      Complex complex6 = complex2.asin();
      complex6.I.multiply(1.522145133131402E263);
      complex1.add(0.0);
      complex1.isInfinite();
      Complex complex7 = complex5.conjugate();
      complex7.ONE.acos();
      complex7.I.log();
      complex3.conjugate();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(1751.5157256842224);
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
      complex0.NaN.divide((-1119.9242971633));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.tan();
      complex2.NaN.hashCode();
      Complex complex3 = complex2.ONE.conjugate();
      Object object0 = complex3.readResolve();
      assertTrue(object0.equals((Object)complex3));
      
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex2.ONE.abs();
      Complex complex5 = complex2.ZERO.log();
      Complex complex6 = new Complex((-2.01578148), (-2.01578148));
      double double0 = complex2.getArgument();
      assertEquals(1.5707963267948966, double0, 0.01);
      
      Complex complex7 = complex1.multiply(complex6);
      complex2.multiply(complex1);
      Complex complex8 = complex7.tan();
      Complex complex9 = complex7.tan();
      Complex complex10 = complex9.NaN.pow((-1316.1818747765));
      Complex complex11 = complex10.I.createComplex((-1316.1818747765), (-3640.39268759));
      complex8.toString();
      Complex complex12 = complex7.pow((-2.01578148));
      Complex complex13 = complex12.asin();
      complex13.getField();
      Complex complex14 = complex9.add(complex2);
      Complex complex15 = complex13.add((-2.01578148));
      boolean boolean0 = complex15.equals(complex10);
      boolean boolean1 = complex8.equals(complex5);
      assertFalse(boolean1 == boolean0);
      
      double double1 = complex15.abs();
      assertEquals(Double.NaN, double1, 0.01);
      
      complex7.isInfinite();
      complex1.getField();
      complex12.isInfinite();
      Complex complex16 = complex0.sqrt();
      assertFalse(complex16.isInfinite());
      
      Complex complex17 = Complex.valueOf(Double.NaN);
      complex0.INF.toString();
      Complex complex18 = complex4.divide(complex14);
      assertSame(complex14, complex17);
      assertEquals(0.7615941559557649, complex2.getImaginary(), 0.01);
      
      Complex complex19 = complex11.asin();
      assertSame(complex10, complex18);
      assertEquals((-8.954420437398108), complex19.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.subtract(0.0);
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.add(0.0);
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      
      Complex complex7 = complex3.sqrt1z();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.multiply((-2187));
      assertTrue(complex1.isInfinite());
      assertSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
  }
}
