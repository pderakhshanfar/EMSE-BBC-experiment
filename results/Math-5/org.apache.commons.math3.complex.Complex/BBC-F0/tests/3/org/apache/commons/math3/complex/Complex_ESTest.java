/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:40:18 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(1, 1);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex0.ZERO.readResolve();
      complex1.abs();
      complex0.abs();
      Complex complex2 = Complex.valueOf(4.3620527352131126E-299, 2938.2912898871136);
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.multiply(4.817491674217065E-144);
      complex0.ZERO.pow(1.4142135623730951);
      Complex complex5 = complex4.pow(4.3620527352131126E-299);
      complex2.nthRoot(545);
      complex3.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-908.9042948), 20.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      complex0.tan();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(1, (-20.0));
      Complex.valueOf((-20.0), 2.4106173515319824);
      Complex complex1 = Complex.NaN;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.6400070480930697E-114, 242.992);
      Complex complex2 = Complex.valueOf(1828.3356514987, (-3.609949022969024E295));
      Complex complex3 = Complex.NaN;
      complex0.multiply(complex1);
      complex0.tan();
      Complex complex4 = complex2.sqrt1z();
      complex4.tan();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = new Complex(1, 1);
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      complex1.abs();
      complex0.abs();
      Complex complex2 = Complex.valueOf(6.283185307179586, 2937.711218633322);
      Complex complex3 = complex2.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.multiply(4.817491674217065E-144);
      complex0.ZERO.pow(4.817491674217065E-144);
      complex4.pow(6.283185307179586);
      complex4.tanh();
      complex1.reciprocal();
      Complex complex5 = Complex.valueOf(0.9999999996331131, 19.0);
      complex5.negate();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 2120609398;
      complex0.INF.acos();
      // Undeclared exception!
      complex0.I.nthRoot(2120609398);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(3065.45134);
      complex1.I.abs();
      Complex complex2 = complex0.createComplex(Double.POSITIVE_INFINITY, 1.0);
      Complex complex3 = new Complex(3065.45134, Double.POSITIVE_INFINITY);
      complex3.add(complex2);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.multiply(1.0);
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.pow(1281.930180194);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(3065.45134, 3065.45134);
      Complex complex1 = new Complex(3065.45134, 3065.45134);
      Complex complex2 = complex1.ZERO.pow(3065.45134);
      complex2.I.abs();
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex2.sqrt();
      Complex complex5 = new Complex(1388.5070547439916, Double.POSITIVE_INFINITY);
      complex5.multiply(complex1);
      complex5.add(complex4);
      Complex.valueOf(1388.5070547439916);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ONE;
      complex7.cos();
      complex4.tanh();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(3065.45134, 8.0);
      Complex complex1 = new Complex(3065.45134, 3065.45134);
      complex1.pow(8.0);
      Complex complex2 = Complex.valueOf((-3702.0), 3065.45134);
      complex2.abs();
      Complex complex3 = complex0.multiply(471.6969996709);
      Complex complex4 = Complex.NaN;
      complex4.createComplex((-1085.7614166648623), 3.507754341050756E-176);
      complex3.sqrt();
      Complex complex5 = new Complex((-239.4985), 1373.06850169326);
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.add(complex7);
      Complex.valueOf(3.507754341050756E-176);
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.ONE;
      complex8.cos();
      complex2.tanh();
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(3173);
      Complex complex2 = Complex.I;
      complex1.toString();
      complex0.add(0.5800528526306152);
      complex0.abs();
      Complex complex3 = complex2.acos();
      complex2.getArgument();
      Complex complex4 = Complex.NaN;
      complex3.tan();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(3065.45134, 3065.45134);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.pow(3065.45134);
      complex2.I.abs();
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex2.sqrt();
      Complex complex5 = new Complex(1388.5070547439916, Double.POSITIVE_INFINITY);
      complex5.add(complex4);
      Complex.valueOf(1388.5070547439916);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ONE;
      complex7.cos();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.multiply(3173);
      Complex complex2 = complex1.divide(0.5800528526306152);
      complex1.toString();
      complex0.add(0.5800528526306152);
      complex0.abs();
      complex2.acos();
      complex0.multiply(Double.NaN);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.cos();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.pow(0.0);
      complex2.I.abs();
      Complex complex3 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.createComplex(Double.POSITIVE_INFINITY, 1.0);
      complex2.sqrt();
      Complex complex5 = new Complex(1388.5070547439916, 1.0);
      complex5.add(complex4);
      complex1.multiply(2830.586383);
      Complex complex6 = Complex.NaN;
      Complex complex7 = Complex.ONE;
      complex7.cos();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = Complex.ONE;
      complex0.tanh();
      Complex complex2 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-9.469799366496972));
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(1.2783092006429797E-4, Double.NaN);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.createComplex(3399.1533659521124, (-9.469799366496972));
      Complex complex5 = new Complex((-2469.500489), 0.46608972549438477);
      complex5.subtract(Double.POSITIVE_INFINITY);
      Complex complex6 = complex4.cosh();
      complex6.nthRoot(1554);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-3911.37468), 0.0);
      Complex complex1 = complex0.multiply(3140);
      Complex complex2 = complex0.divide(Double.NaN);
      complex2.toString();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.isInfinite();
      Complex complex4 = complex2.add(Double.NaN);
      complex1.abs();
      complex3.acos();
      Complex complex5 = Complex.INF;
      Complex complex6 = new Complex((-2975.1053297624), 0.5800528526306152);
      complex6.getArgument();
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.ZERO;
      complex5.tan();
      complex4.pow(3911.37468);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      complex1.getReal();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex(78.90008317211299);
      Complex complex4 = complex3.ONE.multiply(complex2);
      Complex complex5 = complex2.ZERO.pow(complex3);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex0.sin();
      complex6.INF.createComplex((-2640.275808), 0.0);
      Complex complex8 = complex4.divide(complex7);
      complex8.NaN.multiply(78.90008317211299);
      Complex complex9 = Complex.INF;
      complex6.abs();
      complex1.subtract(complex5);
      complex7.isNaN();
      Complex complex10 = Complex.valueOf(Double.NaN, 0.0);
      Complex.valueOf(78.90008317211299, (-2640.275808));
      Complex complex11 = Complex.I;
      complex10.createComplex((-1.0), (-1.0));
      Complex complex12 = new Complex(5.079272190187112E-4, (-2640.275808));
      complex3.subtract(Double.NaN);
      complex0.cosh();
      complex4.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1262.4348895144274), (-1578.2596125894245));
      complex1.acos();
      double double0 = 20.0;
      complex0.NaN.getField();
      complex0.NaN.cos();
      Complex complex2 = complex0.ZERO.pow(20.0);
      complex2.I.multiply(20.0);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      double double0 = 6.147655179898435E-277;
      Complex complex2 = complex0.I.subtract(6.147655179898435E-277);
      complex2.I.exp();
      Complex complex3 = complex0.sinh();
      Complex.valueOf(6.147655179898435E-277, 6.147655179898435E-277);
      complex3.NaN.getField();
      Complex complex4 = complex3.acos();
      complex3.nthRoot(1370);
      Complex complex5 = complex1.atan();
      complex5.ONE.abs();
      Complex complex6 = complex4.subtract(complex1);
      complex4.ONE.conjugate();
      complex3.log();
      Complex complex7 = complex6.multiply(1370);
      complex4.NaN.getField();
      complex7.INF.multiply(0.0);
      Complex complex8 = complex0.add((double) 1370);
      complex8.I.acos();
      complex4.ONE.add(0.6027565002441406);
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(3140);
      complex1.multiply(3140);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(632.192);
      complex3.toString();
      complex0.isInfinite();
      complex1.add((double) 3140);
      complex5.abs();
      complex3.acos();
      complex4.getArgument();
      Complex complex6 = Complex.I;
      complex1.acos();
      complex1.getReal();
      complex1.divide(253.101427317);
      Complex complex7 = complex5.tanh();
      complex7.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-984.3917324658232));
      complex0.getArgument();
      Complex complex1 = complex0.acos();
      complex1.getReal();
      Complex complex2 = complex0.subtract((-984.3917324658232));
      complex2.toString();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.acos();
      complex1.getReal();
      Complex complex2 = new Complex(Double.NaN);
      Complex complex3 = complex0.tan();
      Complex complex4 = Complex.NaN;
      Complex.valueOf(989.6256865681, 0.0);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      complex0.multiply(3140);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.INF;
      complex2.tan();
      Complex complex4 = complex3.subtract(582.4497370084471);
      Complex complex5 = Complex.I;
      Complex.valueOf(1626.08638511, 0.0);
      Complex complex6 = Complex.valueOf(2.0, 1626.08638511);
      Complex complex7 = Complex.I;
      Complex complex8 = complex4.createComplex(1626.08638511, 1938.628113);
      Complex complex9 = new Complex((-1082.96), 2.414213562373095);
      complex6.subtract((-1082.96));
      complex8.cosh();
      complex6.nthRoot(1615);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
      Complex complex1 = complex0.INF.multiply(953.0);
      Complex complex2 = complex1.INF.reciprocal();
      complex2.divide(complex0);
      complex1.ZERO.createComplex(953.0, 953.0);
      complex0.abs();
      Complex complex3 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf((-314.6));
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex4.asin();
      complex6.INF.nthRoot(689);
      complex4.I.conjugate();
      Complex complex7 = complex4.tan();
      complex7.INF.readResolve();
      Complex complex8 = complex7.tan();
      complex8.I.pow((-314.6));
      Complex complex9 = complex3.exp();
      Complex complex10 = complex5.acos();
      complex9.pow(1.6455042362213135);
      Complex complex11 = complex5.reciprocal();
      complex11.ONE.pow(complex5);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1);
      Complex complex1 = complex0.multiply(1);
      complex0.isInfinite();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      Complex.valueOf((double) 1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.172548532485962, 2.5411510467529297);
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex1.INF.pow(complex2);
      complex4.INF.add(2.5411510467529297);
      complex1.add(complex2);
      complex1.multiply(356);
      complex3.log();
      complex3.createComplex(1.172548532485962, 1776.996);
      complex0.readResolve();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.ONE.divide((double) 953);
      complex1.NaN.toString();
      complex0.isInfinite();
      Complex complex4 = complex0.add(0.0);
      complex4.INF.abs();
      Complex complex5 = complex0.I.acos();
      complex4.ZERO.getArgument();
      complex4.NaN.acos();
      complex4.getReal();
      Complex complex6 = complex3.pow((double) 953);
      Complex complex7 = complex5.log();
      complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.NaN.add(complex2);
      complex3.INF.sqrt();
      complex0.equals(object0);
      complex1.I.hashCode();
      complex2.sinh();
      Complex complex5 = complex0.exp();
      Complex.valueOf(102.1067478976, 2800.5562892523);
      complex5.getField();
      Complex complex6 = complex4.sin();
      Complex complex7 = Complex.valueOf((-4476.032758386), (-3911.37468));
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex2.multiply(2800.5562892523);
      Complex complex10 = complex8.cosh();
      Complex complex11 = complex10.sqrt1z();
      complex11.atan();
      Complex.valueOf(3.1263099916916113E178, 6280.000159235665);
      Complex complex12 = complex9.multiply(Double.POSITIVE_INFINITY);
      complex12.atan();
      Complex complex13 = Complex.NaN;
      complex6.readResolve();
      Complex complex14 = new Complex((-1653.081084), 6280.000159235665);
      complex14.equals(complex7);
      complex1.negate();
      complex10.sin();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = Complex.INF;
      complex1.ONE.subtract(complex0);
      complex1.readResolve();
      Complex complex2 = complex1.sqrt();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.hashCode();
      Complex complex3 = complex1.sinh();
      complex0.sinh();
      complex1.getField();
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.valueOf(2144.811847, 2800.5562892523);
      complex4.getField();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex2.multiply(461.4078);
      Complex complex9 = complex6.cosh();
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex10.sqrt1z();
      complex9.atan();
      Complex.valueOf(783.540056149308, 6.283185307179586);
      Complex complex12 = complex8.multiply(1140.307380825);
      Complex complex13 = complex7.atan();
      Complex complex14 = Complex.ZERO;
      complex13.ONE.divide(complex14);
      Complex complex15 = Complex.NaN;
      complex2.readResolve();
      complex0.equals(complexField0);
      complex11.negate();
      complex12.sin();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(2800.5562892523, 2800.5562892523);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.ONE.tan();
      complex3.NaN.add(complex2);
      Complex complex4 = complex3.INF.sqrt();
      complex0.equals(object0);
      complex1.I.hashCode();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.sinh();
      complex6.ZERO.getField();
      Complex complex7 = complex2.exp();
      Complex.valueOf(2800.5562892523, 2800.5562892523);
      complex7.INF.getField();
      complex4.sin();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex0.multiply((-4476.032758386));
      Complex complex10 = complex9.cosh();
      complex6.sqrt1z();
      complex8.atan();
      Complex complex11 = Complex.valueOf((-4476.032758386), (-445.64309733134));
      Complex complex12 = complex1.multiply((-4476.032758386));
      complex10.atan();
      Complex complex13 = Complex.NaN;
      Object object1 = complex12.readResolve();
      complex4.equals(object1);
      complex0.negate();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      complex1.I.toString();
      Complex complex2 = complex1.divide(6.283185307179586);
      complex0.toString();
      complex2.isInfinite();
      Complex complex3 = complex0.add(Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex complex4 = complex1.acos();
      complex1.ZERO.readResolve();
      complex3.getArgument();
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.acos();
      Complex complex8 = Complex.INF;
      complex8.getReal();
      complex4.divide((-1101.626195686));
      complex7.tanh();
      complex3.add(2058.343983211);
      complex8.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.add(Double.POSITIVE_INFINITY);
      complex1.I.toString();
      Complex complex2 = complex0.INF.sqrt();
      complex0.NaN.getField();
      complex2.INF.abs();
      Complex complex3 = complex0.atan();
      complex3.NaN.readResolve();
      Complex complex4 = complex3.ZERO.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.I.multiply(complex2);
      complex5.I.tan();
      complex1.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      complex0.getArgument();
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(0.0, (-1.5707963267948966));
      complex1.getField();
      Complex complex3 = complex2.sin();
      complex1.reciprocal();
      Complex complex4 = complex2.multiply((-1928.38));
      Complex complex5 = complex0.cosh();
      complex3.sqrt1z();
      complex3.atan();
      Complex.valueOf((-1928.38), 1.5931003872537985E-4);
      Complex complex6 = complex5.multiply(1.5931003872537985E-4);
      complex4.atan();
      Complex complex7 = Complex.NaN;
      complex4.readResolve();
      complex1.equals(complex6);
      complex6.negate();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(6237.18);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex2.NaN.conjugate();
      complex2.ZERO.tan();
      Complex complex4 = new Complex(654.842, (-7843110.529270612));
      Complex complex5 = complex4.sin();
      complex0.reciprocal();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.multiply((-7843110.529270612));
      Complex complex8 = complex5.cosh();
      complex7.sqrt1z();
      complex4.atan();
      Complex.valueOf(2107.74235212644, (-1299.60093103));
      complex2.multiply((-4476.032758386));
      complex0.atan();
      Complex complex9 = Complex.NaN;
      complex6.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      complex2.negate();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(3140);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.divide(0.5800528526306152);
      complex3.NaN.pow(0.0);
      complex1.toString();
      complex3.isInfinite();
      Complex complex5 = complex0.add(0.5800528526306152);
      complex0.abs();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex5.multiply((-88.0577475306));
      Complex complex9 = complex4.cosh();
      complex7.sqrt1z();
      Complex complex10 = complex9.atan();
      Complex.valueOf((-1.0), 2.2689924240112305);
      Complex complex11 = complex5.multiply(2588.767);
      complex10.atan();
      Complex complex12 = Complex.NaN;
      Complex complex13 = Complex.valueOf((-1.0));
      complex13.readResolve();
      complex8.equals("(0.0, -1.2281716495199999E7)");
      complex11.negate();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, (-3911.37468));
      complex0.multiply(3140);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.tan();
      complex3.subtract(582.4497370084471);
      complex4.sqrt();
      complex4.createComplex(514.09188, 2194.0662101);
      try { 
        complex5.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(6237.18);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf(0.5800528526306152);
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = Complex.valueOf(0.5800528526306152, (-20.0));
      complex5.pow(Double.NaN);
      complex5.toString();
      complex3.isInfinite();
      complex4.add(14335.386194275387);
      complex3.abs();
      complex2.acos();
      Complex complex6 = new Complex(0.5800528526306152, (-90.8121594422));
      Complex complex7 = Complex.valueOf((-1622.2805277211912), 0.0);
      complex6.I.multiply(0.5800528526306152);
      complex7.getArgument();
      Complex complex8 = complex4.acos();
      complex6.getReal();
      complex7.divide((-20.0));
      Complex complex9 = Complex.ONE;
      complex9.tanh();
      complex8.multiply(complex9);
      complex7.pow((-376.5038435));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      Complex complex2 = complex1.NaN.exp();
      complex1.sqrt();
      Complex complex3 = Complex.ZERO;
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex4 = Complex.valueOf((double) 953, 0.0);
      complex4.hashCode();
      Complex complex5 = Complex.valueOf((double) 953, 1.532837311699029);
      Complex complex6 = complex5.sinh();
      complex6.I.readResolve();
      complex2.sinh();
      complex6.getField();
      complex5.ZERO.add((double) 953);
      complex0.exp();
      Complex complex7 = Complex.valueOf(3309.500580599121, (-3911.37468));
      complex6.getField();
      complex4.divide(complex2);
      complex1.isInfinite();
      Object object1 = complex3.readResolve();
      complex7.equals(object1);
      complex3.multiply(37);
      Complex complex8 = complex7.subtract(440.493576);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.ONE.divide(6.283185307179586);
      complex1.NaN.toString();
      complex1.isInfinite();
      Complex complex4 = complex2.add((double) 953);
      complex1.abs();
      Complex complex5 = complex3.acos();
      complex3.NaN.nthRoot(953);
      Complex complex6 = new Complex(0.0, Double.NaN);
      complex6.getArgument();
      Complex complex7 = complex3.acos();
      complex7.INF.conjugate();
      complex0.I.subtract((-661.0484124200594));
      complex3.getReal();
      complex4.divide(Double.NaN);
      Complex complex8 = complex0.tanh();
      complex5.multiply(complex8);
      complex2.pow(3727540.0700399997);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex1.ONE.tan();
      complex4.NaN.add(complex2);
      complex4.INF.sqrt();
      complex0.equals(complex3);
      complex1.I.hashCode();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.sinh();
      complex6.ZERO.getField();
      complex2.exp();
      complex4.add(2800.5562892523);
      complex0.abs();
      complex2.acos();
      complex4.getArgument();
      Complex complex7 = complex4.acos();
      complex0.getReal();
      complex5.divide(21.0);
      complex0.tanh();
      complex7.multiply(complex5);
      complex3.pow(2800.5562892523);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 5.321990399912051E-172);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ONE.subtract(complex0);
      complex3.ONE.multiply(complex2);
      Complex complex4 = complex2.ONE.multiply(167);
      complex1.I.atan();
      Complex.valueOf((-1233.7018308356237), (-1233.7018308356237));
      Complex complex5 = complex0.NaN.cosh();
      complex5.ZERO.conjugate();
      complex2.ZERO.hashCode();
      complex3.getReal();
      Complex complex6 = complex3.subtract(21.0);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.NaN;
      complex8.equals(complex6);
      complex4.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.add(complex0);
      complex0.sqrt();
      Complex complex3 = Complex.INF;
      complex3.equals(complex1);
      complex1.hashCode();
      Complex complex4 = Complex.I;
      complex0.sinh();
      complex1.getField();
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.valueOf((-3911.37468), 1380.0974946176);
      Complex complex7 = new Complex((-494.6));
      complex7.getField();
      double double0 = (-4476.032758386);
      complex2.multiply((-191.166870524));
      Complex complex8 = complex6.sqrt();
      complex2.asin();
      complex8.multiply((-191.166870524));
      try { 
        complex5.nthRoot((-2269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,269
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex0.multiply(17);
      Complex complex5 = complex1.exp();
      Complex complex6 = complex2.divide(Double.POSITIVE_INFINITY);
      complex3.toString();
      complex2.isInfinite();
      complex0.add(2800.5562892523);
      complex1.abs();
      complex6.acos();
      complex3.getArgument();
      complex5.acos();
      complex4.getReal();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex5.tanh();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 47609.4569172891);
      complex5.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex1.ONE.tan();
      complex4.NaN.add(complex2);
      complex4.INF.sqrt();
      complex0.equals(complex3);
      complex1.I.hashCode();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.sinh();
      complex6.ZERO.getField();
      Complex complex7 = complex2.exp();
      Complex.valueOf(2800.5562892523, 2800.5562892523);
      complex7.INF.getField();
      complex2.divide(complex3);
      Complex complex8 = Complex.valueOf((-4476.032758386));
      complex5.pow(complex8);
      complex5.isInfinite();
      complex1.equals("zsu<:TZ-0`/eP.");
      complex8.multiply(37);
      complex4.subtract((-3724.6000279132));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.ONE.tan();
      complex3.NaN.add(complex2);
      Complex complex4 = complex3.INF.sqrt();
      complex0.equals(object0);
      complex1.I.hashCode();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.sinh();
      complex6.ZERO.getField();
      Complex complex7 = complex2.exp();
      Complex.valueOf(2800.5562892523, 2800.5562892523);
      complex7.INF.getField();
      complex4.sin();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex0.multiply((-4476.032758386));
      Complex complex10 = complex9.cosh();
      complex6.sqrt1z();
      complex8.atan();
      Complex complex11 = Complex.valueOf((-4476.032758386), (-445.64309733134));
      Complex complex12 = complex1.multiply((-4476.032758386));
      complex10.atan();
      Complex complex13 = Complex.NaN;
      Object object1 = complex12.readResolve();
      complex4.equals(object1);
      complex0.negate();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      Complex complex2 = complex1.NaN.exp();
      complex2.ONE.divide(6.283185307179586);
      complex1.NaN.toString();
      complex0.isInfinite();
      Complex complex3 = complex0.add(0.0);
      complex3.INF.abs();
      complex2.conjugate();
      Complex complex4 = complex3.ZERO.conjugate();
      complex4.INF.exp();
      complex1.hashCode();
      complex3.multiply(complex2);
      complex3.atan();
      Complex complex5 = new Complex(0.0, 953);
      complex5.abs();
      complex1.pow(0.0);
      Complex complex6 = complex5.log();
      complex6.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      Complex complex1 = complex0.multiply(2611);
      Complex complex2 = complex0.exp();
      complex2.divide(1704.2);
      complex2.toString();
      complex0.isInfinite();
      complex2.add((-1.0));
      complex0.abs();
      Complex complex3 = complex1.acos();
      complex2.getArgument();
      Complex complex4 = complex3.acos();
      complex2.getReal();
      complex3.divide(1.341104507446289E-7);
      complex2.tanh();
      complex4.multiply(complex0);
      complex2.pow(2812.29);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex3.INF.sqrt();
      complex0.equals(object0);
      complex1.I.hashCode();
      complex4.toString();
      Complex complex6 = Complex.I;
      complex6.isInfinite();
      Complex complex7 = complex5.add(2800.5562892523);
      complex6.abs();
      Complex complex8 = complex5.acos();
      complex1.I.readResolve();
      complex8.ZERO.createComplex(2.300227165222168, 1.0);
      complex7.getArgument();
      complex2.acos();
      complex3.getReal();
      complex4.divide(1.557407724654902);
      complex2.tanh();
      Complex complex9 = Complex.ZERO;
      complex6.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      Complex complex2 = complex1.divide((-339.94));
      complex2.toString();
      complex0.isInfinite();
      Complex complex3 = complex1.add((-3911.37468));
      complex0.sqrt();
      complex3.abs();
      Complex complex4 = complex0.acos();
      complex2.getArgument();
      complex2.acos();
      complex4.getReal();
      complex1.divide(1.5707963267948966);
      Complex complex5 = complex1.tanh();
      Complex complex6 = Complex.ZERO;
      complex5.add(3727542.122177252);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(1.5298852887345102E7, 1.5298852887345102E7);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.NaN.add(complex0);
      complex0.readResolve();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex0.multiply(1.5298852887345102E7);
      Complex complex5 = complex2.negate();
      Complex complex6 = Complex.valueOf(1.5298852887345102E7);
      complex6.ZERO.sin();
      Object object0 = complex3.readResolve();
      complex4.equals(object0);
      complex0.ONE.getArgument();
      complex0.pow(1.5298852887345102E7);
      complex5.INF.getField();
      Complex complex7 = complex5.asin();
      complex7.ONE.sqrt1z();
      Complex complex8 = complex5.log();
      complex8.ZERO.exp();
      complex8.NaN.reciprocal();
      complex5.divide(1879.806);
      Complex complex9 = complex1.divide(1.5298852887345102E7);
      complex9.NaN.sqrt();
      complex2.acos();
      complex8.nthRoot(680);
      Complex complex10 = complex8.sinh();
      complex10.I.sin();
      Complex complex11 = Complex.valueOf(1.5298852887345102E7);
      complex11.createComplex(680, 0.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), (-1.0));
      complex0.getArgument();
      Complex complex1 = complex0.acos();
      complex1.getReal();
      Complex complex2 = new Complex(3861.0469172);
      complex2.divide((-1.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.ZERO.toString();
      Complex complex2 = complex0.add(complex1);
      complex2.tanh();
      complex1.ONE.abs();
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = complex3.multiply((-4343));
      complex4.ZERO.asin();
      complex3.getField();
      complex0.INF.readResolve();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.conjugate();
      complex6.negate();
      complex2.conjugate();
      complex0.multiply(252);
      Complex complex7 = complex5.tan();
      Complex complex8 = complex1.acos();
      complex7.tanh();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      complex0.divide(1.0368403169781264E257);
      complex0.toString();
      Complex complex2 = Complex.valueOf(6.283185307179586);
      complex2.isInfinite();
      Complex complex3 = Complex.valueOf(1.0368403169781264E257);
      Complex complex4 = complex3.add(0.0);
      complex3.abs();
      complex4.acos();
      complex2.getArgument();
      Complex complex5 = complex0.acos();
      complex1.getReal();
      Complex complex6 = new Complex((-5931.0442), (-395.036959672));
      complex5.tanh();
      complex0.add(4214.292626509);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.NaN.createComplex(0.0, 0.0);
      complex0.abs();
      Complex complex3 = complex0.negate();
      complex3.readResolve();
      complex3.NaN.getField();
      complex0.exp();
      complex2.abs();
      complex3.subtract(complex1);
      Complex complex4 = Complex.ZERO;
      complex1.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.ONE.tan();
      complex3.NaN.add(complex2);
      Complex complex4 = complex3.INF.sqrt();
      complex0.equals(object0);
      complex1.I.hashCode();
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.sinh();
      complex6.ZERO.getField();
      Complex complex7 = complex2.exp();
      Complex complex8 = Complex.valueOf(2800.5562892523, 2800.5562892523);
      complex7.INF.getField();
      Complex complex9 = complex4.multiply((-4476.032758386));
      double double0 = 1869.43520514178;
      complex8.I.sqrt();
      complex8.ZERO.asin();
      complex9.multiply((-1.0));
      try { 
        complex2.nthRoot((-2269));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,269
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.ONE.multiply(0);
      Complex complex5 = Complex.valueOf(4.3121356481224895);
      complex1.pow(complex4);
      complex5.isInfinite();
      complex1.divide((-339.94));
      Complex complex6 = Complex.I;
      complex6.add(4.3121356481224895);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      Complex complex2 = complex1.NaN.exp();
      Complex complex3 = complex2.ONE.divide(6.283185307179586);
      complex1.NaN.toString();
      complex0.isInfinite();
      Complex complex4 = complex0.add(0.0);
      complex4.INF.abs();
      Complex complex5 = complex0.I.acos();
      complex4.ZERO.getArgument();
      complex4.NaN.acos();
      complex4.getReal();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex4.tanh();
      complex3.multiply(complex4);
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.multiply(0);
      Complex.valueOf((double) 0, 35.5);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(459.5230001607478, 459.5230001607478);
      Complex complex1 = complex0.sinh();
      complex0.log();
      Complex complex2 = Complex.ONE;
      complex2.divide(complex1);
      complex1.multiply(741);
      Complex.valueOf(1176.65189388);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.add((-703.64405306));
      complex1.ZERO.pow(complex0);
      Complex complex2 = complex0.sinh();
      complex1.asin();
      Complex complex3 = complex2.add(0.4938860535621643);
      complex2.abs();
      complex3.acos();
      complex2.getArgument();
      complex1.acos();
      Complex complex4 = Complex.valueOf(1.6401586605693734E-169, 0.8414709848078965);
      complex4.getReal();
      complex0.divide(Double.NaN);
      complex2.tanh();
      complex4.add(0.4938860535621643);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.sqrt1z();
      complex1.ONE.exp();
      complex0.toString();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.ONE.multiply(6.283185307179586);
      complex5.ONE.log();
      Complex complex6 = complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex7 = complex6.ONE.tan();
      complex7.I.pow((-3090.96));
      complex2.conjugate();
      complex3.add(complex4);
      Complex.valueOf(Double.NaN, (-450.9259812));
      complex4.toString();
      int int0 = (-1909);
      try { 
        complex6.nthRoot((-1909));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,909
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.ONE.multiply(0);
      Complex complex5 = Complex.valueOf(4.3121356481224895);
      complex1.pow(complex4);
      complex5.isInfinite();
      complex0.equals(complex2);
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.nthRoot(1);
      Complex complex1 = new Complex(1, 1);
      Complex complex2 = complex1.exp();
      complex2.sqrt1z();
      complex0.nthRoot(955);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.tan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex0.sinh();
      Complex complex8 = new Complex(2.272019649514069);
      Complex complex9 = complex8.asin();
      complex9.pow(complex7);
      complex1.subtract(complex2);
      complex3.getReal();
      complex3.subtract(2.272019649514069);
      complex3.tanh();
      Complex complex10 = Complex.ZERO;
      complex1.equals(complex4);
      complex6.cosh();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      complex1.NaN.exp();
      complex1.NaN.toString();
      complex0.isInfinite();
      Complex complex2 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex2.getImaginary();
      Complex complex3 = complex1.exp();
      complex1.cos();
      Complex complex4 = complex0.exp();
      complex4.tan();
      complex2.getArgument();
      Complex complex5 = complex4.subtract(complex2);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.getField();
      complex3.getImaginary();
      complex5.divide(84.66222946);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-84.66222946), 2.9676011119845104E-8);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.sqrt1z();
      complex0.ONE.nthRoot(1669);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ZERO.sinh();
      complex2.ZERO.pow(complex0);
      complex5.ZERO.sinh();
      complex3.ZERO.asin();
      Complex complex6 = complex0.pow(complex3);
      complex4.subtract(complex1);
      complex0.getReal();
      complex2.INF.subtract((-468.8616651));
      complex6.tanh();
      Complex complex7 = Complex.ZERO;
      complex2.equals(complex7);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      complex1.abs();
      Complex complex2 = complex0.negate();
      complex0.readResolve();
      complex0.getField();
      Complex complex3 = complex1.exp();
      complex3.abs();
      Complex complex4 = complex1.subtract(complex2);
      complex4.sinh();
      complex0.divide(916.2006807519);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.log();
      complex0.divide(complex2);
      Complex.valueOf(2252.745, 2252.745);
      Complex complex3 = Complex.ZERO;
      complex3.getImaginary();
      Complex complex4 = Complex.valueOf(1550.4770496183332, (-2814.0));
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.cos();
      complex1.exp();
      complex0.getArgument();
      Complex complex7 = complex5.subtract(complex0);
      complex6.exp();
      complex4.getField();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.add((-703.64405306));
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.asin();
      Complex.valueOf((-1659.5341696), (-703.64405306));
      complex2.getField();
      Complex complex5 = Complex.valueOf(1.5707963267948966, (-703.64405306));
      Complex complex6 = Complex.valueOf((-2337.4542), (-1659.5341696));
      complex6.getImaginary();
      complex4.exp();
      complex2.cos();
      Complex complex7 = complex3.exp();
      Complex complex8 = complex7.tan();
      Complex complex9 = new Complex(8.041523923017192E122, (-1659.5341696));
      complex9.getArgument();
      Complex complex10 = Complex.ONE;
      complex10.subtract(complex8);
      complex10.exp();
      complex5.getField();
      complex2.getImaginary();
      complex9.getArgument();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.divide(complex0);
      complex0.I.pow(complex2);
      complex3.NaN.conjugate();
      complex0.ONE.abs();
      complex1.multiply(complex0);
      Complex complex4 = Complex.valueOf(1.0, 1.0);
      Complex complex5 = complex3.tan();
      complex3.I.subtract((-8931482.35401404));
      Complex complex6 = complex2.pow(1.0);
      Complex complex7 = complex5.sin();
      Complex complex8 = complex1.add(complex3);
      complex4.getArgument();
      complex7.subtract(complex6);
      complex7.exp();
      complex5.getField();
      complex1.getImaginary();
      complex8.add(complex4);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      Complex complex2 = complex1.NaN.exp();
      complex1.NaN.toString();
      complex0.isInfinite();
      complex0.readResolve();
      complex1.getField();
      complex0.exp();
      complex2.abs();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.asin();
      complex0.nthRoot(1642);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((double) 1642, (double) 1669);
      Complex complex3 = complex2.tan();
      complex0.sinh();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.subtract(complex3);
      Complex complex9 = Complex.I;
      complex9.getReal();
      complex5.subtract((double) 1642);
      complex6.tanh();
      Complex complex10 = Complex.ZERO;
      complex8.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-84.66222946), 2.9676011119845104E-8);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.sqrt1z();
      complex0.ONE.nthRoot(1648);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ZERO.sinh();
      Complex complex6 = new Complex(2.9676011119845104E-8, (-84.66222946));
      complex3.ZERO.asin();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex4.subtract(complex1);
      complex0.getReal();
      complex2.INF.subtract((-468.8616651));
      Complex complex9 = complex7.tanh();
      complex8.exp();
      complex9.getField();
      complex3.getImaginary();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex0.reciprocal();
      complex1.ONE.hashCode();
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex1.ONE.multiply(complex6);
      complex7.ONE.add(complex6);
      complex5.I.subtract(2266.907);
      Complex complex8 = complex0.multiply(1);
      complex8.exp();
      complex1.abs();
      Object object0 = complex2.readResolve();
      complex4.equals(object0);
      Object object1 = complex3.readResolve();
      Complex complex9 = complex1.INF.atan();
      Complex complex10 = complex4.I.cosh();
      complex10.ONE.add((double) 1);
      complex5.NaN.divide(1.0);
      Complex complex11 = complex10.ONE.pow(2266.907);
      complex3.sin();
      complex11.toString();
      complex2.equals(object1);
      complex5.conjugate();
      complex0.tan();
      complex11.INF.add(complex9);
      complex2.multiply(complex0);
      complex11.acos();
      complex10.divide((double) 1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.sinh();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.multiply(0);
      Complex.valueOf(1085.399665);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 1.0);
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.I.asin();
      Complex complex3 = complex0.I.asin();
      complex3.reciprocal();
      Complex complex4 = complex0.NaN.multiply(0);
      Complex complex5 = complex0.subtract(1.0);
      complex5.INF.tanh();
      complex1.NaN.sinh();
      Complex complex6 = complex5.tan();
      complex0.I.abs();
      Complex complex7 = complex2.reciprocal();
      complex2.readResolve();
      Complex complex8 = complex7.pow(complex1);
      Complex complex9 = Complex.valueOf((double) 0, 1892.3602573499354);
      complex8.ONE.acos();
      Complex complex10 = complex8.subtract(complex5);
      complex10.INF.reciprocal();
      Complex complex11 = complex2.log();
      complex6.isInfinite();
      complex9.subtract(complex4);
      complex0.acos();
      complex7.add(1892.3602573499354);
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = Complex.INF;
      complex0.I.pow(complex2);
      complex3.NaN.conjugate();
      complex0.ONE.abs();
      complex1.multiply(complex4);
      Complex complex5 = Complex.valueOf(1.0, 1.0);
      Complex complex6 = complex3.tan();
      complex4.pow(1.0);
      complex6.sin();
      complex1.add(complex3);
      Complex.valueOf(638.118335059);
      Complex complex7 = complex0.add(complex1);
      complex7.INF.negate();
      complex5.toString();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.nthRoot(1);
      Complex complex1 = complex0.add((-703.64405306));
      Complex complex2 = complex1.ZERO.pow(complex0);
      complex0.sinh();
      Complex complex3 = complex1.asin();
      complex3.NaN.pow(1.6401586605693734E-169);
      Complex complex4 = complex1.pow(0.0);
      complex4.NaN.nthRoot(1);
      complex2.getField();
      Complex.valueOf(1159.0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3911.37468));
      Complex complex1 = complex0.multiply(953);
      complex1.NaN.exp();
      complex1.NaN.toString();
      complex0.isInfinite();
      Complex complex2 = complex0.add(0.0);
      complex2.INF.abs();
      complex0.I.acos();
      complex2.ZERO.getArgument();
      complex2.getReal();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1316.5675);
      complex1.getField();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.INF.subtract(complex2);
      complex1.INF.log();
      Complex complex4 = complex0.add(2585.91377);
      complex0.I.abs();
      Complex complex5 = complex4.cosh();
      complex4.ONE.conjugate();
      complex4.abs();
      complex5.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.valueOf(0.0, 2038.2307758641);
      complex0.sqrt();
      Complex complex3 = complex2.ONE.subtract(0.0);
      Complex complex4 = complex2.ONE.subtract(0.0);
      Complex complex5 = complex0.INF.conjugate();
      Complex complex6 = complex4.INF.log();
      Complex complex7 = complex2.multiply(2244);
      complex7.I.add(complex2);
      Complex complex8 = complex0.negate();
      complex8.INF.cos();
      complex3.I.tan();
      Complex complex9 = complex1.add(complex6);
      complex0.cos();
      Complex complex10 = complex5.exp();
      complex10.NaN.reciprocal();
      Complex.valueOf((-278.3070785), (double) 2244);
      complex3.tanh();
      complex1.pow((double) 2244);
      complex9.getArgument();
      Complex complex11 = Complex.valueOf(0.0, 0.4920966625213623);
      complex1.pow(complex11);
      complex11.isInfinite();
      complex0.equals(complex9);
      complex7.multiply((-1804));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.createComplex(2.0, 2.1948784599535102E-72);
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex1.reciprocal();
      complex3.tan();
      complex3.multiply(0);
      complex2.nthRoot(146);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.NaN.createComplex(0.0, 0.0);
      complex0.abs();
      Complex complex3 = complex0.negate();
      complex3.readResolve();
      complex3.NaN.getField();
      complex0.exp();
      complex2.abs();
      Complex complex4 = complex3.subtract(complex1);
      complex3.sinh();
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = complex4.INF.pow(5.2364136172269755E-8);
      complex5.sqrt1z();
      complex5.readResolve();
      complex2.getReal();
      Complex complex6 = complex0.NaN.atan();
      double double0 = 0.0;
      complex1.NaN.conjugate();
      Complex complex7 = complex0.subtract(0.0);
      complex7.I.sinh();
      complex7.INF.negate();
      complex1.readResolve();
      complex7.NaN.hashCode();
      complex6.exp();
      Complex complex8 = complex6.ZERO.tan();
      try { 
        complex8.INF.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-945.872334202), 0.10643415153026581);
      Complex complex1 = complex0.conjugate();
      complex0.NaN.conjugate();
      complex0.isInfinite();
      Complex.valueOf(0.10643415153026581, (-4082.8349858897036));
      complex1.toString();
      complex1.multiply(1752);
      Complex complex2 = new Complex((-2.952399778965259E-8));
      Complex.valueOf((-2.952399778965259E-8));
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(complex1);
      complex0.ONE.hashCode();
      complex1.abs();
      complex2.sinh();
      Complex complex4 = complex2.sin();
      complex4.NaN.reciprocal();
      complex3.abs();
      complex0.multiply(7);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.readResolve();
      complex0.NaN.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ZERO.negate();
      complex2.ZERO.pow(0.0);
      complex1.INF.sqrt1z();
      Complex.valueOf((-870.820869104263), (-870.820869104263));
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-84.66222946), 2.9676011119845104E-8);
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.sqrt1z();
      complex0.ONE.nthRoot(1669);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ZERO.sinh();
      complex5.ZERO.sinh();
      complex3.ZERO.asin();
      Complex complex6 = complex0.pow(complex3);
      complex4.subtract(complex1);
      complex0.getReal();
      complex2.INF.subtract((-468.8616651));
      complex6.tanh();
      Complex complex7 = Complex.ZERO;
      complex2.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, (-4456.300186461));
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.NaN.divide(0.0);
      complex3.ZERO.cos();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex4.divide(complex2);
      Complex complex7 = complex6.NaN.pow((-4168.776433912009));
      complex3.reciprocal();
      Complex complex8 = complex4.INF.atan();
      complex6.NaN.multiply((-594.084347394381));
      complex2.NaN.add(456.5355287906697);
      complex0.equals("0/73G`&");
      complex5.cosh();
      Complex complex9 = Complex.INF;
      complex9.I.abs();
      complex4.ZERO.sqrt();
      Complex complex10 = complex4.INF.exp();
      Object object0 = complex9.readResolve();
      complex7.equals(object0);
      complex7.multiply(456.5355287906697);
      complex8.multiply(1869.43520514178);
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.ZERO.cos();
      Complex complex2 = complex1.NaN.negate();
      complex1.ZERO.cos();
      Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.divide(2211.0);
      complex5.sqrt();
      complex6.reciprocal();
      complex6.multiply(0);
      complex2.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex0.abs();
      complex0.ZERO.readResolve();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ZERO.multiply(0);
      complex2.ZERO.add(complex1);
      Complex complex4 = complex0.conjugate();
      complex4.INF.atan();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.readResolve();
      complex0.hashCode();
      complex0.ZERO.getField();
      Complex complex1 = complex0.cos();
      complex1.getImaginary();
      complex1.INF.acos();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.sqrt1z();
      complex1.getField();
      complex3.NaN.cos();
      Complex complex4 = complex0.tanh();
      complex4.ZERO.hashCode();
      Complex complex5 = complex4.conjugate();
      complex5.I.nthRoot(17);
      complex4.I.toString();
      Complex complex6 = complex1.conjugate();
      complex2.getImaginary();
      Complex complex7 = complex0.sqrt1z();
      complex1.isNaN();
      Complex complex8 = complex3.add((-1.0));
      Complex complex9 = complex8.I.sqrt1z();
      complex8.NaN.getArgument();
      complex9.NaN.cos();
      complex9.NaN.negate();
      complex3.readResolve();
      complex2.getImaginary();
      complex6.readResolve();
      complex4.hashCode();
      complex4.cosh();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(1540.3667);
      complex1.ONE.multiply(1540.3667);
      Complex complex2 = complex0.ONE.subtract(1540.3667);
      complex1.INF.getField();
      Complex complex3 = Complex.valueOf((-20.0));
      complex3.ONE.readResolve();
      complex2.ONE.tan();
      int int0 = 0;
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2384.247, 0.0);
      Complex complex2 = complex0.add(complex1);
      complex2.isInfinite();
      Complex complex3 = complex0.ZERO.exp();
      complex0.equals(complex2);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.sin();
      complex5.I.nthRoot(2185);
      complex5.ONE.readResolve();
      complex4.add(complex1);
      Complex complex6 = complex5.asin();
      complex6.I.atan();
      complex6.asin();
      complex4.divide(0.0);
      complex3.asin();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.acos();
      complex1.getReal();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = new Complex((-1125.744772901746));
      Complex complex4 = complex3.ONE.multiply(complex2);
      Complex complex5 = complex2.ZERO.pow(complex3);
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex0.sin();
      complex6.INF.createComplex((-2640.275808), 0.0);
      Complex complex8 = complex4.divide(complex7);
      complex8.NaN.multiply((-1125.744772901746));
      complex4.createComplex((-2795.2968996394475), Double.NaN);
      complex6.abs();
      Complex complex9 = complex1.subtract(complex5);
      complex7.isNaN();
      Complex complex10 = complex9.acos();
      Complex.valueOf(Double.NaN, 0.0);
      Complex.valueOf((-1125.744772901746), (-2640.275808));
      Complex complex11 = complex2.tanh();
      complex11.I.createComplex(Double.NaN, (-2469.500489));
      complex9.cosh();
      Complex complex12 = complex10.subtract(Double.POSITIVE_INFINITY);
      complex12.cosh();
      complex5.nthRoot(1554);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.pow(0.0);
      complex2.I.abs();
      complex0.abs();
      Complex complex3 = complex2.NaN.subtract(0.0);
      Complex complex4 = complex1.multiply(1137.6677355);
      complex4.createComplex(1248.151119979512, 1248.151119979512);
      complex1.sqrt();
      Complex complex5 = complex2.add(complex4);
      complex3.multiply((-5079.1186058521));
      complex0.asin();
      complex5.createComplex(0.0, 1137.6677355);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
      Complex complex2 = complex0.NaN.exp();
      complex2.ONE.getArgument();
      complex2.NaN.multiply(complex1);
      int int0 = (-966);
      try { 
        complex0.nthRoot((-966));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -966
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3445.4));
      Complex complex1 = complex0.createComplex((-3445.4), 0.0);
      complex0.getArgument();
      complex0.INF.toString();
      complex1.readResolve();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.pow(1.4116039276123047);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0));
      Complex complex2 = complex0.NaN.log();
      complex1.ONE.conjugate();
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.I.cosh();
      complex0.toString();
      Complex complex5 = Complex.valueOf((-968.453));
      Complex complex6 = complex0.NaN.sqrt1z();
      complex6.INF.nthRoot(1306);
      complex0.getArgument();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.NaN.subtract(4149.92);
      complex8.NaN.divide((double) 1306);
      complex7.getReal();
      complex6.hashCode();
      Complex complex9 = complex5.reciprocal();
      complex1.asin();
      complex2.log();
      Complex complex10 = complex8.reciprocal();
      complex10.asin();
      Complex.valueOf(4149.92, 2531.153821606716);
      complex9.cosh();
      complex1.getArgument();
      complex1.getImaginary();
      complex4.createComplex(0.0, 3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-211.5187638), (-211.5187638));
      complex0.ZERO.tanh();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex2.INF.cos();
      Complex complex4 = complex1.ONE.createComplex(0.0, 0.0);
      Complex complex5 = complex1.acos();
      complex5.I.tan();
      Complex complex6 = complex1.sinh();
      Complex complex7 = complex6.ONE.subtract(0.0);
      complex7.I.sinh();
      complex7.multiply((-4506));
      Complex complex8 = complex2.sqrt1z();
      Complex complex9 = complex8.I.sinh();
      Complex complex10 = complex2.sin();
      complex10.I.log();
      Complex complex11 = complex3.multiply(81);
      complex7.sin();
      complex0.reciprocal();
      Complex complex12 = complex8.multiply((double) (-4506));
      Complex complex13 = complex12.ONE.cosh();
      Complex complex14 = complex11.sqrt1z();
      complex1.I.atan();
      Complex.valueOf((-361.550944), 6.283185307179586);
      complex2.multiply((double) (-4506));
      complex14.atan();
      complex0.readResolve();
      Complex complex15 = Complex.NaN;
      complex4.equals(complex15);
      complex13.negate();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.acos();
      Complex complex3 = complex2.log();
      complex3.readResolve();
      Complex complex4 = complex3.ZERO.add((-1823.1571727448122));
      complex4.NaN.divide((-9.0));
      Complex complex5 = complex1.exp();
      Complex complex6 = complex0.INF.multiply(complex1);
      complex6.ONE.divide(complex1);
      Complex complex7 = complex1.I.conjugate();
      Complex complex8 = complex7.NaN.tanh();
      Complex complex9 = complex5.ONE.divide(complex1);
      Complex complex10 = complex5.INF.add(complex1);
      complex0.conjugate();
      complex10.INF.sinh();
      complex9.I.add(0.0);
      complex0.divide(complex1);
      Complex complex11 = complex5.sqrt1z();
      complex11.sin();
      complex7.NaN.atan();
      complex6.INF.getArgument();
      Complex complex12 = complex9.atan();
      complex8.getReal();
      complex6.reciprocal();
      complex11.atan();
      complex12.createComplex((-4.179048566709334E-9), 0.0);
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex0.ZERO.readResolve();
      Complex complex2 = complex1.multiply((-3439.2794873));
      complex2.ONE.hashCode();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.createComplex(1.0, 1.0);
      complex4.NaN.nthRoot(1362);
      Complex complex5 = complex0.multiply(1.0);
      Complex complex6 = complex5.subtract(complex4);
      complex5.multiply((-440));
      Complex complex7 = complex6.ZERO.tan();
      complex5.createComplex((-1581.656274), 0.0);
      complex6.isNaN();
      Complex complex8 = complex5.add(0.0);
      complex1.getField();
      complex3.divide(1653.053);
      Complex complex9 = complex8.cosh();
      complex4.abs();
      Complex complex10 = complex9.divide(complex7);
      Complex complex11 = complex4.divide(0.0);
      complex10.add(complex8);
      complex11.hashCode();
      Complex complex12 = complex4.pow(1.4142135623730951);
      complex12.INF.sqrt1z();
      complex9.add(1.4142135623730951);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
      complex0.conjugate();
      Complex complex1 = complex0.multiply((-1883));
      complex1.ONE.hashCode();
      Complex complex2 = complex1.INF.add(0.0);
      complex2.INF.nthRoot(990);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex4.NaN.log();
      complex5.getField();
      Complex.valueOf(1.249260560756154E-88);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(2800.5562892523);
      complex0.ONE.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.subtract(complex0);
      Object object0 = complex1.readResolve();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex3.INF.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      
      complex0.equals(object0);
      complex1.I.hashCode();
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.sinh();
      complex7.ZERO.getField();
      Complex complex8 = complex2.exp();
      Complex.valueOf(2800.5562892523, 2800.5562892523);
      complex8.INF.getField();
      Complex complex9 = Complex.valueOf(2800.5562892523, 2800.5562892523);
      Complex complex10 = Complex.valueOf(0.0, (-957.2));
      double double0 = complex8.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex11 = complex3.exp();
      Complex complex12 = complex11.NaN.cos();
      complex11.INF.exp();
      assertEquals(4.746501045726145, complex11.getReal(), 0.01);
      
      Complex complex13 = complex0.tan();
      assertEquals(5.703678677996834, complex13.getReal(), 0.01);
      
      complex0.getArgument();
      Complex complex14 = complex4.subtract(complex2);
      assertSame(complex4, complex12);
      assertTrue(complex14.equals((Object)complex5));
      
      Complex complex15 = complex8.exp();
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertFalse(complex8.equals((Object)complex10));
      
      complex9.getField();
      assertEquals(2800.5562892523, complex9.getReal(), 0.01);
      
      double double1 = complex7.getImaginary();
      assertFalse(complex2.isInfinite());
      assertTrue(complex7.equals((Object)complex6));
      assertTrue(complex1.equals((Object)object0));
      assertFalse(complex0.equals((Object)complex13));
      assertEquals(Double.NaN, double1, 0.01);
  }
}
