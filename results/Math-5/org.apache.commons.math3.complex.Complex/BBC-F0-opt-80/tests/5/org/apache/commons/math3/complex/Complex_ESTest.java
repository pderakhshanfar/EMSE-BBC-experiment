/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:50:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      complex0.multiply(649);
      Complex complex2 = Complex.valueOf((double) 649);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.subtract((double) 672);
      Complex complex6 = Complex.valueOf((-655.1576));
      Complex complex7 = complex6.cosh();
      Complex complex8 = Complex.INF;
      complex8.pow(complex2);
      Complex complex9 = Complex.INF;
      complex9.abs();
      Complex complex10 = Complex.valueOf(1039.9569, (double) 672);
      complex7.toString();
      complex10.log();
      complex7.sqrt1z();
      complex1.nthRoot(649);
      complex5.getField();
      complex8.subtract((double) 649);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.I.getField();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex1.ONE.multiply(672);
      Complex.valueOf((double) 672);
      Complex complex4 = Complex.ONE;
      complex2.ONE.subtract((double) 672);
      complex4.INF.cosh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.pow(complex3);
      Complex complex7 = complex2.log();
      complex6.sqrt1z();
      complex7.I.getField();
      complex6.nthRoot(17);
      Complex complex8 = complex5.log();
      complex8.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.exp();
      Complex complex1 = Complex.valueOf((double) 672);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.cosh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.pow(complex4);
      complex2.toString();
      complex6.abs();
      Complex complex7 = Complex.valueOf(Double.NaN, 418.523558015446);
      complex7.toString();
      complex0.log();
      complex1.sqrt1z();
      complex3.getField();
      complex2.getField();
      complex1.asin();
      complex4.cosh();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-1.2268014119628852E249), (-994.38));
      complex0.I.abs();
      Complex complex1 = complex0.ZERO.pow((-2006.25174066));
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex2.I.reciprocal();
      complex1.asin();
      complex5.pow(complex3);
      Complex complex6 = complex0.NaN.pow(complex1);
      complex0.getField();
      complex4.add((-1.2268014119628852E249));
      complex5.atan();
      complex3.toString();
      complex4.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      complex1.tan();
      Complex complex2 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.2638862982382794E248, (-2887.107));
      complex0.tan();
      complex1.asin();
      complex1.nthRoot(1165);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4103.705495, (-20.0));
      Complex complex2 = complex1.tan();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(1.1745772638457318E-45, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.pow(1.0);
      complex1.ZERO.divide(1.0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.valueOf(6.443805025317327E169, 0.5979346036911011);
      complex3.ZERO.exp();
      complex0.NaN.abs();
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex0.pow(20.0);
      complex5.readResolve();
      Complex complex6 = complex4.tanh();
      Complex complex7 = complex1.sinh();
      Complex complex8 = complex2.INF.sqrt1z();
      complex8.I.divide(9.6760902700546);
      Complex complex9 = complex7.INF.createComplex((-2.000000501123352), 1.0);
      complex4.subtract(9.6760902700546);
      complex7.asin();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex10.conjugate();
      complex6.asin();
      Complex complex12 = complex11.INF.multiply(20.0);
      Complex complex13 = complex12.I.log();
      complex13.INF.tanh();
      complex10.ONE.pow((-3.1305705497720186E-61));
      complex1.add(complex11);
      complex7.subtract(complex5);
      complex9.pow(complex11);
      complex6.sin();
      complex2.multiply(20.0);
      complex3.tanh();
      complex6.nthRoot(1903);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.exp();
      complex0.ONE.multiply(672);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf((double) 672);
      Complex complex4 = complex3.multiply(1212);
      Complex complex5 = complex0.tanh();
      complex1.readResolve();
      complex3.atan();
      Complex complex6 = complex0.sinh();
      complex4.divide(77247.208);
      complex5.add(complex4);
      complex2.tan();
      complex6.sqrt1z();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.subtract(40.0);
      complex0.acos();
      Complex complex1 = complex0.acos();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ZERO.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt1z();
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex((-1.8479718396698113), Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.INF.divide(324.45);
      complex4.I.multiply(complex2);
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex((-0.9635150172150173), Double.POSITIVE_INFINITY);
      complex1.NaN.add((-0.9635150172150173));
      complex1.I.divide(Double.POSITIVE_INFINITY);
      complex3.tan();
      complex1.getField();
      complex3.multiply((-0.9635150172150173));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.exp();
      complex0.multiply(537);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(537, 537);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.I;
      complex1.pow(complex4);
      Complex complex5 = Complex.ZERO;
      complex3.sqrt1z();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-191.94));
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.atan();
      complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex((-0.9635150172150173), Double.POSITIVE_INFINITY);
      complex3.tan();
      complex3.multiply(0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(1685.998247631946, 1685.998247631946);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(968.26, 968.26);
      Complex complex1 = complex0.cos();
      complex1.abs();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(4561.500590592216);
      Complex.valueOf((-1.3130352854993315));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.subtract((-5626.2187043646));
      complex2.exp();
      Complex complex5 = Complex.INF;
      complex1.nthRoot(933);
      Complex.valueOf(1079.79907390178, (-3610.04));
      complex4.tan();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.abs();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      double double0 = 257.0;
      Complex complex0 = new Complex(257.0);
      complex0.hashCode();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add((-3610.04));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.subtract(874.033336649634);
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.valueOf(874.033336649634);
      complex0.nthRoot(933);
      Complex complex6 = complex5.NaN.tan();
      complex6.ONE.add(complex2);
      Complex complex7 = Complex.INF;
      complex6.pow(complex7);
      Complex complex8 = complex2.log();
      Complex complex9 = complex8.INF.sqrt1z();
      complex4.tanh();
      Complex complex10 = complex3.sin();
      complex10.INF.subtract(1.3917529218);
      complex3.sin();
      complex7.conjugate();
      complex0.getImaginary();
      complex9.sqrt();
      complex1.multiply((-505.33473041353));
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(1212);
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.ZERO;
      complex0.add(complex4);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.asin();
      Complex complex7 = Complex.NaN;
      Complex complex8 = new Complex(1212, (-848.3958114214));
      complex8.getArgument();
      complex2.divide(complex1);
      complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 20.0);
      complex0.hashCode();
      Complex complex1 = Complex.valueOf(20.0);
      complex1.multiply(1.0127761363983154);
      Complex complex2 = new Complex((-3609.04), Double.NaN);
      complex1.multiply((-2102.362797));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6026840209960938);
      complex0.getField();
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.add(300.82);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.INF.multiply(300.82);
      Complex complex5 = complex4.ONE.cos();
      Complex complex6 = complex4.I.sinh();
      Complex complex7 = complex2.createComplex(300.82, 1928.3719724);
      Complex complex8 = complex7.sqrt();
      complex8.NaN.getArgument();
      Complex complex9 = complex6.exp();
      complex6.sinh();
      complex9.I.add(543.24892025);
      complex5.tan();
      complex1.NaN.multiply(5.749565906124772E-9);
      complex3.multiply((-2147480145));
      complex2.multiply((-2147480145));
      complex0.getArgument();
      Complex.valueOf(543.24892025);
      complex7.pow(1928.3719724);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.INF;
      complex2.abs();
      Complex complex3 = complex1.negate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.sin();
      complex5.NaN.abs();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(0.037378571927547455, (-36.9576013097));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex.valueOf((-36.9576013097), 3409.8347321873757);
      complex0.getImaginary();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.subtract(complex2);
      complex2.INF.toString();
      complex0.readResolve();
      complex4.pow((-36.9576013097));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.acos();
      complex0.INF.divide((-1956.486938));
      Complex complex2 = complex0.add((-1956.486938));
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex4.I.exp();
      complex5.NaN.sqrt();
      Complex complex6 = complex0.add(complex0);
      Complex complex7 = complex6.I.atan();
      complex1.sqrt1z();
      complex2.abs();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex8.acos();
      Complex complex9 = Complex.INF;
      complex9.divide(complex8);
      complex2.acos();
      complex7.toString();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1588.968324880709, 1588.968324880709);
      Complex complex1 = complex0.exp();
      complex1.INF.getField();
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex1.pow(3855.99646665664);
      complex3.NaN.getArgument();
      Complex complex4 = complex3.tanh();
      complex3.NaN.cos();
      complex3.I.multiply(915);
      complex3.hashCode();
      Complex complex5 = complex0.acos();
      complex5.ONE.subtract(complex3);
      complex5.ZERO.toString();
      Complex complex6 = Complex.valueOf(3855.99646665664);
      Complex complex7 = complex0.pow(complex6);
      complex0.divide((-160.75542297));
      complex7.NaN.multiply(1880.55376932);
      complex7.sqrt1z();
      complex0.reciprocal();
      complex2.getArgument();
      Complex complex8 = complex4.conjugate();
      complex2.pow(3855.99646665664);
      Complex complex9 = Complex.valueOf((-1013.044344232), 1.4255188208147591);
      complex9.NaN.hashCode();
      complex0.readResolve();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.328167263606087E161);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex3.tan();
      Complex.valueOf(0.6466736793518066, 1.0450615121235744E99);
      Complex complex6 = complex1.multiply(1.0450615121235744E99);
      complex0.multiply(complex1);
      complex6.acos();
      Complex complex7 = new Complex((-819.2974));
      Complex complex8 = Complex.NaN;
      complex3.multiply(1.0);
      Complex complex9 = complex4.sinh();
      complex3.divide((-1977.256154));
      Complex complex10 = new Complex((-1977.256154), (-1977.256154));
      complex9.add(complex5);
      Complex complex11 = complex5.tan();
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.NaN.subtract((-2.8137609614326677E-86));
      complex1.NaN.exp();
      complex0.ONE.multiply(1);
      Complex complex2 = new Complex((-156.018558971), (-958.4));
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex1.exp();
      Complex complex2 = Complex.INF;
      complex2.abs();
      complex1.negate();
      complex1.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ZERO;
      complex2.hashCode();
      Complex complex3 = Complex.valueOf(1.0127761363983154);
      complex3.multiply(Double.NaN);
      Complex complex4 = new Complex(Double.NaN, 1.0127761363983154);
      Complex complex5 = Complex.valueOf(Double.NaN, 399.0);
      complex4.equals(complex5);
      complex1.add(399.0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-3610.04));
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex3.multiply(1212);
      Complex complex6 = Complex.INF;
      complex5.pow(complex1);
      Complex complex7 = complex2.log();
      complex7.ONE.cos();
      complex4.tanh();
      complex2.sin();
      Complex complex8 = Complex.ONE;
      complex8.subtract(0.0);
      complex7.sin();
      complex2.conjugate();
      complex2.multiply(0.0);
      Complex.valueOf((double) 1212, (-0.6346339860733801));
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex1.ONE.multiply(672);
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.NaN;
      complex5.multiply((-4.318488511931135));
      Complex complex6 = complex4.multiply(complex3);
      complex4.acos();
      Complex complex7 = complex4.tanh();
      Complex complex8 = Complex.valueOf((-4.318488511931135));
      Complex complex9 = Complex.ZERO;
      complex9.sqrt();
      Complex complex10 = complex8.acos();
      complex6.hashCode();
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.ZERO;
      complex7.sqrt();
      Complex complex13 = complex10.sqrt();
      Complex complex14 = Complex.I;
      complex14.ONE.asin();
      complex14.acos();
      complex2.exp();
      Complex complex15 = complex10.subtract(1.5793781280517578);
      Complex complex16 = Complex.ZERO;
      complex16.sin();
      complex15.conjugate();
      complex0.multiply(162.2095);
      Complex complex17 = Complex.valueOf(162.2095, 9.704297297526684E31);
      complex13.negate();
      complex17.sin();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.INF;
      complex3.abs();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.add(complex4);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = complex0.sqrt1z();
      complex5.abs();
      complex0.acos();
      complex2.divide(complex0);
      complex5.acos();
      complex7.toString();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.exp();
      complex1.ONE.multiply(672);
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.multiply((-4.318488511931135));
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex5.acos();
      Complex complex8 = complex7.tanh();
      Complex complex9 = Complex.valueOf((-4.318488511931135));
      Complex complex10 = Complex.ZERO;
      complex8.acos();
      complex10.hashCode();
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.ZERO;
      complex5.sqrt();
      complex5.sqrt();
      Complex complex13 = Complex.I;
      Complex complex14 = complex6.asin();
      complex0.acos();
      Complex complex15 = complex14.exp();
      complex2.log();
      complex15.sinh();
      complex7.createComplex(254.39202464189, 2548.61945578148);
      complex12.subtract(complex9);
      complex14.tan();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex1.ONE.multiply(672);
      complex2.reciprocal();
      Complex complex4 = Complex.valueOf((double) 672);
      complex4.multiply(1212);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.pow(complex3);
      complex2.log();
      complex6.sqrt1z();
      Complex complex7 = complex3.tanh();
      complex7.sin();
      complex4.subtract((-396.4482133700154));
      complex6.sin();
      complex5.conjugate();
      complex0.multiply((-2489.299408));
      Complex.valueOf((-0.6346339860733801), (-1808.2));
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(1.0127761363983154);
      complex0.multiply(1.0127761363983154);
      Complex complex2 = Complex.NaN;
      complex2.sinh();
      Complex complex3 = Complex.INF;
      complex3.divide(1.0127761363983154);
      Complex complex4 = complex0.add(complex1);
      complex3.tan();
      complex3.sqrt1z();
      // Undeclared exception!
      complex4.nthRoot(2069029588);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex1.cosh();
      complex0.tan();
      Complex.valueOf(1.0127761363983154);
      Complex complex2 = Complex.NaN;
      complex2.multiply(1.0127761363983154);
      Complex complex3 = new Complex(1.0127761363983154, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(1.0127761363983154);
      complex3.equals(complex4);
      complex0.add(1387.65930043817);
      complex3.pow(0.21765980124473572);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1872.0131, 1872.0131);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.cosh();
      complex2.tan();
      Complex complex4 = Complex.valueOf(1872.0131, 1872.0131);
      complex1.multiply(593.619880342);
      Complex complex5 = complex4.multiply(complex0);
      complex4.acos();
      Complex complex6 = new Complex((-878.88334713));
      Complex complex7 = Complex.NaN;
      complex7.sinh();
      complex4.divide(0.6466736793518066);
      complex1.add(complex3);
      complex5.tan();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(5.449411794794902, 5.449411794794902);
      complex0.ONE.atan();
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex3.INF.createComplex(5.449411794794902, 5.449411794794902);
      complex4.negate();
      Complex complex5 = complex4.ONE.divide((double) 958);
      Complex.valueOf((double) 958, 0.31791208474553084);
      complex5.INF.multiply((-1474.161166));
      complex4.multiply(958);
      complex4.I.exp();
      complex3.ONE.cos();
      complex0.readResolve();
      complex4.ZERO.reciprocal();
      complex4.multiply((-1136873585));
      Complex complex6 = complex1.log();
      Complex complex7 = complex6.sqrt();
      complex6.I.add(5.449411794794902);
      complex6.cos();
      complex3.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.INF;
      complex2.abs();
      Complex complex4 = new Complex(Double.NaN);
      complex2.hashCode();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.add(complex4);
      complex3.pow(Double.NaN);
      Complex complex5 = complex1.sin();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex1.log();
      complex1.abs();
      complex4.nthRoot(3903);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.NaN;
      complex1.pow(complex7);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.INF;
      complex3.abs();
      complex1.negate();
      complex1.hashCode();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.sin();
      complex2.divide(Double.POSITIVE_INFINITY);
      complex4.log();
      complex7.abs();
      complex6.nthRoot(3903);
      complex4.conjugate();
      complex0.multiply((double) 3903);
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.9999955711549321);
      complex3.createComplex(1163.933, 3903);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.exp();
      complex1.ONE.multiply(672);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.valueOf((double) 672);
      Complex complex5 = complex4.multiply(1212);
      Complex complex6 = complex1.tanh();
      complex2.readResolve();
      complex4.atan();
      Complex complex7 = complex0.sinh();
      complex5.divide(77247.208);
      complex6.add(complex5);
      complex3.tan();
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.add((-20.0));
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.createComplex((-3633.82704375), (-20.0));
      Complex complex5 = complex3.exp();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.add(complex5);
      Complex complex8 = complex1.atan();
      complex7.sqrt1z();
      complex7.abs();
      Complex complex9 = Complex.valueOf((-20.0), 1931.1802);
      complex9.acos();
      complex8.divide(complex7);
      complex5.acos();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(487);
      Complex complex1 = new Complex((-727.49719250204));
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.exp();
      complex1.divide((double) 487);
      Complex complex6 = complex0.multiply(750);
      Complex complex7 = Complex.valueOf((double) 487, (-0.12502530217170715));
      complex7.reciprocal();
      Complex complex8 = complex3.add(complex6);
      complex5.subtract((double) 750);
      Complex complex9 = Complex.INF;
      complex9.abs();
      Complex complex10 = complex8.acos();
      complex9.sqrt1z();
      complex0.add(complex1);
      complex4.acos();
      complex7.pow((-464.2512182));
      complex7.cosh();
      complex10.log();
      Complex complex11 = complex5.divide(complex4);
      complex11.INF.divide((double) 487);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex.valueOf(1.0127761363983154);
      Complex complex1 = complex0.INF.exp();
      complex1.acos();
      Complex complex2 = new Complex((-333.1));
      Object object0 = new Object();
      Complex complex3 = complex2.atan();
      complex3.sinh();
      complex2.divide(1373.1015774856155);
      Complex complex4 = Complex.INF;
      complex0.add(complex4);
      complex3.tan();
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-3610.04));
      Complex complex2 = Complex.valueOf((-3610.04));
      Complex complex3 = complex1.tan();
      complex3.subtract((-3610.04));
      Complex complex4 = complex0.exp();
      Complex complex5 = Complex.valueOf(862.0);
      Complex complex6 = complex4.atan();
      Complex complex7 = Complex.I;
      complex7.getArgument();
      complex1.nthRoot(933);
      complex5.tan();
      Complex complex8 = complex6.add(complex0);
      Complex complex9 = Complex.INF;
      complex7.pow(complex8);
      Complex complex10 = complex3.log();
      complex10.sqrt1z();
      complex1.tanh();
      Complex complex11 = Complex.valueOf(874.033336649634);
      complex11.sin();
      complex2.subtract(1.3917529218);
      complex1.sin();
      complex3.conjugate();
      complex6.multiply((-2541.1838));
      Complex.valueOf(1.5707963267948966, 755.326);
      complex0.createComplex(1.2533141373155001, 933);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      complex0.tan();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf(0.6466736793518066, 0.6466736793518066);
      complex4.multiply(Double.NaN);
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex5.acos();
      Complex complex7 = complex3.tanh();
      Complex.valueOf((-878.88334713));
      Complex complex8 = complex6.sqrt();
      complex6.acos();
      Complex complex9 = complex2.divide(complex6);
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex10.sqrt();
      complex7.acos();
      complex11.exp();
      complex9.log();
      Complex complex12 = complex1.sinh();
      Complex complex13 = Complex.INF;
      complex13.createComplex((-910.2755208), 0.6466736793518066);
      complex4.subtract(complex12);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.6026840209960938);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      complex2.ZERO.toString();
      Complex complex3 = Complex.NaN;
      complex3.multiply(1431655765);
      Complex complex4 = Complex.I;
      complex4.isInfinite();
      complex3.conjugate();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex5.pow(798.52722654);
      complex6.equals("(0.0, 0.0)");
      complex6.subtract(complex1);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.INF.sin();
      complex2.abs();
      Complex complex5 = complex0.sqrt1z();
      complex5.readResolve();
      complex3.readResolve();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex2.cos();
      complex5.conjugate();
      complex6.multiply(2689);
      complex1.isInfinite();
      Complex complex8 = complex4.conjugate();
      complex7.asin();
      complex8.pow(1.0);
      Complex complex9 = Complex.NaN;
      complex0.equals(complex9);
      Complex complex10 = Complex.ZERO;
      complex10.subtract(complex9);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-3610.04));
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.NaN.subtract(874.033336649634);
      Complex complex5 = complex3.exp();
      Complex complex6 = Complex.valueOf(874.033336649634);
      complex0.atan();
      complex3.getArgument();
      complex3.nthRoot(139);
      complex3.tan();
      complex4.add(complex3);
      Complex complex7 = Complex.INF;
      Complex complex8 = new Complex(874.033336649634);
      complex8.pow(complex5);
      Complex complex9 = complex1.log();
      Complex complex10 = complex5.sqrt1z();
      complex6.tanh();
      complex2.sin();
      complex2.subtract(0.0);
      complex9.sin();
      complex10.conjugate();
      complex6.multiply(1.3917529218);
      Complex.valueOf(874.033336649634, 3744.381737496893);
      complex0.createComplex((-3610.04), 3744.381737496893);
      complex0.divide((-2675.5626));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex1.ONE.multiply(672);
      complex1.abs();
      Complex complex4 = complex3.sqrt1z();
      complex1.ZERO.readResolve();
      complex0.readResolve();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.ZERO.conjugate();
      complex5.NaN.multiply(672);
      complex6.isInfinite();
      complex4.conjugate();
      Complex complex8 = complex7.asin();
      complex3.pow(0.9999998464511488);
      Complex complex9 = Complex.valueOf(0.7615941559557649, 0.0);
      complex0.equals(complex9);
      Complex complex10 = Complex.ZERO;
      complex8.subtract(complex10);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.INF;
      complex3.abs();
      complex1.negate();
      complex1.hashCode();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.add(complex3);
      Complex complex6 = complex1.pow(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.sin();
      complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex4.log();
      complex7.abs();
      complex6.nthRoot(3903);
      complex8.multiply(1.6026840209960938);
      Complex complex9 = Complex.ZERO;
      complex9.pow(complex3);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add((-3610.04));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.subtract(874.033336649634);
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.valueOf(874.033336649634);
      complex1.getArgument();
      complex0.nthRoot(933);
      Complex complex6 = complex5.NaN.tan();
      complex6.ONE.add(complex2);
      Complex complex7 = Complex.INF;
      complex6.pow(complex7);
      Complex complex8 = complex2.log();
      complex8.INF.sqrt1z();
      complex4.tanh();
      Complex complex9 = complex3.sin();
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex9.INF.subtract(1.3917529218);
      Complex complex10 = complex3.sin();
      complex7.conjugate();
      complex10.multiply((-3610.04));
      Complex.valueOf(0.0, 0.0);
      complex5.createComplex((-3610.04), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add((-3610.04));
      Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.subtract(874.033336649634);
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.valueOf(874.033336649634);
      Complex complex5 = complex2.atan();
      complex5.getArgument();
      complex0.nthRoot(933);
      Complex complex6 = complex4.NaN.tan();
      Complex complex7 = complex6.ONE.add(complex1);
      Complex complex8 = Complex.INF;
      complex6.pow(complex8);
      Complex complex9 = complex1.log();
      complex9.INF.sqrt1z();
      complex3.tanh();
      Complex complex10 = complex2.sin();
      complex10.INF.subtract(1.3917529218);
      Complex complex11 = complex2.sin();
      complex8.conjugate();
      Complex complex12 = complex11.multiply((-3610.04));
      Complex.valueOf(0.0, Double.NaN);
      complex7.createComplex(Double.NaN, 933);
      complex12.equals(complex6);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.ONE.multiply(1);
      Complex complex2 = complex0.tanh();
      complex2.tanh();
      Complex complex3 = Complex.valueOf((-2966.460499969029));
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex0.acos();
      complex1.hashCode();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.divide(complex2);
      Complex complex8 = complex3.sqrt();
      Complex complex9 = complex5.sqrt();
      complex8.acos();
      Complex complex10 = complex9.exp();
      Complex complex11 = complex4.log();
      complex11.sinh();
      complex2.createComplex(1172.8558527901355, (-20.0));
      Complex complex12 = complex0.subtract(complex10);
      complex12.multiply(complex7);
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-1956.486938));
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.exp();
      complex3.abs();
      Complex complex4 = complex3.negate();
      complex2.hashCode();
      Complex complex5 = Complex.valueOf((-1956.486938));
      complex5.add(complex2);
      complex0.pow((-1956.486938));
      complex3.sin();
      complex4.divide((-1956.486938));
      complex5.log();
      complex2.abs();
      Complex complex6 = Complex.valueOf(2984.190694723975);
      try { 
        complex6.nthRoot((-2798));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,798
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.valueOf(1.0, 148.1);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.subtract((-20.0));
      complex0.exp();
      Complex complex4 = Complex.valueOf((-3056.4394748896));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.atan();
      complex6.add((-20.0));
      complex4.getArgument();
      complex5.nthRoot(7);
      Complex complex7 = complex1.tan();
      Complex complex8 = new Complex(343897.6328313856, 20.0);
      complex5.add(complex8);
      Complex complex9 = Complex.INF;
      complex7.pow(complex2);
      complex3.log();
      Complex complex10 = complex4.sqrt1z();
      complex0.tanh();
      complex8.sin();
      complex8.subtract(20.0);
      Complex complex11 = complex0.sin();
      complex3.conjugate();
      complex11.multiply(874.033336649634);
      Complex.valueOf(638.3075153282, 0.0);
      complex10.createComplex(148.1, 1735.1581803298);
      complex10.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.cosh();
      complex0.tan();
      complex0.sin();
      Complex complex2 = Complex.valueOf(2656.38450660231, 0.6466736793518066);
      complex1.multiply(2656.38450660231);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.tanh();
      Complex complex6 = Complex.valueOf(0.6466736793518066);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.sqrt();
      complex6.acos();
      Complex complex9 = Complex.ZERO;
      complex9.hashCode();
      complex8.divide(complex4);
      complex0.sqrt();
      complex5.sqrt();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex0.exp();
      complex4.log();
      complex1.sinh();
      complex9.createComplex(1.5793781280517578, 2656.38450660231);
      complex11.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-1956.486938));
      Complex complex2 = complex0.add((-1956.486938));
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.I.sqrt();
      Complex complex5 = complex0.createComplex(0.6026840209960938, 4024.3);
      complex5.exp();
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex4.add(complex5);
      complex2.atan();
      complex1.sqrt1z();
      Complex complex8 = Complex.ZERO;
      complex8.abs();
      complex0.acos();
      complex4.divide(complex7);
      complex6.acos();
      complex4.toString();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = Complex.ZERO;
      complex2.INF.multiply(complex3);
      Complex complex4 = complex1.ONE.multiply(672);
      complex1.abs();
      Complex complex5 = complex4.sqrt1z();
      complex1.ZERO.readResolve();
      Complex complex6 = (Complex)complex0.readResolve();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex0.cos();
      complex8.ZERO.conjugate();
      Complex complex9 = complex7.NaN.multiply(672);
      complex7.isInfinite();
      Complex complex10 = complex7.conjugate();
      complex9.asin();
      complex10.pow(0.0);
      complex0.equals(complex5);
      Complex complex11 = new Complex(0.7885053838276621);
      complex11.pow(complex6);
      Complex complex12 = Complex.ONE;
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      Complex.valueOf(1.0127761363983154);
      complex0.INF.exp();
      Complex complex1 = complex0.multiply(1.0127761363983154);
      Complex complex2 = new Complex(1.0127761363983154, 1.0127761363983154);
      complex1.equals(complex0);
      complex0.add(1.0127761363983154);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.ONE.createComplex(0.9055386218805612, 0.9055386218805612);
      complex0.divide((-20.0));
      complex0.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex((-904.299), (-1045.1024635));
      Complex complex1 = complex0.sin();
      complex1.NaN.hashCode();
      Complex complex2 = complex0.asin();
      complex2.ZERO.subtract(complex1);
      Complex.valueOf((-427.23), (-427.23));
      Complex complex3 = complex2.createComplex(0.0, (-2051.235798069));
      complex3.NaN.hashCode();
      complex1.getField();
      Complex complex4 = complex1.acos();
      complex4.ZERO.cosh();
      complex4.isInfinite();
      complex0.NaN.sqrt();
      complex3.abs();
      try { 
        complex0.nthRoot((-1572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,572
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1.6026840209960938);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.atan();
      complex2.ZERO.toString();
      complex2.ONE.cos();
      complex0.abs();
      Complex complex3 = complex2.exp();
      complex3.isNaN();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.divide((-1956.486938));
      Complex complex2 = complex0.add((-1956.486938));
      Complex complex3 = complex2.INF.tanh();
      complex3.I.sqrt();
      Complex complex4 = complex0.createComplex(2181.3059052020176, (-3633.82704375));
      Complex complex5 = complex4.I.exp();
      complex5.NaN.sqrt();
      Complex complex6 = complex0.add(complex4);
      complex6.I.atan();
      Complex complex7 = complex6.INF.sqrt1z();
      complex1.abs();
      Complex complex8 = complex5.acos();
      complex8.I.divide(complex6);
      Complex complex9 = complex7.acos();
      complex9.ONE.toString();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(5.841137379010982E-9);
      Complex complex1 = new Complex(5.841137379010982E-9, 6492.0206783108);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.multiply(6492.0206783108);
      Complex complex4 = complex3.ONE.pow(complex2);
      Complex complex5 = complex1.INF.multiply(136);
      Complex complex6 = complex4.INF.pow(5.841137379010982E-9);
      Complex complex7 = complex2.NaN.add(5.841137379010982E-9);
      Complex complex8 = complex2.INF.conjugate();
      complex8.ONE.tanh();
      Complex complex9 = complex0.cosh();
      complex9.isNaN();
      complex2.nthRoot(1);
      complex9.negate();
      complex4.abs();
      Complex complex10 = complex4.asin();
      Complex.valueOf((double) 136, 834.83);
      complex10.ZERO.toString();
      Complex complex11 = complex4.divide(5.841137379010982E-9);
      complex10.pow(complex3);
      Complex complex12 = complex11.pow(complex10);
      complex12.INF.subtract(complex8);
      Complex complex13 = complex5.createComplex(136, 756.1726081);
      Complex complex14 = complex13.NaN.divide(complex1);
      complex9.getField();
      Complex complex15 = complex6.subtract(complex7);
      complex13.toString();
      Complex complex16 = complex10.divide(complex5);
      complex16.ONE.sin();
      complex15.isNaN();
      complex14.createComplex(4.63985600437427E180, 0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(514.2, 1763.199879014043);
      Complex complex1 = Complex.I;
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex0.pow(complex1);
      complex2.I.conjugate();
      Complex complex3 = complex0.sqrt();
      complex3.INF.sqrt();
      complex3.sqrt();
      complex0.getReal();
      complex3.getImaginary();
      Complex complex4 = Complex.valueOf((-2.9084557554502667E-157), 514.2);
      complex4.nthRoot(1276);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.tan();
      Complex complex3 = new Complex((-481.8095471458309));
      Complex complex4 = Complex.valueOf((-481.8095471458309), 1861.891475762);
      Complex complex5 = complex4.NaN.atan();
      complex4.I.abs();
      complex3.NaN.divide(complex4);
      complex2.NaN.multiply(complex3);
      complex0.ZERO.createComplex((-1383.5020518552), 0.0);
      Complex complex6 = complex4.I.sinh();
      complex2.INF.asin();
      Complex complex7 = complex6.I.atan();
      Complex complex8 = complex7.INF.negate();
      complex8.ZERO.abs();
      complex2.INF.multiply((-546));
      complex0.nthRoot(1);
      Complex complex9 = complex0.divide((double) 1);
      Complex complex10 = complex5.ONE.sin();
      complex9.cos();
      Complex complex11 = complex0.cos();
      complex11.I.negate();
      complex9.subtract(complex5);
      Complex complex12 = complex2.tanh();
      Complex complex13 = complex11.subtract(1.0);
      complex13.I.sqrt1z();
      complex13.NaN.log();
      complex4.multiply(complex10);
      complex11.subtract((-34.478));
      complex12.pow(1861.891475762);
      Complex complex14 = Complex.INF;
      complex12.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.negate();
      Complex complex2 = complex1.I.multiply(complex0);
      complex0.isInfinite();
      complex0.abs();
      Complex complex3 = complex0.cosh();
      complex3.I.getArgument();
      Complex complex4 = complex0.NaN.asin();
      Complex complex5 = complex4.INF.atan();
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex5.ONE.asin();
      Complex complex8 = complex0.NaN.exp();
      complex3.NaN.multiply(complex2);
      complex4.INF.abs();
      complex6.ONE.asin();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex5.add(0.0);
      complex10.toString();
      Object object0 = complex9.readResolve();
      complex6.equals(object0);
      complex10.abs();
      complex3.nthRoot(1400);
      complex6.toString();
      complex8.getReal();
      complex7.createComplex(1400, (-585.8253619));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.I.exp();
      complex2.ONE.abs();
      complex0.INF.negate();
      complex0.ZERO.hashCode();
      Complex complex3 = Complex.valueOf(173.139);
      complex3.ZERO.add(complex1);
      complex3.INF.pow(1.0);
      Complex complex4 = complex0.sin();
      complex4.INF.divide(0.0);
      Complex complex5 = complex3.ONE.log();
      complex0.abs();
      complex5.nthRoot(3903);
      Complex complex6 = complex2.multiply(0.0);
      complex6.pow(complex2);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1065.847271);
      complex0.readResolve();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.pow(complex1);
      complex3.NaN.hashCode();
      Complex complex4 = complex3.NaN.add((-185.911507579473));
      Complex complex5 = Complex.valueOf(0.0);
      complex5.getArgument();
      Complex complex6 = complex5.INF.pow(complex2);
      Complex complex7 = complex6.ONE.divide(complex4);
      Complex complex8 = complex7.ZERO.exp();
      Complex complex9 = new Complex((-1285.8250551));
      complex8.NaN.multiply(complex9);
      complex8.NaN.multiply((-185.911507579473));
      Complex complex10 = complex7.INF.sqrt();
      complex5.NaN.toString();
      complex0.NaN.getField();
      complex2.getArgument();
      Complex complex11 = complex3.subtract(complex1);
      Complex complex12 = complex11.INF.multiply(4550.89);
      complex11.NaN.cosh();
      complex6.pow(6.283185307179586);
      complex1.getImaginary();
      Complex complex13 = Complex.INF;
      complex11.divide(complex13);
      complex13.abs();
      complex7.isNaN();
      Complex.valueOf((-966.347), 0.0);
      complex2.ZERO.reciprocal();
      complex4.sinh();
      complex10.atan();
      complex12.cosh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.ZERO.acos();
      complex0.INF.divide(complex3);
      Complex complex4 = complex2.ONE.sinh();
      complex0.NaN.cos();
      Complex complex5 = complex1.sqrt1z();
      complex5.ONE.atan();
      Complex complex6 = complex0.ZERO.multiply(0);
      complex6.I.add(0.0);
      Complex complex7 = complex2.ONE.add(complex1);
      complex3.INF.getField();
      complex3.I.multiply((double) 0);
      complex1.subtract(complex0);
      complex3.I.abs();
      complex3.conjugate();
      complex1.getImaginary();
      complex3.readResolve();
      complex1.hashCode();
      complex0.multiply(1.0);
      complex7.hashCode();
      complex7.getArgument();
      complex7.pow((-7.207022875977515E70));
      complex4.isInfinite();
      complex7.exp();
      Complex complex8 = Complex.valueOf(-0.0);
      complex8.NaN.divide(1.0);
      complex1.tan();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-432.21960891));
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.NaN.atan();
      complex0.ONE.negate();
      Complex complex3 = complex0.add((-432.21960891));
      Complex complex4 = complex3.INF.negate();
      Complex.valueOf(0.0, (-432.21960891));
      Complex complex5 = complex4.ONE.atan();
      complex0.acos();
      complex5.ZERO.tan();
      Complex complex6 = complex2.sin();
      Complex.valueOf((-432.21960891), (-432.21960891));
      complex6.acos();
      complex5.getReal();
      int int0 = 0;
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add((-3610.04));
      Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.subtract(874.033336649634);
      Complex complex3 = complex1.exp();
      Complex complex4 = Complex.valueOf(874.033336649634);
      Complex complex5 = complex2.atan();
      complex5.getArgument();
      complex0.nthRoot(933);
      Complex complex6 = complex4.NaN.tan();
      complex6.ONE.add(complex1);
      Complex complex7 = Complex.INF;
      complex6.pow(complex7);
      Complex complex8 = complex1.log();
      complex8.INF.sqrt1z();
      Complex complex9 = complex3.tanh();
      Complex complex10 = complex2.sin();
      complex10.INF.subtract(1.3917529218);
      Complex complex11 = complex2.sin();
      complex7.conjugate();
      complex11.multiply((-3610.04));
      Complex.valueOf(0.0, Double.NaN);
      complex9.createComplex((-3319.98728199), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.divide(0.0);
      complex1.NaN.tan();
      complex0.ZERO.abs();
      Complex complex2 = complex0.divide((-2379.99));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.NaN.pow(complex3);
      Complex complex5 = complex4.divide((-656.3496422460041));
      Complex.valueOf(0.0);
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.createComplex(0.0, 0.0);
      Complex complex8 = complex7.INF.exp();
      complex6.isNaN();
      Complex complex9 = complex6.sin();
      Complex complex10 = complex3.createComplex(2308.118673, 0.0);
      Complex complex11 = complex4.sqrt1z();
      complex5.NaN.acos();
      Complex complex12 = Complex.valueOf((-20.0));
      complex10.readResolve();
      Complex complex13 = complex3.multiply(1);
      complex11.subtract(complex4);
      complex2.abs();
      complex13.exp();
      complex8.readResolve();
      complex10.atan();
      complex5.isInfinite();
      complex5.exp();
      complex9.getReal();
      complex12.exp();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-96.82128874376), (-96.82128874376));
      complex0.isInfinite();
      Complex complex1 = new Complex((-96.82128874376));
      complex0.I.multiply(complex1);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex1.INF.conjugate();
      complex3.NaN.sinh();
      complex2.tan();
      Complex complex4 = complex2.ZERO.tanh();
      complex4.getArgument();
      Complex complex5 = complex0.multiply(complex1);
      double double0 = 0.0;
      Complex complex6 = complex5.createComplex((-96.82128874376), 0.0);
      complex0.add(complex5);
      Complex complex7 = complex1.NaN.add(complex6);
      Complex complex8 = complex7.ZERO.exp();
      complex6.isNaN();
      complex1.divide(complex5);
      complex8.acos();
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-3581.059), (-3581.059));
      complex0.sinh();
      complex0.I.subtract(20.0);
      complex0.INF.divide((-3581.059));
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      complex0.I.tanh();
      Complex complex2 = complex1.NaN.pow(1039.6025);
      Complex complex3 = complex2.asin();
      complex3.reciprocal();
      complex3.NaN.add(complex2);
      Complex complex4 = complex0.asin();
      complex2.ONE.abs();
      Complex.valueOf(1039.6025);
      complex3.nthRoot(643);
      Complex complex5 = complex3.cosh();
      complex5.createComplex(0.0, 1039.6025);
      Complex complex6 = complex4.reciprocal();
      complex4.tanh();
      Complex.valueOf(0.0, 640.2385371577828);
      complex6.isInfinite();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex((-20.0), 0.0);
      double double1 = (-2360.1199998);
      Complex complex1 = complex0.ONE.tan();
      complex0.INF.readResolve();
      complex0.cos();
      Complex complex2 = new Complex((-2360.1199998), 0.0);
      complex0.NaN.cos();
      Object object0 = complex2.readResolve();
      Complex complex3 = complex2.ONE.multiply(complex1);
      complex0.equals(object0);
      complex3.divide((-20.0));
      complex2.conjugate();
      Complex complex4 = complex3.add(complex2);
      complex4.exp();
      double double2 = 0.0;
      try { 
        complex4.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.ZERO.reciprocal();
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = complex0.tanh();
      complex1.ONE.readResolve();
      complex1.INF.atan();
      Complex complex3 = complex1.sinh();
      complex3.NaN.divide((-1521.7412658204303));
      complex2.add(complex3);
      complex2.tan();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex0.I.sinh();
      complex2.ONE.readResolve();
      complex2.ONE.createComplex(2653.8329617852714, 2653.8329617852714);
      complex2.INF.sinh();
      complex1.INF.divide(2653.8329617852714);
      complex0.getArgument();
      Complex complex3 = complex0.NaN.tan();
      complex3.INF.sqrt1z();
      complex3.NaN.subtract(complex2);
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.NaN.sinh();
      complex1.ONE.divide(complex0);
      complex5.ZERO.add(0.0);
      complex5.I.cosh();
      complex2.INF.multiply(3680);
      int int0 = (-215);
      try { 
        complex1.nthRoot((-215));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -215
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
      Complex complex1 = Complex.I;
      complex1.INF.nthRoot(7);
      complex1.ZERO.log();
      complex0.ZERO.subtract(complex1);
      Complex complex2 = complex0.multiply(0);
      complex2.ONE.multiply(1217.71135);
      Complex.valueOf((double) 7, (double) 0);
      Complex complex3 = complex2.ONE.multiply(242);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = complex0.NaN.subtract(0.5016034841537476);
      complex0.INF.multiply((-4174.256889567453));
      Complex complex6 = complex0.createComplex((-4174.256889567453), 759.9);
      complex5.acos();
      complex6.equals(complex2);
      complex4.asin();
      complex5.getField();
      Complex complex7 = Complex.valueOf(1217.71135);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex1.ONE.cos();
      Complex complex2 = complex0.INF.add(complex1);
      complex0.INF.hashCode();
      complex0.ONE.hashCode();
      double double0 = 1.0;
      complex0.NaN.createComplex(1.0, 0.0);
      complex2.ONE.acos();
      complex2.INF.asin();
      Complex complex3 = complex1.ONE.pow(738.4246118613);
      try { 
        complex3.nthRoot((-1504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,504
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex1.ZERO.cos();
      Complex complex3 = complex2.INF.createComplex((-2911.7075), (-2911.7075));
      complex2.sqrt();
      complex3.NaN.createComplex(0.0, 1.888423204421997);
      Complex complex4 = complex0.ZERO.multiply((-2395));
      complex0.getField();
      complex4.divide(5051.2268808);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf((-20.0), (-20.0));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(2123.063, 0.0);
      Complex complex1 = complex0.ONE.atan();
      complex1.ONE.sqrt();
      complex1.NaN.sinh();
      Complex complex2 = complex1.INF.sqrt1z();
      complex2.hashCode();
      Complex complex3 = complex0.INF.add(2123.063);
      complex3.ZERO.toString();
      Complex complex4 = Complex.valueOf(0.0, 2123.063);
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex3.I.reciprocal();
      Complex complex7 = complex0.I.exp();
      complex0.I.readResolve();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.tanh();
      complex9.subtract(complex3);
      Complex complex10 = complex5.divide(2123.063);
      complex10.ZERO.createComplex(2123.063, 2668.112268187399);
      complex10.INF.readResolve();
      complex6.readResolve();
      complex9.conjugate();
      complex9.sin();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex1.I.multiply((-5512.29579));
      complex3.ONE.hashCode();
      Complex complex4 = Complex.valueOf(1.1933419704437256);
      Complex complex5 = Complex.valueOf((-2708.87));
      Complex complex6 = complex1.add(complex0);
      complex6.ONE.negate();
      complex6.NaN.subtract(complex4);
      complex4.INF.sin();
      Complex complex7 = complex5.ONE.atan();
      complex1.ONE.multiply(1);
      complex7.ONE.cosh();
      complex4.isNaN();
      complex0.toString();
      Complex complex8 = complex5.ONE.cos();
      complex4.getField();
      complex5.toString();
      complex7.toString();
      Complex complex9 = complex7.multiply(0);
      complex9.INF.readResolve();
      complex8.pow((-2708.87));
      complex4.pow(complex8);
      Complex.valueOf(0.0);
      complex2.log();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.exp();
      complex0.ONE.nthRoot(148);
      complex0.INF.divide(3145.3579811687246);
      Complex complex1 = complex0.I.sinh();
      complex0.getReal();
      Complex complex2 = complex1.sqrt1z();
      complex2.ONE.sqrt1z();
      complex1.sqrt1z();
      complex2.multiply((-4396.28107719));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex1.NaN.conjugate();
      Complex complex2 = complex1.multiply(complex0);
      complex2.ONE.nthRoot(7);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ZERO.asin();
      complex4.INF.getField();
      Complex complex5 = complex4.NaN.exp();
      complex5.getArgument();
      complex5.sqrt();
      complex4.ZERO.multiply(1.0);
      complex3.abs();
      complex4.pow(complex0);
      complex1.add(Double.NaN);
      complex1.negate();
      complex0.readResolve();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex1.cosh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.INF.sin();
      Complex complex4 = Complex.valueOf(0.6466736793518066, (-878.88334713));
      Complex complex5 = complex2.multiply(1.5793781280517578);
      complex2.NaN.multiply(complex0);
      Complex complex6 = complex4.acos();
      complex6.ONE.tanh();
      Complex complex7 = Complex.valueOf(0.6466736793518066);
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex6.acos();
      complex9.ONE.hashCode();
      complex6.divide(complex2);
      complex3.sqrt();
      complex2.sqrt();
      Complex complex10 = complex5.NaN.acos();
      Complex complex11 = complex8.exp();
      complex11.INF.log();
      complex5.sinh();
      complex11.createComplex(3.106037603716254E-245, 0.6466736793518066);
      complex10.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.ZERO.divide((-2029.613));
      complex2.ZERO.atan();
      Complex complex3 = complex0.pow((-4.728528221305482E-9));
      complex0.equals((Object) null);
      complex3.nthRoot(247);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.readResolve();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.NaN.reciprocal();
      complex4.I.sqrt();
      Complex complex5 = complex4.multiply((-5.304795662536171E-9));
      complex5.ONE.multiply(254);
      Complex.valueOf(0.0, (-3313.897030383061));
      complex0.getArgument();
      complex1.I.tan();
      Complex complex6 = complex1.INF.acos();
      Complex complex7 = complex1.sqrt1z();
      Complex complex8 = complex1.asin();
      complex8.INF.cos();
      complex7.sqrt();
      complex1.getReal();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1948.17460189));
      complex0.ONE.pow(complex1);
      complex0.toString();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.NaN.log();
      Complex complex3 = complex1.I.acos();
      complex3.ONE.multiply((-849));
      Complex complex4 = complex3.multiply(6.283185307179586);
      complex4.I.conjugate();
      Complex.valueOf(466.5072, 4.503599627370496E15);
      complex3.I.createComplex(466.5072, 466.5072);
      complex3.NaN.toString();
      Complex complex5 = complex3.NaN.reciprocal();
      complex5.ZERO.exp();
      Complex complex6 = complex0.divide(complex1);
      complex6.isInfinite();
      complex6.ZERO.toString();
      complex0.multiply(complex6);
      complex3.divide(complex6);
      complex0.divide(6.283185307179586);
      complex3.getField();
      complex0.multiply(complex2);
      complex4.asin();
      complex0.log();
      complex0.cosh();
      complex5.nthRoot(1187);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(2.139863967895508, 2.139863967895508);
      complex0.equals("nDT54");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-1922.6573440906334));
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(3264.11, 0.0);
      Complex complex3 = complex0.ONE.tanh();
      complex3.I.reciprocal();
      Complex.valueOf(0.0, 4030.553815525679);
      Complex complex4 = complex2.INF.sin();
      complex4.ONE.toString();
      Complex complex5 = complex1.exp();
      complex5.ONE.multiply((-117));
      complex1.sqrt1z();
      Complex complex6 = complex1.createComplex(0.0, 200.86);
      complex2.I.getField();
      complex6.getArgument();
      complex1.I.getArgument();
      complex2.getImaginary();
      complex2.multiply(1.5707963267948966);
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex5.add(3264.11);
      complex8.ONE.acos();
      try { 
        complex7.nthRoot((-117));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -117
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.I.exp();
      Complex complex2 = complex1.ONE.multiply(672);
      complex1.abs();
      Complex complex3 = complex2.sqrt1z();
      complex1.ZERO.readResolve();
      complex0.readResolve();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.ZERO.conjugate();
      Complex complex7 = complex4.NaN.multiply(672);
      complex4.isInfinite();
      Complex complex8 = complex4.conjugate();
      complex7.asin();
      Complex complex9 = complex8.pow(0.0);
      complex0.equals(complex3);
      complex9.subtract(complex6);
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3148.616988);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-238.66216));
      complex0.ONE.abs();
      Complex complex1 = complex0.log();
      complex1.getField();
      complex1.abs();
      complex0.hashCode();
      complex0.I.toString();
      complex0.nthRoot(266);
      Complex complex2 = complex1.ZERO.pow((-949.57208874005));
      Complex complex3 = complex1.atan();
      complex3.multiply(571.4025971964);
      complex2.I.sqrt();
      Complex complex4 = complex3.INF.multiply(complex2);
      complex4.ZERO.readResolve();
      complex1.NaN.toString();
      complex1.toString();
      complex3.toString();
      complex2.toString();
      complex1.multiply(266);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract(399.967802654);
      complex0.getField();
      complex0.readResolve();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex4.INF.add(0.0);
      complex5.sin();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex3.divide(complex1);
      Complex complex8 = complex5.INF.asin();
      Complex complex9 = complex7.I.divide(Double.NaN);
      Complex complex10 = complex6.NaN.tan();
      assertSame(complex10, complex9);
      
      Complex complex11 = complex6.NaN.conjugate();
      complex11.NaN.abs();
      complex0.INF.getArgument();
      complex3.ONE.getArgument();
      complex4.readResolve();
      Complex complex12 = complex3.add(399.967802654);
      complex0.INF.abs();
      Complex complex13 = complex12.NaN.multiply(300);
      Complex complex14 = complex3.tanh();
      List<Complex> list0 = complex13.ZERO.nthRoot(947);
      assertEquals(947, list0.size());
      
      complex14.ONE.getArgument();
      Complex complex15 = complex1.multiply(complex2);
      complex3.getField();
      double double0 = complex13.abs();
      assertEquals(Double.NaN, double0, 0.01);
      
      complex2.asin();
      Complex complex16 = complex0.I.add(complex11);
      assertSame(complex16, complex15);
      assertSame(complex4, complex8);
      
      complex3.divide(0.0);
      Complex complex17 = complex13.createComplex(Double.NaN, 0.0);
      assertFalse(complex17.equals((Object)complex7));
      
      Complex complex18 = complex14.multiply((-1229));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals((-935.999217669635), complex18.getReal(), 0.01);
  }
}
