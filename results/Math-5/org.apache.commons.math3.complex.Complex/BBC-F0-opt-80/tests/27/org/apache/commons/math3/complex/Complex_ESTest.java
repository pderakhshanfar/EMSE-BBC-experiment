/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:15:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(549816.55204032, Double.POSITIVE_INFINITY);
      complex1.ONE.conjugate();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(9.243692214499533E293);
      Complex complex1 = new Complex((-1941.4377050467995));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.INF.multiply(complex2);
      complex3.NaN.sqrt();
      Complex complex4 = complex0.ZERO.conjugate();
      Complex complex5 = complex4.divide(complex0);
      complex5.ONE.log();
      Complex complex6 = complex4.cosh();
      Complex complex7 = complex0.sqrt1z();
      complex6.INF.multiply(9.243692214499533E293);
      complex7.pow(complex4);
      complex6.reciprocal();
      complex2.add((-5.452692909894593E-65));
      complex7.multiply(8103.083984375);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract((-2928.0));
      Complex complex1 = Complex.valueOf((-2928.0), 20.0);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.tan();
      complex1.multiply((-3.7439305492728975E14));
      complex3.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2324.99767237419, 2324.99767237419);
      complex0.NaN.getArgument();
      Complex complex1 = new Complex(189.9, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.add(2324.99767237419);
      Complex complex3 = complex0.I.pow(complex1);
      complex3.I.multiply(1786.8058);
      Complex complex4 = complex0.ZERO.divide(complex1);
      Complex complex5 = complex2.ZERO.divide(complex0);
      complex0.toString();
      Complex complex6 = complex0.sqrt1z();
      complex2.ONE.sqrt();
      Complex.valueOf((-3685144.772131644), 2.3561944720226173);
      complex6.tan();
      Complex complex7 = complex2.sinh();
      complex4.cos();
      Complex complex8 = complex0.add(complex2);
      complex8.multiply(complex5);
      complex7.abs();
      complex8.reciprocal();
      Complex.valueOf(2324.99767237419);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(419.263473, 3.402369329874797E300);
      complex0.acos();
      Complex complex2 = complex1.reciprocal();
      complex2.ONE.multiply(2.3561944697516335);
      Complex complex3 = complex1.divide(complex2);
      Complex complex4 = Complex.ZERO;
      complex1.exp();
      complex3.pow(419.263473);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = Complex.I;
      complex3.exp();
      Complex complex4 = complex0.pow(1019.80192116);
      complex4.getArgument();
      Complex complex5 = complex2.multiply(2147462109);
      complex1.atan();
      complex5.pow(complex3);
      try { 
        complex4.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = (Complex)complex1.readResolve();
      complex0.equals(complex1);
      complex0.getField();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.divide(complex0);
      complex6.hashCode();
      complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex7 = complex6.sqrt();
      complex7.pow(complex5);
      complex2.cosh();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.I;
      complex9.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      complex4.equals(complex6);
      Complex complex11 = complex4.pow(0.7853981633974483);
      Complex complex12 = new Complex((-1913.10277397661), 92.8369);
      complex6.pow(complex11);
      Complex.valueOf(1.2994475006710486E8);
      complex10.sqrt();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex(640.9, Double.NaN);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.ONE.sqrt();
      complex2.INF.pow(complex0);
      complex1.toString();
      Complex complex3 = complex0.INF.cos();
      complex0.I.sqrt();
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = Complex.valueOf((-2264.471732530404), 640.9);
      complex5.I.asin();
      complex5.NaN.hashCode();
      Complex complex6 = complex1.conjugate();
      Complex complex7 = complex6.pow((-653.0));
      complex7.I.multiply(Double.NaN);
      complex6.sqrt1z();
      complex6.abs();
      complex4.multiply(424);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-20.0));
      complex0.sinh();
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.readResolve();
      Complex complex2 = new Complex((-3.411186219855533E217), (-1854.4546035791));
      complex2.divide((-623.803764132447));
      Complex complex3 = Complex.valueOf((-1854.4546035791), 5317.5686006566);
      Complex complex4 = complex3.cosh();
      complex4.INF.atan();
      Complex complex5 = complex1.tanh();
      Complex complex6 = Complex.I;
      complex6.pow(5317.5686006566);
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = Complex.valueOf(20.0);
      Complex complex3 = complex1.sinh();
      complex3.readResolve();
      Complex complex4 = Complex.valueOf((-1.90002537E9), 0.027981027568203854);
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex4.NaN.acos();
      complex4.pow(1.828536033630371);
      complex5.reciprocal();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-3401.45879542));
      Complex complex1 = complex0.multiply((-1900025370));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
      complex0.acos();
      Complex complex1 = Complex.valueOf(1.0, (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.subtract(Double.NaN);
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      double double0 = 75.81735412939204;
      Complex complex0 = Complex.I;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.sinh();
      complex0.readResolve();
      complex0.divide(1.1992295328636466E289);
      Complex complex1 = Complex.valueOf(17.0, Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex.valueOf((-1854.4546035791), 1.1992295328636466E289);
      complex1.multiply(complex0);
      complex0.add(2173.2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      complex1.sinh();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex2.divide(complex3);
      complex2.hashCode();
      complex0.subtract(672.75516);
      complex1.sqrt();
      complex3.acos();
      Complex complex5 = complex2.atan();
      Complex complex6 = Complex.ONE;
      complex6.tan();
      complex4.exp();
      Complex complex7 = Complex.NaN;
      complex5.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.sinh();
      complex0.readResolve();
      Complex complex4 = Complex.ZERO;
      complex1.equals(complex4);
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex3.divide(complex2);
      Complex complex7 = complex1.exp();
      Complex complex8 = complex1.cosh();
      complex7.asin();
      complex6.add(complex3);
      Complex complex9 = complex5.tan();
      complex8.asin();
      complex0.add(complex9);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.acos();
      complex0.readResolve();
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      complex0.reciprocal();
      Complex complex4 = complex2.divide(complex0);
      complex0.createComplex((-2512.55727087), (-2.3561944696259274));
      Complex complex5 = complex0.exp();
      complex5.cosh();
      Complex complex6 = complex2.asin();
      complex6.add(complex1);
      complex4.tan();
      complex6.asin();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = (Complex)complex1.readResolve();
      Complex complex5 = new Complex(2.689623698321582E-228, Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.subtract(0.46301315734776943);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.multiply(1336);
      complex6.acos();
      complex4.atan();
      complex3.tan();
      complex8.add(complex6);
      complex4.createComplex(Double.POSITIVE_INFINITY, (-523.504668474));
      complex3.sqrt();
      complex0.asin();
      Complex complex9 = Complex.INF;
      complex8.add(complex9);
      complex4.tan();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.030912938892442704, (-235.513729738319));
      Complex complex1 = complex0.pow(1712.4);
      Complex complex2 = complex1.add((-235.513729738319));
      complex1.ONE.tan();
      Complex complex3 = Complex.valueOf(0.030912938892442704);
      Complex complex4 = complex0.pow(complex2);
      complex4.INF.nthRoot(2075586374);
      Complex complex5 = complex1.NaN.pow((-717.303));
      complex2.NaN.tanh();
      complex2.pow(Double.NaN);
      complex2.subtract(complex5);
      Complex complex6 = Complex.valueOf((-212.0610643582503));
      Complex complex7 = complex5.add(complex3);
      Complex complex8 = complex7.tanh();
      complex8.reciprocal();
      Complex complex9 = complex5.add(0.005893997168155916);
      complex9.pow(1712.4);
      complex0.reciprocal();
      complex6.pow((-717.303));
      complex9.log();
      complex1.tan();
      complex8.add(2389.37);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.ZERO;
      complex1.ZERO.subtract(complex2);
      complex1.INF.add(0.0);
      Complex complex3 = complex0.ONE.exp();
      Complex complex4 = complex0.cosh();
      double double0 = (-2.5866883048437488E280);
      Complex.valueOf(8.999821367768787E-8, (-2.5866883048437488E280));
      complex1.asin();
      complex3.add(complex4);
      try { 
        complex2.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.cos();
      complex0.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex0.sinh();
      complex0.readResolve();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      Complex complex4 = complex3.atan();
      List<Complex> list0 = complex3.nthRoot(1360);
      complex4.multiply(complex2);
      complex4.exp();
      Complex complex5 = Complex.INF;
      complex5.getImaginary();
      Object object1 = new Object();
      Complex complex6 = Complex.ONE;
      complex2.equals(list0);
      complex4.conjugate();
      Complex complex7 = Complex.I;
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = (Complex)complex1.readResolve();
      complex0.equals(complex1);
      complex0.getField();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.divide(complex0);
      complex6.hashCode();
      Complex complex7 = complex6.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex6.sqrt();
      complex8.pow(complex5);
      complex2.cosh();
      complex7.divide(Double.POSITIVE_INFINITY);
      complex4.equals(complex6);
      Complex complex9 = complex4.pow(0.7853981633974483);
      Complex complex10 = new Complex((-1913.10277397661), 92.8369);
      complex6.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sinh();
      Complex complex4 = (Complex)complex1.readResolve();
      Complex complex5 = complex2.divide((-1854.4546035791));
      complex2.readResolve();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, 2769.8489722198924);
      complex5.tanh();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, 2549.1);
      complex7.multiply(complex1);
      complex0.exp();
      Complex complex8 = Complex.I;
      complex0.cos();
      Complex complex9 = complex0.cosh();
      complex6.getArgument();
      complex3.reciprocal();
      complex4.cos();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.NaN.divide(0.0);
      Complex complex1 = complex0.cos();
      complex0.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.NaN.hashCode();
      complex0.abs();
      Complex complex3 = (Complex)complex2.readResolve();
      complex1.sinh();
      complex3.divide((-289.30958738224166));
      complex2.readResolve();
      Complex complex4 = Complex.valueOf((-289.30958738224166), 231.1941);
      Complex complex5 = complex1.tanh();
      Complex complex6 = new Complex((-289.30958738224166), 1.1992295328636466E289);
      Complex complex7 = complex6.multiply(complex3);
      complex6.NaN.multiply(76);
      complex6.exp();
      Complex complex8 = Complex.I;
      complex8.cos();
      complex5.cosh();
      complex7.getArgument();
      complex3.reciprocal();
      complex4.toString();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex0.cos();
      complex0.hashCode();
      Complex complex3 = complex2.I.sqrt();
      complex3.NaN.hashCode();
      Complex complex4 = complex1.multiply(133);
      complex1.subtract(complex4);
      complex0.abs();
      Complex complex5 = Complex.valueOf(0.0, 0.46117573976516724);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex5.subtract(complex0);
      Complex complex8 = complex7.sqrt();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.multiply((-1014));
      complex7.acos();
      complex3.atan();
      complex10.tan();
      complex10.add(complex0);
      complex8.createComplex(7.164663249266942E-88, (-10.416853786955));
      complex4.sqrt();
      complex3.pow(complex0);
      complex6.cosh();
      complex5.equals(complex10);
      Complex.valueOf((-3895.7456));
      Complex complex11 = complex4.subtract(7.164663249266942E-88);
      try { 
        complex11.ONE.nthRoot((-1014));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,014
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1702.87));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.sinh();
      Complex complex3 = (Complex)complex2.ZERO.readResolve();
      Complex complex4 = complex0.INF.exp();
      Complex complex5 = complex4.INF.log();
      complex0.I.multiply((-3545));
      complex0.subtract(complex1);
      complex1.abs();
      Complex complex6 = Complex.valueOf(1456.0, (-1138.382370965));
      complex6.ZERO.cos();
      complex4.acos();
      complex3.exp();
      Complex complex7 = Complex.ZERO;
      complex5.multiply(Double.NaN);
      Complex complex8 = complex2.log();
      Complex complex9 = complex0.tanh();
      Complex complex10 = Complex.ZERO;
      complex10.abs();
      complex9.asin();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(19.5624, (-1232.09646));
      Complex complex1 = complex0.cosh();
      complex1.hashCode();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.ZERO;
      complex3.hashCode();
      complex3.abs();
      complex3.readResolve();
      complex2.sinh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.valueOf(0.0, (-1475.152));
      complex0.abs();
      complex0.getImaginary();
      complex1.sqrt();
      Complex complex7 = Complex.ONE;
      complex7.getField();
      Complex complex8 = Complex.valueOf(452598.5053066257, 164.832478536985);
      Complex complex9 = complex5.createComplex(1.1588881015777588, (-1232.09646));
      complex7.cos();
      complex9.reciprocal();
      complex3.acos();
      complex6.tanh();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex1.INF.add(0.0);
      complex0.ONE.exp();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.atan();
      Complex complex7 = new Complex(0.0);
      complex7.tan();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex4.add(complex8);
      complex6.createComplex(1143.7211441, (-581.19));
      Complex complex10 = complex5.sqrt();
      complex6.pow(complex3);
      Complex complex11 = complex8.cosh();
      complex11.divide(8.959636852713619);
      Complex complex12 = Complex.I;
      complex10.equals(complex12);
      complex7.pow(526.87495);
      Complex complex13 = Complex.ONE;
      complex7.pow(complex13);
      Complex.valueOf(0.3916988968849182);
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.NaN.divide(0.0);
      Complex complex1 = complex0.cos();
      complex0.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.NaN.hashCode();
      complex0.abs();
      Complex complex3 = (Complex)complex2.readResolve();
      complex1.sinh();
      complex3.divide((-289.30958738224166));
      complex2.readResolve();
      Complex.valueOf((-289.30958738224166), 231.1941);
      Complex complex4 = complex1.tanh();
      Complex complex5 = new Complex((-289.30958738224166), 1.1992295328636466E289);
      Complex complex6 = complex5.multiply(complex3);
      complex5.exp();
      Complex complex7 = Complex.I;
      complex7.cos();
      complex4.cosh();
      complex6.getArgument();
      complex5.pow(complex6);
      Complex.valueOf(2.356194490192345);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.divide(complex4);
      complex3.hashCode();
      Complex complex6 = complex0.subtract(672.75516);
      Complex complex7 = complex5.multiply(17);
      Complex complex8 = complex7.acos();
      complex8.atan();
      complex3.tan();
      Complex complex9 = complex2.add(complex6);
      complex6.createComplex((-2512.55727087), 17);
      Complex complex10 = complex9.sqrt();
      Complex.valueOf(1.31961989402771, 672.75516);
      complex4.asin();
      complex10.add(complex7);
      complex9.tan();
      complex1.divide(672.75516);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      Complex complex4 = complex1.INF.add(0.0);
      complex0.ONE.exp();
      Complex complex5 = complex0.cosh();
      complex5.pow(complex4);
      complex2.cosh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.divide(0.0);
      Complex complex8 = new Complex((-1820.7558));
      complex6.equals(complex1);
      complex3.pow(Double.NaN);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex6.pow(complex7);
      Complex.valueOf((-2786.0629552933));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = (Complex)complex1.readResolve();
      complex0.equals(complex1);
      complex0.getField();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.divide(complex0);
      complex6.hashCode();
      Complex complex7 = complex6.tan();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex0.add(complex8);
      Complex complex10 = complex0.createComplex(Double.POSITIVE_INFINITY, 20.0);
      Complex complex11 = complex7.sqrt();
      Complex complex12 = Complex.I;
      complex12.pow(complex5);
      complex8.cosh();
      complex4.divide(1019.2146810171239);
      complex9.equals(complex8);
      complex10.pow((-746.071));
      complex3.pow(complex11);
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.tanh();
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex3 = complex2.exp();
      complex2.NaN.negate();
      Complex complex4 = Complex.valueOf(8.868777118008612, 8.868777118008612);
      Complex complex5 = complex1.log();
      complex5.I.hashCode();
      complex5.INF.multiply(complex1);
      Complex complex6 = complex2.sinh();
      Complex complex7 = complex6.reciprocal();
      complex7.NaN.add(complex1);
      complex4.asin();
      complex0.sinh();
      complex0.toString();
      complex2.log();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex3.divide(complex4);
      complex3.hashCode();
      Complex complex6 = complex0.subtract(672.75516);
      Complex complex7 = complex5.multiply(17);
      Complex complex8 = complex7.acos();
      complex8.atan();
      complex3.tan();
      Complex complex9 = complex2.add(complex6);
      Complex complex10 = complex6.createComplex((-2512.55727087), 17);
      Complex complex11 = complex9.sqrt();
      complex11.pow(complex5);
      complex10.cosh();
      Complex complex12 = Complex.INF;
      Complex complex13 = complex12.divide((-2512.55727087));
      Complex complex14 = new Complex((-1.0));
      complex14.equals(complex13);
      complex5.pow(Double.NaN);
      Complex complex15 = new Complex(9.94381632344361E-9, 17);
      complex1.pow(complex15);
      Complex.valueOf((-2276.760902664866));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex complex2 = Complex.valueOf(0.0, 7.679117635349454E-9);
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex0.subtract(0.0);
      complex4.NaN.multiply(complex1);
      Complex complex5 = Complex.valueOf((-1756.82396338302), (-820.2922275));
      complex5.acos();
      Complex complex6 = complex2.atan();
      complex1.tan();
      complex4.add(complex1);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.createComplex((-1009.076476832956), (-1756.82396338302));
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex6.pow(complex0);
      Complex complex11 = Complex.ZERO;
      complex11.cosh();
      complex8.divide(335.991867858364);
      Object object0 = complex11.readResolve();
      complex1.equals(object0);
      complex3.pow(2523.0);
      complex11.pow(complex10);
      Complex.valueOf(1783.3664114865);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex complex2 = Complex.valueOf(0.0, 7.679117635349454E-9);
      complex0.ONE.pow(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.NaN.multiply(complex1);
      Complex.valueOf((-1756.82396338302), (-820.2922275));
      Complex complex5 = complex0.ONE.divide((-1756.82396338302));
      complex3.ZERO.readResolve();
      complex4.getField();
      Complex.valueOf((-1756.82396338302), 1.5397815704345703);
      complex4.createComplex((-1.0277088322108312), 1.0);
      complex4.cos();
      complex4.reciprocal();
      complex2.acos();
      complex1.tanh();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sinh();
      complex2.I.pow(complex0);
      Complex complex3 = complex0.acos();
      complex0.ONE.exp();
      complex0.multiply((-2512.55727087));
      Complex complex4 = complex3.log();
      complex4.NaN.nthRoot(947);
      complex3.tanh();
      complex3.abs();
      complex3.asin();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = complex1.cosh();
      complex2.sinh();
      complex1.readResolve();
      complex0.equals(complex1);
      complex0.acos();
      complex1.exp();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.log();
      complex5.tanh();
      complex2.abs();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex complex2 = Complex.valueOf(0.0, 7.679117635349454E-9);
      complex0.ONE.pow(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.NaN.multiply(complex1);
      Complex complex5 = complex2.cos();
      Complex complex6 = complex0.subtract(complex1);
      complex2.sqrt();
      Complex complex7 = complex5.multiply((-460));
      Complex complex8 = complex6.acos();
      complex7.atan();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.tan();
      complex10.add(complex9);
      complex5.createComplex((-653.90587400144), (-1.0));
      complex8.sqrt();
      Complex complex11 = complex7.pow(complex4);
      complex9.cosh();
      Complex complex12 = complex6.divide(1.5397815704345703);
      complex0.equals(complex11);
      complex4.pow((-20.0));
      complex12.pow(complex3);
      Complex.valueOf(3.375790090199648);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1702.87));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.sinh();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      Complex complex5 = complex2.INF.exp();
      complex5.INF.log();
      complex0.I.multiply((-3545));
      complex0.subtract(complex1);
      complex2.abs();
      Complex.valueOf((-104.5286), (-1138.382370965));
      Complex.valueOf((-104.5286), Double.NaN);
      Complex complex6 = complex5.divide((-104.5286));
      complex5.readResolve();
      Complex complex7 = complex0.tanh();
      complex2.multiply(complex3);
      Complex complex8 = complex7.exp();
      Complex complex9 = complex2.cos();
      complex4.cosh();
      complex9.getArgument();
      complex8.reciprocal();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex complex2 = complex0.subtract((-2629.1));
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.sqrt();
      complex5.multiply(279);
      complex1.acos();
      Complex complex6 = Complex.ZERO;
      complex3.atan();
      complex0.tan();
      Complex complex7 = Complex.ONE;
      complex3.add(complex6);
      complex0.createComplex((-837.37389727981), (-2629.1));
      Complex complex8 = Complex.INF;
      complex8.sqrt();
      Complex complex9 = Complex.valueOf((-1756.82396338302), 0.0);
      Complex complex10 = complex9.pow(complex0);
      complex5.cosh();
      complex2.divide((-4.316580502355056E-8));
      Complex complex11 = new Complex((-1654.8178932), 1.5397815704345703);
      complex1.equals(complex11);
      complex9.pow((-1756.82396338302));
      complex5.pow(complex10);
      Complex.valueOf((-1788.0691447));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex complex2 = Complex.valueOf(0.0, 7.679117635349454E-9);
      Complex complex3 = complex0.ONE.pow(complex1);
      complex1.divide(complex0);
      complex1.hashCode();
      complex3.subtract(0.0);
      complex3.exp();
      complex0.negate();
      complex2.readResolve();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex4 = Complex.valueOf(2.1735615730285645);
      Complex complex5 = Complex.valueOf(672.75516, 1850.97899780637);
      complex5.subtract(2.1735615730285645);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.NaN.divide(0.0);
      Complex complex1 = complex0.cos();
      complex0.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.NaN.hashCode();
      complex0.abs();
      complex2.readResolve();
      complex1.sinh();
      complex1.negate();
      Complex.valueOf((-1475.152), 0.0);
      complex1.I.abs();
      complex2.getImaginary();
      complex1.sqrt();
      complex0.getField();
      Complex.valueOf(1.0, 0.7071067811865475);
      Complex complex3 = complex1.createComplex(1.0, (-1735.8536569206));
      Complex complex4 = complex3.cosh();
      complex2.getArgument();
      complex4.reciprocal();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(3279.5782);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.I.add(3279.5782);
      complex2.pow(complex4);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.multiply(complex2);
      Complex complex7 = Complex.valueOf(1086.051582836746, 3279.5782);
      complex6.divide((-820.2922275));
      complex3.reciprocal();
      Complex complex8 = Complex.INF;
      complex5.multiply(2.2716558543283476E16);
      complex5.log();
      complex8.tanh();
      complex7.abs();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.468072777056227E-9);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.NaN.cosh();
      Complex complex4 = complex3.INF.sinh();
      Complex complex5 = (Complex)complex1.readResolve();
      complex0.equals(complex5);
      complex0.INF.getField();
      complex5.I.acos();
      complex2.exp();
      complex4.multiply(0.0);
      Complex complex6 = complex5.log();
      Complex complex7 = complex3.tanh();
      complex7.abs();
      complex6.asin();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.reciprocal();
      complex3.divide(complex4);
      complex3.hashCode();
      complex0.subtract(672.75516);
      Complex complex5 = complex0.exp();
      complex5.negate();
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      Complex.valueOf(2899.25149);
      complex0.subtract((-1993.31767));
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex.valueOf(0.0, 7.679117635349454E-9);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.subtract(0.0);
      complex1.equals("Ep#D[*<c6/VT2``nq");
      complex2.getField();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.reciprocal();
      complex4.divide(complex5);
      Complex complex6 = new Complex(0.0, 0.0);
      complex6.hashCode();
      complex5.subtract(1.0607041998938709E-7);
      complex5.exp();
      Complex complex7 = complex3.negate();
      Complex.valueOf((-1.2166293977270723));
      complex0.subtract((-1.2166293977270723));
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(19.5624, (-1232.09646));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = new Complex(Double.NaN, 1086.749065885);
      Complex complex4 = complex3.multiply(1345);
      Complex complex5 = complex4.tanh();
      complex0.createComplex(1345, 20.0);
      complex5.hashCode();
      Complex complex6 = complex1.subtract(1086.749065885);
      complex2.getArgument();
      complex0.getArgument();
      Complex complex7 = complex6.divide(complex3);
      Complex complex8 = complex2.multiply(complex3);
      Complex complex9 = complex0.asin();
      complex9.NaN.pow(complex1);
      complex2.subtract(1086.749065885);
      complex8.asin();
      complex5.readResolve();
      complex5.getReal();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(19.5624, (-1232.09646));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sinh();
      complex0.readResolve();
      complex0.equals(complex2);
      complex1.getField();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.valueOf((-1232.09646));
      complex3.hashCode();
      complex4.subtract(1295.1294368648896);
      Complex complex5 = Complex.valueOf(1913.5489339987578);
      Complex complex6 = complex5.exp();
      complex1.negate();
      Object object0 = complex4.readResolve();
      complex6.equals(object0);
      Complex.valueOf(1.0);
      complex1.subtract(2201.9544984195);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex.valueOf(0.0, 7.679117635349454E-9);
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.NaN.multiply(complex1);
      Complex complex5 = Complex.valueOf((-1756.82396338302), (-820.2922275));
      complex0.ONE.divide((-1756.82396338302));
      complex3.ZERO.readResolve();
      complex1.tanh();
      Complex complex6 = complex2.ZERO.multiply(complex1);
      complex4.exp();
      complex2.cos();
      complex6.add(complex5);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex complex2 = Complex.valueOf(0.0, 7.679117635349454E-9);
      complex0.ONE.pow(complex1);
      Complex complex3 = complex0.subtract(0.0);
      Complex complex4 = complex3.NaN.multiply(complex1);
      Complex complex5 = Complex.INF;
      complex5.sqrt();
      complex2.multiply(279);
      Complex complex6 = complex1.acos();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.atan();
      Complex complex9 = complex6.tan();
      Complex complex10 = Complex.ONE;
      complex10.add(complex2);
      complex9.createComplex(0.0, (-1756.82396338302));
      complex9.sqrt();
      complex6.pow(complex8);
      complex0.cosh();
      complex5.divide((double) 279);
      complex2.equals(complex4);
      complex3.pow(0.0);
      complex2.pow(complex4);
      Complex.valueOf((-2276.760902664866));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1702.87));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.sinh();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      Complex complex5 = complex2.INF.exp();
      complex5.INF.log();
      Complex complex6 = complex0.I.multiply((-3545));
      Complex complex7 = complex0.subtract(complex1);
      complex2.abs();
      Complex complex8 = Complex.valueOf(1456.0, (-1138.382370965));
      Complex complex9 = complex8.ZERO.cos();
      complex7.ONE.subtract(complex8);
      Complex.valueOf((-1702.87), (-1702.87));
      complex6.divide(Double.NaN);
      complex9.readResolve();
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.tanh();
      complex4.multiply(complex0);
      Complex complex12 = complex10.exp();
      complex12.cos();
      complex11.cosh();
      complex3.getArgument();
      complex11.reciprocal();
      Complex complex13 = Complex.valueOf(6.187780443461367E146);
      complex13.toString();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      complex0.pow(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex.valueOf(0.0, (-735.0));
      Complex complex3 = complex2.divide(1.5391707185581056E-178);
      complex0.readResolve();
      complex3.tanh();
      Complex complex4 = new Complex(688.039904315545, 1.0);
      complex2.multiply(complex4);
      complex2.exp();
      Complex complex5 = complex4.cos();
      complex2.cosh();
      complex5.getArgument();
      complex0.reciprocal();
      complex4.toString();
      Complex.valueOf(1665.15039);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex complex2 = Complex.valueOf(0.0, 7.679117635349454E-9);
      Complex complex3 = complex0.ONE.pow(complex1);
      complex0.subtract(0.0);
      complex2.divide(7.679117635349454E-9);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex0.atan();
      complex3.getField();
      complex2.cosh();
      Complex complex6 = Complex.valueOf(1.054760847603618E-7);
      Complex complex7 = complex3.pow((-4223.31167));
      complex3.multiply(complex6);
      complex5.atan();
      complex7.isInfinite();
      complex4.negate();
      complex5.getReal();
      Complex complex8 = Complex.ONE;
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex3.I.conjugate();
      complex4.I.atan();
      complex0.getField();
      complex2.INF.cosh();
      Complex complex5 = Complex.valueOf(1.0);
      complex1.pow(0.0);
      Complex complex6 = Complex.INF;
      complex0.atan();
      complex6.isInfinite();
      complex5.negate();
      complex3.getReal();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.sinh();
      complex1.readResolve();
      Complex complex4 = Complex.valueOf(Double.NaN, 2.761628769925529E-8);
      Complex complex5 = Complex.I;
      Object object0 = complex5.readResolve();
      complex4.equals(object0);
      complex3.getField();
      complex3.reciprocal();
      complex3.divide(complex1);
      complex5.hashCode();
      Complex complex6 = Complex.I;
      complex6.subtract(1913.5489339987578);
      complex2.exp();
      Complex complex7 = new Complex(1913.5489339987578);
      complex7.equals(complex5);
      Complex.valueOf(0.0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.subtract(1913.5489339987578);
      Complex complex10 = complex9.INF.atan();
      complex10.ONE.sin();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.conjugate();
      Complex.valueOf((-2552.2546585672244));
      complex0.multiply(complex2);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sinh();
      complex1.readResolve();
      complex0.equals(complex1);
      complex0.getField();
      complex1.reciprocal();
      Complex complex4 = complex3.divide(complex0);
      complex4.hashCode();
      Complex complex5 = Complex.INF;
      complex0.NaN.asin();
      complex5.subtract((-1.0));
      Complex complex6 = complex3.exp();
      complex3.negate();
      complex6.equals(complex2);
      Complex complex7 = Complex.valueOf((-560.2717452944));
      complex7.subtract(293.7225897);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-2512.55727087));
      Complex complex4 = complex3.subtract(2.0);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = Complex.valueOf((-2512.55727087), (-0.8617114545648015));
      complex0.divide((-820.2922275));
      complex1.readResolve();
      Complex complex7 = complex5.tanh();
      complex4.multiply(complex6);
      complex5.exp();
      complex2.cos();
      Complex complex8 = new Complex((-0.8617114545648015));
      complex8.cosh();
      complex6.getArgument();
      complex7.reciprocal();
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = Complex.INF;
      complex4.INF.cos();
      complex3.pow(complex4);
      complex0.getArgument();
      complex1.sqrt();
      Complex complex5 = complex4.reciprocal();
      complex5.divide(complex3);
      Complex complex6 = complex0.subtract(complex3);
      complex6.ONE.tan();
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.tan();
      complex3.acos();
      complex2.exp();
      complex0.multiply((-937.727));
      Complex complex4 = Complex.valueOf((-937.727), (-137.83667025658));
      complex4.tanh();
      Complex complex5 = Complex.ONE;
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.acos();
      complex1.ONE.createComplex((-412.4556869309), 0.0);
      Complex complex4 = complex2.INF.pow(0.0);
      Complex complex5 = complex0.tanh();
      complex5.INF.acos();
      complex5.isInfinite();
      Complex complex6 = complex0.NaN.cosh();
      complex6.NaN.add(0.0);
      complex2.abs();
      Complex complex7 = complex2.add(complex3);
      complex5.readResolve();
      Complex complex8 = complex0.INF.tanh();
      Complex complex9 = Complex.valueOf(0.0, 1.0);
      Complex complex10 = complex3.negate();
      complex10.ZERO.exp();
      complex7.isInfinite();
      complex4.isInfinite();
      complex1.getReal();
      Complex complex11 = complex4.divide(complex7);
      complex9.isNaN();
      complex2.toString();
      Complex complex12 = complex5.pow(complex9);
      complex12.divide(1.0);
      complex11.getArgument();
      complex4.readResolve();
      complex9.sin();
      Complex.valueOf(0.0);
      complex5.getField();
      complex8.add(complex10);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.944398214330544E-154);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.add(0.0);
      Complex complex3 = complex2.INF.add(981.7702212796514);
      complex2.INF.toString();
      Complex complex4 = Complex.valueOf(0.0, 4597.3958);
      complex4.I.getField();
      complex1.tanh();
      complex2.isNaN();
      complex3.createComplex(1.944398214330544E-154, 783.88);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.createComplex((-20.0), 0.0);
      Complex complex3 = complex1.I.conjugate();
      Complex complex4 = complex1.NaN.reciprocal();
      complex0.nthRoot(7);
      Complex complex5 = complex0.createComplex((-424.9848707), (-424.9848707));
      complex5.I.sinh();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex1.multiply(3023.609534222);
      complex3.INF.hashCode();
      complex7.ONE.subtract(complex6);
      Complex.valueOf((-99.45339), 0.0);
      complex7.exp();
      Complex complex8 = complex3.divide(complex0);
      complex8.I.pow(complex4);
      Complex complex9 = complex5.divide(complex2);
      complex6.conjugate();
      complex9.getReal();
      complex8.abs();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      complex0.abs();
      Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex2.NaN.divide(0.0);
      Complex complex4 = complex3.I.conjugate();
      complex4.I.atan();
      complex0.getField();
      complex2.INF.cosh();
      Complex complex5 = Complex.valueOf(1.0);
      complex1.pow(0.0);
      Complex complex6 = complex0.multiply(complex3);
      complex0.atan();
      complex6.isInfinite();
      complex5.negate();
      complex3.getReal();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(19.5624, (-1232.09646));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.cos();
      complex1.sqrt1z();
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.atan();
      complex4.ZERO.nthRoot(1360);
      Complex complex6 = complex4.multiply(complex0);
      complex6.I.exp();
      complex3.getImaginary();
      Object object0 = new Object();
      complex2.equals(object0);
      complex2.conjugate();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1093.0);
      Complex complex1 = complex0.NaN.divide(1.5391707185581056E-178);
      Complex complex2 = complex1.ONE.cosh();
      Complex complex3 = complex0.divide((-937.727));
      Complex complex4 = complex3.atan();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex4.createComplex(0.0, (-4184.1961908));
      complex6.ONE.subtract((-1209.87011100959));
      complex1.ZERO.cos();
      complex4.getReal();
      complex3.pow((-937.727));
      complex0.getReal();
      Complex complex7 = complex3.divide(1.5391707185581056E-178);
      complex7.INF.getField();
      Complex complex8 = complex5.reciprocal();
      complex8.INF.pow(complex3);
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.I.multiply(846);
      complex10.INF.divide((-2506.94));
      complex1.isInfinite();
      complex1.cosh();
      complex0.sinh();
      complex3.getArgument();
      complex1.subtract(complex2);
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.negate();
      Complex complex1 = complex0.NaN.divide(0.0);
      Complex complex2 = complex1.INF.cos();
      complex2.ONE.pow(0.0);
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.cos();
      complex1.exp();
      complex0.tanh();
      complex2.createComplex(0.0, 2.7050414085388184);
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(3279.5782);
      Complex complex1 = Complex.I;
      complex1.INF.pow(complex0);
      Complex complex2 = complex0.divide(complex1);
      complex2.I.add(3279.5782);
      complex2.ONE.toString();
      Complex complex3 = complex1.multiply(959);
      Complex complex4 = complex3.INF.divide(2201.9544984195);
      complex4.NaN.multiply(0.0);
      complex3.ZERO.nthRoot(959);
      Complex complex5 = Complex.valueOf(3279.5782, 0.041666666666621166);
      complex4.ONE.pow(complex1);
      complex1.getImaginary();
      complex1.toString();
      complex4.subtract(2201.9544984195);
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.acos();
      complex1.NaN.readResolve();
      complex0.INF.hashCode();
      Complex complex2 = complex0.sqrt1z();
      complex2.INF.multiply(389);
      complex2.NaN.readResolve();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.NaN.sinh();
      complex4.NaN.log();
      complex2.ZERO.add(complex1);
      Complex complex5 = complex2.sin();
      complex0.getImaginary();
      Complex complex6 = complex5.add(1935.78468188003);
      Complex complex7 = complex2.asin();
      complex2.isInfinite();
      complex6.sqrt1z();
      complex7.subtract((-675.4701283014966));
      complex2.nthRoot(389);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.toString();
      Complex complex1 = complex0.subtract(2.0);
      complex1.ONE.divide((-3.948954622015801E-9));
      Complex complex2 = complex1.sinh();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      ComplexField complexField0 = complex0.getField();
      complex0.equals(complexField0);
      Complex complex1 = complex0.createComplex(1872.874, 1872.874);
      complex0.getImaginary();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.add((-688.15014506546));
      Complex complex4 = complex1.sin();
      complex3.ONE.abs();
      complex3.negate();
      complex4.exp();
      complex3.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf(0.0, (-3303.686));
      Complex complex2 = complex1.ONE.pow((-3303.686));
      complex2.ZERO.divide((-3303.686));
      Complex complex3 = complex0.negate();
      complex3.ZERO.sqrt1z();
      Complex complex4 = complex0.pow(0.0);
      complex1.ZERO.add(complex4);
      int int0 = 0;
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex3.ONE.multiply(complex0);
      complex4.INF.cos();
      complex3.pow(complex4);
      complex0.getArgument();
      complex1.sqrt();
      Complex complex5 = complex4.reciprocal();
      complex5.divide(complex3);
      Complex complex6 = complex0.subtract(complex3);
      complex6.ONE.tan();
      try { 
        complex2.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3910.120465624076));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.divide(complex0);
      complex2.NaN.abs();
      complex1.ONE.exp();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.I.createComplex(3.2558720916543104E-263, (-3910.120465624076));
      complex3.NaN.add(0.37907832860946655);
      complex4.ZERO.sqrt1z();
      Complex complex5 = complex0.add(complex1);
      Complex complex6 = complex0.NaN.asin();
      complex6.NaN.pow(0.0);
      complex0.add(3.2558720916543104E-263);
      Complex.valueOf(0.0);
      complex0.divide((-1.0));
      complex5.divide(2187.29947181);
      Complex complex7 = complex3.multiply((-81));
      Complex complex8 = complex1.negate();
      complex8.INF.sinh();
      complex3.asin();
      Complex complex9 = complex7.log();
      complex9.NaN.negate();
      Complex.valueOf(Double.NaN);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = (-2699);
      Complex complex1 = complex0.I.multiply((-2699));
      Complex complex2 = complex1.INF.pow(complex0);
      complex1.NaN.atan();
      Complex complex3 = complex0.asin();
      complex2.multiply((double) (-2699));
      complex2.createComplex((-2699), 574.7433178097);
      complex3.NaN.readResolve();
      complex2.getReal();
      Complex complex4 = complex2.INF.cosh();
      complex4.NaN.sin();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.I.createComplex(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.NaN.sin();
      complex3.ONE.getArgument();
      Complex complex4 = complex1.multiply(3008.09);
      Complex complex5 = complex4.multiply(0.0);
      complex5.I.pow(complex3);
      Complex complex6 = complex4.I.divide(0.0);
      complex6.pow(complex2);
      complex3.ONE.tanh();
      complex3.getImaginary();
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex7.add(Double.POSITIVE_INFINITY);
      Complex complex9 = complex1.asin();
      Complex complex10 = complex9.INF.sqrt1z();
      Complex complex11 = complex9.NaN.subtract(0.0);
      complex11.ZERO.reciprocal();
      complex11.ZERO.asin();
      complex3.abs();
      complex1.getField();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      Complex complex13 = complex12.tan();
      Complex complex14 = complex0.divide(complex9);
      complex12.INF.pow(3008.09);
      Complex complex15 = complex0.exp();
      complex15.INF.conjugate();
      complex0.I.abs();
      complex13.isNaN();
      complex14.divide(complex1);
      complex8.asin();
      complex10.tan();
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.log();
      complex1.negate();
      complex0.log();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex((-2242.708), 1007.2);
      Complex complex1 = complex0.I.multiply(1487);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.ONE.subtract(complex2);
      complex3.ONE.add(complex2);
      Complex complex4 = complex2.NaN.pow(complex1);
      complex4.ONE.sqrt1z();
      Complex complex5 = complex3.I.pow(1007.2);
      complex2.tanh();
      Complex.valueOf(0.0);
      Complex complex6 = complex0.ZERO.subtract(20.61);
      Complex complex7 = complex0.tan();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.sqrt1z();
      complex0.cos();
      complex5.pow(1007.2);
      Complex.valueOf(20.61, 0.0);
      complex6.sqrt();
      complex3.negate();
      complex0.getArgument();
      complex9.divide((double) 1487);
      complex7.createComplex(4.231000988846797E177, 0.0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1702.87));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex2.sinh();
      complex3.ZERO.readResolve();
      Complex complex4 = complex2.INF.exp();
      Complex complex5 = complex4.INF.log();
      Complex complex6 = complex0.I.multiply((-3545));
      Complex complex7 = complex0.subtract(complex1);
      complex2.abs();
      Complex complex8 = Complex.valueOf(1456.0, (-1138.382370965));
      complex8.ZERO.cos();
      Complex complex9 = complex7.ONE.subtract(complex8);
      complex9.ZERO.sqrt();
      complex9.multiply((-3545));
      Complex complex10 = complex0.acos();
      complex10.atan();
      Complex complex11 = complex10.tan();
      Complex complex12 = complex2.add(complex6);
      complex12.I.createComplex((-1138.382370965), (-2276.760902664866));
      Complex complex13 = complex7.sqrt();
      complex12.pow(complex6);
      complex12.cosh();
      Complex complex14 = complex11.divide((-3459.3892047789313));
      complex12.equals(complex13);
      complex5.pow(0.0);
      complex14.pow(complex7);
      Complex.valueOf((-2276.760902664866));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-2512.55727087), (-2512.55727087));
      Complex complex1 = complex0.I.tan();
      complex1.sinh();
      Complex complex2 = complex0.acos();
      complex0.ONE.exp();
      complex0.multiply(0.0);
      complex2.log();
      complex2.tanh();
      complex2.abs();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 587.11758923147;
      Complex complex0 = Complex.valueOf(587.11758923147, 931.301341);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex2.I.tan();
      complex3.I.abs();
      complex3.reciprocal();
      // Undeclared exception!
      complex2.ZERO.nthRoot(6392);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.exp();
      complex1.hashCode();
      complex2.multiply((-304));
      Complex complex3 = complex1.ONE.tanh();
      Complex complex4 = complex2.createComplex((-304), 1362.570617681);
      complex4.INF.hashCode();
      Complex complex5 = complex0.subtract(1362.570617681);
      complex5.ZERO.getArgument();
      complex5.NaN.getArgument();
      Complex complex6 = complex5.divide(complex2);
      complex6.NaN.multiply(complex0);
      complex1.asin();
      complex0.subtract((-1536.2621));
      complex1.asin();
      complex3.readResolve();
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = Complex.valueOf(2408.5953822550805, 528.801109);
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex1.I.conjugate();
      complex5.NaN.readResolve();
      Complex complex6 = complex4.NaN.tan();
      Complex complex7 = complex6.ONE.cosh();
      complex7.I.cos();
      complex0.getImaginary();
      complex0.multiply(0.0);
      Complex complex8 = complex1.tan();
      complex8.pow(complex2);
      complex8.multiply(1435);
      complex4.log();
      Complex complex9 = complex1.multiply(complex5);
      complex9.divide(528.801109);
      complex9.exp();
      complex2.getReal();
      Complex complex10 = Complex.NaN;
      complex3.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.hashCode();
      complex0.ONE.getField();
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.I.multiply(complex1);
      complex2.NaN.asin();
      Complex complex3 = complex0.ZERO.pow(0.0);
      Complex complex4 = complex0.conjugate();
      complex4.INF.conjugate();
      complex3.getField();
      Complex complex5 = complex1.exp();
      complex0.isInfinite();
      complex5.atan();
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ZERO.subtract(complex2);
      complex1.INF.add(0.0);
      Complex complex4 = complex0.ONE.exp();
      Complex complex5 = complex0.cosh();
      Complex.valueOf(8.999821367768787E-8, (-2.5866883048437488E280));
      complex1.asin();
      complex4.add(complex5);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.468072777056227E-9);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.NaN.cosh();
      complex3.INF.sinh();
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex0.INF.getField();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex4.I.divide(complex3);
      complex4.ONE.hashCode();
      complex4.ONE.subtract((-560.2717452944));
      Complex complex6 = complex5.ZERO.exp();
      complex4.negate();
      complex2.equals(complex3);
      Complex.valueOf(293.7225897);
      complex6.subtract(8.468072777056227E-9);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      complex0.NaN.divide(0.0);
      Complex complex1 = complex0.cos();
      complex0.hashCode();
      Complex complex2 = complex1.I.sqrt();
      complex2.NaN.hashCode();
      complex0.abs();
      complex2.readResolve();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.valueOf((-1475.152), 0.0);
      complex1.I.abs();
      complex2.getImaginary();
      complex1.sqrt();
      complex0.getField();
      Complex.valueOf(1.0, 0.7071067811865475);
      Complex complex6 = complex1.createComplex(1.0, (-1735.8536569206));
      complex3.ONE.cos();
      complex6.NaN.reciprocal();
      complex3.acos();
      complex4.tanh();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.ZERO.abs();
      complex1.NaN.getArgument();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = complex1.subtract((-1.0));
      Complex complex5 = complex4.createComplex(Double.NaN, (-1.0));
      complex4.I.divide(complex2);
      complex1.isNaN();
      Complex complex6 = complex3.divide(complex2);
      complex6.getArgument();
      complex1.tanh();
      complex1.readResolve();
      Complex complex7 = complex3.asin();
      complex7.divide(complex3);
      complex4.isInfinite();
      complex6.negate();
      complex4.I.nthRoot(1);
      complex2.pow(Double.NaN);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(4.307749759934266E-8, 4.307749759934266E-8);
      Complex complex1 = complex0.negate();
      complex1.I.readResolve();
      Complex complex2 = Complex.valueOf(4.307749759934266E-8, 4.307749759934266E-8);
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = Complex.valueOf(4.307749759934266E-8);
      Complex complex5 = complex1.divide(complex4);
      complex1.ONE.readResolve();
      complex4.ONE.negate();
      Complex complex6 = Complex.valueOf((-2554.77), 1796.42870728831);
      complex0.ZERO.createComplex(2.0829952491625585E-8, 1796.42870728831);
      Complex.valueOf(2.677136737066629E238);
      complex6.getField();
      complex5.INF.asin();
      Complex.valueOf(1886.27, 1886.27);
      complex0.isNaN();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.230089643550739E-275);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex0.divide((-1.287101187097E-312));
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.INF.sqrt1z();
      complex0.INF.divide(3.230089643550739E-275);
      Complex complex6 = complex1.divide(complex0);
      complex0.isInfinite();
      complex0.multiply(1);
      Complex complex7 = complex6.NaN.pow(complex2);
      Complex complex8 = complex6.tan();
      complex8.negate();
      Complex complex9 = complex7.tan();
      complex6.NaN.getArgument();
      complex9.ONE.acos();
      complex6.multiply(162);
      complex9.log();
      complex5.reciprocal();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-1085.700527872045);
      complex0.exp();
      Complex complex1 = Complex.valueOf((-1085.700527872045));
      complex0.isNaN();
      Complex complex2 = complex1.cos();
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      int int0 = (-300);
      Complex complex2 = complex1.INF.multiply((-300));
      complex1.NaN.sqrt();
      complex1.I.cos();
      complex2.NaN.negate();
      complex1.ONE.add(0.0);
      Complex complex3 = complex0.atan();
      Complex.valueOf(849.9, 849.9);
      complex3.I.getArgument();
      complex3.NaN.divide(0.045809537172317505);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.pow(0.0);
      complex2.INF.tanh();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex3.ZERO.subtract((-2642.0));
      Complex.valueOf(0.0);
      Complex complex5 = complex1.NaN.reciprocal();
      Complex complex6 = complex0.cos();
      complex6.getField();
      Complex complex7 = complex0.ONE.divide(0.0);
      complex6.readResolve();
      complex5.NaN.readResolve();
      complex6.getReal();
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      
      complex4.NaN.multiply(complex7);
      Complex complex8 = complex0.ZERO.tan();
      complex5.pow(0.0);
      Complex complex9 = complex4.cosh();
      Complex complex10 = complex9.sqrt();
      Complex complex11 = complex10.log();
      Complex complex12 = complex1.log();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertTrue(complex12.isInfinite());
      
      Complex complex13 = complex1.sqrt();
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      
      complex5.multiply(1);
      Complex complex14 = complex2.pow(complex8);
      complex7.pow(0.0);
      Complex complex15 = complex11.I.sqrt();
      assertEquals(0.7071067811865475, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex14.reciprocal();
      Complex complex17 = complex16.atan();
      Complex complex18 = complex11.sqrt();
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertSame(complex18, complex17);
      
      complex7.nthRoot(1);
      assertSame(complex7, complex10);
      assertSame(complex7, complex5);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, 1.5397815704345703);
      Complex complex2 = Complex.valueOf(0.0, 7.679117635349454E-9);
      Complex complex3 = complex0.ONE.pow(complex1);
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = complex4.NaN.multiply(complex1);
      Complex.valueOf((-1756.82396338302), (-820.2922275));
      Complex complex6 = complex0.ONE.divide((-1756.82396338302));
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals((-5.692089935262236E-4), complex6.getReal(), 0.01);
      
      complex4.ZERO.readResolve();
      Complex complex7 = complex1.tanh();
      assertEquals(32.23237769310279, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex3.ZERO.multiply(complex1);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex5.exp();
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      
      Complex complex10 = complex3.cos();
      Complex complex11 = complex4.cosh();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex4.getArgument();
      Complex complex12 = complex2.reciprocal();
      assertEquals((-1.3022329484792337E8), complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      String string0 = complex10.toString();
      assertTrue(complex3.equals((Object)complex11));
      assertEquals("(0.5403023058681398, -0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1215.7121517);
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = Complex.valueOf(4016.954682814451, (-1.0));
      Complex complex3 = complex2.NaN.conjugate();
      Complex complex4 = complex1.add(2270.154931023626);
      Complex complex5 = complex3.divide(0.0);
      Complex complex6 = complex2.asin();
      assertEquals((-8.991426548998326), complex6.getImaginary(), 0.01);
      
      complex3.NaN.tan();
      complex4.conjugate();
      complex2.hashCode();
      Complex complex7 = complex4.subtract(complex3);
      double double0 = complex4.getArgument();
      assertEquals(-0.0, double0, 0.01);
      
      complex7.add(2.0);
      assertSame(complex7, complex5);
      assertEquals((-1215.7121517), complex1.getReal(), 0.01);
      assertEquals(4016.954682814451, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double double0 = (-187.3416283420675);
      Complex complex0 = new Complex((-2511.0), (-187.3416283420675));
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.INF.multiply(0.0);
      complex1.NaN.divide(0.0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.pow(0.0);
      Complex.valueOf((-1121.95335239), 1.0);
      Complex complex4 = complex3.I.add(6.283185307179586);
      complex4.NaN.conjugate();
      Complex complex5 = complex0.sin();
      complex5.ZERO.pow(complex2);
      try { 
        complex5.NaN.nthRoot((-2852));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,852
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
