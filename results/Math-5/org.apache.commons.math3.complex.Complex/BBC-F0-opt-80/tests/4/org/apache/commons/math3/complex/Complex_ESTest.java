/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:02:10 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.subtract((-20.0));
      complex0.tanh();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex((-8.18804507680012E74), (-8.18804507680012E74));
      complex0.pow(3206.688988);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(2.7006726968568243E282, 639.3879);
      complex0.sqrt1z();
      complex0.INF.tanh();
      complex0.pow((-20.0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(619.43638, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(619.43638);
      complex0.INF.pow(complex1);
      Complex complex2 = complex0.multiply(1.5292444435954893E-203);
      complex2.NaN.nthRoot(4547);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = new Complex((-1035.49292635899), 3.052337264628377);
      Complex complex1 = complex0.pow(3.052337264628377);
      complex1.acos();
      Complex.valueOf((-3697.9298117));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(2492.315633, 4552.7727792683);
      Complex complex1 = Complex.valueOf(3.3075532478807267E-308, 3.3075532478807267E-308);
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex2.pow(complex1);
      complex4.divide(complex3);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
      Complex complex1 = complex0.log();
      complex1.tanh();
      Complex complex2 = Complex.I;
      complex1.sqrt();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.3456470966339111, 20.0);
      Complex complex2 = complex1.tan();
      complex0.pow(20.0);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2689.187906));
      complex0.getImaginary();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.asin();
      complex2.I.createComplex(Double.POSITIVE_INFINITY, (-395.0));
      complex3.subtract((-982.67209));
      Complex complex4 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1892.53622829312, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.add(Double.NaN);
      complex1.tanh();
      complex0.toString();
      complex2.atan();
      Complex complex5 = complex2.log();
      complex5.add(0.5);
      complex3.tanh();
      Complex complex6 = new Complex((-370.1954), 3019879.293171145);
      complex4.tan();
      Complex complex7 = Complex.ONE;
      complex2.nthRoot(3232);
      Complex complex8 = complex5.atan();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 9.754330676514655E-11);
      Complex complex1 = complex0.sin();
      complex0.tan();
      complex0.exp();
      Complex complex2 = Complex.NaN;
      Complex complex3 = new Complex((-739.8583514805863), (-3.0399439534134115E97));
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1892.53622829312, Double.POSITIVE_INFINITY);
      complex0.sin();
      Complex complex1 = complex0.tan();
      complex1.exp();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(236);
      complex0.getImaginary();
      complex0.asin();
      complex0.asin();
      Complex complex3 = Complex.INF;
      complex3.asin();
      complex3.subtract(Double.POSITIVE_INFINITY);
      complex1.tan();
      complex2.abs();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cos();
      double double0 = 4308.4117289;
      Complex complex1 = complex0.add(4308.4117289);
      Complex complex2 = complex1.multiply((-360217.4223904423));
      try { 
        complex2.I.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1.0, (-311.191764011));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.multiply(37);
      complex0.cos();
      Complex.valueOf(1337.670429904557);
      Complex complex4 = complex3.multiply(7);
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = Complex.valueOf((double) 7);
      Complex complex7 = complex6.ZERO.log();
      complex0.conjugate();
      complex2.isInfinite();
      Complex complex8 = complex3.sqrt1z();
      complex8.ZERO.log();
      complex2.toString();
      complex1.tan();
      Complex complex9 = complex3.sin();
      complex1.acos();
      complex7.sin();
      complex1.subtract(complex3);
      complex3.add(complex1);
      complex9.exp();
      complex5.sqrt1z();
      complex3.pow(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.getField();
      complex0.ONE.abs();
      complex0.getField();
      Complex complex1 = new Complex(Double.NaN);
      complex0.I.pow(complex1);
      complex0.sqrt();
      complex1.INF.getField();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(2926.0669655670563);
      complex1.NaN.readResolve();
      complex0.ONE.subtract(complex2);
      Complex complex4 = complex1.pow(complex3);
      complex4.NaN.getField();
      complex1.createComplex(331.012459878, (-2.3639110433141897E-8));
      Complex complex5 = complex2.tan();
      complex5.pow(Double.NaN);
      Complex complex6 = complex3.sqrt();
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      Complex complex2 = new Complex((-254.52545371959));
      complex2.multiply((-20.0));
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.exp();
      Complex complex5 = complex4.divide(1789.3794379879137);
      Complex complex6 = complex1.multiply(1);
      Complex complex7 = complex5.asin();
      complex7.getImaginary();
      Complex complex8 = complex0.asin();
      complex7.INF.getField();
      Complex complex9 = complex6.divide((-20.0));
      Complex complex10 = complex8.asin();
      complex3.asin();
      complex5.subtract(2690.165183980073);
      Complex complex11 = complex9.tan();
      complex7.abs();
      complex6.tan();
      complex11.tan();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = null;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 4599.07);
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex0.multiply(0.0);
      Complex complex4 = Complex.NaN;
      complex4.readResolve();
      Complex complex5 = Complex.valueOf(0.0, (-3505.5));
      complex5.equals(complex0);
      Complex complex6 = complex0.pow(complex1);
      complex4.add(4599.07);
      complex6.tanh();
      complex6.tan();
      complex2.abs();
      complex3.conjugate();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add((-553.0125));
      Complex complex2 = complex1.sinh();
      complex0.multiply(0.0);
      complex1.tan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.valueOf(1.1795268640216787E-8, (-3519.98469133));
      Complex complex5 = new Complex(0.0, (-3519.98469133));
      complex4.getImaginary();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.asin();
      complex2.asin();
      Complex complex8 = Complex.I;
      complex7.subtract((-3519.98469133));
      Complex complex9 = complex7.tan();
      Complex complex10 = Complex.ONE;
      complex1.abs();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-1.0);
      Complex complex0 = new Complex(6018.79058, (-1.0));
      Complex complex1 = null;
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.pow((-8.316530604593264E105));
      Complex complex4 = complex2.subtract(complex1);
      complex1.INF.cos();
      complex4.I.reciprocal();
      Complex complex5 = Complex.valueOf(1892.53622829312);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex4.divide(complex6);
      Complex complex8 = complex7.INF.multiply((-5493));
      complex2.atan();
      Complex complex9 = complex2.divide(complex6);
      Complex complex10 = complex4.atan();
      Complex complex11 = complex6.divide(complex5);
      complex5.add(complex3);
      complex3.divide(complex11);
      complex11.ONE.getArgument();
      Complex complex12 = Complex.valueOf((-8.316530604593264E105));
      complex12.multiply(complex10);
      complex11.exp();
      Complex complex13 = Complex.valueOf((-8.316530604593264E105));
      Complex complex14 = complex6.add(complex4);
      complex10.conjugate();
      complex13.multiply(complex9);
      complex14.getField();
      complex13.add(1190.545934315);
      complex3.conjugate();
      complex8.divide((-8.316530604593264E105));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex.valueOf(2.0, 2772.7553824685);
      complex0.isNaN();
      Complex complex2 = complex0.cosh();
      complex1.readResolve();
      complex0.equals(complex2);
      Complex complex3 = Complex.NaN;
      complex3.pow(complex0);
      Complex complex4 = complex2.atan();
      complex4.pow(9.138048193292229E-4);
      complex0.add(2.0);
      complex0.multiply(1319);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(2690.165183980073);
      Complex complex2 = new Complex(2690.165183980073);
      Complex complex3 = complex2.multiply(0.5403023058681398);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex0.divide(2560.11462117282);
      Complex complex7 = complex5.multiply(236);
      complex7.ONE.asin();
      complex6.getImaginary();
      complex1.asin();
      complex4.ZERO.divide(Double.POSITIVE_INFINITY);
      complex1.asin();
      complex0.asin();
      complex4.subtract(2690.165183980073);
      complex5.tan();
      complex2.abs();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.add(2690.165183980073);
      Complex complex2 = complex0.multiply(2278.5);
      complex0.getField();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.I;
      complex0.divide(complex2);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.add(2690.165183980073);
      complex6.tanh();
      complex2.multiply(2278.5);
      complex1.tan();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex(1892.53622829312, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(1892.53622829312);
      Complex complex2 = complex0.multiply(236);
      complex0.getImaginary();
      complex0.asin();
      complex0.asin();
      Complex complex3 = Complex.INF;
      complex3.asin();
      complex3.subtract(Double.POSITIVE_INFINITY);
      complex1.tan();
      complex2.abs();
      Complex complex4 = Complex.valueOf((double) 236, (double) 236);
      complex4.conjugate();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.tanh();
      Complex complex2 = new Complex(1892.53622829312, Double.POSITIVE_INFINITY);
      complex2.tan();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex3.multiply(Double.POSITIVE_INFINITY);
      complex4.tan();
      complex4.multiply(1291);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.pow(complex2);
      complex0.sin();
      complex1.readResolve();
      complex1.equals(complex0);
      Complex complex4 = complex0.pow(complex3);
      complex2.atan();
      complex3.pow(0.45828658978430836);
      complex1.I.abs();
      complex0.add((-2738.440391149798));
      complex4.tanh();
      complex2.multiply(0.45828658978430836);
      complex2.tan();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      complex5.multiply(1291);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.negate();
      complex1.tanh();
      Complex complex2 = new Complex(1892.53622829312, Double.POSITIVE_INFINITY);
      complex2.tan();
      complex1.multiply(1319);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(2566.2, Double.NaN);
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex0.multiply(complex4);
      complex0.add(2188.65112);
      Complex complex6 = complex3.tanh();
      complex3.atan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.subtract(0.0);
      complex6.log();
      complex7.add(complex8);
      complex0.getArgument();
      complex3.asin();
      complex8.sin();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      complex1.add(4599.07);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.multiply(0.0);
      complex3.getField();
      Complex complex4 = Complex.NaN;
      complex3.multiply((-1.0));
      Complex complex5 = complex2.multiply((-528));
      complex5.reciprocal();
      Complex complex6 = Complex.valueOf((double) (-528));
      complex6.multiply((-1925));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(2188.65112, 1.375);
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(0.5403023058681398);
      Complex complex3 = complex1.multiply(0.5403023058681398);
      Complex complex4 = complex1.exp();
      complex4.exp();
      Complex complex5 = complex3.divide(2188.65112);
      Complex complex6 = complex0.exp();
      Complex complex7 = complex0.multiply(236);
      complex4.getImaginary();
      Complex complex8 = complex0.asin();
      complex8.asin();
      complex7.asin();
      complex7.subtract(1147.6210822832);
      Complex complex9 = Complex.ONE;
      complex1.tan();
      complex5.abs();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.3936265707015991);
      Complex complex1 = complex0.multiply(1340.3311563918294);
      Complex complex2 = complex0.atan();
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.multiply(0.5220900774002075);
      Complex complex5 = complex2.exp();
      complex1.exp();
      Complex complex6 = complex5.divide(2.0);
      Complex complex7 = complex6.exp();
      complex2.add(0.0);
      complex0.multiply(2.0);
      int int0 = 659;
      complex1.multiply(659);
      complex6.atan();
      complex7.subtract(0.41421356237309515);
      complex0.log();
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex(1.5707963267948966);
      Complex complex1 = complex0.createComplex(1.5707963267948966, 1.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.pow(complex0);
      complex0.getArgument();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.sinh();
      Complex complex6 = Complex.ONE;
      complex0.multiply(4927);
      Complex complex7 = complex3.divide(complex2);
      Complex complex8 = Complex.ZERO;
      Complex.valueOf(4034.9906086016);
      complex1.log();
      complex8.subtract(Double.NaN);
      Complex complex9 = complex8.sin();
      Complex complex10 = complex9.multiply(complex7);
      complex10.tan();
      complex6.exp();
      Complex complex11 = Complex.I;
      complex9.toString();
      complex0.tan();
      Complex complex12 = Complex.ZERO;
      complex12.acos();
      Complex complex13 = Complex.I;
      complex13.asin();
      complex4.equals("(0.0, 0.0)");
      complex11.readResolve();
      Complex complex14 = Complex.ZERO;
      complex13.sinh();
      complex12.asin();
      complex14.add(complex5);
      Complex.valueOf((-1194.4443));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex((-1.0006110796173715), 1203.1036658823111);
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex3.divide(complex0);
      complex5.ZERO.toString();
      Complex complex6 = Complex.valueOf(0.0, 342.4);
      Complex complex7 = complex6.multiply(complex3);
      complex4.add((-1779.2924335692));
      complex6.tanh();
      complex7.multiply(6.283185307179586);
      Complex complex8 = complex1.tan();
      complex8.multiply((-1213));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex(1.3456470966339111, 1.3456470966339111);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.exp();
      complex0.getImaginary();
      complex2.isNaN();
      Complex complex5 = complex2.cosh();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = Complex.valueOf(1.3456470966339111, (-3481.0));
      complex3.divide(complex7);
      complex6.add(1.3456470966339111);
      Complex complex8 = Complex.I;
      complex8.tanh();
      complex5.multiply(1.0008991661149433);
      complex4.tan();
      complex4.multiply(1319);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
      Complex complex1 = Complex.valueOf((-1178.5750054851299), 2772.7553824685);
      complex1.getField();
      complex0.conjugate();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex1.tan();
      Complex complex5 = complex2.pow((-1178.5750054851299));
      Complex.valueOf(2772.7553824685, 0.999999999997469);
      complex1.getArgument();
      complex4.getField();
      Complex complex6 = Complex.NaN;
      complex5.multiply((-807.56326844273));
      Complex complex7 = Complex.ZERO;
      complex7.multiply((-3744));
      complex3.reciprocal();
      Complex.valueOf((-1340.0984406584723));
      complex3.multiply((-2045222521));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1040.9217));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex3.cosh();
      complex4.reciprocal();
      Complex complex5 = complex0.divide(complex2);
      Complex complex6 = complex5.subtract(0.0);
      Complex complex7 = complex3.add(complex1);
      Complex complex8 = complex1.multiply(0);
      complex4.getImaginary();
      complex0.asin();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex3.asin();
      complex10.subtract(20.0);
      complex7.tan();
      complex7.abs();
      complex9.conjugate();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.exp();
      complex2.getImaginary();
      complex3.getField();
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex2.multiply(complex1);
      complex5.atan();
      Complex complex6 = Complex.ONE;
      complex6.tan();
      complex4.pow(4.315655444002347E-296);
      Complex complex7 = Complex.valueOf(Double.NaN, 774.24);
      complex1.getArgument();
      complex7.getField();
      Complex complex8 = complex1.tan();
      complex8.multiply(4.315655444002347E-296);
      Complex complex9 = Complex.valueOf((-20.0));
      Complex complex10 = complex9.multiply((-1));
      complex5.reciprocal();
      Complex.valueOf(3068.0);
      complex10.multiply((-3214));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.log();
      complex1.subtract(4599.07);
      Complex complex4 = Complex.ONE;
      complex3.multiply(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.valueOf(4599.07);
      Complex complex8 = complex7.exp();
      Complex complex9 = Complex.I;
      complex5.toString();
      Complex complex10 = complex6.tan();
      complex7.acos();
      Complex complex11 = Complex.I;
      complex11.asin();
      Complex complex12 = Complex.NaN;
      complex12.equals(complex10);
      Complex complex13 = new Complex((-2371.225793));
      complex13.readResolve();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex7.sinh();
      Complex complex16 = Complex.INF;
      complex16.asin();
      complex15.add(complex16);
      complex8.createComplex((-1254.2918896), 4599.07);
      Complex complex17 = Complex.valueOf(4.908843759498681E-306, 1.382702438957167);
      complex17.conjugate();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 762.5616575224344);
      Complex complex1 = complex0.multiply(762.5616575224344);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.multiply((-2106.3));
      Complex complex5 = complex4.exp();
      Complex complex6 = complex3.exp();
      Complex complex7 = complex4.divide((-2106.3));
      Complex complex8 = complex3.exp();
      Complex complex9 = complex7.add(762.5616575224344);
      complex6.multiply((-9.374695893307895E158));
      complex8.multiply(659);
      Complex complex10 = complex8.atan();
      Complex complex11 = complex2.subtract(0.0);
      complex5.log();
      complex9.add(complex8);
      complex11.getArgument();
      complex10.asin();
      complex7.sin();
      complex1.nthRoot(2053040);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1701.44), (-1040.9217));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.multiply(complex2);
      complex1.pow(complex2);
      Complex complex4 = complex0.sin();
      complex3.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      Complex complex5 = complex3.pow(complex4);
      complex5.atan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.pow(0.0);
      complex7.tan();
      complex7.toString();
      complex7.getField();
      complex6.exp();
      complex7.toString();
      complex3.atan();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.divide((-1866.02089225));
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.conjugate();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.NaN.subtract(complex2);
      complex1.acos();
      complex3.getImaginary();
      complex1.sqrt();
      complex1.sqrt();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2188.65112);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.sinh();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.divide(complex1);
      complex2.add(0.0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = complex7.divide(785.0778465);
      complex4.multiply((-19));
      Complex complex9 = Complex.valueOf((double) (-19), Double.POSITIVE_INFINITY);
      complex9.getImaginary();
      Complex complex10 = complex8.cos();
      complex1.createComplex((-20.0), (-20.0));
      complex10.sinh();
      complex6.asin();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2188.65112);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.add(0.0);
      complex4.tanh();
      complex3.cos();
      complex3.divide(complex2);
      complex1.divide(2966.156);
      complex2.multiply(2539);
      Complex.valueOf(2188.65112);
      Complex complex5 = Complex.NaN;
      complex5.getImaginary();
      Complex complex6 = Complex.valueOf((-9.029878114318277E237));
      Complex complex7 = complex6.cos();
      complex5.createComplex(2966.156, Double.NaN);
      complex6.sinh();
      complex7.asin();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.conjugate();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.NaN.subtract(complex2);
      complex3.INF.asin();
      Complex complex4 = complex0.I.createComplex(0.0, 0.0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.pow(complex5);
      complex6.ONE.getArgument();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.sinh();
      complex8.ONE.multiply(1);
      Complex complex9 = complex5.divide(complex7);
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex9.NaN.log();
      complex11.ZERO.subtract(3007.672815681929);
      complex10.sin();
      Complex complex12 = complex9.ONE.multiply(complex10);
      complex12.tan();
      complex12.INF.exp();
      complex8.getField();
      Complex complex13 = complex1.exp();
      complex4.toString();
      complex13.atan();
      complex13.sinh();
      complex1.divide(0.0);
      complex9.tan();
      complex2.divide(complex12);
      complex12.pow((-445.4476835));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5528968572616577);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.ZERO.multiply(6.283185307179586);
      complex2.divide(complex1);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.valueOf((-1545.0));
      Complex complex5 = complex1.sin();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex4.ONE.log();
      Complex complex8 = complex7.ONE.sinh();
      complex6.I.createComplex((-1545.0), (-151.9548533123));
      Complex complex9 = Complex.I;
      complex0.asin();
      complex3.equals(complex5);
      complex8.readResolve();
      Complex.valueOf(6.283185307179586, 0.5528968572616577);
      Complex complex10 = complex8.asin();
      Complex complex11 = complex5.add(complex4);
      complex11.createComplex(7.408112967339146E-255, (-1545.0));
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      complex0.multiply(complex1);
      Complex complex2 = complex1.add(4599.07);
      Complex complex3 = complex0.tanh();
      complex3.ONE.multiply(0.0);
      Complex complex4 = complex3.tan();
      complex4.abs();
      complex2.subtract(4599.07);
      complex0.divide(976.826861);
      Complex complex5 = Complex.valueOf(0.0, 976.826861);
      complex5.atan();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1040.9217));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.multiply(complex1);
      complex0.I.pow(complex1);
      complex2.ONE.sin();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.atan();
      complex4.INF.pow((-1040.9217));
      complex4.INF.tan();
      complex0.toString();
      complex3.getField();
      Complex complex5 = complex3.exp();
      complex5.ONE.toString();
      Complex complex6 = complex4.atan();
      complex6.I.sinh();
      Complex complex7 = Complex.I;
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
      Complex.valueOf((-1178.5750054851299), 2772.7553824685);
      complex0.isNaN();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.add((-2356.2998514838678));
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex5.divide(2772.7553824685);
      Complex complex7 = complex4.multiply(40);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.getImaginary();
      Complex complex8 = new Complex(-0.0);
      Complex complex9 = complex8.cos();
      complex9.NaN.conjugate();
      complex9.createComplex(2772.7553824685, (-0.7615941559557649));
      complex5.sinh();
      Complex complex10 = Complex.INF;
      complex4.getField();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.INF.divide(complex0);
      Complex complex4 = complex0.NaN.subtract(complex3);
      complex4.INF.asin();
      complex1.add((-875.376));
      Complex complex5 = Complex.ONE;
      complex5.log();
      complex0.divide(complex2);
      complex0.subtract((-1438.0));
      complex1.abs();
      complex0.abs();
      complex4.createComplex(0.7439793032995794, (-929.9545966));
      Complex complex6 = complex2.multiply((-2045222521));
      complex6.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1040.9217));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.I.pow(complex1);
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.subtract(0.0);
      complex3.add(complex1);
      Complex complex8 = complex1.multiply(0);
      complex4.getImaginary();
      complex0.asin();
      complex8.asin();
      complex2.subtract(20.0);
      complex5.tan();
      Complex complex9 = Complex.valueOf(1.057380684430436E-215);
      complex9.abs();
      complex7.divide(2.3195229636950566E-16);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf((-1178.5750054851299), 2772.7553824685);
      complex0.isNaN();
      Complex complex3 = complex2.sin();
      complex3.readResolve();
      complex0.equals(complex3);
      complex0.pow(complex3);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex3.pow((-5572.0481608));
      complex2.tan();
      complex4.toString();
      complex1.getField();
      complex5.toString();
      Complex complex6 = Complex.NaN;
      complex6.atan();
      Complex complex7 = Complex.valueOf(2772.7553824685, (-5572.0481608));
      complex7.sinh();
      complex5.divide(2772.7553824685);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2188.65112);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.sinh();
      complex2.ZERO.divide(complex1);
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.ZERO.cos();
      Complex complex6 = complex3.INF.divide(complex4);
      Complex complex7 = complex6.INF.divide(2966.156);
      complex3.multiply(2539);
      Complex.valueOf(0.0);
      complex1.getImaginary();
      complex3.cos();
      complex4.createComplex(0.0, (-31.0839723));
      complex5.reciprocal();
      complex7.abs();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.createComplex(1.3456470966339111, 1.3456470966339111);
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.INF.exp();
      complex0.getImaginary();
      complex4.ONE.getField();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = new Complex(1.3456470966339111);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.multiply(complex7);
      Complex complex9 = complex8.atan();
      complex5.tan();
      Complex complex10 = complex1.pow(1.6820131331794073E147);
      Complex.valueOf(1.6820131331794073E147, (-3715.34805));
      complex9.getArgument();
      complex10.getField();
      complex5.tan();
      complex9.multiply(0.0);
      complex10.multiply(1);
      complex7.reciprocal();
      Complex complex11 = Complex.valueOf((-1548.5129));
      complex2.abs();
      complex9.subtract(1.7069074829463731E180);
      complex1.divide(1.3456470966339111);
      complex10.atan();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2188.65112);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.sinh();
      complex2.ZERO.divide(complex1);
      complex0.multiply(complex1);
      Complex complex3 = complex2.add(1.0008991661149433);
      complex3.tanh();
      Complex complex4 = complex3.multiply(2234.5);
      complex4.tan();
      complex4.multiply((-1213));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.createComplex((-2263.4328), (-2263.4328));
      Complex complex4 = complex0.sqrt();
      complex4.sin();
      complex3.exp();
      Complex complex5 = Complex.I;
      complex5.getImaginary();
      complex2.getField();
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex6.multiply(complex6);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex1.tan();
      complex7.pow(Double.NaN);
      Complex.valueOf((-933.0), Double.NaN);
      complex4.getArgument();
      complex9.getField();
      Complex complex10 = complex1.tan();
      complex4.multiply(Double.NaN);
      Complex complex11 = complex8.multiply(3365);
      complex2.reciprocal();
      Complex.valueOf((-894.911));
      complex10.abs();
      complex8.subtract((-2774.7557));
      complex5.divide((-2774.7557));
      complex5.atan();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.conjugate();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex0.NaN.subtract(complex2);
      complex3.INF.asin();
      complex0.I.createComplex(0.0, 0.0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex0.pow(complex4);
      complex5.ONE.getArgument();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.sinh();
      complex7.ONE.multiply(1);
      Complex complex8 = complex4.divide(complex6);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex8.NaN.log();
      complex10.ZERO.subtract(3007.672815681929);
      complex9.sin();
      Complex complex11 = complex8.ONE.multiply(complex9);
      Complex complex12 = complex11.tan();
      Complex complex13 = complex11.INF.exp();
      complex6.toString();
      Complex complex14 = complex0.tan();
      Complex complex15 = complex11.acos();
      Complex complex16 = Complex.I;
      complex14.I.asin();
      complex8.equals(complex16);
      complex13.readResolve();
      complex14.sinh();
      complex12.asin();
      complex15.add(complex6);
      complex12.createComplex(0.0, 1305.52777759679);
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.I.add(complex0);
      Complex complex3 = complex2.INF.reciprocal();
      complex2.I.nthRoot(2121);
      Complex complex4 = complex0.acos();
      complex4.I.tanh();
      complex0.getReal();
      Complex complex5 = Complex.valueOf((-20.0));
      complex5.createComplex(277.53, 277.53);
      Complex complex6 = complex1.multiply(complex5);
      Complex complex7 = complex6.asin();
      complex6.NaN.getArgument();
      Complex complex8 = complex1.acos();
      complex0.getArgument();
      Complex complex9 = complex8.sin();
      complex1.I.add(0.0);
      Complex complex10 = complex6.INF.pow((-1015.780986));
      complex9.I.multiply(complex6);
      complex9.I.divide((double) 2121);
      complex6.getArgument();
      complex9.sinh();
      complex7.isInfinite();
      complex3.acos();
      complex10.log();
      complex9.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex0.log();
      complex3.ZERO.getField();
      complex0.isInfinite();
      Complex complex4 = complex2.ONE.exp();
      complex4.INF.tanh();
      Complex complex5 = complex4.tan();
      complex5.NaN.readResolve();
      complex5.NaN.atan();
      complex0.sin();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex6.INF.createComplex(0.0, 0.0);
      complex6.sin();
      complex2.getReal();
      complex1.conjugate();
      Complex.valueOf(0.0, 0.0);
      complex6.sqrt();
      complex2.readResolve();
      Complex complex8 = complex7.tanh();
      complex8.I.hashCode();
      Complex complex9 = complex4.add((-2671.568));
      complex9.INF.subtract(1282.533376);
      complex9.pow(complex7);
      complex0.isNaN();
      complex7.reciprocal();
      complex8.log();
      complex3.divide(2977.4542);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.ONE.atan();
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = complex4.tanh();
      complex5.ZERO.getField();
      complex3.ZERO.conjugate();
      complex4.nthRoot(7);
      Complex complex6 = complex1.add(complex3);
      complex6.ONE.hashCode();
      Complex complex7 = complex0.subtract((double) 7);
      Complex complex8 = complex2.ZERO.reciprocal();
      Complex complex9 = complex8.INF.divide((-1.0));
      Complex complex10 = complex8.ZERO.createComplex((-1.0), 7);
      Complex complex11 = complex8.ONE.cosh();
      complex11.multiply(0);
      complex0.INF.sqrt();
      complex9.subtract(0.0);
      complex1.sqrt1z();
      complex7.isNaN();
      Complex complex12 = complex9.ONE.subtract(0.0);
      complex2.sqrt();
      Complex complex13 = complex1.subtract(complex2);
      complex8.I.abs();
      complex13.NaN.sqrt();
      complex9.sinh();
      complex10.reciprocal();
      Complex complex14 = complex4.divide(complex8);
      complex14.multiply(0.0);
      complex11.isNaN();
      complex12.createComplex(1.0, (-2268.02255194));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = new Complex(0.0);
      complex0.NaN.hashCode();
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.toString();
      complex0.readResolve();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      Complex.valueOf((-1178.5750054851299), 2772.7553824685);
      complex0.isNaN();
      Complex complex2 = complex0.cosh();
      complex2.ONE.reciprocal();
      Complex complex3 = complex2.ONE.divide(complex0);
      complex2.subtract((-1178.5750054851299));
      Complex complex4 = complex3.NaN.add(complex2);
      Complex complex5 = complex0.multiply(86);
      complex1.getImaginary();
      complex4.asin();
      complex3.INF.asin();
      complex5.subtract(0.0);
      Complex complex6 = complex2.tan();
      complex6.abs();
      complex3.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5528968572616577);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.ZERO.multiply(6.283185307179586);
      complex2.divide(complex1);
      complex2.add(complex1);
      Complex complex3 = Complex.valueOf((-1545.0));
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex3.ONE.log();
      complex6.ONE.sinh();
      Complex complex7 = complex5.I.createComplex((-1545.0), (-151.9548533123));
      complex7.NaN.cos();
      complex5.isInfinite();
      complex4.divide(0.5528968572616577);
      complex1.tan();
      complex3.add((-645.9933724785));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, Double.NaN);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.NaN.exp();
      complex3.I.createComplex(6.283185307179586, (-465.1));
      complex1.ONE.getField();
      Complex.valueOf((-1.3782394940142479E-8));
      Complex complex4 = complex0.subtract(complex2);
      complex4.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-3583.0));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = new Complex(20.0, (-195.713155409));
      complex0.I.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf((-173.6068), 0.0);
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = complex1.cosh();
      complex1.INF.readResolve();
      Complex complex6 = complex5.INF.multiply(20.0);
      complex5.ZERO.abs();
      complex0.toString();
      Complex complex7 = complex5.subtract((-195.713155409));
      complex7.ZERO.getArgument();
      Complex complex8 = complex4.sin();
      complex8.ZERO.asin();
      complex2.hashCode();
      Complex complex9 = complex3.atan();
      complex9.toString();
      Complex complex10 = complex6.negate();
      Complex complex11 = complex10.add(complex3);
      Complex complex12 = complex2.subtract(0.0);
      complex12.cos();
      complex5.sqrt();
      complex11.negate();
      complex7.isNaN();
      complex2.equals(",zn");
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(2080.55246366, (-3268.2202665176687));
      complex0.ONE.getArgument();
      complex0.INF.multiply(1);
      complex0.getImaginary();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1012.798351), 1676.8779);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.log();
      complex1.log();
      complex0.getImaginary();
      Complex complex2 = complex0.conjugate();
      complex0.ONE.multiply(1239);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex3.ZERO.multiply((double) 543);
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex0.multiply(543);
      complex6.INF.atan();
      Complex complex7 = complex3.cos();
      Complex complex8 = Complex.valueOf(Double.NaN, (double) 1239);
      complex8.I.subtract(complex7);
      Complex complex9 = complex8.INF.pow(1676.8779);
      Complex complex10 = complex1.divide(1676.8779);
      Complex complex11 = complex2.divide(Double.NaN);
      complex11.INF.reciprocal();
      complex3.hashCode();
      Complex complex12 = complex10.subtract(complex1);
      complex12.NaN.toString();
      complex9.multiply(1676.8779);
      complex9.toString();
      complex8.negate();
      complex5.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1040.9217));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.I.pow(complex1);
      complex2.ONE.sin();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex0.atan();
      complex5.INF.pow((-1040.9217));
      complex5.INF.tan();
      complex0.toString();
      complex4.getField();
      Complex complex6 = complex4.exp();
      complex6.ONE.toString();
      Complex complex7 = complex5.atan();
      complex7.I.sinh();
      complex3.divide(0.0);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(1895.5);
      Complex complex1 = Complex.valueOf(1895.5, 1895.5);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex3.ZERO.subtract(1.0);
      Complex complex5 = complex2.ONE.cos();
      Complex complex6 = complex3.pow(complex2);
      complex6.asin();
      complex5.ZERO.hashCode();
      Complex complex7 = Complex.valueOf(1.0);
      complex4.isInfinite();
      complex7.ONE.readResolve();
      complex5.ZERO.divide(1895.5);
      Complex complex8 = complex4.pow(complex1);
      complex8.INF.divide(complex5);
      Complex complex9 = complex4.multiply(1895.5);
      complex4.ZERO.add(1.0);
      Complex complex10 = complex9.ZERO.pow(1.0);
      complex3.sin();
      Complex complex11 = Complex.ZERO;
      complex3.I.pow(complex11);
      complex9.ONE.createComplex(0.0, 4250.6);
      complex10.abs();
      try { 
        complex7.nthRoot((-748));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -748
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.tan();
      complex3.isNaN();
      Complex complex5 = complex3.ZERO.conjugate();
      Complex complex6 = complex0.subtract(518.26);
      complex0.getArgument();
      Complex complex7 = complex2.ONE.acos();
      Complex complex8 = complex7.INF.cosh();
      complex8.INF.sin();
      Complex complex9 = Complex.valueOf(1.5707963267948966, 0.0);
      complex9.subtract(complex6);
      Complex.valueOf((-1.0));
      complex2.subtract(0.6598852872848511);
      complex1.abs();
      complex0.INF.getArgument();
      Complex complex10 = complex4.multiply((-2176));
      Complex complex11 = complex10.NaN.sqrt();
      Complex complex12 = complex11.ONE.add(0.0);
      complex12.sqrt1z();
      complex6.pow(0.6598852872848511);
      complex5.multiply((-1142));
      complex4.pow(45.82394007);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(892.582159036804);
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.I.subtract(complex3);
      Complex complex6 = complex4.I.add(892.582159036804);
      complex6.ONE.divide(complex5);
      complex4.log();
      Complex complex7 = complex0.INF.reciprocal();
      complex7.hashCode();
      Complex complex8 = complex0.NaN.sqrt();
      complex8.ONE.pow(complex1);
      Complex complex9 = complex8.ZERO.add(0.0);
      complex8.getField();
      Complex complex10 = complex8.ONE.tanh();
      complex10.INF.sqrt();
      complex8.INF.readResolve();
      complex0.tanh();
      Complex complex11 = Complex.I;
      complex9.NaN.getField();
      complex10.getArgument();
      complex8.subtract(complex11);
      complex9.divide(0.0);
      Complex complex12 = complex1.sqrt();
      Complex complex13 = complex10.divide(892.582159036804);
      complex12.exp();
      complex13.exp();
      complex7.atan();
      complex0.multiply(1213);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(0.0);
      complex0.atan();
      Complex complex2 = complex0.NaN.acos();
      complex2.ZERO.multiply(0.0);
      complex0.NaN.exp();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex3.divide(1.318815744E9);
      complex4.NaN.exp();
      complex4.ONE.add(6.283185307179586);
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex5.NaN.multiply(659);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex0.subtract(460.95966);
      complex8.I.log();
      Complex complex9 = complex1.add(complex3);
      complex7.getArgument();
      complex9.asin();
      complex6.sin();
      complex7.nthRoot(659);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1550.76696044468), (-3092.3447));
      complex0.getReal();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.subtract(5.242885191553114E-22);
      Complex complex3 = new Complex(5.242885191553114E-22);
      Complex complex4 = complex2.NaN.add(complex3);
      complex3.NaN.toString();
      complex3.I.readResolve();
      complex4.ZERO.sin();
      complex4.I.readResolve();
      complex4.ONE.acos();
      int int0 = (-2478);
      try { 
        complex2.I.nthRoot((-2478));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,478
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.add(0.0);
      complex2.INF.cos();
      complex2.NaN.multiply(complex0);
      complex1.NaN.asin();
      Complex complex3 = complex1.multiply(complex0);
      complex3.NaN.add(complex2);
      complex1.conjugate();
      Complex complex4 = complex0.sqrt();
      complex4.getArgument();
      complex4.ONE.abs();
      Complex complex5 = Complex.valueOf(0.0, 20.0);
      complex4.hashCode();
      complex4.atan();
      complex5.exp();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.pow(complex0);
      complex3.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.pow(1.0705673935006142E-106);
      complex1.INF.toString();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.divide(1248.2144161294295);
      complex2.hashCode();
      Complex complex4 = complex0.createComplex(1105.7, 1105.7);
      complex4.abs();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = Complex.valueOf(1248.2144161294295);
      complex0.INF.acos();
      Complex complex7 = complex6.I.createComplex(1563.6959359159314, 1793.31684);
      complex3.conjugate();
      complex2.readResolve();
      complex2.multiply(7);
      Complex complex8 = complex5.createComplex(1.0705673935006142E-106, 0.0);
      complex8.I.cos();
      complex7.getImaginary();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.subtract((-3269.955434118));
      Complex complex2 = complex1.ZERO.pow(complex0);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.ZERO.add(complex3);
      complex0.I.asin();
      Complex.valueOf((-3269.955434118), 2979.788133944);
      complex0.INF.nthRoot(1);
      complex4.INF.readResolve();
      int int0 = (-195);
      complex1.toString();
      try { 
        complex0.nthRoot((-195));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -195
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex((-609.1428659), 1557.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex0.INF.cos();
      Complex complex3 = complex2.INF.pow(0.0);
      complex2.INF.conjugate();
      Complex complex4 = complex2.NaN.pow(1557.0);
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.INF.cosh();
      Complex complex7 = complex1.sqrt1z();
      complex7.INF.readResolve();
      Complex complex8 = Complex.valueOf(1557.0);
      complex4.negate();
      complex3.add(complex8);
      complex4.sqrt();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(1560.985306);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.NaN.negate();
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.ZERO.negate();
      complex0.add(complex4);
      complex5.ONE.add(complex1);
      complex2.divide(0.0);
      complex4.subtract(complex5);
      Complex.valueOf(0.0);
      Complex complex6 = complex4.asin();
      complex0.conjugate();
      complex0.atan();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex7.ZERO.tanh();
      Complex complex10 = complex7.negate();
      complex10.ZERO.createComplex((-1746.0), 0.0);
      complex7.ZERO.atan();
      complex4.readResolve();
      complex7.multiply(0.0);
      Complex complex11 = complex9.sqrt();
      complex11.multiply(0);
      complex6.add(complex8);
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex(420.74989894, 420.74989894);
      complex1.I.multiply(complex0);
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(7);
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.add((double) 7);
      Complex complex6 = complex3.exp();
      complex6.INF.add(complex5);
      complex6.tanh();
      complex3.asin();
      complex5.nthRoot(7);
      Complex.valueOf((double) 7);
      Complex complex7 = complex2.createComplex(0.0, 0.0);
      complex2.ONE.toString();
      complex7.multiply(2355);
      Complex complex8 = complex2.createComplex(4470.0, 7);
      complex8.NaN.cos();
      Complex complex9 = complex6.subtract(0.0);
      Complex complex10 = complex9.add(0.0);
      complex10.toString();
      Complex.valueOf((-447.6098000135), 2.011215719133196E-9);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.4219542306));
      Complex complex1 = Complex.I;
      complex1.ONE.hashCode();
      complex1.readResolve();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.INF.sinh();
      complex0.getImaginary();
      complex0.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(4125.63918218388, (-1039.8));
      complex0.ONE.getField();
      Complex complex1 = complex0.ONE.exp();
      complex1.ONE.nthRoot(1);
      complex1.ONE.readResolve();
      complex0.getReal();
      Complex complex2 = complex1.log();
      complex2.cos();
      Complex.valueOf(0.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex2.add(4125.63918218388);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex1.multiply(1);
      Complex complex8 = complex7.negate();
      Complex complex9 = complex7.NaN.sinh();
      complex7.NaN.cos();
      Complex complex10 = complex2.conjugate();
      complex10.ZERO.subtract(4125.63918218388);
      complex7.negate();
      complex4.asin();
      complex10.abs();
      complex8.getReal();
      complex9.add(complex4);
      complex6.add(complex4);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-798.94199));
      complex0.ZERO.getArgument();
      complex0.INF.toString();
      Complex complex1 = Complex.valueOf((-798.94199));
      complex1.I.log();
      Complex complex2 = new Complex(5.662033727488754E-22, (-2925.0669655670563));
      Complex complex3 = complex0.add(complex2);
      complex2.INF.cosh();
      Complex.valueOf(3300.8381856635087);
      complex3.sqrt1z();
      complex0.INF.getField();
      complex0.tan();
      complex0.getImaginary();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-422.2809855673605), (-422.2809855673605));
      complex0.NaN.hashCode();
      Complex complex2 = Complex.valueOf((-2505.0), 1.0);
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex4.ZERO.multiply(166);
      complex5.INF.tan();
      complex4.NaN.subtract((-422.2809855673605));
      Complex complex6 = complex2.NaN.divide(1250.4931);
      Complex complex7 = complex6.sin();
      complex3.I.subtract((-422.2809855673605));
      complex1.nthRoot(37);
      complex0.add(complex1);
      Complex complex8 = complex7.I.divide(complex4);
      Complex complex9 = complex7.I.asin();
      complex9.I.add((-422.2809855673605));
      Complex complex10 = complex1.multiply(37);
      complex7.isNaN();
      complex8.divide(complex10);
      Complex.valueOf((-1271.93344965721));
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.abs();
      complex0.isNaN();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.add(0.0);
      Complex complex3 = complex2.sin();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex1.ONE.add(2489.96);
      Complex complex6 = complex4.divide(complex1);
      Complex complex7 = complex6.I.multiply((-2415));
      Complex complex8 = complex0.tan();
      complex8.I.divide(complex6);
      complex8.ZERO.multiply((-13));
      complex2.getArgument();
      Complex complex9 = complex6.add(0.0);
      Complex complex10 = complex6.sin();
      Complex complex11 = complex9.divide(complex10);
      complex4.getImaginary();
      complex11.NaN.divide(3.2556641859513496E201);
      complex5.exp();
      complex11.atan();
      complex5.conjugate();
      complex8.asin();
      Complex complex12 = complex4.createComplex(-0.0, 6.283185307179586);
      complex7.sinh();
      complex8.multiply(2030);
      complex2.reciprocal();
      complex1.acos();
      complex3.exp();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(46.42978087467);
      Complex complex1 = complex0.ZERO.tan();
      complex1.INF.pow(46.42978087467);
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = new Complex(1.0186485886120274E93, 46.42978087467);
      complex0.tanh();
      complex1.INF.conjugate();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.pow((-3686.730738));
      complex5.I.subtract(complex4);
      complex2.sinh();
      complex2.add(complex4);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.ZERO.sinh();
      complex1.hashCode();
      complex1.INF.sinh();
      complex0.multiply(complex1);
      complex1.multiply((-2763));
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = new Complex(1660.793, 1660.793);
      complex0.ZERO.conjugate();
      complex0.NaN.readResolve();
      complex0.getField();
      Complex complex1 = complex0.NaN.divide(0.4113073945045471);
      Complex complex2 = complex1.ZERO.pow(0.4113073945045471);
      complex0.getReal();
      complex0.NaN.asin();
      Complex complex3 = complex1.I.add(complex2);
      Complex complex4 = complex0.subtract((-263.512945));
      Complex complex5 = complex4.log();
      complex0.hashCode();
      complex0.ONE.exp();
      Complex complex6 = complex4.NaN.sinh();
      complex6.ONE.subtract(1660.793);
      complex0.isInfinite();
      complex5.acos();
      complex3.NaN.cosh();
      complex2.sin();
      complex3.ZERO.atan();
      complex5.nthRoot(1199);
      complex2.isNaN();
      complex3.hashCode();
      complex3.sqrt1z();
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.acos();
      complex0.getImaginary();
      Complex complex1 = complex0.sqrt();
      complex1.INF.sqrt();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(337.12623849);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.acos();
      complex0.NaN.acos();
      complex0.ONE.sqrt();
      complex2.isInfinite();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.add(0.0);
      Complex complex1 = Complex.ONE;
      complex1.log();
      Complex complex2 = complex0.ONE.divide(complex1);
      complex2.ZERO.subtract(9.37721319457112E-9);
      complex0.abs();
      complex0.abs();
      Complex complex3 = complex0.createComplex(4105.911135910565, (-758.0));
      complex3.ZERO.multiply(1);
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.createComplex((-2614.3503370859116), (-2614.3503370859116));
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex4.negate();
      complex4.NaN.getField();
      Complex complex6 = complex3.ONE.conjugate();
      complex6.I.multiply(complex5);
      Complex complex7 = complex0.NaN.createComplex((-1957.5475904), 651.8417607497);
      Complex complex8 = complex7.I.conjugate();
      Complex complex9 = complex8.ZERO.pow(complex0);
      Complex complex10 = complex7.ONE.asin();
      Complex complex11 = complex1.createComplex((-2614.3503370859116), (-1957.5475904));
      complex11.cosh();
      Complex complex12 = complex2.cosh();
      Complex.valueOf(651.8417607497, 0.0);
      complex11.isNaN();
      Complex complex13 = complex12.NaN.divide(complex11);
      Complex complex14 = complex7.ONE.cos();
      Complex complex15 = complex12.multiply((-2614.3503370859116));
      Complex complex16 = complex1.sqrt();
      complex7.getField();
      Complex complex17 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      
      complex9.hashCode();
      complex10.conjugate();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      Complex.valueOf(0.0);
      Complex complex18 = complex14.subtract(0.0);
      assertEquals(0.5403023058681398, complex18.getReal(), 0.01);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      
      complex1.getReal();
      Complex complex19 = complex13.divide(0.0);
      assertTrue(complex19.equals((Object)complex9));
      assertTrue(complex12.equals((Object)complex15));
      
      complex16.readResolve();
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex15);
      assertSame(complex16, complex13);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }
}
