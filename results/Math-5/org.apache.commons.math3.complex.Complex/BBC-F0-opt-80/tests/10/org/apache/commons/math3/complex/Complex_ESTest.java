/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:27:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = new Complex((-103.99038372622383), 1.7627471740390857);
      complex4.multiply((-485));
      Complex complex5 = complex4.acos();
      Complex complex6 = complex5.pow((double) 58);
      Complex complex7 = Complex.ONE;
      complex1.tanh();
      complex6.nthRoot(3846);
      complex3.acos();
      Complex complex8 = Complex.valueOf(1.0000000626206489, Double.POSITIVE_INFINITY);
      Complex.valueOf(3631.618454);
      Complex complex9 = Complex.INF;
      complex2.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.sinh();
      complex1.ONE.toString();
      Complex complex2 = complex0.I.acos();
      complex1.I.hashCode();
      complex0.equals(complex1);
      complex1.getImaginary();
      complex2.NaN.createComplex((-3081.5), 0.0);
      complex0.getReal();
      Complex complex3 = complex1.subtract(Double.NaN);
      complex2.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.createComplex(Double.POSITIVE_INFINITY, (-1319.448485));
      Complex.valueOf(0.0);
      Complex complex4 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.NaN.pow((-1319.448485));
      complex1.hashCode();
      complex1.hashCode();
      complex3.hashCode();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.multiply(2145);
      complex4.multiply(17);
      complex0.tan();
      complex0.sin();
      complex6.getField();
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.INF;
      complex8.pow(complex9);
      Object object0 = complex8.readResolve();
      complex4.equals(object0);
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 148.7173314823);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ZERO.sin();
      complex0.NaN.getField();
      complex1.ZERO.acos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.log();
      complex4.ZERO.conjugate();
      Complex complex5 = Complex.valueOf((-842.082));
      Complex complex6 = complex1.subtract(complex5);
      complex6.INF.negate();
      complex2.subtract(1162.7853556);
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex3.reciprocal();
      complex8.multiply(complex0);
      Complex complex9 = complex5.conjugate();
      complex9.INF.divide((-842.082));
      Complex complex10 = complex0.sin();
      complex3.subtract(complex10);
      complex4.sqrt1z();
      complex7.subtract(1162.7853556);
      complex4.acos();
      complex1.add((-3.718924074653624E-8));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3298.6559160017273, (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(1044.8, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(1044.8, (-345.2922446));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(4.406062052965071E200, 3.4811161573930693);
      complex0.getArgument();
      complex0.sinh();
      complex1.asin();
      Complex.valueOf(3.4811161573930693, 4.406062052965071E200);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(20.0, 20.0);
      complex2.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(1243.26, (-8.330969967504819E-260));
      Complex complex1 = complex0.NaN.exp();
      complex1.toString();
      Complex complex2 = complex0.divide((-8.330969967504819E-260));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0), 2944.786879183085);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ONE.cos();
      complex0.NaN.nthRoot(1163);
      complex1.INF.nthRoot(1);
      complex1.hashCode();
      Complex complex2 = complex0.ZERO.sinh();
      complex2.ONE.sqrt1z();
      Complex complex3 = complex0.INF.multiply((-2040109465));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex3.ZERO.add(Double.NaN);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.log();
      complex7.NaN.atan();
      Complex complex8 = complex5.I.divide(complex3);
      Complex complex9 = complex3.INF.add(1.3115046679980076E-8);
      complex9.NaN.divide(1.3115046679980076E-8);
      complex0.I.getArgument();
      complex4.readResolve();
      complex3.divide(complex4);
      complex5.conjugate();
      complex3.subtract(complex8);
      Complex complex10 = Complex.valueOf((double) (-2040109465), (double) (-2040109465));
      complex4.multiply((-2040109465));
      complex10.readResolve();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(4467.97018383, 4467.97018383);
      complex1.isInfinite();
      Complex complex2 = new Complex(6.809741127603255E225);
      Complex complex3 = new Complex((-1610.900184274), (-1214.19077));
      Complex complex4 = complex2.acos();
      complex1.isInfinite();
      Complex complex5 = new Complex(Double.NaN, 1168.8843322419916);
      Complex complex6 = complex4.tan();
      complex3.toString();
      complex6.nthRoot(4396);
      complex6.sinh();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.I;
      complex0.getArgument();
      complex2.sin();
      Complex complex3 = Complex.valueOf(1118.4, 18.849776028420855);
      complex2.isInfinite();
      Complex complex4 = new Complex((-945.949567296));
      Complex complex5 = new Complex(6.809741127603255E225, Double.NaN);
      complex0.isInfinite();
      Complex complex6 = new Complex(18.849776028420855, 0.7853981633974483);
      complex3.tan();
      complex5.toString();
      Complex complex7 = complex5.pow((-1028.677));
      complex5.sinh();
      complex1.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2.007428933605617E272);
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.acos();
      complex3.getArgument();
      Complex complex6 = complex3.sin();
      Complex complex7 = Complex.valueOf(2.007428933605617E272, 18.849776028420855);
      complex6.isInfinite();
      Complex complex8 = new Complex(6.809741127603255E225);
      Complex complex9 = new Complex(20.0, 18.849776028420855);
      complex8.isInfinite();
      Complex complex10 = new Complex(0.09050461649894714, 18.849776028420855);
      complex10.tan();
      complex5.toString();
      Complex complex11 = complex7.pow(18.849776028420855);
      complex8.tanh();
      complex9.sqrt1z();
      complex11.reciprocal();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex1.ONE.hashCode();
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = complex2.createComplex(2.2294564247131348, (-2038.6381597314278));
      complex3.abs();
      Complex complex5 = complex0.subtract((-1.2296934902142301E22));
      complex5.ONE.multiply(Double.NaN);
      complex0.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex((-20.0), 3111.0306);
      Complex complex4 = complex3.acos();
      complex1.divide(complex4);
      Complex.valueOf((-1339.77444462601));
      Complex complex5 = complex0.acos();
      Complex complex6 = new Complex((-1339.77444462601));
      complex2.pow((-1339.77444462601));
      Complex.valueOf((-1339.77444462601), 3111.0306);
      Complex complex7 = Complex.I;
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex((-7604.0));
      Complex complex1 = Complex.valueOf(3.193116763299669, 3.193116763299669);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.sqrt1z();
      complex0.tanh();
      complex2.divide(complex0);
      complex0.reciprocal();
      complex4.acos();
      Complex complex5 = complex3.sqrt();
      try { 
        complex5.nthRoot((-3129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,129
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.662296893479141));
      complex0.INF.tan();
      Complex complex1 = complex0.pow(complex0);
      Complex complex2 = Complex.I;
      complex0.sqrt1z();
      Complex complex3 = complex0.tanh();
      complex0.divide(complex2);
      Complex complex4 = complex1.reciprocal();
      complex4.ZERO.tan();
      complex3.acos();
      complex1.sqrt();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3932.3), 20.0);
      Complex complex1 = Complex.valueOf(20.0);
      complex0.NaN.createComplex((-3932.3), 20.0);
      Complex complex2 = complex1.INF.tan();
      complex2.INF.log();
      Complex complex3 = complex0.add(complex1);
      complex2.NaN.pow(20.0);
      complex3.I.multiply(complex1);
      complex3.I.subtract(complex0);
      complex3.cosh();
      complex1.conjugate();
      Complex complex4 = complex2.tanh();
      complex4.INF.nthRoot(17);
      complex2.divide(20.0);
      Complex complex5 = Complex.valueOf(1.3965213298797607);
      Complex complex6 = complex5.subtract(20.0);
      Complex complex7 = complex6.sinh();
      complex7.multiply((-2052723454));
      complex4.readResolve();
      Complex.valueOf((double) (-2052723454));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.662296893479141));
      Complex complex1 = Complex.valueOf((-1.662296893479141), (-1.662296893479141));
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.INF;
      complex1.pow(complex3);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.sqrt1z();
      complex3.ZERO.pow((-1.662296893479141));
      Complex complex6 = complex2.tanh();
      complex0.divide(complex4);
      Complex complex7 = Complex.valueOf((-964.76298773));
      complex7.acos();
      Complex complex8 = complex5.multiply(2374);
      complex1.sin();
      complex0.pow((double) (-1));
      Object object0 = new Object();
      Complex complex9 = Complex.I;
      complex3.equals(complex9);
      complex2.tan();
      complex7.multiply(2374);
      complex6.exp();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt1z();
      complex2.tanh();
      complex4.divide(complex0);
      Complex.valueOf((-1.763230962070402));
      Complex complex5 = new Complex((-1.0));
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.sqrt();
      complex5.multiply(3474);
      Complex complex8 = complex2.sin();
      Complex complex9 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex10 = new Complex(387.0, (-20.0));
      complex10.pow(387.0);
      Object object0 = new Object();
      Complex complex11 = Complex.I;
      Complex complex12 = new Complex(1.3965213298797607, (-2487.935853415237));
      complex12.equals(complex8);
      complex4.createComplex((-1316.12), 991.98);
      Complex complex13 = complex4.subtract((-1316.12));
      complex7.pow(complex13);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.662296893479141));
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.INF;
      complex1.pow(complex3);
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.sqrt1z();
      complex2.tanh();
      complex0.divide(complex4);
      Complex complex6 = Complex.valueOf((-964.76298773));
      complex6.acos();
      complex5.multiply(2374);
      complex1.sin();
      complex0.pow((double) (-1));
      complex1.tan();
      Complex complex7 = Complex.I;
      complex1.add((double) 2374);
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.asin();
      Complex complex3 = new Complex((-3245.225741087401), 7.586808748646825E-281);
      complex2.tanh();
      complex0.add((-2091.353));
      complex3.sinh();
      Complex complex4 = Complex.ONE;
      complex4.divide(complex2);
      Complex.valueOf(3.193116763299669);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.atan();
      complex2.ZERO.pow(complex0);
      Complex complex3 = Complex.ONE;
      complex0.acos();
      Complex complex4 = complex0.divide(Double.POSITIVE_INFINITY);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.asin();
      complex2.atan();
      Complex complex3 = Complex.ONE;
      complex0.acos();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.INF;
      complex0.divide(complex2);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.subtract((-1717.1089306394538));
      Complex complex2 = complex1.asin();
      Complex complex3 = Complex.valueOf(1782.21402046, 1.4997124671936035);
      complex1.isInfinite();
      Complex complex4 = new Complex(1.4997124671936035);
      complex0.isInfinite();
      complex2.sinh();
      Complex complex5 = new Complex((-971.6947), (-971.6947));
      Complex complex6 = complex2.divide(complex5);
      complex0.acos();
      Complex complex7 = complex5.sin();
      complex6.pow(2.9850404523368767E-171);
      complex3.sqrt1z();
      complex7.multiply(37);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.getField();
      Complex complex2 = complex1.reciprocal();
      complex1.createComplex(373.221942, 0.5729197263717651);
      complex2.subtract((-2707.0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-1.0));
      complex1.abs();
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.divide(complex3);
      Complex complex5 = complex4.asin();
      Complex complex6 = new Complex((-1.0), 1.0);
      complex0.tanh();
      Complex complex7 = complex2.add((-1.0));
      Complex complex8 = complex7.NaN.sinh();
      complex8.INF.divide(complex3);
      complex8.add((-1.0));
      complex5.exp();
      complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.pow(Double.NaN);
      complex0.I.abs();
      Complex complex2 = Complex.valueOf((-1595.6008792477614), Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex0.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex1.add(930766.6224937161);
      complex2.INF.sqrt1z();
      complex4.I.negate();
      Complex complex7 = complex5.add(complex2);
      complex7.getField();
      Complex complex8 = Complex.valueOf(0.17317818956819397);
      Complex complex9 = complex8.acos();
      complex9.INF.divide(0.05928946123814516);
      Complex complex10 = Complex.valueOf(2236233.3167180726);
      Complex complex11 = complex10.ONE.createComplex(Double.NaN, Double.NaN);
      complex6.sqrt1z();
      complex10.add((-1595.6008792477614));
      complex5.sqrt1z();
      complex11.pow(complex3);
      complex9.multiply(Double.POSITIVE_INFINITY);
      complex6.sqrt();
      complex0.pow(complex4);
      complex11.getField();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.abs();
      Complex complex1 = complex0.ZERO.multiply(complex0);
      complex0.nthRoot(3003);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = new Complex(1.0);
      Complex complex4 = new Complex((-3.015709444206057E-226), 1254.7938891);
      Complex complex5 = complex4.acos();
      complex5.getField();
      complex1.isInfinite();
      complex2.divide(1254.7938891);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.acos();
      complex3.divide(complex1);
      complex3.getReal();
      complex0.createComplex(Double.NaN, 0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1.662296893479141));
      Complex complex1 = new Complex(1667.0, 1.662296893479141);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.atan();
      complex1.abs();
      Complex complex3 = new Complex((-1.0));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.divide(complex4);
      complex2.reciprocal();
      Complex complex6 = complex0.asin();
      Complex complex7 = new Complex(2424.0, (-2958.4));
      Complex complex8 = complex4.acos();
      complex5.pow(complex1);
      complex1.isInfinite();
      complex8.ONE.atan();
      complex2.multiply(7);
      complex6.divide(complex2);
      complex8.getReal();
      complex2.getReal();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(complex0);
      complex0.nthRoot(3003);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex0.asin();
      complex1.ZERO.sqrt();
      Complex complex4 = complex3.acos();
      complex4.ONE.pow(complex0);
      complex1.isInfinite();
      complex1.multiply(3003);
      complex1.divide(complex2);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.sqrt1z();
      complex2.tanh();
      complex1.divide(complex4);
      complex3.acos();
      complex1.toString();
      Complex complex5 = complex2.createComplex((-2807.393), (-944.20629));
      Complex complex6 = complex3.multiply((-674));
      complex5.ZERO.pow((-2807.393));
      complex2.equals((Object) null);
      complex6.tan();
      Object object0 = new Object();
      Object object1 = new Object();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex0.sqrt1z();
      complex2.tanh();
      Complex complex5 = new Complex((-237.9), 643.5);
      Complex complex6 = complex5.add((-2807.393));
      Complex complex7 = complex6.divide(complex0);
      Complex complex8 = complex2.tanh();
      complex8.add(1.0469679832458496);
      Complex complex9 = complex7.divide(complex3);
      complex3.acos();
      complex7.toString();
      Complex complex10 = complex2.createComplex((-31.167915724335096), 643.5);
      complex9.multiply((-4110));
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY, 37);
      complex11.ONE.sinh();
      Complex complex12 = complex10.sin();
      complex12.ONE.conjugate();
      Complex complex13 = Complex.I;
      Complex complex14 = Complex.ZERO;
      complex13.equals(complex14);
      complex11.tan();
      complex14.getField();
      Object object0 = new Object();
      Complex complex15 = new Complex(6294.491202424884, 0.7604059656000273);
      complex15.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(201.5232305, 201.5232305);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.valueOf(201.5232305);
      Complex complex4 = complex3.ZERO.divide(complex2);
      complex1.INF.multiply(complex0);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex2.ONE.asin();
      complex1.nthRoot(1028);
      complex1.exp();
      complex2.sin();
      Complex complex7 = complex4.ZERO.multiply(complex6);
      complex7.ONE.sin();
      Complex complex8 = new Complex(0.3333333333333334, 1028);
      complex8.I.multiply(5.679855838941285E-8);
      complex8.ONE.exp();
      complex5.equals(complex8);
      Complex complex9 = complex1.sqrt1z();
      Complex complex10 = complex9.acos();
      Complex complex11 = Complex.NaN;
      complex10.I.multiply(complex11);
      complex0.pow(0.6301699876785278);
      complex9.sqrt1z();
      complex4.readResolve();
      complex6.createComplex(1028, 201.5232305);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = Complex.valueOf((-1.76097684E-316));
      Complex complex3 = complex1.sqrt();
      complex2.getField();
      Complex complex4 = complex3.exp();
      complex2.pow(8.0);
      complex1.cos();
      complex3.sin();
      complex2.negate();
      complex4.hashCode();
      Complex complex5 = Complex.NaN;
      complex5.toString();
      Complex complex6 = complex4.tan();
      Complex complex7 = complex1.divide(63804.15875843799);
      complex3.multiply(complex6);
      complex2.conjugate();
      complex5.reciprocal();
      complex2.readResolve();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.add((-817.665384857006));
      Complex.valueOf(2.67091703414917, (-1051.97));
      Complex complex10 = complex5.conjugate();
      Complex complex11 = complex7.asin();
      complex11.conjugate();
      complex6.sqrt();
      complex9.sin();
      complex8.readResolve();
      Complex complex12 = Complex.valueOf((-817.665384857006));
      complex12.tanh();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(507.3750522132385);
      Complex complex2 = complex0.asin();
      complex2.NaN.nthRoot(2147482376);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, 1782.21402046);
      Complex complex4 = complex0.pow(507.3750522132385);
      Complex complex5 = complex2.conjugate();
      complex5.isInfinite();
      Complex complex6 = complex0.divide(0.0);
      complex3.isInfinite();
      Complex complex7 = complex1.tan();
      Complex complex8 = Complex.I;
      complex5.equals(complex4);
      Complex complex9 = complex4.sqrt1z();
      complex9.pow(complex4);
      complex7.createComplex(3778.66146470358, 245.40520741);
      complex8.isInfinite();
      complex2.getArgument();
      complex0.multiply(complex6);
      complex9.hashCode();
      complex0.conjugate();
      complex1.add(245.40520741);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex.valueOf((-1026.0227533223));
      Complex complex0 = Complex.valueOf((-3807.0));
      Complex complex1 = Complex.ONE;
      complex1.multiply(3422.55);
      Complex complex2 = new Complex((-1026.0227533223));
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex4.sqrt1z();
      complex3.hashCode();
      Complex complex7 = Complex.ONE;
      complex7.divide(complex5);
      complex2.toString();
      complex6.subtract(complex1);
      complex5.reciprocal();
      complex5.reciprocal();
      complex5.sqrt1z();
      complex4.multiply(2995);
      Complex complex8 = Complex.ONE;
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sin();
      Complex complex1 = complex0.ZERO.acos();
      complex1.I.divide(complex0);
      Complex complex2 = complex0.log();
      complex0.tanh();
      Complex complex3 = complex0.multiply(complex2);
      complex1.pow(complex3);
      Complex complex4 = complex1.asin();
      complex4.I.exp();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.reciprocal();
      complex2.sqrt1z();
      complex2.hashCode();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.divide(complex0);
      complex2.toString();
      complex1.subtract(complex5);
      complex1.reciprocal();
      complex5.reciprocal();
      complex3.sqrt1z();
      Complex complex6 = Complex.NaN;
      complex6.multiply((-547));
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1026.0227533223));
      Complex complex1 = complex0.ZERO.subtract(3422.55);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = Complex.valueOf(1782.21402046, 0.0);
      Complex complex4 = complex2.I.pow(3422.55);
      complex0.I.conjugate();
      complex1.isInfinite();
      Complex complex5 = complex3.NaN.divide(1782.21402046);
      complex2.isInfinite();
      Complex complex6 = complex1.tan();
      Complex complex7 = Complex.I;
      complex4.equals(complex7);
      complex4.ONE.sqrt1z();
      Complex complex8 = complex4.pow(complex3);
      Complex complex9 = complex4.createComplex(245.40520741, 1782.21402046);
      complex6.isInfinite();
      complex8.getArgument();
      Complex complex10 = complex1.multiply(complex9);
      complex10.hashCode();
      Complex complex11 = complex9.conjugate();
      complex5.tan();
      complex9.sinh();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = new Complex((-1.2618366811281002E-7), 1595.1672135530093);
      complex0.add(complex2);
      complex2.divide((-1.3445113140270216E-8));
      complex1.asin();
      Complex complex3 = complex2.tanh();
      complex1.acos();
      complex0.atan();
      complex0.sqrt();
      complex3.multiply((-3068));
      Complex complex4 = Complex.valueOf(9.994400500679653E270);
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.662296893479141));
      Complex complex1 = complex0.multiply((-1.662296893479141));
      Complex complex2 = complex0.atan();
      complex1.abs();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = Complex.valueOf((-1.662296893479141));
      Complex complex7 = complex1.add(complex0);
      complex7.ZERO.reciprocal();
      complex3.asin();
      Complex complex8 = complex5.acos();
      complex2.equals("");
      complex8.multiply((-1));
      complex6.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.atan();
      complex1.abs();
      Complex complex3 = new Complex((-1.0));
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex0.log();
      Complex complex7 = complex5.asin();
      Complex complex8 = complex0.pow(complex4);
      Complex complex9 = complex0.sqrt1z();
      complex0.tanh();
      Complex complex10 = complex9.add(Double.POSITIVE_INFINITY);
      complex1.divide(complex6);
      Complex complex11 = complex9.acos();
      complex2.toString();
      complex11.createComplex(6294.491202424884, 37);
      complex11.multiply(37);
      Complex complex12 = new Complex(Double.POSITIVE_INFINITY, 5.0614674548127384E-8);
      complex12.sin();
      complex10.equals(complex9);
      complex8.tan();
      complex7.getField();
      Object object0 = new Object();
      complex0.equals("[(nLEoqG:");
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0305018010328949E-8), (-2807.393));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract((-1.0305018010328949E-8));
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.subtract((-2807.393));
      complex4.INF.negate();
      complex4.INF.pow((-2807.393));
      complex0.getImaginary();
      complex3.log();
      complex3.equals(complex0);
      Complex complex5 = Complex.valueOf(105.29572296, 2858.0);
      Complex complex6 = complex1.divide(complex5);
      Complex.valueOf((-2807.393));
      Complex complex7 = complex6.I.asin();
      complex2.readResolve();
      Complex complex8 = complex6.sin();
      complex7.sqrt();
      complex3.pow(694949.9408174268);
      complex2.sqrt();
      complex8.exp();
      complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.ONE.asin();
      complex0.NaN.pow(complex1);
      Complex complex6 = complex0.ONE.sqrt1z();
      complex3.ONE.tanh();
      Complex complex7 = complex4.add((-237.9));
      complex7.ZERO.divide(complex3);
      complex4.toString();
      Complex complex8 = complex0.NaN.tan();
      Complex complex9 = complex1.subtract(354.0);
      complex9.I.multiply(complex3);
      complex9.ZERO.atan();
      Complex complex10 = complex4.multiply(complex2);
      Complex complex11 = complex10.ZERO.divide(354.0);
      complex2.cos();
      Complex complex12 = complex0.createComplex(354.0, 0.0);
      complex12.ONE.multiply(0.0);
      Complex complex13 = complex2.acos();
      complex8.abs();
      Complex complex14 = complex8.sqrt();
      complex6.divide(complex1);
      complex3.cosh();
      complex4.cosh();
      complex6.pow(0.41421356237309515);
      complex5.add(354.0);
      complex11.exp();
      Complex complex15 = new Complex(Double.NaN);
      Complex complex16 = complex14.add(complex15);
      complex11.isNaN();
      complex16.negate();
      complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.multiply((-1.0));
      Complex complex3 = Complex.valueOf((-1.0), (-1.6014373376410622E-146));
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.reciprocal();
      complex2.sqrt1z();
      complex5.hashCode();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex5.divide(complex3);
      complex8.toString();
      Complex complex9 = complex6.subtract(complex4);
      complex1.reciprocal();
      complex9.subtract(Double.POSITIVE_INFINITY);
      complex8.add(473.0434059518);
      complex8.nthRoot(361);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(473.0434059518);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.tan();
      complex3.toString();
      Complex complex4 = new Complex(958.49935040766, 473.0434059518);
      complex4.exp();
      complex0.tan();
      complex2.sqrt();
      complex4.sqrt1z();
      complex1.conjugate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.cos();
      complex1.add(473.0434059518);
      complex6.sin();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1946.509), 4359.288334607507);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.atan();
      complex2.readResolve();
      complex3.hashCode();
      Complex complex4 = complex3.multiply((-1946.509));
      Complex complex5 = new Complex((-1946.509), 4359.288334607507);
      complex5.getField();
      Complex complex6 = complex4.subtract(209.610134);
      complex4.tanh();
      complex4.subtract(complex2);
      complex6.pow(4359.288334607507);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(473.0434059518);
      complex0.toString();
      Complex complex2 = new Complex((-1.6014373376410622E-146), 7.575493726161108E-144);
      Complex complex3 = complex1.subtract(complex2);
      complex0.negate();
      Complex complex4 = complex2.cosh();
      complex3.abs();
      Complex complex5 = complex4.negate();
      complex5.sqrt();
      complex5.hashCode();
      Complex complex6 = complex5.cos();
      complex6.exp();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.subtract((-1.6014373376410622E-146));
      Complex complex9 = Complex.valueOf((-3138.604275083025));
      complex9.createComplex(473.0434059518, 473.0434059518);
      complex2.toString();
      Complex complex10 = Complex.valueOf(8.0, 2340.0);
      complex7.negate();
      complex3.log();
      Complex complex11 = Complex.valueOf(473.0434059518, 473.0434059518);
      complex11.tan();
      Complex complex12 = complex6.sin();
      complex8.cos();
      complex12.readResolve();
      complex10.log();
      complex1.pow(complex4);
      complex3.sqrt();
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex1.ONE.divide(0.0);
      complex0.sin();
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.ONE.pow(complex3);
      Complex complex6 = complex2.multiply(0.7853981633974483);
      Complex complex7 = complex5.pow(complex3);
      complex5.cosh();
      Complex complex8 = complex4.reciprocal();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.sqrt1z();
      complex8.hashCode();
      Complex complex11 = Complex.ONE;
      complex6.divide(complex10);
      complex9.toString();
      Complex complex12 = Complex.valueOf(0.0, 0.7853981633974483);
      Complex complex13 = complex12.subtract(complex3);
      complex13.NaN.abs();
      complex11.reciprocal();
      complex7.subtract(0.07250232994556427);
      complex9.add((-2424.872732));
      complex5.nthRoot(469);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(473.0434059518);
      complex0.INF.pow(complex1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.reciprocal();
      complex0.INF.sqrt1z();
      complex3.ONE.hashCode();
      complex2.ZERO.readResolve();
      Complex complex4 = Complex.ONE;
      complex3.toString();
      complex3.subtract(complex4);
      Complex complex5 = Complex.ONE;
      complex5.equals(complex2);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      complex0.NaN.hashCode();
      Complex.valueOf(Double.NaN);
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.cosh();
      complex1.reciprocal();
      Complex complex4 = complex2.sqrt1z();
      complex3.hashCode();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.ONE;
      complex6.divide(complex2);
      complex3.toString();
      complex4.subtract(complex1);
      Complex complex7 = complex3.reciprocal();
      complex7.subtract(Double.NaN);
      Complex complex8 = new Complex((-1.6014373376410622E-146));
      complex8.add(2.3100480183046895E179);
      try { 
        complex2.nthRoot((-1030));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,030
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.ONE.asin();
      complex0.NaN.pow(complex1);
      complex0.ONE.sqrt1z();
      complex3.ONE.tanh();
      Complex complex6 = complex4.add((-237.9));
      complex6.ZERO.divide(complex3);
      complex4.toString();
      Complex complex7 = complex0.NaN.tan();
      Complex complex8 = complex1.subtract(354.0);
      complex8.I.multiply(complex3);
      complex8.ZERO.atan();
      Complex complex9 = complex4.multiply(complex2);
      complex9.ZERO.divide(354.0);
      Complex complex10 = complex2.cos();
      Complex complex11 = complex0.createComplex(354.0, 0.0);
      complex11.ONE.multiply(0.0);
      complex2.acos();
      complex7.abs();
      complex5.subtract(complex10);
      complex6.reciprocal();
      complex2.subtract(6.283185307179586);
      Complex complex12 = complex8.add(6.283185307179586);
      complex12.nthRoot(1969);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(2622.60962599);
      Complex complex1 = Complex.valueOf(2621.3738030128, 2621.3738030128);
      complex0.divide(complex1);
      Complex complex2 = complex1.createComplex(2.414213562373095, 651.0);
      Complex complex3 = complex1.multiply(953.6263370642);
      Complex complex4 = complex3.acos();
      complex4.abs();
      Complex complex5 = complex2.sqrt();
      complex1.divide(complex2);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.cosh();
      complex7.cosh();
      complex2.pow(2814.471433);
      complex7.add(2621.3738030128);
      complex1.exp();
      complex6.add(complex5);
      complex0.isNaN();
      complex6.negate();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.atan();
      Complex complex1 = complex0.add(complex0);
      complex1.asin();
      complex0.acos();
      complex0.equals(complex1);
      complex1.multiply((-2145339949));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex((-1402.944), (-1402.944));
      complex0.NaN.getField();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.add(2403.7095822702);
      Complex complex5 = complex4.atan();
      complex1.NaN.toString();
      Complex complex6 = complex4.I.multiply((-531));
      complex6.NaN.multiply(complex4);
      Complex complex7 = Complex.valueOf((-1402.944));
      complex5.toString();
      complex1.getReal();
      complex3.isNaN();
      complex7.getField();
      Complex complex8 = complex2.subtract(0.0);
      complex8.ONE.multiply(4404);
      complex4.add(1977.0975646);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      complex0.getReal();
      Complex complex1 = Complex.NaN;
      complex0.add(complex1);
      complex0.I.log();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.I.pow(complex0);
      Complex complex5 = Complex.valueOf(710.78451, 2.0);
      complex5.ZERO.hashCode();
      complex0.isNaN();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex5.conjugate();
      complex7.multiply(2.0);
      Complex complex8 = complex1.cosh();
      complex3.tanh();
      complex1.getField();
      Complex complex9 = complex6.sqrt();
      complex9.NaN.readResolve();
      Complex complex10 = complex6.negate();
      complex4.cos();
      complex8.createComplex(0.0, (-20.0));
      complex8.getImaginary();
      complex10.pow(2.0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.getArgument();
      Complex complex1 = complex0.sinh();
      complex1.ONE.toString();
      Complex complex2 = complex0.I.acos();
      complex1.I.hashCode();
      complex0.equals(complex1);
      complex1.getImaginary();
      complex0.getReal();
      Complex complex3 = complex1.subtract(Double.NaN);
      complex2.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.createComplex(Double.POSITIVE_INFINITY, (-1319.448485));
      Complex.valueOf(0.0);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex5.NaN.pow((-1319.448485));
      complex1.hashCode();
      complex1.hashCode();
      complex3.hashCode();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex6.multiply(2145);
      complex4.multiply(17);
      complex0.tan();
      complex0.sin();
      complex6.getField();
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.INF;
      complex8.pow(complex9);
      Object object0 = complex8.readResolve();
      complex4.equals(object0);
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 886.827254296966);
      Complex complex1 = complex0.add(886.827254296966);
      Complex complex2 = complex1.ONE.cos();
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.ONE.createComplex(0.0, 0.0);
      Complex complex4 = complex3.subtract(0.0);
      complex4.ONE.toString();
      Complex complex5 = complex1.I.log();
      complex0.getImaginary();
      Complex complex6 = complex1.conjugate();
      complex6.ZERO.multiply(886.827254296966);
      complex3.hashCode();
      Complex complex7 = complex0.add(complex1);
      Complex complex8 = complex7.tanh();
      Complex complex9 = Complex.I;
      complex9.I.pow(complex8);
      Complex complex10 = complex4.pow(complex9);
      complex10.multiply(0.0);
      complex3.NaN.conjugate();
      complex9.sin();
      complex5.ZERO.pow(complex8);
      complex3.exp();
      complex5.getField();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      complex0.NaN.hashCode();
      Complex complex1 = new Complex(1.2781631468016048E205);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.I.multiply(1011);
      Complex complex4 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.ZERO.subtract(Double.NaN);
      Complex complex7 = complex2.add(complex5);
      Complex complex8 = complex0.multiply(2771.2058579695);
      Complex complex9 = complex1.log();
      complex4.ONE.add(291.0);
      complex6.INF.divide(complex1);
      Complex complex10 = complex3.sinh();
      Complex complex11 = complex10.ZERO.multiply(complex6);
      Complex complex12 = complex11.multiply(complex10);
      complex8.getArgument();
      complex8.nthRoot(1011);
      complex4.nthRoot(1011);
      Complex.valueOf(2771.2058579695, Double.NaN);
      Complex complex13 = complex4.exp();
      Complex complex14 = complex13.ZERO.cos();
      complex8.abs();
      complex14.isNaN();
      Complex complex15 = complex7.reciprocal();
      complex15.divide(Double.NaN);
      complex7.asin();
      complex15.conjugate();
      complex12.equals(complex9);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.I.divide(complex0);
      Complex complex4 = complex0.log();
      Complex complex5 = complex0.ONE.asin();
      complex0.NaN.pow(complex1);
      Complex complex6 = complex0.ONE.sqrt1z();
      Complex complex7 = complex3.ONE.tanh();
      Complex complex8 = complex4.add((-237.9));
      complex8.ZERO.divide(complex3);
      complex4.toString();
      Complex complex9 = complex0.NaN.tan();
      Complex complex10 = complex1.subtract(354.0);
      Complex complex11 = complex10.I.multiply(complex3);
      complex10.ZERO.atan();
      Complex complex12 = complex4.multiply(complex2);
      Complex complex13 = complex12.ZERO.divide(354.0);
      complex2.cos();
      Complex complex14 = complex0.createComplex(354.0, 0.0);
      complex14.ONE.multiply(0.0);
      complex2.acos();
      complex9.abs();
      complex9.sqrt();
      complex6.divide(complex1);
      Complex complex15 = complex3.cosh();
      Complex complex16 = complex10.cosh();
      complex15.pow(354.0);
      complex7.add(0.0);
      complex5.exp();
      complex16.add(complex4);
      complex11.isNaN();
      complex6.negate();
      complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(1036.15511984426);
      complex0.multiply(1036.15511984426);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.ONE.pow(1036.15511984426);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.ZERO.acos();
      complex4.INF.acos();
      complex6.NaN.conjugate();
      complex0.I.sin();
      Complex complex7 = complex5.ZERO.atan();
      complex7.NaN.divide(1036.15511984426);
      Complex complex8 = complex0.multiply(complex5);
      Complex complex9 = complex8.tan();
      complex9.hashCode();
      complex5.INF.multiply(complex9);
      complex3.INF.tan();
      complex1.INF.divide(1036.15511984426);
      complex2.NaN.pow(complex1);
      complex5.conjugate();
      int int0 = 5513;
      // Undeclared exception!
      complex2.nthRoot(5513);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(2808.45511838046, 760.179);
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex2.NaN.divide(complex0);
      Complex complex4 = complex3.INF.atan();
      complex4.ONE.getArgument();
      complex2.ONE.hashCode();
      Complex complex5 = complex0.multiply((-1));
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.I.divide(2808.45511838046);
      Complex complex8 = complex7.ZERO.subtract((-393.813505791));
      complex8.INF.atan();
      Complex complex9 = complex2.add(complex1);
      Complex complex10 = complex9.sinh();
      complex10.I.atan();
      complex9.ZERO.pow((-1366.780460957));
      Complex complex11 = complex0.exp();
      complex11.ZERO.sqrt1z();
      complex1.getArgument();
      Complex complex12 = complex11.subtract(complex0);
      complex12.I.cos();
      complex6.abs();
      complex9.sin();
      complex7.negate();
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      double double0 = (-1648.807830898);
      Complex complex0 = Complex.valueOf(216.9137, (-1648.807830898));
      complex0.getArgument();
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.exp();
      complex3.INF.getArgument();
      Complex complex4 = complex1.I.conjugate();
      Complex complex5 = complex2.INF.tan();
      complex0.INF.cos();
      complex4.sqrt1z();
      complex0.hashCode();
      Complex complex6 = complex3.divide(complex2);
      complex1.ZERO.divide(3207.42546695);
      Complex complex7 = complex2.createComplex(0.7853981633974483, 0.7853981633974483);
      complex7.I.hashCode();
      Complex complex8 = complex1.subtract(complex6);
      complex8.acos();
      complex6.isNaN();
      complex2.I.pow(complex6);
      complex4.exp();
      Complex complex9 = complex0.tanh();
      complex2.sqrt1z();
      complex9.tan();
      complex0.nthRoot(1);
      complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.tanh();
      complex2.I.multiply(complex0);
      Complex complex3 = complex0.pow(complex1);
      complex3.ONE.asin();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.conjugate();
      complex1.I.cos();
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.sqrt1z();
      Complex complex3 = complex0.createComplex(2173.46905295007, 0.0);
      Complex complex4 = complex3.cosh();
      complex4.ZERO.atan();
      Complex complex5 = complex4.I.pow(1020.3);
      complex1.divide(Double.NaN);
      complex3.sqrt1z();
      Complex.valueOf(0.0, 2173.46905295007);
      complex1.tan();
      complex3.asin();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(2622.60962599);
      Complex complex1 = Complex.valueOf(2621.3738030128, 2621.3738030128);
      Complex complex2 = complex0.divide(complex1);
      complex2.NaN.createComplex((-495.2639935), (-54.94745));
      Complex complex3 = complex0.multiply(37);
      complex3.NaN.sin();
      complex0.equals(complex3);
      complex0.tan();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.atan();
      Complex complex1 = complex0.createComplex((-1484.7726), 0.0);
      Complex complex2 = Complex.valueOf(0.0, (-1260.036691413057));
      Complex complex3 = Complex.valueOf(0.0, (-1260.036691413057));
      complex2.hashCode();
      Complex complex4 = complex0.NaN.sqrt();
      complex4.INF.sin();
      Complex complex5 = complex0.subtract((-3409.2));
      complex5.ZERO.atan();
      complex5.INF.add(complex3);
      Complex complex6 = complex2.multiply(complex1);
      complex6.isNaN();
      complex0.pow(6.283185307179586);
      complex0.createComplex((-3409.2), 4.5374504961394207E266);
      Complex complex7 = Complex.valueOf(6.283185307179586);
      complex6.pow(complex7);
      Complex complex8 = complex3.conjugate();
      complex8.abs();
      complex7.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-719.6283822678301));
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = complex0.I.atan();
      complex0.ZERO.readResolve();
      complex0.ZERO.hashCode();
      Complex complex4 = complex0.multiply((-719.6283822678301));
      complex4.NaN.getField();
      complex2.subtract((-719.6283822678301));
      complex1.tanh();
      complex3.subtract(complex0);
      complex2.pow((-719.6283822678301));
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1026.0227533223));
      Complex complex1 = complex0.ZERO.subtract(3422.55);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = Complex.valueOf(1782.21402046, 0.0);
      Complex complex4 = complex2.I.pow(3422.55);
      complex0.I.conjugate();
      complex1.isInfinite();
      complex3.NaN.divide(1782.21402046);
      complex2.isInfinite();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex5.I.add(complex2);
      Complex complex7 = Complex.I;
      complex4.equals(complex7);
      complex6.ONE.sqrt1z();
      Complex complex8 = complex4.pow(complex3);
      Complex complex9 = complex4.createComplex(245.40520741, 1782.21402046);
      complex6.isInfinite();
      complex8.getArgument();
      Complex complex10 = complex1.multiply(complex9);
      complex10.hashCode();
      complex9.conjugate();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.INF.sin();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.add(complex1);
      complex4.ZERO.multiply((-3370.71481138));
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = Complex.valueOf((-1459.572870073));
      complex6.ZERO.multiply(complex5);
      complex5.I.subtract(complex2);
      complex4.add(complex1);
      Complex complex7 = complex3.multiply(20.0);
      Complex complex8 = complex4.multiply(complex1);
      complex8.ZERO.conjugate();
      complex5.nthRoot(1012);
      complex7.getImaginary();
      Complex complex9 = complex0.cosh();
      Complex complex10 = complex9.sinh();
      Complex complex11 = complex10.INF.pow(Double.NaN);
      complex11.ONE.pow(1102.81248931);
      complex7.add(Double.NaN);
      complex5.add(5.650063324725722E-8);
      Complex complex12 = complex1.subtract(complex4);
      complex12.INF.hashCode();
      complex7.negate();
      complex2.multiply(1012);
      complex4.pow(4114.603579);
      Complex complex13 = complex1.sin();
      Complex complex14 = Complex.ZERO;
      complex13.divide(complex14);
      complex13.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.I.add(0.0);
      complex1.ONE.conjugate();
      Complex complex3 = complex1.NaN.atan();
      Complex complex4 = complex3.ONE.multiply((-1));
      Complex complex5 = complex0.ZERO.sin();
      complex5.I.createComplex((-1), (-2368.2296728283));
      complex5.ONE.multiply(complex4);
      complex5.I.exp();
      complex5.ONE.getField();
      complex5.NaN.nthRoot(1674);
      complex0.nthRoot(1133);
      complex0.NaN.multiply(complex1);
      complex0.multiply(1133);
      complex0.asin();
      Complex.valueOf((double) 1674, 3.059023470086686E-7);
      complex4.pow(0.0);
      complex2.getArgument();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.INF.atan();
      complex0.add(complex1);
      complex0.acos();
      complex1.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.multiply((-895));
      complex1.ZERO.createComplex((-895), 6.283185307179586);
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex2.ZERO.conjugate();
      complex2.I.hashCode();
      complex3.ONE.atan();
      Complex complex4 = complex0.ONE.log();
      complex2.I.pow(complex0);
      Complex complex5 = complex0.ZERO.add(complex4);
      Complex complex6 = complex4.multiply(783);
      Complex complex7 = Complex.INF;
      complex7.subtract(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex8.asin();
      complex9.acos();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex0.NaN.divide(complex7);
      Complex complex12 = complex11.divide(complex3);
      complex12.NaN.getArgument();
      complex6.I.conjugate();
      Complex complex13 = complex0.asin();
      complex5.getField();
      complex0.nthRoot(783);
      complex7.I.reciprocal();
      complex0.multiply(2133);
      complex4.tan();
      complex10.getArgument();
      Complex complex14 = complex2.multiply((-280.8254022502));
      complex13.cosh();
      complex5.tanh();
      complex14.cosh();
      complex7.multiply(1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex0.NaN.tanh();
      complex1.ONE.toString();
      complex1.getImaginary();
      complex0.toString();
      Complex complex2 = complex1.exp();
      complex2.I.tanh();
      Complex complex3 = complex1.exp();
      complex3.ZERO.multiply(705);
      complex3.getArgument();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3269017.5);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex0.pow(4781.466701790436);
      Complex complex3 = complex2.asin();
      complex3.ONE.tan();
      complex2.I.toString();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.exp();
      complex2.NaN.add(4781.466701790436);
      Complex complex6 = complex5.ZERO.multiply(9.981031744879876E-224);
      complex6.exp();
      Complex complex7 = complex2.subtract((-273.9791940122325));
      complex7.ZERO.divide(1639.5860366857);
      complex2.divide((-20.0));
      complex1.ONE.hashCode();
      Complex complex8 = complex1.tanh();
      complex8.readResolve();
      complex2.getImaginary();
      complex0.multiply(complex5);
      complex4.createComplex(9.993330547750349E-8, 1639.5860366857);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex1.I.pow(0.0);
      complex2.atan();
      Complex complex3 = complex0.I.subtract(0.0);
      complex1.I.abs();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.sqrt();
      complex1.INF.getArgument();
      Complex complex7 = complex4.ONE.multiply(complex1);
      Complex complex8 = complex7.I.atan();
      complex6.hashCode();
      complex5.abs();
      Complex complex9 = complex4.NaN.createComplex(1.0, 2.008254051208496);
      Complex complex10 = complex4.sqrt();
      complex10.INF.cosh();
      Complex complex11 = complex4.sqrt1z();
      Complex complex12 = complex9.ZERO.sin();
      complex11.INF.abs();
      complex9.INF.reciprocal();
      complex8.isNaN();
      Complex complex13 = Complex.valueOf(0.0);
      complex13.toString();
      Complex complex14 = Complex.valueOf(0.0, 1.0);
      complex14.asin();
      complex14.pow(complex9);
      complex12.isNaN();
      complex9.negate();
      complex3.exp();
      complex13.sqrt1z();
      complex5.pow(386.51764081);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ZERO.exp();
      complex0.I.getArgument();
      complex2.I.nthRoot(37);
      Complex complex3 = complex2.ZERO.multiply(308.05971);
      Complex complex4 = complex3.ONE.atan();
      complex4.INF.sinh();
      Complex complex5 = complex4.ONE.log();
      complex1.ZERO.getArgument();
      Complex complex6 = complex0.subtract(308.05971);
      complex2.abs();
      complex2.I.exp();
      complex0.divide(308.05971);
      complex4.NaN.atan();
      Complex complex7 = complex1.subtract(complex5);
      complex7.INF.hashCode();
      Complex complex8 = complex5.sqrt();
      complex8.ONE.multiply(complex6);
      complex5.getField();
      complex6.atan();
      complex1.sqrt();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      complex0.I.sinh();
      Complex complex2 = Complex.valueOf(2.0, 0.0);
      complex2.I.toString();
      complex0.INF.toString();
      Complex complex3 = complex0.ZERO.sqrt1z();
      complex3.NaN.conjugate();
      complex3.NaN.createComplex(2.0, 2.0);
      complex3.NaN.multiply(2966.653);
      complex3.divide(0.0);
      Complex complex4 = Complex.ZERO;
      complex4.ONE.cos();
      Complex complex5 = complex0.add(complex4);
      Complex complex6 = complex1.ZERO.tanh();
      Complex complex7 = complex5.NaN.exp();
      complex7.NaN.acos();
      complex1.sqrt1z();
      complex4.getReal();
      Complex complex8 = complex5.ONE.add(complex6);
      complex1.atan();
      complex5.subtract(0.0);
      complex8.divide(complex3);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.INF.add(complex2);
      complex5.sin();
      complex0.INF.add(complex2);
      Complex complex6 = complex4.NaN.divide(complex1);
      Complex complex7 = complex6.INF.atan();
      Complex complex8 = complex1.I.sinh();
      Complex complex9 = complex3.NaN.tanh();
      complex6.ZERO.toString();
      complex9.tanh();
      complex2.I.getField();
      complex1.I.log();
      complex9.ZERO.toString();
      complex2.ZERO.abs();
      Complex complex10 = complex8.ZERO.cos();
      complex0.getReal();
      Complex complex11 = complex1.tan();
      complex11.INF.multiply(1);
      Complex complex12 = complex2.sqrt1z();
      Complex complex13 = complex12.sqrt1z();
      complex8.pow(0.0);
      complex6.NaN.divide(0.0);
      Complex.valueOf(0.0, (double) 1);
      Complex complex14 = Complex.valueOf(0.0, 0.0);
      complex13.multiply(complex14);
      complex7.isInfinite();
      complex12.acos();
      complex10.getImaginary();
      complex10.negate();
      Complex complex15 = complex8.pow(0.0);
      complex15.divide((-404.412239));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.tanh();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.cosh();
      complex2.I.getArgument();
      complex3.hashCode();
      Complex complex4 = complex2.log();
      complex4.divide(1144.29);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ONE.multiply((-20.0));
      Complex complex3 = complex1.ONE.subtract(0.0);
      complex2.INF.sin();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex0.negate();
      complex5.I.sinh();
      Complex complex7 = Complex.valueOf((-20.0), 1.0);
      complex6.NaN.getField();
      complex6.I.nthRoot(3167);
      Complex complex8 = complex6.acos();
      complex8.acos();
      complex5.equals(complex2);
      Complex complex9 = complex0.exp();
      Complex complex10 = complex9.I.add(complex8);
      complex10.INF.multiply(complex7);
      Complex complex11 = complex10.INF.createComplex(0.0, 1.0);
      Complex complex12 = complex8.atan();
      complex12.createComplex(0.0, 0.0);
      complex3.I.sin();
      complex10.isNaN();
      complex6.I.atan();
      Complex complex13 = complex5.pow(complex12);
      Complex complex14 = complex13.ONE.createComplex(0.0, 1.0);
      complex14.getArgument();
      complex10.tan();
      complex5.multiply(complex11);
      complex0.log();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      Complex complex1 = complex0.multiply((-1.0));
      Complex complex2 = complex0.atan();
      complex1.abs();
      complex2.INF.conjugate();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex.valueOf((-1.0));
      Complex complex5 = complex1.sqrt();
      complex0.getField();
      Complex complex6 = complex4.I.exp();
      Complex complex7 = complex0.pow(8.0);
      complex6.cos();
      Complex complex8 = complex2.sin();
      complex7.ZERO.negate();
      complex8.ONE.hashCode();
      complex7.I.toString();
      complex1.tan();
      Complex complex9 = complex4.divide((-72.874629481));
      complex7.multiply(complex5);
      Complex complex10 = complex2.conjugate();
      Complex complex11 = complex0.reciprocal();
      complex3.readResolve();
      complex9.add((-1.0));
      Complex complex12 = Complex.valueOf(8.0, (-1629.018463824867));
      complex12.ZERO.conjugate();
      Complex complex13 = complex0.NaN.asin();
      complex13.ONE.conjugate();
      complex6.sqrt();
      complex10.sin();
      complex10.readResolve();
      complex5.tanh();
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(473.0434059518);
      Complex complex2 = complex1.multiply((-1.6014373376410622E-146));
      Complex complex3 = complex0.INF.pow(complex1);
      complex3.cosh();
      Complex complex4 = complex0.reciprocal();
      complex0.INF.sqrt1z();
      complex4.ONE.hashCode();
      Complex complex5 = Complex.ONE;
      complex4.ZERO.divide(complex5);
      complex4.toString();
      Complex complex6 = complex4.subtract(complex5);
      complex2.reciprocal();
      complex6.subtract(473.0434059518);
      complex2.add((-1.6014373376410622E-146));
      complex3.nthRoot(469);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0);
      complex0.ONE.log();
      Complex complex1 = complex0.tan();
      complex1.ONE.atan();
      complex1.I.sqrt1z();
      Complex complex2 = complex1.I.log();
      complex2.ZERO.readResolve();
      complex2.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex0.ZERO.reciprocal();
      int int0 = (-1);
      try { 
        complex3.ZERO.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.atan();
      complex1.toString();
      Complex complex2 = complex0.INF.createComplex((-1114.68879293342), (-1114.68879293342));
      complex2.ZERO.createComplex((-1114.68879293342), (-50.0));
      Complex complex3 = new Complex(0.0, 4359.471334);
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.ONE.divide((-1114.68879293342));
      Complex complex6 = complex5.I.asin();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.ONE.tanh();
      Complex complex8 = complex7.acos();
      complex8.ZERO.atan();
      complex6.getField();
      complex2.sqrt();
      complex7.multiply((-803));
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getArgument();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex1.ONE.divide(0.0);
      Complex complex4 = complex3.I.negate();
      Complex complex5 = complex4.ONE.pow(complex3);
      complex0.toString();
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex5.negate();
      Complex complex8 = complex6.ONE.cosh();
      Complex.valueOf((-1065.0));
      double double0 = complex7.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex9 = complex4.NaN.negate();
      Complex complex10 = complex9.NaN.sqrt();
      complex9.ONE.hashCode();
      Complex complex11 = complex7.NaN.cos();
      Complex complex12 = complex6.exp();
      Complex complex13 = complex5.subtract((-1065.0));
      Complex complex14 = complex1.createComplex(0.0, 0.7853981633974483);
      String string0 = complex12.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex15 = Complex.valueOf((-190.402246), 2604.77642082287);
      assertEquals(2604.77642082287, complex15.getImaginary(), 0.01);
      
      complex5.negate();
      Complex complex16 = complex0.log();
      assertTrue(complex16.isInfinite());
      
      Complex complex17 = complex0.I.tan();
      Complex complex18 = complex17.ZERO.sin();
      assertEquals(0.7615941559557649, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      
      Complex complex19 = complex4.cos();
      complex11.readResolve();
      Complex complex20 = complex8.log();
      assertEquals(0.4337808304830271, complex20.getReal(), 0.01);
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertTrue(complex8.equals((Object)complex19));
      
      Complex complex21 = complex11.pow(complex13);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertSame(complex13, complex2);
      assertSame(complex21, complex10);
      assertSame(complex7, complex11);
      assertSame(complex3, complex6);
      
      Complex complex22 = complex14.sqrt();
      complex22.isInfinite();
      assertTrue(complex1.equals((Object)complex18));
      assertEquals(0.6266570686577502, complex22.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      double double0 = (-1651.977);
      Complex complex0 = Complex.valueOf((-1651.977), 0.0);
      int int0 = (-1043);
      complex0.INF.conjugate();
      Complex complex1 = complex0.ONE.sin();
      complex1.I.abs();
      Complex complex2 = complex0.ZERO.multiply((-1043));
      Complex complex3 = complex2.ZERO.atan();
      complex3.NaN.atan();
      Complex complex4 = complex0.ZERO.cos();
      Complex complex5 = complex4.ONE.divide((double) (-1043));
      complex2.negate();
      try { 
        complex5.ZERO.nthRoot((-1043));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,043
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = new Complex((-1402.944), (-1402.944));
      complex0.NaN.getField();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.reciprocal();
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.atan();
      complex1.NaN.toString();
      Complex complex6 = complex4.I.multiply((-531));
      complex6.NaN.multiply(complex4);
      assertEquals((-531.0), complex6.getImaginary(), 0.01);
      
      Complex complex7 = Complex.valueOf((-1402.944));
      String string0 = complex5.toString();
      assertEquals("(-1.570439933352009, -3.5639338253073673E-4)", string0);
      
      complex1.getReal();
      complex3.isNaN();
      assertEquals(0.8414709848078965, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      complex7.getField();
      assertEquals((-1402.944), complex7.getReal(), 0.01);
      
      Complex complex8 = complex2.subtract(0.0);
      Complex complex9 = complex8.ONE.multiply(4404);
      assertEquals(4404.0, complex9.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals((-1.0), complex8.getImaginary(), 0.01);
      
      complex4.add(1977.0975646);
      assertFalse(complex0.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      
      complex0.isNaN();
      assertTrue(complex0.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex2.NaN.sinh();
      Complex complex4 = complex0.pow(3469.0209474);
      Complex complex5 = Complex.valueOf((-1093.950213551));
      Complex complex6 = complex3.divide(complex5);
      assertEquals((-1093.950213551), complex5.getReal(), 0.01);
      
      Complex complex7 = complex4.pow(complex0);
      complex7.NaN.divide(complex3);
      assertSame(complex7, complex2);
      assertFalse(complex4.isInfinite());
      
      Complex complex8 = complex1.exp();
      assertNotSame(complex8, complex4);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertSame(complex8, complex6);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.add(0.0);
      complex0.ONE.readResolve();
      Complex complex2 = complex0.ONE.cos();
      Complex complex3 = complex2.I.multiply(0.0);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex2.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.tanh();
      complex4.INF.getField();
      complex4.readResolve();
      complex0.hashCode();
      Complex complex5 = Complex.NaN;
      complex5.ZERO.createComplex(0.0, 20.0);
      complex1.equals(complex5);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex4.add(0.0);
      Complex complex8 = (Complex)complex7.INF.readResolve();
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.equals((Object)complex3));
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex9 = complex6.tanh();
      assertSame(complex9, complex6);
  }
}
