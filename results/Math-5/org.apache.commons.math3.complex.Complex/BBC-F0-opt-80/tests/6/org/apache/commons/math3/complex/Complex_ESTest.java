/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:57:30 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2.6334323946685834E-8);
      Complex complex2 = complex1.I.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.multiply(complex2);
      complex3.abs();
      complex3.ZERO.exp();
      Complex complex4 = complex2.ZERO.subtract(complex0);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex5.NaN.subtract(complex0);
      complex6.pow(4516.7677685848075);
      Complex complex7 = complex1.ZERO.log();
      complex1.ZERO.toString();
      Complex complex8 = complex0.pow(complex1);
      Complex complex9 = complex0.divide(Double.POSITIVE_INFINITY);
      complex9.toString();
      Complex complex10 = complex4.add((-2272.0));
      Complex complex11 = complex1.sinh();
      complex11.INF.pow(complex5);
      Complex complex12 = complex5.divide(complex7);
      complex12.I.nthRoot(7);
      Complex complex13 = complex10.ONE.cosh();
      complex8.tan();
      Complex complex14 = complex10.sqrt();
      complex14.INF.exp();
      complex11.divide(complex8);
      complex12.multiply((-2272.0));
      Complex complex15 = complex13.cosh();
      complex15.I.getArgument();
      complex3.tanh();
      complex15.acos();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(1.0959761837974E219, (-3661.755661619414));
      complex0.ONE.readResolve();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.negate();
      complex2.ONE.acos();
      complex1.toString();
      Complex complex3 = complex1.ONE.sqrt();
      complex0.negate();
      Complex complex4 = complex2.NaN.createComplex(0.0, (-3661.755661619414));
      complex4.ONE.tan();
      complex1.readResolve();
      complex3.abs();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(20);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.divide(complex1);
      complex1.conjugate();
      complex3.nthRoot(573);
      complex2.tan();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex(5.21281096513035E-303, 20);
      complex5.tan();
      Complex complex6 = Complex.INF;
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.I.divide((-20.0));
      complex0.nthRoot(1459);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3831497249319151, (-0.10396380378611168));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(complex0);
      complex2.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1864.116), Double.POSITIVE_INFINITY);
      complex0.ZERO.getField();
      complex0.tan();
      Complex complex1 = new Complex(3441.04243, (-1864.116));
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1864.116), Double.POSITIVE_INFINITY);
      complex0.ZERO.getField();
      complex0.ONE.atan();
      Complex complex1 = complex0.tan();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1864.116), Double.POSITIVE_INFINITY);
      complex0.ZERO.getField();
      Complex complex1 = complex0.ONE.atan();
      complex0.multiply(496);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(6.951847E-4);
      complex0.ZERO.sqrt();
      Complex complex1 = new Complex(2.4195538966027372E16);
      complex1.acos();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(546);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.atan();
      complex1.INF.exp();
      Complex complex2 = Complex.valueOf(379.691358697213, 379.691358697213);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex5.NaN.sqrt();
      complex0.acos();
      Complex complex7 = complex5.acos();
      complex7.NaN.tanh();
      complex6.INF.tanh();
      Complex complex8 = Complex.valueOf((-20.0), (-20.0));
      Complex complex9 = complex4.ZERO.cos();
      complex9.sqrt1z();
      complex6.tanh();
      complex8.nthRoot(1303);
      complex2.multiply(complex3);
      Complex.valueOf((-20.0));
      Complex complex10 = complex4.exp();
      complex10.INF.tanh();
      complex10.ONE.negate();
      Complex complex11 = complex6.subtract((-20.0));
      complex11.ZERO.pow(0.0);
      complex11.NaN.log();
      Complex complex12 = complex10.add(complex4);
      complex3.createComplex(379.691358697213, 1303);
      complex7.sqrt();
      complex12.log();
      complex11.abs();
      complex8.tanh();
      Complex.valueOf((-4.470348358154297E-8));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.I.asin();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex0.NaN.add(complex2);
      complex4.NaN.add(441.9522242);
      complex4.multiply(complex1);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex3.cos();
      complex1.ONE.divide(complex6);
      Complex complex7 = complex5.divide(complex2);
      Complex complex8 = complex7.I.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex7.negate();
      Complex complex10 = complex5.subtract(complex9);
      complex3.acos();
      Complex complex11 = complex8.NaN.multiply((-829));
      complex11.NaN.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2130.94501));
      complex10.multiply(Double.POSITIVE_INFINITY);
      complex2.readResolve();
      complex8.atan();
      complex0.subtract((-2130.94501));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5640164970353916);
      complex0.getField();
      Complex complex1 = complex0.multiply(Double.NaN);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex0.divide(Double.NaN);
      complex3.multiply(6536.40838137);
      complex2.multiply((-1151.147535109));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      complex1.NaN.nthRoot(1027);
      complex1.atan();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(17);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tan();
      complex2.divide((-1371375.3390375199));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex2.sin();
      complex4.ZERO.getField();
      complex0.getField();
      Complex complex5 = complex1.tanh();
      complex0.INF.readResolve();
      complex1.I.getField();
      complex5.NaN.multiply(1);
      Complex complex6 = complex5.I.multiply(1081.9268);
      complex5.acos();
      Complex complex7 = complex5.sin();
      complex6.acos();
      Complex complex8 = Complex.INF;
      complex6.pow(complex8);
      complex6.cosh();
      complex1.ONE.sqrt1z();
      Complex.valueOf((-1995.1894), 4.995552216100365E-193);
      complex3.I.getField();
      Complex complex9 = complex3.multiply(2673);
      complex9.NaN.add((-1014.01));
      complex7.cosh();
      complex9.equals(complex0);
      complex5.conjugate();
      complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.ONE;
      complex1.readResolve();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.INF;
      complex3.divide(Double.POSITIVE_INFINITY);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex1.I.toString();
      Complex complex2 = Complex.ONE;
      complex2.readResolve();
      Complex complex3 = Complex.I;
      complex3.divide(Double.POSITIVE_INFINITY);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.cos();
      complex1.multiply(734);
      Complex complex2 = Complex.valueOf(2.0, (-3521.975));
      complex0.INF.createComplex(20.0, 1724.6913273370526);
      Complex complex3 = Complex.valueOf(1724.6913273370526, Double.POSITIVE_INFINITY);
      complex3.ONE.sinh();
      Complex complex4 = complex0.subtract(complex2);
      complex2.I.cosh();
      Complex complex5 = complex0.tanh();
      complex5.subtract(1199.23021);
      complex2.subtract(2.0);
      // Undeclared exception!
      complex4.nthRoot(1073741558);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.createComplex((-617.87338162), (-617.87338162));
      complex0.getField();
      Complex complex3 = complex2.multiply(6536.40838137);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.sinh();
      complex1.getField();
      complex1.toString();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.pow((-617.87338162));
      Complex complex8 = Complex.valueOf(4268.4406);
      complex8.nthRoot(57);
      Complex complex9 = complex6.pow((-4255.1364));
      complex5.pow(complex4);
      complex8.sin();
      Complex complex10 = Complex.I;
      complex10.sinh();
      complex7.multiply((-617.87338162));
      complex6.conjugate();
      complex2.getField();
      complex9.abs();
      Complex.valueOf(3071.882097979, (-1894.801));
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.createComplex((-617.87338162), 1.0000012230345698);
      complex0.getField();
      Complex complex3 = complex2.multiply(6536.40838137);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.sinh();
      complex1.toString();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.multiply((-297));
      Complex complex8 = new Complex((-617.87338162));
      complex4.I.pow(complex8);
      Complex complex9 = complex7.I.createComplex(183.8903753241, 6536.40838137);
      complex9.ZERO.multiply((-297));
      complex0.divide(6536.40838137);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-519.1568711), Double.NaN);
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.INF.subtract((-5181.8287022657));
      Complex complex3 = complex1.I.asin();
      Complex complex4 = complex3.add((-5181.8287022657));
      Complex complex5 = complex0.reciprocal();
      complex0.I.tanh();
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex5.pow((-519.1568711));
      complex7.ZERO.getField();
      Complex complex8 = complex5.I.reciprocal();
      complex8.ONE.createComplex(5.2796893400989136E10, 293.2273330241198);
      Complex complex9 = complex7.multiply(3912);
      complex1.INF.add(complex2);
      complex3.I.getArgument();
      Complex complex10 = complex0.sqrt();
      complex1.readResolve();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.ZERO.cos();
      complex12.ZERO.pow(complex10);
      complex1.multiply(complex11);
      Complex complex13 = complex3.createComplex((-519.1568711), Double.NaN);
      Complex complex14 = complex6.add(complex1);
      complex4.getField();
      complex8.cosh();
      complex13.multiply(Double.NaN);
      Complex complex15 = complex13.asin();
      complex14.log();
      complex9.cos();
      complex15.log();
      complex15.multiply((-2270));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-3297.518766));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.subtract((-3297.518766));
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex2.reciprocal();
      complex4.abs();
      complex2.I.sqrt();
      Complex.valueOf(0.0, 929.571);
      Complex complex5 = complex1.conjugate();
      Complex complex6 = complex5.ZERO.pow(0.0);
      complex6.I.readResolve();
      Complex complex7 = Complex.valueOf(0.0, 2.0099832909181714E-10);
      complex7.NaN.sqrt1z();
      Complex complex8 = complex5.add(Double.NaN);
      Complex complex9 = complex0.cosh();
      complex9.cosh();
      Complex.valueOf(Double.NaN, (-3297.518766));
      complex4.pow(Double.NaN);
      Complex.valueOf(3272.8200474);
      Complex.valueOf(5.2796893400989136E10, 1.0000012230345698);
      complex3.createComplex(2.0, 1230.39471823965);
      complex8.add(2.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.tanh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.log();
      complex4.negate();
      complex3.atan();
      Complex complex5 = Complex.ONE;
      complex2.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.7264401117998796E-219, 0.0);
      Complex complex1 = complex0.NaN.createComplex(0.0, 838.666077);
      complex1.ZERO.getField();
      complex0.INF.nthRoot(37);
      complex0.ONE.tan();
      complex1.NaN.multiply(1.3115046679980076E-8);
      complex1.NaN.asin();
      Complex complex2 = complex0.sinh();
      complex2.ZERO.toString();
      complex2.cosh();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex2.tan();
      complex3.pow(complex0);
      complex4.subtract(1.1808855501885005E-103);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.createComplex((-617.87338162), 1410.9);
      complex0.getField();
      Complex complex3 = complex2.multiply(6536.40838137);
      complex3.asin();
      complex3.subtract((-1751.190344));
      complex1.pow((-617.87338162));
      complex1.divide((-1723.7182));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-1724.6913273370526), Double.POSITIVE_INFINITY);
      complex0.atan();
      Complex complex1 = complex0.multiply((-904.23358513));
      complex1.reciprocal();
      complex1.divide(complex0);
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.ONE;
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.NaN.getArgument();
      complex0.ONE.toString();
      complex0.ONE.tanh();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-207.1865), (-207.1865));
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = Complex.valueOf((-207.1865));
      complex3.ZERO.log();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex.valueOf((double) 468);
      Complex complex5 = complex4.NaN.atan();
      complex5.NaN.add((-207.1865));
      Complex complex6 = complex0.acos();
      complex6.I.divide(1.0);
      complex0.ONE.atan();
      Complex complex7 = Complex.valueOf((double) 468, (-207.1865));
      complex7.I.acos();
      Complex complex8 = complex0.multiply(468);
      complex8.exp();
      complex0.cos();
      complex0.getField();
      complex1.pow(1843.80934);
      complex8.toString();
      complex2.multiply((-4.6566128730773926E-8));
      complex7.createComplex(0.8414709848078965, 749.2613086507);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.createComplex((-659.3832435761026), 1410.9);
      Complex complex3 = complex0.multiply((-659.3832435761026));
      Complex complex4 = complex3.asin();
      complex1.hashCode();
      complex2.cosh();
      complex2.multiply(2630);
      complex3.reciprocal();
      complex4.tan();
      complex0.sin();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.subtract(complex1);
      Object object0 = complex0.readResolve();
      complex3.cosh();
      complex2.I.pow(complex1);
      complex0.equals(object0);
      Complex complex4 = complex1.pow((-0.9999993268725286));
      Complex complex5 = complex4.INF.add(complex0);
      Complex complex6 = complex0.divide(complex1);
      complex6.INF.asin();
      Complex.valueOf(2435.0);
      complex3.toString();
      complex0.sqrt();
      Complex complex7 = complex5.multiply(2435.0);
      complex2.negate();
      complex7.readResolve();
      complex7.negate();
      Complex complex8 = Complex.ZERO;
      complex8.getArgument();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1723.7182), 3.7264401117998796E-219);
      complex0.atan();
      Complex complex1 = complex0.multiply((-904.23358513));
      complex1.reciprocal();
      Complex complex2 = new Complex(20.0);
      Complex complex3 = complex0.sinh();
      complex0.toString();
      Complex complex4 = Complex.I;
      complex4.cosh();
      complex1.reciprocal();
      complex3.tan();
      Complex complex5 = Complex.INF;
      complex4.divide((-172.6578223351707));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex0.INF.subtract(complex1);
      Object object0 = complex0.readResolve();
      complex3.cosh();
      complex2.I.pow(complex1);
      complex0.equals(object0);
      Complex complex4 = complex1.pow((-0.9999993268725286));
      Complex complex5 = complex4.INF.add(complex0);
      Complex complex6 = complex0.divide(complex1);
      complex6.INF.asin();
      Complex.valueOf(2435.0);
      complex3.toString();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex5.multiply(2435.0);
      complex2.negate();
      complex8.readResolve();
      complex4.nthRoot(421);
      Complex complex9 = complex2.sin();
      complex9.multiply(complex7);
      complex6.abs();
      complex7.multiply(421);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-1724.6913273370526));
      Complex complex1 = complex0.multiply((-2.429370768787733E12));
      complex1.createComplex((-1724.6913273370526), 6.602496401651853E-9);
      Complex complex2 = complex0.multiply(4.296027044486766E-61);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex3.multiply(complex2);
      Complex complex5 = complex2.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf((-2.429370768787733E12), (-314.0));
      Complex.valueOf(1794.47826, 4.296027044486766E-61);
      complex5.multiply(complex4);
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cos();
      Complex complex1 = new Complex((-1.7514953095665195E85));
      complex1.getField();
      Complex complex2 = complex1.multiply(2325.79467264);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex3.sinh();
      complex0.toString();
      complex4.cosh();
      complex2.NaN.pow(complex0);
      Complex complex5 = Complex.valueOf(6536.40838137, (double) (-297));
      complex5.multiply((-297));
      complex3.reciprocal();
      complex1.tan();
      Complex complex6 = complex4.sin();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.multiply(322.5317934737);
      complex2.ZERO.multiply(322.5317934737);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.INF.multiply(complex2);
      complex4.NaN.pow((-3897.0));
      Complex complex5 = Complex.valueOf(322.5317934737, 322.5317934737);
      Complex.valueOf(3.4165862935961285E-21, (-53.596518));
      complex5.reciprocal();
      complex1.tan();
      Complex complex6 = Complex.valueOf((-1.9987622893254038E-7), 1723.7182);
      complex6.sin();
      Complex complex7 = Complex.INF;
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-1724.6913273370526), 3.7264401117998796E-219);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply((-904.23358513));
      Complex complex3 = complex2.reciprocal();
      complex1.sin();
      complex3.multiply(453);
      complex2.getImaginary();
      complex1.tanh();
      complex0.conjugate();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex5.INF.negate();
      Complex complex7 = complex0.ZERO.add(complex3);
      Complex complex8 = complex7.I.add(complex4);
      Complex.valueOf(9.956860681280245E-10, 9.956860681280245E-10);
      Complex.valueOf(9.956860681280245E-10, 9.956860681280245E-10);
      complex2.multiply(complex8);
      Complex complex9 = new Complex((-53.596518), 3.4165862935961285E-21);
      complex9.toString();
      complex1.tan();
      complex6.divide(1558643.8877398304);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.nthRoot(37);
      Complex complex1 = Complex.INF;
      complex1.tan();
      Complex complex2 = complex0.multiply((-20.0));
      complex0.asin();
      Complex complex3 = complex0.sinh();
      complex2.toString();
      complex3.cosh();
      Complex complex4 = Complex.valueOf(3.2558720916543104E-263, 1260.276355881);
      complex4.tan();
      complex4.divide(6.283185307179586);
      complex3.asin();
      complex2.readResolve();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.5275416241972725, 410.0);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.I;
      complex0.divide(complex2);
      complex3.getField();
      complex1.exp();
      complex1.tanh();
      Complex complex4 = Complex.ONE;
      Complex.valueOf((-0.999999831718118), 1477.00155458638);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-0.9992531808902823), (-0.9992531808902823));
      complex1.getField();
      Complex complex2 = complex0.multiply(225.0);
      complex2.asin();
      Complex complex3 = complex1.sinh();
      complex3.toString();
      Complex complex4 = complex3.reciprocal();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.4880743149), (-1503.05369336));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = Complex.valueOf(777.1703, 777.1703);
      complex2.ZERO.multiply((-194.4880743149));
      complex2.ONE.getField();
      complex0.add((-1503.05369336));
      complex0.tan();
      complex1.sqrt();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex((-1723.7182), 3.7264401117998796E-219);
      Complex complex1 = complex0.atan();
      complex0.exp();
      complex1.subtract(2428.381380413341);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-1146.4261303427), Double.NaN);
      Complex complex2 = complex0.subtract(complex1);
      try { 
        complex2.nthRoot((-3253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,253
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-1723.7182), 0.0);
      Complex complex1 = complex0.cos();
      complex1.cos();
      Complex complex2 = Complex.valueOf((-5.309047216809048E-47), 22.391787608852248);
      complex1.tanh();
      complex1.getArgument();
      Object object0 = new Object();
      complex2.equals(object0);
      Complex complex3 = Complex.INF;
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.ZERO.createComplex((-149.01), 1.653701058949654E-58);
      complex3.multiply(Double.NaN);
      Complex complex4 = complex2.reciprocal();
      complex2.sin();
      Complex complex5 = new Complex(3117287.77547934, 1.653701058949654E-58);
      complex5.multiply(453);
      Complex complex6 = Complex.ZERO;
      complex6.getImaginary();
      complex4.tanh();
      complex3.atan();
      Complex complex7 = Complex.ZERO;
      complex7.conjugate();
      Complex complex8 = new Complex((-1657.767465066), (-2822.8193493809));
      Complex complex9 = complex1.add(complex8);
      Complex complex10 = complex0.acos();
      complex10.INF.acos();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.reciprocal();
      Complex complex1 = complex0.multiply((-333.20318286));
      Complex complex2 = complex1.asin();
      complex2.getField();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-770.605201759623));
      Complex complex1 = complex0.I.tanh();
      complex1.NaN.createComplex(662.773, 0.26820653676986694);
      Complex complex2 = complex0.divide(0.26820653676986694);
      complex2.NaN.divide(2077.07426);
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex3.multiply(complex2);
      complex5.NaN.exp();
      Complex complex6 = complex0.cosh();
      complex4.negate();
      complex5.toString();
      complex5.acos();
      Complex.valueOf(2077.07426);
      complex6.divide(2797.459135143381);
      Complex complex7 = complex5.conjugate();
      Complex complex8 = Complex.ZERO;
      complex7.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-1723.7182), 3.7264401117998796E-219);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.INF;
      complex4.tanh();
      complex2.reciprocal();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.ZERO;
      complex6.asin();
      complex3.pow(70.79883406);
      Complex complex7 = Complex.I;
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.nthRoot(37);
      Complex complex1 = new Complex(0.0);
      complex0.I.add(complex1);
      Complex complex2 = Complex.INF;
      complex2.tan();
      Complex complex3 = complex0.multiply((double) 37);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.sinh();
      complex3.toString();
      Complex complex6 = complex5.cosh();
      complex4.reciprocal();
      complex6.tan();
      complex6.acos();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-1723.7182), 3.7264401117998796E-219);
      Complex complex1 = complex0.atan();
      complex1.multiply(1);
      complex0.multiply(1);
      Complex complex2 = Complex.valueOf((-904.23358513), (double) 1);
      complex2.sin();
      Complex complex3 = complex2.pow(complex1);
      complex2.divide(complex3);
      Complex complex4 = complex3.divide((-577.547537));
      complex0.readResolve();
      complex4.getImaginary();
      complex4.getArgument();
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex(1401.55711, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.exp();
      Complex complex3 = complex1.tanh();
      complex3.reciprocal();
      Complex complex4 = Complex.valueOf(372.6572035922, Double.POSITIVE_INFINITY);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex((-1723.7182), 3.7264401117998796E-219);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply((-904.23358513));
      Complex complex3 = complex2.reciprocal();
      complex1.sin();
      complex3.multiply(453);
      complex2.getImaginary();
      complex1.tanh();
      Complex complex4 = complex2.atan();
      complex0.conjugate();
      complex2.add(complex4);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.I.log();
      Complex complex2 = complex1.ZERO.createComplex((-149.01), 1.653701058949654E-58);
      complex1.getImaginary();
      complex1.nthRoot(2222);
      Complex complex3 = complex2.subtract(complex0);
      complex3.INF.abs();
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex3.NaN.sqrt1z();
      complex4.NaN.readResolve();
      complex7.ZERO.readResolve();
      complex6.I.toString();
      Complex complex8 = complex5.I.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.subtract(complex0);
      Complex complex9 = new Complex(2.0, Double.POSITIVE_INFINITY);
      complex9.pow(493.69107193);
      complex0.sin();
      complex5.conjugate();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.createComplex(20.0, (-1.0000000000000004));
      complex2.hashCode();
      Complex complex3 = complex1.pow(1.0000000000000004);
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.tanh();
      complex1.nthRoot(1739);
      Complex complex6 = complex2.tanh();
      complex3.isInfinite();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.multiply(complex4);
      complex8.cos();
      complex5.toString();
      complex6.getReal();
      Complex complex9 = Complex.ZERO;
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-0.9992531808902823), (-0.9992531808902823));
      complex1.getField();
      Complex complex2 = complex0.multiply(225.0);
      complex2.asin();
      Complex complex3 = complex1.sinh();
      complex3.toString();
      Complex complex4 = complex3.cosh();
      complex1.reciprocal();
      complex1.tan();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.createComplex((-1313.13905), (-1313.13905));
      complex0.hashCode();
      Complex complex3 = complex2.ZERO.pow((-1313.13905));
      complex3.INF.tanh();
      Complex complex4 = Complex.ONE;
      complex4.getImaginary();
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.atan();
      complex5.INF.multiply(748);
      complex3.conjugate();
      complex6.add(complex0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex((-1339.0119619682912), (-1339.0119619682912));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.multiply((-1339.0119619682912));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.sin();
      complex4.nthRoot(748);
      complex2.tanh();
      complex4.isInfinite();
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = complex2.cos();
      complex3.ONE.divide(complex6);
      complex5.toString();
      complex0.getReal();
      complex5.tanh();
      complex4.getImaginary();
      complex1.atan();
      Complex.valueOf((double) 0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex((-1339.0119619682912), (-1339.0119619682912));
      complex0.atan();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sin();
      complex1.ZERO.multiply(0);
      complex0.getImaginary();
      Complex complex3 = complex2.tanh();
      complex3.ONE.atan();
      complex0.cos();
      complex1.toString();
      Complex complex4 = Complex.valueOf((double) 0, (-1339.0119619682912));
      complex4.getReal();
      Complex complex5 = complex2.tanh();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex0.NaN.cos();
      complex1.cos();
      complex2.equals(complex1);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.ZERO.createComplex((-149.01), 1.653701058949654E-58);
      complex1.getImaginary();
      complex1.nthRoot(2222);
      Complex complex4 = complex3.subtract(complex0);
      complex4.INF.abs();
      Complex complex5 = complex4.I.add(complex3);
      Complex complex6 = complex3.asin();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex4.NaN.sqrt1z();
      complex5.NaN.readResolve();
      complex8.ZERO.readResolve();
      complex7.I.toString();
      complex6.I.tanh();
      Complex complex9 = complex1.cos();
      complex9.tan();
      complex3.sqrt();
      Complex complex10 = complex5.log();
      complex10.hashCode();
      complex1.sqrt();
      complex6.tan();
      complex3.tan();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1576.572612505137);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex2.add(complex0);
      complex2.atan();
      complex1.sqrt();
      Complex complex3 = complex1.atan();
      Complex complex4 = new Complex(4.111645931319645E-8);
      complex4.tan();
      Complex complex5 = complex1.sqrt();
      complex3.log();
      complex4.hashCode();
      complex2.sqrt();
      complex5.tan();
      complex2.tan();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex0.NaN.cos();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.ONE.multiply(0.0);
      Complex complex4 = Complex.valueOf(0.45437926054000854, (-110.65834));
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = complex1.ZERO.exp();
      complex5.ZERO.toString();
      Complex complex7 = complex6.ZERO.conjugate();
      Complex complex8 = complex1.NaN.log();
      Complex complex9 = complex8.INF.cos();
      complex9.NaN.multiply((-1144.17571002048));
      Complex complex10 = complex7.NaN.asin();
      complex10.ZERO.asin();
      Complex complex11 = complex8.ZERO.sin();
      complex11.NaN.readResolve();
      complex11.tanh();
      Complex complex12 = complex1.atan();
      complex12.equals(complex2);
      Complex complex13 = complex8.negate();
      Complex complex14 = complex13.ONE.multiply(complex2);
      complex7.equals(complex5);
      complex12.hashCode();
      complex5.asin();
      complex9.abs();
      complex14.sin();
      complex3.subtract(0.45437926054000854);
      complex0.multiply((-1144.17571002048));
      complex6.abs();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      complex1.ZERO.divide(0.0);
      complex1.ONE.tanh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex.valueOf(1729.4924202683);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.pow(complex3);
      Complex complex5 = Complex.valueOf(2228.3572859567134, 2564.87);
      Complex complex6 = complex0.I.add(complex2);
      complex6.INF.negate();
      Complex complex7 = complex2.ONE.acos();
      complex7.I.acos();
      Complex complex8 = complex3.multiply(3447.342);
      Complex complex9 = complex8.ZERO.divide(0.0);
      complex5.isInfinite();
      complex4.cos();
      Complex complex10 = complex9.INF.exp();
      complex10.INF.multiply(0.0);
      complex0.sqrt();
      complex2.nthRoot(161);
      try { 
        complex9.nthRoot((-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -41
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.log();
      complex2.ONE.sqrt1z();
      Complex complex3 = complex0.ZERO.add(complex1);
      complex3.I.add(complex2);
      Complex complex4 = complex3.I.atan();
      complex4.sqrt();
      complex3.ZERO.atan();
      complex3.tan();
      Complex complex5 = complex0.ONE.sqrt();
      Complex complex6 = complex5.NaN.log();
      complex0.hashCode();
      Complex complex7 = complex0.sqrt();
      complex7.tan();
      complex5.tan();
      complex6.getArgument();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.I.log();
      Complex complex2 = complex1.ZERO.createComplex((-149.01), 1.653701058949654E-58);
      complex1.getImaginary();
      complex1.nthRoot(2222);
      Complex complex3 = complex2.subtract(complex0);
      complex3.INF.abs();
      Complex complex4 = complex3.I.add(complex2);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex3.NaN.sqrt1z();
      complex4.NaN.readResolve();
      complex7.ZERO.readResolve();
      complex6.I.toString();
      complex5.I.tanh();
      complex1.cos();
      complex2.NaN.pow(0.0);
      complex4.getImaginary();
      complex7.NaN.subtract(complex5);
      complex5.NaN.reciprocal();
      complex2.getReal();
      complex5.subtract((double) 2222);
      complex2.reciprocal();
      complex6.hashCode();
      complex1.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex7.divide(complex2);
      complex4.negate();
      complex3.nthRoot(1507);
      complex4.acos();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.readResolve();
      Complex complex1 = complex0.pow(3.205923535388443E-235);
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = Complex.valueOf(3.205923535388443E-235);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.ZERO.log();
      complex5.ZERO.getArgument();
      Complex complex6 = Complex.valueOf(3.205923535388443E-235, (-1601.090720134115));
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex6.I.pow(complex7);
      complex8.I.hashCode();
      Complex complex9 = complex6.NaN.add(1026.1472);
      Complex complex10 = complex4.conjugate();
      complex9.I.divide(complex8);
      complex10.ONE.sqrt();
      complex0.isNaN();
      complex6.log();
      complex4.I.asin();
      Complex complex11 = complex5.NaN.add(1.0);
      Complex complex12 = complex3.multiply(3377.29352014251);
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      complex4.subtract(complex10);
      complex3.hashCode();
      Complex.valueOf(3377.29352014251, 1.0);
      complex11.getImaginary();
      complex12.pow(complex1);
      complex10.sqrt();
      complex9.log();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.divide(0.0);
      Complex complex2 = complex0.I.multiply(0.0);
      Complex complex3 = complex2.NaN.multiply(complex1);
      Object object0 = new Object();
      complex0.equals(object0);
      complex1.NaN.sin();
      complex1.isInfinite();
      Complex complex4 = complex1.asin();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      Complex complex6 = complex4.exp();
      complex6.ONE.cosh();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.I.add(complex0);
      Complex complex9 = complex5.cos();
      complex3.subtract(complex4);
      Complex.valueOf(2634.72779557146);
      complex9.hashCode();
      complex3.I.readResolve();
      complex4.isInfinite();
      complex5.nthRoot(2838);
      complex8.divide(1860.136);
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1319.8287488156113), (-1319.8287488156113));
      Complex complex1 = complex0.multiply((-105));
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex3.INF.sqrt1z();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex1.divide(complex5);
      complex7.ONE.pow(complex4);
      complex7.ONE.multiply(complex6);
      complex3.multiply(120.48251299);
      complex2.divide(complex3);
      complex1.isInfinite();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.ONE.add(complex1);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex2.ZERO.multiply(complex0);
      complex0.INF.toString();
      complex0.nthRoot(1);
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ONE.multiply(1644.87569);
      complex0.hashCode();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex((-1339.0119619682912), (-1339.0119619682912));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.multiply((-1339.0119619682912));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.sin();
      complex3.ZERO.multiply(0);
      complex2.getImaginary();
      Complex complex5 = complex4.tanh();
      complex5.ONE.atan();
      complex4.conjugate();
      complex3.add(complex1);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.INF.divide(0.0);
      Complex complex4 = complex0.I.divide(complex1);
      complex4.log();
      complex2.getArgument();
      complex3.ZERO.abs();
      complex4.ZERO.atan();
      complex0.getReal();
      Complex complex5 = complex3.ZERO.sin();
      complex5.INF.abs();
      complex1.toString();
      complex3.pow(complex2);
      Complex.valueOf(0.0);
      complex1.isInfinite();
      complex4.pow(0.0);
      complex3.getArgument();
      complex4.tan();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.multiply(complex1);
      complex3.INF.tan();
      Complex.valueOf(710.73063382);
      Complex complex4 = complex0.subtract(74.962618);
      Complex complex5 = complex0.NaN.cos();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.multiply(1);
      Complex complex8 = complex6.INF.atan();
      complex8.I.conjugate();
      Complex complex9 = complex7.ZERO.multiply(2276);
      complex4.getReal();
      Complex complex10 = complex9.INF.sinh();
      complex7.divide(complex4);
      complex6.multiply(1);
      complex5.divide(complex1);
      Complex complex11 = complex5.subtract(complex9);
      complex11.subtract((-73.962618));
      complex4.exp();
      complex1.pow(0.0);
      complex10.asin();
      complex7.pow(complex3);
      complex8.add(0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3701.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.NaN.cosh();
      complex2.ONE.sqrt1z();
      complex0.abs();
      Complex complex3 = complex1.tan();
      Complex.valueOf(3701.0);
      Complex complex4 = complex3.subtract(Double.POSITIVE_INFINITY);
      complex4.I.subtract(complex1);
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.multiply(complex1);
      Complex complex7 = complex1.cosh();
      complex7.ONE.reciprocal();
      complex0.toString();
      complex5.toString();
      complex1.readResolve();
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 28.97254);
      Complex complex1 = new Complex((-4228.03580974), 2013.598);
      Complex complex2 = complex0.multiply(complex1);
      complex2.I.abs();
      complex0.INF.tan();
      Complex.valueOf((-761.665), 1.0);
      Complex complex3 = complex2.tanh();
      complex3.sqrt();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.acos();
      complex4.ONE.sqrt();
      Complex complex5 = complex2.NaN.conjugate();
      Complex complex6 = complex2.tanh();
      complex2.getImaginary();
      Complex complex7 = Complex.valueOf((-2134.0), 3865.8687);
      complex7.NaN.negate();
      Complex complex8 = complex7.ONE.add(complex0);
      complex1.abs();
      Complex complex9 = complex4.multiply(Double.NaN);
      complex9.createComplex(Double.NaN, Double.NaN);
      complex9.ZERO.toString();
      complex9.getImaginary();
      Complex complex10 = complex3.divide(complex8);
      complex10.I.negate();
      Complex complex11 = complex4.subtract(Double.NaN);
      complex11.pow(complex6);
      complex8.acos();
      Complex complex12 = complex11.log();
      Complex complex13 = complex4.ONE.sin();
      complex1.ZERO.createComplex(Double.NaN, 0.0);
      complex12.INF.getField();
      complex4.subtract(3865.8687);
      complex5.hashCode();
      complex13.add(3865.8687);
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      double double0 = 5.377173488599035E239;
      Complex complex0 = Complex.valueOf(5.377173488599035E239);
      double double1 = (-2360.83388);
      Complex complex1 = Complex.valueOf((-2360.83388), (-2360.83388));
      Complex complex2 = complex0.I.divide(complex1);
      try { 
        complex2.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.createComplex((-1313.13905), 2001.87162241378);
      complex0.hashCode();
      Complex complex4 = complex3.ZERO.pow((-1313.13905));
      complex4.ZERO.acos();
      Complex complex5 = complex4.INF.tanh();
      complex5.ONE.nthRoot(7);
      complex0.tanh();
      complex3.isInfinite();
      Complex complex6 = complex0.multiply(complex2);
      complex1.cos();
      complex2.toString();
      complex6.getReal();
      complex6.tanh();
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.cosh();
      complex2.ONE.acos();
      Complex complex3 = Complex.valueOf((-1.1524714043067699E-7));
      Complex complex4 = Complex.valueOf((-985.9384069876), (-1.1524714043067699E-7));
      complex4.ZERO.log();
      Complex complex5 = complex3.pow(complex4);
      Complex complex6 = complex5.NaN.multiply((-3387));
      complex5.add(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.negate();
      complex0.I.multiply((-3387));
      complex6.ZERO.hashCode();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      complex7.ONE.exp();
      complex8.I.toString();
      complex8.I.getField();
      Complex complex9 = complex8.acos();
      complex9.I.sin();
      complex2.asin();
      complex5.tan();
      complex7.acos();
      complex5.sin();
      Complex complex10 = complex5.sin();
      complex10.equals(complex1);
      complex6.multiply((-3387));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      Complex complex1 = complex0.sqrt();
      complex1.ONE.add(complex0);
      Complex complex2 = complex1.NaN.multiply((-444));
      complex2.NaN.pow(0.0);
      double double0 = (-4008.8);
      Complex complex3 = complex1.I.createComplex(0.0, (-4008.8));
      Complex complex4 = complex3.ONE.reciprocal();
      try { 
        complex4.INF.nthRoot((-2885));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,885
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.subtract(complex1);
      complex3.INF.cos();
      Complex complex4 = complex3.sin();
      complex4.INF.exp();
      complex3.I.pow(4304.74983);
      double double0 = 0.0;
      Complex complex5 = complex2.ZERO.add(0.0);
      complex5.ZERO.multiply(complex2);
      try { 
        complex1.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 173.74622433386);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = complex2.INF.add(6.283185307179586);
      complex1.ONE.getField();
      Complex complex4 = complex1.I.divide(6.283185307179586);
      Complex complex5 = complex0.ONE.multiply(2407);
      Complex complex6 = complex5.add(6.283185307179586);
      complex6.INF.tanh();
      Complex complex7 = Complex.valueOf(913.7562667638063, 913.7562667638063);
      Complex.valueOf(913.7562667638063, 6.283185307179586);
      Complex complex8 = complex7.ZERO.add(0.0);
      Complex complex9 = complex8.I.sinh();
      complex9.multiply(2407);
      complex0.NaN.acos();
      Complex.valueOf(0.0);
      complex7.getReal();
      Complex complex10 = complex7.tanh();
      complex7.getField();
      Complex complex11 = complex4.createComplex(6.283185307179586, 6.283185307179586);
      complex10.getImaginary();
      Complex complex12 = complex10.subtract((-1357.7071029177062));
      complex12.ONE.pow(complex11);
      complex3.sin();
      Complex.valueOf(1447.817, 0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.454991340637207);
      Complex complex1 = complex0.NaN.subtract(1.454991340637207);
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex0.negate();
      complex3.getArgument();
      Complex complex6 = complex5.NaN.divide(1703.61);
      Complex complex7 = complex6.I.log();
      complex5.hashCode();
      Complex complex8 = complex5.negate();
      complex4.hashCode();
      complex0.isNaN();
      complex7.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.I.cosh();
      complex0.readResolve();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex1.cos();
      complex3.tan();
      complex0.I.sin();
      Complex complex5 = complex1.acos();
      complex4.multiply(complex5);
      complex4.log();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.add((-2608.082876223));
      Complex complex3 = complex1.multiply((-274.92294315));
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex4.reciprocal();
      complex3.isNaN();
      complex3.I.negate();
      complex0.hashCode();
      Complex complex7 = complex3.INF.pow((-892.0));
      Complex complex8 = complex0.NaN.multiply(complex2);
      Complex complex9 = complex4.I.sqrt1z();
      Complex complex10 = complex8.ZERO.sqrt1z();
      complex7.I.multiply(complex1);
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex11.I.log();
      Complex complex13 = complex6.exp();
      complex13.I.sin();
      Complex complex14 = complex7.pow(complex5);
      complex1.isInfinite();
      complex14.isNaN();
      complex8.sin();
      complex3.isNaN();
      complex13.isNaN();
      complex9.getArgument();
      complex0.add(complex12);
      complex10.isInfinite();
      complex4.sqrt();
      complex12.acos();
      Complex.valueOf(2.67875337600708, 1660.926189);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.sinh();
      complex3.ZERO.createComplex((-1804.58979), 0.0);
      Complex complex4 = Complex.valueOf(0.0);
      complex3.NaN.getArgument();
      complex2.ONE.conjugate();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex1.multiply(0.0);
      Complex complex7 = complex1.cosh();
      complex4.ZERO.sqrt1z();
      complex6.equals(complex7);
      complex2.isInfinite();
      complex2.nthRoot(1);
      Complex complex8 = complex5.pow((-4.820065619207094E-9));
      complex8.INF.exp();
      complex8.sqrt();
      complex4.pow(complex8);
      complex1.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      double double0 = (-2134.04982);
      Complex complex0 = Complex.valueOf(0.0, (-2134.04982));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.pow(complex1);
      complex2.INF.tan();
      complex2.ONE.tan();
      complex1.I.divide((-2134.04982));
      complex2.NaN.conjugate();
      double double1 = (-2.8907074856577267E-8);
      Complex.valueOf(0.0, (-2.8907074856577267E-8));
      complex0.subtract((-2134.04982));
      try { 
        complex1.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-9.45487863616303E-8));
      Complex complex1 = complex0.sqrt1z();
      complex0.getArgument();
      Complex complex2 = complex1.pow((-9.45487863616303E-8));
      complex2.I.getArgument();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex1.sinh();
      complex4.hashCode();
      Complex complex5 = complex1.ONE.tanh();
      complex5.I.getArgument();
      Complex complex6 = complex5.ONE.sin();
      complex6.getArgument();
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = complex4.cos();
      Complex complex9 = new Complex(1.5707963267948966, 0.0);
      complex8.ONE.divide(complex9);
      complex8.I.subtract(0.0);
      Complex complex10 = complex0.NaN.atan();
      complex5.I.toString();
      Complex complex11 = complex4.add(2888.649055528);
      complex3.multiply(3.141592653589793);
      Complex complex12 = complex10.ZERO.sqrt1z();
      complex12.ZERO.hashCode();
      Complex complex13 = complex1.multiply(complex8);
      complex8.atan();
      complex13.isInfinite();
      complex7.toString();
      complex4.sinh();
      complex10.multiply(2888.649055528);
      complex3.ZERO.add(complex11);
      complex0.add(complex1);
      complex3.divide(1.5707963267948966);
      complex1.nthRoot(308);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.INF.acos();
      Complex complex2 = complex1.ZERO.reciprocal();
      complex2.pow(0.0);
      complex0.abs();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(1401.55711, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.exp();
      complex1.tanh();
      Complex complex3 = Complex.valueOf(1401.55711);
      Complex complex4 = complex1.subtract(complex3);
      complex4.pow(545.84686);
      complex1.sin();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.tanh();
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex0.cos();
      complex2.equals(complex0);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex2.subtract(0.0);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex2.INF.cosh();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex4.tan();
      Complex complex8 = complex7.INF.sin();
      complex0.multiply(complex1);
      complex7.add(complex3);
      Complex complex9 = complex3.pow(0.0);
      Complex complex10 = complex9.sqrt1z();
      complex10.createComplex(Double.POSITIVE_INFINITY, 0.0);
      complex10.conjugate();
      complex6.readResolve();
      complex5.getField();
      complex8.tanh();
      complex2.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.toString();
      complex0.reciprocal();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.subtract(353.8473136941361);
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.multiply(1.2015275955200195);
      complex5.I.hashCode();
      Complex complex6 = complex5.I.pow(complex1);
      Complex complex7 = complex6.ZERO.cos();
      Complex complex8 = complex0.tanh();
      complex8.I.nthRoot(17);
      complex8.acos();
      complex1.ZERO.log();
      complex8.INF.multiply(complex7);
      complex0.pow(complex8);
      Complex complex9 = complex2.multiply(1.2015275955200195);
      complex4.ZERO.cos();
      Complex complex10 = complex0.asin();
      complex10.NaN.cos();
      complex4.conjugate();
      complex9.isNaN();
      complex2.sqrt();
      complex1.multiply(complex3);
      complex2.multiply(17);
      complex8.readResolve();
      complex5.toString();
      complex10.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2653.0098568584);
      Complex complex1 = complex0.ONE.divide(2653.0098568584);
      Complex complex2 = complex0.I.exp();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.NaN.divide(complex3);
      Complex complex5 = complex2.I.createComplex((-3343.7292741401), 0.0);
      complex0.getField();
      Complex complex6 = complex0.subtract(2653.0098568584);
      Complex complex7 = complex1.add(complex2);
      complex7.INF.sinh();
      complex6.isNaN();
      Complex complex8 = complex6.pow(complex5);
      complex0.nthRoot(2450);
      complex4.exp();
      complex0.asin();
      complex8.log();
      complex2.sqrt();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.toString();
      complex0.abs();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex1.NaN.sqrt1z();
      Complex complex4 = complex1.multiply(1);
      complex4.getArgument();
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = Complex.valueOf((double) 1, 1.5707963267948966);
      complex6.sin();
      Complex complex7 = complex5.NaN.pow(complex3);
      complex0.divide(complex3);
      complex5.divide((-53.596518));
      complex6.readResolve();
      complex2.getImaginary();
      complex1.getArgument();
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.atan();
      complex2.NaN.readResolve();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = Complex.valueOf(1160.61946105, 1160.61946105);
      complex4.ZERO.tan();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex0.INF.subtract(758.84817);
      complex7.ZERO.getField();
      Complex.valueOf(758.84817);
      complex6.cos();
      complex6.INF.acos();
      Complex complex8 = complex0.divide(complex2);
      complex8.INF.acos();
      complex6.readResolve();
      Complex complex9 = complex2.cos();
      Complex complex10 = complex2.pow(20.0);
      complex10.ONE.getArgument();
      Complex complex11 = complex9.multiply(complex5);
      complex9.ZERO.multiply(3933);
      complex11.INF.getArgument();
      complex6.hashCode();
      Complex complex12 = complex2.createComplex(20.0, 0.7853981633974483);
      complex6.add(756.0);
      complex12.log();
      complex10.exp();
      complex10.readResolve();
      complex2.add(0.0);
      complex11.sqrt();
      complex9.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.acos();
      complex0.ONE.toString();
      Complex complex1 = complex0.ONE.tan();
      complex1.ONE.hashCode();
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.pow(3124.0);
      String string0 = complex2.I.toString();
      assertEquals("(0.0, 1.0)", string0);
      
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = Complex.valueOf(20.0);
      Complex complex5 = complex0.NaN.sinh();
      Complex complex6 = complex0.ZERO.pow(complex1);
      Complex complex7 = complex0.sinh();
      Complex complex8 = complex7.NaN.multiply(complex3);
      double double0 = complex7.abs();
      assertEquals(0.8414709848078965, double0, 0.01);
      
      Complex complex9 = complex4.cos();
      Complex complex10 = complex7.INF.acos();
      Complex complex11 = complex4.NaN.sin();
      complex3.getReal();
      complex4.isNaN();
      complex9.getReal();
      complex9.readResolve();
      Complex complex12 = complex9.cos();
      Complex complex13 = complex6.INF.subtract(complex7);
      assertTrue(complex13.isInfinite());
      
      Complex complex14 = complex9.subtract(complex3);
      Complex complex15 = complex9.ONE.tan();
      assertEquals(1.557407724654902, complex15.getReal(), 0.01);
      
      Complex complex16 = complex14.ONE.acos();
      complex14.ONE.subtract(complex8);
      complex6.exp();
      assertSame(complex6, complex11);
      
      complex8.readResolve();
      complex7.exp();
      double double1 = complex1.abs();
      assertEquals(Double.NaN, double1, 0.01);
      
      Complex complex17 = complex16.subtract(3124.0);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals((-3124.0), complex17.getReal(), 0.01);
      
      complex12.cos();
      double double2 = complex5.getReal();
      assertSame(complex5, complex14);
      assertSame(complex5, complex10);
      assertFalse(complex5.equals((Object)complex2));
      assertNotSame(complex5, complex12);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1701.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.NaN.cos();
      complex2.NaN.readResolve();
      Complex complex4 = complex1.INF.tan();
      Complex complex5 = complex4.NaN.multiply(1);
      Complex complex6 = complex1.ONE.sqrt();
      Complex complex7 = complex4.INF.acos();
      Complex complex8 = complex0.NaN.multiply(1);
      complex7.NaN.hashCode();
      Complex complex9 = complex0.subtract(complex1);
      Complex complex10 = complex0.ZERO.divide(complex6);
      complex9.isInfinite();
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex9.getReal(), 0.01);
      
      Complex complex11 = complex6.log();
      Complex complex12 = complex8.subtract(complex11);
      Complex complex13 = complex11.INF.pow((-2300.034));
      complex12.INF.cosh();
      Complex complex14 = complex6.multiply(complex5);
      complex14.add(complex12);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertSame(complex8, complex3);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertTrue(complex11.equals((Object)complex10));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1701.0, complex0.getImaginary(), 0.01);
      
      complex7.cosh();
      assertSame(complex7, complex12);
      assertTrue(complex4.equals((Object)complex13));
      assertNotSame(complex7, complex13);
  }
}
