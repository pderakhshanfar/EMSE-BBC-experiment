/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:00:34 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1.0074984709952582E-234), (-1.0074984709952582E-234));
      Complex complex1 = Complex.valueOf((-1.0074984709952582E-234), 2.1383323934483528E-190);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.ZERO.multiply((-281.97209052973295));
      complex1.nthRoot(814);
      complex3.I.cos();
      complex1.ZERO.sin();
      Complex complex4 = complex2.createComplex((-1.0938612624777085E-7), 2.414213562373095);
      Complex complex5 = complex3.tanh();
      Complex complex6 = complex5.INF.createComplex((-1.5707963267948966), (-1.0074984709952582E-234));
      complex4.multiply((-1426));
      complex1.abs();
      complex0.multiply((-1019));
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.9E-324, 4.9E-324);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.I.sin();
      complex2.ONE.multiply(1117);
      complex1.ZERO.getArgument();
      Complex complex3 = complex1.add(complex0);
      complex3.ZERO.subtract(4.9E-324);
      Complex complex4 = Complex.valueOf(7.2831502374676964E-9);
      Complex complex5 = complex4.I.add(4.9E-324);
      complex5.ZERO.getArgument();
      Complex complex6 = Complex.valueOf(4.9E-324, 1.0129425523765607);
      Complex complex7 = complex6.NaN.createComplex(0.0, 0.058823529411764705);
      complex6.ZERO.abs();
      Complex complex8 = complex0.createComplex(4.9E-324, 4.9E-324);
      complex1.abs();
      complex3.nthRoot(1282);
      complex3.asin();
      complex0.cos();
      complex7.pow(complex1);
      Complex complex9 = complex8.reciprocal();
      complex9.abs();
      Complex complex10 = complex6.cos();
      complex10.NaN.multiply((-3135));
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-124.50133229250542));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sinh();
      complex2.pow((-124.50133229250542));
      Complex complex3 = complex1.createComplex(1.368893262241355E-7, (-124.50133229250542));
      complex1.acos();
      complex0.exp();
      complex3.divide(2.295738697052002);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
      Complex complex1 = complex0.createComplex((-1.7950057534514933E-9), (-1.7950057534514933E-9));
      complex1.INF.multiply(9.182512565315022E-8);
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex((-185.3059225189), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.multiply(139);
      complex1.abs();
      complex2.add((-699.3813346544));
      complex1.abs();
      complex0.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0074984709952582E-234), 2.1383323934483528E-190);
      Complex.valueOf((-1.0074984709952582E-234));
      complex0.abs();
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = Complex.I;
      complex2.ZERO.tan();
      complex2.log();
      complex1.tanh();
      Complex complex3 = Complex.valueOf(2.1383323934483528E-190, 79.2454159385);
      complex3.sqrt();
      Complex complex4 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-138.732), (-138.732));
      Complex complex1 = complex0.I.tan();
      complex0.exp();
      Complex complex2 = (Complex)complex1.readResolve();
      complex2.divide((-138.732));
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = new Complex((-7.512169809356372E50), Double.POSITIVE_INFINITY);
      complex4.multiply(complex5);
      complex5.multiply((-249.5249988));
      complex5.subtract((-237.6124290424));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.ZERO.acos();
      complex2.cosh();
      Complex complex3 = complex0.asin();
      complex1.conjugate();
      Complex complex4 = complex2.subtract(complex3);
      Complex complex5 = complex4.log();
      complex5.NaN.exp();
      complex1.ONE.sinh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex1.sinh();
      complex7.cosh();
      complex6.ONE.conjugate();
      complex5.sqrt();
      complex6.sinh();
      complex2.pow(complex4);
      complex5.sqrt();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.atan();
      Complex complex2 = complex1.tanh();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ZERO;
      complex0.hashCode();
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = complex0.createComplex(723.8901774574, (-1213.42642634));
      Complex complex5 = new Complex((-749.2157113256), (-1.0074984709952582E-234));
      Complex complex6 = complex0.tanh();
      complex3.nthRoot(2438);
      Complex complex7 = Complex.ZERO;
      complex3.tanh();
      complex0.sqrt();
      complex7.sinh();
      complex6.abs();
      Complex complex8 = Complex.ZERO;
      complex4.getReal();
      Complex.valueOf((-1213.42642634), (-1543.4425047));
      Complex complex9 = Complex.INF;
      complex9.isInfinite();
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-2136.0), 4.218682431618625E286);
      Complex complex1 = complex0.sqrt1z();
      complex0.ZERO.toString();
      Complex complex2 = Complex.INF;
      complex0.add(complex2);
      complex1.pow((-2136.0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.0074984709952582E-234), (-1.0074984709952582E-234));
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex((-1.0074984709952582E-234), 20.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf(1.5430806348152437, (-56.413199052155));
      complex2.add(complex4);
      Complex complex6 = Complex.NaN;
      complex6.divide(4459.6626717);
      complex3.tan();
      complex0.multiply(37);
      complex5.multiply(17);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.INF.abs();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.createComplex(0.8813735870195429, 0.8813735870195429);
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex1.NaN.multiply(complex4);
      complex4.INF.cos();
      complex1.acos();
      complex0.multiply(2147482675);
      Complex complex7 = complex5.pow(complex3);
      complex6.NaN.toString();
      Complex complex8 = complex5.ZERO.log();
      Complex complex9 = complex4.sin();
      complex4.INF.toString();
      Complex complex10 = complex6.reciprocal();
      Complex complex11 = complex6.subtract(complex7);
      complex9.INF.pow((double) 2147482675);
      Complex complex12 = complex6.cosh();
      Complex complex13 = complex12.INF.cos();
      complex13.NaN.multiply(2147482675);
      Complex.valueOf((double) 2147482675, 0.8813735870195429);
      complex11.NaN.divide(complex5);
      Complex.valueOf(2.0, 2.0);
      Complex complex14 = complex10.add(0.8813735870195429);
      complex14.ZERO.getField();
      complex11.subtract(complex9);
      complex8.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.I.tanh();
      Complex complex4 = complex2.multiply((-204.247249));
      complex4.ZERO.nthRoot(712);
      complex1.subtract((-204.247249));
      complex4.conjugate();
      complex0.INF.add((double) 712);
      Complex complex5 = complex0.divide(complex1);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.INF.subtract((-204.247249));
      Complex complex8 = complex5.createComplex(712, (-1250.85552));
      complex8.I.abs();
      Complex complex9 = complex7.createComplex(877.213, (-1250.85552));
      Complex complex10 = complex1.atan();
      complex10.NaN.negate();
      complex9.sin();
      complex10.tan();
      complex3.sqrt();
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.add((-1900.2430174484791));
      Complex complex2 = new Complex((-1900.2430174484791), (-1900.2430174484791));
      Complex complex3 = complex0.divide(complex2);
      complex3.pow(complex1);
      complex3.nthRoot(37);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(6.3890560989306495);
      Complex complex2 = complex0.pow((-504.586674178563));
      complex0.ZERO.atan();
      Complex complex3 = complex2.divide(complex0);
      complex3.hashCode();
      complex1.hashCode();
      Complex complex4 = Complex.valueOf((-504.586674178563));
      complex4.getArgument();
      Complex complex5 = new Complex(3.141592653589793, 3.141592653589793);
      complex2.tanh();
      complex4.nthRoot(806);
      complex0.abs();
      // Undeclared exception!
      complex4.nthRoot(1518500250);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.add((-327.9732));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1699.4748386));
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex0.I.conjugate();
      complex3.NaN.hashCode();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.INF.divide(complex2);
      complex5.INF.sqrt1z();
      complex3.ONE.reciprocal();
      Complex complex6 = complex4.I.reciprocal();
      complex4.multiply(complex0);
      Complex complex7 = complex2.divide((-1699.4748386));
      complex0.NaN.subtract(3010.9850894);
      Complex complex8 = complex3.atan();
      complex1.negate();
      Complex complex9 = complex8.negate();
      Complex complex10 = complex7.ZERO.subtract(20.0);
      Complex complex11 = complex3.INF.sqrt1z();
      complex10.ONE.abs();
      complex3.nthRoot(1809);
      complex1.pow(1764.0652);
      Complex complex12 = complex4.divide(1764.0652);
      complex12.ONE.divide(20.0);
      complex12.ZERO.nthRoot(1809);
      complex4.asin();
      complex11.sqrt();
      complex3.toString();
      complex9.sin();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5707963267948966);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.NaN.add(1.5707963267948966);
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex2.ZERO.cosh();
      complex4.NaN.sin();
      complex0.NaN.sqrt1z();
      complex0.sqrt();
      Complex complex5 = complex3.asin();
      try { 
        complex5.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.readResolve();
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3.851445905038431E134, 3.851445905038431E134);
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex0.NaN.createComplex((-1.6114314525832115E-7), (-536.383308385727));
      complex4.add((-1.6114314525832115E-7));
      complex4.INF.getField();
      Complex complex5 = complex0.sqrt1z();
      complex5.INF.divide(3.851445905038431E134);
      Complex complex6 = complex0.sin();
      complex4.sqrt1z();
      Complex complex7 = complex3.conjugate();
      complex7.NaN.abs();
      Complex complex8 = complex3.multiply(complex0);
      Complex complex9 = complex1.cosh();
      Complex complex10 = complex8.I.cosh();
      Complex complex11 = complex10.INF.multiply(3183);
      Complex complex12 = complex11.INF.asin();
      complex9.toString();
      complex8.abs();
      Complex complex13 = complex6.INF.negate();
      complex2.NaN.negate();
      complex7.cosh();
      complex6.getField();
      complex9.ONE.sinh();
      complex4.cosh();
      Complex complex14 = complex9.sqrt1z();
      complex14.atan();
      Complex complex15 = complex13.divide(3.851445905038431E134);
      complex12.sinh();
      complex15.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.getField();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.negate();
      complex1.getArgument();
      complex0.toString();
      Complex complex4 = complex2.add(4503.0884603);
      Complex complex5 = complex2.pow(Double.NaN);
      complex0.divide(complex5);
      complex5.hashCode();
      complex4.getArgument();
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex4.add(complex6);
      complex7.toString();
      complex3.readResolve();
      Complex complex8 = new Complex((-1.3331969720555312E-35), Double.NaN);
      complex8.cos();
      complex2.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex0.I.negate();
      Complex complex3 = complex2.pow(0.0);
      complex0.sqrt();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.ONE.cosh();
      complex3.tan();
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1073.57494), (-2822.1768397));
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex((-2115.786227305999));
      Complex complex4 = complex3.multiply(complex1);
      complex0.hashCode();
      Complex complex5 = complex0.pow(complex4);
      complex2.nthRoot(1);
      complex4.add(complex5);
      complex4.reciprocal();
      complex3.createComplex((-2822.1768397), 1);
      Complex complex6 = Complex.I;
      complex6.divide((-2405.6795503065));
      complex6.getField();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(0.0);
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex1.getArgument();
      Complex complex3 = complex2.add(complex1);
      complex3.reciprocal();
      complex0.subtract(5.091070300111434E-88);
      Complex complex4 = new Complex((-3283.0));
      Complex complex5 = complex4.createComplex(1.0129425523765607, 1.0);
      complex5.abs();
      complex3.divide((-1.0074984709952582E-234));
      Complex complex6 = complex3.add(complex2);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex0.add((-1350.5315169));
      Complex complex3 = complex1.I.createComplex((-1350.5315169), 2.0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.ZERO.pow(complex4);
      Complex complex6 = complex4.INF.divide((-783.660255957));
      Complex complex7 = complex5.I.sin();
      complex7.ONE.add(complex2);
      complex5.ONE.asin();
      Complex complex8 = complex0.NaN.createComplex(2.0, 2.0);
      complex8.ZERO.add(2.0);
      Complex complex9 = complex1.I.reciprocal();
      Complex complex10 = complex0.acos();
      complex10.NaN.sqrt();
      Complex complex11 = complex10.asin();
      Complex complex12 = complex11.ZERO.sin();
      complex6.NaN.getArgument();
      complex10.subtract(complex0);
      complex2.acos();
      complex10.sqrt1z();
      complex11.tanh();
      complex8.divide(complex5);
      Complex complex13 = complex12.divide(complex3);
      complex6.multiply((-700));
      complex13.divide(complex9);
      complex9.pow(complex13);
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-633.89), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, (-633.89));
      complex0.tanh();
      complex1.toString();
      complex2.toString();
      Complex complex3 = complex1.multiply(complex2);
      complex1.NaN.conjugate();
      Complex complex4 = Complex.INF;
      Complex complex5 = new Complex((-633.89), 20.0);
      complex5.NaN.abs();
      complex1.subtract(complex3);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.asin();
      complex6.getReal();
      Complex complex7 = complex6.tanh();
      complex1.readResolve();
      Complex.valueOf(0.0);
      complex7.subtract((-2911.114644439784));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(1291.598946971);
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-1768.7428678103943);
      Complex complex0 = new Complex((-1768.7428678103943));
      Complex complex1 = complex0.NaN.sqrt();
      Complex complex2 = complex1.ZERO.atan();
      complex0.ZERO.sqrt();
      Complex complex3 = complex1.ONE.add((-1768.7428678103943));
      complex3.I.exp();
      Complex complex4 = complex3.I.subtract(complex0);
      complex4.ZERO.readResolve();
      complex2.exp();
      complex0.I.sinh();
      Complex complex5 = complex0.ONE.divide((-1768.7428678103943));
      complex5.INF.sqrt1z();
      complex5.INF.toString();
      complex5.tanh();
      Complex complex6 = complex0.ONE.sinh();
      Complex complex7 = complex6.I.tanh();
      complex7.ONE.exp();
      Complex complex8 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.tan();
      Complex.valueOf(0.6898919696125435);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = new Complex(619.310099, 0.6898919696125435);
      complex2.divide(0.0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(6437029.020049726, 6437029.020049726);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(2.3886908001521312E50, (-1.0));
      Complex complex4 = complex2.tanh();
      Complex complex5 = Complex.INF;
      complex4.ZERO.multiply(complex5);
      complex4.toString();
      Complex complex6 = Complex.INF;
      complex6.toString();
      complex0.multiply(complex6);
      Complex complex7 = Complex.INF;
      complex2.subtract(complex6);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.subtract(complex3);
      Complex.valueOf(4.2661388254716074E-8, 0.9999995622667599);
      Complex complex10 = complex9.asin();
      complex7.getReal();
      complex10.tanh();
      Complex complex11 = Complex.INF;
      complex11.readResolve();
      Complex.valueOf((-1073.57494));
      complex7.subtract((-604.151912));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Object object0 = complex0.readResolve();
      complex0.exp();
      complex0.equals(object0);
      Complex complex1 = Complex.NaN;
      complex1.getArgument();
      Complex complex2 = complex1.add(complex0);
      complex2.reciprocal();
      Complex complex3 = complex1.createComplex(0.0, 859.164);
      complex0.divide(1458.9);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add((-666.0330907837189));
      Complex complex2 = complex1.pow((-666.0330907837189));
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex3.sqrt1z();
      complex3.hashCode();
      complex3.getArgument();
      Complex complex5 = Complex.ONE;
      complex5.tanh();
      complex4.pow(3223.70702994895);
      Complex complex6 = new Complex(Double.NaN);
      complex6.sin();
      complex2.atan();
      complex0.multiply(0);
      Complex complex7 = complex3.multiply(1517);
      Complex.valueOf(0.0);
      complex7.subtract((-666.0330907837189));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf(414.2732564433, 414.2732564433);
      complex1.tan();
      Complex complex2 = complex0.cos();
      complex2.exp();
      complex1.divide(414.2732564433);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = (Complex)complex0.readResolve();
      complex1.INF.exp();
      complex1.equals(complex2);
      complex0.I.getArgument();
      Complex complex3 = complex1.add(complex0);
      complex3.ZERO.reciprocal();
      complex0.subtract(1.5707963267948966);
      Complex.valueOf(1.5707963267948966);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-138.732), (-138.732));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.cos();
      complex2.exp();
      complex0.tanh();
      complex1.readResolve();
      Complex complex3 = Complex.I;
      complex3.sqrt1z();
      Complex complex4 = new Complex((-7.512169809356372E50), Double.POSITIVE_INFINITY);
      Complex complex5 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5094765125E7, 1.5094765125E7);
      Complex complex1 = complex0.NaN.pow((-4646.05495));
      Complex complex2 = complex1.I.exp();
      Complex complex3 = complex2.I.tanh();
      complex3.ONE.divide((-1535.5225416273));
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex0.ZERO.tanh();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex4.ZERO.divide(complex5);
      Complex complex8 = complex0.INF.negate();
      Complex complex9 = complex8.INF.add(complex4);
      complex9.NaN.sqrt1z();
      Complex complex10 = complex6.subtract(1.007498470995297E-234);
      complex4.pow(1.007498470995297E-234);
      Complex complex11 = complex10.sqrt1z();
      complex5.log();
      complex8.multiply((-4646.05495));
      Complex.valueOf(20.0, (-4646.05495));
      complex7.subtract(1.5094765125E7);
      Complex complex12 = complex11.tan();
      complex0.exp();
      complex12.acos();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-1473.231));
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex2.ONE.reciprocal();
      Complex complex4 = complex1.multiply(350.94359891881);
      Complex complex5 = complex2.NaN.asin();
      complex3.NaN.abs();
      Complex complex6 = complex0.createComplex((-85.03363132000328), (-85.03363132000328));
      Complex complex7 = complex0.multiply((-85.03363132000328));
      complex0.readResolve();
      Complex complex8 = complex7.pow(Double.NaN);
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.I.hashCode();
      Complex complex10 = complex1.sin();
      complex10.ZERO.multiply(complex8);
      Complex complex11 = Complex.valueOf(2.014999877222977E-234, (-1145.2144576284445));
      Complex complex12 = complex4.sinh();
      complex6.atan();
      Complex complex13 = complex9.sinh();
      complex1.sqrt1z();
      complex13.abs();
      complex3.asin();
      complex8.isInfinite();
      complex12.sin();
      complex11.sqrt1z();
      complex8.log();
      Complex complex14 = Complex.valueOf(350.94359891881, 744.4137);
      complex5.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1.0074984709952582E-234), (-1.0074984709952582E-234));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex1.NaN.multiply(complex3);
      complex0.ONE.hashCode();
      Complex complex5 = complex4.pow(complex3);
      complex4.multiply((-3178.549472107));
      complex1.createComplex(1.620899738203635E200, (-17.1455031));
      Complex complex6 = complex2.sinh();
      complex6.tanh();
      complex5.nthRoot(1);
      Complex complex7 = Complex.ZERO;
      complex7.tanh();
      complex2.sqrt();
      complex0.sqrt();
      complex5.sinh();
      complex0.abs();
      Complex complex8 = Complex.ZERO;
      complex8.getReal();
      Complex complex9 = Complex.valueOf((-2476.622652), (-3178.549472107));
      complex9.reciprocal();
      complex9.isInfinite();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.negate();
      complex0.getArgument();
      complex1.toString();
      Complex complex3 = complex0.add(0.0);
      Complex complex4 = complex3.NaN.pow(0.7853981633974483);
      complex4.INF.divide(complex3);
      Complex complex5 = complex2.sqrt1z();
      complex0.add(complex5);
      complex2.createComplex((-1.0), 0.0);
      Complex complex6 = Complex.ONE;
      complex6.divide((-3178.549472107));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.exp();
      complex2.equals(complex1);
      complex2.getArgument();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex5.NaN.createComplex((-740.143238364359), 588.8607104626135);
      complex4.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      complex1.I.getArgument();
      Complex complex2 = complex0.ZERO.multiply(1.5707963267948966);
      Complex complex3 = complex0.createComplex((-2747.25), (-2747.25));
      Complex complex4 = complex3.ZERO.negate();
      Complex complex5 = complex4.ZERO.pow(complex3);
      Complex complex6 = complex0.multiply(2.0);
      Complex complex7 = complex6.ONE.createComplex(1.620899738203635E200, 2.0);
      Complex complex8 = complex7.NaN.sinh();
      complex8.ZERO.subtract(complex2);
      Complex complex9 = complex7.ONE.tanh();
      complex9.ONE.nthRoot(1);
      Complex complex10 = complex1.sinh();
      complex2.nthRoot(1);
      complex1.getImaginary();
      Complex.valueOf((-2747.25));
      complex6.getArgument();
      complex10.multiply(2.0);
      complex9.divide(complex8);
      complex5.add(0.0);
      Complex.valueOf((-1148.3421607344453));
      complex2.subtract(130.76536715228417);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2137.52);
      Complex complex2 = Complex.valueOf(2137.52);
      complex1.ONE.reciprocal();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(2137.52);
      complex4.I.hashCode();
      complex1.divide(complex3);
      Complex complex5 = complex1.log();
      Complex complex6 = complex0.sin();
      complex6.I.atan();
      complex5.INF.toString();
      Complex complex7 = (Complex)complex0.readResolve();
      Complex complex8 = (Complex)complex5.readResolve();
      complex3.equals(complex8);
      Complex complex9 = Complex.valueOf((-1.6114314525832115E-7));
      Complex complex10 = complex9.I.subtract(complex2);
      Complex complex11 = complex1.cos();
      complex6.tanh();
      Complex complex12 = complex6.sqrt();
      complex12.INF.readResolve();
      complex12.sqrt();
      complex11.sinh();
      complex4.abs();
      complex6.getReal();
      Complex.valueOf(2137.52, 2.7535627955313556E176);
      complex7.reciprocal();
      complex9.isInfinite();
      complex5.reciprocal();
      complex10.tan();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = new Complex((-1.0074984709952582E-234), (-1.0074984709952582E-234));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = Complex.valueOf(414.2732564433, (-1.0074984709952582E-234));
      Complex complex4 = complex2.tan();
      complex1.nthRoot(2426);
      complex0.cos();
      complex2.exp();
      complex2.abs();
      Complex complex5 = complex0.createComplex((-2173), (-350.94359891881));
      complex5.subtract(2668.289);
      complex3.asin();
      Complex complex6 = Complex.ONE;
      complex4.I.tanh();
      Complex complex7 = complex6.exp();
      complex7.ZERO.readResolve();
      complex5.sqrt();
      complex2.cos();
      complex4.multiply((-2696.465623919976));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2137.52);
      Complex complex2 = Complex.valueOf((-455.5415), (-455.5415));
      Complex complex3 = complex1.tan();
      complex3.nthRoot(3769);
      complex0.cos();
      Complex complex4 = Complex.I;
      complex2.abs();
      complex4.createComplex(3.0095696449279785, 1331.565967373);
      complex0.subtract((-138.732));
      Complex.valueOf(4247.016017054376, 4247.016017054376);
      complex1.asin();
      complex2.exp();
      Complex complex5 = complex4.sqrt();
      complex4.cos();
      complex5.multiply((-138.732));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      complex0.getField();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.negate();
      complex0.getArgument();
      Complex complex4 = complex3.multiply(432);
      complex4.sinh();
      Complex complex5 = Complex.valueOf(0.7853981633974483, (double) 432);
      Complex complex6 = complex0.tanh();
      complex1.toString();
      complex0.toString();
      Complex complex7 = new Complex(294.4304340909357, (-920.168709106124));
      complex7.multiply(complex3);
      complex6.subtract(complex1);
      complex0.subtract(complex2);
      Complex complex8 = Complex.I;
      complex7.asin();
      Complex complex9 = new Complex((-920.168709106124), 432);
      Complex complex10 = complex7.conjugate();
      complex2.getReal();
      Complex complex11 = Complex.I;
      complex11.tanh();
      complex5.readResolve();
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-435.944990353113));
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.toString();
      Complex complex2 = complex0.multiply(226);
      Complex complex3 = complex2.sinh();
      complex3.NaN.nthRoot(517);
      complex0.multiply(3107.973386);
      Complex complex4 = complex1.negate();
      complex0.getReal();
      complex2.sinh();
      complex3.nthRoot(226);
      Complex complex5 = complex1.createComplex(3182.45736268867, Double.POSITIVE_INFINITY);
      complex2.getField();
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1073.57494), (-2822.1768397));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = Complex.valueOf((-2123.508067392044), (-2123.508067392044));
      Complex complex4 = complex3.tanh();
      complex0.toString();
      complex3.toString();
      complex1.multiply(complex0);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.subtract(complex2);
      complex5.subtract(complex6);
      Complex complex7 = Complex.valueOf((-2822.1768397), 3420.111989693853);
      complex3.asin();
      complex2.acos();
      complex7.conjugate();
      complex7.getReal();
      complex4.tanh();
      complex0.readResolve();
      complex3.sqrt1z();
      Complex complex8 = new Complex((-2123.508067392044), (-2822.1768397));
      complex8.asin();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-138.732), 414.2732564433);
      complex0.I.tan();
      Complex complex1 = complex0.cos();
      complex1.exp();
      complex0.divide(414.2732564433);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1073.57494), (-2822.1768397));
      Complex complex2 = complex0.NaN.add(complex1);
      Complex complex3 = complex1.I.multiply(3107.973386);
      Complex complex4 = complex2.negate();
      complex0.getReal();
      complex1.sinh();
      Complex complex5 = complex0.acos();
      complex1.conjugate();
      complex3.getReal();
      Complex complex6 = complex0.tanh();
      complex5.readResolve();
      complex4.sqrt1z();
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      complex1.I.getArgument();
      complex0.ZERO.multiply(1.5707963267948966);
      Complex complex2 = complex0.createComplex((-2747.25), (-2747.25));
      Complex complex3 = complex2.ZERO.negate();
      complex3.ZERO.pow(complex2);
      Complex complex4 = complex0.multiply(2.0);
      Complex complex5 = complex4.ONE.createComplex(1.620899738203635E200, 2.0);
      complex5.NaN.sinh();
      complex5.ONE.tanh();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      complex1.getField();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.negate();
      complex0.getArgument();
      complex1.toString();
      Complex complex4 = complex2.add(0.0);
      Complex complex5 = complex4.NaN.pow(0.7853981633974483);
      complex4.exp();
      Complex complex6 = complex5.INF.divide(complex4);
      Complex complex7 = complex3.sqrt1z();
      complex1.ONE.hashCode();
      complex6.getArgument();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.INF.pow((-1776.3));
      complex9.INF.sin();
      complex8.atan();
      complex7.multiply(0);
      complex3.multiply((-28));
      Complex.valueOf(0.0);
      complex0.subtract((double) (-28));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.log();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex1.NaN.sqrt();
      complex0.ZERO.hashCode();
      Complex complex3 = complex0.cos();
      Complex complex4 = Complex.valueOf(0.4909018874168396);
      Complex complex5 = new Complex(112.05965, 112.05965);
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex6.conjugate();
      complex7.hashCode();
      complex4.ONE.multiply(complex5);
      complex2.toString();
      Complex complex8 = complex4.log();
      complex8.ZERO.pow(112.05965);
      complex3.INF.exp();
      Complex complex9 = complex4.createComplex(0.6466736793518066, 1340.7621553592355);
      complex9.ZERO.exp();
      Complex complex10 = complex3.tan();
      complex10.multiply(4642.8);
      complex0.asin();
      complex9.toString();
      complex2.exp();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = new Complex((-3039.446), (-3039.446));
      Complex complex1 = complex0.I.add(3846.704239321316);
      complex0.I.sqrt1z();
      complex1.ONE.sin();
      Complex complex2 = complex0.divide((-3039.446));
      Complex complex3 = complex2.NaN.pow(complex0);
      Complex complex4 = complex3.I.log();
      complex4.getArgument();
      complex4.I.sin();
      Complex complex5 = complex2.subtract(complex0);
      complex1.ZERO.sqrt1z();
      complex5.toString();
      Complex complex6 = Complex.valueOf(3846.704239321316, (-3039.446));
      Complex.valueOf(3846.704239321316);
      complex5.NaN.getArgument();
      complex6.tan();
      complex1.hashCode();
      Complex complex7 = complex0.sin();
      complex7.INF.cosh();
      complex5.I.readResolve();
      complex0.readResolve();
      Complex complex8 = complex5.log();
      complex8.nthRoot(1);
      complex8.NaN.toString();
      complex2.cos();
      Complex.valueOf((-3039.446), 1.1426473877336358E-245);
      Complex complex9 = complex2.INF.acos();
      complex9.INF.multiply(complex5);
      complex3.negate();
      complex8.getField();
      complex3.tanh();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = new Complex((-3223.190769), 2741.45508268625);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.valueOf((-3223.190769));
      Complex complex3 = complex2.ONE.exp();
      complex3.INF.getArgument();
      Complex complex4 = complex2.I.divide(2692.6220190784);
      complex4.asin();
      Complex complex5 = complex0.multiply(complex1);
      Complex complex6 = complex5.NaN.multiply(complex1);
      Complex complex7 = Complex.valueOf(2741.45508268625);
      complex7.I.sqrt1z();
      complex7.NaN.exp();
      Complex complex8 = Complex.valueOf((-3223.190769), Double.POSITIVE_INFINITY);
      complex8.I.createComplex(2741.45508268625, Double.POSITIVE_INFINITY);
      complex5.pow(complex0);
      complex6.log();
      complex1.INF.cos();
      Complex complex9 = complex1.reciprocal();
      Complex complex10 = complex6.cosh();
      complex0.getReal();
      complex4.sinh();
      Complex complex11 = complex3.log();
      complex11.NaN.multiply(0);
      complex2.getArgument();
      complex6.NaN.pow(2741.45508268625);
      Complex complex12 = Complex.I;
      Complex complex13 = complex11.multiply(complex12);
      complex10.multiply(complex8);
      complex11.getField();
      complex5.divide((-2677.3855915391496));
      complex13.subtract(complex9);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.multiply(0.4500300884246826);
      Complex complex1 = complex0.ONE.pow(4.2459748085663055E253);
      Complex complex2 = complex1.ONE.exp();
      complex2.ONE.atan();
      complex1.ZERO.cos();
      Complex complex3 = Complex.valueOf((-1.0));
      complex3.ZERO.nthRoot(17);
      complex3.ONE.toString();
      Complex.valueOf((-1.0), (-1.0));
      Complex complex4 = complex0.INF.subtract((-1.0));
      Complex complex5 = complex4.I.cos();
      Complex complex6 = complex5.INF.exp();
      complex5.ZERO.asin();
      complex0.readResolve();
      complex0.abs();
      Complex complex7 = Complex.valueOf(982.6482506288011, 982.6482506288011);
      Complex complex8 = complex7.sin();
      Complex complex9 = complex8.asin();
      complex9.ZERO.log();
      complex6.isNaN();
      Complex.valueOf(4.2459748085663055E253, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.conjugate();
      complex1.ZERO.toString();
      Complex complex2 = complex1.ZERO.subtract(0.0);
      complex2.ONE.divide(complex1);
      Complex complex3 = complex2.ZERO.cos();
      complex0.equals("");
      Complex complex4 = complex1.cosh();
      complex4.INF.toString();
      complex0.add(complex2);
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = Complex.NaN;
      complex5.NaN.negate();
      complex0.subtract(complex5);
      complex3.pow((-4075.10933141));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Object object0 = complex0.readResolve();
      complex1.INF.exp();
      complex1.equals(object0);
      complex0.I.getArgument();
      Complex complex2 = complex1.add(complex0);
      complex2.ZERO.reciprocal();
      Complex complex3 = complex2.createComplex((-1397.49), (-1.0));
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-275.03466126632), (-2260.614042370435));
      Complex complex1 = complex0.pow((-2260.614042370435));
      complex1.I.divide(complex0);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.I.log();
      try { 
        complex3.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getImaginary();
      complex0.NaN.nthRoot(513);
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.cosh();
      Complex complex2 = complex0.INF.add(complex1);
      complex0.divide(complex1);
      Complex.valueOf((double) 513, (-3171.0));
      complex0.getReal();
      complex2.getArgument();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.conjugate();
      complex1.getField();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex2.negate();
      complex0.getArgument();
      complex1.toString();
      Complex complex4 = complex2.add(0.0);
      Complex complex5 = complex4.NaN.pow(0.7853981633974483);
      Complex complex6 = complex5.INF.divide(complex4);
      Complex complex7 = complex3.sqrt1z();
      complex1.ONE.hashCode();
      complex6.getArgument();
      Complex complex8 = complex2.tanh();
      Complex complex9 = complex8.INF.pow((-1776.3));
      complex9.INF.sin();
      complex8.atan();
      complex7.multiply(0);
      complex3.multiply((-28));
      Complex.valueOf(0.0);
      complex0.subtract((double) (-28));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      complex0.getReal();
      Complex complex1 = complex0.sinh();
      complex0.INF.abs();
      Complex complex2 = complex0.ZERO.subtract(0.0);
      complex0.abs();
      Complex complex3 = Complex.valueOf(Double.NaN);
      Complex complex4 = complex2.NaN.createComplex(Double.POSITIVE_INFINITY, 1840.8538780863);
      complex4.INF.sqrt();
      complex4.atan();
      Complex complex5 = complex4.INF.subtract(complex1);
      complex5.NaN.sin();
      complex1.isInfinite();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = complex0.sqrt();
      complex8.NaN.subtract(complex1);
      Complex complex9 = Complex.valueOf(1098.9, (-673.3957));
      Complex complex10 = complex9.NaN.add(0.0);
      complex10.reciprocal();
      complex2.getReal();
      complex3.sinh();
      Object object0 = complex7.readResolve();
      complex3.equals(object0);
      complex2.INF.multiply(1470);
      complex10.createComplex(0.0, 0.0);
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-20.0));
      complex1.ZERO.atan();
      complex1.ONE.reciprocal();
      complex0.subtract(complex1);
      complex0.I.sinh();
      Complex complex2 = new Complex((-20.0));
      complex0.subtract(complex2);
      complex2.getReal();
      complex1.createComplex((-2988.189706661), (-2617.0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-435.944990353113));
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.toString();
      Complex complex2 = complex0.multiply(226);
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf(1.544673396032028E296, (double) 226);
      complex4.I.tanh();
      complex4.INF.toString();
      complex0.toString();
      complex0.multiply(complex2);
      Complex complex5 = complex3.INF.subtract(complex4);
      complex3.ZERO.subtract(complex5);
      Complex complex6 = Complex.valueOf((double) 226, 3420.111989693853);
      Complex complex7 = complex0.asin();
      Complex complex8 = complex7.ONE.acos();
      complex8.NaN.conjugate();
      complex3.getReal();
      Complex complex9 = complex7.tanh();
      complex9.readResolve();
      complex6.sqrt1z();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2137.52);
      Complex complex2 = Complex.valueOf(2137.52);
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = Complex.valueOf(2137.52);
      complex4.I.hashCode();
      complex1.divide(complex3);
      Complex complex5 = complex1.log();
      Complex complex6 = complex0.sin();
      complex6.I.atan();
      complex5.INF.toString();
      complex0.readResolve();
      Object object0 = complex5.readResolve();
      complex3.equals(object0);
      double double0 = (-1.6114314525832115E-7);
      Complex complex7 = Complex.valueOf((-1.6114314525832115E-7));
      complex7.I.subtract(complex2);
      complex1.cos();
      complex4.sinh();
      try { 
        complex7.nthRoot((-4728));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,728
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = Complex.valueOf(7.636179075087608E73, (-20.0));
      Complex complex3 = complex1.INF.tan();
      Complex complex4 = complex3.ONE.exp();
      complex4.INF.cos();
      Complex complex5 = complex0.multiply(651);
      Complex.valueOf((-46.06444074356491));
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex5.ONE.negate();
      complex6.sqrt();
      complex5.exp();
      Complex complex8 = complex5.multiply(0);
      complex2.getField();
      complex8.add(complex1);
      complex2.tan();
      try { 
        complex7.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1738.0595228794566), (-1738.0595228794566));
      complex0.I.hashCode();
      Complex complex1 = Complex.ZERO;
      complex1.INF.getField();
      Complex complex2 = complex0.multiply(complex1);
      complex2.NaN.conjugate();
      complex2.ONE.pow((-50.78));
      complex0.toString();
      complex2.getArgument();
      Complex complex3 = complex1.subtract(1585.66937494346);
      complex3.abs();
      complex0.asin();
      Complex complex4 = complex3.reciprocal();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.23165710486722E298);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.multiply(complex0);
      complex4.ONE.add(complex2);
      complex3.NaN.abs();
      complex1.getReal();
      complex0.I.sqrt1z();
      complex1.abs();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-1073.57494), (-2822.1768397));
      Complex complex2 = complex0.NaN.add(complex1);
      complex1.I.multiply(3107.973386);
      complex2.negate();
      complex0.getReal();
      Complex complex3 = complex1.sinh();
      complex0.nthRoot(847);
      complex3.createComplex(847, 1.9369852542877197);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-450.449782));
      complex0.I.readResolve();
      Complex complex1 = complex0.pow((-450.449782));
      complex1.NaN.getField();
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex1.INF.sqrt();
      complex3.INF.reciprocal();
      complex3.ONE.multiply(1);
      complex1.ONE.pow(complex0);
      Complex complex4 = complex1.ONE.cosh();
      Complex complex5 = complex4.ZERO.sqrt();
      Complex complex6 = complex1.subtract((-450.449782));
      complex4.ZERO.add(2655.0);
      Complex complex7 = Complex.valueOf(2655.0, 1095.0);
      Complex complex8 = complex4.I.atan();
      complex8.INF.getField();
      complex0.isNaN();
      Complex complex9 = complex1.divide(complex4);
      complex7.cos();
      Complex complex10 = complex0.cosh();
      complex10.NaN.divide(1095.0);
      Complex complex11 = complex6.createComplex(1095.0, 541.81);
      complex1.isInfinite();
      complex9.cos();
      complex5.subtract((-450.449782));
      complex2.divide(0.0);
      complex6.INF.abs();
      complex11.cos();
      complex8.getField();
      complex9.reciprocal();
      complex11.tanh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf((-3291.825238895), 1.7516078165936552E170);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = complex3.NaN.cosh();
      complex3.INF.readResolve();
      complex2.NaN.sqrt1z();
      complex1.isNaN();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex7.divide(2414.3);
      complex7.NaN.createComplex((-3291.825238895), 1.1333315586787883E145);
      Complex complex8 = complex0.asin();
      complex4.ONE.getField();
      Complex complex9 = complex0.acos();
      complex9.ZERO.subtract(complex1);
      Complex complex10 = complex3.INF.subtract(1.7516078165936552E170);
      complex10.I.abs();
      Complex complex11 = complex6.conjugate();
      complex4.NaN.toString();
      complex4.getArgument();
      complex4.isInfinite();
      complex4.cosh();
      complex1.sinh();
      complex5.acos();
      complex8.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = complex1.tan();
      complex2.NaN.toString();
      complex0.INF.hashCode();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex3.cosh();
      complex3.INF.reciprocal();
      complex4.INF.sqrt();
      complex3.getArgument();
      complex0.ONE.abs();
      Complex complex5 = complex0.add(0.0);
      Complex complex6 = complex0.cos();
      complex1.abs();
      complex1.isNaN();
      Complex complex7 = complex0.sqrt1z();
      complex6.divide(1.0);
      Complex complex8 = complex7.ONE.log();
      complex8.INF.hashCode();
      Complex complex9 = complex5.exp();
      complex9.ZERO.sinh();
      Complex complex10 = complex7.asin();
      Complex.valueOf(Double.NaN, 0.0);
      Complex complex11 = complex9.conjugate();
      Complex complex12 = complex4.subtract((-2541.8768115488256));
      complex11.getField();
      complex0.cosh();
      Complex complex13 = complex9.cosh();
      complex9.divide((-1.0));
      complex5.divide(complex13);
      complex2.reciprocal();
      complex6.equals("(NaN, NaN)");
      complex7.getReal();
      complex5.log();
      complex12.equals(complex10);
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1122.16554734), (-1122.16554734));
      complex0.INF.abs();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.multiply(complex0);
      complex0.toString();
      Complex complex3 = complex1.divide(complex2);
      complex1.NaN.abs();
      Complex complex4 = complex1.reciprocal();
      complex0.I.tan();
      complex4.NaN.negate();
      Complex complex5 = complex4.INF.multiply(0);
      Complex complex6 = complex5.INF.pow((-827.17925275407));
      complex6.multiply(0);
      Complex complex7 = complex5.NaN.add(Double.NaN);
      complex7.INF.abs();
      Complex complex8 = complex4.ONE.exp();
      complex3.getField();
      complex4.negate();
      complex0.pow((-469.7380326912));
      complex4.readResolve();
      Complex complex9 = complex8.sqrt();
      Complex complex10 = complex8.ZERO.sinh();
      Complex complex11 = complex8.pow((-760.509187676));
      Complex complex12 = complex11.cos();
      complex12.I.abs();
      Complex complex13 = complex9.divide(Double.NaN);
      complex13.isInfinite();
      Complex complex14 = complex8.reciprocal();
      complex14.ONE.divide(complex11);
      complex0.divide(1.0);
      complex1.getImaginary();
      complex10.nthRoot(3372);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tanh();
      complex0.NaN.subtract(complex1);
      double double0 = 3243.85;
      Complex complex2 = complex0.createComplex(3243.85, 3243.85);
      complex1.NaN.exp();
      Complex complex3 = complex2.pow(3243.85);
      Complex complex4 = complex3.ZERO.add(3243.85);
      Complex complex5 = complex4.conjugate();
      complex5.I.createComplex(3243.85, 3243.85);
      complex3.NaN.pow(3243.85);
      try { 
        complex3.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex0.multiply((-1730));
      complex2.multiply(complex0);
      complex2.I.toString();
      Complex complex4 = complex0.multiply((-1730));
      complex4.ZERO.cosh();
      complex2.toString();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex2.I.divide(0.5376120805740356);
      complex1.I.pow((double) (-1730));
      complex5.abs();
      complex2.subtract(0.0);
      Complex complex7 = complex2.ONE.cosh();
      complex7.INF.divide(0.5376120805740356);
      Complex complex8 = complex6.ONE.pow(0.0);
      Complex complex9 = Complex.valueOf(1562.9289);
      complex8.INF.subtract(complex9);
      Complex complex10 = complex2.createComplex(0.0, 0.0);
      Complex complex11 = complex10.INF.sqrt1z();
      complex11.INF.multiply(complex3);
      Complex complex12 = complex10.exp();
      complex12.pow(0.5376120805740356);
      try { 
        complex6.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      complex1.I.getField();
      Complex complex2 = complex0.multiply(7.690475570840264E294);
      complex2.multiply(Double.NaN);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.I.cosh();
      complex4.ZERO.subtract(complex2);
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = Complex.INF;
      complex6.INF.exp();
      Complex.valueOf(0.0);
      complex5.NaN.multiply(complex4);
      Complex complex8 = complex2.pow(complex7);
      complex8.ZERO.sqrt();
      complex8.ONE.toString();
      complex0.getArgument();
      Complex complex9 = complex2.subtract(complex0);
      Complex complex10 = complex0.pow(complex6);
      complex9.add(complex3);
      Complex complex11 = complex3.asin();
      Complex.valueOf(1.6567914485931396);
      Complex complex12 = complex6.cos();
      complex12.INF.negate();
      Complex complex13 = complex8.exp();
      complex13.I.sqrt();
      complex4.atan();
      Complex.valueOf(4340.2225868);
      complex10.asin();
      complex11.hashCode();
      complex1.acos();
      complex11.sin();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.createComplex(3943.145122544447, 1.3790154522394582E-163);
      complex0.I.toString();
      complex0.INF.nthRoot(851);
      complex0.getImaginary();
      complex0.subtract(0.0);
      complex1.sin();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-226.9));
      complex0.readResolve();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = new Complex((-226.9));
      complex2.NaN.hashCode();
      Complex complex3 = complex2.ZERO.conjugate();
      Complex.valueOf(0.0, (-1.0));
      complex3.pow(808.7801312);
      Complex complex4 = complex0.add(complex2);
      complex2.readResolve();
      complex1.add(complex4);
      double double0 = 0.0;
      complex4.I.readResolve();
      try { 
        complex2.ONE.nthRoot((-683));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -683
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex1.NaN.pow(1.0);
      Complex complex3 = complex1.divide(complex0);
      complex0.getArgument();
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex2.add(complex0);
      Complex complex6 = complex5.add(complex2);
      Complex complex7 = complex2.multiply((-1139.4826482589049));
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      complex5.getArgument();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex2.atan();
      complex9.I.cosh();
      complex0.pow(complex5);
      Complex complex10 = complex6.sqrt1z();
      Complex complex11 = complex10.log();
      Complex complex12 = complex11.cosh();
      complex1.add(complex8);
      complex0.ZERO.toString();
      complex5.multiply(1766);
      Complex.valueOf((-806.36909982), 1512.4);
      complex3.acos();
      complex2.INF.sqrt();
      complex4.multiply((-1139.4826482589049));
      complex11.add(complex2);
      complex12.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex((-483.6));
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.createComplex(0.0, 2474.19925);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract((-1643.799885292574));
      Complex complex1 = complex0.multiply(0);
      complex0.tan();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getArgument();
      complex0.ONE.getField();
      complex0.ONE.multiply(1.5707963267948966);
      Complex complex1 = complex0.INF.divide(0.0);
      Complex complex2 = complex0.INF.add(complex1);
      complex2.I.getField();
      Complex complex3 = complex1.ONE.cosh();
      Complex complex4 = complex0.asin();
      complex4.ZERO.getArgument();
      complex1.isInfinite();
      complex3.getReal();
      complex3.getReal();
      Complex complex5 = Complex.valueOf((-5319.837), 0.0);
      Complex complex6 = complex0.multiply(complex5);
      complex6.INF.multiply((-1));
      complex6.ONE.sin();
      complex1.acos();
      Complex complex7 = complex1.pow(complex3);
      Complex complex8 = complex7.cosh();
      complex8.readResolve();
      complex4.hashCode();
      Complex complex9 = complex0.cos();
      complex9.ZERO.sqrt1z();
      complex4.getArgument();
      complex3.isNaN();
      complex1.add(complex9);
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.abs();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.pow(Double.POSITIVE_INFINITY);
      complex1.isNaN();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = complex2.ZERO.cos();
      complex6.NaN.conjugate();
      Complex complex7 = complex4.subtract(complex2);
      complex7.getImaginary();
      Complex complex8 = complex7.cosh();
      complex7.getImaginary();
      Complex complex9 = complex7.cos();
      complex9.hashCode();
      complex8.ONE.sqrt();
      complex0.equals(complex5);
      complex5.multiply(complex7);
      Complex complex10 = complex7.log();
      complex8.hashCode();
      complex10.asin();
      Complex complex11 = complex10.sin();
      complex11.NaN.createComplex(4439.42818083144, Double.POSITIVE_INFINITY);
      complex2.atan();
      Complex complex12 = complex5.cosh();
      complex12.ZERO.tanh();
      complex9.ZERO.add(complex2);
      complex4.abs();
      Complex complex13 = complex9.sin();
      complex3.add(Double.NaN);
      complex13.getField();
      complex4.tanh();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(644.5488, 0.0);
      Complex complex2 = complex0.conjugate();
      complex2.pow(644.5488);
      complex1.I.sqrt1z();
      Complex complex3 = complex0.tan();
      complex0.INF.multiply(complex1);
      complex3.hashCode();
      Complex complex4 = complex1.createComplex((-2037.104221870816), 264.36);
      complex4.INF.sinh();
      complex2.ONE.pow((-20.0));
      complex2.I.sqrt();
      try { 
        complex3.ZERO.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex1.INF.abs();
      complex0.ZERO.readResolve();
      Complex complex2 = complex1.ONE.tan();
      complex2.add(complex1);
      Complex complex3 = complex0.reciprocal();
      complex0.hashCode();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex1.ZERO.multiply(complex0);
      complex1.I.negate();
      Complex complex2 = complex0.I.negate();
      complex2.pow(1.740249660600677E-253);
      Complex complex3 = complex0.sqrt();
      complex3.sqrt1z();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.ONE.conjugate();
      Complex.valueOf((-1352.0), (-383.4329137181082));
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-1.0074984709952582E-234), (-1.0074984709952582E-234));
      Complex complex1 = Complex.ONE;
      complex0.ZERO.exp();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.NaN.multiply(complex2);
      complex0.ONE.hashCode();
      Complex complex4 = complex0.pow(complex1);
      complex4.nthRoot(1);
      Complex complex5 = complex2.sqrt();
      complex5.add((-20.0));
      complex1.add(0.0);
      Complex complex6 = complex1.acos();
      complex4.sin();
      Complex complex7 = Complex.valueOf((double) 1);
      complex7.subtract(1.2445201873779297);
      Complex complex8 = complex4.sinh();
      complex8.ZERO.negate();
      complex6.getImaginary();
      complex3.subtract((-1684.6));
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2223.37);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.INF.sinh();
      complex2.ONE.toString();
      Complex complex3 = complex0.pow(750.5053342120781);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.NaN.divide(complex2);
      complex4.INF.tanh();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.divide((-3776.67788825));
      complex3.NaN.readResolve();
      complex7.I.multiply(complex2);
      complex6.ONE.getArgument();
      complex6.createComplex((-807.3289791835695), 0.0);
      Complex complex8 = complex6.add(complex3);
      complex8.ONE.cosh();
      complex6.sinh();
      complex8.hashCode();
      complex8.reciprocal();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.multiply((-1));
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex1.createComplex(Double.NaN, Double.NaN);
      Complex complex5 = complex1.subtract(832.5672644744);
      Complex complex6 = complex0.ZERO.multiply((-1));
      double double0 = complex6.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex7 = complex5.INF.log();
      complex2.getArgument();
      complex2.getImaginary();
      Complex complex8 = complex2.sin();
      Complex complex9 = complex7.I.pow(complex4);
      Complex complex10 = complex9.ZERO.pow(832.5672644744);
      assertTrue(complex10.equals((Object)complex3));
      
      Complex complex11 = complex5.INF.subtract((-1487.79948));
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      
      Complex complex12 = complex8.INF.createComplex(Double.NaN, (-61.064713));
      complex8.getField();
      complex2.equals(complex4);
      complex7.getField();
      Complex complex13 = Complex.valueOf((-1.0), 1.0);
      complex12.NaN.log();
      Complex complex14 = complex12.multiply((-1));
      complex12.sin();
      assertEquals((-1.1752011936438014), complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      
      Complex complex15 = Complex.valueOf((-3426.4));
      Complex complex16 = complex7.subtract(1.0);
      Complex complex17 = complex16.NaN.tan();
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertSame(complex5, complex14);
      
      Complex complex18 = complex0.add((-1390.0));
      Complex complex19 = complex18.NaN.subtract(832.5672644744);
      assertEquals((-1390.0), complex18.getReal(), 0.01);
      assertSame(complex19, complex17);
      
      Complex complex20 = complex13.pow((-1487.79948));
      assertEquals(5.271740177608074E-225, complex20.getImaginary(), 0.01);
      assertEquals(1.0315109550559059E-224, complex20.getReal(), 0.01);
      
      double double1 = complex15.getReal();
      assertEquals((-3426.4), double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.INF.subtract(1.1339195187304043E246);
      assertTrue(complex2.isInfinite());
      
      Complex complex3 = complex0.log();
      complex0.NaN.asin();
      Complex complex4 = complex0.ZERO.multiply(37);
      complex4.I.subtract(1.1339195187304043E246);
      Complex complex5 = complex3.subtract(0.0);
      Complex complex6 = complex3.divide(complex5);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex3.asin();
      assertEquals(0.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex4.sqrt1z();
      assertFalse(complex4.equals((Object)complex7));
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex8.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      double double0 = (-2423.225225165);
      Complex complex0 = new Complex((-2423.225225165), (-2423.225225165));
      Complex complex1 = complex0.INF.multiply((-2423.225225165));
      complex1.getField();
      Complex complex2 = complex1.ONE.tanh();
      complex2.NaN.multiply(5.171047077293295E290);
      complex0.ZERO.cos();
      complex0.sqrt();
      try { 
        complex0.nthRoot((-202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -202
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex(1128.4139, 1128.4139);
      complex0.hashCode();
      String string0 = complex0.toString();
      assertEquals("(1128.4139, 1128.4139)", string0);
      
      Complex complex1 = complex0.sqrt1z();
      assertEquals(1128.4141215499335, complex1.getReal(), 0.01);
      assertEquals((-1128.4136784501102), complex1.getImaginary(), 0.01);
  }
}
