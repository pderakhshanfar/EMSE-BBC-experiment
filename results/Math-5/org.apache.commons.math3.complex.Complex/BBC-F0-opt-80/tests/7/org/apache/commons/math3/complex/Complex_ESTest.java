/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:57:39 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.995552216100365E-193, Double.POSITIVE_INFINITY);
      complex0.multiply(519);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sqrt();
      Complex.valueOf(0.0025, 0.0025);
      Complex.valueOf(20.0);
      Complex complex2 = complex0.sin();
      Complex.valueOf(0.0025);
      Complex complex3 = complex0.log();
      complex0.getField();
      complex0.pow(complex2);
      Complex complex4 = complex3.divide(complex1);
      complex4.multiply(5120);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1367.5004), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.I.createComplex((-430.7), Double.POSITIVE_INFINITY);
      complex0.abs();
      Complex complex2 = complex0.ZERO.sqrt();
      complex2.NaN.subtract(complex1);
      Complex complex3 = complex0.ZERO.createComplex(6.283185307179586, (-430.7));
      Complex complex4 = complex3.NaN.sqrt();
      complex4.ONE.exp();
      complex4.NaN.hashCode();
      // Undeclared exception!
      complex4.ZERO.nthRoot(5640);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1708.028354);
      Complex complex2 = complex1.subtract(0.5427329540252686);
      Complex complex3 = complex2.multiply(0.45285870383011684);
      Complex complex4 = complex3.createComplex(0.45285870383011684, 1.9276698418065647E249);
      Complex complex5 = complex4.ONE.sqrt1z();
      complex5.tanh();
      complex3.negate();
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add((-20.0));
      complex1.tanh();
      Complex complex2 = new Complex((-20.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.sqrt1z();
      complex1.NaN.getField();
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex2.INF.pow(complex0);
      complex2.I.exp();
      Complex complex3 = complex2.INF.createComplex((-875.53824479086), (-1858.72345969));
      try { 
        complex3.ZERO.nthRoot((-2570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,570
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3515.8, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.ONE.pow(3515.8);
      Complex complex4 = complex3.NaN.add((-6.712199323081945E-8));
      Complex complex5 = Complex.NaN;
      complex4.NaN.add(complex5);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.conjugate();
      complex8.sqrt1z();
      complex8.abs();
      Complex complex9 = complex8.tan();
      complex1.toString();
      complex7.divide(complex0);
      complex6.ZERO.sqrt();
      complex6.multiply(1085.87623279);
      complex0.sqrt1z();
      complex9.pow(2.5436656904062604E-13);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(20.0);
      complex3.tanh();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.add((-20.0));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(8.94912101169977E158);
      complex0.exp();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex((-2727.6122653888), Double.POSITIVE_INFINITY);
      complex0.INF.getField();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = new Complex(1795, 0.0);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.I;
      complex1.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.valueOf(676.77037961986);
      complex0.tanh();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.add(complex2);
      complex3.INF.getField();
      Complex complex4 = complex3.NaN.cosh();
      complex4.NaN.tanh();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex1.log();
      Complex complex7 = complex3.multiply((-1));
      Complex complex8 = complex6.multiply((-3.64048671691078E55));
      complex3.readResolve();
      complex7.I.abs();
      complex8.add(Double.NaN);
      complex6.divide(complex2);
      Complex complex9 = complex1.sqrt();
      complex7.ZERO.acos();
      complex5.tanh();
      complex9.pow(complex7);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(128.6410024815, 128.6410024815);
      Complex complex1 = complex0.multiply(418);
      Complex.valueOf(128.6410024815);
      complex1.exp();
      complex0.pow(128.6410024815);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(128.6410024815, 128.6410024815);
      complex0.multiply(418);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(128.6410024815);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      complex0.nthRoot(2144239714);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-0.9999865769109), 20.0);
      complex1.tan();
      Complex complex2 = new Complex(3135.8448172);
      Complex complex3 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(128.6410024815, (-2.4467928392518484E-293));
      Complex complex1 = complex0.cosh();
      complex0.divide((-2.4467928392518484E-293));
      Complex complex2 = new Complex(128.6410024815, Double.NaN);
      complex2.acos();
      complex2.sin();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-2.4467928392518484E-293), (-2.4467928392518484E-293));
      Complex complex1 = Complex.ONE;
      complex1.nthRoot(1795);
      complex0.hashCode();
      Complex complex2 = new Complex(794.31287879592);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.valueOf((-2.4467928392518484E-293), Double.NaN);
      complex4.tan();
      Complex complex5 = Complex.INF;
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1040.6798012976392);
      complex0.NaN.reciprocal();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.tanh();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex2.ONE.subtract(1040.6798012976392);
      Complex complex6 = complex0.ZERO.multiply((-1082));
      Complex complex7 = complex6.ZERO.subtract(complex3);
      complex2.I.readResolve();
      Complex complex8 = complex6.I.exp();
      complex8.NaN.exp();
      Complex complex9 = complex6.ZERO.asin();
      complex9.I.sin();
      complex9.ZERO.readResolve();
      complex3.ONE.toString();
      complex0.INF.getField();
      complex1.pow(1.7794190449526737E-106);
      Complex complex10 = complex2.sqrt1z();
      Complex complex11 = complex10.ZERO.atan();
      Complex complex12 = complex2.sin();
      Complex complex13 = complex0.sin();
      complex12.readResolve();
      complex12.ONE.tanh();
      complex2.readResolve();
      complex6.equals(complex4);
      Complex complex14 = complex7.multiply(complex13);
      complex12.abs();
      complex13.getField();
      complex5.log();
      complex7.negate();
      complex11.sqrt1z();
      complex0.subtract(complex2);
      complex6.tanh();
      complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4.995552216100365E-193, (-20.0));
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.sqrt();
      complex1.getField();
      Complex complex4 = complex0.reciprocal();
      complex2.readResolve();
      complex0.multiply(0.8813735870195429);
      complex3.reciprocal();
      complex4.sin();
      Complex complex5 = new Complex(0.27044451236724854, 0.9999999999999998);
      Complex complex6 = Complex.I;
      Complex complex7 = new Complex((-987.173973));
      Complex complex8 = complex1.tan();
      complex8.sqrt1z();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(269.6907577525398, 1719.9940928);
      Complex complex1 = complex0.INF.add(1719.9940928);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.ONE.divide(complex1);
      complex1.atan();
      complex1.sqrt1z();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-2.4467928392518484E-293), (-2.4467928392518484E-293));
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex((-2.4467928392518484E-293));
      Complex complex3 = complex2.pow(complex0);
      complex2.getArgument();
      Complex complex4 = Complex.INF;
      complex4.sin();
      Complex complex5 = Complex.INF;
      complex3.sqrt1z();
      complex5.cosh();
      complex4.pow((-2.4467928392518484E-293));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4245.8));
      complex0.NaN.conjugate();
      complex0.readResolve();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf((-1185.375196053199));
      Complex complex5 = complex4.I.add((-4245.8));
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = complex3.add((-1185.375196053199));
      Complex complex8 = complex5.sqrt();
      Complex.valueOf((-1185.375196053199));
      complex3.subtract(complex2);
      Complex complex9 = complex4.add(2.0);
      Complex complex10 = complex8.pow(complex0);
      Complex complex11 = complex10.INF.multiply(1784);
      complex11.NaN.pow(complex6);
      Complex complex12 = Complex.INF;
      complex0.divide(complex12);
      Complex complex13 = complex6.conjugate();
      complex13.divide((-1185.375196053199));
      complex9.cosh();
      Complex complex14 = complex5.asin();
      complex14.INF.asin();
      complex5.sinh();
      complex11.ONE.sin();
      complex7.divide(20.0);
      complex11.log();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(938);
      complex0.hashCode();
      Complex complex1 = new Complex(2208.658469322122);
      complex1.log();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.valueOf((-816.3596595733075));
      complex0.nthRoot(2613);
      complex2.hashCode();
      Complex complex4 = new Complex(1327.33880668);
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.ZERO;
      complex5.ONE.hashCode();
      Complex complex7 = complex5.multiply((double) 1795);
      complex3.pow(complex7);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.sin();
      complex1.ZERO.tanh();
      Complex.valueOf(554.1018441, 554.1018441);
      complex0.getField();
      complex0.abs();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.divide(128.6410024815);
      Complex complex2 = Complex.valueOf(128.6410024815, 128.6410024815);
      complex1.equals(complex0);
      Complex complex3 = complex1.add(128.6410024815);
      complex2.tan();
      complex2.divide(complex1);
      complex1.getField();
      complex0.reciprocal();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf((-1329.41463072314));
      complex0.equals(complex1);
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.reciprocal();
      Complex.valueOf((-233.9097509969), 114.0);
      complex3.acos();
      Complex complex5 = complex4.negate();
      complex5.ZERO.subtract(complex2);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.multiply(1);
      complex7.INF.subtract((-233.9097509969));
      complex7.INF.add((-2196.5963362));
      complex9.getReal();
      Complex complex10 = complex7.add(837.7113);
      complex10.getImaginary();
      complex1.divide(complex3);
      complex9.tanh();
      complex1.tan();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ONE.asin();
      complex1.INF.getField();
      complex0.isInfinite();
      Complex complex2 = complex0.I.negate();
      complex0.getField();
      Complex complex3 = complex2.ZERO.log();
      complex3.ZERO.readResolve();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.atan();
      Complex complex6 = complex0.log();
      Object object0 = new Object();
      Complex complex7 = complex6.sqrt1z();
      complex2.atan();
      complex6.equals(complex5);
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex8.createComplex(0.2918238639831543, 0.0);
      complex7.reciprocal();
      complex4.multiply(complex9);
      complex3.hashCode();
      complex5.hashCode();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ONE.asin();
      complex1.INF.getField();
      complex0.isInfinite();
      Complex complex2 = complex0.I.negate();
      complex0.getField();
      Complex complex3 = complex1.log();
      Complex complex4 = (Complex)complex3.ZERO.readResolve();
      complex1.getField();
      complex2.log();
      Object object0 = new Object();
      Complex complex5 = complex1.sqrt1z();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex2.acos();
      complex5.equals(complex2);
      complex4.sqrt();
      complex0.createComplex(0.0, 0.0);
      complex2.reciprocal();
      Complex complex8 = complex1.multiply(complex6);
      complex8.hashCode();
      complex4.hashCode();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.getField();
      Complex complex2 = Complex.valueOf(4.50802633729044E-157, 4.50802633729044E-157);
      complex2.isInfinite();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex0.acos();
      complex3.equals(complex0);
      Complex complex7 = complex6.sqrt();
      complex3.createComplex(95.2173617401664, (-1601.6591240180883));
      Complex complex8 = complex0.reciprocal();
      complex2.multiply(complex6);
      complex8.acos();
      Complex complex9 = complex2.negate();
      complex2.tanh();
      complex1.add(complex7);
      complex6.multiply(1);
      complex6.getReal();
      complex5.add(730.344);
      complex1.getImaginary();
      complex5.divide(complex9);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-2.4467928392518484E-293), 4.995552216100365E-193);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt();
      complex2.I.getField();
      Complex complex3 = complex0.reciprocal();
      complex0.I.readResolve();
      Complex complex4 = complex3.multiply((-2.4467928392518484E-293));
      complex4.ONE.sin();
      Complex complex5 = complex3.cos();
      Complex complex6 = Complex.INF;
      complex0.multiply(complex5);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-2.4467928392518484E-293), 4.995552216100365E-193);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sqrt();
      complex2.I.getField();
      Complex complex3 = complex0.reciprocal();
      Object object0 = complex0.I.readResolve();
      Complex complex4 = complex3.multiply((-2.4467928392518484E-293));
      Complex complex5 = complex4.NaN.tan();
      complex5.INF.divide((-2.4467928392518484E-293));
      Complex complex6 = complex4.divide((-1302.86689099656));
      complex2.abs();
      Complex complex7 = complex0.pow(complex3);
      ((Complex) object0).I.subtract(complex0);
      Complex complex8 = complex3.reciprocal();
      Complex.valueOf(2687.110217921, (-2.4467928392518484E-293));
      Complex complex9 = complex8.ONE.subtract((-2.4467928392518484E-293));
      complex7.getReal();
      Complex complex10 = complex6.negate();
      complex3.log();
      complex6.cos();
      complex0.getReal();
      complex5.getImaginary();
      complex10.hashCode();
      Complex complex11 = Complex.valueOf(Double.NaN, 8.869604401089358);
      complex9.equals(complex11);
      complex8.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.15359249711036682);
      complex0.getField();
      complex0.isInfinite();
      Complex complex1 = complex0.negate();
      complex0.getField();
      Complex complex2 = complex1.log();
      complex2.readResolve();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.acos();
      complex2.equals(complex5);
      Complex complex6 = complex1.sqrt();
      complex2.createComplex(943.556388219466, 0.2918238639831543);
      complex6.reciprocal();
      complex2.multiply(complex5);
      complex3.acos();
      complex2.negate();
      Complex complex7 = Complex.valueOf(7.578313650939932E261, (-2594.73866492));
      complex7.tanh();
      Complex complex8 = complex0.add(complex2);
      complex8.multiply(1);
      complex6.getReal();
      Complex complex9 = complex3.add(0.2918238639831543);
      complex9.getImaginary();
      complex4.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex1.I.abs();
      complex1.getField();
      complex1.isInfinite();
      Complex complex2 = complex1.negate();
      complex1.getField();
      Complex complex3 = complex0.log();
      complex3.readResolve();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.atan();
      complex2.acos();
      complex3.equals("AT_LEAST_ONE_ROW");
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex3.createComplex(0.2415644752704905, (-498.21251330326));
      Complex complex8 = complex6.reciprocal();
      complex8.multiply(complex7);
      Complex complex9 = complex2.acos();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = complex10.negate();
      complex11.tanh();
      complex3.add(complex0);
      complex7.multiply(1);
      complex9.getReal();
      complex4.add(837.7113);
      complex2.getImaginary();
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = complex1.multiply(580);
      complex1.toString();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.sin();
      Complex complex5 = Complex.ONE;
      Complex complex6 = new Complex(1140);
      complex6.equals(">\foN&");
      Complex complex7 = Complex.INF;
      complex7.pow((double) 580);
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = Complex.ZERO;
      complex9.hashCode();
      complex8.pow(2.192749500274658);
      Complex complex10 = complex1.multiply(580);
      Complex complex11 = complex10.subtract(Double.NaN);
      complex11.cos();
      Complex complex12 = Complex.ZERO;
      complex12.sqrt();
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex0.getField();
      Complex complex2 = Complex.valueOf(4.50802633729044E-157, 4.50802633729044E-157);
      complex2.isInfinite();
      Complex complex3 = complex1.negate();
      complex0.getField();
      Complex complex4 = complex0.log();
      Object object0 = new Object();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex3.acos();
      complex3.equals(complex0);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex5.createComplex(1039.128323555, 4.50802633729044E-157);
      complex0.reciprocal();
      complex6.multiply(complex2);
      complex3.acos();
      complex6.negate();
      Complex complex10 = complex0.tanh();
      Complex complex11 = new Complex(1039.128323555, 20.0);
      complex7.add(complex11);
      complex10.multiply(1);
      complex11.getReal();
      complex6.add(518.2772378026);
      complex8.getImaginary();
      complex9.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.getField();
      Complex complex2 = complex1.divide(525.039555);
      Complex complex3 = complex1.divide((-680.1967685));
      complex2.abs();
      complex2.pow(complex0);
      Complex complex4 = complex2.divide(complex0);
      complex1.subtract(complex1);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = Complex.valueOf((-2133.9542), 2687.110217921);
      complex5.subtract(2177.05838);
      complex1.getReal();
      Complex complex7 = complex3.negate();
      complex7.pow(complex6);
      complex5.createComplex(Double.POSITIVE_INFINITY, 1054.803689011);
      complex5.exp();
      Complex complex8 = Complex.valueOf(1.7884841356632925E49, (-544.27179));
      complex8.pow(complex2);
      Complex.valueOf(1054.803689011);
      complex1.exp();
      complex5.pow(complex0);
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-2.4467928392518484E-293), 4.995552216100365E-193);
      Complex complex1 = complex0.sqrt();
      complex1.I.getField();
      Complex complex2 = complex0.reciprocal();
      complex0.I.readResolve();
      Complex complex3 = complex2.multiply((-2.4467928392518484E-293));
      Complex complex4 = complex3.NaN.tan();
      complex4.INF.divide((-2.4467928392518484E-293));
      Complex complex5 = complex3.divide((-1302.86689099656));
      complex1.abs();
      Complex complex6 = complex0.pow(complex2);
      Complex complex7 = complex6.ZERO.divide(complex0);
      complex7.I.subtract(complex0);
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = Complex.valueOf((-1302.86689099656), (-2.4467928392518484E-293));
      complex8.ONE.subtract((-2.4467928392518484E-293));
      complex6.getReal();
      complex5.negate();
      complex9.ONE.pow(complex6);
      Complex complex10 = complex8.createComplex((-1302.86689099656), 0.03831886500120163);
      Complex complex11 = complex10.ONE.exp();
      complex11.INF.pow(complex6);
      Complex.valueOf((-2.4467928392518484E-293));
      complex2.exp();
      complex8.pow(complex6);
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex1.I.abs();
      Complex complex2 = complex0.ONE.multiply(1140);
      complex2.I.toString();
      complex0.NaN.sin();
      Complex complex3 = Complex.ONE;
      complex0.equals(complex3);
      Complex complex4 = complex0.pow((-1.4011318775828312));
      complex4.NaN.reciprocal();
      complex0.hashCode();
      Complex complex5 = complex4.pow(3265.14343625);
      complex5.multiply(2049870754);
      Complex complex6 = complex2.subtract(3519.46765598);
      Complex complex7 = complex6.I.cos();
      complex7.hashCode();
      Complex complex8 = Complex.ZERO;
      complex8.equals(complex3);
      Complex complex9 = new Complex(1140, 1.0);
      complex5.subtract(complex9);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.15359249711036682);
      complex0.getImaginary();
      complex0.getArgument();
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(0.0, 0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex1.multiply(2342.4905976);
      complex3.nthRoot(1123);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.divide(complex4);
      complex5.acos();
      complex5.abs();
      complex3.getField();
      complex4.isNaN();
      complex2.nthRoot(1848);
      Complex complex6 = new Complex(1848);
      complex6.INF.abs();
      complex3.equals(complex6);
      complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = (-4728.0);
      Complex complex0 = Complex.valueOf((-4728.0));
      Complex complex1 = complex0.I.exp();
      complex0.NaN.add((-4728.0));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.I.reciprocal();
      complex3.INF.sqrt1z();
      complex2.I.readResolve();
      Complex complex4 = complex0.ONE.add(complex2);
      Complex complex5 = complex2.I.exp();
      complex4.NaN.tanh();
      complex1.ZERO.acos();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ONE.sinh();
      complex7.INF.toString();
      Complex complex8 = complex1.negate();
      complex5.ONE.getField();
      complex0.cos();
      complex8.ZERO.readResolve();
      try { 
        complex8.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      Complex complex1 = complex0.sqrt();
      complex1.ZERO.toString();
      Complex complex2 = complex0.pow(complex1);
      complex2.getField();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex1.I.abs();
      Complex complex2 = complex0.ONE.multiply(1140);
      complex2.I.toString();
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = Complex.ONE;
      complex0.equals(complex4);
      Complex complex5 = complex0.pow(9.452180117175641E-8);
      complex5.NaN.reciprocal();
      complex0.hashCode();
      Complex complex6 = complex5.pow(3265.14343625);
      complex6.ZERO.multiply(complex2);
      complex5.I.acos();
      Complex complex7 = Complex.valueOf(9.452180117175641E-8, 0.0);
      complex7.ZERO.sqrt();
      complex3.getImaginary();
      complex5.add(complex7);
      Complex complex8 = Complex.valueOf(Double.NaN);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1589.031), (-1589.031));
      complex0.toString();
      Complex complex1 = complex0.log();
      Complex complex2 = Complex.valueOf(859.7999305469, (-75.45253530863));
      complex1.I.conjugate();
      complex2.getArgument();
      complex1.add((-75.45253530863));
      Complex complex3 = Complex.valueOf(7220560.323255445, (-1589.031));
      Complex complex4 = complex3.tan();
      complex4.divide(complex2);
      complex3.getField();
      Complex.valueOf((-75.45253530863));
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.log();
      Complex complex5 = complex3.cos();
      complex1.getReal();
      complex1.getImaginary();
      complex4.hashCode();
      Complex complex6 = new Complex(215.6762947986);
      complex6.add(complex2);
      Complex.valueOf(0.0);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-2577.492237755));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      complex1.INF.reciprocal();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.ONE.conjugate();
      complex3.ONE.add((-2577.492237755));
      Complex complex5 = complex1.sin();
      complex3.readResolve();
      Complex complex6 = complex2.acos();
      Complex complex7 = Complex.valueOf((-2577.492237755));
      complex7.conjugate();
      complex6.sinh();
      Complex complex8 = complex6.subtract(1.6496143246803731E199);
      complex5.sin();
      complex6.multiply(complex7);
      Complex.valueOf((-2577.492237755));
      Complex complex9 = new Complex(2576.492237755);
      complex9.add(complex8);
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.sqrt();
      complex1.getField();
      Complex complex3 = Complex.valueOf(914.4933886786674);
      Complex complex4 = complex3.reciprocal();
      complex1.readResolve();
      Complex complex5 = complex1.multiply(914.4933886786674);
      Complex complex6 = complex4.tan();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.divide(5154.984281522988);
      Complex complex9 = complex7.divide(5154.984281522988);
      complex5.abs();
      complex0.pow(complex7);
      complex1.divide(complex0);
      complex8.subtract(complex3);
      Complex complex10 = complex5.reciprocal();
      Complex complex11 = Complex.valueOf((-1302.86689099656), 2342.4905976);
      complex9.subtract(1.4847449808263197E-7);
      Complex complex12 = complex10.I.divide(complex2);
      complex0.getReal();
      complex3.negate();
      complex4.pow(complex10);
      complex3.createComplex(2342.4905976, 914.4933886786674);
      Complex complex13 = complex6.exp();
      complex11.pow(complex8);
      Complex.valueOf(0.0);
      complex1.exp();
      Complex complex14 = new Complex(547.864763867454, 1.5707963267948966);
      Complex complex15 = Complex.ZERO;
      complex14.pow(complex15);
      complex9.asin();
      complex12.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex((-2577.492237755));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.cos();
      complex0.readResolve();
      Complex complex3 = complex2.reciprocal();
      complex1.toString();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex3.sqrt();
      complex1.isInfinite();
      Complex complex6 = complex3.multiply((-2577.492237755));
      complex4.cosh();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.negate();
      Complex complex9 = complex8.asin();
      complex6.sqrt1z();
      Complex complex10 = complex0.log();
      complex2.cos();
      complex2.getReal();
      complex8.getImaginary();
      complex9.hashCode();
      complex8.add(complex10);
      Complex.valueOf(9.215982463319503E224);
      complex5.log();
      complex7.add((-1013.1918071233));
      complex3.createComplex(Double.NaN, (-225.5467));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex1.I.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.add(0.976409344831402);
      complex7.sin();
      complex1.subtract(complex6);
      complex5.sqrt();
      complex2.multiply(3485.09);
      complex7.nthRoot(7);
      Complex.valueOf(3485.09);
      Complex complex8 = new Complex(437.973);
      Complex complex9 = complex7.divide(complex8);
      complex7.acos();
      complex7.abs();
      Complex complex10 = Complex.INF;
      complex10.getField();
      complex3.isNaN();
      complex3.nthRoot(7);
      complex7.equals(complex9);
      complex8.subtract(complex0);
      complex10.divide(437.973);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex1.I.abs();
      Complex complex2 = Complex.valueOf((-1475.63917274), (-1475.63917274));
      complex1.reciprocal();
      Complex complex3 = complex0.sin();
      complex3.reciprocal();
      complex2.tan();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, (-1589.031));
      Complex complex1 = complex0.multiply(1060925515);
      complex1.toString();
      Complex complex2 = Complex.INF;
      complex2.sin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.ONE;
      complex3.equals(complex4);
      Complex complex5 = complex1.pow((double) 1060925515);
      Complex complex6 = complex1.reciprocal();
      complex0.hashCode();
      Complex complex7 = complex5.pow((-1589.031));
      complex4.multiply(complex6);
      complex6.acos();
      Complex complex8 = Complex.valueOf(0.0, 4.656972469326391E285);
      Complex complex9 = new Complex(437.973);
      complex9.sqrt();
      Complex complex10 = Complex.I;
      complex7.multiply(complex1);
      complex8.divide(1.8537070751190186);
      complex2.isInfinite();
      complex1.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.getField();
      complex1.toString();
      Complex complex2 = complex0.ZERO.log();
      complex0.ZERO.getArgument();
      Complex complex3 = complex0.add(1105.7399452091636);
      complex3.NaN.tan();
      complex1.divide(complex2);
      complex3.getField();
      complex1.reciprocal();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex1.I.abs();
      Complex complex2 = complex0.ONE.multiply(1140);
      complex2.I.toString();
      Complex complex3 = complex0.NaN.sin();
      complex0.equals(complex2);
      Complex complex4 = Complex.ZERO;
      complex4.isInfinite();
      Complex complex5 = complex2.multiply(Double.NaN);
      Complex complex6 = complex3.cosh();
      complex4.negate();
      complex4.asin();
      complex0.sqrt1z();
      complex1.log();
      complex5.cos();
      complex0.getReal();
      complex2.getImaginary();
      complex1.hashCode();
      complex4.add(complex6);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.sqrt();
      complex2.ONE.cos();
      complex1.I.readResolve();
      Complex complex3 = complex0.reciprocal();
      complex3.I.toString();
      Complex complex4 = complex0.ZERO.tanh();
      complex3.sqrt();
      complex1.pow(1578.8313572887);
      Complex complex5 = complex4.reciprocal();
      complex4.hashCode();
      complex3.pow(3265.14343625);
      complex4.multiply(complex5);
      complex1.acos();
      Complex.valueOf(2109.461291958528, 2109.461291958528);
      Complex complex6 = Complex.INF;
      complex6.sqrt();
      Complex complex7 = Complex.I;
      try { 
        complex6.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.getField();
      complex1.I.toString();
      complex0.ZERO.log();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.add(1105.7399452091636);
      complex2.NaN.tan();
      Complex complex3 = complex2.pow((-314.0));
      Complex.valueOf((-314.0));
      complex2.add(complex0);
      complex3.getField();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      complex0.toString();
      complex0.nthRoot(1144);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.reciprocal();
      complex0.divide(complex1);
      complex2.getField();
      Complex.valueOf((-3867.199606));
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2510.653));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.ONE;
      complex3.toString();
      complex0.tanh();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.INF;
      complex5.isInfinite();
      complex0.multiply(2.2423186335040668E-8);
      Complex complex6 = complex1.cosh();
      complex6.negate();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex2.sqrt1z();
      complex7.log();
      Complex complex9 = complex3.cos();
      complex9.getReal();
      complex4.getImaginary();
      complex1.add(complex8);
      Complex.valueOf((-2043.6757025434067));
      Complex complex10 = Complex.NaN;
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1589.031), (-1589.031));
      complex0.ONE.reciprocal();
      complex0.ONE.sin();
      Complex complex1 = complex0.reciprocal();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-72.06813550999753));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.subtract(complex0);
      complex2.ONE.sqrt1z();
      Complex complex3 = complex0.createComplex(0.0, (-1305.0));
      Complex complex4 = complex3.INF.sin();
      Complex complex5 = complex3.divide(complex0);
      complex5.ONE.getArgument();
      complex4.exp();
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex3.negate();
      complex5.ONE.add(0.0);
      complex4.acos();
      Complex complex8 = complex7.conjugate();
      Complex complex9 = complex8.NaN.pow(complex5);
      complex9.I.multiply(complex6);
      complex8.ZERO.acos();
      try { 
        complex4.nthRoot((-2267));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,267
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.acos();
      Complex complex1 = new Complex(708.28, 1.8537070751190186);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      complex1.INF.abs();
      complex0.divide(complex1);
      complex3.getArgument();
      Complex complex4 = complex0.tan();
      complex1.pow(0.0);
      complex2.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      complex0.toString();
      complex0.nthRoot(1144);
      complex0.hashCode();
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.reciprocal();
      complex2.ZERO.pow(0.0);
      Complex complex3 = Complex.valueOf((-1007.812));
      complex1.add(complex3);
      complex2.getField();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = complex1.INF.multiply(0.0);
      complex2.ONE.multiply(0);
      complex0.ZERO.add(0.0);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = complex4.I.tanh();
      complex4.I.multiply(1);
      Complex complex6 = complex1.ONE.subtract(complex0);
      complex4.tan();
      Complex complex7 = complex3.NaN.divide(complex1);
      complex7.ZERO.sqrt();
      Complex complex8 = Complex.valueOf(2.0, 0.0);
      Complex complex9 = complex0.divide(complex6);
      Complex complex10 = complex0.add(0.0);
      complex6.isNaN();
      complex6.multiply(complex3);
      complex6.getImaginary();
      complex8.getField();
      Complex complex11 = complex8.sin();
      complex11.subtract(complex0);
      complex9.cosh();
      complex6.pow(0.0);
      complex5.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.negate();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex3.ZERO.tan();
      complex1.I.multiply(0);
      Complex complex5 = complex3.NaN.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex0.add(8.929153091001965E-8);
      complex6.NaN.asin();
      Complex complex7 = Complex.valueOf(8.929153091001965E-8, 8.929153091001965E-8);
      complex7.getField();
      Complex complex8 = complex1.multiply(0.0);
      complex8.ZERO.toString();
      Complex complex9 = complex8.ONE.add(complex2);
      complex3.INF.toString();
      Complex complex10 = complex9.ZERO.subtract(718.163);
      complex10.I.exp();
      Complex complex11 = Complex.INF;
      Complex complex12 = Complex.valueOf((-2365.8525707276035), (-860.5));
      complex12.INF.atan();
      Complex complex13 = complex8.NaN.pow(complex11);
      Complex complex14 = complex13.INF.sinh();
      Complex complex15 = complex7.add(8.929153091001965E-8);
      complex4.subtract(0.0);
      complex8.subtract(complex6);
      complex11.acos();
      complex5.tanh();
      complex15.conjugate();
      complex14.exp();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getArgument();
      Complex complex1 = complex0.ONE.asin();
      complex1.INF.getField();
      complex0.isInfinite();
      complex0.I.negate();
      complex0.getField();
      Complex complex2 = complex0.NaN.divide(1039.128323555);
      Complex complex3 = complex2.ZERO.log();
      complex3.ZERO.readResolve();
      complex1.sqrt1z();
      Complex complex4 = complex0.atan();
      Complex.valueOf(0.2918238639831543, 0.0);
      Complex complex5 = complex1.acos();
      complex5.equals(complex4);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.NaN.createComplex(0.2918238639831543, 0.0);
      complex7.I.reciprocal();
      Complex complex8 = complex6.multiply(complex0);
      Complex complex9 = complex0.acos();
      Complex complex10 = complex9.ONE.negate();
      complex1.tanh();
      complex6.add(complex8);
      Complex complex11 = complex5.multiply(1);
      complex11.getReal();
      complex8.add(837.7113);
      complex9.getImaginary();
      complex10.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2510.653));
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.I.pow(complex0);
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.ZERO.sinh();
      complex4.NaN.acos();
      complex2.I.createComplex((-2510.653), (-2510.653));
      Complex.valueOf((-2510.653), 4122.69);
      complex0.getField();
      complex0.getField();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(3412.779291);
      Complex complex1 = complex0.multiply(3412.779291);
      Complex complex2 = complex1.I.asin();
      complex0.nthRoot(1);
      Complex complex3 = complex0.cosh();
      Complex.valueOf(0.0, 3412.779291);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex3.ONE.tanh();
      Complex.valueOf(0.2592042088508606, (-725.0));
      Complex complex6 = complex4.ONE.sin();
      Complex complex7 = complex6.I.divide(0.2592042088508606);
      complex6.I.conjugate();
      Complex complex8 = complex3.multiply(3412.779291);
      Complex complex9 = complex2.subtract(complex3);
      Complex complex10 = Complex.valueOf((double) 1, 3412.779291);
      complex9.tanh();
      complex10.sqrt1z();
      complex5.acos();
      complex7.NaN.sinh();
      complex8.abs();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(92.894475, 564.7);
      complex0.ZERO.tan();
      complex0.ONE.pow(92.894475);
      Complex.valueOf((-1445.8301385393), (-1445.8301385393));
      int int0 = (-2266);
      try { 
        complex0.nthRoot((-2266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,266
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.createComplex(Double.POSITIVE_INFINITY, (-597.158));
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex0.getField();
      complex0.multiply(complex1);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = Complex.valueOf(7.232201430620959E-8, 6.283185307179586);
      Complex complex7 = complex5.tan();
      complex0.ZERO.getField();
      Complex complex8 = complex7.NaN.log();
      Complex complex9 = complex8.I.tanh();
      complex9.NaN.getField();
      complex8.INF.sin();
      Complex complex10 = complex8.NaN.asin();
      complex2.I.add(complex4);
      complex10.ONE.exp();
      complex7.getField();
      complex7.multiply(8.90737333900943E103);
      complex6.toString();
      Complex complex11 = complex3.sinh();
      complex3.toString();
      complex4.atan();
      complex6.getImaginary();
      complex3.negate();
      complex11.nthRoot(1052);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1329.41463072314), (-1329.41463072314));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.getField();
      complex1.I.toString();
      Complex complex2 = complex0.ZERO.log();
      complex0.ZERO.getArgument();
      Complex complex3 = complex0.add(1105.7399452091636);
      complex3.NaN.tan();
      complex1.divide(complex2);
      complex3.getField();
      Complex complex4 = Complex.valueOf((-571.141));
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.add(1361.7150275);
      complex2.ZERO.getField();
      complex2.ONE.getField();
      complex2.sinh();
      Complex complex3 = complex0.INF.tanh();
      complex3.I.getArgument();
      Complex complex4 = complex1.pow(1361.7150275);
      complex1.ZERO.sinh();
      Complex complex5 = complex4.multiply(0);
      Complex complex6 = complex4.INF.cos();
      complex6.ZERO.exp();
      complex6.ZERO.exp();
      complex6.ZERO.pow(3256.099305);
      complex4.createComplex(0.0, 1221.4219307012);
      Complex complex7 = Complex.valueOf(0.0);
      Complex.valueOf((-704.7815337389503), Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(1.0, (-986.0));
      complex4.conjugate();
      complex8.tanh();
      complex7.readResolve();
      complex8.sin();
      complex3.cos();
      complex5.multiply(2075.787344485);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex2.I.subtract(complex0);
      complex3.sinh();
      complex0.isInfinite();
      complex1.hashCode();
      Complex complex4 = complex0.reciprocal();
      complex2.INF.multiply(1);
      Complex complex5 = complex0.multiply((-3332.41));
      complex2.ONE.multiply(0.0);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.INF.tanh();
      Complex complex8 = complex4.multiply(8.28479585346867E265);
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      complex8.multiply((-2534));
      complex8.sqrt();
      complex3.atan();
      Complex complex9 = complex1.atan();
      complex9.cosh();
      complex7.toString();
      complex0.pow((-522.3));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.acos();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.createComplex(0.5751199722290039, 0.5751199722290039);
      Complex complex3 = complex2.exp();
      complex1.getReal();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(1843.27693209);
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.multiply(2237.1968215498396);
      Complex complex4 = complex3.ZERO.subtract(0.0);
      complex3.ZERO.createComplex(0.0, 0.0);
      complex4.ONE.sqrt();
      complex0.ONE.toString();
      Complex complex5 = complex0.add(1843.27693209);
      complex5.ZERO.hashCode();
      Complex complex6 = complex5.tanh();
      complex6.INF.asin();
      complex5.ZERO.reciprocal();
      complex0.getArgument();
      complex5.tan();
      complex2.divide(complex1);
      Complex complex7 = complex1.reciprocal();
      complex4.NaN.pow((-20.0));
      complex7.NaN.atan();
      complex4.cos();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      Complex complex1 = complex0.ONE.pow(6.283185307179586);
      Complex complex2 = Complex.valueOf(6.283185307179586);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.ZERO.divide((-1865.6105553229));
      Complex complex6 = complex3.I.divide(complex0);
      complex6.NaN.sinh();
      complex6.ZERO.multiply(0);
      complex2.INF.pow(complex1);
      complex0.INF.toString();
      Complex complex7 = complex0.exp();
      complex7.ONE.sinh();
      Complex complex8 = complex4.sqrt();
      complex8.sqrt();
      complex4.getReal();
      Complex complex9 = complex5.conjugate();
      complex8.getField();
      complex1.multiply(complex9);
      complex4.getReal();
      complex1.ZERO.readResolve();
      complex6.sqrt1z();
      Complex complex10 = complex7.sqrt();
      Complex complex11 = new Complex(Double.NaN, 6.283185307179586);
      complex1.subtract(complex11);
      complex1.isInfinite();
      complex10.asin();
      Complex.valueOf(0.39958852529525757);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-2.4467928392518484E-293), 0.0);
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.sqrt();
      complex2.I.getField();
      Complex complex3 = complex0.reciprocal();
      complex0.I.readResolve();
      Complex complex4 = complex3.multiply((-2.4467928392518484E-293));
      Complex complex5 = complex4.NaN.tan();
      complex5.INF.divide((-2.4467928392518484E-293));
      Complex complex6 = complex4.divide((-1302.86689099656));
      complex2.abs();
      Complex complex7 = complex0.pow(complex3);
      Complex complex8 = complex7.ZERO.divide(complex1);
      complex8.I.subtract(complex0);
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = Complex.valueOf(2687.110217921, (-2.4467928392518484E-293));
      complex9.ONE.subtract((-2.4467928392518484E-293));
      complex7.getReal();
      complex6.negate();
      complex10.ONE.pow(complex7);
      Complex complex11 = complex9.createComplex(2687.110217921, 0.03831886500120163);
      Complex complex12 = complex11.ONE.exp();
      complex12.INF.pow(complex7);
      Complex.valueOf((-2.4467928392518484E-293));
      complex3.exp();
      complex9.pow(complex7);
      complex10.asin();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.cosh();
      complex0.atan();
      Complex complex2 = complex0.atan();
      complex2.ZERO.divide(20.0);
      Complex complex3 = complex2.cosh();
      complex3.I.cosh();
      complex2.multiply(0);
      complex1.subtract((-1536.01785844888));
      complex0.sqrt();
      complex1.divide((-2.8977490516960565E-8));
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.I.getArgument();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.INF.cos();
      Complex complex3 = complex0.INF.atan();
      complex3.readResolve();
      complex0.getArgument();
      complex2.abs();
      complex0.negate();
      Complex complex4 = new Complex(0.0, Double.NaN);
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex4.add(complex1);
      complex6.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.acos();
      complex1.I.abs();
      Complex complex2 = complex0.ONE.multiply(1140);
      complex2.I.toString();
      Complex complex3 = complex0.NaN.sin();
      Complex complex4 = Complex.ONE;
      complex0.equals(complex4);
      Complex complex5 = complex0.pow(9.452180117175641E-8);
      complex5.NaN.reciprocal();
      complex0.hashCode();
      Complex complex6 = complex5.pow(3265.14343625);
      complex6.ZERO.multiply(complex2);
      Complex complex7 = complex5.I.acos();
      Complex complex8 = Complex.valueOf(9.452180117175641E-8, 0.0);
      Complex complex9 = complex8.ZERO.sqrt();
      Complex complex10 = Complex.I;
      complex9.ONE.multiply(complex10);
      complex5.divide(0.0);
      complex3.isInfinite();
      complex7.pow(3.413310324247329E242);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.hashCode();
      Complex complex1 = complex0.pow((-4022.662973965895));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.I.pow(complex1);
      Complex complex4 = complex3.I.multiply(complex0);
      complex0.getArgument();
      complex1.toString();
      complex0.getArgument();
      Complex complex5 = complex1.multiply(1.5707963267948966);
      complex5.I.conjugate();
      complex1.ZERO.sinh();
      complex2.cosh();
      complex3.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.I.tanh();
      complex2.ZERO.negate();
      complex2.NaN.sinh();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.INF.subtract(complex1);
      complex3.sqrt1z();
      double double0 = 0.0;
      Complex complex4 = Complex.valueOf(1086.27292893821, 0.0);
      complex0.INF.hashCode();
      Complex complex5 = complex4.ZERO.exp();
      complex4.INF.pow((-333.993612555675));
      Complex complex6 = complex5.INF.multiply(complex4);
      complex6.I.sqrt1z();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-2577.492237755));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.I.log();
      complex1.INF.reciprocal();
      Complex complex3 = complex2.I.acos();
      Complex complex4 = complex3.ONE.conjugate();
      Complex complex5 = complex3.ONE.add((-2577.492237755));
      complex1.sin();
      Complex complex6 = complex2.subtract(complex1);
      Complex complex7 = complex3.sqrt();
      complex7.I.multiply((-2227.02837792));
      complex0.nthRoot(1123);
      Complex complex8 = Complex.valueOf((double) 1123);
      complex2.ONE.divide(complex8);
      Complex complex9 = complex0.acos();
      complex9.ONE.abs();
      complex0.getField();
      complex6.isNaN();
      complex5.nthRoot(1123);
      complex5.equals("org.apache.commons.math3.complex.Complex");
      complex4.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-1396.589679278393));
      Complex complex1 = complex0.NaN.add((-1396.589679278393));
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.conjugate();
      complex0.toString();
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex2.add(complex3);
      Complex complex5 = complex4.INF.tan();
      complex5.ONE.subtract(complex4);
      complex2.add(0.0);
      Complex complex6 = complex3.ZERO.cos();
      complex4.I.atan();
      complex1.hashCode();
      Complex complex7 = complex4.atan();
      Complex complex8 = complex6.negate();
      complex8.INF.conjugate();
      Complex complex9 = complex6.atan();
      complex7.NaN.pow(0.0);
      complex8.sinh();
      complex2.tanh();
      Complex complex10 = complex7.divide(complex9);
      complex10.INF.conjugate();
      complex4.toString();
      complex2.hashCode();
      Complex complex11 = complex3.subtract(complex2);
      complex11.readResolve();
      complex11.I.toString();
      complex5.asin();
      complex11.getReal();
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      double double0 = 22.1566;
      Complex complex0 = new Complex((-3834.614), 22.1566);
      Complex complex1 = complex0.divide((-2158.080397));
      Complex complex2 = complex0.divide(complex1);
      complex2.abs();
      Complex complex3 = complex0.pow((-3834.614));
      try { 
        complex3.NaN.nthRoot((-292));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -292
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.ZERO.hashCode();
      complex1.ONE.conjugate();
      complex1.INF.getArgument();
      Complex complex2 = complex0.divide(complex1);
      complex2.INF.toString();
      Complex complex3 = complex2.NaN.reciprocal();
      complex2.ZERO.atan();
      Complex complex4 = complex3.I.add(1.8014398509481984E16);
      complex3.ZERO.negate();
      Complex complex5 = complex1.sinh();
      complex2.I.hashCode();
      Complex complex6 = complex0.subtract(complex5);
      complex6.ZERO.getField();
      complex1.asin();
      complex1.ZERO.sqrt();
      Complex complex7 = complex2.atan();
      complex7.cosh();
      complex5.multiply(1342);
      complex3.acos();
      Complex complex8 = complex3.conjugate();
      Complex complex9 = Complex.valueOf((-2087.948865694));
      complex9.INF.nthRoot(1169);
      Complex.valueOf(0.0);
      complex4.cosh();
      complex8.pow((-2087.948865694));
      complex4.multiply(1.8014398509481984E16);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.ZERO.reciprocal();
      Complex complex4 = complex0.add(complex1);
      complex4.I.getArgument();
      complex4.ZERO.nthRoot(940);
      complex4.divide(7.2831502374676964E-9);
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex3.ZERO.atan();
      complex6.INF.nthRoot(940);
      Complex complex7 = complex3.createComplex((-735.7525112468475), 1862.42536457839);
      complex7.ZERO.toString();
      complex7.INF.conjugate();
      complex0.add(complex5);
      complex1.abs();
      Complex complex8 = complex2.add(complex1);
      Complex complex9 = complex8.asin();
      Complex complex10 = complex9.ONE.multiply((double) 940);
      complex5.getArgument();
      complex5.nthRoot(940);
      complex1.divide(complex10);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double double0 = 1.1864056832305874E-207;
      Complex complex0 = Complex.valueOf(1.1864056832305874E-207, 2.0);
      Complex.valueOf(0.0);
      complex0.ZERO.getField();
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex1.ONE.log();
      complex2.INF.sqrt1z();
      complex2.cosh();
      try { 
        complex1.ONE.nthRoot((-3107));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,107
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex1.ONE.tan();
      Complex complex3 = complex0.INF.sinh();
      Complex complex4 = complex3.I.tanh();
      complex4.NaN.readResolve();
      Complex complex5 = complex0.conjugate();
      complex5.subtract(complex0);
      complex5.I.getField();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.I.exp();
      complex7.ZERO.acos();
      Complex complex8 = complex0.sinh();
      complex8.ONE.multiply(0.0);
      int int0 = (-773);
      complex2.INF.atan();
      try { 
        complex8.NaN.nthRoot((-773));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -773
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      double double0 = 3049.0509103372365;
      Complex complex0 = Complex.valueOf(3049.0509103372365);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.exp();
      complex2.ZERO.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.NaN.multiply((-1.0));
      complex4.ZERO.pow(0.0);
      try { 
        complex4.ONE.nthRoot((-807));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -807
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.divide(128.6410024815);
      complex0.hashCode();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-349.77671));
      assertEquals((-349.77671), complex1.getReal(), 0.01);
      
      Complex complex2 = complex0.NaN.cos();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.ZERO.pow(complex0);
      Complex complex5 = complex0.multiply(0);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex3.tanh();
      Complex complex9 = complex3.log();
      Complex complex10 = complex9.INF.add((double) 0);
      Complex complex11 = complex7.ONE.conjugate();
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      
      complex0.getField();
      Complex complex12 = complex7.acos();
      complex12.ONE.getField();
      Complex complex13 = Complex.valueOf((double) 0, 85.761);
      Complex complex14 = complex12.ZERO.divide(complex10);
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      
      complex13.I.createComplex(696.0, 525.5614940716);
      complex7.getImaginary();
      Complex complex15 = complex13.subtract((-349.77671));
      Complex complex16 = complex12.pow(696.0);
      complex2.hashCode();
      complex2.equals(complex8);
      assertSame(complex2, complex6);
      
      Complex complex17 = complex15.multiply(complex3);
      assertSame(complex3, complex8);
      assertSame(complex17, complex16);
      assertEquals(85.761, complex13.getImaginary(), 0.01);
      assertEquals(349.77671, complex15.getReal(), 0.01);
      assertSame(complex17, complex4);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.add(0.0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = new Complex(0.0, (-1.0));
      Complex complex3 = complex2.NaN.pow((-1.0));
      Complex complex4 = complex3.ONE.divide(0.0);
      Complex complex5 = complex0.multiply(complex2);
      assertTrue(complex5.equals((Object)complex1));
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      complex3.readResolve();
      complex2.isNaN();
      complex2.getField();
      double double0 = complex4.abs();
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(Double.NaN, double0, 0.01);
      assertSame(complex4, complex3);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex(0.231700599193573);
      Complex complex1 = complex0.ZERO.cosh();
      complex1.NaN.asin();
      complex0.INF.getArgument();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.sinh();
      complex3.ZERO.abs();
      Complex complex4 = complex2.NaN.reciprocal();
      complex2.INF.nthRoot(4294);
      complex0.ZERO.readResolve();
      complex0.nthRoot(516);
      Complex complex5 = complex1.exp();
      complex5.ONE.tanh();
      complex5.NaN.abs();
      complex2.I.cosh();
      complex0.abs();
      try { 
        complex4.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
