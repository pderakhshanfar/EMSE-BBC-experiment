/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 13:59:07 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(2780.543690868388, 2780.543690868388);
      complex0.INF.nthRoot(462);
      Complex complex1 = complex0.multiply((-2.6033824355191673E-8));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.log();
      Complex.valueOf((-1637.4820343448441), 1.2915711402893066);
      Complex complex4 = complex2.conjugate();
      complex1.exp();
      Complex complex5 = complex4.pow(complex3);
      complex5.sin();
      complex3.sqrt();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.770851254383403E14, 20.0);
      complex0.tan();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.exp();
      complex0.nthRoot(856);
      Complex complex3 = complex2.tan();
      Complex.valueOf(1.0);
      complex3.abs();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-4.9E-324));
      Complex complex2 = complex0.I.divide(complex1);
      complex2.I.conjugate();
      complex0.asin();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex2.tan();
      complex3.INF.abs();
      Complex complex4 = complex2.I.exp();
      Complex complex5 = complex0.sqrt();
      complex2.INF.nthRoot(1);
      complex5.I.add(complex4);
      Complex complex6 = complex1.subtract((-20.0));
      complex1.pow(complex0);
      Complex complex7 = complex6.exp();
      complex7.ONE.toString();
      Complex complex8 = complex4.createComplex((-20.0), (-2848.88225));
      complex8.tan();
      complex4.add((-2848.88225));
      Complex complex9 = complex1.add(complex5);
      Complex complex10 = complex9.ZERO.sqrt();
      Complex complex11 = complex10.NaN.multiply(complex8);
      complex0.INF.tanh();
      complex10.ONE.add((-20.0));
      complex6.conjugate();
      complex6.createComplex(7.48533983136081E-196, (-2848.88225));
      complex4.add(7.48533983136081E-196);
      complex1.add(complex11);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex1.multiply(1073741824);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tan();
      complex2.INF.nthRoot(2518);
      Complex complex3 = complex2.add(complex1);
      complex3.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1538.2922, 3.47);
      Complex complex1 = Complex.valueOf(1993.97415296552, 1.770851254383403E14);
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.valueOf((-1557.2295554), 1993.97415296552);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.add(complex2);
      complex0.nthRoot(321);
      complex4.nthRoot(321);
      Complex.valueOf(1.770851254383403E14, (-1557.2295554));
      Complex complex6 = complex1.atan();
      Complex complex7 = Complex.INF;
      complex1.readResolve();
      Complex.valueOf(1993.97415296552, 0.0);
      Complex complex8 = complex5.tanh();
      complex6.tan();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getReal();
      complex0.acos();
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      complex0.ONE.getArgument();
      Complex complex1 = Complex.valueOf(20.0, 1251.2047752302615);
      Complex complex2 = complex1.tanh();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.toString();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ONE.multiply((-6.619064395428225E206));
      complex0.abs();
      Complex complex4 = complex1.multiply(0.0);
      Complex complex5 = complex4.NaN.pow((-6.619064395428225E206));
      complex1.sqrt1z();
      Complex complex6 = complex0.log();
      Complex complex7 = new Complex((-6.619064395428225E206));
      complex6.I.subtract(complex7);
      Complex complex8 = complex2.sin();
      Complex complex9 = complex3.ONE.asin();
      complex9.ONE.multiply(1.0);
      Complex complex10 = complex8.ONE.atan();
      complex3.acos();
      Complex complex11 = complex1.I.tanh();
      complex11.INF.cosh();
      complex10.log();
      complex5.reciprocal();
      Complex complex12 = complex2.multiply((-1504.05443));
      complex2.abs();
      complex12.multiply(2684);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      complex0.tanh();
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      complex2.isNaN();
      Complex complex3 = complex1.sin();
      complex1.sinh();
      complex3.tanh();
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex1.pow((-1964.987356));
      complex2.isNaN();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.multiply(34);
      Complex complex6 = new Complex(1796.59671);
      complex1.sinh();
      Complex complex7 = new Complex(20.0);
      complex7.tanh();
      Complex complex8 = complex4.tanh();
      complex6.acos();
      complex8.tan();
      complex1.sqrt1z();
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.ZERO;
      complex2.sqrt1z();
      Complex complex4 = complex1.exp();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-560.183654204733));
      Complex complex1 = complex0.sinh();
      complex0.NaN.exp();
      complex1.tanh();
      complex1.sqrt1z();
      Complex complex2 = Complex.I;
      complex1.divide(complex0);
      Complex complex3 = complex2.reciprocal();
      try { 
        complex3.nthRoot((-2439));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,439
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.abs();
      complex0.ONE.hashCode();
      complex0.tanh();
      complex0.ZERO.negate();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex(7.48533983136081E-196, 767.8697554125);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(3489);
      Complex complex3 = new Complex(7.48533983136081E-196);
      complex3.ONE.readResolve();
      Complex complex4 = complex2.createComplex(2396.0, (-2100.843937));
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex1.divide(complex4);
      complex4.conjugate();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex5.divide(630.237);
      Complex complex9 = complex2.cos();
      Complex complex10 = complex6.cosh();
      complex8.atan();
      Complex.valueOf(7.48533983136081E-196, 630.237);
      complex1.readResolve();
      Complex complex11 = complex9.add(complex10);
      complex11.atan();
      complex2.reciprocal();
      complex5.conjugate();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex1.I.toString();
      Complex complex2 = complex0.ONE.log();
      Complex complex3 = complex0.ONE.pow(complex1);
      complex0.abs();
      complex0.createComplex(Double.NaN, Double.NaN);
      Complex complex4 = complex0.multiply(4.0393406998639495E-16);
      complex4.INF.toString();
      complex4.toString();
      Complex.valueOf((-20.0));
      Complex complex5 = Complex.valueOf(567.836497448);
      Complex complex6 = complex4.sinh();
      complex2.conjugate();
      complex0.cos();
      complex2.subtract(complex0);
      Complex complex7 = complex3.sinh();
      Complex complex8 = complex7.INF.sin();
      complex8.ONE.sinh();
      Complex complex9 = complex5.acos();
      Complex complex10 = complex4.acos();
      Complex complex11 = complex5.sqrt1z();
      complex6.multiply(2145561062);
      Complex complex12 = Complex.valueOf((-20.0), (-20.0));
      complex10.readResolve();
      complex11.atan();
      complex12.tan();
      complex6.divide(complex9);
      try { 
        complex4.nthRoot((-3202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,202
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4509.47374, (-967.37));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.log();
      complex2.multiply(complex0);
      complex3.multiply(2.156647205352783);
      Complex complex4 = complex2.acos();
      Complex complex5 = new Complex((-967.37), Double.NaN);
      complex5.getArgument();
      Complex complex6 = Complex.I;
      complex1.isInfinite();
      Complex complex7 = Complex.ONE;
      complex4.add(complex7);
      Complex complex8 = Complex.I;
      complex8.tan();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.exp();
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 4.543741888324877);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.INF.divide(complex1);
      complex4.NaN.nthRoot(67);
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex0.I.cos();
      complex6.ONE.sqrt();
      complex5.ZERO.atan();
      complex0.subtract(3.4674011002723395);
      complex0.INF.toString();
      Complex complex7 = complex2.acos();
      complex7.nthRoot(2184);
      complex7.I.createComplex(Double.NaN, (-1.0));
      complex5.acos();
      complex2.asin();
      Complex complex8 = complex7.asin();
      complex8.NaN.createComplex(333.6071839, (-724.1));
      complex8.NaN.pow(complex2);
      Complex complex9 = Complex.valueOf(1895.0072);
      Complex complex10 = complex9.ONE.cos();
      complex10.NaN.conjugate();
      complex3.atan();
      Complex.valueOf(3.4674011002723395, 1895.0072);
      complex0.readResolve();
      complex9.conjugate();
      complex7.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4509.47374);
      complex0.pow(4509.47374);
      Complex complex1 = complex0.multiply((-2045222521));
      complex0.multiply(6.283185307179586);
      Complex complex2 = Complex.valueOf(2701.0468467);
      Complex complex3 = Complex.ZERO;
      complex3.getArgument();
      double double0 = 3.4674011002723395;
      complex2.readResolve();
      Complex complex4 = Complex.valueOf((double) (-2045222521), 4.958369974640573E193);
      complex0.sinh();
      complex4.asin();
      Complex complex5 = Complex.valueOf(3.4674011002723395, 2.0);
      complex5.add(complex1);
      try { 
        complex0.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.I.toString();
      Complex complex2 = Complex.I;
      complex2.isInfinite();
      complex2.equals(complex1);
      complex1.sin();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(304.81662, 1029.5318405126);
      Complex complex1 = complex0.multiply((-1111));
      Complex complex2 = complex0.multiply(304.81662);
      complex1.pow(complex2);
      Complex complex3 = complex2.add((double) (-1111));
      Complex complex4 = complex3.acos();
      complex4.NaN.createComplex(624.93, 0.004091311589615834);
      Complex complex5 = complex0.sqrt1z();
      complex3.I.readResolve();
      Complex complex6 = complex1.log();
      Complex complex7 = complex3.subtract(complex5);
      Complex complex8 = complex7.ONE.negate();
      complex5.asin();
      complex5.I.createComplex((-383.445), 1029.5318405126);
      complex2.pow(complex1);
      Complex complex9 = complex7.acos();
      complex8.NaN.divide(complex9);
      complex8.ONE.negate();
      Complex complex10 = complex8.cos();
      complex10.ZERO.createComplex((-2.929085835358592E-8), 304.81662);
      complex7.asin();
      complex6.sinh();
      Complex.valueOf(4387.8641, (-20.0));
      complex9.multiply((-1111));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 5035.151;
      Complex complex0 = new Complex(7.48533983136081E-196, 767.8697554125);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(3489);
      Complex complex3 = new Complex(6.283185307179586);
      Complex complex4 = complex0.multiply((-3499.5));
      Complex.valueOf(Double.NaN);
      complex1.getArgument();
      double double1 = 1.7708512543837062E14;
      complex1.readResolve();
      Complex complex5 = Complex.valueOf((double) 3489, (double) 3489);
      complex1.sinh();
      Complex complex6 = complex2.asin();
      complex4.add(complex3);
      complex6.nthRoot(2688);
      try { 
        complex5.nthRoot((-330));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -330
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex1.multiply(complex0);
      complex2.multiply((-334.778086847621));
      Complex complex3 = new Complex(Double.NaN);
      Complex complex4 = Complex.NaN;
      complex3.INF.multiply(complex4);
      Complex complex5 = complex3.acos();
      complex3.getArgument();
      complex2.isInfinite();
      Complex complex6 = complex5.sqrt1z();
      complex6.ZERO.pow(Double.NaN);
      complex3.add((-334.778086847621));
      complex3.add(766.8697554125);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      complex1.abs();
      Complex complex3 = Complex.NaN;
      Complex complex4 = new Complex(Double.NaN, Double.POSITIVE_INFINITY);
      complex2.divide(complex3);
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex0.sin();
      complex6.multiply(1666);
      complex5.multiply(Double.NaN);
      Complex complex7 = new Complex(0.0013023049264330399, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(7.48533983136081E-196, 767.8697554125);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.tan();
      complex2.sqrt1z();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.pow(767.8697554125);
      complex4.isNaN();
      Complex complex6 = Complex.ZERO;
      complex3.nthRoot(239);
      complex5.nthRoot(239);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.acos();
      complex2.getArgument();
      Complex complex7 = complex6.multiply(2748);
      complex0.I.tanh();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, (-2.033535241174959E7));
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex4.acos();
      complex10.NaN.abs();
      complex9.reciprocal();
      complex7.multiply(7);
      complex3.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.I.tan();
      Complex complex3 = complex0.sqrt1z();
      complex0.reciprocal();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.NaN.divide(complex2);
      complex4.isInfinite();
      complex1.cos();
      Complex complex6 = complex5.cosh();
      complex6.atan();
      complex0.readResolve();
      complex0.tanh();
      complex5.tan();
      complex2.sin();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(7.48533983136081E-196, 767.8697554125);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.multiply(3489);
      Complex complex3 = new Complex(6.283185307179586);
      Complex complex4 = complex3.createComplex((-2100.843937), 5035.151);
      Complex complex5 = Complex.NaN;
      complex1.divide(complex5);
      Complex complex6 = complex5.divide((double) 3489);
      Complex complex7 = complex2.cos();
      complex4.cosh();
      Complex complex8 = complex7.atan();
      complex6.readResolve();
      Complex complex9 = complex8.tanh();
      complex7.tan();
      complex9.sin();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex2.createComplex(20.0, Double.POSITIVE_INFINITY);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = complex6.conjugate();
      Complex complex9 = Complex.INF;
      complex5.divide(0.0);
      complex0.cos();
      complex6.cosh();
      complex6.atan();
      complex7.readResolve();
      Complex complex10 = complex4.tanh();
      complex10.tan();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex11.sin();
      complex12.ONE.pow(complex8);
      complex4.cosh();
      complex3.atan();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.log();
      complex1.sqrt();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex4.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.acos();
      complex4.getArgument();
      Complex complex7 = complex1.cosh();
      Complex complex8 = complex2.atan();
      complex8.ZERO.subtract(10.77983);
      complex5.readResolve();
      complex7.tanh();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex7.sin();
      complex9.cosh();
      complex10.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      Complex complex1 = complex0.INF.cosh();
      complex0.ZERO.createComplex((-922.97053691322), (-1614.14900506));
      complex1.I.getArgument();
      complex1.createComplex(0.31132614612579346, 0.5180262327194214);
      Complex complex2 = Complex.NaN;
      Complex complex3 = Complex.valueOf((-922.97053691322), 1270.49503362);
      complex3.divide(complex1);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.divide((-922.97053691322));
      complex7.cos();
      complex5.cosh();
      Complex complex8 = complex5.atan();
      complex7.readResolve();
      complex1.tanh();
      complex6.tan();
      complex3.sin();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.multiply(783);
      Complex complex4 = complex1.createComplex(1.43307534926862E-4, 1.43307534926862E-4);
      Complex complex5 = complex0.divide(complex4);
      complex0.conjugate();
      Complex complex6 = complex3.divide((-290.0193));
      Complex complex7 = complex0.cos();
      Complex complex8 = new Complex(783, 1.43307534926862E-4);
      complex4.atan();
      complex6.readResolve();
      complex4.tanh();
      complex2.tan();
      complex5.sin();
      complex3.cosh();
      complex7.negate();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5035.151, 1.7331079674066365E-9);
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.log();
      Complex complex4 = complex2.sqrt();
      complex4.ZERO.multiply(complex2);
      complex3.multiply(complex4);
      Complex complex5 = complex2.multiply(25.6);
      Complex complex6 = complex3.add((-1923.9533481));
      complex5.acos();
      complex5.asin();
      complex1.add(complex5);
      Complex complex7 = Complex.ZERO;
      complex6.isNaN();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 1.7331079674066365E-9);
      complex8.isNaN();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = Complex.NaN;
      complex4.abs();
      complex3.tanh();
      Complex complex5 = complex2.divide(complex4);
      complex2.sqrt1z();
      complex1.sin();
      complex5.multiply((-1530));
      complex5.createComplex(Double.NaN, (-1223.860053254));
      complex2.multiply((-1148.0));
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.createComplex(6965.017247005038, 6965.017247005038);
      complex1.getArgument();
      Complex complex3 = complex2.add(6.076029840339376E37);
      complex2.ONE.add(0.0);
      Complex complex4 = Complex.valueOf((-1614.14900506), Double.NaN);
      complex0.acos();
      complex3.ZERO.hashCode();
      complex4.asin();
      complex4.add(complex3);
      Complex complex5 = Complex.ZERO;
      complex4.isNaN();
      Complex complex6 = Complex.valueOf(Double.NaN, Double.NaN);
      complex6.isNaN();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5035.151, 1.7331079674066365E-9);
      Complex complex1 = new Complex(1.7331079674066365E-9, 1296.49258831);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.I;
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex1.tanh();
      complex3.isInfinite();
      Complex complex8 = complex3.add(complex7);
      Complex complex9 = Complex.I;
      complex4.pow(complex3);
      complex6.tan();
      complex8.sin();
      Complex complex10 = Complex.INF;
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex0.multiply(complex1);
      complex5.multiply(Double.POSITIVE_INFINITY);
      complex3.acos();
      complex5.getArgument();
      Complex complex6 = complex4.multiply(2748);
      Complex complex7 = complex6.sinh();
      complex7.tanh();
      complex3.acos();
      complex4.reciprocal();
      complex2.multiply(7);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.createComplex((-922.97053691322), (-1614.14900506));
      complex1.I.getArgument();
      complex1.add(2797.0);
      Complex.valueOf((-796.20238093), 1.5707963267948966);
      complex2.acos();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = new Complex((-2430.39276791296), 5.707867001443433E-160);
      complex6.isNaN();
      complex3.isNaN();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      double double0 = 3199.29167;
      Complex complex0 = Complex.valueOf(3199.29167);
      Complex complex1 = complex0.tanh();
      complex1.ONE.getArgument();
      Complex complex2 = complex1.ZERO.pow(4284.805584985);
      complex2.NaN.sinh();
      Complex complex3 = complex0.ONE.asin();
      Complex complex4 = complex3.ZERO.atan();
      double double1 = 5.621509038251498E-9;
      Complex complex5 = complex0.add(5.621509038251498E-9);
      Complex complex6 = complex5.ZERO.divide(complex3);
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex4.ZERO.divide(complex3);
      complex7.I.exp();
      complex6.NaN.multiply(complex4);
      complex5.getField();
      Complex complex9 = complex3.cos();
      int int0 = 4444;
      complex3.I.nthRoot(4444);
      complex9.cosh();
      complex8.ZERO.divide((double) 4444);
      complex9.ONE.cosh();
      complex9.I.getArgument();
      complex3.sqrt();
      complex8.pow(complex0);
      // Undeclared exception!
      complex9.nthRoot(4444);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex(0.08603434264659882);
      Complex complex1 = new Complex(1127.82177794, 0.08603434264659882);
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.negate();
      complex1.ONE.getField();
      Complex complex3 = complex0.ONE.subtract((-2813.972814503));
      complex3.INF.abs();
      complex1.I.getArgument();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.add(complex1);
      Complex complex6 = complex3.I.reciprocal();
      Complex complex7 = complex1.subtract((-2397.8857593884));
      Complex.valueOf(Double.POSITIVE_INFINITY, (-3395.6770412));
      complex1.subtract(complex0);
      Complex complex8 = complex5.pow((-2092.430834228));
      complex8.ONE.getArgument();
      complex6.atan();
      complex7.multiply((-2325.47));
      complex1.getField();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.multiply((-1899.4402598));
      Complex complex3 = complex2.I.add((-1899.4402598));
      complex2.readResolve();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex1.subtract(complex0);
      Complex complex6 = complex4.INF.divide((-1899.4402598));
      complex6.subtract(0.0);
      complex6.I.divide(0.0);
      complex4.I.sin();
      complex5.INF.pow(0.0);
      complex5.ZERO.reciprocal();
      Complex complex7 = complex4.NaN.sqrt1z();
      Complex complex8 = complex7.ONE.cosh();
      complex8.I.sinh();
      complex5.I.conjugate();
      complex1.hashCode();
      complex5.I.exp();
      Complex complex9 = new Complex((-1225.6217645718464));
      complex9.createComplex(321.52144881657426, 3118.6080974);
      complex3.multiply((-1225.6217645718464));
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1269.49503362), (-1269.49503362));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.multiply(3489);
      complex2.I.createComplex(3489, 3489);
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = complex1.I.conjugate();
      complex0.divide((-1269.49503362));
      complex0.cos();
      Complex complex5 = complex4.cosh();
      complex5.atan();
      complex5.readResolve();
      complex3.tanh();
      complex2.multiply(complex1);
      Complex.valueOf((-1495.4), 638.5340546779524);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2492.812));
      complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.INF.acos();
      complex2.NaN.multiply(1);
      complex0.equals(complex2);
      complex0.NaN.tan();
      complex3.NaN.getArgument();
      complex0.multiply(complex1);
      Complex complex4 = new Complex(Double.NaN, 1);
      complex2.divide(complex2);
      complex3.log();
      complex4.negate();
      complex1.abs();
      Complex complex5 = Complex.NaN;
      complex5.divide((-2492.812));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.I.toString();
      Complex complex2 = complex0.I.atan();
      Complex complex3 = (Complex)complex2.I.readResolve();
      Complex complex4 = complex0.multiply(0);
      complex3.isInfinite();
      Complex complex5 = (Complex)complex3.readResolve();
      complex3.equals(complex5);
      complex1.asin();
      complex4.subtract(1944.95573);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.add(complex1);
      complex3.ONE.abs();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex1.tanh();
      complex1.isInfinite();
      Complex complex8 = complex0.add(complex6);
      complex6.pow(complex8);
      Complex complex9 = complex6.tan();
      complex7.sin();
      complex6.cosh();
      complex9.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(3.058997113995161E-8);
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.INF.sqrt1z();
      Complex complex3 = complex0.ZERO.add(complex2);
      Complex complex4 = complex0.tanh();
      complex4.divide(complex1);
      complex4.ONE.sqrt1z();
      complex0.sqrt1z();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.sin();
      complex3.multiply((-869501465));
      complex6.createComplex(3.058997113995161E-8, 1715);
      complex4.multiply(2002.946870121862);
      complex6.negate();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.createComplex((-922.97053691322), (-1626.5818110869293));
      complex1.I.getArgument();
      complex0.equals(object0);
      complex0.getReal();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex4.asin();
      complex0.add(complex4);
      complex2.log();
      Complex complex6 = Complex.NaN;
      complex6.isNaN();
      complex5.isNaN();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.add(complex1);
      Complex complex4 = complex0.createComplex((-4759.385180405596), (-505.2154236));
      Complex complex5 = Complex.INF;
      Complex complex6 = complex1.cos();
      Complex complex7 = Complex.valueOf(9.619685356326533E-10, (double) 0);
      complex7.multiply(0);
      Complex complex8 = complex6.divide(1.0);
      Complex complex9 = complex4.exp();
      complex8.getArgument();
      Complex complex10 = Complex.valueOf(5.868088900205074E-12);
      complex10.getArgument();
      Complex complex11 = complex9.cosh();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex6.add(complex12);
      Complex complex14 = complex13.tanh();
      Complex complex15 = complex0.sin();
      complex5.sin();
      complex12.toString();
      Complex.valueOf((-604.397), 0.0);
      complex15.abs();
      complex3.acos();
      complex1.sqrt();
      complex14.multiply(0);
      complex4.pow(complex1);
      complex11.getArgument();
      complex15.conjugate();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5035.912848478112, 1.7331079674066365E-9);
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.add(5035.912848478112);
      complex2.readResolve();
      Complex complex3 = complex2.atan();
      complex2.abs();
      Complex complex4 = complex2.tanh();
      Complex complex5 = new Complex(6.283185307179586);
      complex5.divide(complex1);
      complex2.sqrt1z();
      Complex complex6 = Complex.ONE;
      complex6.sin();
      complex4.multiply(1715);
      complex4.createComplex((-1223.860053254), 1953.2688122649547);
      complex3.multiply((double) 1715);
      Complex complex7 = Complex.INF;
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.add(301.3212852984);
      complex3.readResolve();
      Complex complex4 = complex3.atan();
      complex3.createComplex((-1203.09068863688), 6.283185307179586);
      Complex complex5 = complex2.subtract(complex0);
      complex0.cos();
      Complex complex6 = Complex.valueOf(301.3212852984, 301.3212852984);
      complex1.divide(6.283185307179586);
      Complex complex7 = new Complex((-1203.09068863688));
      complex1.getArgument();
      complex0.getArgument();
      Complex complex8 = complex1.cosh();
      Complex complex9 = Complex.INF;
      complex8.add(complex9);
      Complex complex10 = complex4.tanh();
      complex2.sin();
      complex8.sin();
      complex10.toString();
      Complex complex11 = Complex.valueOf((-4.318744885255025), (-774.67));
      complex9.abs();
      complex5.acos();
      complex7.sqrt();
      complex1.multiply(1499);
      complex11.pow(complex9);
      complex9.getArgument();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.INF.cosh();
      Complex complex1 = complex0.multiply((-1899.4402598));
      Complex complex2 = complex1.I.add((-1899.4402598));
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = Complex.I;
      complex4.multiply((-3954));
      complex4.createComplex((-3954), 0.0);
      Complex complex5 = complex2.divide(complex3);
      complex5.conjugate();
      Complex complex6 = complex2.divide(439.8130267627133);
      Complex complex7 = complex2.cos();
      complex4.cosh();
      complex7.atan();
      complex6.divide(complex4);
      Complex complex8 = complex6.log();
      complex8.negate();
      complex7.abs();
      Complex complex9 = Complex.ONE;
      complex9.divide(439.8130267627133);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1269.49503362), (-1269.49503362));
      Complex complex1 = complex0.atan();
      complex0.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.divide((double) 3489);
      Complex complex5 = complex4.subtract((-694.277095));
      Complex complex6 = complex1.divide((-0.5403023058681398));
      Complex complex7 = complex3.sin();
      Complex complex8 = complex3.pow(0.9992122854650755);
      Complex complex9 = complex0.reciprocal();
      complex6.sqrt1z();
      complex8.ONE.reciprocal();
      Complex complex10 = complex5.cosh();
      Complex complex11 = complex8.sinh();
      complex1.conjugate();
      complex11.hashCode();
      complex7.exp();
      complex10.sinh();
      complex7.atan();
      Complex complex12 = Complex.valueOf((-1520.228002));
      Complex complex13 = complex7.add(complex12);
      complex1.getReal();
      complex2.nthRoot(37);
      complex12.reciprocal();
      complex13.subtract(complex9);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.I.toString();
      Complex complex2 = complex0.I.atan();
      complex2.I.readResolve();
      Complex complex3 = complex1.divide(1247.0);
      Complex complex4 = Complex.ONE;
      complex4.cos();
      Complex complex5 = new Complex(1247.0, 1247.0);
      Complex complex6 = complex5.cosh();
      complex6.atan();
      Complex complex7 = new Complex(1247.0, 1247.0);
      complex7.divide(complex0);
      complex3.log();
      Complex complex8 = Complex.valueOf(2298.9935);
      complex8.negate();
      complex2.abs();
      complex7.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(1.376213550567627, 1.376213550567627);
      Complex complex1 = Complex.valueOf(0.680370569229126);
      Complex complex2 = Complex.ONE;
      complex0.equals(complex2);
      complex2.getReal();
      Complex complex3 = complex1.sinh();
      complex3.nthRoot(298);
      Complex complex4 = complex0.log();
      complex0.getReal();
      complex2.equals(complex0);
      complex4.hashCode();
      complex4.atan();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.createComplex((-922.97053691322), (-1614.14900506));
      complex1.I.getArgument();
      Complex complex3 = complex2.add(1.5707963267948966);
      Complex complex4 = Complex.valueOf((-2.1621514757664668E13), (-2.1621514757664668E13));
      Complex complex5 = complex2.acos();
      complex1.asin();
      complex4.add(complex3);
      Complex complex6 = Complex.ZERO;
      complex5.isNaN();
      complex4.isNaN();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2492.812));
      complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.createComplex((-2492.812), 823.2);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex0.multiply(1523);
      Complex complex6 = complex0.divide(2512.88089149879);
      complex1.exp();
      complex2.getArgument();
      complex0.getArgument();
      complex6.cosh();
      Complex complex7 = complex5.add(complex6);
      complex1.tanh();
      complex7.sin();
      Complex complex8 = complex5.sin();
      Complex complex9 = Complex.I;
      complex9.toString();
      Complex complex10 = Complex.valueOf((double) 0, 0.0);
      Complex complex11 = Complex.valueOf(823.2);
      complex11.abs();
      Complex complex12 = complex10.acos();
      Complex complex13 = complex3.sqrt();
      Complex complex14 = complex8.multiply(2145159457);
      complex13.pow(complex1);
      complex14.getArgument();
      Complex complex15 = complex12.conjugate();
      complex4.sinh();
      complex15.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5035.151, 1.7331079674066365E-9);
      complex0.I.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.add(5035.151);
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex1.atan();
      Complex complex4 = Complex.NaN;
      complex0.acos();
      Complex complex5 = complex2.multiply((-2147057234));
      Complex complex6 = Complex.valueOf(2142.5716869766, 3489.0);
      complex6.equals(complex0);
      complex0.tan();
      complex4.multiply(complex2);
      Complex complex7 = Complex.valueOf(1.7331079674066365E-9);
      complex7.readResolve();
      Complex complex8 = complex5.tanh();
      complex8.multiply(complex3);
      Complex.valueOf((double) (-2147057234), 0.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.multiply((-1899.4402598));
      complex0.ZERO.abs();
      try { 
        complex2.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.multiply((-1899.4402598));
      complex2.I.add((-1899.4402598));
      complex2.readResolve();
      Complex complex3 = complex1.negate();
      complex1.subtract(complex0);
      Complex complex4 = complex3.INF.divide((-1899.4402598));
      Complex complex5 = complex4.subtract(0.0);
      Complex complex6 = new Complex(922.97053691322, 922.97053691322);
      Complex complex7 = complex6.divide(complex5);
      Complex complex8 = Complex.valueOf(5035.151);
      complex8.conjugate();
      complex6.divide((-1.0));
      Complex complex9 = complex7.cos();
      complex9.cosh();
      Complex complex10 = complex8.atan();
      Complex complex11 = new Complex(922.97053691322);
      complex5.divide(complex11);
      complex9.log();
      Complex complex12 = Complex.ONE;
      complex12.negate();
      Complex complex13 = Complex.INF;
      complex13.abs();
      complex10.divide((-412.2656535));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(3.058997113995161E-8);
      complex0.NaN.conjugate();
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = complex1.reciprocal();
      complex5.ONE.tanh();
      complex1.isInfinite();
      Complex complex6 = complex1.add(complex3);
      complex3.pow(complex6);
      Complex complex7 = complex4.tan();
      complex7.I.sin();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.conjugate();
      complex0.INF.readResolve();
      complex2.asin();
      complex1.getReal();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.add((-249.689055345));
      complex2.add(complex0);
      complex1.getReal();
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cos();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.add(complex1);
      complex3.ONE.abs();
      complex2.tanh();
      complex0.divide(complex2);
      complex1.sqrt1z();
      complex0.INF.sin();
      Complex complex4 = complex1.multiply(1715);
      complex1.createComplex(1715, (-1223.860053254));
      Complex complex5 = complex4.multiply((-1223.860053254));
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2183.079219899283);
      Complex complex1 = complex0.I.pow((-2.827581009333298E-233));
      Complex complex2 = complex0.reciprocal();
      complex2.NaN.nthRoot(1);
      Complex complex3 = complex1.multiply((-2.827581009333298E-233));
      Complex complex4 = complex3.negate();
      complex3.INF.multiply(552);
      complex4.INF.exp();
      Complex complex5 = complex4.NaN.multiply(complex3);
      complex5.reciprocal();
      complex4.ONE.readResolve();
      Complex complex6 = complex4.ZERO.conjugate();
      complex6.ZERO.pow(complex1);
      Complex complex7 = complex0.reciprocal();
      complex7.atan();
      complex7.toString();
      complex6.readResolve();
      complex1.exp();
      complex5.nthRoot(1);
      complex5.reciprocal();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(5035.151, 1.7331079674066365E-9);
      Complex complex1 = complex0.I.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(5035.151);
      complex2.readResolve();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.NaN.createComplex(1046.10744483, 1046.10744483);
      Complex complex5 = complex1.INF.subtract(complex2);
      complex5.I.cos();
      complex5.ONE.multiply(0);
      Complex complex6 = complex3.INF.divide(1953.2688122649547);
      complex6.NaN.exp();
      complex3.getArgument();
      complex1.getArgument();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.ONE.add(complex3);
      Complex complex9 = complex8.tanh();
      complex9.I.sin();
      complex9.INF.sin();
      complex7.ZERO.toString();
      Complex complex10 = Complex.valueOf(0.0, 225.1993872736616);
      complex10.abs();
      complex10.NaN.acos();
      complex0.sqrt();
      complex10.multiply(1499);
      complex3.pow(complex2);
      complex9.getArgument();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1431.36521057375);
      complex0.INF.acos();
      complex0.ZERO.abs();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      complex2.INF.log();
      complex0.pow((-365.793282020053));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.multiply((-1899.4402598));
      complex2.I.add((-1899.4402598));
      complex2.readResolve();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex3.INF.divide((-1899.4402598));
      complex5.subtract(0.0);
      complex5.I.divide(0.0);
      complex3.I.sin();
      complex4.INF.pow(0.0);
      Complex complex6 = complex4.ZERO.reciprocal();
      Complex complex7 = complex3.NaN.sqrt1z();
      Complex complex8 = complex7.ONE.cosh();
      Complex complex9 = complex8.I.sinh();
      Complex complex10 = complex4.I.conjugate();
      complex1.hashCode();
      complex4.I.exp();
      complex4.sinh();
      complex7.INF.atan();
      complex4.I.add(complex9);
      complex3.getReal();
      complex6.nthRoot(37);
      complex10.reciprocal();
      complex4.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-2492.812));
      complex0.getImaginary();
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.INF.acos();
      Complex complex4 = complex2.NaN.multiply(1);
      complex0.equals(complex2);
      complex0.NaN.tan();
      complex3.NaN.getArgument();
      complex0.multiply(complex1);
      complex4.INF.readResolve();
      complex3.tanh();
      complex4.multiply(complex2);
      Complex.valueOf((-3691.032973972097), 0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      Complex complex1 = complex0.multiply(376);
      Complex complex2 = complex1.ONE.sin();
      complex1.I.tanh();
      complex2.NaN.readResolve();
      complex2.getArgument();
      complex2.ZERO.toString();
      Complex complex3 = complex1.ONE.exp();
      complex2.ONE.cosh();
      complex3.ONE.cosh();
      Complex complex4 = complex3.I.pow(0.0);
      complex4.ZERO.sqrt1z();
      complex4.I.tanh();
      Complex complex5 = complex1.ONE.add((-1.9615359732789476E-7));
      Complex complex6 = complex1.reciprocal();
      complex5.I.reciprocal();
      complex6.I.nthRoot(376);
      complex0.add(complex1);
      complex1.hashCode();
      complex0.readResolve();
      complex6.negate();
      Complex complex7 = Complex.valueOf(0.0);
      complex7.ZERO.add(complex5);
      complex1.abs();
      complex2.multiply(complex6);
      complex0.cosh();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(1.3242245776666673E-186);
      Complex complex2 = Complex.valueOf((-3147.398256596), (-3147.398256596));
      Complex complex3 = complex0.I.subtract(complex2);
      Complex complex4 = complex3.pow(complex0);
      complex4.NaN.divide(complex2);
      complex0.add(0.0);
      Complex complex5 = complex4.conjugate();
      complex4.ZERO.asin();
      complex2.INF.readResolve();
      complex1.multiply(147);
      complex5.tanh();
      Complex complex6 = complex5.conjugate();
      complex5.ZERO.exp();
      complex0.negate();
      Complex complex7 = complex6.NaN.conjugate();
      complex6.pow(1.2844402232816276E290);
      Complex complex8 = complex1.sinh();
      complex3.divide(complex8);
      Complex complex9 = complex6.divide(complex1);
      complex9.I.exp();
      complex0.sinh();
      complex7.add(complex1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.divide(1184.0057186761);
      complex1.INF.divide(1184.0057186761);
      complex0.ZERO.cos();
      Complex complex3 = complex0.createComplex(0.0, 0.0);
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex0.multiply(complex1);
      complex6.ZERO.log();
      Complex complex7 = complex3.I.cos();
      complex1.subtract(complex0);
      complex3.getReal();
      complex4.getReal();
      Complex complex8 = complex5.tan();
      complex8.INF.add(0.0);
      complex7.exp();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex((-2436.6102), (-2436.6102));
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.atan();
      Complex complex3 = complex2.cos();
      complex0.I.toString();
      Complex.valueOf(20.0, 20.0);
      complex1.nthRoot(596);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      Complex complex1 = complex0.ONE.pow(0.0);
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = Complex.valueOf((-998.62));
      complex2.atan();
      complex3.multiply(0.0);
      Complex complex4 = Complex.valueOf(20.0, 0.0);
      complex0.multiply(3097);
      complex1.getImaginary();
      Complex complex5 = complex1.I.conjugate();
      Complex complex6 = complex1.pow(complex2);
      complex3.I.sin();
      complex6.getArgument();
      complex3.getReal();
      complex4.tan();
      complex5.abs();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = new Object();
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.ZERO.createComplex((-922.97053691322), (-1614.14900506));
      complex1.I.getArgument();
      complex0.equals(object0);
      complex0.getReal();
      complex0.sinh();
      complex0.ONE.nthRoot(298);
      Complex complex3 = complex0.log();
      complex3.getReal();
      complex3.equals(complex0);
      complex3.ONE.hashCode();
      complex2.atan();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(1408.7328528253);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.sin();
      complex4.I.sqrt1z();
      complex4.INF.asin();
      complex2.NaN.add(complex1);
      Complex complex5 = Complex.valueOf(6.283185307179586);
      Complex.valueOf(0.0, (-507.952818));
      complex5.INF.nthRoot(2349);
      complex2.getImaginary();
      complex2.ONE.getArgument();
      complex2.sin();
      complex1.getField();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.INF.atan();
      complex0.abs();
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex3.ONE.createComplex(0.0, (-1.0));
      Complex complex5 = complex2.NaN.sqrt1z();
      Complex complex6 = complex5.ZERO.reciprocal();
      complex6.NaN.asin();
      Complex complex7 = complex2.divide((-449.08252180078));
      complex7.ZERO.hashCode();
      complex2.tan();
      Complex.valueOf((-1.0));
      Complex complex8 = complex3.tanh();
      complex1.exp();
      complex4.negate();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.INF.negate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex2.INF.createComplex(0.0, 20.0);
      complex4.subtract(0.0);
      complex2.INF.exp();
      Complex complex5 = complex1.NaN.multiply(17);
      complex5.abs();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.I.add(complex5);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex8.ONE.negate();
      Complex complex10 = complex9.ONE.divide(20.0);
      complex10.INF.toString();
      complex6.getArgument();
      Complex complex11 = complex1.INF.conjugate();
      complex6.add(4419.56);
      Complex complex12 = complex7.tanh();
      Complex complex13 = complex1.subtract(Double.NaN);
      complex13.ZERO.multiply(17);
      Complex complex14 = complex11.subtract((double) 17);
      Complex complex15 = complex3.acos();
      complex5.getField();
      complex14.cos();
      complex12.getImaginary();
      complex15.sqrt1z();
      complex15.getArgument();
      complex0.reciprocal();
      Complex complex16 = new Complex((-588.631230381));
      complex15.add(complex16);
      complex15.getField();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-3061.23);
      Complex complex0 = new Complex(0.0, (-3061.23));
      Complex complex1 = complex0.INF.negate();
      complex1.NaN.sqrt();
      complex1.INF.log();
      Complex complex2 = complex0.subtract((-1070.7));
      int int0 = 0;
      try { 
        complex2.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex1.I.toString();
      Complex complex2 = complex0.I.atan();
      complex2.I.readResolve();
      Complex complex3 = complex0.multiply(0);
      complex3.getImaginary();
      Complex complex4 = Complex.valueOf(0.0);
      complex0.add(complex4);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.tanh();
      complex0.abs();
      Complex complex1 = complex0.createComplex((-900.159107456), 1.0);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.multiply(0);
      complex3.pow(0.0);
      Complex complex4 = complex2.ONE.pow(complex1);
      Complex complex5 = complex2.ONE.createComplex((-900.159107456), 0.0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex5.pow(complex6);
      complex7.INF.multiply(53);
      Complex complex8 = complex1.pow(1.0);
      Complex complex9 = complex8.NaN.tan();
      complex9.INF.cosh();
      complex8.getReal();
      complex2.divide(2.0);
      Complex complex10 = complex0.divide(2.0);
      Complex complex11 = Complex.I;
      Complex complex12 = complex10.pow(complex11);
      complex1.multiply(complex4);
      Complex complex13 = complex0.divide(1033.887624340082);
      complex2.multiply(complex13);
      complex5.subtract(Double.POSITIVE_INFINITY);
      complex13.acos();
      complex4.multiply(0);
      complex12.createComplex(0, (-2.09888970767165));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.sin();
      complex0.getArgument();
      complex1.negate();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.subtract((-1942.5679757024004));
      complex1.INF.log();
      complex1.INF.multiply((-345));
      Complex complex2 = complex1.I.sinh();
      complex0.getImaginary();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.subtract(complex2);
      complex3.ONE.sqrt();
      complex4.NaN.multiply(complex3);
      Complex complex5 = complex3.multiply((-345));
      Complex.valueOf((double) (-345), (double) (-345));
      complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex2.I.cosh();
      complex0.isNaN();
      complex1.atan();
      Complex.valueOf(0.4734157919883728);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.readResolve();
      complex0.divide(complex1);
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.pow(complex0);
      complex3.INF.subtract(0.0);
      Complex complex4 = complex1.add(0.0);
      complex0.isNaN();
      complex4.subtract(complex2);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.equals((Object) null);
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      complex1.ZERO.acos();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.createComplex(0.7853981633974483, 0.7853981633974483);
      complex1.isInfinite();
      complex2.equals(complex1);
      complex3.asin();
      complex3.subtract(0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.log();
      complex2.INF.log();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.I.multiply(complex0);
      Complex complex5 = complex2.multiply(57.2957763671875);
      Complex complex6 = complex1.acos();
      complex6.ONE.abs();
      complex4.getArgument();
      complex3.multiply(1);
      Complex complex7 = complex1.sinh();
      complex5.tanh();
      complex7.acos();
      complex1.reciprocal();
      complex2.multiply(1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      complex1.NaN.asin();
      complex1.ONE.exp();
      complex0.acos();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.subtract(484.5040201285146);
      Complex complex2 = complex1.atan();
      complex0.divide(complex1);
      complex1.getField();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.INF.asin();
      complex4.ONE.hashCode();
      complex3.I.divide(complex2);
      complex1.subtract(complex0);
      complex3.cos();
      complex2.getReal();
      complex3.tan();
      complex2.getField();
      complex2.toString();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      complex1.I.log();
      Complex complex2 = complex0.negate();
      complex2.INF.acos();
      try { 
        complex2.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(0.0, 1742.0);
      complex0.ZERO.divide(complex1);
      complex1.ONE.tanh();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1269.49503362), (-1269.49503362));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.multiply(3489);
      Complex complex3 = complex2.I.createComplex(3489, 3489);
      complex2.ONE.divide(complex1);
      Complex complex4 = complex1.I.conjugate();
      complex0.divide((-1269.49503362));
      complex0.cos();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.atan();
      complex0.divide(complex6);
      Complex complex7 = complex3.log();
      complex7.ZERO.negate();
      complex2.abs();
      complex5.divide(3489.0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      complex1.ZERO.divide(complex0);
      Complex complex2 = complex0.ONE.log();
      complex2.ONE.add(Double.NaN);
      complex2.ZERO.tanh();
      complex0.ZERO.conjugate();
      complex0.cosh();
      complex0.conjugate();
      Complex complex3 = Complex.valueOf(0.0, (-5254.2));
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1.376213550567627, 1.376213550567627);
      Complex complex1 = Complex.valueOf(0.680370569229126);
      complex1.ONE.add(0.0);
      Complex.valueOf(0.0, 1.376213550567627);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.asin();
      complex3.ONE.add(complex2);
      Complex complex4 = complex0.log();
      complex4.isNaN();
      complex1.isNaN();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(540.6262078542497);
      complex0.abs();
      complex0.isNaN();
      Complex complex1 = complex0.add(433.850352406);
      complex1.NaN.divide(complex0);
      Complex complex2 = complex0.createComplex((-2427.44795009), 1190.529);
      Complex complex3 = complex2.divide(complex1);
      complex1.sin();
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.78482304E8);
      complex0.INF.nthRoot(1);
      Complex complex1 = complex0.createComplex(0.0, 1.78482304E8);
      Complex complex2 = complex1.sin();
      complex1.ONE.add((-338.455826));
      Complex complex3 = complex1.INF.cos();
      complex1.pow(complex0);
      Complex complex4 = complex3.divide(complex2);
      complex4.NaN.sinh();
      complex3.cos();
      complex3.ZERO.hashCode();
      Complex complex5 = complex1.multiply(complex0);
      Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex0.sqrt1z();
      complex6.INF.pow(complex2);
      Complex complex7 = complex0.pow((-2.8907074856577267E-8));
      complex7.ZERO.tanh();
      complex4.readResolve();
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.valueOf(568.822, (double) 1);
      complex8.ONE.subtract(complex9);
      complex2.asin();
      complex5.sqrt1z();
      complex0.divide((-4.9E-324));
      complex4.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getReal();
      Complex complex1 = complex0.tan();
      complex1.I.tan();
      Complex complex2 = complex0.sqrt1z();
      complex0.cos();
      complex2.ZERO.reciprocal();
      complex2.pow(1013.648);
      complex1.isNaN();
      complex2.sin();
      complex1.getArgument();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.ZERO.tanh();
      Complex complex4 = complex3.INF.exp();
      Complex complex5 = complex2.INF.pow(162754.78125);
      Complex complex6 = complex0.I.log();
      Complex complex7 = complex6.add(162754.78125);
      complex3.NaN.toString();
      Complex complex8 = complex3.ONE.subtract(162754.78125);
      Complex complex9 = complex3.INF.reciprocal();
      Complex complex10 = complex1.add(162754.78125);
      complex10.subtract(complex7);
      assertEquals(162754.78125, complex7.getReal(), 0.01);
      
      Complex complex11 = complex10.ONE.exp();
      assertEquals(2.718281828459045, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      complex0.hashCode();
      complex10.getImaginary();
      complex4.getImaginary();
      complex0.divide(861.296050740801);
      Complex complex12 = complex2.acos();
      Complex complex13 = complex12.ONE.log();
      assertTrue(complex12.equals((Object)complex5));
      
      String string0 = complex9.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex14 = complex8.ZERO.divide((-1.0));
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex8.divide(514.74383);
      assertEquals((-316.18403517337936), complex15.getReal(), 0.01);
      
      Complex complex16 = complex8.tan();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertTrue(complex3.equals((Object)complex13));
      assertEquals((-0.4613326911286013), complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      
      Complex complex17 = complex10.subtract(Double.NaN);
      assertSame(complex17, complex2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      String string0 = complex0.INF.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      Complex complex1 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      
      complex0.hashCode();
      assertTrue(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(2.0);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }
}
