/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:47:25 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.175748919314254E172, 2.3709316816226527E-8);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(11);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.acos();
      complex2.tan();
      Complex complex3 = complex0.createComplex(11, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ONE;
      complex1.I.sin();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.multiply(complex3);
      complex3.hashCode();
      complex6.multiply(complex3);
      complex1.pow(Double.POSITIVE_INFINITY);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(3.499495268512929E-8);
      Complex complex2 = complex1.pow(1672.206912980058);
      complex2.readResolve();
      complex0.sin();
      Complex complex3 = Complex.valueOf(1217.9);
      Complex complex4 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex3.sqrt1z();
      Complex complex5 = complex4.multiply(complex2);
      complex5.multiply((-1883));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.getArgument();
      Complex complex2 = complex1.pow((-2.356194490192345));
      complex1.pow(612.9162885960212);
      complex2.readResolve();
      Complex complex3 = Complex.valueOf((-20.0));
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, 921.40524872);
      complex3.tanh();
      Complex complex5 = Complex.valueOf((-662.1589979));
      Complex complex6 = complex5.sqrt1z();
      complex3.createComplex((-1.0582433898160944E-13), (-2.356194490192345));
      complex6.subtract((-20.0));
      complex1.cosh();
      Complex complex7 = Complex.valueOf(0.9999999999999976);
      Complex.valueOf(4.48614966943544E-200, Double.NaN);
      Complex complex8 = Complex.valueOf((-1.0582433898160944E-13));
      complex2.add(complex8);
      complex4.multiply(299);
      complex7.nthRoot(4994);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 8.281321669236493E188);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex1.ONE.divide(complex0);
      Complex complex3 = complex2.ONE.cos();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.conjugate();
      complex5.ONE.divide(complex0);
      Complex complex6 = complex0.divide(complex2);
      Complex complex7 = complex6.sin();
      complex3.readResolve();
      complex1.nthRoot(592);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2172);
      Complex complex2 = new Complex(2157.640069308926, Double.POSITIVE_INFINITY);
      complex1.ONE.divide(complex2);
      complex2.NaN.add(Double.POSITIVE_INFINITY);
      complex1.pow(complex2);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(24.863551363119978);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      complex2.acos();
      Complex complex3 = Complex.valueOf((-2.2711230715729753E-308));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.I.add(complex3);
      complex8.readResolve();
      Complex complex9 = complex7.negate();
      complex0.subtract(24.863551363119978);
      complex7.readResolve();
      Complex complex10 = complex3.atan();
      Complex complex11 = complex3.subtract(complex10);
      Complex complex12 = complex10.acos();
      complex12.INF.exp();
      complex10.readResolve();
      Complex.valueOf(24.863551363119978, (-2.2711230715729753E-308));
      Complex complex13 = complex7.add(complex10);
      complex13.I.abs();
      Complex complex14 = complex12.tanh();
      complex6.tan();
      complex11.atan();
      complex9.multiply(4992);
      Complex.valueOf((-702.3914));
      complex14.asin();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      complex0.divide(443.0);
      Complex complex3 = complex2.ONE.tan();
      complex3.ONE.add((-1170.75));
      Complex complex4 = complex3.subtract((-1.0));
      Complex complex5 = complex2.I.add(complex0);
      complex5.I.sinh();
      Complex complex6 = complex5.ONE.atan();
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex1.multiply(2072);
      complex8.tan();
      complex8.NaN.pow(complex2);
      Complex complex9 = complex7.sqrt1z();
      complex5.divide(complex8);
      complex1.I.divide(0.004124767586731082);
      Complex complex10 = complex5.ZERO.multiply(complex2);
      complex0.pow(0.004124767586731082);
      Complex complex11 = complex5.tanh();
      complex11.INF.subtract((double) 2072);
      Complex complex12 = complex11.NaN.negate();
      Complex complex13 = complex5.negate();
      complex4.multiply(complex7);
      Complex complex14 = complex8.cos();
      complex14.ZERO.pow(complex5);
      Complex.valueOf(0.004124767586731082, 0.004124767586731082);
      complex9.negate();
      complex12.getField();
      complex13.atan();
      Complex complex15 = Complex.ONE;
      complex11.pow(complex15);
      complex11.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-864.27826), Double.POSITIVE_INFINITY);
      complex0.nthRoot(8);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
      Complex complex1 = Complex.valueOf(1.0, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.reciprocal();
      complex0.sqrt();
      Complex complex3 = Complex.I;
      complex3.tanh();
      complex1.sinh();
      Complex complex4 = new Complex(8.90737333900943E103, (-502.0));
      complex3.tanh();
      complex2.sqrt();
      complex0.atan();
      complex4.exp();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1610.39039044683), (-1610.39039044683));
      Complex complex1 = new Complex(1033.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.createComplex((-1610.39039044683), (-2648.162));
      Complex complex4 = complex0.add(complex2);
      complex4.atan();
      Complex complex5 = complex2.atan();
      complex5.NaN.sqrt();
      complex4.toString();
      complex3.I.tanh();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex0.multiply(complex3);
      complex7.readResolve();
      complex6.log();
      Complex complex8 = complex5.sin();
      complex8.NaN.toString();
      complex8.sqrt1z();
      complex7.divide(Double.NaN);
      complex7.nthRoot(484);
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex.valueOf(2.0, 2.0);
      Complex complex0 = Complex.valueOf((double) 0, 5.150531410436088E-5);
      Complex complex1 = new Complex(0, 5.150531410436088E-5);
      Complex complex2 = Complex.valueOf(1.8573312759399414);
      Complex complex3 = complex2.multiply(584);
      complex3.ONE.getField();
      complex0.add(Double.NaN);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 0, 5.150531410436088E-5);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = new Complex(1836.4, 1836.4);
      complex4.tanh();
      complex1.sqrt();
      complex5.pow(complex1);
      complex5.isInfinite();
      Complex.valueOf(3.5590470673352285E198);
      complex3.getField();
      Complex complex8 = complex4.cos();
      complex8.readResolve();
      complex6.toString();
      complex2.multiply(1847);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.NaN.subtract(complex0);
      complex0.add(Double.POSITIVE_INFINITY);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(2199);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.INF.multiply(complex1);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.multiply(570);
      Complex complex5 = Complex.valueOf((-1.2906712010774655E-8));
      complex2.abs();
      complex0.add(complex4);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = 2364.7643851701937;
      Complex complex0 = Complex.valueOf(2364.7643851701937, 2364.7643851701937);
      Complex complex1 = complex0.divide(2364.7643851701937);
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex2.subtract(2364.7643851701937);
      complex3.INF.createComplex(2364.7643851701937, 2364.7643851701937);
      Complex complex4 = complex0.cosh();
      double double1 = (-207.05087373682);
      Complex complex5 = complex1.add((-207.05087373682));
      complex4.exp();
      Complex complex6 = complex4.ZERO.cos();
      complex5.I.tanh();
      complex2.readResolve();
      Complex complex7 = complex2.asin();
      Complex complex8 = complex7.ONE.add(2364.7643851701937);
      Complex complex9 = complex4.sin();
      complex5.conjugate();
      Complex complex10 = complex6.divide(complex9);
      complex10.ZERO.readResolve();
      complex10.negate();
      complex8.pow(complex5);
      Complex complex11 = complex7.ZERO.tan();
      complex11.NaN.subtract(complex5);
      try { 
        complex7.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex0.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.valueOf(2.0, 2.0);
      Complex complex4 = complex3.tanh();
      complex3.sinh();
      Complex complex5 = new Complex((-2941.3158215103913), Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.tanh();
      complex6.sqrt();
      complex4.isInfinite();
      Complex.valueOf(4.171630237420918E-127);
      complex4.getField();
      complex6.cos();
      complex1.subtract((-1.0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      Complex complex1 = complex0.pow(2.0);
      Complex complex2 = complex1.divide(2.0);
      complex2.I.readResolve();
      Complex complex3 = complex1.I.multiply((-17));
      complex3.ZERO.toString();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex1.ZERO.tan();
      Complex complex6 = complex5.conjugate();
      complex6.ZERO.hashCode();
      Complex complex7 = Complex.INF;
      Complex.valueOf(2.0);
      Complex complex8 = Complex.ZERO;
      complex4.equals(complex3);
      Complex.valueOf((double) (-17));
      complex0.sqrt();
      complex2.exp();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = new Complex(1395.5573448411271, Double.NaN);
      Complex complex3 = new Complex(Double.NaN, 1395.5573448411271);
      complex0.tanh();
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-25.666551));
      Complex complex1 = complex0.createComplex(0.0025758932486041886, (-20.0));
      Complex complex2 = complex1.asin();
      Complex complex3 = complex1.sin();
      complex3.I.tan();
      complex2.abs();
      Complex.valueOf(3.6895038794943336);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.divide(20.0);
      complex0.tanh();
      Complex complex2 = Complex.ZERO;
      complex2.subtract((-1.0));
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      complex0.multiply((-491));
      complex0.toString();
      Complex complex1 = complex0.sinh();
      complex1.INF.sqrt1z();
      Complex complex2 = new Complex(20.0, 20.0);
      Complex complex3 = complex2.tan();
      complex3.conjugate();
      Complex complex4 = Complex.INF;
      Complex.valueOf((double) (-491));
      Complex complex5 = Complex.ZERO;
      complex5.NaN.hashCode();
      Object object0 = new Object();
      Complex complex6 = Complex.I;
      Complex complex7 = Complex.I;
      complex6.equals(complex7);
      Complex complex8 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-25.666551));
      complex0.NaN.createComplex(0.0025758932486041886, Double.NaN);
      Complex complex1 = complex0.createComplex(0.0025758932486041886, (-20.0));
      complex0.NaN.log();
      complex1.sin();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8853381.02080875, 2276.5505);
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.NaN.conjugate();
      Complex complex3 = Complex.INF;
      complex3.ONE.negate();
      complex0.divide(complex3);
      Complex complex4 = Complex.valueOf((-1008.32963535029));
      Complex complex5 = Complex.valueOf((-1306.545565), (-643.42));
      complex0.NaN.reciprocal();
      complex0.equals(complex5);
      Complex complex6 = complex3.atan();
      complex6.INF.tanh();
      complex4.abs();
      complex2.createComplex((-2019.850437516), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1221.362, 6512.907089948);
      Complex complex1 = complex0.tan();
      complex0.conjugate();
      Complex complex2 = Complex.INF;
      Complex.valueOf(260.7493);
      Complex complex3 = Complex.ZERO;
      complex3.equals(complex1);
      complex0.add(6512.907089948);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-25.666551));
      Complex complex1 = complex0.divide(20.0);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.tanh();
      complex3.I.hashCode();
      complex3.sinh();
      Complex complex4 = new Complex(8.28479585346867E265, (-231.666));
      Complex.valueOf((-231.666));
      complex2.tanh();
      Complex.valueOf((-1711.0911489453174), Double.NaN);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.conjugate();
      complex1.divide(2.2491378784179688);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.nthRoot(467);
      complex2.tan();
      complex3.multiply(492);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.reciprocal();
      complex2.I.add(complex1);
      complex2.sqrt1z();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1324.16737774743));
      Complex.valueOf((-3061.28958));
      complex0.pow((-1324.16737774743));
      Complex complex1 = complex0.conjugate();
      complex1.exp();
      Complex complex2 = Complex.ONE;
      complex2.hashCode();
      Complex complex3 = Complex.valueOf(2.930948283718324, 545.18);
      Complex complex4 = Complex.INF;
      Complex complex5 = Complex.valueOf((-1324.16737774743), (-1324.16737774743));
      complex5.getField();
      Complex complex6 = complex5.sin();
      complex6.sqrt();
      Complex complex7 = complex6.reciprocal();
      complex7.sqrt();
      complex3.sinh();
      Complex complex8 = Complex.I;
      Complex complex9 = complex3.tanh();
      complex6.sinh();
      Complex complex10 = new Complex(15.59710096, 2346.512358485078);
      complex10.tanh();
      Complex complex11 = complex8.sqrt();
      complex11.isInfinite();
      Complex complex12 = Complex.valueOf(2.930948283718324);
      complex12.getField();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1324.16737774743));
      complex0.pow((-1324.16737774743));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ONE;
      complex1.sin();
      complex2.hashCode();
      complex1.tanh();
      Complex complex3 = Complex.valueOf((-1324.16737774743), 214.0);
      Complex complex4 = complex3.cos();
      complex4.getField();
      complex3.sqrt();
      complex0.acos();
      Complex complex5 = new Complex((-30.8637068), (-1324.16737774743));
      complex5.nthRoot(1);
      complex5.tan();
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1324.16737774743));
      complex0.pow((-1324.16737774743));
      complex0.conjugate();
      Complex complex1 = Complex.ONE;
      complex1.hashCode();
      Complex complex2 = Complex.valueOf(2.930948283718324, 545.18);
      complex2.cos();
      Complex complex3 = Complex.valueOf((-1324.16737774743), (-1324.16737774743));
      complex3.getField();
      Complex complex4 = complex3.sin();
      complex4.sqrt();
      Complex complex5 = new Complex((-1324.16737774743));
      Complex complex6 = complex5.reciprocal();
      complex6.sqrt();
      complex2.sinh();
      Complex complex7 = Complex.I;
      Complex complex8 = complex2.tanh();
      complex4.sinh();
      Complex complex9 = new Complex(15.59710096, 2346.512358485078);
      complex9.tanh();
      Complex complex10 = complex7.sqrt();
      complex10.isInfinite();
      Complex complex11 = Complex.valueOf(2.930948283718324);
      complex11.getField();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2451.4000793847, 2451.4000793847);
      Complex complex1 = complex0.cos();
      complex0.getField();
      Complex complex2 = complex0.sqrt();
      complex2.acos();
      Complex complex3 = complex1.createComplex((-3.577715974851322E98), 2490.31);
      Complex complex4 = complex3.asin();
      complex4.sin();
      complex3.abs();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1324.16737774743));
      complex0.pow((-1324.16737774743));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ONE.atan();
      complex2.hashCode();
      complex1.tanh();
      Complex complex4 = Complex.valueOf((-1324.16737774743), (-1324.16737774743));
      complex4.subtract((-1324.16737774743));
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(1099.3007951563543);
      Complex complex1 = complex0.ONE.sin();
      complex0.tan();
      Complex complex2 = complex0.I.conjugate();
      Complex complex3 = complex1.reciprocal();
      complex0.getReal();
      complex0.abs();
      complex3.sin();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow((-1324.16737774743));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ONE;
      complex2.hashCode();
      Complex complex3 = Complex.valueOf((-1324.16737774743), 214.0);
      Complex complex4 = complex3.cos();
      complex4.getField();
      complex3.sqrt();
      complex3.subtract(214.0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.6181373596191406);
      complex0.nthRoot(776);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide((-0.9969686490419389));
      Complex complex3 = complex2.tanh();
      Complex complex4 = Complex.valueOf(Double.NaN, (-445.6168653007));
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.divide(1.0000003894012544);
      Complex complex7 = Complex.ONE;
      complex6.ZERO.acos();
      Complex complex8 = complex7.cos();
      complex6.sqrt();
      complex8.reciprocal();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.cosh();
      complex2.NaN.getArgument();
      complex0.subtract(278.3581314824);
      Complex complex3 = Complex.valueOf(278.3581314824);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.multiply(complex3);
      complex0.add((-1635.0752431694557));
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.conjugate();
      complex5.getField();
      Complex complex9 = complex1.exp();
      Complex complex10 = complex1.tan();
      complex8.divide(complex9);
      Complex complex11 = complex7.divide((-1635.0752431694557));
      Complex complex12 = new Complex((-678.43381091), (-1635.0752431694557));
      complex12.atan();
      Complex complex13 = complex6.divide(complex1);
      complex13.I.subtract((-1635.0752431694557));
      complex11.abs();
      complex4.log();
      complex10.cosh();
      complex9.subtract(complex1);
      complex3.subtract((-678.43381091));
      Complex.valueOf(1548.237712723351);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.ONE.cosh();
      complex3.NaN.conjugate();
      complex3.INF.divide(2.2491378784179688);
      Complex complex4 = Complex.valueOf((-25.666551));
      complex4.I.nthRoot(492);
      Complex complex5 = complex1.I.tan();
      complex1.ONE.divide(2.635656176303053E7);
      Complex complex6 = Complex.I;
      complex5.tanh();
      complex0.cosh();
      complex1.ZERO.cos();
      complex5.sqrt();
      complex0.acos();
      Complex complex7 = Complex.valueOf((-25.666551), (-25.666551));
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.cosh();
      complex3.NaN.conjugate();
      complex3.INF.divide(2.2491378784179688);
      Complex complex4 = Complex.valueOf((-25.666551));
      complex4.I.nthRoot(492);
      Complex complex5 = complex1.I.tan();
      complex1.ONE.divide(2.635656176303053E7);
      complex5.ZERO.log();
      complex5.tanh();
      Complex complex6 = complex0.cosh();
      complex4.reciprocal();
      Complex.valueOf(2.635656176303053E7);
      complex4.sin();
      complex6.nthRoot(792);
      Complex complex7 = Complex.I;
      Complex.valueOf((double) 792);
      complex7.equals(complex0);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.NaN.conjugate();
      complex3.INF.divide(2.2491378784179688);
      Complex complex5 = Complex.valueOf((-25.666551));
      complex4.conjugate();
      Complex complex6 = complex1.reciprocal();
      complex6.getReal();
      complex1.abs();
      complex5.getReal();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2.185296118871998E-73);
      complex1.isInfinite();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(0.3241194486618042);
      Complex complex4 = complex3.divide((-212.250512465245));
      complex3.multiply(0);
      complex4.toString();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.tan();
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex7.subtract(complex5);
      Complex complex9 = complex6.pow(1.0);
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex8.cos();
      complex11.hashCode();
      complex5.tanh();
      complex10.cos();
      complex11.getField();
      complex9.sin();
      complex11.sqrt();
      complex2.reciprocal();
      Complex.valueOf(0.0);
      complex11.sin();
      complex5.nthRoot(7);
      Object object0 = new Object();
      complex4.equals(object0);
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1215.81114142223, 1215.81114142223);
      complex1.cos();
      Complex complex2 = complex1.cosh();
      complex2.conjugate();
      complex0.divide(0.0);
      Complex.valueOf(1215.81114142223);
      // Undeclared exception!
      complex0.nthRoot(1073742033);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1313228444765414E-138);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.tan();
      Complex complex3 = complex0.divide(1047.305);
      complex3.log();
      complex2.tanh();
      Complex complex4 = Complex.valueOf(2.635656176303053E7, 2.1313228444765414E-138);
      Complex complex5 = complex4.cosh();
      Complex.valueOf(2.667055348692629);
      complex4.sqrt();
      complex0.acos();
      Complex complex6 = complex4.pow(complex5);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1324.16737774743));
      Complex complex1 = complex0.pow((-1324.16737774743));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.ONE;
      complex3.hashCode();
      complex2.tanh();
      Complex complex4 = Complex.valueOf((-1324.16737774743), 214.0);
      Complex complex5 = complex4.cos();
      complex5.getField();
      Complex complex6 = complex3.sin();
      complex6.sqrt();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex6.sinh();
      Complex complex10 = Complex.I;
      complex10.tanh();
      complex9.sinh();
      Complex complex11 = new Complex(Double.POSITIVE_INFINITY, (-1324.16737774743));
      complex8.tanh();
      complex11.sqrt();
      complex7.isInfinite();
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract(2.3410181999206543);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex4.subtract(0.0);
      Complex complex7 = Complex.valueOf(1.0);
      Complex complex8 = complex6.negate();
      Complex complex9 = Complex.valueOf(2.3410181999206543, (-2795.7055452));
      Complex complex10 = complex0.multiply(complex9);
      Complex complex11 = complex3.add(438.3467);
      Complex complex12 = complex8.multiply(complex4);
      complex0.conjugate();
      complex1.getField();
      complex11.exp();
      complex6.tan();
      Complex complex13 = complex3.divide(complex10);
      Complex complex14 = complex4.divide(438.3467);
      complex13.atan();
      complex3.divide(complex12);
      complex0.abs();
      Complex complex15 = complex14.log();
      Complex complex16 = complex5.cosh();
      complex10.subtract(complex15);
      complex16.subtract(2.8775909436262737E-4);
      complex7.pow(2.8775909436262737E-4);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.multiply(1.841078519821167);
      complex0.isNaN();
      Complex complex3 = complex2.multiply(1.841078519821167);
      Complex complex4 = complex1.pow(2.0);
      Complex complex5 = complex4.I.multiply(0);
      complex5.ZERO.toString();
      complex5.ZERO.sinh();
      complex4.ZERO.tan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(1.841078519821167, 1.841078519821167);
      Complex complex8 = complex6.NaN.pow(1.841078519821167);
      Complex complex9 = complex1.conjugate();
      complex3.cos();
      complex7.hashCode();
      Complex complex10 = complex7.tanh();
      complex1.cos();
      complex6.getField();
      Complex complex11 = complex2.sin();
      Complex complex12 = complex11.sqrt();
      complex12.INF.reciprocal();
      complex10.sqrt();
      complex11.sinh();
      complex9.tanh();
      Complex complex13 = Complex.ONE;
      Complex complex14 = new Complex(2.0, (-4.122493395814607));
      Complex complex15 = Complex.NaN;
      complex8.sqrt();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2757.883084185);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.NaN.cosh();
      complex3.ZERO.subtract(0.0);
      Complex complex4 = Complex.valueOf(278.3581314824);
      Complex complex5 = complex4.tan();
      complex5.divide(complex0);
      complex5.subtract(complex0);
      Complex complex6 = complex3.pow(846.00690432092);
      Complex complex7 = complex4.conjugate();
      complex3.cos();
      complex7.hashCode();
      Complex complex8 = new Complex(2253.12217087, 2253.12217087);
      Complex complex9 = complex8.cos();
      complex1.getField();
      Complex complex10 = complex9.sin();
      complex1.sqrt();
      complex4.reciprocal();
      complex7.sqrt();
      complex2.sinh();
      complex2.tanh();
      Complex complex11 = complex8.sinh();
      Complex complex12 = new Complex(0.8414709848078964, (-20.0));
      complex6.tanh();
      complex10.sqrt();
      complex11.createComplex(0.007184988594904604, (-134.152696922274));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.asin();
      complex2.NaN.log();
      Complex complex3 = complex0.ZERO.add(complex1);
      complex3.ZERO.multiply((-217.16035481));
      complex2.multiply(2051);
      Complex complex4 = Complex.ONE;
      complex4.I.cos();
      complex3.negate();
      Complex complex5 = Complex.valueOf((-0.17786668747314843));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      // Undeclared exception!
      complex0.nthRoot(2147482936);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex0.ZERO.add(complex1);
      complex4.ZERO.multiply((-217.16035481));
      Complex complex5 = complex4.createComplex((-1.2618366811281002E-7), 1737.5644020420448);
      complex0.INF.sqrt1z();
      complex5.multiply(2051);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.cos();
      complex7.divide(complex5);
      complex1.negate();
      complex5.asin();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-1171.8539069111));
      complex3.ZERO.log();
      Complex complex4 = complex1.multiply(876.6236532543);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex4.tanh();
      complex2.readResolve();
      complex5.conjugate();
      complex0.subtract(complex6);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = Complex.valueOf(1.841078519821167, 1.841078519821167);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.asin();
      Complex complex5 = Complex.valueOf((-2330.94923));
      complex2.multiply(4.1084862677372065E111);
      complex2.pow(complex1);
      Complex complex6 = complex5.tanh();
      complex1.readResolve();
      Complex complex7 = complex4.conjugate();
      complex7.subtract(complex3);
      complex4.cosh();
      complex6.pow(1.841078519821167);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.conjugate();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.divide(2.2491378784179688);
      Complex.valueOf(902.40225342);
      complex3.nthRoot(492);
      Complex complex7 = complex6.tan();
      complex6.log();
      complex7.tanh();
      complex1.cosh();
      complex4.sqrt();
      Complex complex8 = Complex.valueOf((-1638.8374), 25.666551);
      Complex complex9 = complex8.acos();
      complex2.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.cosh();
      complex3.NaN.conjugate();
      Complex complex4 = complex3.INF.divide(2.2491378784179688);
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex5.pow(3151.183458431295);
      complex6.conjugate();
      Complex complex7 = complex2.cos();
      complex4.hashCode();
      complex0.tanh();
      complex2.cos();
      complex7.getField();
      Complex complex8 = Complex.NaN;
      complex8.sin();
      Complex complex9 = new Complex((-25.666551), 0.9921976327896118);
      complex9.sqrt();
      complex5.reciprocal();
      double double0 = 0.0;
      Complex.valueOf(770.90834);
      complex8.sin();
      try { 
        complex3.nthRoot((-731));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -731
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1324.16737774743), (-1324.16737774743));
      Complex complex1 = complex0.multiply(37);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.cos();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.negate();
      complex5.NaN.add(complex3);
      Complex complex6 = Complex.ONE;
      complex6.asin();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.cosh();
      complex3.NaN.conjugate();
      complex3.INF.divide(2.2491378784179688);
      Complex complex4 = Complex.valueOf((-25.666551));
      complex4.I.nthRoot(492);
      Complex complex5 = complex1.I.tan();
      complex1.ONE.divide(2.635656176303053E7);
      complex5.ZERO.log();
      Complex complex6 = complex5.tanh();
      complex0.cosh();
      complex1.ZERO.cos();
      complex5.sqrt();
      complex0.acos();
      Complex complex7 = complex6.pow(complex2);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(946.6);
      Complex complex1 = complex0.ONE.createComplex(0.0, (-1084.0));
      Complex complex2 = complex1.I.pow(complex0);
      complex2.ZERO.hashCode();
      Complex complex3 = complex1.ONE.tan();
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex1.I.sin();
      complex5.ZERO.readResolve();
      Complex complex6 = complex4.INF.add(complex3);
      complex6.I.negate();
      Complex complex7 = complex1.INF.sinh();
      Complex complex8 = complex7.subtract(complex1);
      Complex complex9 = complex0.NaN.asin();
      Complex complex10 = complex0.divide(603.0);
      Complex complex11 = complex10.ONE.reciprocal();
      complex11.INF.acos();
      Complex complex12 = complex10.INF.multiply(40);
      complex0.getArgument();
      Complex complex13 = complex1.sin();
      complex0.hashCode();
      Complex complex14 = complex8.sinh();
      complex4.INF.add(complex13);
      complex9.subtract(Double.POSITIVE_INFINITY);
      Complex.valueOf((-2135.0696882586));
      complex4.cosh();
      complex3.getArgument();
      complex14.add(complex9);
      complex7.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(0.0, 0.0);
      complex11.sqrt1z();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ONE.cosh();
      complex3.NaN.conjugate();
      complex3.INF.divide(2.2491378784179688);
      Complex complex4 = Complex.valueOf((-25.666551));
      complex4.I.nthRoot(492);
      Complex complex5 = complex1.I.tan();
      complex5.ZERO.log();
      Complex complex6 = complex5.tanh();
      complex0.cosh();
      complex5.sqrt();
      complex0.acos();
      complex6.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      complex1.INF.reciprocal();
      complex0.NaN.subtract(complex1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.NaN.pow(complex2);
      complex3.INF.sqrt1z();
      complex0.getReal();
      Complex complex4 = Complex.valueOf(0.0, 1869.04177250416);
      complex0.equals(complex4);
      Complex complex5 = complex2.reciprocal();
      complex5.getArgument();
      complex4.divide((-9.841244788104406E44));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 5133.864116143953);
      complex0.asin();
      Complex complex1 = Complex.valueOf((-1171.8539069111));
      Complex complex2 = complex0.multiply(876.6236532543);
      Complex complex3 = complex0.pow(complex1);
      complex3.ONE.tanh();
      complex3.NaN.readResolve();
      complex2.conjugate();
      complex0.subtract(complex1);
      complex0.cosh();
      complex0.pow(489.8495261504764);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getField();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.subtract(complex1);
      complex2.getArgument();
      complex1.ONE.log();
      complex1.ONE.getArgument();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.NaN.add(complex4);
      complex3.I.readResolve();
      complex0.ONE.toString();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.INF.sqrt1z();
      complex7.multiply(0.0);
      Complex complex8 = complex0.INF.asin();
      Complex complex9 = complex7.INF.cos();
      complex2.toString();
      Complex complex10 = complex2.cos();
      Complex complex11 = complex9.tanh();
      complex7.negate();
      Complex complex12 = complex8.asin();
      complex12.getReal();
      complex0.equals(complex6);
      complex8.I.conjugate();
      complex9.divide(0.0);
      complex7.equals(complex8);
      complex8.getReal();
      complex2.negate();
      complex5.getReal();
      complex5.abs();
      complex7.add(0.0);
      complex7.pow(0.0);
      complex10.cosh();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.asin();
      complex2.NaN.log();
      Complex complex3 = complex0.ZERO.add(complex1);
      complex3.ZERO.multiply((-217.16035481));
      Complex complex4 = complex0.INF.createComplex(0.0, (-1.0524557502830645E-8));
      complex4.multiply(2051);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.I.cos();
      complex0.divide(complex5);
      complex3.negate();
      Complex complex7 = complex6.asin();
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-686.0148274));
      Complex complex2 = complex1.ONE.sin();
      complex2.NaN.toString();
      complex2.NaN.pow(complex1);
      Complex complex3 = new Complex((-686.0148274), (-686.0148274));
      complex2.I.subtract(complex3);
      Complex complex4 = complex0.INF.acos();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex4.pow(complex5);
      Complex complex7 = complex0.asin();
      complex7.INF.hashCode();
      complex0.equals(complex1);
      Complex.valueOf((-686.0148274), 2691.924);
      Complex.valueOf(407.2182082669736, 407.2182082669736);
      complex7.isInfinite();
      Complex complex8 = complex0.pow(complex7);
      Complex complex9 = complex8.log();
      complex3.divide(complex8);
      Complex complex10 = complex8.tanh();
      complex10.ONE.getField();
      Complex complex11 = Complex.valueOf(0.0);
      complex11.sqrt();
      complex5.isNaN();
      complex6.pow(complex9);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.divide(0.0);
      complex1.INF.hashCode();
      Complex complex2 = complex1.multiply(0.0);
      Complex complex3 = complex0.ZERO.atan();
      complex3.I.hashCode();
      Complex complex4 = complex1.ZERO.pow(279.368998947928);
      Complex complex5 = complex0.createComplex(0.0, (-9.537874867759656E-8));
      complex5.exp();
      complex2.INF.cosh();
      Complex.valueOf(2.6786368134431636E-33);
      Complex complex6 = complex1.negate();
      Complex.valueOf(0.0, (-2862.4978202));
      complex0.abs();
      Complex complex7 = complex2.pow(complex4);
      complex7.INF.cosh();
      Complex complex8 = complex7.reciprocal();
      complex6.isNaN();
      Complex complex9 = complex1.negate();
      complex4.atan();
      complex9.getField();
      complex1.divide((-895.2));
      complex8.sqrt1z();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-866.73));
      complex1.ONE.abs();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.I.subtract(1.0);
      Complex complex4 = complex1.ZERO.divide(1.0);
      complex2.getImaginary();
      Complex complex5 = complex0.subtract(0.0);
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex5.INF.log();
      Complex complex8 = complex5.I.pow(9.848636053777669E237);
      complex8.ONE.divide(complex3);
      complex1.pow(complex3);
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      complex6.sqrt();
      Complex complex9 = complex2.sin();
      complex9.INF.negate();
      complex4.multiply((-2368));
      complex6.pow(0.0);
      complex7.reciprocal();
      complex8.sin();
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.4002431631088257);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex1.ONE.divide(0.0);
      Complex complex4 = complex3.add(0.4002431631088257);
      Complex complex5 = Complex.valueOf(0.4002431631088257, (-5363.86745241782));
      complex5.ONE.getField();
      Complex complex6 = complex1.cos();
      complex0.isNaN();
      complex0.nthRoot(2366);
      complex3.abs();
      complex1.nthRoot(2366);
      Complex complex7 = Complex.INF;
      complex0.multiply(complex7);
      complex2.getField();
      Complex complex8 = complex6.multiply(1.7792143821716309);
      complex8.hashCode();
      complex4.createComplex((-5363.86745241782), 0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.log();
      complex3.I.subtract(complex2);
      Complex complex4 = Complex.I;
      complex2.I.hashCode();
      complex2.I.createComplex(1.4924075603485107, 228.42241792);
      Complex complex5 = complex2.divide(complex4);
      complex5.I.reciprocal();
      Complex complex6 = Complex.valueOf(1.4924075603485107);
      complex2.I.sqrt1z();
      complex5.getArgument();
      complex2.getReal();
      complex2.getImaginary();
      complex5.isNaN();
      complex2.ONE.getArgument();
      complex4.ZERO.sin();
      complex4.multiply((-1968.33163));
      try { 
        complex6.nthRoot((-1420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,420
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(2.6115946769714355);
      complex0.equals("3W=-1J{8cb6N{jOD");
      Complex complex1 = complex0.createComplex(2.6115946769714355, 2.6115946769714355);
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf(0.5822374820709229);
      complex2.NaN.multiply(complex3);
      complex0.getReal();
      Complex complex4 = complex2.multiply((-1123));
      complex4.equals(complex0);
      complex4.toString();
      complex3.subtract(0.5822374820709229);
      Complex complex5 = complex3.divide(2.6115946769714355);
      complex5.multiply(0.29619067907333374);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.multiply(1.841078519821167);
      complex0.isNaN();
      Complex complex3 = complex2.multiply(1.841078519821167);
      Complex complex4 = complex1.pow(2.0);
      Complex complex5 = complex4.divide(2.0);
      Complex complex6 = complex4.I.multiply(0);
      complex6.ZERO.toString();
      Complex complex7 = complex6.ZERO.sinh();
      complex4.ZERO.tan();
      Complex complex8 = complex2.divide(complex3);
      Complex complex9 = complex3.ONE.subtract(complex5);
      complex8.NaN.pow(1.841078519821167);
      complex1.conjugate();
      Complex complex10 = complex3.cos();
      complex9.hashCode();
      complex9.tanh();
      complex1.cos();
      complex8.getField();
      Complex complex11 = complex2.sin();
      Complex complex12 = complex11.sqrt();
      Complex complex13 = complex12.INF.reciprocal();
      Complex complex14 = Complex.valueOf(0.0);
      complex14.INF.sin();
      complex10.nthRoot(7);
      complex7.equals(complex6);
      complex13.hashCode();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.INF.subtract((double) 0);
      complex1.ZERO.atan();
      Complex complex4 = complex2.ONE.multiply(0);
      Complex complex5 = complex4.INF.atan();
      complex5.ZERO.add(complex0);
      Complex complex6 = complex5.I.multiply(complex4);
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex8.I.reciprocal();
      complex9.I.createComplex(0, 0);
      Complex complex10 = complex0.sqrt1z();
      complex7.sin();
      Complex complex11 = complex7.reciprocal();
      Complex complex12 = complex11.INF.atan();
      Complex complex13 = complex11.ZERO.tan();
      complex12.ONE.negate();
      complex12.cos();
      Complex complex14 = complex13.ONE.divide(complex2);
      complex2.getImaginary();
      complex10.exp();
      complex2.hashCode();
      complex2.abs();
      complex8.nthRoot(456);
      Complex.valueOf(Double.NaN);
      complex12.acos();
      Object object0 = new Object();
      complex1.equals(object0);
      complex8.tanh();
      complex14.readResolve();
      complex3.acos();
      complex3.subtract(complex6);
      complex11.pow((-2537.0));
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.tanh();
      complex1.pow((-241.3884803763095));
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.sinh();
      complex4.divide(complex2);
      Complex complex6 = complex0.acos();
      Complex.valueOf(0.0);
      complex4.getImaginary();
      complex5.sin();
      complex6.getImaginary();
      complex0.readResolve();
      complex1.getField();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.negate();
      Complex complex1 = Complex.valueOf(543.159982, 543.159982);
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex0.multiply(complex3);
      complex4.NaN.getField();
      complex1.NaN.createComplex(543.159982, 543.159982);
      Complex complex5 = Complex.valueOf((-34.656016368), 543.159982);
      complex5.INF.tan();
      complex3.getImaginary();
      complex0.isInfinite();
      Complex.valueOf((-34.656016368), 543.159982);
      Complex complex6 = complex3.sqrt();
      complex2.getArgument();
      complex1.getArgument();
      complex3.createComplex((-27.3685081977), (-27.3685081977));
      complex6.createComplex(543.159982, 0.7853981633974483);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add((-814.2812850474));
      complex1.ONE.conjugate();
      Complex.valueOf(6.283185307179586);
      Complex complex2 = new Complex(6.283185307179586);
      Complex complex3 = complex0.multiply(complex2);
      complex3.cos();
      Complex complex4 = complex3.add(6.283185307179586);
      Complex complex5 = Complex.valueOf((-1092.6390577));
      complex5.NaN.divide(complex4);
      complex2.isNaN();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1.0), (-71.081));
      Complex complex2 = complex1.NaN.sin();
      complex1.ONE.getArgument();
      Complex complex3 = complex2.ZERO.cos();
      complex1.sinh();
      complex0.ZERO.hashCode();
      Object object0 = new Object();
      Complex complex4 = Complex.valueOf(3435.5, 1.2736636153072213E-90);
      complex0.equals(object0);
      Complex complex5 = complex4.ZERO.tan();
      complex5.tan();
      Complex complex6 = complex0.acos();
      Complex complex7 = complex4.multiply(complex0);
      complex7.sin();
      Complex complex8 = complex7.multiply(2073.8793492904);
      complex6.abs();
      Complex complex9 = Complex.valueOf(2073.8793492904);
      Complex complex10 = complex9.sin();
      complex6.acos();
      Complex complex11 = complex7.cos();
      complex10.NaN.sqrt1z();
      complex11.I.createComplex((-71.081), (-1.0));
      complex3.multiply(Double.NaN);
      complex7.asin();
      complex5.toString();
      Complex complex12 = complex10.divide(complex2);
      complex8.conjugate();
      complex12.reciprocal();
      complex6.pow(0.0);
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(2757.883084185);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.NaN.cosh();
      complex3.ZERO.subtract(0.0);
      Complex complex4 = Complex.valueOf(278.3581314824);
      Complex complex5 = complex4.negate();
      complex5.I.multiply(complex3);
      Complex complex6 = complex1.I.add(278.3581314824);
      Complex complex7 = complex0.multiply(complex1);
      Complex complex8 = complex7.NaN.conjugate();
      complex8.ZERO.getField();
      Complex complex9 = complex8.ONE.exp();
      complex6.ZERO.tan();
      complex4.ONE.divide(complex7);
      complex7.divide(2757.883084185);
      Complex complex10 = complex6.atan();
      complex10.I.divide(complex2);
      complex10.I.abs();
      complex0.log();
      Complex complex11 = complex4.cosh();
      complex11.I.subtract(complex9);
      complex0.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.acos();
      Complex complex2 = complex0.ONE.pow(0.0);
      complex2.conjugate();
      complex0.equals("aV3n;w]");
      complex1.tanh();
      complex0.isNaN();
      complex0.INF.toString();
      Complex complex3 = complex1.multiply(complex0);
      complex3.readResolve();
      complex1.cos();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.pow(complex1);
      Complex complex6 = complex3.negate();
      complex6.NaN.exp();
      complex4.pow(0.0);
      complex4.atan();
      Complex complex7 = complex1.negate();
      complex7.NaN.sin();
      complex4.acos();
      Complex complex8 = complex4.cosh();
      complex8.getField();
      complex5.pow(0.0);
      complex3.getReal();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ZERO.cosh();
      complex2.I.toString();
      complex0.equals(complex1);
      Complex complex3 = complex1.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex2.sqrt();
      complex4.ZERO.cos();
      complex4.INF.divide(complex2);
      complex4.I.multiply(0.0);
      Complex complex5 = complex2.ONE.sinh();
      complex5.NaN.sin();
      Complex complex6 = complex0.divide(complex3);
      complex2.pow(complex6);
      complex0.ZERO.cosh();
      complex1.cos();
      complex1.tan();
      complex3.add(0.0);
      complex6.conjugate();
      complex0.add((-2013.9685142));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.multiply((-283.3));
      Complex complex4 = complex2.multiply((-283.3));
      complex2.ZERO.readResolve();
      complex0.getImaginary();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex6 = complex1.cos();
      complex4.ONE.multiply(complex6);
      complex2.equals(complex5);
      complex0.asin();
      complex6.multiply(complex4);
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.subtract(complex6);
      complex6.cos();
      complex3.getField();
      complex7.divide((-283.3));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = complex0.tanh();
      complex2.getArgument();
      complex0.ZERO.log();
      complex0.nthRoot(3159);
      Complex complex3 = Complex.NaN;
      complex1.add(0.0);
      Complex complex4 = complex3.I.createComplex((-2074.0), 3159);
      complex4.ZERO.tan();
      Complex complex5 = complex1.pow(complex3);
      complex3.hashCode();
      Complex complex6 = complex5.INF.multiply(complex3);
      complex1.abs();
      complex0.sqrt();
      complex5.divide((-1022.37263761126));
      complex1.reciprocal();
      complex3.acos();
      Object object0 = new Object();
      complex6.equals(object0);
      complex6.cosh();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.6181373596191406);
      complex0.multiply(7);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(1099.3007951563543);
      Complex complex1 = complex0.ONE.sin();
      complex0.tan();
      complex0.I.conjugate();
      Complex complex2 = complex1.reciprocal();
      complex0.getReal();
      complex0.abs();
      complex1.getReal();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.multiply((-967));
      complex1.INF.log();
      complex0.getImaginary();
      complex0.I.asin();
      complex0.hashCode();
      complex0.conjugate();
      complex0.toString();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
      Complex complex1 = complex0.log();
      complex1.I.multiply(0.0);
      complex0.nthRoot(2865);
      Complex complex2 = complex0.I.atan();
      complex2.add(complex0);
      Complex complex3 = complex0.pow(0.0);
      complex3.ZERO.divide((double) 2865);
      complex2.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      double double0 = (-965.672850515);
      Complex complex0 = Complex.valueOf((-965.672850515), (-965.672850515));
      complex0.isNaN();
      complex0.ZERO.abs();
      Complex complex1 = complex0.subtract((-965.672850515));
      complex1.exp();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.I.asin();
      complex3.tanh();
      Complex complex4 = complex3.NaN.createComplex((-1752.231245566), (-965.672850515));
      try { 
        complex4.I.nthRoot((-2235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,235
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex((-1324.16737774743), (-1324.16737774743));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.subtract(2.3410181999206543);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = complex3.I.subtract(complex0);
      Complex complex5 = complex4.NaN.subtract(1266.54383);
      complex5.ZERO.tanh();
      Complex complex6 = complex1.asin();
      complex1.add(2.3410181999206543);
      Complex complex7 = complex1.ONE.divide(complex5);
      double double0 = 70.5795;
      Complex.valueOf(70.5795, 70.5795);
      complex6.ONE.sinh();
      try { 
        complex7.ONE.nthRoot((-1026));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,026
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex2.NaN.sqrt1z();
      complex3.INF.subtract(1.0);
      Object object0 = new Object();
      Complex complex4 = complex0.asin();
      complex4.I.exp();
      complex4.INF.exp();
      complex0.equals(object0);
      Complex complex5 = complex2.NaN.asin();
      Complex complex6 = complex5.ONE.add(complex3);
      Complex complex7 = Complex.ONE;
      complex6.I.add(complex7);
      Complex.valueOf((-8.946297908979776E-266));
      Object object1 = complex1.readResolve();
      complex0.equals(object1);
      Complex complex8 = complex1.pow(complex0);
      Complex complex9 = complex8.pow(1.0);
      complex2.getArgument();
      Complex complex10 = complex0.reciprocal();
      complex10.ONE.sinh();
      complex0.getArgument();
      complex3.tan();
      Complex complex11 = complex8.add(complex9);
      complex11.ZERO.subtract(complex10);
      Complex complex12 = complex9.sqrt1z();
      complex12.ZERO.getArgument();
      complex2.getField();
      complex3.readResolve();
      complex3.sqrt1z();
      complex3.sqrt();
      complex0.pow(1885.2);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(1561.9638348781, 1561.9638348781);
      complex0.ZERO.sqrt();
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
      complex1.isNaN();
      Complex.valueOf(1561.9638348781);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1138.788259612, (-4471.1976149));
      complex0.NaN.log();
      Complex complex1 = complex0.INF.add(0.0);
      Complex complex2 = complex1.I.reciprocal();
      complex0.INF.negate();
      Complex complex3 = complex0.log();
      Complex.valueOf(0.0, 0.0);
      complex1.divide(complex3);
      complex2.conjugate();
      Complex.valueOf(0.0, (-4471.1976149));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      double double0 = (-958.9163);
      Complex complex0 = Complex.valueOf((-958.9163));
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.sqrt1z();
      complex0.abs();
      complex1.I.getField();
      Complex complex2 = complex1.I.subtract((-1034.0));
      try { 
        complex2.ONE.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-609.286));
      complex0.log();
      Complex.valueOf((-609.286));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.add(0.16666666666666666);
      complex0.INF.subtract(complex1);
      Complex complex2 = complex0.tanh();
      complex0.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.I.getArgument();
      complex0.ZERO.sqrt();
      complex0.ONE.exp();
      Complex complex1 = complex0.ZERO.sin();
      complex0.NaN.asin();
      Complex complex2 = complex1.ZERO.sin();
      complex2.NaN.asin();
      complex0.reciprocal();
      complex1.getImaginary();
      complex1.cosh();
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.NaN.nthRoot(1431);
      Complex complex2 = Complex.ZERO;
      complex0.add(complex2);
      complex0.toString();
      complex0.readResolve();
      Complex complex3 = complex0.add(1355.0);
      complex3.ONE.add(complex2);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.I.pow(1.0);
      Complex complex3 = complex0.INF.createComplex(1.0, 1.0);
      Complex complex4 = complex3.I.multiply(1.0);
      complex0.getReal();
      Complex complex5 = complex0.acos();
      Complex.valueOf(1.0);
      complex1.getReal();
      complex5.INF.atan();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex5.exp();
      complex5.nthRoot(4981);
      Complex complex8 = complex6.subtract(complex4);
      complex8.ZERO.toString();
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = complex7.pow(complex4);
      complex10.ONE.abs();
      complex4.getReal();
      complex9.tanh();
      complex2.multiply(4981);
      complex6.add(0.0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex2.ONE.add(1660.0);
      assertEquals(1661.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = Complex.INF;
      complex5.INF.getField();
      Complex complex6 = complex1.I.pow(complex5);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex3.multiply(Double.NaN);
      complex7.I.hashCode();
      complex2.ZERO.readResolve();
      Complex complex9 = complex7.reciprocal();
      Complex complex10 = complex1.pow(1660.0);
      Complex complex11 = complex10.ONE.acos();
      complex11.INF.tanh();
      Complex complex12 = complex10.negate();
      Complex complex13 = complex2.add(complex10);
      Complex complex14 = complex13.multiply(1);
      Complex complex15 = complex12.add(0.0);
      complex3.isInfinite();
      complex7.INF.multiply((double) 1);
      Complex complex16 = complex1.cosh();
      complex16.divide(1660.0);
      Complex complex17 = complex9.sqrt1z();
      Complex complex18 = complex17.ZERO.sinh();
      assertEquals(1.0, complex17.getReal(), 0.01);
      
      Complex complex19 = complex14.tanh();
      assertTrue(complex19.equals((Object)complex6));
      
      Complex complex20 = complex3.divide(complex12);
      complex11.sqrt();
      Complex complex21 = complex11.pow(complex8);
      assertTrue(complex11.equals((Object)complex18));
      assertSame(complex2, complex15);
      assertSame(complex21, complex20);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(-0.0, complex11.getImaginary(), 0.01);
      assertNotSame(complex21, complex6);
  }
}
