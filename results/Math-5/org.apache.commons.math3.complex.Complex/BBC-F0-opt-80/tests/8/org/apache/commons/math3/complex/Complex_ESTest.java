/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:59:44 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.createComplex((-20.0), (-20.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex(546.630384407717, (-184.2));
      Complex complex3 = Complex.valueOf((-37.1217220611318), Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.ZERO;
      Complex.valueOf(1016.4000216);
      complex4.abs();
      Complex complex6 = Complex.ONE;
      complex3.multiply(complex5);
      Complex complex7 = complex1.cosh();
      complex7.tanh();
      complex4.toString();
      complex1.multiply(3317.1398872275);
      complex3.sin();
      Complex complex8 = Complex.valueOf((-396.0514752684));
      complex8.sqrt1z();
      int int0 = 123;
      Complex complex9 = Complex.valueOf(54406.0974);
      try { 
        complex9.nthRoot((-2653));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,653
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.conjugate();
      complex1.I.multiply((-1.0));
      Complex complex2 = Complex.valueOf((-1.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.acos();
      complex3.ZERO.reciprocal();
      Complex.valueOf((-6.488296536838142E224), (-6.488296536838142E224));
      complex0.pow((-1.0));
      complex2.sqrt();
      complex3.pow(complex2);
      complex1.tanh();
      Complex complex4 = complex1.multiply(1167);
      complex4.divide((-6.488296536838142E224));
      complex3.negate();
      complex1.reciprocal();
      complex3.cos();
      complex3.conjugate();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), 1584.76);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = new Complex((-3220.174089639712));
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.I;
      complex5.divide((-3220.174089639712));
      Complex complex6 = complex2.tanh();
      complex1.getArgument();
      Complex complex7 = complex5.sqrt1z();
      complex7.sqrt1z();
      complex1.sinh();
      complex1.divide(complex4);
      complex6.createComplex((-20.0), (-20.0));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.negate();
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(415.9741);
      Complex complex1 = complex0.ZERO.cos();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.acos();
      complex2.ZERO.toString();
      Complex complex3 = complex0.I.add(415.9741);
      complex3.negate();
      complex2.NaN.toString();
      complex0.I.subtract(415.9741);
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.add(complex0);
      Complex complex6 = complex0.negate();
      complex6.ONE.divide(complex5);
      Complex.valueOf(415.9741);
      Complex complex7 = complex5.createComplex(0.0, 28777.726070563294);
      complex5.multiply(complex4);
      complex4.conjugate();
      complex4.add(complex5);
      Complex complex8 = complex4.asin();
      complex8.ZERO.tan();
      complex7.createComplex(0.0, 0.0);
      try { 
        complex1.nthRoot((-32768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -32,768
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex0.divide(411.0);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = Complex.valueOf(411.0);
      Complex complex5 = complex4.divide((-2845.7));
      complex5.nthRoot(597);
      complex1.tanh();
      complex3.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2329.6, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.divide(2420.8746678604);
      complex0.add(complex1);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.divide(2420.8746678604);
      complex0.nthRoot(597);
      complex1.tanh();
      Complex complex4 = Complex.I;
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-22.202132500787663), (-22.202132500787663));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-833.5), Double.NaN);
      Complex complex1 = complex0.cosh();
      complex1.getArgument();
      Complex complex2 = Complex.valueOf((-833.5), (-1853.94233447835));
      complex2.multiply(Double.NaN);
      complex2.abs();
      Complex complex3 = Complex.NaN;
      Complex complex4 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-22.202132500787663), (-22.202132500787663));
      Complex complex1 = complex0.divide((-22.202132500787663));
      complex1.add(complex0);
      Complex complex2 = new Complex(42.0, Double.POSITIVE_INFINITY);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(1176.81151591323);
      Complex complex1 = complex0.ZERO.tanh();
      complex1.multiply(complex0);
      Complex complex2 = new Complex((-8.009548754642203E231));
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex1.add(Double.NaN);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(5.279341762558335E-18, 5.279341762558335E-18);
      Complex complex1 = new Complex(5.279341762558335E-18, 5.279341762558335E-18);
      Complex complex2 = complex0.divide(Double.POSITIVE_INFINITY);
      complex0.add(complex1);
      complex2.getImaginary();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.divide(0.07068414986133575);
      complex4.nthRoot(597);
      complex0.subtract(Double.POSITIVE_INFINITY);
      complex1.divide(Double.POSITIVE_INFINITY);
      complex3.hashCode();
      Complex complex5 = complex0.tanh();
      complex1.add(complex5);
      complex4.tan();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex((-3149.6997), 2015.6166223);
      complex7.sqrt1z();
      complex5.tan();
      complex4.atan();
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-22.202132500787663), (-22.202132500787663));
      Complex complex1 = complex0.divide((-22.202132500787663));
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf((-22.202132500787663));
      Complex complex4 = complex0.I.divide((-22.202132500787663));
      complex3.INF.nthRoot(597);
      complex2.tanh();
      Complex complex5 = complex4.sqrt();
      complex2.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.subtract(3047.35331292);
      Complex complex2 = complex1.divide((-1827.469004707437));
      Complex complex3 = complex1.multiply(1277141308);
      complex2.hashCode();
      Complex complex4 = complex1.acos();
      Complex complex5 = new Complex((-1827.469004707437), (-1827.469004707437));
      complex5.acos();
      complex2.readResolve();
      complex5.createComplex(3047.35331292, (-3219));
      complex4.exp();
      complex3.reciprocal();
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-81.05970639094));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = Complex.INF;
      complex1.add(complex0);
      Complex complex3 = new Complex(20.0, Double.NaN);
      complex3.getImaginary();
      complex3.tanh();
      Complex complex4 = Complex.valueOf(1.3287778803035383E-8);
      complex0.nthRoot(591);
      Complex complex5 = Complex.ONE;
      complex3.subtract((-1099.49789));
      Complex complex6 = new Complex((-81.05970639094));
      complex2.divide(1.3287778803035383E-8);
      complex0.multiply(501);
      complex0.hashCode();
      complex5.acos();
      complex4.reciprocal();
      complex1.acos();
      Complex complex7 = new Complex((-162.11324425441268), 1633.7);
      complex7.readResolve();
      Complex complex8 = complex0.createComplex(1.644449394585716E-196, 1.3287778803035383E-8);
      complex7.exp();
      complex7.reciprocal();
      Complex complex9 = Complex.ONE;
      complex6.getImaginary();
      complex8.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2042.205973273245), (-2042.205973273245));
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2042.205973273245), (-2042.205973273245));
      Complex complex1 = new Complex((-3051.5));
      complex1.tan();
      Complex complex2 = new Complex((-3007.320027738));
      Complex complex3 = complex2.add(complex1);
      complex3.readResolve();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex3.atan();
      complex5.isInfinite();
      Complex complex6 = complex4.subtract(complex0);
      complex2.log();
      // Undeclared exception!
      complex6.nthRoot(2134319043);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2042.205973273245), (-2042.205973273245));
      Complex complex1 = Complex.INF;
      complex0.add(complex1);
      complex1.getImaginary();
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.nthRoot(603);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.subtract(2.5066452026367188);
      Complex complex6 = new Complex((-2042.205973273245));
      complex3.divide(Double.POSITIVE_INFINITY);
      complex6.multiply(1);
      complex1.hashCode();
      complex4.acos();
      complex1.reciprocal();
      Complex complex7 = complex0.acos();
      complex7.readResolve();
      complex0.createComplex(1277.725, Double.POSITIVE_INFINITY);
      Complex complex8 = complex5.exp();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = Complex.ONE;
      complex10.getImaginary();
      complex7.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      complex1.nthRoot(675);
      Complex complex2 = Complex.I;
      complex2.negate();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = Complex.valueOf(4.856678149580005E-9, Double.POSITIVE_INFINITY);
      complex4.cos();
      Complex.valueOf(4.856678149580005E-9, (double) 675);
      complex0.sqrt();
      complex4.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = (-3283.3314445206);
      Complex complex1 = new Complex((-3283.3314445206), (-3283.3314445206));
      Complex.valueOf(629.18, (-0.9999944996012212));
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.I;
      try { 
        complex3.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.NaN.subtract(0.0);
      complex4.I.cosh();
      Complex complex5 = complex1.ONE.pow(complex2);
      Complex complex6 = complex1.tan();
      Complex complex7 = complex6.NaN.cos();
      complex1.abs();
      Complex complex8 = complex1.ONE.multiply(complex6);
      complex5.sqrt1z();
      Complex complex9 = complex2.reciprocal();
      complex6.acos();
      complex2.divide(Double.NaN);
      complex7.createComplex(Double.NaN, 0.272019649514069);
      complex0.NaN.reciprocal();
      complex2.sqrt1z();
      complex0.readResolve();
      complex9.add(0.272019649514069);
      complex2.log();
      Complex complex10 = complex8.sin();
      complex10.ONE.tanh();
      complex10.NaN.cosh();
      int int0 = (-3091);
      try { 
        complex9.nthRoot((-3091));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,091
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-81.05970639094));
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = Complex.valueOf((-1.0), (-1.0));
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.I;
      Complex complex5 = complex0.pow(complex4);
      complex0.hashCode();
      Complex complex6 = complex5.add(complex3);
      Complex complex7 = complex3.subtract((-81.05970639094));
      Complex complex8 = complex3.tan();
      complex5.add((-81.05970639094));
      Complex complex9 = new Complex(1.79214305133496E-187);
      complex6.readResolve();
      complex3.equals(complex4);
      complex2.pow(complex3);
      complex7.createComplex((-81.05970639094), (-81.05970639094));
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-81.05970639094));
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex.valueOf((-1.0), (-1214.4982368521));
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex((-1.0), (-1214.4982368521));
      Complex complex5 = complex0.exp();
      complex5.toString();
      Complex complex6 = complex0.acos();
      complex5.cos();
      complex6.toString();
      Complex complex7 = complex6.multiply(4767);
      complex7.getArgument();
      Complex.valueOf((-1.0), (-81.05970639094));
      complex1.tanh();
      complex7.getArgument();
      complex7.abs();
      Complex complex8 = Complex.I;
      complex8.equals("(0.29904478524513967, 0.21426035483565545)");
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(5.279341762558335E-18, 5.279341762558335E-18);
      Complex complex2 = Complex.valueOf((-1214.4982368521), (-1214.4982368521));
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex((-1214.4982368521));
      complex2.hashCode();
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex2.add(complex4);
      Complex complex7 = complex0.conjugate();
      complex1.conjugate();
      complex0.subtract(Double.NaN);
      complex5.tan();
      complex6.add(3451.22354);
      complex7.multiply(572.96);
      Complex complex8 = Complex.I;
      Object object0 = new Object();
      complex2.readResolve();
      complex8.equals(complex5);
      Complex complex9 = Complex.NaN;
      complex9.pow(complex8);
      complex8.divide(5.279341762558335E-18);
      complex9.multiply(2045);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.pow(complex2);
      complex3.hashCode();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex1.add(complex2);
      Complex complex6 = complex2.conjugate();
      Complex complex7 = complex5.subtract((-127.68));
      complex3.tan();
      complex7.add((-1.2030229087793677E-8));
      Complex complex8 = complex4.multiply((-1.2030229087793677E-8));
      Complex complex9 = Complex.I;
      Object object0 = new Object();
      complex8.readResolve();
      complex9.equals(complex6);
      complex9.pow(complex2);
      complex9.divide((-1.2030229087793677E-8));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 1458.4448606158674);
      complex0.nthRoot(896);
      Complex complex1 = complex0.add((double) 896);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.cos();
      complex3.subtract(5489.8036934516);
      complex4.I.hashCode();
      Complex complex5 = complex2.sqrt();
      complex5.ZERO.asin();
      complex5.toString();
      Complex complex6 = complex3.tan();
      Complex complex7 = complex6.subtract(complex2);
      complex7.ONE.getArgument();
      Complex.valueOf(1458.4448606158674);
      Complex complex8 = complex5.tan();
      Complex complex9 = complex0.tan();
      complex9.ONE.add((double) 896);
      complex4.createComplex((-1.4674011002723395), (-20.0));
      complex3.abs();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      complex1.nthRoot(675);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.negate();
      complex0.negate();
      Complex complex4 = complex2.subtract(complex1);
      Complex.valueOf(1.0, 439.34076061);
      complex4.cos();
      Complex complex5 = Complex.valueOf(1.0);
      complex5.tan();
      Complex.valueOf(0.0, 1616.3);
      complex3.reciprocal();
      complex3.conjugate();
      complex2.pow(1.0);
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2042.205973273245), (-2042.205973273245));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.sqrt();
      complex0.nthRoot(681);
      Complex complex3 = complex2.negate();
      complex3.subtract(complex1);
      Complex complex4 = Complex.valueOf(2204.6005286468094, (-1.0));
      Complex complex5 = complex3.cos();
      complex3.tan();
      Complex.valueOf((-2042.205973273245), (double) 681);
      complex0.reciprocal();
      complex4.conjugate();
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-81.05970639094));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf((-81.05970639094));
      complex4.INF.nthRoot(603);
      Complex complex5 = complex4.subtract((-81.05970639094));
      Complex.valueOf((-279.42483305));
      complex5.INF.divide((-1827.469004707437));
      complex3.multiply((-3219));
      complex4.multiply(603);
      complex3.getArgument();
      Complex complex6 = Complex.INF;
      complex5.tanh();
      complex3.getArgument();
      complex2.abs();
      Complex complex7 = Complex.I;
      complex5.equals(complex7);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      complex1.nthRoot(675);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.negate();
      complex1.subtract(complex2);
      Complex complex4 = Complex.valueOf(4.856678149580005E-9, Double.POSITIVE_INFINITY);
      complex4.cos();
      complex3.tan();
      Complex.valueOf(1388.0, (-1806665.0549528478));
      complex1.reciprocal();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.I;
      complex6.equals("EF FG1`zC(");
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(5.279341762558335E-18);
      Complex complex2 = complex0.add(complex1);
      complex1.getImaginary();
      Complex complex3 = new Complex((-717.6935));
      Complex complex4 = complex3.tanh();
      Complex.valueOf((-2168.67568106));
      complex3.nthRoot(673);
      Complex complex5 = complex1.subtract((-717.6935));
      Complex complex6 = Complex.valueOf((-279.42483305));
      complex0.divide((-279.42483305));
      complex3.multiply(672);
      complex0.hashCode();
      complex4.acos();
      complex1.reciprocal();
      complex5.acos();
      complex6.readResolve();
      complex4.createComplex((-1419.720779182), (-1113.2380577184906));
      Complex complex7 = complex4.exp();
      complex2.reciprocal();
      complex7.getImaginary();
      Complex complex8 = Complex.valueOf((-2472.0239707));
      complex8.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-81.05970639094));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf((-81.05970639094));
      complex4.INF.nthRoot(603);
      Complex complex5 = complex4.subtract((-81.05970639094));
      Complex.valueOf((-279.42483305));
      Complex complex6 = complex5.INF.divide((-1827.469004707437));
      complex3.multiply((-3219));
      complex3.hashCode();
      Complex complex7 = complex5.acos();
      Complex complex8 = complex0.reciprocal();
      complex7.acos();
      complex8.readResolve();
      Complex complex9 = complex0.createComplex(1277.725, (-1419.720779182));
      complex9.exp();
      Complex complex10 = complex0.reciprocal();
      complex2.getImaginary();
      complex10.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      complex1.nthRoot(675);
      complex0.NaN.sinh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.negate();
      complex1.subtract(complex2);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.subtract(complex0);
      complex5.multiply(821);
      complex1.sqrt1z();
      complex5.asin();
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(1074.75991316);
      Complex complex1 = new Complex(1074.75991316, 1074.75991316);
      Complex complex2 = complex0.pow(complex1);
      complex1.INF.hashCode();
      Complex complex3 = complex0.ZERO.tanh();
      complex3.ONE.add(complex0);
      complex3.I.conjugate();
      Complex complex4 = complex2.subtract((-1560.2));
      complex2.tan();
      Complex complex5 = complex0.add((-1293.408));
      Complex complex6 = complex5.multiply(1074.75991316);
      Complex complex7 = Complex.I;
      complex4.equals(complex7);
      complex1.pow(complex6);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(1074.75991316);
      Complex complex1 = new Complex(1074.75991316, 1074.75991316);
      complex0.pow(complex1);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.negate();
      Complex complex4 = complex3.subtract(complex1);
      Complex complex5 = Complex.valueOf(1.2241663944223546E-4, 1074.75991316);
      complex1.cos();
      complex5.tan();
      Complex.valueOf(1074.75991316, 1.2241663944223546E-4);
      complex4.reciprocal();
      Complex complex6 = complex0.conjugate();
      complex4.pow(Double.POSITIVE_INFINITY);
      complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      complex1.nthRoot(675);
      Complex complex2 = Complex.I;
      complex2.hashCode();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.add(complex1);
      complex1.conjugate();
      complex4.subtract((-1560.2));
      Complex complex5 = Complex.ZERO;
      complex5.NaN.sqrt1z();
      complex3.add(0.9994957459739059);
      complex0.multiply(3833.5619732732);
      Complex complex6 = Complex.I;
      Object object0 = complex2.readResolve();
      complex2.equals(object0);
      complex0.pow(complex3);
      complex4.createComplex(0.9994957459739059, 0.9994841866801992);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1074.75991316, 20.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(1.859427361523558E-4, (-3965.25489635));
      Complex complex3 = complex2.atan();
      complex3.sqrt();
      complex0.nthRoot(681);
      Complex complex4 = complex2.negate();
      complex3.subtract(complex4);
      Complex complex5 = Complex.valueOf(1.859427361523558E-4, (-3965.25489635));
      complex3.cos();
      Complex complex6 = Complex.valueOf(365.307892, 417.0850566333);
      complex5.reciprocal();
      complex6.conjugate();
      complex1.pow(417.0850566333);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(1074.75991316);
      Complex complex1 = new Complex(1074.75991316, 1074.75991316);
      complex0.pow(complex1);
      complex1.INF.hashCode();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.ONE.add(complex0);
      Complex complex4 = complex2.I.conjugate();
      complex4.sqrt1z();
      complex4.atan();
      complex3.isNaN();
      Complex complex5 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2042.205973273245), (-2042.205973273245));
      Complex complex1 = Complex.valueOf(2.5066452026367188, (-2042.205973273245));
      Complex complex2 = complex0.ONE.createComplex((-2042.205973273245), (-1791.356));
      complex0.nthRoot(681);
      Complex complex3 = complex2.negate();
      Complex complex4 = complex1.subtract(complex3);
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2042.205973273245));
      complex2.cos();
      complex0.tan();
      Complex complex5 = Complex.valueOf((-1791.356), (-2679.0));
      complex3.conjugate();
      complex1.divide(complex4);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.atan();
      complex0.sqrt();
      Complex complex3 = complex1.log();
      complex3.sin();
      complex3.exp();
      complex2.toString();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex2.cos();
      complex0.toString();
      complex0.multiply(98);
      complex5.multiply((-674.0138287234));
      complex1.conjugate();
      complex4.conjugate();
      Complex complex6 = complex3.divide(complex4);
      complex6.createComplex((-674.0138287234), 4767);
      Complex complex7 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      complex1.hashCode();
      complex1.nthRoot(1343);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.negate();
      complex2.subtract(complex1);
      Complex.valueOf(8.881133159512924E277, (double) 675);
      complex3.cos();
      Complex complex4 = new Complex(4.856678149580005E-9, (-0.999999945517895));
      complex4.tan();
      Complex.valueOf(7230720.0, Double.NaN);
      complex4.reciprocal();
      complex3.conjugate();
      Complex complex5 = Complex.ZERO;
      complex5.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = Complex.valueOf(Double.NaN, Double.NaN);
      complex2.tan();
      complex1.readResolve();
      Complex complex3 = complex2.sqrt1z();
      complex3.atan();
      complex2.isNaN();
      Complex complex4 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf(2.5066452026367188, 2.5066452026367188);
      Complex complex1 = complex0.createComplex((-1791.356), (-1791.356));
      complex0.log();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.exp();
      complex0.toString();
      complex3.acos();
      Complex complex4 = complex0.cos();
      complex1.toString();
      complex2.multiply(4794);
      Complex complex5 = complex4.multiply(2.5066452026367188);
      complex5.conjugate();
      complex3.createComplex(1.2241663944223546E-4, 979.3309517);
      complex3.isNaN();
      Complex complex6 = Complex.ONE;
      try { 
        complex6.nthRoot((-238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -238
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      complex1.nthRoot(675);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.negate();
      complex1.subtract(complex2);
      Complex complex4 = Complex.valueOf(4.856678149580005E-9, Double.POSITIVE_INFINITY);
      complex4.cos();
      complex3.tan();
      Complex.valueOf(1388.0, (-1806665.0549528478));
      Complex complex5 = complex1.reciprocal();
      complex4.conjugate();
      complex5.pow(678.29972);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(979.3309517);
      complex0.ONE.hashCode();
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.createComplex((-20.0), (-20.0));
      Complex complex2 = complex0.ZERO.negate();
      complex1.NaN.exp();
      Complex complex3 = complex0.pow(979.3309517);
      complex1.negate();
      Complex complex4 = Complex.ZERO;
      complex2.add(complex4);
      complex3.sin();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(1074.75991316);
      Complex complex1 = new Complex(1074.75991316, 1074.75991316);
      complex0.pow(complex1);
      complex1.INF.hashCode();
      Complex complex2 = complex0.ZERO.tanh();
      complex2.ONE.add(complex0);
      Complex complex3 = complex2.I.conjugate();
      complex3.exp();
      Complex complex4 = new Complex((-1560.2), Double.POSITIVE_INFINITY);
      complex4.hashCode();
      Complex complex5 = complex1.add((-1414.886));
      Complex complex6 = complex5.multiply((-3174.61747533981));
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex(2149.520058930115);
      complex6.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.nthRoot(681);
      complex3.ZERO.negate();
      complex1.subtract(complex0);
      Complex complex4 = Complex.valueOf((double) 681, 0.0);
      Complex complex5 = complex2.cos();
      complex5.tan();
      Complex complex6 = Complex.valueOf((double) 681, (-1.0));
      complex3.reciprocal();
      complex4.createComplex(681, 1.5800256583859738);
      complex6.isNaN();
      Complex complex7 = new Complex(1.0);
      complex7.add((-1.0));
      complex7.isNaN();
      complex2.multiply(732.6102198433);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(1521.529649613056);
      complex0.nthRoot(765);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(835.6150673781, 1521.529649613056);
      complex3.cos();
      Complex complex4 = complex3.tan();
      Complex.valueOf(0.0, (-1.0));
      complex2.reciprocal();
      Complex complex5 = complex4.conjugate();
      complex0.divide(complex3);
      complex5.createComplex((-1.0), Double.POSITIVE_INFINITY);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex1.hashCode();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.multiply(1834.5549325094);
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.INF;
      complex4.INF.pow(complex0);
      complex3.getArgument();
      Complex complex5 = complex1.tanh();
      complex3.getArgument();
      complex5.abs();
      complex0.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(1074.75991316);
      Complex complex1 = new Complex(1074.75991316, 1074.75991316);
      Complex complex2 = complex0.pow(complex1);
      complex1.INF.hashCode();
      Complex complex3 = complex0.ZERO.tanh();
      complex3.ONE.add(complex0);
      complex3.I.conjugate();
      complex2.subtract((-1560.2));
      Complex complex4 = complex2.tan();
      complex4.INF.add(1074.75991316);
      complex3.add((-1560.2));
      complex1.sinh();
      Complex complex5 = complex1.acos();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.createComplex(1524.4, 3100.428);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex4.ONE.multiply(2689);
      complex6.INF.hashCode();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex5.reciprocal();
      complex7.acos();
      complex7.divide(complex8);
      complex4.isNaN();
      complex8.atan();
      complex3.readResolve();
      complex4.divide(1524.4);
      complex6.sqrt();
      complex0.readResolve();
      complex7.multiply(complex3);
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.nthRoot(681);
      Complex complex4 = complex3.ZERO.negate();
      complex1.subtract(complex0);
      Complex complex5 = complex1.asin();
      complex0.isInfinite();
      complex1.nthRoot(1);
      Complex complex6 = Complex.INF;
      complex6.toString();
      complex5.abs();
      Complex complex7 = complex4.add(complex6);
      complex6.asin();
      complex3.getArgument();
      complex1.hashCode();
      complex7.multiply(complex6);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2042.205973273245), (-2042.205973273245));
      Complex complex1 = Complex.valueOf(2.5066452026367188, (-2042.205973273245));
      Complex complex2 = complex0.ONE.createComplex((-2042.205973273245), (-1791.356));
      Complex complex3 = complex2.NaN.log();
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex4.exp();
      complex5.toString();
      Complex complex6 = complex0.acos();
      complex6.ONE.divide((-2042.205973273245));
      complex2.cosh();
      complex6.pow(complex5);
      Object object0 = new Object();
      Complex complex7 = Complex.NaN;
      Object object1 = complex7.readResolve();
      complex1.equals(object1);
      complex3.readResolve();
      Complex.valueOf(654.0017, (-1148.4969272));
      complex2.hashCode();
      complex2.cos();
      complex7.nthRoot(1233);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.cosh();
      complex0.toString();
      Complex complex2 = complex1.atan();
      complex2.ONE.sqrt1z();
      complex1.getField();
      complex1.I.createComplex(2653.4446948, 6.283185307179586);
      Complex complex3 = complex1.divide((-982.026));
      Complex complex4 = complex3.NaN.divide(complex1);
      complex4.INF.divide(complex3);
      Complex complex5 = complex1.pow((-982.026));
      complex5.INF.acos();
      complex5.multiply(3678.5125);
      complex2.multiply(0.0);
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.sqrt();
      complex3.ONE.nthRoot(681);
      complex3.ZERO.negate();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.tan();
      complex4.abs();
      complex0.add(complex6);
      complex6.asin();
      complex0.getArgument();
      complex1.hashCode();
      complex0.multiply(complex5);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.nthRoot(681);
      Complex complex4 = complex3.ZERO.negate();
      complex4.ONE.readResolve();
      complex1.subtract(complex0);
      Complex.valueOf((double) 681, 0.0);
      Complex complex5 = complex2.cos();
      complex5.tan();
      Complex complex6 = Complex.valueOf((double) 681, (-1.0));
      complex3.reciprocal();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.createComplex((-156.92743289), (-156.92743289));
      complex3.sinh();
      complex8.pow((double) 681);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(61.1112398, 61.1112398);
      ComplexField complexField0 = complex0.getField();
      Complex complex1 = complex0.createComplex(88.831, 1143.54921);
      complex1.equals(complexField0);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.valueOf((-2238.53891417517));
      complex4.nthRoot(7);
      Complex complex6 = complex3.subtract((-2238.53891417517));
      Complex complex7 = complex5.conjugate();
      complex1.hashCode();
      complex4.subtract((-20.0));
      complex5.toString();
      Complex complex8 = Complex.valueOf((double) 603);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex8.atan();
      complex6.sinh();
      complex4.isInfinite();
      Complex complex11 = complex5.log();
      Complex complex12 = complex5.multiply((double) 7);
      complex12.ZERO.subtract(complex10);
      complex9.getReal();
      complex11.cos();
      complex4.isInfinite();
      complex11.getImaginary();
      complex9.sin();
      complex5.tanh();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex2.conjugate();
      complex0.createComplex(3100.428, 61.1112398);
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex4.multiply(2689);
      complex3.hashCode();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.ZERO;
      complex8.acos();
      complex8.readResolve();
      complex8.ZERO.tan();
      complex7.createComplex(1007.4394722287, 20.0);
      Complex complex9 = complex8.reciprocal();
      complex9.getImaginary();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(979.3309517);
      complex0.ONE.hashCode();
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.createComplex((-20.0), (-20.0));
      Complex complex2 = complex0.ZERO.negate();
      complex1.NaN.exp();
      complex2.hashCode();
      Complex complex3 = complex1.add(1.1574222007764044E-7);
      complex1.multiply((-20.0));
      Complex complex4 = Complex.I;
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(61.1112398, 61.1112398);
      complex0.getField();
      complex0.createComplex(88.831, 1143.54921);
      complex0.equals((Object) null);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.nthRoot(681);
      complex3.ZERO.negate();
      complex1.subtract(complex0);
      Complex.valueOf((double) 681, 0.0);
      Complex complex4 = complex2.cos();
      complex4.tan();
      Complex complex5 = Complex.valueOf((double) 681, (-1.0));
      complex3.reciprocal();
      Complex complex6 = complex5.conjugate();
      complex6.I.divide(complex3);
      complex6.createComplex((-156.92743289), (-156.92743289));
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-81.05970639094));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf((-81.05970639094));
      complex4.INF.nthRoot(603);
      Complex complex5 = complex4.subtract((-81.05970639094));
      Complex.valueOf((-279.42483305));
      complex5.INF.divide((-1827.469004707437));
      complex3.multiply((-3219));
      complex3.hashCode();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex0.reciprocal();
      complex6.acos();
      complex7.readResolve();
      complex0.createComplex(1277.725, (-1419.720779182));
      complex0.reciprocal();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex0.createComplex(1524.4, 3100.428);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex0.conjugate();
      complex1.hashCode();
      complex0.subtract(1524.4);
      complex3.toString();
      Complex complex7 = Complex.valueOf(1524.4);
      complex5.sin();
      complex7.atan();
      complex5.sinh();
      complex7.isInfinite();
      Complex complex8 = complex6.log();
      Complex complex9 = complex3.multiply(3100.428);
      complex4.getReal();
      complex0.cos();
      complex8.isInfinite();
      complex8.getImaginary();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(979.3309517);
      complex0.ONE.hashCode();
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.createComplex((-20.0), (-20.0));
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.subtract(979.3309517);
      Complex complex4 = complex3.conjugate();
      complex3.ONE.subtract((-20.0));
      Complex complex5 = Complex.valueOf(0.0, 1008.4394722287);
      complex5.hashCode();
      complex3.subtract((-4450.014173865907));
      Complex complex6 = Complex.INF;
      complex6.toString();
      Complex complex7 = Complex.valueOf(4.543200798625335E11);
      complex7.sin();
      complex5.atan();
      Complex complex8 = complex4.sinh();
      Complex complex9 = new Complex(1008.4394722287, (-20.0));
      complex9.isInfinite();
      complex0.log();
      complex9.multiply(4643.5);
      complex2.getReal();
      Complex complex10 = Complex.ONE;
      complex10.cos();
      complex8.isInfinite();
      complex6.getImaginary();
      complex10.sin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex2.divide(0.6823468208312988);
      Complex complex4 = complex2.pow(complex3);
      complex2.abs();
      Complex complex5 = complex3.reciprocal();
      complex2.multiply(complex0);
      Complex complex6 = complex3.pow(complex2);
      Complex complex7 = Complex.I;
      complex7.divide(complex3);
      complex6.tanh();
      complex1.multiply((-1));
      Complex complex8 = Complex.valueOf(6.283185307179586);
      Complex complex9 = complex8.add(complex4);
      complex1.toString();
      complex9.createComplex((-5.004237248003625E181), (-5.004237248003625E181));
      complex5.abs();
      complex6.divide(2.0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2840.168122473, 2840.168122473);
      complex0.exp();
      complex0.pow(2840.168122473);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.getField();
      complex0.toString();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.ZERO.pow(complex0);
      Complex complex4 = complex3.ZERO.add(2.0);
      Complex complex5 = complex2.INF.sqrt();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.NaN.tan();
      complex4.I.divide((double) 1);
      complex0.NaN.sin();
      complex0.multiply(1);
      Complex complex7 = Complex.valueOf((double) 1);
      complex1.sqrt();
      complex5.toString();
      complex3.ONE.reciprocal();
      Complex complex8 = complex7.asin();
      complex8.I.subtract((-2073.5747327));
      complex4.multiply(2.0);
      complex0.asin();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.cos();
      complex1.I.getArgument();
      Complex complex2 = complex0.atan();
      complex2.ONE.getField();
      Complex complex3 = Complex.valueOf(1.5707963267948966);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex4.ONE.tan();
      complex6.ONE.exp();
      complex0.getImaginary();
      Complex complex7 = complex1.add(complex2);
      Complex complex8 = complex7.asin();
      complex8.ZERO.multiply(Double.POSITIVE_INFINITY);
      complex1.createComplex(1.5707963267948966, (-704.3300272779));
      complex1.isNaN();
      Complex complex9 = complex8.sqrt1z();
      complex9.hashCode();
      complex5.createComplex((-704.3300272779), 1778.45115258383);
      complex3.sqrt();
      complex9.atan();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2042.205973273245), (-2042.205973273245));
      Complex.valueOf(2.5066452026367188, (-2042.205973273245));
      Complex complex1 = complex0.ONE.createComplex((-2042.205973273245), (-1791.356));
      Complex complex2 = complex1.NaN.log();
      complex2.I.sin();
      Complex complex3 = complex1.ONE.exp();
      complex3.toString();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex3.cos();
      complex5.ZERO.toString();
      Complex complex6 = complex4.ZERO.multiply(4794);
      complex4.ZERO.multiply((-638.6928979));
      Complex complex7 = complex6.NaN.conjugate();
      Complex complex8 = complex7.I.createComplex((-1791.356), (-1791.356));
      complex4.isNaN();
      complex7.nthRoot(4794);
      complex1.add((-1791.356));
      complex8.isNaN();
      complex3.multiply((-2645.02758509));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.multiply(521.23775);
      double double0 = (-1638.610271697);
      Complex complex2 = complex0.add((-1638.610271697));
      Complex complex3 = complex2.INF.subtract(complex1);
      Complex complex4 = complex3.ZERO.exp();
      complex4.ZERO.conjugate();
      Complex.valueOf((-1638.610271697), 2.0);
      complex3.sqrt1z();
      complex3.isNaN();
      Complex complex5 = Complex.valueOf(521.23775, (-20.0));
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1895.2388990860513);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.subtract(1895.2388990860513);
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex3.INF.cos();
      complex5.tan();
      complex4.ZERO.toString();
      Complex complex6 = complex1.I.multiply(3571);
      Complex complex7 = complex1.atan();
      complex7.reciprocal();
      Complex complex8 = complex6.NaN.pow((-3762.947786));
      Complex complex9 = complex8.NaN.cosh();
      complex9.I.multiply(414.0);
      Complex complex10 = complex0.tanh();
      complex6.ZERO.reciprocal();
      Complex complex11 = complex3.cosh();
      complex6.NaN.exp();
      complex11.I.divide(complex3);
      complex0.isNaN();
      Complex complex12 = complex6.atan();
      complex2.readResolve();
      complex6.divide((-111.25178011846906));
      complex12.sqrt();
      complex10.readResolve();
      complex10.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.log();
      complex0.hashCode();
      complex0.hashCode();
      complex1.abs();
      complex1.getField();
      Complex complex2 = complex1.sqrt();
      complex2.ONE.pow(1.0);
      complex0.sinh();
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.getArgument();
      complex0.toString();
      complex0.INF.abs();
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex0.log();
      Complex complex3 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex1.ZERO.negate();
      complex0.atan();
      Complex complex6 = Complex.valueOf((-4620.821468), Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.tanh();
      complex7.NaN.cosh();
      complex6.INF.add(complex2);
      Complex complex8 = complex2.cos();
      complex8.NaN.getField();
      complex4.exp();
      complex6.multiply(0.0);
      complex3.sin();
      complex5.subtract(2527.0544440119);
      Complex complex9 = complex7.multiply(37);
      complex9.add(complex7);
      complex2.getImaginary();
      Complex complex10 = Complex.ONE;
      complex5.add(complex10);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex0.add(complex1);
      complex3.readResolve();
      complex0.I.sqrt1z();
      complex3.INF.atan();
      complex1.isInfinite();
      complex3.subtract(complex0);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      double double1 = 1.901376485824585;
      Complex complex1 = new Complex(1.901376485824585, 0.0);
      complex1.ONE.pow(complex0);
      complex0.NaN.subtract(complex1);
      complex0.ZERO.exp();
      complex1.I.toString();
      Complex.valueOf(0.0);
      try { 
        complex0.ZERO.nthRoot((-1920));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,920
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.add(complex0);
      Complex complex3 = complex2.I.divide(947.0667264260434);
      complex3.ONE.add(complex0);
      Complex complex4 = complex1.INF.pow(1275.99616522);
      complex4.negate();
      complex4.ONE.add(complex0);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      complex0.isInfinite();
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex2.multiply(821);
      complex4.sqrt1z();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex0.toString();
      complex0.I.sinh();
      complex0.readResolve();
      complex0.subtract((-2882.0738087058126));
      Complex complex1 = complex0.sqrt();
      complex1.NaN.reciprocal();
      int int0 = (-1097);
      try { 
        complex1.I.nthRoot((-1097));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,097
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1981.207410434), (-5682.5802003));
      Complex complex1 = complex0.I.add((-5682.5802003));
      complex0.hashCode();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.add(6.283185307179586);
      complex1.ONE.cosh();
      Complex complex4 = complex0.NaN.pow(complex2);
      Object object0 = new Object();
      complex1.equals(object0);
      complex2.readResolve();
      Complex.valueOf(3726.695949667, 3726.695949667);
      complex3.hashCode();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      complex0.hashCode();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex2.conjugate();
      Complex complex3 = complex0.createComplex(1524.4, 3100.428);
      Complex complex4 = complex3.I.tanh();
      Complex complex5 = complex3.ONE.multiply(2689);
      complex5.INF.hashCode();
      Complex complex6 = complex0.acos();
      complex4.reciprocal();
      Complex complex7 = complex6.acos();
      complex7.I.readResolve();
      Complex complex8 = complex6.createComplex(1277.725, (-1419.720779182));
      complex6.reciprocal();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.conjugate();
      complex0.I.getArgument();
      Complex complex2 = complex0.divide(1063.0);
      Complex complex3 = complex2.ZERO.pow(complex0);
      complex3.INF.abs();
      Complex complex4 = complex2.reciprocal();
      complex4.I.multiply(complex2);
      Complex complex5 = complex0.pow(complex1);
      complex5.divide(complex0);
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.INF.multiply(17);
      complex0.add(complex6);
      complex0.toString();
      complex6.createComplex(749.12, 1.5707963267948966);
      complex7.abs();
      complex3.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = Complex.valueOf((-4133.10786933), (-4133.10786933));
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex4.tan();
      Complex complex6 = complex3.add(1.0);
      Complex complex7 = complex6.acos();
      complex7.I.add(complex5);
      complex7.pow(0.0);
      complex0.atan();
      Complex complex8 = complex3.tan();
      complex8.ZERO.divide(complex2);
      complex7.nthRoot(1);
      complex1.multiply(0);
      Complex.valueOf((-4133.10786933));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex1.ONE.cosh();
      Complex complex2 = complex0.I.sin();
      complex2.INF.sqrt1z();
      Complex complex3 = complex1.INF.add(1.0);
      Complex complex4 = Complex.valueOf(1845.631553142606, 2489.757);
      Complex complex5 = complex4.NaN.pow(1.0);
      complex5.NaN.abs();
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = complex6.I.multiply(1.0);
      complex7.I.getArgument();
      Complex complex8 = complex4.I.subtract(complex0);
      complex3.I.conjugate();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex0.add(complex1);
      complex10.toString();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex1.subtract(1.0);
      Complex complex13 = complex11.I.acos();
      complex13.ONE.abs();
      complex12.NaN.multiply(1845.631553142606);
      Complex complex14 = complex9.reciprocal();
      complex14.ZERO.multiply(complex2);
      complex11.multiply(0.0);
      complex8.negate();
      complex11.isNaN();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(61.1112398, 61.1112398);
      complex0.getField();
      complex0.createComplex(88.831, 1143.54921);
      complex0.equals((Object) null);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(718.885071804, 718.885071804);
      complex0.I.getField();
      Complex.valueOf(718.885071804, (-1053.5602843224258));
      Complex complex1 = complex0.ZERO.subtract((-1280.117518112262));
      Complex complex2 = complex0.ZERO.acos();
      complex1.I.multiply(complex2);
      Complex complex3 = complex2.I.add(1.0);
      Complex complex4 = complex1.I.add(complex3);
      complex0.I.atan();
      complex0.isInfinite();
      Complex complex5 = complex3.atan();
      complex5.ZERO.divide(complex3);
      Complex complex6 = complex5.I.acos();
      complex6.NaN.add((-1053.5602843224258));
      Complex complex7 = complex1.sqrt();
      Complex complex8 = complex1.I.reciprocal();
      complex8.I.toString();
      Complex complex9 = complex0.ZERO.multiply(1222);
      complex0.divide(complex3);
      complex7.sqrt();
      Complex complex10 = complex1.atan();
      complex10.NaN.multiply(complex2);
      complex7.readResolve();
      complex9.ZERO.divide(1.0);
      complex1.exp();
      complex9.getField();
      complex4.readResolve();
      Complex complex11 = complex9.cos();
      complex11.ZERO.createComplex(9.495158151301779E-10, 0.0);
      complex0.subtract(718.885071804);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex0.sqrt();
      complex3.ONE.nthRoot(681);
      complex3.ZERO.negate();
      complex1.subtract(complex0);
      Complex.valueOf((double) 681, 0.0);
      Complex complex4 = complex2.cos();
      complex4.tan();
      Complex complex5 = Complex.valueOf((double) 681, (-1.0));
      complex3.reciprocal();
      Complex complex6 = complex5.conjugate();
      complex6.createComplex((-156.92743289), (-156.92743289));
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(2599.80552, 1916.254);
      complex0.NaN.divide((-2777.6));
      Complex complex1 = complex0.INF.add(0.0);
      complex1.I.getArgument();
      Complex complex2 = complex0.ONE.sqrt();
      complex2.add((-226.2655279));
      complex0.hashCode();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(1176.81151591323);
      Complex complex1 = complex0.ZERO.tanh();
      complex1.multiply(complex0);
      complex0.INF.getArgument();
      complex1.ZERO.tanh();
      complex0.getArgument();
      complex0.abs();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.exp();
      Complex complex2 = complex1.ONE.tanh();
      Complex complex3 = complex2.INF.asin();
      Complex complex4 = complex0.INF.reciprocal();
      Complex complex5 = Complex.valueOf(3814.421203321518);
      complex4.NaN.getArgument();
      complex0.exp();
      complex4.INF.readResolve();
      complex2.I.sinh();
      Complex complex6 = complex0.multiply(0);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex2.ONE.sqrt();
      Complex complex9 = complex7.ZERO.tanh();
      Complex complex10 = complex0.divide(complex3);
      complex10.NaN.asin();
      complex4.divide(complex9);
      complex4.log();
      complex4.reciprocal();
      complex8.sin();
      Complex complex11 = complex5.subtract(0.0);
      complex11.INF.add((-2090.3627));
      complex9.subtract((-20.0));
      complex3.createComplex(3814.421203321518, 0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(979.3309517);
      complex0.ONE.hashCode();
      complex0.ZERO.abs();
      Complex complex1 = complex0.I.createComplex((-20.0), (-20.0));
      Complex complex2 = complex0.ZERO.negate();
      Complex complex3 = complex1.NaN.exp();
      Complex complex4 = complex3.INF.exp();
      complex4.INF.asin();
      complex0.isInfinite();
      complex1.nthRoot(1);
      complex0.I.toString();
      complex1.abs();
      Complex complex5 = complex2.add(complex1);
      complex5.INF.asin();
      complex0.getArgument();
      complex1.hashCode();
      complex0.multiply(complex3);
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-2826.781));
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.NaN.add(complex1);
      Complex complex4 = complex3.I.pow(complex1);
      complex4.atan();
      complex0.toString();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex2.I.multiply((-4381.9844202));
      complex6.NaN.sqrt1z();
      complex5.createComplex(1.1279135096919439E268, 2353.5669943614);
      Complex complex7 = complex2.divide(2353.5669943614);
      Complex complex8 = complex7.INF.asin();
      complex8.add((-4381.9844202));
      complex2.toString();
      complex7.tan();
      Complex complex9 = complex5.divide(0.0);
      Complex complex10 = complex9.NaN.exp();
      complex10.INF.multiply(complex0);
      complex5.sinh();
      Complex complex11 = Complex.valueOf((-2826.781), (-129.325));
      complex11.exp();
      complex1.add(complex7);
      complex2.readResolve();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.INF.log();
      Complex.valueOf(323.5031, 323.5031);
      Complex complex5 = complex1.ONE.subtract(complex2);
      complex0.getImaginary();
      Complex complex6 = complex1.subtract(complex0);
      Complex complex7 = complex6.multiply((-3783));
      complex7.negate();
      complex1.I.tanh();
      complex3.INF.cosh();
      Complex complex8 = complex5.subtract((double) (-3783));
      complex6.pow(0.0);
      complex1.getImaginary();
      complex4.pow(complex8);
      try { 
        complex3.nthRoot((-3783));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,783
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf(291.0, 0.0);
      complex0.toString();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.pow(complex0);
      Complex complex3 = complex2.I.add(complex0);
      Complex complex4 = complex0.pow(1299.925);
      complex4.ONE.sin();
      complex4.NaN.subtract(complex1);
      complex0.INF.tanh();
      complex0.readResolve();
      Complex complex5 = complex0.createComplex(0.0, 0.0);
      complex5.getImaginary();
      complex1.abs();
      complex1.negate();
      complex3.hashCode();
      complex1.multiply(1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex0.ONE.tanh();
      try { 
        complex1.ONE.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(2.5988736152648926, 2.5988736152648926);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex0.ZERO.cos();
      Complex complex4 = complex3.NaN.sinh();
      complex4.readResolve();
      complex4.multiply(0);
      Complex complex5 = complex0.atan();
      complex0.isInfinite();
      Complex complex6 = complex5.atan();
      complex2.getReal();
      complex6.I.tan();
      complex0.sqrt();
      complex5.tan();
      complex1.multiply(0);
      complex6.add(complex2);
      complex3.multiply(2.5988736152648926);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex((-1081.966));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.NaN.subtract(20.0);
      complex2.INF.createComplex((-387.0699605706), (-1081.966));
      Complex complex3 = complex2.conjugate();
      complex3.NaN.getArgument();
      complex3.I.nthRoot(2058);
      complex0.I.readResolve();
      Complex complex4 = complex0.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.INF.createComplex(0.0, 20.0);
      complex1.subtract((double) 2058);
      Complex complex7 = Complex.valueOf(20.0, (double) 2058);
      Complex complex8 = complex7.multiply(2058);
      complex8.I.multiply(complex0);
      complex6.tan();
      complex4.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.cosh();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.ONE.sinh();
      complex3.readResolve();
      complex0.NaN.nthRoot(947);
      complex0.I.toString();
      Complex complex5 = complex0.NaN.negate();
      Complex complex6 = complex5.I.sin();
      complex6.NaN.atan();
      Complex complex7 = complex5.NaN.add(complex0);
      complex0.atan();
      complex0.getImaginary();
      Complex complex8 = complex0.asin();
      Complex complex9 = complex8.multiply(369);
      complex9.ONE.pow(complex4);
      complex9.ONE.sqrt();
      complex2.sqrt();
      complex1.toString();
      complex7.INF.hashCode();
      complex7.getField();
      Complex complex10 = complex7.multiply((-4509));
      try { 
        complex10.ONE.nthRoot((-4509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,509
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.toString();
      complex0.I.nthRoot(964);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.NaN.log();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex1.ZERO.add((-4206.94103391553));
      complex1.ONE.tanh();
      Complex complex5 = complex4.NaN.asin();
      complex0.isInfinite();
      Complex complex6 = complex0.atan();
      Complex complex7 = Complex.valueOf(2779.567370331245);
      Complex complex8 = complex4.add(0.0);
      complex8.ONE.add(complex6);
      complex5.getReal();
      complex3.cosh();
      complex0.pow(0.0);
      complex6.multiply(complex5);
      complex5.multiply(510);
      complex7.createComplex(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2527.41125128931, 20.0);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
      Complex complex1 = complex0.pow(0.0);
      complex1.ZERO.createComplex(2.0, 119.949);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.pow((-20.0));
      complex3.nthRoot(1415);
      Complex complex4 = complex2.INF.multiply((double) 1415);
      complex0.isNaN();
      complex2.divide(complex3);
      complex0.toString();
      complex3.toString();
      complex0.atan();
      complex4.conjugate();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-81.05970639094));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf((-81.05970639094));
      complex4.INF.nthRoot(603);
      Complex complex5 = complex4.subtract((-81.05970639094));
      Complex complex6 = complex3.NaN.conjugate();
      complex6.ZERO.hashCode();
      Complex complex7 = complex1.subtract((-1.0));
      complex2.toString();
      Complex complex8 = Complex.valueOf((-81.05970639094));
      complex8.ZERO.sin();
      Complex complex9 = complex0.INF.atan();
      complex9.INF.sinh();
      complex0.isInfinite();
      complex7.log();
      Complex complex10 = complex3.multiply((-1.0));
      complex0.getReal();
      Complex complex11 = complex0.cos();
      complex11.isInfinite();
      complex10.getImaginary();
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex1.ONE.readResolve();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex2.multiply(0.0);
      complex3.ZERO.sinh();
      Complex complex4 = Complex.valueOf(1396.949585, (-698.730706299));
      Complex complex5 = complex0.ZERO.divide(complex4);
      Complex complex6 = complex0.cosh();
      complex5.NaN.getArgument();
      Complex complex7 = complex0.multiply(5427);
      complex7.INF.conjugate();
      complex6.INF.divide((-1358.7134));
      Complex complex8 = complex6.divide(complex5);
      Complex complex9 = complex4.I.multiply((-698.730706299));
      complex9.pow((-1358.7134));
      complex7.ONE.multiply(0);
      complex8.reciprocal();
      complex7.nthRoot(5427);
      complex8.add(Double.NaN);
      Complex complex10 = complex8.acos();
      complex5.hashCode();
      complex2.createComplex(0.0, 0.0);
      Complex.valueOf(0.0);
      complex1.tan();
      complex10.conjugate();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.reciprocal();
      complex0.getArgument();
      complex0.getReal();
      Complex complex2 = complex1.sin();
      complex2.abs();
      Complex complex3 = Complex.valueOf((-1.0), (-2363.06));
      complex0.getArgument();
      complex3.I.pow(complex2);
      complex0.getImaginary();
      complex3.multiply(0.0);
      complex2.isInfinite();
      complex3.ONE.conjugate();
      Complex complex4 = complex3.multiply(0);
      Complex complex5 = complex0.multiply(complex2);
      complex5.INF.readResolve();
      complex4.ONE.asin();
      complex1.pow(3173.0741);
      complex4.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex((-1544.4571974701803));
      Complex complex1 = complex0.pow((-1544.4571974701803));
      Complex complex2 = complex1.createComplex((-1544.4571974701803), 0.0);
      Complex complex3 = complex2.NaN.multiply(369);
      Complex complex4 = complex3.I.subtract((-1544.4571974701803));
      assertEquals(1544.4571974701803, complex4.getReal(), 0.01);
      
      complex1.sqrt();
      Complex complex5 = complex0.multiply(0.0);
      Complex complex6 = complex1.subtract(0.0);
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex5.multiply(complex1);
      Complex complex9 = complex8.I.tanh();
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(1.557407724654902, complex9.getImaginary(), 0.01);
      
      complex5.multiply(0.0);
      Complex complex10 = complex0.multiply(4341.1159883214195);
      Complex complex11 = complex10.ZERO.exp();
      Complex complex12 = complex7.subtract(0.0);
      Complex complex13 = complex6.negate();
      Complex complex14 = complex13.NaN.acos();
      Complex complex15 = complex14.ONE.divide((-1132.08243461281));
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      assertTrue(complex14.isNaN());
      assertEquals((-8.833279003591429E-4), complex15.getReal(), 0.01);
      
      complex1.sqrt();
      complex11.hashCode();
      Complex complex16 = complex10.atan();
      assertEquals((-1.5707961776450767), complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex5.sin();
      assertTrue(complex17.equals((Object)complex12));
      
      complex10.negate();
      boolean boolean0 = complex13.isNaN();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(boolean0);
  }
}
