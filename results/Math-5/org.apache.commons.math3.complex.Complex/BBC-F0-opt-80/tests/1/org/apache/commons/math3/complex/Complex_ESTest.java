/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:53:58 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      complex1.ZERO.add(1.881373587019543);
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2014.4602), 20.0);
      complex0.toString();
      Complex complex1 = complex0.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(2709.5, (-2992.02));
      Complex complex2 = complex0.divide(complex1);
      complex2.subtract(2709.5);
      complex2.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = new Complex(1.5392257142577226E220, (-20.0));
      complex0.divide(complex1);
      complex1.subtract(1.5392257142577226E220);
      Complex complex2 = Complex.valueOf(3.537475449241181E-268, (-2120.863023919008));
      complex2.sqrt();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.negate();
      complex2.ZERO.toString();
      complex2.ZERO.sqrt1z();
      complex2.ZERO.hashCode();
      complex1.cosh();
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ZERO;
      complex1.toString();
      complex1.multiply(complex0);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      complex0.toString();
      Complex complex1 = Complex.valueOf((-4213.587532234546), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, (-20.0));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.divide(complex0);
      complex4.ZERO.hashCode();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = Complex.valueOf((-875.63648990873), Double.NaN);
      Complex complex7 = complex6.NaN.atan();
      Complex complex8 = complex1.sqrt();
      complex8.ZERO.getArgument();
      Complex complex9 = complex8.I.tan();
      complex9.sqrt();
      Complex complex10 = complex8.sinh();
      Complex complex11 = complex10.ONE.sinh();
      complex11.NaN.multiply(0.0);
      Complex complex12 = complex10.I.cosh();
      complex8.multiply(complex1);
      Complex complex13 = complex7.pow(complex6);
      Complex complex14 = new Complex((-7.919617109348822E-8));
      complex13.add(complex14);
      complex13.ZERO.multiply(Double.NaN);
      complex5.nthRoot(1023);
      Complex.valueOf((-875.63648990873));
      complex5.divide((-875.63648990873));
      complex12.nthRoot(1023);
      complex7.add(4.135457669031131E282);
      Complex complex15 = complex8.sinh();
      complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.toString();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex2.asin();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex3.multiply(2624.795326);
      Complex complex7 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex4.acos();
      complex6.tanh();
      Complex.valueOf(1.5392257142577226E220);
      ComplexField complexField0 = complex0.getField();
      complex7.equals(complexField0);
      complex7.reciprocal();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.toString();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.acos();
      complex4.multiply((-2.8355584348209133));
      Complex complex6 = complex1.multiply(1.5392257142577226E220);
      complex4.acos();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.tanh();
      complex6.tan();
      complex3.getField();
      Object object0 = new Object();
      complex7.equals(object0);
      complex0.reciprocal();
      complex5.tan();
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex1.getField();
      Complex complex3 = complex2.sinh();
      complex0.pow(complex3);
      complex3.subtract((-0.8813735870195429));
      Complex complex4 = complex1.add(complex0);
      Complex complex5 = Complex.I;
      complex2.tan();
      complex5.cosh();
      Complex complex6 = Complex.ONE;
      complex6.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.329342805230603E-8));
      Complex complex1 = complex0.INF.tan();
      complex0.ONE.getField();
      Complex complex2 = complex0.divide((-6.329342805230603E-8));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.multiply(complex0);
      Complex complex5 = complex0.multiply(complex2);
      Complex complex6 = Complex.valueOf((-6.329342805230603E-8));
      complex5.I.hashCode();
      Complex complex7 = complex5.pow((-6.329342805230603E-8));
      complex7.conjugate();
      complex2.exp();
      complex0.tan();
      complex2.ONE.hashCode();
      Complex complex8 = complex6.sin();
      complex1.sin();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex4.divide(complex6);
      complex10.INF.subtract(0.0);
      Complex complex11 = complex10.ZERO.exp();
      complex10.ONE.sin();
      Complex complex12 = complex3.subtract((-6.329342805230603E-8));
      complex11.pow(complex9);
      Complex.valueOf((-6.329342805230603E-8), 0.0);
      complex7.exp();
      complex1.toString();
      complex10.tanh();
      Complex complex13 = complex12.pow((-2.0));
      complex13.I.add(0.0);
      Complex complex14 = Complex.valueOf(2216.35113145);
      complex14.INF.asin();
      complex14.INF.sinh();
      complex9.divide((-6.329342805230603E-8));
      complex8.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5392257142577226E220, 1.5392257142577226E220);
      Complex complex1 = new Complex(1.5392257142577226E220);
      Complex complex2 = Complex.NaN;
      complex2.toString();
      complex0.divide(complex1);
      Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(1904);
      complex4.sqrt();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex2.tanh();
      complex4.divide(2144.0184819553);
      complex1.conjugate();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.ONE;
      complex1.tanh();
      complex0.pow(complex1);
      Complex complex2 = new Complex((-2106.793884781));
      complex2.nthRoot(1038);
      Complex complex3 = complex2.asin();
      complex2.acos();
      complex0.multiply(1.0);
      Complex complex4 = complex3.multiply((-2106.793884781));
      complex3.acos();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-6.259620482221904E-8);
      Complex complex0 = new Complex((-6.259620482221904E-8));
      // Undeclared exception!
      complex0.nthRoot(2146901358);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.INF;
      complex0.I.divide(complex1);
      Complex complex2 = complex1.multiply(1034);
      complex2.abs();
      Complex complex3 = complex2.sqrt1z();
      complex0.hashCode();
      Complex.valueOf((double) 1034);
      complex1.sqrt1z();
      complex2.cos();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      Complex complex4 = Complex.INF;
      complex4.equals(complex3);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-5145.8236);
      Complex complex0 = new Complex((-5145.8236), (-5145.8236));
      Complex complex1 = complex0.NaN.tan();
      complex1.INF.add(complex0);
      complex1.NaN.getArgument();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.add(Double.NaN);
      complex3.INF.tan();
      complex0.cos();
      try { 
        complex2.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5392257142577226E220, 1.5392257142577226E220);
      Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.add((-4138.0));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.multiply(7);
      Complex complex6 = complex4.reciprocal();
      Complex complex7 = complex3.reciprocal();
      complex4.toString();
      Complex.valueOf((-1977.422990915));
      Complex complex8 = Complex.NaN;
      complex8.divide((-5765.65261777));
      complex6.exp();
      complex7.ONE.exp();
      complex2.tanh();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.INF;
      Complex complex12 = complex10.divide(3249.6954432888);
      complex7.cos();
      Complex complex13 = new Complex(7);
      complex5.divide(complex13);
      complex12.add(3249.6954432888);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.ONE;
      complex1.tanh();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = new Complex((-2106.793884781));
      complex3.nthRoot(1038);
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.acos();
      complex0.multiply(1.0);
      Complex complex6 = complex4.multiply((-2106.793884781));
      complex6.divide((double) 1038);
      complex3.exp();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.INF;
      complex2.divide((-2106.793884781));
      Complex complex10 = complex5.cos();
      complex10.divide(complex9);
      complex0.add(1.3829498291015625);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.subtract(complex0);
      complex0.tan();
      Complex complex4 = new Complex((-893.77442018499), 759.73798);
      Complex complex5 = complex4.multiply(complex3);
      complex0.asin();
      Complex complex6 = complex4.add(759.73798);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex5.multiply(7);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.reciprocal();
      Complex complex11 = Complex.valueOf((-2.8355584348209133));
      Complex complex12 = complex11.reciprocal();
      complex2.toString();
      Complex.valueOf((-893.77442018499));
      complex3.divide((-1698.9493734424));
      Complex complex13 = complex12.exp();
      Complex complex14 = complex6.tanh();
      Complex complex15 = Complex.ONE;
      Complex complex16 = complex15.pow((-893.77442018499));
      complex13.multiply(complex4);
      complex8.multiply((-892.4697886479734));
      complex7.divide((-2.8355584348209133));
      complex8.log();
      complex14.atan();
      complex10.sin();
      complex16.toString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.acos();
      complex4.abs();
      Complex complex5 = complex3.sqrt1z();
      complex5.hashCode();
      Complex complex6 = new Complex((-1.0), Double.NaN);
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.ONE;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex1.ZERO.pow(complex0);
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex5.tan();
      Complex complex8 = complex5.NaN.multiply(complex0);
      complex8.asin();
      complex6.ZERO.add(2.0089026801414973E-37);
      complex7.NaN.exp();
      Complex complex9 = complex1.multiply(7);
      complex6.reciprocal();
      Complex complex10 = complex5.reciprocal();
      complex8.ZERO.toString();
      Complex.valueOf((-1698.9493734424));
      Complex complex11 = complex3.divide((double) 7);
      complex9.exp();
      complex8.tanh();
      Complex complex12 = complex6.pow(738.812);
      complex10.multiply(complex3);
      complex11.multiply((-1096.1375801114));
      complex12.divide(923.4903153070723);
      Complex complex13 = Complex.NaN;
      complex13.log();
      complex2.atan();
      complex2.sin();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.toString();
      complex2.INF.divide(complex1);
      Complex complex3 = Complex.valueOf(0.0, 1.5392257142577226E220);
      complex1.multiply(1904);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = Complex.valueOf((-1.5707963267948966));
      Complex complex6 = Complex.valueOf(1.5392257142577226E220, (-134.09591769649265));
      Complex complex7 = complex6.pow(1.5392257142577226E220);
      complex6.tanh();
      complex5.divide(1.5392257142577226E220);
      complex3.conjugate();
      Complex complex8 = Complex.valueOf((-593.4), (-1375.2830493));
      complex8.tan();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex0.acos();
      complex4.abs();
      Complex complex5 = complex3.sqrt1z();
      complex5.hashCode();
      Complex.valueOf(Double.NaN);
      Complex.valueOf(Double.NaN, Double.NaN);
      Complex.valueOf((-892.4697886479734));
      Complex complex6 = complex4.tanh();
      complex6.divide((-134.09591769649265));
      complex4.conjugate();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      complex3.toString();
      complex3.INF.divide(complex1);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-134.09591769649265));
      Complex complex5 = complex4.multiply((-3865));
      complex4.sqrt();
      Complex complex6 = Complex.NaN;
      complex6.divide((double) (-3865));
      Complex complex7 = new Complex((-2427.7), Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.tanh();
      complex8.ONE.multiply(37);
      Complex complex9 = complex6.divide((-2427.7));
      complex5.conjugate();
      complex9.cosh();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(2958.779067272, 772.94951);
      Complex complex2 = Complex.NaN;
      complex1.getField();
      complex0.getField();
      complex2.add(complex1);
      complex1.tan();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex1.I.conjugate();
      Complex complex2 = complex1.I.sinh();
      complex1.ZERO.pow(complex0);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex3.NaN.multiply(complex0);
      complex6.asin();
      complex4.ZERO.add(2.0089026801414973E-37);
      Complex complex7 = complex5.NaN.exp();
      Complex complex8 = complex1.multiply(7);
      complex4.reciprocal();
      complex3.reciprocal();
      complex6.ZERO.toString();
      Complex.valueOf((-1698.9493734424));
      Complex complex9 = complex2.divide((double) 7);
      complex9.exp();
      Complex complex10 = complex7.tanh();
      complex2.pow(8.4014514360894874E17);
      Complex complex11 = complex6.multiply(complex5);
      complex10.multiply((-1698.9493734424));
      complex8.divide(862.67406);
      Complex complex12 = complex6.log();
      complex12.atan();
      complex5.sin();
      complex11.toString();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = Complex.valueOf((-2200.8747542), (-20.0));
      Complex complex2 = complex1.multiply((-758));
      Complex complex3 = complex1.sqrt();
      complex3.divide((-2200.8747542));
      Complex complex4 = complex0.tanh();
      complex2.divide((-2200.8747542));
      complex0.conjugate();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex1.ONE.sinh();
      complex1.ONE.exp();
      Complex complex2 = complex0.ZERO.createComplex(1.0, 1.0);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.multiply(6.283185307);
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.multiply(6.283185307);
      Complex complex7 = Complex.NaN;
      complex7.acos();
      Complex complex8 = complex7.multiply(2293.0);
      Complex complex9 = Complex.INF;
      complex5.subtract(1652.0);
      complex8.add(complex7);
      Complex complex10 = complex6.divide(complex2);
      Complex complex11 = Complex.INF;
      complex4.getField();
      Complex complex12 = complex10.divide((-7.947087669425045E-8));
      Complex.valueOf((-208.4));
      complex4.toString();
      complex8.getReal();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.divide((-202.9039418122511));
      complex0.getField();
      complex1.ZERO.getArgument();
      complex1.NaN.acos();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.pow((-202.9039418122511));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, 20.0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = new Complex((-1.6802196396307013E-7));
      complex2.nthRoot(1038);
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex6.acos();
      Complex complex9 = complex6.multiply((-2106.793884781));
      complex4.acos();
      complex0.multiply(20.0);
      Complex complex10 = complex3.subtract(798.0);
      complex10.add((-2106.793884781));
      complex10.add(complex4);
      complex7.divide(complex10);
      complex4.log();
      complex9.getField();
      complex9.divide(0.0);
      Complex.valueOf(798.0);
      complex6.toString();
      complex0.sinh();
      complex8.atan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.I.add(complex1);
      complex0.negate();
      Complex complex3 = Complex.valueOf((-20.0), 2.2056355476379395);
      Complex complex4 = complex3.divide(761.0);
      Complex complex5 = complex4.conjugate();
      complex2.negate();
      complex4.cos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(128, 0.013822858974867519);
      Complex.valueOf(897.6, 1048.9491646929262);
      complex4.equals(complex5);
      complex5.sqrt();
      Complex complex8 = Complex.ZERO;
      complex8.divide((-1259.30483));
      complex8.conjugate();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = Complex.ONE;
      complex1.tanh();
      complex0.pow(complex1);
      Complex complex2 = new Complex((-2106.793884781));
      complex2.nthRoot(1038);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.asin();
      complex2.acos();
      complex0.multiply(1.0);
      complex4.multiply((-2106.793884781));
      Complex complex5 = complex4.acos();
      complex4.tanh();
      Complex complex6 = complex5.tan();
      complex6.getField();
      Complex complex7 = Complex.ZERO;
      complex7.divide((-2106.793884781));
      complex4.cos();
      complex6.divide(complex3);
      complex3.add(2.7343781022726352);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.sqrt1z();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = complex1.ZERO.cosh();
      complex0.ZERO.tan();
      Complex complex3 = complex1.ONE.cosh();
      complex3.INF.getField();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.ONE.divide(0.0);
      complex5.ONE.add(1443.33353376868);
      Complex complex6 = Complex.I;
      complex2.readResolve();
      complex0.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.divide((-202.9039418122511));
      complex0.getField();
      complex1.ZERO.getArgument();
      Complex complex3 = complex1.NaN.acos();
      complex3.ZERO.multiply((-978.99079222321));
      complex1.nthRoot(988);
      complex3.getReal();
      Complex complex4 = complex2.pow(0.0);
      Complex complex5 = complex4.add(complex0);
      complex2.tan();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex1.tan();
      complex7.INF.sqrt1z();
      Complex.valueOf((-202.9039418122511));
      Complex complex8 = complex6.add((-202.9039418122511));
      complex8.NaN.atan();
      complex7.INF.add(complex5);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = complex0.INF.conjugate();
      complex0.negate();
      Complex complex2 = Complex.ZERO;
      complex2.INF.nthRoot(296);
      complex0.equals(complex2);
      complex1.sqrt();
      Complex complex3 = new Complex((-408.0), 6.113879253864931E-8);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex1.negate();
      complex0.ONE.divide((-20.0));
      complex2.I.conjugate();
      Complex complex3 = complex1.negate();
      complex3.I.cos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex((-20.0), (-20.0));
      Complex complex6 = Complex.valueOf((-20.0), (-20.0));
      complex5.equals(complex6);
      Complex complex7 = complex6.sqrt();
      complex6.divide((double) 128);
      complex7.conjugate();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      complex2.toString();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, (-134.09591769649265));
      complex0.multiply(1904);
      complex0.sqrt();
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.tanh();
      complex0.divide((-892.4697886479734));
      complex3.conjugate();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5392257142577226E220);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.acos();
      Complex complex6 = complex5.multiply((-4542));
      complex2.abs();
      complex5.sqrt1z();
      complex0.hashCode();
      Complex.valueOf(Double.NaN);
      Complex complex7 = complex0.sqrt1z();
      complex0.cos();
      Object object0 = complex4.readResolve();
      complex4.equals(object0);
      Object object1 = complex6.readResolve();
      complex7.equals(object1);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-324.4));
      Complex complex2 = Complex.valueOf((-324.4), (-324.4));
      Complex complex3 = complex2.pow(complex1);
      complex0.toString();
      complex1.divide(complex3);
      complex2.getArgument();
      Complex complex4 = complex1.sinh();
      complex0.hashCode();
      Complex complex5 = complex0.createComplex(1048.616132226, Double.NaN);
      complex5.I.getArgument();
      complex4.subtract(complex1);
      Complex complex6 = Complex.INF;
      complex6.sqrt();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.divide(2.5217716516462005E-184);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex0.multiply(480);
      Complex complex6 = complex4.reciprocal();
      complex6.sin();
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex2.multiply((-20.0));
      complex6.getReal();
      Complex complex9 = Complex.I;
      complex9.pow(0.8813735870195428);
      complex5.acos();
      complex4.exp();
      complex7.multiply(complex3);
      Complex.valueOf(2.1226166967029073E57, 0.0);
      Complex complex10 = Complex.INF;
      complex8.multiply(complex0);
      complex1.conjugate();
      Complex complex11 = Complex.INF;
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex((-8.569906238528267E-8));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex3.ZERO.acos();
      Complex complex5 = complex1.subtract(1.024714469909668);
      complex5.ZERO.exp();
      Complex complex6 = complex2.createComplex((-8.569906238528267E-8), (-8.569906238528267E-8));
      complex6.sqrt1z();
      Complex complex7 = complex1.exp();
      complex7.reciprocal();
      complex4.ONE.multiply(Double.NaN);
      complex6.conjugate();
      complex4.sin();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply((-1.0));
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex0.atan();
      complex3.negate();
      Complex complex4 = complex0.acos();
      complex1.INF.getField();
      Complex complex5 = complex2.divide(complex1);
      complex5.I.pow(complex2);
      complex5.ONE.subtract((-1.0));
      Object object0 = new Object();
      complex5.equals(object0);
      complex4.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.I.multiply(433);
      complex0.isInfinite();
      complex2.ONE.conjugate();
      complex2.ONE.asin();
      Complex complex4 = complex1.subtract(complex0);
      complex1.ONE.negate();
      Complex complex5 = complex3.I.sin();
      Complex complex6 = complex1.cosh();
      complex6.ONE.getArgument();
      Complex complex7 = complex6.NaN.multiply((-374.8402792682));
      Complex complex8 = complex2.conjugate();
      Complex complex9 = complex8.sqrt();
      complex3.abs();
      Complex complex10 = complex7.subtract(complex4);
      complex10.NaN.pow((-374.8402792682));
      Complex complex11 = complex9.multiply(20.0);
      Complex complex12 = complex5.cos();
      Complex complex13 = complex12.ONE.sin();
      complex12.INF.readResolve();
      complex5.ZERO.divide(0.0);
      Complex.valueOf((double) 433, 1.9252213774515705);
      Complex complex14 = complex7.pow(433.0);
      complex14.INF.pow(20.0);
      complex11.cosh();
      Complex complex15 = complex10.sin();
      complex8.reciprocal();
      Complex complex16 = complex13.multiply(complex10);
      complex16.ZERO.multiply(240);
      Complex complex17 = complex15.multiply(433);
      complex17.NaN.cosh();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.pow(complex0);
      complex2.toString();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.atan();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.getImaginary();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.multiply(0.0);
      Complex complex9 = Complex.INF;
      Complex complex10 = complex0.multiply(573);
      complex10.equals((Object) null);
      Complex complex11 = complex9.acos();
      complex5.cos();
      complex3.tan();
      complex6.toString();
      Complex complex12 = complex11.asin();
      complex2.sqrt1z();
      complex11.isInfinite();
      complex12.abs();
      Complex complex13 = new Complex(2671350.458870288, 0.0);
      complex13.pow(complex3);
      complex8.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-1702.1726685298436));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.pow((-3.016329994276181E-8));
      complex1.I.divide(complex2);
      complex1.cos();
      Complex complex3 = complex0.divide((-1702.1726685298436));
      Complex complex4 = complex1.asin();
      Complex complex5 = complex2.add(3.405124925700107E-8);
      Complex complex6 = complex4.add(complex1);
      Complex complex7 = complex3.negate();
      complex5.nthRoot(1);
      complex3.add(complex0);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.pow(complex4);
      Complex complex10 = Complex.valueOf((double) 1);
      complex8.atan();
      complex1.divide(complex4);
      Complex complex11 = complex7.asin();
      Complex complex12 = complex1.divide(complex0);
      complex10.getField();
      complex10.exp();
      complex11.multiply(complex12);
      Complex complex13 = complex6.sinh();
      complex8.sqrt1z();
      complex13.negate();
      complex5.divide(complex9);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      complex0.ONE.divide((-20.0));
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex1.ZERO.multiply(480);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex3.reciprocal();
      complex0.multiply((-3.913411606668587E-8));
      complex5.getReal();
      Complex complex8 = complex6.pow((double) 480);
      complex7.acos();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex8.multiply(complex2);
      Complex.valueOf((-0.0021287875421478475), (-3.913411606668587E-8));
      Complex complex11 = Complex.INF;
      complex9.multiply(complex11);
      complex5.conjugate();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      complex0.INF.conjugate();
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ZERO;
      complex0.equals(complex2);
      complex1.exp();
      Complex complex3 = complex1.negate();
      complex0.equals(complex3);
      Complex complex4 = complex3.pow(complex0);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.pow(complex1);
      complex6.subtract(373.7795011843764);
      complex4.negate();
      complex6.acos();
      complex2.readResolve();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = new Complex(Double.NaN);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.ZERO;
      complex0.equals(complex3);
      Complex complex4 = complex1.sqrt();
      complex0.divide(2.592721454922832E-15);
      complex2.conjugate();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.ZERO.createComplex(1.0, 1.0);
      Complex complex5 = complex0.divide(complex1);
      complex5.ONE.multiply(complex3);
      Complex complex6 = complex1.NaN.tanh();
      Complex complex7 = complex5.I.tan();
      complex5.getField();
      complex0.divide((-1698.9493734424));
      Complex complex8 = complex4.subtract(1883.0);
      complex8.sqrt1z();
      complex3.hashCode();
      Complex.valueOf(0.631875447315607);
      complex7.sqrt1z();
      complex6.cos();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.valueOf(1.0, 1.0);
      complex9.equals(complex10);
      complex3.equals("");
      complex9.asin();
      Complex complex11 = new Complex((-2367.8184056), 250.965468230142);
      complex2.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-1702.1726685298436));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.asin();
      Complex complex3 = complex2.acos();
      Complex complex4 = complex0.multiply((-4542));
      complex4.abs();
      complex1.sqrt1z();
      Complex complex5 = new Complex(2.2810251664891242E-7, (-20.0));
      complex5.hashCode();
      Complex complex6 = Complex.valueOf(1484.301);
      complex5.sqrt1z();
      Complex complex7 = Complex.I;
      complex7.cos();
      Object object0 = complex7.readResolve();
      complex3.equals(object0);
      complex6.equals(object0);
      complex5.asin();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex2.pow(Double.NaN);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = new Complex(153.00893);
      complex6.cos();
      complex0.reciprocal();
      Complex complex7 = complex4.sin();
      complex4.reciprocal();
      complex7.multiply(1.1804114410235608E-15);
      complex3.getReal();
      Complex complex8 = complex4.pow((-1601.62));
      complex8.acos();
      complex0.exp();
      Complex complex9 = Complex.ZERO;
      complex5.multiply(complex9);
      Complex complex10 = Complex.valueOf(1.1804114410235608E-15, 2.9374220730460365E-4);
      complex10.multiply(complex2);
      complex6.conjugate();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.pow(complex0);
      complex2.toString();
      complex2.INF.divide(complex1);
      complex0.NaN.hashCode();
      Complex complex3 = complex2.tanh();
      complex3.divide(Double.NaN);
      complex2.conjugate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.subtract(601.1044169);
      complex0.sin();
      Complex complex2 = complex1.sinh();
      complex0.exp();
      Complex complex3 = complex1.negate();
      Object object0 = complex3.readResolve();
      complex2.equals(object0);
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex0.sinh();
      complex3.pow(complex5);
      complex2.subtract(601.1044169);
      complex0.negate();
      complex4.acos();
      Complex complex6 = Complex.ZERO;
      complex6.ONE.sqrt();
      complex6.INF.pow(complex1);
      complex6.readResolve();
      complex2.getImaginary();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.INF.add(0.0);
      complex2.NaN.conjugate();
      Complex complex3 = complex1.I.createComplex(0.0, (-1554.8238));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.ONE.pow(complex0);
      complex2.ONE.nthRoot(1038);
      Complex complex6 = complex2.NaN.tanh();
      complex6.ZERO.asin();
      Complex complex7 = complex5.pow(complex6);
      complex7.tan();
      complex2.reciprocal();
      Complex complex8 = Complex.INF;
      complex8.getReal();
      complex2.getImaginary();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, 1.5392257142577226E220);
      Complex complex2 = complex1.I.pow(complex0);
      complex2.toString();
      complex2.INF.divide(complex1);
      complex0.ZERO.getArgument();
      complex1.I.sinh();
      complex0.NaN.hashCode();
      complex1.ZERO.createComplex(1.5392257142577226E220, Double.NaN);
      Complex complex3 = complex0.subtract(complex1);
      complex3.sqrt();
      Complex complex4 = complex0.negate();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = new Complex((-20.0), 508.3);
      Complex complex4 = complex3.divide(complex2);
      complex2.tanh();
      Complex.valueOf((-7.62162303263991E-8), 1.0);
      Complex complex5 = complex4.multiply(0);
      Complex complex6 = new Complex(2.9374220730460365E-4);
      complex6.sqrt();
      Complex complex7 = complex2.divide(1.0);
      Complex complex8 = complex0.tanh();
      complex5.divide((-20.0));
      complex7.conjugate();
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex((-4.9202842786896806E14), 0.0);
      Complex complex1 = complex0.pow((-4.9202842786896806E14));
      complex1.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.tan();
      complex1.cosh();
      complex3.getField();
      Complex complex4 = Complex.INF;
      complex4.exp();
      Complex complex5 = complex2.divide((-1570.8814522));
      complex5.add(1.0);
      complex5.getReal();
      complex1.divide(3.1520070828798975E-212);
      Complex complex6 = complex0.tan();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex((-1173.0));
      Complex complex1 = complex0.divide(0.0);
      complex1.ONE.getField();
      Complex complex2 = Complex.valueOf(0.10291612148284912, (-1603.17396324043));
      complex1.INF.tan();
      Complex complex3 = complex2.add((-214.2793013));
      complex1.isNaN();
      Complex complex4 = complex0.multiply(0.10291612148284912);
      Complex complex5 = complex4.asin();
      complex4.ZERO.pow((-1173.0));
      Complex complex6 = complex5.NaN.sinh();
      Complex complex7 = complex2.pow(complex4);
      complex3.abs();
      Complex complex8 = complex7.ONE.cosh();
      complex8.I.nthRoot(506);
      Complex complex9 = complex7.createComplex((-1173.0), (-3072.8885452));
      complex9.subtract(1617.4171633750411);
      complex9.isInfinite();
      Complex complex10 = Complex.valueOf((-1603.17396324043));
      complex3.INF.cos();
      complex10.toString();
      complex4.tanh();
      complex3.hashCode();
      complex1.sin();
      complex8.getImaginary();
      complex5.getArgument();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      int int0 = 0;
      Complex complex1 = complex0.add((double) 0);
      complex0.NaN.exp();
      double double0 = (-2992.02);
      complex1.INF.divide((-2992.02));
      Complex complex2 = complex0.ZERO.sqrt();
      complex2.ONE.tan();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-6.259620482221904E-8));
      complex0.pow(4783.6393098);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-3.016329994276181E-8), (-1702.1726685298436));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.pow((-3.016329994276181E-8));
      complex1.I.divide(complex2);
      Complex complex3 = complex1.cos();
      complex0.reciprocal();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex1.NaN.reciprocal();
      Complex complex6 = complex4.multiply((-3.913411606668587E-8));
      complex0.getReal();
      complex6.pow((-3.016329994276181E-8));
      complex1.acos();
      complex6.exp();
      complex5.ZERO.multiply(complex3);
      Complex.valueOf((-3.016329994276181E-8), (-20.0));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      double double0 = (-2741.363098866);
      Complex complex0 = Complex.valueOf((-2741.363098866), 0.0);
      Complex complex1 = null;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(20.0, 0.0);
      double double1 = (-106.067341014);
      Complex complex1 = complex0.NaN.subtract((-106.067341014));
      Complex complex2 = complex1.I.sinh();
      complex1.ONE.divide(0.0);
      complex2.I.pow(20.0);
      complex0.NaN.atan();
      try { 
        complex2.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.getArgument();
      complex0.ONE.hashCode();
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.ONE.multiply(1.5707963267948966);
      Complex complex3 = complex1.multiply(1.5707963267948966);
      complex3.ZERO.divide(complex1);
      complex0.ZERO.abs();
      complex3.cos();
      complex0.ZERO.pow(complex2);
      Complex complex4 = complex3.exp();
      complex4.I.exp();
      complex4.add(1.5707963267948966);
      Complex complex5 = complex0.multiply((-2094));
      complex5.sinh();
      complex5.divide(1.5707963267948966);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2737.415395), (-239.504257));
      Complex complex1 = complex0.I.sqrt();
      complex0.I.divide(2691.809016427409);
      Complex complex2 = Complex.valueOf((-239.504257), (-1453.595659699));
      Complex complex3 = complex0.createComplex((-239.504257), (-2737.415395));
      Complex complex4 = complex0.subtract(2691.809016427409);
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex4.ONE.exp();
      Complex complex7 = complex6.I.cosh();
      complex7.hashCode();
      Complex complex8 = complex7.INF.pow(79.35108899112);
      complex8.tan();
      Complex complex9 = complex4.subtract(6.283185307179586);
      Complex complex10 = complex9.I.pow(complex2);
      complex8.I.hashCode();
      complex7.INF.subtract(complex1);
      complex0.divide(2445.32093079);
      complex8.pow(complex5);
      Complex complex11 = Complex.valueOf((-333.239974));
      complex3.equals(complex0);
      complex11.hashCode();
      complex10.divide(2.0);
      complex8.subtract((-239.504257));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex((-1824.701280185), (-1824.701280185));
      Complex complex1 = Complex.valueOf(843.31538795, 843.31538795);
      complex1.NaN.createComplex((-1058.496591630143), (-1058.496591630143));
      complex0.hashCode();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex2.sinh();
      complex1.isInfinite();
      complex1.hashCode();
      Complex.valueOf(0.0);
      complex3.sinh();
      complex0.toString();
      complex1.cos();
      complex3.multiply((-1780));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex((-537.476445364), 1009.207971761);
      Complex complex1 = complex0.ONE.pow(245.253);
      Complex complex2 = complex1.ZERO.atan();
      complex0.hashCode();
      complex0.atan();
      Complex complex3 = complex2.negate();
      complex2.NaN.subtract(complex0);
      complex0.getField();
      complex2.cos();
      complex3.reciprocal();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(674.93279, 674.93279);
      complex0.NaN.multiply(674.93279);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(0.0);
      complex1.tanh();
      complex1.toString();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.ONE.exp();
      Complex complex4 = complex0.ZERO.createComplex(1.0, 1.0);
      Complex complex5 = complex0.divide(complex1);
      complex5.ONE.multiply(complex3);
      Complex complex6 = complex1.NaN.tanh();
      complex5.I.tan();
      complex5.getField();
      Complex complex7 = complex0.divide((-1698.9493734424));
      Complex complex8 = complex4.subtract(1883.0);
      Complex complex9 = complex6.I.sin();
      complex5.ONE.sinh();
      Complex complex10 = complex8.INF.exp();
      Complex complex11 = complex7.negate();
      complex8.equals(complex2);
      Complex complex12 = complex5.pow(complex6);
      Complex complex13 = complex10.sinh();
      complex12.pow(complex13);
      complex9.subtract(542.516315098049);
      complex13.negate();
      complex6.acos();
      complex5.readResolve();
      complex11.getImaginary();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(1.5392257142577226E220);
      Complex complex1 = Complex.valueOf(1.5392257142577226E220, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.pow(complex0);
      complex2.toString();
      complex2.INF.divide(complex1);
      complex0.ZERO.getArgument();
      complex1.I.sinh();
      complex0.NaN.hashCode();
      complex1.ZERO.createComplex(1.5392257142577226E220, Double.NaN);
      Complex complex3 = complex0.subtract(complex1);
      complex3.sqrt();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isInfinite();
      Complex complex1 = new Complex((-1157.55), 0.0);
      complex1.INF.log();
      complex1.INF.cosh();
      Complex.valueOf((-1157.55));
      Complex complex2 = Complex.valueOf(0.0, (-1157.55));
      complex0.ZERO.subtract(3893.1684);
      Complex complex3 = complex2.exp();
      complex3.multiply(149);
      Complex complex4 = complex1.INF.tan();
      Complex complex5 = complex0.multiply(complex1);
      complex5.I.add((-2387.3086));
      complex1.subtract((-1157.55));
      Complex complex6 = Complex.valueOf((-1786.562));
      complex2.multiply((-4138));
      complex2.add(complex4);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getImaginary();
      Complex complex1 = complex0.INF.conjugate();
      complex0.negate();
      Complex complex2 = Complex.ZERO;
      complex0.equals(complex2);
      complex1.sqrt();
      Complex complex3 = new Complex((-408.0), 6.113879253864931E-8);
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = 1640.270829046825;
      Complex complex0 = new Complex((-1987.598985013), 1640.270829046825);
      Complex complex1 = complex0.ONE.tan();
      Complex complex2 = complex1.ZERO.tanh();
      complex1.INF.readResolve();
      complex1.ZERO.hashCode();
      Complex complex3 = complex1.INF.negate();
      complex3.pow(1640.270829046825);
      complex3.NaN.pow(complex2);
      Complex complex4 = complex0.NaN.exp();
      Complex complex5 = complex4.I.tanh();
      complex2.ZERO.sqrt1z();
      Complex complex6 = complex5.INF.asin();
      Complex complex7 = complex6.ONE.sqrt();
      Complex complex8 = complex7.ZERO.multiply((-1));
      complex8.INF.negate();
      Complex complex9 = complex7.ONE.conjugate();
      complex9.NaN.divide((double) (-1));
      complex0.getField();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.tan();
      complex2.I.add(complex1);
      Complex complex3 = complex0.NaN.pow(complex1);
      complex1.conjugate();
      complex1.ONE.sin();
      Complex complex4 = complex3.I.subtract(3082.3);
      Complex complex5 = complex4.multiply(complex1);
      complex5.ONE.multiply(1.1976919074588434E201);
      Complex complex6 = complex0.negate();
      complex6.sinh();
      complex6.NaN.acos();
      complex6.hashCode();
      int int0 = (-2795);
      try { 
        complex1.nthRoot((-2795));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,795
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex1.INF.add(3.8718282216768776E250);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex2.INF.divide(complex4);
      complex5.ONE.add(3.8718282216768776E250);
      Complex complex6 = complex3.sinh();
      complex6.exp();
      Complex complex7 = complex2.INF.subtract((-1840.2198008562));
      Complex complex8 = complex7.ONE.createComplex(3.8718282216768776E250, (-3.158898981674071E-9));
      Complex complex9 = complex8.ZERO.pow(complex2);
      complex9.INF.tan();
      complex0.getArgument();
      complex2.isInfinite();
      Complex complex10 = complex4.conjugate();
      complex3.pow(complex10);
      Complex.valueOf(428.13);
      Complex complex11 = complex10.atan();
      complex0.toString();
      Complex complex12 = complex11.atan();
      Complex complex13 = complex12.ONE.reciprocal();
      complex12.ZERO.getArgument();
      complex7.getReal();
      complex4.ONE.acos();
      complex10.add(1307.5);
      complex8.equals(complex4);
      complex13.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex0.ONE.divide((-20.0));
      complex2.I.conjugate();
      complex1.ZERO.multiply(480);
      Complex complex4 = complex1.NaN.divide((-1853.1925));
      Complex complex5 = complex4.I.asin();
      Complex complex6 = complex1.I.add((-20.0));
      complex6.ONE.add(complex1);
      Complex complex7 = complex6.negate();
      complex0.NaN.nthRoot(1);
      Complex complex8 = complex5.NaN.add(complex1);
      complex0.pow(complex1);
      Complex complex9 = Complex.valueOf((-1853.1925));
      Complex complex10 = complex3.atan();
      complex10.NaN.divide(complex4);
      Complex complex11 = complex0.asin();
      Complex complex12 = complex9.divide(complex8);
      complex8.getField();
      complex12.I.exp();
      Complex complex13 = complex8.multiply(complex2);
      complex12.sinh();
      complex5.sqrt1z();
      complex13.negate();
      complex4.divide(complex7);
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex((-4.9202842786896806E14), 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ZERO.divide(complex0);
      Complex complex3 = complex2.ZERO.tanh();
      Complex.valueOf(0.0, 0.0);
      complex1.ZERO.multiply(0);
      complex1.I.sqrt();
      complex0.divide((-892.4697886479734));
      complex1.tanh();
      complex3.divide((-4.9202842786896806E14));
      Complex complex4 = complex0.conjugate();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.tanh();
      complex1.NaN.toString();
      Complex complex2 = complex0.divide(0.0);
      complex2.INF.add(0.0);
      complex2.isNaN();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      double double0 = 1.384300947189331;
      Complex complex0 = new Complex(1.384300947189331, 2.251096660331649E189);
      complex0.toString();
      Complex complex1 = complex0.subtract(2.251096660331649E189);
      Complex complex2 = complex1.ONE.sqrt1z();
      complex1.ZERO.multiply((-1201));
      complex2.INF.exp();
      Complex complex3 = complex2.NaN.multiply(complex1);
      complex3.ONE.divide(1.130435759928337E-140);
      complex1.getField();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.I.cosh();
      Complex complex6 = complex5.log();
      complex6.ZERO.asin();
      int int0 = 0;
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      complex0.add(complex1);
      complex1.NaN.nthRoot(1);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.I.asin();
      complex1.reciprocal();
      Complex.valueOf((double) 1);
      complex1.abs();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.negate();
      Complex complex6 = complex5.ZERO.divide(complex3);
      complex5.ONE.abs();
      complex4.nthRoot(1);
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.subtract(complex7);
      complex6.NaN.atan();
      complex6.ZERO.atan();
      complex5.getImaginary();
      Complex complex9 = complex6.multiply(0.0);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex10.ONE.multiply(1);
      complex3.equals(complex10);
      complex8.acos();
      Complex complex12 = complex4.cos();
      complex12.tan();
      complex11.ZERO.toString();
      Complex complex13 = complex2.asin();
      complex13.sqrt1z();
      complex8.isInfinite();
      complex11.abs();
      Complex complex14 = new Complex(1.0, 1);
      complex9.pow(complex14);
      complex11.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-986.886230242238));
      complex0.sinh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.reciprocal();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex1.ZERO.cos();
      Complex complex4 = complex3.I.pow(complex2);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex6.ONE.add(complex0);
      complex7.ONE.conjugate();
      Complex complex8 = complex1.cos();
      Complex complex9 = complex0.ONE.negate();
      Complex complex10 = complex9.NaN.pow(1397.06);
      Complex complex11 = complex6.tan();
      complex1.add(complex6);
      complex6.log();
      complex8.log();
      complex4.negate();
      Complex complex12 = complex2.tanh();
      complex12.INF.cos();
      Complex complex13 = Complex.valueOf(0.0, 0.0);
      complex13.INF.atan();
      complex11.cos();
      complex10.isInfinite();
      complex8.divide(0.0);
      complex10.readResolve();
      complex5.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.reciprocal();
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.asin();
      Complex complex3 = complex1.ZERO.acos();
      Complex complex4 = complex3.ZERO.multiply((-4542));
      complex0.abs();
      Complex complex5 = complex1.sqrt1z();
      complex5.I.hashCode();
      Complex.valueOf(1.0);
      Complex complex6 = complex1.sqrt1z();
      complex4.cos();
      complex0.equals(complex6);
      complex4.equals(complex5);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex(794.8731512141, 794.8731512141);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.NaN.sin();
      complex2.ZERO.negate();
      Complex complex3 = complex0.add(0.0);
      complex2.toString();
      Complex complex4 = complex0.ZERO.sin();
      complex4.ONE.createComplex((-1055.846), 794.8731512141);
      complex1.getImaginary();
      Complex complex5 = complex3.sqrt1z();
      complex5.INF.getArgument();
      complex0.acos();
      complex1.conjugate();
      Complex complex6 = complex3.createComplex(Double.NEGATIVE_INFINITY, 0.0);
      Complex.valueOf(0.0);
      Complex complex7 = complex6.ONE.atan();
      complex1.getField();
      complex7.isNaN();
      complex3.tanh();
      Complex complex8 = complex1.atan();
      complex8.toString();
      complex0.pow(0.7853981633974483);
      complex6.isNaN();
      complex3.exp();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = Complex.ONE;
      complex0.INF.multiply(complex1);
      Complex complex2 = complex0.acos();
      Complex.valueOf(2.0);
      complex2.acos();
      Complex complex3 = Complex.I;
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.multiply(913);
      Complex complex3 = complex0.I.subtract(complex1);
      complex3.NaN.readResolve();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.ZERO.asin();
      complex0.toString();
      complex2.sinh();
      Object object0 = new Object();
      complex4.equals(object0);
      complex5.INF.subtract(complex1);
      Complex complex6 = complex5.createComplex(0.0, 913);
      Complex complex7 = complex6.sqrt1z();
      Complex complex8 = complex2.exp();
      Complex complex9 = complex2.NaN.subtract(0.4624064564704895);
      Complex complex10 = complex8.NaN.multiply(0);
      Complex complex11 = complex0.createComplex(913, (-4019.0));
      complex10.ZERO.getField();
      complex5.ZERO.acos();
      Complex complex12 = complex5.sqrt1z();
      complex0.sqrt1z();
      Complex complex13 = complex4.sqrt();
      complex5.getField();
      complex13.toString();
      complex11.getField();
      complex7.subtract(complex1);
      complex12.getArgument();
      complex9.asin();
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.tanh();
      double double0 = (-202.9039418122511);
      complex1.divide((-202.9039418122511));
      complex0.getField();
      complex1.ZERO.getArgument();
      Complex complex2 = complex1.NaN.acos();
      complex0.INF.getArgument();
      complex2.ZERO.multiply((-978.99079222321));
      try { 
        complex1.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex2.INF.cos();
      complex0.getField();
      complex4.tanh();
      complex2.getArgument();
      Complex complex5 = complex1.multiply(complex2);
      complex3.NaN.sinh();
      Complex complex6 = complex4.cos();
      complex6.ONE.tan();
      complex6.atan();
      complex6.divide(1540.32201650965);
      complex5.cosh();
      complex3.getImaginary();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.equals((Object) null);
      complex0.getField();
      complex0.equals((Object) null);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.ZERO.cosh();
      Complex complex3 = complex0.subtract(705.17);
      Complex complex4 = Complex.I;
      complex3.multiply(complex4);
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = 1.3594057956219485E-8;
      Complex complex1 = complex0.INF.createComplex(1.3594057956219485E-8, 13.922269);
      complex1.ONE.hashCode();
      complex0.INF.hashCode();
      Complex complex2 = complex0.sinh();
      complex1.ZERO.abs();
      Complex complex3 = complex1.pow(1.3594057956219485E-8);
      double double1 = 2.0;
      double double2 = 0.0;
      complex2.NaN.createComplex(13.922269, 0.0);
      complex1.I.cos();
      double double3 = 2167.8353024;
      try { 
        complex3.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.INF.add(0.0);
      complex2.NaN.conjugate();
      Complex complex3 = complex1.I.createComplex(0.0, (-1554.8238));
      Complex complex4 = complex3.tanh();
      complex4.ONE.pow(complex0);
      complex2.ONE.nthRoot(1038);
      Complex complex5 = complex2.NaN.tanh();
      complex5.ZERO.asin();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.ONE.multiply(1841.0);
      complex8.INF.multiply((-1554.8238));
      Complex complex9 = complex6.acos();
      Complex complex10 = complex9.ZERO.multiply((double) 1038);
      complex10.ZERO.subtract(0.0);
      complex10.I.add(complex2);
      Complex complex11 = complex9.divide(complex1);
      Complex complex12 = complex6.log();
      complex9.NaN.getField();
      complex11.divide(0.0);
      Complex.valueOf(402.722190639);
      complex12.toString();
      complex12.getReal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = complex0.add((-6.527407547535494E-8));
      Complex complex2 = complex1.exp();
      complex2.INF.multiply((-1432.38));
      Complex complex3 = complex0.divide((-1432.38));
      Complex complex4 = complex3.INF.multiply(complex2);
      Complex complex5 = complex2.multiply((-6.527407547535494E-8));
      complex0.INF.exp();
      Complex complex6 = complex2.ZERO.acos();
      complex1.multiply((-6.527407547535494E-8));
      complex5.ONE.hashCode();
      Complex complex7 = complex5.subtract(complex4);
      complex7.NaN.abs();
      complex7.NaN.divide((-408.0));
      Complex complex8 = complex7.reciprocal();
      complex8.ZERO.atan();
      complex1.toString();
      Complex complex9 = complex1.acos();
      Complex complex10 = new Complex(Double.NaN);
      complex9.ZERO.add(complex10);
      complex1.asin();
      Complex complex11 = complex5.acos();
      Complex.valueOf(0.0, (-1432.38));
      complex6.log();
      complex11.isInfinite();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex1.NaN.subtract(2.0);
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex1.ZERO.createComplex(0.0, 1073.673441953991);
      complex5.ONE.tan();
      Complex complex6 = complex0.multiply(0.0);
      Complex complex7 = complex0.tan();
      complex4.INF.hashCode();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex1.subtract(0.0);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex2.reciprocal();
      complex10.ZERO.hashCode();
      Complex complex11 = complex3.exp();
      complex11.INF.subtract(complex6);
      Complex complex12 = complex7.asin();
      Complex complex13 = complex4.divide(0.0);
      Complex complex14 = complex13.ZERO.log();
      assertTrue(complex14.isInfinite());
      
      complex8.getField();
      complex4.INF.multiply(complex2);
      Complex complex15 = complex12.subtract(Double.NaN);
      complex15.ZERO.reciprocal();
      Complex complex16 = complex0.sqrt();
      complex13.readResolve();
      Complex complex17 = complex4.pow(complex12);
      assertEquals(0.7023967071298748, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertSame(complex17, complex15);
      
      Complex.valueOf(0.0, 85.7669);
      Complex complex18 = complex16.sqrt1z();
      assertEquals((-0.45508986056222733), complex18.getImaginary(), 0.01);
      
      complex10.pow((-924.52922295));
      complex13.readResolve();
      assertTrue(complex3.equals((Object)complex6));
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertSame(complex13, complex10);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertNotSame(complex4, complex15);
  }
}
