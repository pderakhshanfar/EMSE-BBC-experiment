/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:00:54 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.1541756557557508E254, 1.1541756557557508E254);
      Complex complex2 = complex0.reciprocal();
      complex2.acos();
      Complex complex3 = Complex.ONE;
      complex3.ONE.add(1.1541756557557508E254);
      complex1.getReal();
      complex1.tan();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex2.atan();
      complex1.getField();
      Complex complex6 = Complex.ZERO;
      complex6.nthRoot(3946);
      complex4.pow(1.1541756557557508E254);
      complex5.multiply(455);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      complex0.reciprocal();
      Complex complex1 = Complex.ONE;
      complex1.getReal();
      Complex complex2 = Complex.INF;
      Complex complex3 = new Complex(1315.9252011, 1.1541756557557508E254);
      complex3.ZERO.cosh();
      complex0.asin();
      complex3.INF.atan();
      complex0.I.getField();
      complex1.abs();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = new Complex(20.0, 20.0);
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.exp();
      complex3.getField();
      Complex.valueOf((-20.0), (-20.0));
      Complex complex7 = complex3.tan();
      complex4.tan();
      complex2.nthRoot(1056);
      complex7.abs();
      complex0.asin();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex4 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex4.NaN.tan();
      complex4.tan();
      complex2.nthRoot(1515);
      Complex complex5 = complex0.acos();
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex0.ONE.exp();
      Complex complex2 = Complex.valueOf((-24.20557703552075), Double.POSITIVE_INFINITY);
      complex2.tan();
      complex1.abs();
      complex2.multiply(1879);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex0.reciprocal();
      complex1.readResolve();
      Complex complex3 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      complex3.tan();
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
      complex0.ONE.exp();
      Complex complex1 = Complex.valueOf((-24.20557703552075), Double.POSITIVE_INFINITY);
      complex1.multiply(3.7201467248814224E-9);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow((-500.9003519101));
      complex2.NaN.pow(complex0);
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = new Complex(681670.1704505779, 681670.1704505779);
      complex0.ZERO.asin();
      Complex complex1 = complex0.ONE.tanh();
      complex0.ONE.exp();
      complex0.readResolve();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.exp();
      Complex.valueOf(3835.17913633054, 681670.1704505779);
      complex3.I.createComplex(681670.1704505779, 3835.17913633054);
      complex2.readResolve();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
      complex0.readResolve();
      complex0.getField();
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tan();
      Complex.valueOf(4.171246555647879E-97);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.reciprocal();
      complex1.readResolve();
      complex0.getField();
      Complex complex2 = Complex.valueOf((-20.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.valueOf((-20.0));
      Complex complex5 = complex4.tanh();
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.I.add(complex1);
      Complex.valueOf(9.113713162029408E267);
      Complex complex3 = complex0.I.acos();
      complex3.NaN.getArgument();
      Complex complex4 = complex2.ZERO.tanh();
      Complex complex5 = complex2.I.add(Double.NaN);
      double double0 = Double.NaN;
      Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.INF.tan();
      complex6.ZERO.log();
      complex4.ZERO.sqrt1z();
      complex1.toString();
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.639780418418697E-8, 9.639780418418697E-8);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ZERO.divide(9.639780418418697E-8);
      complex1.I.readResolve();
      complex1.INF.sinh();
      Complex complex3 = complex1.I.sqrt1z();
      Complex complex4 = complex3.multiply(1342);
      Complex complex5 = complex2.NaN.tan();
      complex4.INF.subtract((-614.1));
      Complex complex6 = complex2.INF.conjugate();
      complex1.INF.divide(complex6);
      Complex complex7 = complex2.ZERO.cosh();
      complex7.divide(1196.6218557);
      complex1.readResolve();
      complex2.acos();
      complex0.ONE.acos();
      Complex complex8 = complex7.reciprocal();
      complex8.subtract(Double.NaN);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex0.subtract(complex1);
      Complex.valueOf((-0.8813735870195429), (-2727.1891912783303));
      Complex complex3 = Complex.INF;
      complex3.isInfinite();
      Complex.valueOf(6321.7998418172, 517.0);
      Complex complex4 = new Complex((-0.8813735870195429));
      complex4.toString();
      Complex complex5 = Complex.I;
      complex0.equals(complex2);
      complex4.cos();
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-46.1));
      complex1.tanh();
      complex0.ZERO.abs();
      Complex complex2 = Complex.valueOf(1.108938997126179E-40, 1.108938997126179E-40);
      complex2.pow(1.108938997126179E-40);
      Complex complex3 = Complex.valueOf(20.0);
      complex3.tanh();
      Complex.valueOf((-500.9003519101), (-20.0));
      complex0.sqrt();
      complex1.pow(1.5085256099700928);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      Complex complex1 = complex0.sqrt1z();
      complex0.getField();
      complex0.sqrt();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      complex0.reciprocal();
      Complex complex1 = complex0.reciprocal();
      complex0.readResolve();
      Complex complex2 = Complex.ONE;
      complex1.getReal();
      complex0.hashCode();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = Complex.valueOf(1315.9252011, 880.187);
      complex3.sqrt1z();
      complex4.acos();
      Complex complex5 = complex3.tanh();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      Complex complex1 = complex0.reciprocal();
      complex1.readResolve();
      Complex complex2 = Complex.ONE;
      complex2.getReal();
      complex0.hashCode();
      Complex complex3 = Complex.valueOf(1.0, (-2727.1891912783303));
      complex3.equals(complex1);
      complex2.tan();
      Complex.valueOf((-2727.1891912783303));
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0);
      complex1.divide(complex0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.log();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1.8766223E7);
      complex1.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      complex4.readResolve();
      Complex complex5 = Complex.INF;
      complex5.divide(complex1);
      Complex complex6 = Complex.ZERO;
      complex4.log();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 1.8766223E7);
      Complex complex8 = complex7.add(complex4);
      complex4.atan();
      complex6.subtract(20.0);
      complex4.subtract(complex8);
      complex2.divide(complex3);
      Complex complex9 = Complex.I;
      Complex complex10 = new Complex(20.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      Complex complex1 = complex0.reciprocal();
      complex1.readResolve();
      Complex complex2 = Complex.ONE;
      complex0.getReal();
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.I;
      complex4.acos();
      Complex complex5 = new Complex(1.1541756557557508E254, (-20.0));
      complex5.acos();
      complex4.pow(1.1541756557557508E254);
      complex3.createComplex((-6.364563771711373E-8), 0.6531200596373952);
      complex0.add(1.1541756557557508E254);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      Complex complex1 = complex0.reciprocal();
      complex1.readResolve();
      Complex complex2 = new Complex(1.1541756557557508E254);
      complex2.getReal();
      complex1.getReal();
      complex1.hashCode();
      Complex complex3 = Complex.NaN;
      Complex.valueOf(1.1541756557557508E254, 1.1541756557557508E254);
      complex0.acos();
      complex3.tanh();
      complex3.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 1315.9252011;
      double double1 = 1.1541756557557508E254;
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.pow(352.462126587375);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.ZERO.subtract((-4250.51524443977));
      Complex complex4 = complex3.ZERO.sinh();
      complex2.hashCode();
      Complex complex5 = complex2.subtract(complex4);
      complex3.getField();
      Complex complex6 = complex5.sqrt();
      complex6.I.subtract((-2292.8258258422425));
      complex6.ONE.tan();
      complex5.multiply(454.4);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 867.652825);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex1.INF.divide(complex0);
      Complex complex3 = Complex.valueOf(973.213002, 867.652825);
      Complex complex4 = complex0.ONE.multiply(1.5800256583859738);
      Complex complex5 = complex4.ZERO.conjugate();
      complex5.toString();
      Complex complex6 = complex0.reciprocal();
      Complex complex7 = complex6.ONE.pow((-20.0));
      Complex complex8 = complex7.NaN.subtract(complex4);
      complex8.ONE.getField();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.ZERO.sin();
      Complex complex11 = complex0.subtract(complex9);
      Complex complex12 = complex11.INF.cos();
      complex12.ONE.add(complex1);
      Complex complex13 = complex9.exp();
      complex10.acos();
      Complex complex14 = complex6.add(complex7);
      Complex complex15 = complex4.pow((-1471.6143));
      complex11.add(complex10);
      complex15.log();
      Complex complex16 = complex6.sin();
      complex13.exp();
      Complex complex17 = complex10.reciprocal();
      complex17.NaN.pow(complex10);
      complex16.equals(complex17);
      Complex complex18 = complex2.divide(complex10);
      complex18.ZERO.cos();
      complex6.log();
      complex3.cosh();
      complex7.pow(complex9);
      complex14.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      complex0.reciprocal();
      Complex complex1 = complex0.subtract((-2300.52581606141));
      Complex complex2 = complex1.sinh();
      Complex complex3 = Complex.ZERO;
      complex3.hashCode();
      complex1.subtract(complex2);
      Complex.valueOf(1.1541756557557508E254, (-0.8813735870195429));
      Complex complex4 = new Complex(1.1541756557557508E254);
      complex0.acos();
      Complex complex5 = Complex.INF;
      complex5.isInfinite();
      Complex complex6 = new Complex((-2727.1891912783303));
      complex5.toString();
      complex6.getArgument();
      complex2.tanh();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 1315.9252011;
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = Complex.ONE;
      complex1.getImaginary();
      complex2.multiply(complex3);
      complex0.multiply(1599);
      complex2.hashCode();
      int int0 = 1;
      int int1 = (-410);
      try { 
        complex2.nthRoot((-410));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -410
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = Complex.ONE;
      complex0.getReal();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.valueOf(6.283185307179586, (-1457.95701));
      complex6.acos();
      complex1.acos();
      complex2.pow(1315.9252011);
      complex0.createComplex(437.2264, (-3.6897084415718804E137));
      complex5.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-4332.0));
      complex0.INF.getField();
      Complex complex1 = complex0.sqrt1z();
      complex1.readResolve();
      complex1.ZERO.atan();
      Complex.valueOf((-4332.0));
      Complex complex2 = Complex.ZERO;
      complex1.ZERO.log();
      Complex complex3 = complex0.add(complex2);
      complex3.ONE.atan();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = complex0.asin();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.multiply(0.2815598249435425);
      complex1.readResolve();
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.valueOf(4.0430160253378594E-275, 2107.89);
      complex5.divide(complex6);
      complex3.atan();
      Complex complex7 = Complex.valueOf(0.2815598249435425);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.log();
      complex4.add(complex9);
      Complex complex10 = new Complex(4.0430160253378594E-275);
      Complex complex11 = Complex.INF;
      Complex complex12 = complex11.subtract(2107.89);
      complex12.subtract(complex2);
      complex10.divide(complex7);
      complex10.multiply(991);
      Complex complex13 = Complex.I;
      Complex complex14 = new Complex(1969.152353490999, Double.POSITIVE_INFINITY);
      complex0.isNaN();
      complex1.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.pow(352.462126587375);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.ZERO.subtract((-4250.51524443977));
      Complex complex4 = complex3.ZERO.sinh();
      complex2.hashCode();
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = Complex.valueOf((-0.8813735870195429), (-2727.1891912783303));
      Complex complex7 = new Complex(352.462126587375);
      complex7.acos();
      Complex complex8 = Complex.INF;
      complex8.isInfinite();
      Complex.valueOf(6321.7998418172, 517.0);
      Complex complex9 = new Complex((-0.8813735870195429));
      complex9.toString();
      Complex complex10 = Complex.I;
      complex0.equals(complex5);
      complex6.tan();
      Complex.valueOf(352.462126587375);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(1053.6);
      Complex complex1 = complex0.add((-20.0));
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.add(2107.3);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex2.divide(2107.3);
      complex4.add(816.04646484);
      complex1.createComplex(0.0, (-2279.1094832));
      Complex complex5 = complex3.multiply(complex1);
      complex5.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow(complex0);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.cosh();
      complex3.getField();
      Complex complex7 = complex4.pow(complex6);
      complex7.divide(complex6);
      complex1.toString();
      complex4.I.asin();
      complex5.atan();
      Complex complex8 = complex5.asin();
      Complex complex9 = complex0.negate();
      Complex complex10 = complex2.divide(complex3);
      complex9.divide(Double.POSITIVE_INFINITY);
      complex8.cos();
      Complex complex11 = complex8.add(0.0);
      complex4.abs();
      Complex complex12 = new Complex(0.15861517855926732, (-1.452496267904829E-8));
      complex12.pow(complex3);
      complex12.abs();
      complex11.equals("R]8MiJO?Gp6|YN4:;mV");
      complex2.divide(0.0);
      complex10.multiply((-1277));
      complex4.sqrt1z();
      try { 
        complex5.nthRoot((-1277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,277
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 0.371698260307312;
      Complex complex0 = Complex.valueOf(0.371698260307312, 0.371698260307312);
      complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.pow(0.371698260307312);
      Complex complex4 = complex2.tanh();
      complex3.cos();
      Complex complex5 = Complex.valueOf(0.371698260307312);
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex4.reciprocal();
      complex4.readResolve();
      complex3.getReal();
      complex0.hashCode();
      complex0.subtract(complex7);
      Complex complex8 = complex6.acos();
      complex8.isInfinite();
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex5.pow(complex8);
      complex10.abs();
      Complex complex11 = Complex.INF;
      complex2.equals(complex11);
      Complex complex12 = Complex.ONE;
      complex12.divide(Double.NaN);
      complex7.multiply((-1277));
      complex0.sqrt1z();
      // Undeclared exception!
      complex2.nthRoot(2052337756);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1315.9252011);
      Complex complex1 = complex0.reciprocal();
      complex1.readResolve();
      Complex complex2 = Complex.ONE;
      complex2.getReal();
      complex0.hashCode();
      complex1.subtract(complex0);
      Complex complex3 = Complex.valueOf(1.0, (-2727.1891912783303));
      Complex complex4 = complex3.acos();
      complex3.isInfinite();
      complex4.toString();
      complex3.getArgument();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.pow(352.462126587375);
      complex0.log();
      Complex complex2 = complex1.ZERO.subtract((-4250.51524443977));
      Complex complex3 = complex2.ZERO.sinh();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex1.negate();
      Complex complex6 = new Complex((-1389.548));
      complex6.divide(complex1);
      Complex complex7 = complex5.divide((-1389.548));
      Complex complex8 = complex4.cos();
      Complex complex9 = complex1.add(1876.9111);
      complex7.abs();
      Complex complex10 = new Complex(3.735333866258403E-239, (-4250.51524443977));
      Complex complex11 = Complex.valueOf((-1389.548), (-6.655106680680314E-8));
      Complex complex12 = complex11.pow(complex8);
      complex1.abs();
      complex9.equals(complex5);
      complex4.hashCode();
      complex12.divide((-719.6611480475));
      complex2.multiply(2459);
      Complex complex13 = new Complex(Double.NaN);
      complex13.sqrt1z();
      try { 
        complex1.nthRoot((-1277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,277
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = new Complex((-4332.0));
      complex0.INF.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply((-4332.0));
      complex2.readResolve();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex1.pow(complex2);
      Complex complex6 = complex5.cosh();
      complex0.abs();
      Complex complex7 = complex4.pow(6.72263245071747E-8);
      complex5.subtract(6.72263245071747E-8);
      Complex complex8 = complex6.subtract(4332.0);
      Complex complex9 = complex7.multiply(6.72263245071747E-8);
      complex8.readResolve();
      Complex complex10 = new Complex(5454.378382556661, (-584.0779));
      complex2.equals(complex10);
      Complex.valueOf((-4332.0), (-584.0779));
      Complex complex11 = Complex.valueOf((-584.0779));
      complex11.isInfinite();
      complex2.getReal();
      complex7.log();
      complex9.divide(80.0);
      complex1.add(complex3);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = new Complex((-1108.15));
      Complex complex1 = complex0.sqrt1z();
      complex1.getField();
      complex1.sqrt();
      Complex complex2 = new Complex((-318.30462));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(2793.639146, 4059.929708009377);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.sqrt();
      complex2.toString();
      Complex complex5 = complex4.cosh();
      complex4.pow(complex0);
      Complex complex6 = complex0.cosh();
      complex0.abs();
      complex0.pow(1519.572749);
      Complex complex7 = complex0.subtract(4059.929708009377);
      complex4.subtract(2793.639146);
      Complex complex8 = complex3.multiply(2793.639146);
      complex1.ZERO.sqrt();
      complex7.readResolve();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 2793.639146);
      complex9.equals(complex8);
      Complex.valueOf(1.083371639251709, (-3.35274786523516E267));
      complex1.isInfinite();
      complex8.getReal();
      Complex complex10 = complex5.log();
      complex7.multiply((-1));
      Complex complex11 = complex10.divide((-1.0));
      complex7.add(complex11);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.371698260307312, 0.371698260307312);
      Complex.valueOf((-1.0), (-1496.660232102));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sqrt();
      complex2.toString();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex1.pow(complex2);
      complex4.cosh();
      complex4.abs();
      complex2.pow((-5302.05874312626));
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.subtract(0.6480542736638855);
      Complex complex8 = complex5.multiply((-1.0));
      complex4.readResolve();
      Complex complex9 = new Complex((-1974.997), 0.371698260307312);
      complex8.equals(complex9);
      Complex.valueOf((-3.35274786523516E267), (-5302.05874312626));
      complex8.isInfinite();
      complex2.getReal();
      complex8.log();
      complex6.divide((-5302.05874312626));
      Complex complex10 = Complex.ZERO;
      complex7.add(complex10);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex0.abs();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.cosh();
      complex0.pow(2663.0);
      Complex complex4 = complex3.tanh();
      complex1.cos();
      Complex.valueOf((-2727.1891912783303));
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.ONE;
      complex8.readResolve();
      complex1.getReal();
      complex6.hashCode();
      complex6.subtract(complex2);
      Complex complex9 = complex1.acos();
      complex5.isInfinite();
      complex2.toString();
      complex4.getArgument();
      complex7.abs();
      complex0.asin();
      Complex.valueOf(Double.NaN, 2663.0);
      complex4.pow(1093.213);
      Complex complex10 = new Complex(Double.NaN, Double.NaN);
      complex10.isNaN();
      Complex.valueOf(1093.213, 1317.6423528135508);
      Complex complex11 = Complex.ZERO;
      complex9.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1315.9252011, 1.1541756557557508E254);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.sqrt();
      complex2.toString();
      complex0.cosh();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.pow(complex1);
      complex3.cosh();
      complex4.abs();
      complex0.pow(1021.2523763);
      Complex complex5 = complex4.subtract(0.45969769413186023);
      Complex complex6 = complex2.subtract((-1.0));
      Complex complex7 = complex4.multiply(4059.929708009377);
      complex3.readResolve();
      Complex complex8 = new Complex(3906.9179834034603, Double.NaN);
      Object object0 = new Object();
      complex5.equals(object0);
      Complex.valueOf(1.1541756557557508E254, 0.45969769413186023);
      complex5.isInfinite();
      Complex complex9 = Complex.ONE;
      complex9.getReal();
      Complex complex10 = new Complex((-3.35274786523516E267), 2563.056376507343);
      Complex complex11 = complex10.log();
      complex6.divide((-6081.5));
      complex11.add(complex7);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sinh();
      Complex complex1 = Complex.valueOf(2793.639146, 4059.929708009377);
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.sqrt();
      complex1.toString();
      complex3.cosh();
      complex3.pow(complex0);
      complex0.cosh();
      complex0.abs();
      complex0.pow(1519.572749);
      Complex complex4 = complex0.subtract(4059.929708009377);
      complex3.subtract(2793.639146);
      Complex complex5 = complex2.multiply(2793.639146);
      complex5.subtract(complex1);
      complex2.acos();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex6.isInfinite();
      complex3.toString();
      complex4.getArgument();
      complex6.abs();
      Complex complex7 = Complex.valueOf(3498.37154003);
      complex7.asin();
      Complex.valueOf((-1632280.311039752), 4235.716994);
      complex1.pow(Double.NaN);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.I.acos();
      Complex complex6 = complex5.ZERO.cosh();
      complex4.toString();
      complex4.cosh();
      complex0.pow(complex4);
      Complex complex7 = complex0.cosh();
      complex3.abs();
      complex3.hashCode();
      Complex complex8 = complex3.subtract(Double.NaN);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex6.exp();
      complex4.sqrt();
      complex6.exp();
      complex0.ONE.createComplex(Double.NaN, 678.344);
      Complex.valueOf((-2727.1891912783303));
      complex5.subtract(Double.POSITIVE_INFINITY);
      complex2.add(Double.NaN);
      Complex complex11 = Complex.valueOf(1654.092121958537, 1.8813735870195427);
      complex1.multiply(complex11);
      complex8.toString();
      complex7.pow(complex8);
      complex10.divide(1167.035189822);
      complex5.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.371698260307312, 0.371698260307312);
      complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.cosh();
      Complex.valueOf(2663.0, 2.3703896609663678E-8);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex0.INF.sqrt();
      complex4.ONE.toString();
      Complex complex5 = complex4.INF.cosh();
      complex5.NaN.pow(complex2);
      Complex complex6 = complex5.I.cosh();
      complex0.abs();
      complex6.hashCode();
      complex0.subtract(0.371698260307312);
      Complex complex7 = Complex.NaN;
      complex7.exp();
      complex5.sqrt();
      complex7.exp();
      Complex.valueOf(330.1482);
      complex0.subtract(2663.0);
      Complex.valueOf((-1265.2606236508), Double.NaN);
      complex4.pow(2663.0);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.371698260307312, 0.371698260307312);
      complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.cosh();
      Complex.valueOf(2663.0, 2.3703896609663678E-8);
      complex1.ZERO.cosh();
      Complex complex3 = complex0.INF.sqrt();
      complex3.ONE.toString();
      Complex complex4 = complex3.INF.cosh();
      complex4.NaN.pow(complex2);
      Complex complex5 = complex4.I.cosh();
      complex0.abs();
      complex5.hashCode();
      Complex complex6 = complex0.subtract(0.371698260307312);
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex7.exp();
      complex4.sqrt();
      Complex complex9 = new Complex(919.3, (-3917.095976593));
      Complex complex10 = Complex.valueOf(217.85665259426443, 1.8737273216247559);
      complex10.pow(complex8);
      complex1.abs();
      Object object0 = new Object();
      complex3.isInfinite();
      complex9.divide(2139.0996788978114);
      complex1.multiply(393646);
      complex6.sqrt1z();
      try { 
        complex1.nthRoot((-1277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,277
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex6.ZERO.cosh();
      complex5.ONE.getField();
      complex1.pow(complex5);
      complex4.I.divide(complex0);
      complex4.toString();
      complex4.atan();
      Complex complex8 = complex4.asin();
      complex8.negate();
      Complex complex9 = complex8.I.divide(complex5);
      complex9.ZERO.conjugate();
      complex8.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex10 = complex5.cos();
      complex10.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex0.sinh();
      complex11.I.abs();
      complex11.exp();
      Complex.valueOf((-864.531295415));
      Complex complex12 = Complex.I;
      complex12.subtract(2.0);
      complex7.add(Double.POSITIVE_INFINITY);
      complex9.multiply(complex12);
      complex1.toString();
      complex11.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = Complex.valueOf(0.0, (-3518.5903074509233));
      Complex complex4 = complex0.NaN.pow(0.0);
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = complex5.NaN.cos();
      Complex complex7 = Complex.valueOf(15.23275);
      Complex complex8 = complex7.I.sqrt();
      complex8.ONE.reciprocal();
      complex0.readResolve();
      complex1.getReal();
      complex3.hashCode();
      Complex complex9 = complex3.ZERO.subtract(complex7);
      Complex complex10 = complex9.ONE.acos();
      complex3.isInfinite();
      complex6.nthRoot(5764);
      Complex complex11 = complex10.multiply((-1455));
      Complex complex12 = Complex.I;
      complex8.add(complex12);
      complex12.ZERO.hashCode();
      complex2.add((-2.7745308444923387));
      complex12.acos();
      complex4.sinh();
      complex10.negate();
      complex11.readResolve();
      complex12.createComplex(978.899701, (-2.7745308444923387));
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex1.I.acos();
      complex4.ZERO.cosh();
      complex2.ONE.getField();
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.valueOf(20.0, 20.0);
      complex5.getField();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex7.asin();
      complex0.sinh();
      complex3.hashCode();
      Complex complex9 = complex6.subtract(20.0);
      complex8.exp();
      complex9.sqrt();
      complex2.exp();
      Complex complex10 = Complex.NaN;
      complex10.subtract(Double.POSITIVE_INFINITY);
      complex6.add(1892.52603);
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-301.1803939261644), 0.0);
      complex0.INF.getField();
      Complex complex1 = complex0.createComplex((-301.1803939261644), 1.0);
      Complex complex2 = complex1.divide(complex0);
      complex2.toString();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.divide(complex0);
      Complex complex7 = complex6.divide(0.0);
      complex6.cos();
      complex7.add(1.0);
      complex0.sinh();
      complex7.abs();
      Complex complex8 = new Complex((-1.0), (-334.171644451297));
      complex8.pow(complex4);
      complex5.abs();
      complex1.equals("(1.0, -0.003320269247822134)");
      complex2.divide(2033.4);
      complex2.multiply(4980);
      complex8.sqrt1z();
      Complex complex9 = Complex.I;
      complex9.createComplex(0.0, 867.0059580874496);
      Complex.valueOf((-301.1803939261644), 1396.6629427);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = Complex.valueOf(0.0, (-3518.5903074509233));
      Complex complex4 = Complex.valueOf((-1942.6847203885), 1017.2);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.sqrt();
      complex5.toString();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex5.pow(complex4);
      complex1.cosh();
      complex2.abs();
      Complex complex9 = complex2.pow(1759091.2097216407);
      Complex complex10 = complex3.subtract((-385.650066461));
      complex1.subtract(3518.5903074509233);
      Complex complex11 = new Complex((-8437606.305484153), 0.0);
      complex11.multiply((-3518.5903074509233));
      complex0.readResolve();
      complex9.equals(complex6);
      Complex.valueOf((-2831.014319684577), (-387.16));
      complex7.isInfinite();
      complex4.getReal();
      complex8.log();
      Complex complex12 = Complex.I;
      complex12.divide(611.8670918232534);
      complex10.add(complex1);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(2793.639146, 4059.929708009377);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.sqrt();
      complex2.toString();
      Complex complex5 = complex4.cosh();
      complex4.pow(complex0);
      complex0.cosh();
      complex0.abs();
      complex0.pow(1519.572749);
      Complex complex6 = complex0.subtract(4059.929708009377);
      complex4.subtract(2793.639146);
      Complex complex7 = complex3.multiply(2793.639146);
      complex6.readResolve();
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 2793.639146);
      complex8.equals(complex7);
      Complex.valueOf(1.083371639251709, (-3.35274786523516E267));
      complex1.isInfinite();
      complex7.getReal();
      Complex complex9 = complex5.log();
      Complex complex10 = complex9.divide((-1.0));
      complex6.add(complex10);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3518.5903074509233), (-3518.5903074509233));
      Complex complex1 = complex0.pow(5.790291758828013E133);
      Complex complex2 = Complex.valueOf(5.790291758828013E133);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.reciprocal();
      complex1.getReal();
      complex3.hashCode();
      complex3.subtract(complex0);
      Complex complex5 = complex4.acos();
      complex5.getArgument();
      complex2.abs();
      complex2.asin();
      Complex complex6 = Complex.valueOf(3339.5, -0.0);
      complex6.pow((-3518.5903074509233));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = Complex.valueOf(1704.0, 1704.0);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex4.sqrt();
      complex5.toString();
      Complex complex6 = complex1.cosh();
      complex3.pow(complex0);
      Complex complex7 = complex3.cosh();
      complex7.abs();
      Complex complex8 = complex2.pow((-161.914));
      Complex complex9 = complex6.subtract((-2831.014319684577));
      complex9.subtract((-1450.8588339848582));
      complex7.multiply(2.3703896609663678E-8);
      complex9.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex10 = Complex.valueOf(1.7768193998956956, 0.0);
      complex8.isInfinite();
      complex3.getReal();
      complex3.log();
      Complex complex11 = Complex.ONE;
      complex11.divide(3518.5903074509233);
      complex10.add(complex0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-301.1803939261644), 0.0);
      complex0.INF.getField();
      Complex complex1 = complex0.createComplex(0.0, (-2920.3282238765));
      Complex complex2 = Complex.valueOf((-2920.3282238765), (-301.1803939261644));
      complex0.getField();
      Complex complex3 = complex2.asin();
      complex0.I.divide(complex3);
      Complex complex4 = complex2.sinh();
      complex0.hashCode();
      complex1.ONE.tan();
      Complex complex5 = complex3.subtract((-696.69606));
      complex5.exp();
      complex4.sqrt();
      complex2.exp();
      Complex.valueOf((-696.69606));
      complex0.subtract((-1822.373893));
      complex0.add(8.664192447770897E-255);
      Complex complex6 = Complex.valueOf(0.0, (-301.1803939261644));
      complex1.multiply(complex6);
      complex5.toString();
      Complex.valueOf(8.664192447770897E-255, 1.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.add(complex0);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.pow((-2628.82859));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.cos();
      Complex complex6 = Complex.valueOf((-388.07));
      complex6.sqrt();
      Complex complex7 = Complex.I;
      complex7.readResolve();
      complex7.getReal();
      complex2.hashCode();
      Complex complex8 = new Complex(1110.31);
      complex8.subtract(complex4);
      Complex complex9 = complex1.acos();
      complex4.isInfinite();
      complex4.toString();
      complex5.getArgument();
      Complex complex10 = new Complex((-3518.5903074509233), 0.0);
      complex10.abs();
      complex0.asin();
      Complex complex11 = Complex.I;
      complex11.pow((-3518.5903074509233));
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex((-4332.0));
      complex0.INF.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply((-4332.0));
      complex2.readResolve();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.ZERO.atan();
      Complex complex5 = Complex.valueOf((-4332.0));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex2.ZERO.log();
      Complex complex8 = complex2.add(complex6);
      Complex complex9 = complex8.ONE.atan();
      Complex complex10 = complex9.NaN.subtract(0.0);
      complex10.ONE.subtract(complex4);
      Complex complex11 = complex10.I.divide(complex7);
      Complex complex12 = complex9.INF.multiply(991);
      Complex complex13 = Complex.I;
      Complex complex14 = Complex.ZERO;
      complex5.readResolve();
      complex1.sqrt1z();
      complex13.getField();
      complex8.subtract(complex12);
      complex11.divide(2438.79);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      Complex complex1 = complex0.reciprocal();
      complex1.readResolve();
      Complex complex2 = Complex.ONE;
      complex2.getReal();
      complex0.hashCode();
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = Complex.valueOf(1.0, (-2727.1891912783303));
      Complex complex5 = complex4.acos();
      complex4.isInfinite();
      complex5.toString();
      complex4.getArgument();
      complex3.abs();
      complex2.asin();
      complex1.pow(2.3049492079013518E-7);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.I.acos();
      complex5.ZERO.cosh();
      complex4.ONE.getField();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.pow(complex4);
      complex3.I.divide(complex0);
      complex3.toString();
      Complex complex6 = complex3.atan();
      complex3.asin();
      complex6.sqrt1z();
      complex5.tan();
      complex6.asin();
      Complex complex7 = Complex.I;
      complex1.equals(complex7);
      Complex complex8 = complex5.divide((-20.0));
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-301.1803939261644), 0.0);
      complex0.INF.getField();
      Complex complex1 = complex0.createComplex((-301.1803939261644), 1.0);
      Complex complex2 = Complex.valueOf(1.0, 0.0);
      complex2.getField();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex1.sinh();
      complex3.pow((-3.538563171970534E-268));
      Complex complex5 = Complex.I;
      complex5.subtract(1.0);
      complex1.subtract((-90707.62968551957));
      Complex complex6 = new Complex((-90707.62968551957), (-3.538563171970534E-268));
      complex6.multiply((-1.7658271111516935E-8));
      complex4.readResolve();
      Complex complex7 = new Complex((-2831.014319684577), 90707.62968551957);
      complex3.equals(complex7);
      Complex.valueOf(20.0, (-2417.0));
      complex0.isInfinite();
      complex6.getReal();
      Complex complex8 = complex0.log();
      complex4.divide(0.0);
      Complex complex9 = Complex.ZERO;
      complex9.add(complex8);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.log();
      complex2.subtract((-4250.51524443977));
      complex0.tan();
      complex1.INF.atan();
      complex0.acos();
      Complex complex3 = complex1.acos();
      complex2.acos();
      Complex complex4 = complex0.pow((-13.298));
      complex4.ZERO.getArgument();
      complex4.I.getField();
      complex3.createComplex(20.0, (-743.2702810720951));
      complex2.pow((-256.7005134));
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      complex1.NaN.nthRoot(1);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.NaN.sin();
      Complex complex4 = complex1.sinh();
      complex0.NaN.getField();
      complex0.getImaginary();
      Complex complex5 = complex1.ONE.multiply(complex4);
      complex5.I.multiply(1);
      complex1.ONE.hashCode();
      complex1.nthRoot(1);
      complex2.conjugate();
      complex1.I.reciprocal();
      complex3.add(408.624);
      complex1.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex0.log();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-677.8820780788155));
      Complex complex1 = complex0.ZERO.multiply((-677.8820780788155));
      Complex complex2 = new Complex((-677.8820780788155), (-677.8820780788155));
      Complex complex3 = complex2.NaN.multiply(complex0);
      complex3.INF.add(complex1);
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex4.NaN.reciprocal();
      Complex complex6 = complex0.subtract(complex2);
      complex6.ZERO.multiply((-677.8820780788155));
      complex6.readResolve();
      Complex complex7 = complex6.I.multiply(1301);
      complex7.ZERO.add((-677.8820780788155));
      complex4.getImaginary();
      Complex complex8 = new Complex(-0.0);
      complex8.ZERO.sin();
      complex0.multiply(complex8);
      complex0.subtract(complex5);
      complex2.abs();
      Complex.valueOf(2425.775881);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 1579.9621058375);
      Complex complex1 = new Complex(826.5403711732934, (-1.0));
      complex0.INF.getField();
      complex0.I.multiply(complex1);
      Complex complex2 = Complex.valueOf(3059.98);
      complex2.INF.readResolve();
      complex2.I.divide(0.0);
      Complex complex3 = complex0.NaN.divide(complex2);
      complex3.I.divide(826.5403711732934);
      complex3.INF.readResolve();
      Complex complex4 = complex0.multiply(1064);
      Complex complex5 = Complex.valueOf(1579.9621058375);
      complex5.sqrt1z();
      Complex complex6 = complex4.reciprocal();
      Complex.valueOf(1579.9621058375);
      complex6.tanh();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = 330.0;
      Complex complex0 = Complex.valueOf(330.0);
      Complex complex1 = Complex.valueOf(330.0, 330.0);
      int int0 = 3563;
      Complex complex2 = complex0.NaN.negate();
      complex2.I.getField();
      complex1.I.nthRoot(3563);
      Complex complex3 = complex0.tanh();
      complex3.ZERO.readResolve();
      int int1 = 2754;
      // Undeclared exception!
      complex0.nthRoot(2754);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      complex1.cosh();
      Complex complex2 = complex1.asin();
      complex2.ONE.hashCode();
      complex0.getField();
      complex2.INF.abs();
      complex1.sqrt1z();
      complex2.getField();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.pow(352.462126587375);
      Complex complex2 = complex0.log();
      Complex complex3 = complex1.ZERO.subtract((-4250.51524443977));
      Complex complex4 = complex3.ZERO.sinh();
      complex4.I.tan();
      complex2.NaN.acos();
      Complex complex5 = complex0.I.acos();
      complex5.INF.acos();
      complex1.pow((-2.1596593091833788E-8));
      complex0.createComplex(2002.0304050732, 6.283185307179586);
      complex1.pow((-1686.7614409566627));
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-256.7005134));
      Complex complex1 = Complex.valueOf((-256.7005134));
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ONE.abs();
      Complex complex3 = complex0.createComplex((-256.7005134), (-256.7005134));
      complex0.getField();
      complex3.ZERO.asin();
      complex3.NaN.sqrt1z();
      Complex complex4 = complex3.INF.conjugate();
      complex4.ONE.reciprocal();
      Complex.valueOf(1.0, 1.0);
      complex4.ONE.divide(complex3);
      complex0.getImaginary();
      Complex complex5 = new Complex(0.0);
      complex1.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-301.1803939261644), 0.0);
      complex0.INF.getField();
      Complex complex1 = complex0.createComplex((-301.1803939261644), 1.0);
      Complex complex2 = Complex.valueOf(1.0, 0.0);
      complex2.getField();
      complex1.asin();
      Complex complex3 = complex1.sinh();
      complex0.hashCode();
      Complex complex4 = complex3.subtract(0.0);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex2.sqrt();
      Complex complex7 = complex6.ZERO.exp();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.subtract(0.0);
      complex5.add(0.0);
      try { 
        complex7.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.ONE.multiply(0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.I.multiply(complex2);
      Complex complex5 = complex4.ONE.multiply(complex1);
      complex5.INF.sin();
      Complex complex6 = complex4.INF.sinh();
      Complex complex7 = complex2.add((double) 0);
      Complex complex8 = complex0.add(complex7);
      complex2.NaN.subtract(complex0);
      Complex complex9 = complex8.I.log();
      complex0.ONE.multiply((-27.8));
      complex1.asin();
      Complex.valueOf(0.34508460760116577);
      complex6.abs();
      complex8.INF.conjugate();
      complex3.tan();
      complex1.NaN.toString();
      complex1.isInfinite();
      Complex complex10 = complex2.negate();
      int int0 = 3713;
      complex10.readResolve();
      try { 
        complex9.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.ZERO.cos();
      Complex complex5 = complex4.tan();
      complex5.NaN.getArgument();
      complex4.NaN.cos();
      complex3.isNaN();
      Complex complex6 = complex2.sin();
      complex1.getArgument();
      complex0.ONE.getArgument();
      Complex complex7 = complex2.multiply(1844.0);
      complex3.getReal();
      Complex complex8 = complex2.divide(complex7);
      Complex complex9 = complex8.add(0.0);
      complex7.ZERO.subtract(complex2);
      Complex complex10 = complex7.ONE.multiply(complex9);
      Complex complex11 = complex8.multiply(594);
      complex11.NaN.multiply(complex9);
      Complex complex12 = complex0.subtract(complex1);
      Complex complex13 = complex12.sqrt();
      complex6.abs();
      complex13.tanh();
      Complex complex14 = complex3.divide(complex2);
      complex14.ONE.hashCode();
      complex9.NaN.getField();
      complex0.multiply(complex9);
      Complex.valueOf((-756.76295775), (double) 594);
      complex14.atan();
      complex10.multiply(complex4);
      complex11.acos();
      Complex.valueOf(1844.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 179.53);
      Complex complex1 = complex0.acos();
      complex1.INF.getField();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex0.NaN.subtract(complex1);
      complex3.INF.hashCode();
      Complex.valueOf(0.0, 0.0);
      complex2.NaN.sinh();
      complex2.INF.abs();
      complex0.NaN.multiply(0.0);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex4.atan();
      complex6.NaN.divide(2771.4704648);
      complex6.ONE.abs();
      complex1.acos();
      complex2.abs();
      Complex complex7 = complex0.sqrt();
      complex7.isInfinite();
      complex4.equals(complex2);
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.I.add(complex1);
      Complex.valueOf(9.113713162029408E267);
      Complex complex3 = complex0.I.acos();
      complex3.NaN.getArgument();
      Complex complex4 = complex2.ZERO.tanh();
      Complex complex5 = complex2.I.add(Double.NaN);
      double double0 = Double.NaN;
      Complex.valueOf(Double.NaN);
      complex5.INF.tan();
      complex4.ZERO.sqrt1z();
      complex1.toString();
      Complex complex6 = null;
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = new Complex(2002.42, 2002.42);
      Complex complex1 = complex0.ZERO.atan();
      complex1.ZERO.toString();
      complex1.getArgument();
      Complex complex2 = complex0.ONE.exp();
      Complex complex3 = complex2.subtract(complex0);
      complex0.ONE.divide(complex3);
      Complex complex4 = Complex.valueOf(0.0, 2028.2962307969);
      Complex complex5 = complex3.sqrt1z();
      complex5.I.add(complex0);
      complex0.ONE.sin();
      complex0.readResolve();
      complex2.sqrt1z();
      Complex complex6 = Complex.valueOf(2002.42);
      complex6.INF.reciprocal();
      Complex complex7 = complex6.ZERO.pow(complex4);
      complex7.asin();
      complex2.equals("*lJz`");
      complex0.ZERO.getField();
      complex0.getField();
      complex2.exp();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.equals(complex0);
      Complex complex2 = complex1.atan();
      complex2.I.reciprocal();
      complex0.ZERO.subtract((-3552.0));
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.exp();
      complex1.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.atan();
      complex0.nthRoot(884);
      complex0.INF.getField();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.divide(602.1717467209569);
      Complex complex4 = complex3.NaN.sinh();
      complex4.NaN.readResolve();
      complex3.INF.multiply(506.5096878);
      complex0.multiply(complex3);
      Complex complex5 = complex4.subtract((double) 884);
      Complex complex6 = complex5.NaN.createComplex(884, 506.5096878);
      complex6.pow((-1201.059186014));
      complex1.sqrt();
      complex6.reciprocal();
      complex6.sqrt();
      complex2.conjugate();
      complex0.add((-1201.059186014));
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.subtract((-46.1));
      Complex complex2 = complex1.ZERO.tanh();
      complex2.ONE.pow((-46.1));
      complex0.tanh();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(1315.9252011, 1.1541756557557508E254);
      complex0.INF.sqrt();
      complex0.cos();
      complex0.add((-1028.9459011636));
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(0.6389714479446411, 0.0);
      complex0.ONE.exp();
      complex0.abs();
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(128.0742386623998);
      Complex complex3 = complex2.ZERO.pow(128.0742386623998);
      complex1.add(0.6389714479446411);
      complex3.exp();
      Complex.valueOf((-1632.86489129), (-1632.86489129));
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.add((-1493.9487));
      complex1.INF.readResolve();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.ZERO.add((-1493.9487));
      Complex.valueOf((-1493.9487), (-20.0));
      Complex complex4 = Complex.valueOf((-1493.9487));
      complex4.INF.add((-20.0));
      Complex complex5 = Complex.valueOf((-1.0));
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = Complex.valueOf((-3386.9128));
      Complex complex8 = complex7.I.add((-1.0));
      Complex.valueOf(0.0);
      complex5.INF.cosh();
      complex0.isInfinite();
      complex7.exp();
      Complex complex9 = complex5.pow(complex3);
      Complex complex10 = Complex.I;
      complex6.divide(complex10);
      Complex complex11 = complex4.sqrt();
      complex11.I.acos();
      complex9.nthRoot(1);
      complex8.divide((-217.00726));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(7.054443447243064E-8, 1.9540846347808838);
      Complex complex1 = Complex.valueOf(7.054443447243064E-8);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.ONE.atan();
      complex2.NaN.abs();
      complex0.getArgument();
      Complex complex4 = complex3.divide(complex1);
      Complex complex5 = Complex.valueOf(1.9540846347808838);
      complex5.NaN.abs();
      Complex.valueOf(Double.NaN);
      Complex complex6 = complex2.negate();
      Complex complex7 = complex6.ZERO.multiply(complex4);
      Complex complex8 = complex1.pow(complex0);
      complex8.getArgument();
      Complex.valueOf(3538.4205, 0.0);
      complex1.hashCode();
      try { 
        complex7.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.371698260307312, 0.371698260307312);
      complex0.ONE.abs();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.cosh();
      Complex.valueOf(2663.0, 2.3703896609663678E-8);
      Complex complex3 = complex1.ZERO.cosh();
      Complex complex4 = complex0.INF.sqrt();
      complex4.ONE.toString();
      Complex complex5 = complex4.INF.cosh();
      complex5.NaN.pow(complex2);
      complex5.I.cosh();
      complex0.abs();
      Complex complex6 = complex0.pow((-2831.014319684577));
      complex6.NaN.subtract((-2831.014319684577));
      Complex complex7 = complex6.subtract(0.371698260307312);
      complex0.multiply(0.371698260307312);
      Object object0 = complex7.readResolve();
      complex1.equals(object0);
      Complex complex8 = Complex.valueOf(0.0, (-104.91102287964));
      complex1.isInfinite();
      complex8.getReal();
      Complex complex9 = complex3.log();
      Complex complex10 = complex9.divide((-104.91102287964));
      complex10.add(complex3);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(0.0);
      Object object0 = complex0.readResolve();
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex1.NaN.tan();
      complex3.I.asin();
      complex0.equals(object0);
      complex1.divide(0.0);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5041985511779785);
      Complex complex1 = complex0.NaN.sqrt();
      complex1.ONE.sqrt1z();
      Complex complex2 = complex0.add((-1435.519691));
      complex0.NaN.getField();
      Complex complex3 = complex2.ONE.sqrt();
      Complex complex4 = complex3.I.sinh();
      complex4.ZERO.divide((-6.75421764491544E-8));
      Complex complex5 = complex4.subtract(complex1);
      complex5.ZERO.acos();
      complex1.readResolve();
      complex0.getImaginary();
      Complex complex6 = complex2.pow(0.0);
      complex6.ONE.exp();
      complex2.sqrt();
      Complex.valueOf((-154.984));
      Complex.valueOf((-1435.519691));
      Complex.valueOf(1.0, 1.0);
      Complex.valueOf((-1.0), (-2368.45));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-1847.31));
      Complex complex1 = complex0.ONE.conjugate();
      complex1.INF.acos();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = Complex.valueOf((-1847.31), (-1847.31));
      Complex complex5 = Complex.ZERO;
      complex5.I.pow(complex3);
      Complex complex6 = complex4.divide(complex5);
      complex3.add((-1847.31));
      complex6.multiply(704);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-2462.0), (-2462.0));
      complex0.NaN.readResolve();
      Complex complex1 = complex0.ONE.createComplex(8.72220314694275E58, 0.0);
      complex1.NaN.sqrt1z();
      Complex complex2 = complex0.divide(0.0);
      complex0.divide(4.544122762558404E223);
      Complex complex3 = complex2.sqrt();
      complex2.cosh();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex(1.0618494853096868E-7);
      Complex complex1 = complex0.I.divide((-848.77760762804));
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex0.I.asin();
      complex3.INF.add((-7.126913872617518E298));
      Complex complex4 = complex0.asin();
      Complex complex5 = complex0.pow((-848.77760762804));
      complex1.INF.asin();
      complex4.getImaginary();
      complex2.tan();
      try { 
        complex5.nthRoot((-3337));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,337
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.sin();
      complex0.cosh();
      Complex complex1 = complex0.NaN.add(0.0);
      complex0.sqrt1z();
      Complex complex2 = complex0.subtract(1.4754809136835937E-8);
      complex1.cosh();
      complex2.nthRoot(1025);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = new Complex((-4332.0));
      complex0.INF.getField();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.multiply((-4332.0));
      complex2.readResolve();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.ZERO.atan();
      Complex.valueOf((-4332.0));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.ZERO.log();
      Complex complex7 = complex2.add(complex5);
      Complex complex8 = complex7.ONE.atan();
      Complex complex9 = complex8.NaN.subtract(0.0);
      complex9.ONE.subtract(complex4);
      complex9.I.divide(complex6);
      complex8.INF.multiply(991);
      Complex complex10 = complex1.sqrt();
      Complex complex11 = Complex.ZERO;
      complex10.divide(complex11);
      complex5.I.abs();
      int int0 = 5764;
      // Undeclared exception!
      complex5.nthRoot(5764);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = new Complex(2.1524391174316406, 0.0);
      Complex complex1 = Complex.valueOf(1976.6623819396711);
      complex0.INF.divide(complex1);
      complex0.readResolve();
      Complex complex2 = complex1.atan();
      Complex complex3 = Complex.ONE;
      complex2.subtract(complex3);
      complex1.sin();
      Complex.valueOf(2.1524391174316406);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex1.INF.sqrt();
      Complex complex2 = Complex.valueOf(506.0, (double) 108);
      Complex complex3 = complex2.INF.multiply(1);
      Complex complex4 = complex3.ZERO.multiply(complex1);
      complex0.nthRoot(108);
      Complex complex5 = complex1.negate();
      complex5.getReal();
      Complex complex6 = complex3.negate();
      Complex complex7 = complex6.multiply((-1467.9697));
      Complex complex8 = complex7.NaN.multiply((double) 1);
      complex6.ZERO.getArgument();
      Complex complex9 = complex1.reciprocal();
      complex9.INF.getField();
      complex1.multiply(2340.294);
      complex1.multiply(1);
      complex8.negate();
      complex8.sqrt();
      Complex complex10 = complex4.pow(complex5);
      complex10.ONE.sqrt1z();
      complex8.isInfinite();
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.negate();
      complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf(0.0, (-3518.5903074509233));
      Complex complex3 = complex0.NaN.pow(0.0);
      Complex complex4 = complex2.I.tanh();
      complex4.NaN.cos();
      Complex complex5 = Complex.valueOf(15.23275);
      Complex complex6 = complex5.I.sqrt();
      Complex complex7 = complex6.ONE.reciprocal();
      complex0.readResolve();
      complex1.getReal();
      complex2.hashCode();
      Complex complex8 = complex2.ZERO.subtract(complex5);
      complex8.ONE.acos();
      complex2.isInfinite();
      complex6.toString();
      complex4.getArgument();
      complex7.abs();
      complex3.asin();
      complex2.pow((-3518.5903074509233));
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cosh();
      complex0.ZERO.add(complex1);
      Complex complex2 = complex1.ZERO.sinh();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = Complex.ZERO;
      complex3.INF.divide(complex4);
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1819.0463171468398, 1819.0463171468398);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.I.acos();
      Complex complex7 = complex6.ZERO.cosh();
      assertEquals((-0.8813735870195429), complex6.getImaginary(), 0.01);
      
      ComplexField complexField0 = complex5.ONE.getField();
      Complex complex8 = complex1.pow(complex5);
      Complex complex9 = complex4.I.divide(complex0);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertTrue(complex9.equals((Object)complex7));
      
      String string0 = complex4.toString();
      assertEquals("(NaN, NaN)", string0);
      
      Complex complex10 = complex4.atan();
      Complex complex11 = complex4.asin();
      Complex complex12 = complex11.negate();
      Complex complex13 = complex11.I.divide(complex5);
      Complex complex14 = complex11.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex15 = complex5.cos();
      Complex complex16 = complex15.ONE.add(Double.POSITIVE_INFINITY);
      assertTrue(complex16.isInfinite());
      
      Complex complex17 = complex0.sinh();
      complex17.I.abs();
      Complex complex18 = new Complex(2.6222628001695826E-8, (-2735.604194));
      Complex complex19 = complex17.pow(complex18);
      assertEquals(Double.POSITIVE_INFINITY, complex19.getImaginary(), 0.01);
      
      complex8.abs();
      complex8.equals(complexField0);
      assertSame(complex8, complex12);
      
      Complex complex20 = complex10.divide(Double.POSITIVE_INFINITY);
      Complex complex21 = complex17.multiply((-1277));
      assertEquals(-0.0, complex21.getReal(), 0.01);
      assertEquals((-1074.5584475996839), complex21.getImaginary(), 0.01);
      
      Complex complex22 = complex20.sqrt1z();
      assertSame(complex22, complex13);
      
      complex14.createComplex(21.3, (-479.046));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.8813735870195428, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertSame(complex11, complex15);
      assertNotSame(complex11, complex4);
      
      Complex complex23 = Complex.valueOf((double) (-1277), 2.0);
      assertFalse(complex23.equals((Object)complex21));
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.multiply((-1.0));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.NaN.pow(complex4);
      assertSame(complex6, complex4);
      
      Complex complex7 = complex1.sqrt1z();
      complex7.I.multiply(complex3);
      Complex complex8 = complex0.NaN.subtract((-1.0));
      assertSame(complex8, complex5);
      
      complex0.equals("");
      Complex complex9 = complex7.atan();
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.9176693484649867, complex9.getReal(), 0.01);
      assertSame(complex0, complex2);
  }

  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Complex complex0 = new Complex((-318.30462));
      Complex complex1 = new Complex((-318.30462), 1110.31);
      complex1.INF.getArgument();
      Complex complex2 = complex1.ONE.pow(0.7853981633974483);
      Complex complex3 = complex1.INF.conjugate();
      Complex complex4 = complex3.ONE.atan();
      Complex complex5 = complex2.NaN.pow(0.7853981633974483);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.negate();
      complex7.ONE.multiply(complex6);
      Object object0 = complex4.readResolve();
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      
      Complex complex8 = complex2.sqrt1z();
      complex8.ZERO.getField();
      Complex complex9 = complex1.subtract(complex0);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      Complex complex10 = complex7.divide(2438.79);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertTrue(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)object0));
      assertEquals(-0.0, complex10.getReal(), 0.01);
  }
}
