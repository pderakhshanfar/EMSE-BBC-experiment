/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 14:16:22 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-582.92387301), 20.0);
      Complex complex1 = complex0.negate();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.I.conjugate();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-1132.182017), 856.7);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.I.negate();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.acos();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2317.41);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2317.41);
      Complex complex1 = complex0.INF.log();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6664261817932129);
      Complex complex1 = complex0.ZERO.createComplex(0.6664261817932129, 0.6664261817932129);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.subtract(2.2272801399230957);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.acos();
      complex1.subtract(2.2272801399230957);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.7179924024793253E227);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      Complex complex1 = complex0.I.createComplex(Double.POSITIVE_INFINITY, 2031.6645356093386);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.multiply(1391136099);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.add(complex1);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.sin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.ONE.sin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-1132.182017), 856.7);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4617.385872524165);
      Complex complex2 = complex0.divide(complex1);
      complex2.pow((-1823.492492878116));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex((-167.8741));
      complex0.pow((-167.8741));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.pow(2.0);
      complex1.pow(54.081);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex(65.12935583164, Double.POSITIVE_INFINITY);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.ZERO.negate();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex((-1132.182017), 856.7);
      Complex complex1 = complex0.sqrt1z();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-782.16));
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(1619);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.createComplex((-1779.18992357631), (-2659.590484400744));
      complex1.multiply(2178.0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.multiply((-334.322052689612));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(2.0, (-782.16));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(11.357513139186224, 11.357513139186224);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex((-9.522726334561169E100), (-9.522726334561169E100));
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-796.357));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.sqrt1z();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-782.16), (-782.16));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex(54.081, 54.081);
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(65.12935583164, Double.POSITIVE_INFINITY);
      Complex complex1 = new Complex(65.12935583164, 65.12935583164);
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-294.2202), (-294.2202));
      Complex complex1 = complex0.multiply(complex0);
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide((-8.955768055535647E-8));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide((-1616.244528));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.createComplex((-308.75911), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.createComplex(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(833.36974100296, 3217131.932423193);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-582.92387301), 20.0);
      complex0.ZERO.cosh();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.acos();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-2207.81));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-582.92387301), 20.0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.subtract(574.3848047);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2317.41);
      Complex complex1 = complex0.I.acos();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.607773690947777E18, 455.40531999);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(833.36974100296, 3217131.932423193);
      complex0.ZERO.asin();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex((-782.16));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(2103.56130589);
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      complex0.INF.add(complex1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(962.86059);
      complex0.ONE.add(complex1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.7071067811865475, (-782.16));
      complex0.add(complex0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(833.36974100296, 3217131.932423193);
      Complex complex1 = new Complex(1592.98245831877);
      Complex complex2 = complex0.pow(complex1);
      complex2.add(1592.98245831877);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.add(0.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3423.355073909));
      complex0.ONE.add((-3423.355073909));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-782.16));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.divide(complex0);
      complex2.add((-2707.060016));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2146572545));
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(23.169405153654097, 23.169405153654097);
      Complex complex1 = complex0.pow(23.169405153654097);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      complex0.nthRoot(2108495909);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3423.355073909));
      Complex complex1 = complex0.exp();
      double double0 = complex1.getReal();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(0.0);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.NaN.multiply(Double.POSITIVE_INFINITY);
      boolean boolean0 = complex1.isNaN();
      assertTrue(boolean0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.multiply(complex0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(65.12935583164, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(complex0);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertEquals(65.12935583164, complex0.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-782.16), (-782.16));
      Complex complex1 = complex0.NaN.multiply(complex0);
      assertEquals((-782.16), complex0.getImaginary(), 0.01);
      assertEquals((-782.16), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.divide(complex2);
      assertEquals(0.25, complex3.getReal(), 0.01);
      assertEquals((-0.25), complex3.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2317.41);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex0.add(complex1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2317.41, complex0.getImaginary(), 0.01);
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.NaN.add(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      double double0 = complex0.abs();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.I.abs();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex((-782.16));
      double double0 = complex0.ONE.abs();
      assertEquals((-782.16), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex((-2707.060016), Double.NaN);
      assertEquals((-2707.060016), complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 0.0);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex((-782.16));
      double double0 = complex0.getArgument();
      assertEquals(3.141592653589793, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isInfinite();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = complex0.getReal();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      double double0 = complex0.getImaginary();
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3426.7332593831343), Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.INF;
      List<Complex> list0 = complex0.nthRoot(635);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(complex0));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      List<Complex> list0 = complex1.nthRoot(314);
      assertTrue(complex0.isInfinite());
      assertTrue(list0.contains(complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-2140302820));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,140,302,820
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-888.2263229));
      Complex complex1 = Complex.valueOf((-1594.384), (-1070.73874882294));
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.tanh();
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(706.1576771, complex2.getReal(), 0.01);
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1070.73874882294, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1880.079, 1880.079);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.tanh();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertEquals(1880.079, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-888.2263229));
      Complex complex1 = complex0.tanh();
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals((-888.2263229), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.tanh();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1594.384), (-1070.73874882294));
      Complex complex1 = complex0.tan();
      assertEquals((-1070.73874882294), complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals((-1594.384), complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.386367067907521), complex1.getReal(), 0.01);
      assertEquals(2031.6645356093386, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(4617.385872524165);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sqrt();
      assertEquals(0.010406074175229396, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.sqrt();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      Complex complex1 = complex0.NaN.sin();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2031.6645356093386, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt1z();
      Complex complex2 = complex1.asin();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-888.2263229));
      Complex complex1 = complex0.NaN.acos();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertTrue(complex1.isNaN());
      assertEquals((-888.2263229), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.valueOf(11.357513139186224, 11.357513139186224);
      Complex complex1 = complex0.subtract(Double.NaN);
      assertEquals(11.357513139186224, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(11.357513139186224, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract((-782.16));
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      assertSame(complex2, complex0);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.subtract(complex0);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      assertTrue(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.multiply(Double.NaN);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.valueOf(23.169405153654097, 23.169405153654097);
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.pow((-3065.9101));
      assertSame(complex2, complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(23.169405153654097, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = new Complex(65.1293558316426, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(17);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(65.1293558316426, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.multiply(1162);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(1);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-294.2202), (-294.2202));
      Complex complex1 = complex0.multiply(1);
      assertEquals((-294.2202), complex1.getImaginary(), 0.01);
      assertEquals((-294.2202), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = new Complex(65.1293558316426, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertTrue(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1594.384), (-1070.73874882294));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ONE.multiply(complex1);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isInfinite());
      assertEquals((-1594.384), complex0.getReal(), 0.01);
      assertEquals((-1070.73874882294), complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.tan();
      complex2.hashCode();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getReal(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isNaN());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      complex1.hashCode();
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.log();
      Complex complex2 = (Complex)complex1.readResolve();
      boolean boolean0 = complex1.equals(complex2);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertEquals(1.5707963267948966, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.955768055535647E-8));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-8.955768055535647E-8), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertTrue(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sinh();
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.isNaN());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.equals("ASKW6>&u7qkm-~qROI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      boolean boolean0 = complex0.equals(complex0);
      assertTrue(boolean0);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.955768055535647E-8));
      Complex complex1 = complex0.createComplex((-8.955768055535647E-8), (-8.955768055535647E-8));
      boolean boolean0 = complex0.equals(complex1);
      assertFalse(boolean0);
      assertEquals((-8.955768055535647E-8), complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-8.955768055535647E-8), complex1.getImaginary(), 0.01);
      assertEquals((-8.955768055535647E-8), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 0.0);
      Complex complex1 = complex0.reciprocal();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.reciprocal();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-8.955768055535647E-8));
      Complex complex1 = complex0.reciprocal();
      assertEquals((-8.955768055535647E-8), complex0.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-1.1165988151980894E7), complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.valueOf(833.36974100296, 3217131.932423193);
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex1.reciprocal();
      assertEquals(3217131.932423193, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(833.36974100296, complex0.getReal(), 0.01);
      assertFalse(complex2.equals((Object)complex0));
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.valueOf(833.36974100296, 3217131.932423193);
      Complex complex1 = complex0.I.reciprocal();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(833.36974100296, complex0.getReal(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(3217131.932423193, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.pow(complex1);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(0.0);
      Complex complex2 = complex1.sinh();
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      Complex complex1 = complex0.divide(2.782158347326046);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(730.2476286304793, complex1.getReal(), 0.01);
      assertEquals(2031.6645356093386, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-888.2263229));
      Complex complex1 = complex0.NaN.divide((-2707.060016));
      assertFalse(complex0.isInfinite());
      assertEquals((-888.2263229), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex0.isNaN());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 2.0);
      Complex complex1 = complex0.ZERO.multiply(2.0);
      Complex complex2 = complex0.divide(complex1);
      assertEquals(2.0, complex0.getImaginary(), 0.01);
      assertEquals(2.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      Complex complex1 = complex0.ZERO.atan();
      assertEquals(2031.6645356093386, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(complex0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.add(Double.NaN);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.add(4343.45);
      Complex complex2 = complex1.exp();
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertFalse(complex1.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(2576.06);
      assertSame(complex1, complex0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-294.2202), (-294.2202));
      Complex complex1 = complex0.sqrt();
      List<Complex> list0 = complex1.nthRoot(37);
      assertEquals(37, list0.size());
      assertEquals(7.806087277379254, complex1.getReal(), 0.01);
      assertEquals((-294.2202), complex0.getImaginary(), 0.01);
      assertEquals((-18.845561774117062), complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.sqrt();
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-294.2202), (-294.2202));
      double double0 = complex0.NaN.abs();
      assertEquals((-294.2202), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals((-294.2202), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.atan();
      assertTrue(complex3.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertTrue(complex1.isInfinite());
      assertSame(complex3, complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.I;
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      String string0 = complex0.toString();
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals("(2031.6645356093386, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = new Complex(2031.6645356093386);
      Complex complex1 = complex0.acos();
      assertEquals(8.309757824050877, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-20.0), complex0.getReal(), 0.01);
      assertEquals((-1.0), complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-294.2202), (-294.2202));
      complex0.I.getField();
      assertEquals((-294.2202), complex0.getReal(), 0.01);
      assertEquals((-294.2202), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }
}
