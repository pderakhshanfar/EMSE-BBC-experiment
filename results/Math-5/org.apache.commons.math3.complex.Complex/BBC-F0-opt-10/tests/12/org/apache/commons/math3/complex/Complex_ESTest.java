/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:31:41 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(5.106228040084293E259);
      Complex complex1 = complex0.sqrt1z();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.3041809768060802E52);
      Complex complex1 = new Complex(1.3041809768060802E52);
      Complex complex2 = complex0.I.add(complex1);
      complex1.INF.atan();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex0.INF.divide(1180.94);
      Complex complex5 = Complex.valueOf(1.3041809768060802E52);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = complex7.I.divide(1180.94);
      complex4.NaN.subtract(1.3041809768060802E52);
      complex6.ONE.negate();
      Complex complex9 = complex5.acos();
      complex4.divide(complex2);
      Complex complex10 = complex9.conjugate();
      Complex complex11 = complex10.conjugate();
      complex11.log();
      complex0.pow(7.229843112334148E-8);
      Complex complex12 = complex1.sin();
      Complex complex13 = complex4.pow(complex12);
      complex13.NaN.tan();
      complex4.add((-2522.66125222924));
      complex0.readResolve();
      complex0.divide(complex1);
      complex3.conjugate();
      complex3.log();
      complex11.reciprocal();
      complex8.add(1180.94);
      complex7.reciprocal();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.6149218175202596E-8), (-3.6149218175202596E-8));
      Complex complex1 = new Complex((-3.6149218175202596E-8), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex1.nthRoot(1456);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex.valueOf((-3.6149218175202596E-8), (-3.6149218175202596E-8));
      Complex complex0 = Complex.valueOf(574.4, 20.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex0.getField();
      complex1.subtract(Double.NaN);
      complex1.getArgument();
      complex1.add(0.5506471395492554);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.INF;
      try { 
        complex3.nthRoot((-345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -345
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1093.0119680973473));
      Complex complex1 = complex0.add((-1332.013));
      Complex complex2 = complex1.add(6.02987028472758E156);
      Complex complex3 = complex2.asin();
      complex3.ZERO.getArgument();
      complex2.NaN.getField();
      complex0.INF.cosh();
      complex2.sin();
      complex1.multiply(984);
      Complex complex4 = complex1.subtract((-1093.0119680973473));
      complex1.conjugate();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.tanh();
      complex0.NaN.toString();
      Complex complex2 = complex0.tan();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3.6149218175202596E-8), (-3.6149218175202596E-8));
      Complex.valueOf((-3.6149218175202596E-8), (-3.6149218175202596E-8));
      Complex complex1 = complex0.atan();
      complex1.multiply(complex0);
      complex0.tanh();
      complex0.divide((-3.6149218175202596E-8));
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.NaN.subtract(complex1);
      double double0 = (-2246.934095657);
      Complex.valueOf((-2246.934095657), (-2246.934095657));
      try { 
        complex0.I.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.add((-392.743779506118));
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex0.I.multiply(complex1);
      complex1.acos();
      Complex complex2 = Complex.valueOf((-20.0), (-20.0));
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(764);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.NaN.toString();
      Complex complex1 = new Complex(0.0);
      complex0.ONE.divide(complex1);
      complex0.multiply((-248.918279));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.NaN.toString();
      complex0.acos();
      Complex.valueOf(2.613531950412902E-15, (-25.568116571605145));
      Complex complex1 = complex0.tan();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.009779671636088949);
      Complex complex1 = complex0.NaN.createComplex(0.009779671636088949, 0.009779671636088949);
      Complex complex2 = complex0.tanh();
      complex1.INF.getArgument();
      complex1.ONE.sinh();
      Complex complex3 = complex2.sin();
      complex3.INF.log();
      Complex complex4 = complex0.tan();
      complex4.NaN.nthRoot(1047);
      complex1.sinh();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex4.multiply(4585.5919331);
      complex6.I.conjugate();
      complex6.I.nthRoot(2739);
      complex0.readResolve();
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.sin();
      complex1.INF.tanh();
      complex1.NaN.getArgument();
      complex0.multiply(986);
      Complex complex2 = Complex.I;
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-1.1531958785218863));
      Complex complex1 = complex0.acos();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(complex1);
      Complex complex5 = Complex.INF;
      complex4.acos();
      complex2.toString();
      complex2.getImaginary();
      complex2.equals(complex3);
      Complex complex6 = Complex.ZERO;
      complex6.sqrt();
      complex6.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      complex0.acos();
      Complex complex1 = complex0.atan();
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.multiply(complex2);
      complex3.toString();
      complex3.getImaginary();
      Complex complex4 = Complex.INF;
      Object object0 = new Object();
      complex0.isInfinite();
      complex2.sqrt();
      complex0.divide(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.atan();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.multiply(complex3);
      complex4.INF.pow(complex1);
      complex3.tanh();
      complex3.getField();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.tanh();
      complex5.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(1.05387548454467E-309);
      Complex.valueOf(1009.8922567, (-1990.1901259310284));
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.negate();
      Complex.valueOf((-663.629710546389), 159.25610356029682);
      complex0.hashCode();
      Complex complex3 = Complex.INF;
      complex0.negate();
      complex2.asin();
      Complex complex4 = new Complex(2.2602433110285232E-7, 0.8607218229064686);
      Complex complex5 = Complex.ONE;
      complex5.NaN.multiply(complex2);
      Complex complex6 = complex5.multiply(1009.8922567);
      Complex complex7 = Complex.I;
      complex1.multiply((-1146548.925445198));
      try { 
        complex6.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(4.626786903827451E-6);
      Complex complex2 = Complex.valueOf(4.626786903827451E-6, 4.626786903827451E-6);
      complex2.toString();
      complex1.divide(0.9999975763680335);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      Complex complex1 = Complex.valueOf(3380.4, 3380.4);
      complex1.nthRoot(3198);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.cos();
      Complex complex4 = new Complex(3380.4, (-1.1531958785218863));
      Complex complex5 = complex1.tan();
      Complex.valueOf((-3.6149218175202596E-8), 14372.0);
      Complex complex6 = complex5.multiply(Double.POSITIVE_INFINITY);
      complex1.divide(complex3);
      complex6.createComplex((-1.1531958785218863), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.atan();
      complex2.reciprocal();
      Complex complex3 = (Complex)complex1.readResolve();
      complex2.multiply(complex0);
      Complex complex4 = new Complex((-3.6149218175202596E-8));
      complex1.divide((double) 2465);
      Complex complex5 = new Complex(2766.16, 291.06603093);
      complex5.exp();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1288.2850756377));
      Complex complex1 = Complex.valueOf((-1288.2850756377));
      Complex complex2 = new Complex((-0.25687313154060737));
      Complex complex3 = complex0.ZERO.add(complex2);
      complex3.INF.subtract(complex0);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex4.I.subtract(512.6);
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex4.ZERO.add((-1288.2850756377));
      complex8.ZERO.reciprocal();
      complex5.NaN.pow(complex1);
      complex7.ZERO.multiply(complex0);
      complex7.INF.abs();
      Complex complex9 = complex0.multiply(complex4);
      Complex complex10 = complex0.divide(complex9);
      complex2.pow((-1288.2850756377));
      complex4.NaN.toString();
      complex10.atan();
      Complex complex11 = complex5.acos();
      complex11.NaN.hashCode();
      complex0.ONE.sqrt();
      int int0 = (-1427);
      try { 
        complex10.nthRoot((-1427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,427
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ONE;
      complex2.toString();
      Complex complex3 = complex1.acos();
      complex1.atan();
      complex1.readResolve();
      Complex complex4 = complex0.multiply(complex1);
      Complex complex5 = complex3.tanh();
      complex0.getField();
      complex5.nthRoot(2372);
      complex2.acos();
      Complex complex6 = new Complex(0.25687313154060737);
      complex6.toString();
      complex5.equals(complex2);
      Complex complex7 = complex6.sqrt();
      complex7.divide((-1.0));
      complex7.exp();
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-1.1531958785218863));
      int int0 = 3198;
      complex0.nthRoot(3198);
      Complex complex2 = complex0.I.conjugate();
      complex2.NaN.cos();
      Complex complex3 = new Complex((-1.0), 3198);
      complex1.tan();
      // Undeclared exception!
      complex1.nthRoot(2871);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract(5204.967);
      Complex complex3 = Complex.valueOf(804.0744218977, 3325.790177743793);
      complex0.subtract(complex2);
      Complex complex4 = complex0.negate();
      Complex complex5 = Complex.valueOf(10409.934092818508, 1012.26137);
      Complex complex6 = new Complex(3325.790177743793, 0.8607218229064686);
      complex3.negate();
      Complex complex7 = Complex.valueOf(5204.967, 5204.967);
      complex1.INF.multiply(complex7);
      Complex complex8 = complex5.asin();
      complex4.createComplex(0.8607218229064686, 1446.63353);
      complex2.multiply(1408.1449223610568);
      Complex complex9 = complex3.reciprocal();
      Complex complex10 = Complex.I;
      complex10.NaN.cos();
      complex8.add(complex9);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 3593.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.cosh();
      complex2.INF.multiply(17);
      complex2.sqrt();
      Complex complex4 = Complex.INF;
      complex3.toString();
      complex1.readResolve();
      complex1.getArgument();
      Complex complex5 = new Complex((-3905.2443), 2.0);
      complex2.getField();
      complex5.atan();
      complex1.getField();
      complex1.divide(3593.0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 3593.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.INF;
      complex3.toString();
      complex1.readResolve();
      complex1.getArgument();
      Complex complex6 = new Complex((-3905.2443), 2.0);
      complex6.tan();
      complex3.multiply((-1936.5070616685));
      complex4.isNaN();
      complex0.getArgument();
      complex4.sqrt();
      Complex complex7 = complex2.divide((-1.0481908869377813E-8));
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 3593.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.sqrt();
      Complex complex5 = Complex.INF;
      complex4.toString();
      complex1.readResolve();
      complex1.getArgument();
      Complex complex6 = Complex.valueOf(3593.0, 3593.0);
      complex1.hashCode();
      Complex complex7 = new Complex((-0.7853981633974483), (-0.7853981633974483));
      complex3.negate();
      complex1.createComplex(1.1221363544464111, 0.42735910415649414);
      complex4.multiply((-1.0));
      complex5.reciprocal();
      Complex complex8 = Complex.I;
      complex6.cos();
      complex6.add(complex2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.subtract(20.0);
      Complex complex3 = Complex.valueOf(804.0744218977, 20.0);
      complex2.subtract(complex0);
      complex1.negate();
      Complex complex4 = Complex.valueOf(804.0744218977, Double.NaN);
      complex3.hashCode();
      Complex complex5 = new Complex(804.0744218977, (-3786.215734));
      Complex complex6 = complex5.negate();
      complex6.asin();
      complex4.createComplex((-2999.84875), (-2999.84875));
      complex6.multiply(804.0744218977);
      complex2.reciprocal();
      Complex complex7 = Complex.I;
      try { 
        complex7.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.ONE;
      complex2.NaN.add(complex0);
      complex1.NaN.nthRoot(2687);
      Complex complex3 = complex0.ZERO.atan();
      complex3.ZERO.reciprocal();
      complex3.divide(0.0);
      Complex complex4 = complex3.ONE.divide(complex1);
      complex4.sinh();
      complex4.ZERO.sin();
      Complex.valueOf(Double.NaN, 0.0);
      complex0.add((-2656.151610827606));
      Complex complex5 = complex0.sqrt();
      complex5.INF.pow((-2656.151610827606));
      Complex complex6 = complex5.subtract(2.0);
      Complex complex7 = complex0.asin();
      complex7.acos();
      Complex complex8 = new Complex(0.0, Double.NaN);
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.tanh();
      complex10.sin();
      Complex complex11 = complex6.tan();
      complex9.atan();
      complex4.getImaginary();
      complex6.toString();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.tan();
      complex4.ONE.tanh();
      complex3.conjugate();
      complex1.ZERO.cos();
      complex4.abs();
      Complex.valueOf(Double.NaN);
      Complex complex5 = new Complex(Double.NaN, 1.1195151349202477);
      complex0.divide(1.1195151349202477);
      complex5.divide(1.1195151349202477);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-456.27724661537576));
      Complex complex1 = complex0.multiply(3610);
      Complex.valueOf((double) 973);
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.add(2.0);
      complex2.getField();
      complex1.sqrt1z();
      complex1.divide(complex2);
      Complex complex4 = complex3.cosh();
      complex4.NaN.subtract(complex0);
      Complex complex5 = Complex.valueOf((-20.0), (-456.27724661537576));
      complex5.sinh();
      complex2.getImaginary();
      Complex.valueOf((double) 973);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1983.0), (-1983.0));
      Complex complex1 = complex0.conjugate();
      complex1.toString();
      Complex complex2 = complex1.tan();
      complex1.getReal();
      Complex complex3 = Complex.valueOf((-1983.0));
      Complex complex4 = complex0.pow(complex3);
      complex4.tan();
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.reciprocal();
      Complex.valueOf(2.4939635093999683E-8);
      Complex complex8 = new Complex((-1983.0), (-1983.0));
      complex8.divide((-1983.0));
      complex7.divide(0.17520119364380138);
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.multiply(973);
      Complex complex2 = complex0.sin();
      complex0.add((double) 973);
      complex1.getField();
      Complex complex3 = complex1.sqrt1z();
      complex1.divide(complex0);
      complex2.cosh();
      complex3.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.0));
      Complex complex1 = complex0.INF.subtract(1158.0);
      Complex complex2 = Complex.valueOf((-2.0));
      Complex complex3 = complex0.exp();
      complex3.NaN.exp();
      Complex complex4 = complex3.INF.pow(complex1);
      Complex complex5 = Complex.valueOf(1158.0);
      complex1.cos();
      complex1.createComplex((-2.0), 1158.0);
      complex5.atan();
      Complex complex6 = complex3.reciprocal();
      complex0.multiply(3188);
      complex6.nthRoot(3188);
      complex4.createComplex(1158.0, (-2.0));
      Complex.valueOf((-2.0));
      Complex complex7 = complex5.conjugate();
      complex0.multiply(37);
      complex2.reciprocal();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      Complex complex1 = Complex.valueOf(0.0, (-3249.31176513322));
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.INF.acos();
      complex2.cosh();
      complex0.sqrt();
      Complex complex4 = Complex.INF;
      complex4.toString();
      Complex complex5 = (Complex)complex0.readResolve();
      complex0.getArgument();
      Complex complex6 = complex2.tan();
      complex2.multiply(166.9487507340849);
      complex6.isNaN();
      complex3.getArgument();
      Complex complex7 = complex4.reciprocal();
      complex7.multiply(complex4);
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(973);
      complex3.I.sin();
      Complex complex4 = complex2.I.add((-2297.9122251));
      complex3.ZERO.divide(Double.NaN);
      complex4.INF.getField();
      complex2.sqrt1z();
      complex0.divide(complex3);
      complex3.cosh();
      Complex complex5 = Complex.ZERO;
      complex5.reciprocal();
      complex4.sinh();
      complex2.getImaginary();
      Complex.valueOf((-2297.9122251));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.subtract(5204.967);
      Complex complex3 = Complex.valueOf(0.8607218229064686, 0.8607218229064686);
      Complex complex4 = complex1.subtract(complex2);
      Complex complex5 = complex4.negate();
      Complex complex6 = Complex.valueOf(0.8607218229064686, 1408.1449223610568);
      complex6.hashCode();
      complex1.I.negate();
      Complex complex7 = new Complex(1408.1449223610568, (-1481.0));
      Complex complex8 = complex7.negate();
      Complex complex9 = complex5.asin();
      complex1.createComplex(5204.967, (-337.308));
      complex9.sin();
      complex4.getField();
      Complex complex10 = new Complex(0.0);
      complex6.toString();
      complex0.subtract(complex5);
      complex3.hashCode();
      complex8.atan();
      complex1.sin();
      Complex.valueOf(7.171077244202293E205, 0.8607218229064686);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(3279.08263803586, 0.0);
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      complex0.toString();
      Complex complex2 = complex1.tan();
      complex2.getReal();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex1.tan();
      Complex complex5 = new Complex((-1072.604311));
      complex5.divide(complex3);
      complex5.toString();
      Complex complex6 = complex4.subtract(complex5);
      complex0.hashCode();
      complex4.ZERO.add((-3087.8724195));
      Complex complex7 = complex0.atan();
      complex7.abs();
      Complex complex8 = complex6.sin();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      Complex complex1 = Complex.valueOf(0.0, (-3249.31176513322));
      Complex complex2 = complex1.I.sin();
      complex2.INF.acos();
      complex2.cosh();
      complex0.sqrt();
      Complex complex3 = Complex.INF;
      complex3.toString();
      complex0.readResolve();
      complex0.getArgument();
      complex2.tan();
      complex2.multiply(166.9487507340849);
      complex3.getImaginary();
      Complex complex4 = new Complex((-3249.31176513322), Double.POSITIVE_INFINITY);
      complex4.equals(complex3);
      complex4.sqrt();
      complex1.getField();
      Complex complex5 = complex3.pow((-4.0852427502515625E-8));
      complex2.pow(3.141592653589793);
      complex1.log();
      complex1.conjugate();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(982.545520824881);
      complex0.ONE.abs();
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.NaN.multiply(complex2);
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex0.subtract((-4.062111549));
      Complex complex7 = complex6.divide(complex2);
      complex2.getField();
      complex2.INF.negate();
      complex1.subtract(1.0);
      complex5.I.abs();
      Complex.valueOf((-4.062111549), 5.879282834821692E-105);
      Complex complex8 = complex4.cosh();
      complex5.ZERO.multiply(complex6);
      Complex complex9 = complex0.subtract((-0.9060367009005804));
      Complex complex10 = complex8.add(complex3);
      Complex complex11 = complex10.pow((-0.9060367009005804));
      Complex complex12 = complex5.subtract(complex11);
      Complex complex13 = complex6.asin();
      Complex complex14 = complex7.subtract(complex0);
      Complex.valueOf(2985.50462366);
      Complex complex15 = complex13.divide((-0.9060367009005804));
      complex15.ONE.acos();
      complex10.readResolve();
      complex4.getReal();
      Complex complex16 = complex14.tanh();
      complex12.divide(complex16);
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.subtract(5204.967);
      Complex.valueOf(0.8607218229064686, 0.8607218229064686);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf(0.8607218229064686, 1408.1449223610568);
      complex4.tanh();
      complex5.conjugate();
      complex4.cos();
      complex3.abs();
      complex1.multiply(5204.967);
      Complex.valueOf(5204.967);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.ONE;
      complex6.multiply(complex7);
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.conjugate();
      complex1.INF.pow(2.4939635093999683E-8);
      Complex complex3 = complex0.atan();
      complex1.readResolve();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex3.tanh();
      complex4.getField();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex6.add(140.265482);
      complex2.nthRoot(2433);
      Complex complex8 = complex7.pow((-1244.06801316));
      Complex complex9 = complex3.cosh();
      complex7.add(complex4);
      Complex complex10 = complex0.sinh();
      complex0.toString();
      complex7.cos();
      complex7.hashCode();
      complex8.getImaginary();
      Object object0 = new Object();
      Complex complex11 = new Complex(Double.NaN, (-2416.80073193717));
      complex0.INF.add(complex11);
      complex5.equals(object0);
      Complex complex12 = Complex.ZERO;
      complex12.sqrt();
      complex6.getField();
      complex7.pow(1609.16);
      complex9.pow(1.0612750619050355);
      Complex complex13 = complex10.log();
      complex13.conjugate();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(0.0);
      Complex complex1 = Complex.valueOf((-710.5909978694), 1408.1449223610568);
      complex1.subtract(complex0);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.valueOf(1408.1449223610568, (-1343.01));
      complex1.hashCode();
      Complex complex4 = new Complex(1408.1449223610568, 720.0);
      Complex complex5 = complex4.negate();
      complex4.asin();
      complex3.createComplex((-1343.01), (-380.33194));
      complex5.sin();
      complex4.getField();
      Complex complex6 = new Complex(0.0);
      Complex complex7 = complex3.divide(1609.16);
      Complex.valueOf(20.0);
      complex7.sin();
      complex2.pow(20.0);
      complex4.multiply((-2476.462));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      Complex complex1 = complex0.asin();
      complex1.isNaN();
      complex1.toString();
      complex1.readResolve();
      complex0.getArgument();
      complex0.tan();
      Complex complex2 = complex1.multiply((-30.0));
      complex0.isNaN();
      complex2.getArgument();
      complex2.sqrt();
      complex1.getField();
      Complex complex3 = complex1.pow(166.9487507340849);
      complex0.log();
      complex3.subtract((-2.131386956531369));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4939635093999683E-8);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = Complex.INF;
      complex0.toString();
      complex0.readResolve();
      complex2.getArgument();
      complex3.tan();
      Complex complex4 = complex3.multiply(0.0);
      complex1.isNaN();
      complex1.getArgument();
      complex1.sqrt();
      complex3.getField();
      complex4.pow(Double.POSITIVE_INFINITY);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.sin();
      complex2.acos();
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex2.sqrt();
      Complex complex6 = Complex.INF;
      complex3.toString();
      Complex complex7 = Complex.valueOf((-2166.90555781), (-3279.08263803586));
      complex7.readResolve();
      complex1.getArgument();
      complex7.tan();
      Complex complex8 = complex5.multiply((-3279.08263803586));
      complex4.isNaN();
      complex8.getArgument();
      complex5.sqrt();
      complex5.getField();
      complex0.pow((-122.324));
      Complex complex9 = Complex.ZERO;
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(Double.NaN);
      complex1.getReal();
      Complex complex2 = complex1.tan();
      complex2.abs();
      Complex complex3 = new Complex(0.25088030099868774);
      complex2.divide(complex3);
      complex3.toString();
      Complex complex4 = Complex.NaN;
      complex4.subtract(complex0);
      complex4.hashCode();
      complex4.atan();
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getField();
      complex0.ZERO.readResolve();
      complex0.getField();
      Complex complex1 = Complex.INF;
      complex1.toString();
      complex1.tan();
      Complex complex2 = Complex.ZERO;
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex(3279.08263803586, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.valueOf(6.283185307179586, 1408.1449223610568);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex3.pow(0.0);
      Complex complex6 = complex1.cosh();
      Complex complex7 = new Complex(7.840210076743552E-8);
      complex7.add(complex3);
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex5.acos();
      complex3.exp();
      complex9.toString();
      complex8.cos();
      complex6.hashCode();
      Complex complex10 = Complex.valueOf(0.0012923777931297677);
      complex10.getImaginary();
      complex1.equals(complex6);
      complex7.hashCode();
      complex4.nthRoot(7);
      complex4.readResolve();
      Complex complex11 = complex5.sinh();
      complex5.equals(complex6);
      complex2.subtract(complex11);
      complex0.readResolve();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5562618970870972);
      Complex complex1 = complex0.pow(0.5562618970870972);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.atan();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = complex1.pow(complex4);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex2.multiply(complex3);
      Complex complex9 = complex7.log();
      complex5.isInfinite();
      Complex complex10 = complex3.multiply(1431655765);
      complex5.getReal();
      complex9.atan();
      Complex complex11 = complex2.acos();
      complex1.reciprocal();
      Complex complex12 = complex5.divide(complex6);
      complex10.toString();
      Complex complex13 = complex7.add(complex12);
      complex13.NaN.sqrt1z();
      Complex complex14 = complex11.negate();
      Complex complex15 = complex8.tanh();
      complex9.nthRoot(511);
      complex4.getReal();
      complex4.getArgument();
      Complex complex16 = Complex.I;
      complex16.divide(complex15);
      Complex complex17 = Complex.NaN;
      complex17.tan();
      Complex complex18 = Complex.ZERO;
      complex18.isInfinite();
      complex17.abs();
      complex16.toString();
      complex15.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1013);
      Complex complex1 = Complex.INF;
      complex0.toString();
      Complex complex2 = complex0.acos();
      complex2.INF.atan();
      Object object0 = complex2.ZERO.readResolve();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = complex2.NaN.tanh();
      complex4.NaN.getField();
      Complex complex5 = complex1.add(0.0);
      complex2.ZERO.nthRoot(2465);
      Complex complex6 = complex2.ZERO.pow((double) 1013);
      complex5.ZERO.cosh();
      complex6.INF.add(complex1);
      Complex complex7 = complex6.NaN.sinh();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex3.INF.exp();
      complex3.ONE.toString();
      Complex complex10 = complex6.cos();
      complex5.hashCode();
      complex8.getImaginary();
      complex3.equals(object0);
      complex7.NaN.hashCode();
      complex1.nthRoot(1013);
      complex9.readResolve();
      Complex complex11 = complex0.sinh();
      complex3.equals(complex1);
      complex7.subtract(complex0);
      complex11.readResolve();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(3279.08263803586, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.valueOf(6.283185307179586, 1408.1449223610568);
      Complex complex4 = complex2.log();
      complex0.isInfinite();
      complex2.multiply((-94));
      complex4.getReal();
      complex0.atan();
      Complex complex5 = complex1.acos();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.reciprocal();
      complex2.divide(complex3);
      complex1.toString();
      complex5.add(complex0);
      complex4.negate();
      complex7.tanh();
      try { 
        complex3.nthRoot((-94));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -94
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      Complex complex1 = Complex.valueOf(0.0, (-3249.31176513322));
      Complex complex2 = complex1.I.sin();
      complex2.INF.acos();
      Complex complex3 = complex2.ZERO.sin();
      Complex complex4 = complex3.ZERO.pow(complex2);
      Complex complex5 = complex4.ZERO.atan();
      Complex complex6 = complex5.I.conjugate();
      complex4.pow(complex2);
      Complex.valueOf(0.0, 0.0);
      complex0.multiply(complex1);
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.subtract(complex1);
      Complex complex9 = complex5.negate();
      complex8.hashCode();
      complex9.asin();
      Complex complex10 = Complex.ONE;
      complex6.sin();
      complex10.getField();
      complex8.divide((-3249.31176513322));
      complex2.sin();
      complex5.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(3279.08263803586, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.valueOf(6.283185307179586, 1408.1449223610568);
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex3.ZERO.negate();
      complex4.cosh();
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = complex0.sinh();
      Complex complex8 = Complex.ONE;
      complex8.acos();
      Complex complex9 = Complex.ZERO;
      complex1.toString();
      Complex complex10 = complex6.cos();
      complex4.hashCode();
      complex7.I.divide(550.24095);
      complex6.getImaginary();
      Complex complex11 = Complex.NaN;
      complex11.equals("(0.0, 8.788466137158817)");
      Complex complex12 = Complex.NaN;
      complex12.hashCode();
      complex6.nthRoot(2356);
      complex11.readResolve();
      Complex complex13 = new Complex((-3228.8549436166923));
      Complex complex14 = complex13.sinh();
      complex1.equals(complex5);
      complex14.subtract(complex7);
      complex10.readResolve();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(3279.08263803586, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.valueOf(6.283185307179586, 1408.1449223610568);
      Complex complex4 = complex1.subtract(complex0);
      complex3.ZERO.negate();
      complex3.ONE.hashCode();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex5.multiply((-3595.667356));
      complex4.reciprocal();
      complex0.multiply(complex6);
      Complex complex7 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex7.add(complex6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.abs();
      Complex complex1 = complex0.asin();
      complex1.isNaN();
      Complex complex2 = complex0.reciprocal();
      complex2.multiply(complex0);
      complex1.divide(6.283185307179586);
      complex1.ZERO.multiply((-378.48082788));
      complex1.equals("&1I'_A'V~t\"L\u0001)LZb");
      complex1.getArgument();
      Complex.valueOf(1.0102056970584246, 1.0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.subtract(5204.967);
      Complex.valueOf(0.8607218229064686, 0.8607218229064686);
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.negate();
      Complex complex5 = Complex.valueOf(0.8607218229064686, 1408.1449223610568);
      complex5.hashCode();
      Complex complex6 = new Complex(1408.1449223610568, (-1481.0));
      complex6.negate();
      Complex complex7 = complex4.asin();
      complex1.createComplex(5204.967, (-337.308));
      Complex complex8 = complex7.sin();
      complex3.getField();
      Complex complex9 = new Complex(0.0);
      complex9.divide(20.0);
      Complex complex10 = Complex.valueOf(6.21217911547116E-4);
      complex10.sin();
      complex8.pow((-1.0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1013);
      Complex complex1 = Complex.valueOf(0.0);
      complex0.toString();
      Complex complex2 = complex0.acos();
      complex2.INF.atan();
      complex2.ZERO.readResolve();
      Complex complex3 = complex1.I.multiply(complex0);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.asin();
      complex3.isNaN();
      complex2.reciprocal();
      Complex complex6 = Complex.ONE;
      complex6.multiply(complex1);
      complex5.divide((-3228.8549436166923));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.abs();
      Complex complex1 = new Complex(1.0, 4356.8378616442);
      Complex complex2 = complex1.tanh();
      complex2.getField();
      Complex complex3 = complex0.add(4356.8378616442);
      Complex complex4 = Complex.valueOf(4356.8378616442, (-6.56250013356227E-149));
      complex4.nthRoot(42);
      Complex complex5 = complex2.pow(1.4142135623730951);
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex5.add(complex1);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex3.acos();
      complex9.exp();
      complex5.toString();
      complex10.I.add(complex4);
      Complex complex11 = complex6.cos();
      complex8.hashCode();
      Complex complex12 = Complex.INF;
      complex12.getImaginary();
      complex7.equals(complex10);
      complex11.hashCode();
      complex9.nthRoot(189);
      complex8.readResolve();
      complex0.sinh();
      Object object0 = new Object();
      complex2.equals(object0);
      complex3.subtract(complex5);
      complex3.readResolve();
      Complex complex13 = Complex.ZERO;
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.abs();
      Complex complex1 = complex0.asin();
      complex0.abs();
      complex1.multiply(1.4142135623730951);
      complex0.reciprocal();
      complex1.multiply(complex0);
      Complex complex2 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 1.0);
      complex0.abs();
      Complex complex1 = complex0.asin();
      complex1.isNaN();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.multiply(complex0);
      complex3.getField();
      Complex complex4 = complex0.pow(1.3880166914480165E260);
      complex2.log();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5562618970870972);
      Complex complex1 = complex0.pow(0.5562618970870972);
      Complex complex2 = complex0.NaN.cosh();
      Complex complex3 = complex0.sqrt();
      complex1.toString();
      complex1.NaN.readResolve();
      complex3.NaN.getArgument();
      Complex complex4 = complex3.I.tan();
      Complex complex5 = complex4.ONE.multiply((-539.4827));
      complex0.isNaN();
      complex1.getArgument();
      Complex complex6 = new Complex((-539.4827));
      complex6.asin();
      Complex complex7 = Complex.valueOf((-1167.4078596));
      Complex complex8 = complex7.add((-539.4827));
      complex8.ONE.tanh();
      complex2.atan();
      complex3.add(complex5);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(3279.08263803586, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = Complex.valueOf(6.283185307179586, 1408.1449223610568);
      Complex complex4 = complex1.subtract(complex0);
      complex3.ONE.hashCode();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex1.asin();
      complex0.hashCode();
      complex6.getImaginary();
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      Complex complex7 = Complex.valueOf(3279.08263803586);
      complex7.hashCode();
      complex2.nthRoot(808);
      complex5.readResolve();
      Complex complex8 = complex2.sinh();
      complex5.equals(complex0);
      complex7.subtract(complex8);
      complex8.readResolve();
      Complex complex9 = Complex.valueOf(864.64, (-302.1));
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex2.sqrt();
      complex2.reciprocal();
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.ONE.tanh();
      Complex complex6 = complex5.I.sqrt1z();
      complex3.conjugate();
      complex1.ZERO.cos();
      complex0.pow(complex2);
      complex2.toString();
      complex1.sin();
      complex0.isNaN();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex6.add(3218.06766207);
      complex8.atan();
      complex3.add(complex7);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getField();
      complex0.ZERO.readResolve();
      complex0.getField();
      Complex complex1 = complex0.conjugate();
      complex1.toString();
      Complex complex2 = complex1.tan();
      complex0.getReal();
      complex1.I.tan();
      complex0.abs();
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex1.ONE.divide(complex3);
      complex4.toString();
      Complex complex5 = complex2.subtract(complex0);
      complex5.I.hashCode();
      complex5.atan();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex1.ZERO.getField();
      complex0.INF.divide(complex1);
      Complex complex2 = complex0.ZERO.cos();
      complex2.ONE.abs();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex3.NaN.conjugate();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.I.cosh();
      Complex complex9 = complex8.NaN.createComplex(0.0, 0.0);
      complex3.subtract(complex0);
      complex7.log();
      complex2.cos();
      complex3.equals(complex4);
      Complex complex10 = complex9.pow(complex1);
      complex10.atan();
      complex8.getArgument();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.INF.exp();
      Complex complex2 = complex0.ONE.sin();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex1.NaN.cos();
      Complex complex5 = complex3.INF.atan();
      Complex complex6 = complex5.NaN.createComplex(957.7294810374059, (-725.1));
      complex3.NaN.abs();
      complex6.ZERO.log();
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex6.INF.tanh();
      complex7.isInfinite();
      Complex.valueOf(129.90991381, 2.2867766559333004E-7);
      complex6.isInfinite();
      Complex complex9 = complex3.divide(complex2);
      complex9.ZERO.add(complex5);
      complex9.ZERO.acos();
      complex7.INF.sqrt1z();
      complex1.subtract(complex5);
      complex8.NaN.conjugate();
      Complex complex10 = complex4.sqrt();
      complex2.sin();
      complex8.sin();
      complex7.getArgument();
      complex10.readResolve();
      Complex complex11 = complex6.subtract(957.7294810374059);
      complex11.divide((-2205.64476));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5562618970870972);
      Complex complex1 = complex0.pow(0.5562618970870972);
      complex0.NaN.cosh();
      Complex complex2 = complex0.sqrt();
      complex1.toString();
      complex1.NaN.readResolve();
      complex2.NaN.getArgument();
      Complex complex3 = complex2.I.tan();
      complex3.ONE.multiply((-539.4827));
      complex0.isNaN();
      complex1.getArgument();
      Complex complex4 = complex2.ZERO.sqrt();
      complex2.getField();
      complex2.pow(0.0);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.INF.divide(1.4093490364499379E22);
      Complex complex4 = complex2.cos();
      Complex complex5 = complex4.ONE.sinh();
      Complex complex6 = complex4.ONE.negate();
      complex6.ONE.divide(87.6602);
      complex1.abs();
      complex4.abs();
      complex3.divide(complex1);
      complex1.atan();
      complex4.ZERO.conjugate();
      complex0.add(complex2);
      Complex complex7 = complex5.multiply(0);
      complex0.tanh();
      Complex complex8 = complex7.reciprocal();
      complex8.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.atan();
      complex0.I.abs();
      Complex complex4 = Complex.valueOf(0.0, 2601.026524827);
      complex0.isInfinite();
      Complex complex5 = complex1.negate();
      complex2.ONE.cosh();
      Complex complex6 = complex5.multiply(complex2);
      complex3.toString();
      Complex complex7 = complex3.add(1.0);
      complex1.NaN.nthRoot(2219);
      complex5.ZERO.tanh();
      Complex complex8 = complex2.cosh();
      Complex complex9 = complex3.pow(complex5);
      complex6.ZERO.multiply(1);
      complex5.ONE.sqrt1z();
      complex9.INF.negate();
      complex0.isInfinite();
      complex0.divide(complex6);
      Complex.valueOf(1.0);
      Complex complex10 = complex9.divide(complex0);
      complex2.acos();
      complex0.add(complex8);
      complex4.divide(20.0);
      complex10.readResolve();
      complex10.divide((double) 1);
      complex4.isNaN();
      Complex complex11 = complex7.sinh();
      complex11.tan();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.cos();
      complex1.sqrt();
      complex0.divide(1334.955654);
      complex0.divide(0.0);
      Complex complex2 = Complex.valueOf(41.9902507);
      complex2.ONE.subtract(complex1);
      complex2.NaN.createComplex((-1417.2187457503603), (-914.8128676531752));
      Complex.valueOf(512.7506485);
      complex2.cosh();
      complex0.hashCode();
      Complex complex3 = complex0.sinh();
      complex3.createComplex(1334.955654, 2.0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getImaginary();
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex0.NaN.pow(complex1);
      Complex complex3 = complex2.multiply((-1473));
      Complex complex4 = complex0.add(0.0);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.ZERO.sinh();
      Complex complex7 = complex4.pow(0.0);
      complex7.NaN.abs();
      Complex complex8 = complex4.pow(complex1);
      complex3.divide(complex6);
      complex8.conjugate();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-3.6149218175202596E-8));
      Complex complex1 = Complex.valueOf(0.0, (-3249.31176513322));
      Complex complex2 = complex1.I.sin();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex2.ZERO.sin();
      Complex complex5 = complex4.ZERO.pow(complex2);
      Complex complex6 = complex5.ZERO.atan();
      complex6.I.conjugate();
      Complex complex7 = complex5.pow(complex2);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex0.multiply(complex1);
      Complex complex10 = complex9.ONE.log();
      complex9.isInfinite();
      Complex complex11 = complex0.multiply(2514);
      complex3.getReal();
      Complex complex12 = complex11.NaN.atan();
      Complex complex13 = complex12.ONE.acos();
      complex11.I.reciprocal();
      complex9.divide(complex1);
      complex8.toString();
      Complex complex14 = complex4.ZERO.add(complex1);
      Complex complex15 = complex11.negate();
      Complex complex16 = complex15.tanh();
      complex9.nthRoot(817);
      complex7.getReal();
      complex10.getArgument();
      complex0.divide(complex2);
      complex11.ZERO.tan();
      complex2.isInfinite();
      complex13.abs();
      complex14.toString();
      complex9.equals(complex16);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-889.585), (-889.585));
      Complex complex1 = complex0.conjugate();
      int int0 = 861;
      Complex complex2 = complex1.ONE.multiply(861);
      Complex complex3 = Complex.valueOf((-552.667646), (-889.585));
      Complex complex4 = Complex.valueOf((-889.585), 1698.6285933);
      complex3.ZERO.add(complex4);
      Complex complex5 = complex2.sin();
      double double0 = (-861.42335);
      Complex complex6 = complex5.add((-861.42335));
      double double1 = 1559.223;
      Complex.valueOf(1559.223, (-861.42335));
      complex6.INF.sin();
      complex1.tanh();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1768.533239), (-1768.533239));
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = Complex.valueOf(0.0, (-1768.533239));
      complex3.ONE.sqrt1z();
      Complex complex4 = complex2.ONE.pow(complex3);
      complex0.hashCode();
      complex2.cos();
      complex4.abs();
      Complex complex5 = new Complex((-1768.533239), 0.0);
      complex1.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.NaN.getArgument();
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.ZERO.tan();
      complex2.NaN.add(complex0);
      complex1.NaN.nthRoot(2687);
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex3.ZERO.reciprocal();
      complex3.divide(0.0);
      Complex complex5 = complex3.ONE.divide(complex1);
      complex5.sinh();
      complex5.ZERO.sin();
      Complex complex6 = complex0.add((-2656.151610827606));
      Complex complex7 = complex0.sqrt();
      complex7.INF.pow((-2656.151610827606));
      Complex complex8 = complex7.subtract(2.0);
      Complex complex9 = complex0.asin();
      Complex complex10 = complex9.acos();
      complex10.ZERO.multiply(complex6);
      Complex complex11 = complex4.cos();
      Complex complex12 = complex11.tanh();
      complex12.sin();
      complex8.tan();
      complex11.atan();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex((-490.5084179));
      complex0.I.sqrt();
      Complex complex1 = complex0.I.sin();
      complex1.INF.toString();
      Complex.valueOf((-3.514601201473235E-136));
      Complex complex2 = complex0.reciprocal();
      complex2.NaN.subtract((-490.5084179));
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3158.7940322663), 0.0);
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.ONE.cos();
      complex0.ONE.toString();
      complex0.abs();
      complex2.readResolve();
      Complex complex3 = complex0.cosh();
      complex3.readResolve();
      Complex complex4 = Complex.valueOf(0.0, 0.18329763412475586);
      complex4.getReal();
      complex4.ZERO.getArgument();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex2.pow(complex4);
      complex6.INF.pow(complex2);
      Complex complex7 = complex3.acos();
      complex4.getField();
      complex5.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      complex0.cos();
      Complex complex1 = complex0.ONE.multiply(578);
      Complex complex2 = complex0.sinh();
      complex0.abs();
      Complex complex3 = complex0.tanh();
      complex0.NaN.acos();
      complex2.ONE.getArgument();
      Complex complex4 = complex3.divide(0.0);
      complex1.log();
      Complex complex5 = complex4.subtract((-1.2093068629412478E-8));
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.multiply(973);
      Complex complex4 = complex3.I.reciprocal();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = complex2.I.add((-2297.9122251));
      complex6.INF.getField();
      complex2.sqrt1z();
      complex0.divide(complex3);
      complex0.cosh();
      complex0.reciprocal();
      complex4.sinh();
      complex5.getImaginary();
      Complex.valueOf(1.1752011936438014);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sin();
      complex0.readResolve();
      Complex complex2 = complex0.cos();
      complex1.NaN.getArgument();
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = Complex.valueOf(0.0);
      complex0.ZERO.subtract(0.0);
      Complex complex5 = Complex.valueOf(0.0);
      complex5.NaN.getField();
      Complex complex6 = complex0.tanh();
      Complex complex7 = complex6.cos();
      complex7.ZERO.add(complex5);
      complex6.isNaN();
      complex4.abs();
      complex3.sqrt1z();
      complex2.getArgument();
      complex1.sqrt1z();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(2305.0);
      Complex complex1 = new Complex(1.0047353208353007E153, 1.0047353208353007E153);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.I.sin();
      complex2.INF.readResolve();
      complex3.NaN.subtract(complex4);
      Complex complex5 = complex3.NaN.sinh();
      complex5.ZERO.abs();
      Complex complex6 = complex0.multiply(complex3);
      complex3.tanh();
      Complex complex7 = complex2.divide(1.0047353208353007E153);
      complex0.tan();
      complex6.exp();
      complex4.log();
      complex2.getReal();
      complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex((-3002.565404957479), 296.6571502);
      complex0.ZERO.createComplex(1559.289, 1559.289);
      Complex complex2 = new Complex(1777.3911569418);
      Complex complex3 = complex0.divide(complex2);
      complex2.ZERO.add(0.0);
      Complex complex4 = Complex.valueOf(1777.3911569418);
      Complex complex5 = complex4.ONE.multiply(1777.3911569418);
      complex2.isInfinite();
      complex2.getField();
      complex5.getField();
      complex3.sqrt();
      complex4.isNaN();
      complex1.nthRoot(107);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.I.conjugate();
      complex1.ZERO.multiply((-1318));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(complex2);
      complex2.atan();
      Complex complex4 = complex0.divide(complex3);
      Complex complex5 = complex2.ZERO.conjugate();
      complex5.ONE.cos();
      complex0.multiply(complex3);
      Complex complex6 = complex4.add(complex0);
      complex6.I.toString();
      complex4.getImaginary();
      complex4.acos();
      Complex complex7 = complex0.cosh();
      complex7.isInfinite();
      complex2.I.toString();
      Complex complex8 = complex3.pow(2.343525263620692E-8);
      Complex complex9 = complex8.subtract(6.283185307179586);
      complex7.abs();
      Complex.valueOf((double) (-1318));
      complex0.ONE.cos();
      complex0.negate();
      complex3.toString();
      complex9.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = new Complex(87.9, 87.9);
      Complex complex1 = new Complex((-2154.914));
      Complex complex2 = complex1.ONE.cosh();
      complex2.NaN.toString();
      Complex complex3 = complex1.NaN.cos();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.acos();
      complex5.I.hashCode();
      Complex complex6 = complex3.sin();
      complex6.I.tan();
      complex6.sinh();
      complex2.divide(3.4042761729010895E29);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3786.215734));
      Complex complex1 = complex0.log();
      complex1.I.add((-2.2798356346688802E-7));
      Complex.valueOf(0.0, (-1.0));
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.nthRoot(1285);
      complex0.I.exp();
      try { 
        complex0.ONE.nthRoot((-868));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -868
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.readResolve();
      complex0.ONE.toString();
      Complex complex1 = null;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0, 2.0);
      Complex complex2 = complex0.multiply(complex1);
      complex2.ONE.toString();
      Complex complex3 = complex1.multiply(2937);
      Complex complex4 = complex3.INF.cosh();
      complex4.readResolve();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.NaN.multiply(complex2);
      complex2.nthRoot(523);
      Complex complex7 = complex5.subtract(complex0);
      Complex complex8 = complex7.INF.sin();
      complex4.abs();
      Complex complex9 = complex0.multiply(complex2);
      complex7.ONE.multiply(2308);
      complex9.hashCode();
      complex7.toString();
      complex6.getImaginary();
      Complex.valueOf(2.0);
      complex1.multiply(300);
      complex8.divide(950.882336);
      complex7.tan();
      complex7.multiply(Double.NaN);
      complex7.exp();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.I.conjugate();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.INF.sin();
      Complex.valueOf(0.0);
      Complex complex5 = complex2.multiply(1);
      Complex.valueOf((double) 1, (-4212.93798098));
      Complex complex6 = complex5.divide(complex0);
      complex6.INF.add((double) 1);
      Complex complex7 = complex3.INF.acos();
      Complex complex8 = complex7.I.sinh();
      Complex complex9 = complex5.multiply((double) 1);
      Complex complex10 = complex9.I.divide(0.17020416259765625);
      complex6.hashCode();
      complex3.getImaginary();
      Complex complex11 = complex9.asin();
      complex11.ONE.multiply((-1029.55));
      Complex complex12 = complex6.acos();
      complex4.acos();
      complex10.divide(complex8);
      Object object0 = complex12.readResolve();
      complex3.equals(object0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      List<Complex> list0 = complex0.nthRoot(1013);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1013, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertTrue(list0.contains(complex0));
      
      Complex complex1 = Complex.valueOf(0.0);
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      String string0 = complex0.toString();
      assertTrue(complex0.equals((Object)complex1));
      assertEquals("(0.0, 0.0)", string0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotNull(string0);
      
      Complex complex2 = complex0.acos();
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(complex2);
      
      Complex complex3 = complex2.INF.atan();
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotNull(complex3);
      
      Complex complex4 = (Complex)complex2.ZERO.readResolve();
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotNull(complex4);
      
      Complex complex5 = complex1.I.multiply(complex0);
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotNull(complex5);
      
      Complex complex6 = complex2.NaN.tanh();
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotNull(complex6);
      
      ComplexField complexField0 = complex6.NaN.getField();
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotNull(complexField0);
      
      Complex complex7 = complex1.add(0.0);
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex3));
      assertTrue(complex7.equals((Object)complex0));
      assertTrue(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertTrue(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex1));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotNull(complex7);
      
      List<Complex> list1 = complex2.ZERO.nthRoot(2465);
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(list1.equals((Object)list0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(list1.isEmpty());
      assertEquals(2465, list1.size());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      assertFalse(list1.contains(complex6));
      assertTrue(list1.contains(complex5));
      
      Complex complex8 = complex2.ZERO.pow((double) 1013);
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotNull(complex8);
      
      Complex complex9 = complex7.ZERO.cosh();
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertTrue(complex7.equals((Object)complex0));
      assertTrue(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertTrue(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex9);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotNull(complex9);
      
      Complex complex10 = complex8.INF.add(complex1);
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex10.getReal(), 0.01);
      assertTrue(complex10.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotNull(complex10);
      
      Complex complex11 = complex8.NaN.sinh();
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex7));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex11, complex2);
      assertSame(complex11, complex3);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex7);
      assertNotNull(complex11);
      
      Complex complex12 = complex1.acos();
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertTrue(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(1.5707963267948966, complex12.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotNull(complex12);
      
      Complex complex13 = complex5.INF.exp();
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex6));
      assertTrue(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      assertTrue(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex12));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex8));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex8);
      assertNotNull(complex13);
      
      String string1 = complex5.ONE.toString();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex8));
      assertEquals("(1.0, 0.0)", string1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex8);
      assertNotNull(string1);
      
      Complex complex14 = complex8.cos();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertTrue(complex14.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex13));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex10));
      assertTrue(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertTrue(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertSame(complex14, complex6);
      assertNotSame(complex14, complex10);
      assertSame(complex14, complex3);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotNull(complex14);
      
      complex7.hashCode();
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex12));
      assertTrue(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertTrue(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex13));
      assertTrue(complex7.equals((Object)complex0));
      assertTrue(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex2);
      
      double double0 = complex12.getImaginary();
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex14));
      assertEquals(-0.0, double0, 0.01);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(1.5707963267948966, complex12.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex14);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      
      boolean boolean0 = complex5.equals(complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex12));
      assertTrue(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex14));
      assertTrue(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex8);
      
      complex11.NaN.hashCode();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex13));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex10));
      assertTrue(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex14));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertTrue(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex7));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertSame(complex11, complex14);
      assertSame(complex11, complex3);
      assertNotSame(complex11, complex8);
      assertSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex7);
      
      List<Complex> list2 = complex1.nthRoot(1013);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(list2.isEmpty());
      assertEquals(1013, list2.size());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotNull(list2);
      assertFalse(list2.contains(complex11));
      assertTrue(list2.contains(complex5));
      
      Complex complex15 = (Complex)complex13.readResolve();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex13.equals((Object)complex14));
      assertTrue(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex9));
      assertTrue(complex13.equals((Object)complex6));
      assertTrue(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      assertTrue(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex14));
      assertTrue(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex10));
      assertTrue(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex12));
      assertTrue(complex15.equals((Object)complex13));
      assertTrue(complex15.equals((Object)complex6));
      assertTrue(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex7));
      assertTrue(complex15.equals((Object)complex3));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex15.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex8);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex6);
      assertNotNull(complex15);
      
      Complex complex16 = complex0.sinh();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex12));
      assertTrue(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex1));
      assertTrue(complex16.equals((Object)complex7));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex16);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex12);
      assertNotNull(complex16);
      
      boolean boolean1 = complex5.equals(complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex15));
      assertTrue(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex6));
      assertTrue(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex8));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex16);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex8);
      
      Complex complex17 = complex11.subtract(complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex16));
      assertTrue(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex12));
      assertTrue(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex9));
      assertTrue(complex17.equals((Object)complex8));
      assertTrue(complex8.equals((Object)complex13));
      assertTrue(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex15));
      assertFalse(complex8.equals((Object)complex10));
      assertTrue(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex14));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex12));
      assertTrue(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex16));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex4));
      assertTrue(complex11.equals((Object)complex15));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex13));
      assertTrue(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex7));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertTrue(complex17.isNaN());
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex16);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex17, complex1);
      assertSame(complex17, complex3);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex0);
      assertSame(complex17, complex14);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex12);
      assertSame(complex17, complex11);
      assertSame(complex17, complex6);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex9);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertSame(complex11, complex14);
      assertSame(complex11, complex3);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex8);
      assertSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertSame(complex11, complex17);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex7);
      assertNotNull(complex17);
      
      Complex complex18 = (Complex)complex16.readResolve();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex13));
      assertTrue(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex12));
      assertTrue(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex1));
      assertTrue(complex16.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex13));
      assertTrue(complex18.equals((Object)complex1));
      assertTrue(complex18.equals((Object)complex5));
      assertTrue(complex18.equals((Object)complex4));
      assertTrue(complex18.equals((Object)complex0));
      assertTrue(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex15));
      assertTrue(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex8));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex18.isInfinite());
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex16);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex12);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex8);
      assertNotNull(complex18);
      
      Complex complex19 = complex14.log();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertTrue(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex18));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertTrue(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex5));
      assertTrue(complex14.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex13));
      assertTrue(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex15));
      assertFalse(complex8.equals((Object)complex10));
      assertTrue(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex14));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex18));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex17));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex12));
      assertTrue(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex1));
      assertTrue(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex12));
      assertTrue(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex18));
      assertTrue(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex10));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex2.isInfinite());
      assertEquals(1.5707963267948966, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex19.isNaN());
      assertEquals(Double.NaN, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex16);
      assertNotSame(complex14, complex18);
      assertSame(complex14, complex19);
      assertSame(complex14, complex6);
      assertNotSame(complex14, complex10);
      assertSame(complex14, complex3);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex8);
      assertSame(complex14, complex17);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex5);
      assertSame(complex14, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex19, complex1);
      assertSame(complex19, complex11);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex7);
      assertSame(complex19, complex3);
      assertSame(complex19, complex17);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex9);
      assertSame(complex19, complex6);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex8);
      assertSame(complex19, complex14);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex10);
      assertNotNull(complex19);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.valueOf(0.0);
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      
      Complex complex3 = complex2.NaN.sqrt1z();
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      
      Complex complex4 = complex0.multiply(complex2);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      
      Complex complex5 = complex4.I.divide(complex0);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      
      Complex complex6 = complex0.createComplex((-891.019946), 2846.91046467);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      
      Complex complex7 = complex6.I.atan();
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex5);
      
      Complex complex8 = complex7.INF.asin();
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex5);
      assertSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertSame(complex8, complex5);
      
      double double0 = complex7.ONE.getArgument();
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertSame(complex7, complex5);
      
      Complex complex9 = complex1.asin();
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertTrue(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex1));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex0);
      
      Complex complex10 = complex5.asin();
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex4));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertSame(complex5, complex8);
      assertSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertSame(complex5, complex10);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertSame(complex10, complex3);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex2);
      assertSame(complex10, complex8);
      assertSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertSame(complex10, complex5);
      
      Complex complex11 = complex6.multiply(0);
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex10));
      assertTrue(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex4));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(-0.0, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      
      Complex complex12 = complex11.I.add(complex5);
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex10));
      assertTrue(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex11));
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertTrue(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex10));
      assertTrue(complex11.equals((Object)complex0));
      assertTrue(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex9));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(-0.0, complex11.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex12);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertSame(complex5, complex8);
      assertSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex11);
      assertSame(complex5, complex10);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertSame(complex5, complex3);
      assertSame(complex5, complex12);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex2);
      assertSame(complex12, complex8);
      assertSame(complex12, complex7);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex1);
      assertSame(complex12, complex10);
      assertNotSame(complex12, complex6);
      assertSame(complex12, complex3);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex9);
      assertSame(complex12, complex5);
      
      boolean boolean0 = complex8.isInfinite();
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex4);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertSame(complex7, complex3);
      assertSame(complex7, complex12);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex9);
      assertSame(complex7, complex5);
      assertSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex10);
      assertSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertSame(complex8, complex5);
      assertSame(complex8, complex12);
      
      Complex complex13 = complex8.exp();
      assertTrue(complex0.equals((Object)complex9));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex4));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertSame(complex7, complex3);
      assertSame(complex7, complex12);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex9);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertSame(complex7, complex10);
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex13);
      assertNotSame(complex7, complex11);
      assertSame(complex7, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex13);
      assertSame(complex8, complex5);
      assertSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertSame(complex8, complex10);
      assertSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertSame(complex8, complex12);
      assertSame(complex13, complex10);
      assertSame(complex13, complex7);
      assertSame(complex13, complex8);
      assertSame(complex13, complex5);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex3);
      assertSame(complex13, complex12);
      
      Complex complex14 = complex13.INF.reciprocal();
      assertTrue(complex14.equals((Object)complex1));
      assertTrue(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex5));
      assertTrue(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex6));
      assertTrue(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertTrue(complex14.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex6);
      assertSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex4);
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex14);
      assertSame(complex7, complex3);
      assertSame(complex7, complex12);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex9);
      assertSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertSame(complex7, complex10);
      assertNotSame(complex7, complex1);
      assertSame(complex7, complex13);
      assertNotSame(complex7, complex11);
      assertSame(complex7, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex13);
      assertSame(complex8, complex5);
      assertSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertSame(complex8, complex10);
      assertSame(complex8, complex3);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex9);
      assertSame(complex8, complex12);
      assertSame(complex13, complex10);
      assertSame(complex13, complex7);
      assertSame(complex13, complex8);
      assertSame(complex13, complex5);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex14);
      assertSame(complex13, complex3);
      assertSame(complex13, complex12);
      
      Complex complex15 = complex4.ZERO.add(complex2);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex6));
      assertTrue(complex15.equals((Object)complex11));
      assertTrue(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex5));
      assertTrue(complex15.equals((Object)complex0));
      assertTrue(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex13));
      assertTrue(complex15.equals((Object)complex1));
      assertTrue(complex15.equals((Object)complex4));
      assertTrue(complex15.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex6));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex15);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      
      Complex complex16 = complex4.multiply(0);
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex10));
      assertTrue(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex0));
      assertTrue(complex16.equals((Object)complex9));
      assertTrue(complex16.equals((Object)complex14));
      assertTrue(complex16.equals((Object)complex1));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex6));
      assertTrue(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex15));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex12);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex15);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      
      Complex complex17 = (Complex)complex16.INF.readResolve();
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex10));
      assertTrue(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex0));
      assertTrue(complex16.equals((Object)complex9));
      assertTrue(complex16.equals((Object)complex14));
      assertTrue(complex16.equals((Object)complex1));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex6));
      assertTrue(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex16));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex13));
      assertTrue(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex15));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex17.isNaN());
      assertTrue(complex17.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex17.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex17.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex12);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex15);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex5);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex6);
      
      Complex complex18 = Complex.valueOf(2846.91046467, 2614.5);
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(2846.91046467, complex18.getReal(), 0.01);
      assertEquals(2614.5, complex18.getImaginary(), 0.01);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex12);
      
      Complex complex19 = complex18.ONE.subtract(complex1);
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex6));
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(2846.91046467, complex18.getReal(), 0.01);
      assertEquals(2614.5, complex18.getImaginary(), 0.01);
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(1.0, complex19.getReal(), 0.01);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex7);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex19);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex12);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex6);
      
      Complex complex20 = complex15.conjugate();
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex6));
      assertTrue(complex15.equals((Object)complex16));
      assertTrue(complex15.equals((Object)complex11));
      assertTrue(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex18));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex17));
      assertTrue(complex15.equals((Object)complex0));
      assertTrue(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex13));
      assertTrue(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex19));
      assertTrue(complex15.equals((Object)complex4));
      assertTrue(complex15.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex16));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex17));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex19));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex18));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex13));
      assertTrue(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex19));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex18));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex15));
      assertTrue(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex19));
      assertTrue(complex20.equals((Object)complex1));
      assertTrue(complex20.equals((Object)complex2));
      assertTrue(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex3));
      assertTrue(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex10));
      assertTrue(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex17));
      assertTrue(complex20.equals((Object)complex0));
      assertTrue(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex7));
      assertTrue(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex5));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex20.isNaN());
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertEquals(0.0, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex20);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex20);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex19);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex16);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex16);
      
      Complex complex21 = complex6.subtract(complex0);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex10));
      assertTrue(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex15));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals((-891.019946), complex21.getReal(), 0.01);
      assertFalse(complex21.isNaN());
      assertEquals(2846.91046467, complex21.getImaginary(), 0.01);
      
      boolean boolean1 = complex7.isNaN();
      assertFalse(complex0.equals((Object)complex21));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex14));
      assertTrue(complex6.equals((Object)complex21));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex21));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex20));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      
      Complex complex22 = complex20.sqrt();
      assertFalse(complex0.equals((Object)complex21));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex6));
      assertTrue(complex15.equals((Object)complex16));
      assertTrue(complex15.equals((Object)complex11));
      assertTrue(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex21));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex18));
      assertTrue(complex15.equals((Object)complex20));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex17));
      assertTrue(complex15.equals((Object)complex0));
      assertTrue(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex13));
      assertTrue(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex19));
      assertTrue(complex15.equals((Object)complex4));
      assertTrue(complex15.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex16));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex21));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex17));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex19));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertTrue(complex2.equals((Object)complex20));
      assertFalse(complex2.equals((Object)complex18));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertTrue(complex4.equals((Object)complex20));
      assertTrue(complex4.equals((Object)complex14));
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex13));
      assertTrue(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex19));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex18));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertTrue(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex21));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex15));
      assertTrue(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex21));
      assertTrue(complex20.equals((Object)complex1));
      assertTrue(complex20.equals((Object)complex2));
      assertTrue(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex3));
      assertTrue(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex10));
      assertTrue(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex17));
      assertTrue(complex20.equals((Object)complex0));
      assertTrue(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex7));
      assertTrue(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex5));
      assertTrue(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex18));
      assertTrue(complex22.equals((Object)complex0));
      assertTrue(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex17));
      assertTrue(complex22.equals((Object)complex1));
      assertTrue(complex22.equals((Object)complex4));
      assertTrue(complex22.equals((Object)complex14));
      assertTrue(complex22.equals((Object)complex16));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex13));
      assertTrue(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex3));
      assertTrue(complex22.equals((Object)complex2));
      assertTrue(complex22.equals((Object)complex15));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex21));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex20.isNaN());
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertEquals(0.0, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      assertFalse(complex22.isInfinite());
      assertFalse(complex22.isNaN());
      assertEquals(0.0, complex22.getReal(), 0.01);
      
      Complex complex23 = complex7.exp();
      assertFalse(complex0.equals((Object)complex21));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex22));
      assertTrue(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex14));
      assertTrue(complex6.equals((Object)complex21));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex22));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex21));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex20));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex22));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex23.equals((Object)complex14));
      assertFalse(complex23.equals((Object)complex18));
      assertFalse(complex23.equals((Object)complex20));
      assertFalse(complex23.equals((Object)complex2));
      assertFalse(complex23.equals((Object)complex19));
      assertFalse(complex23.equals((Object)complex0));
      assertFalse(complex23.equals((Object)complex16));
      assertFalse(complex23.equals((Object)complex17));
      assertFalse(complex23.equals((Object)complex15));
      assertFalse(complex23.equals((Object)complex22));
      assertFalse(complex23.equals((Object)complex11));
      assertFalse(complex23.equals((Object)complex9));
      assertFalse(complex23.equals((Object)complex21));
      assertFalse(complex23.equals((Object)complex6));
      assertFalse(complex23.equals((Object)complex1));
      assertFalse(complex23.equals((Object)complex4));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertEquals(Double.NaN, complex23.getReal(), 0.01);
      assertFalse(complex23.isInfinite());
      assertTrue(complex23.isNaN());
      assertEquals(Double.NaN, complex23.getImaginary(), 0.01);
      
      boolean boolean2 = complex19.isNaN();
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex12));
      assertTrue(complex1.equals((Object)complex22));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex23));
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex21));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex16));
      assertTrue(complex1.equals((Object)complex20));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex22));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex20));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex19));
      assertFalse(complex18.equals((Object)complex23));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex21));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex20));
      assertFalse(complex19.equals((Object)complex22));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex23));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex21));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(2846.91046467, complex18.getReal(), 0.01);
      assertEquals(2614.5, complex18.getImaginary(), 0.01);
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(1.0, complex19.getReal(), 0.01);
      
      String string0 = complex21.toString();
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex23));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex22));
      assertTrue(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex19));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex18));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex23));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex14));
      assertTrue(complex6.equals((Object)complex21));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex22));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex20));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex10));
      assertTrue(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex22));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex23));
      assertEquals("(-891.019946, 2846.91046467)", string0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(2846.91046467, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals((-891.019946), complex6.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertEquals((-891.019946), complex21.getReal(), 0.01);
      assertFalse(complex21.isNaN());
      assertEquals(2846.91046467, complex21.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.reciprocal();
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertSame(complex0, complex1);
      assertSame(complex1, complex0);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.exp();
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertSame(complex0, complex2);
      assertSame(complex0, complex1);
      assertSame(complex2, complex0);
      assertSame(complex2, complex1);
      assertNotNull(complex2);
      
      Complex complex3 = complex2.NaN.reciprocal();
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertSame(complex0, complex2);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertSame(complex2, complex0);
      assertSame(complex2, complex3);
      assertSame(complex2, complex1);
      assertSame(complex3, complex0);
      assertSame(complex3, complex2);
      assertSame(complex3, complex1);
      assertNotNull(complex3);
      
      Complex complex4 = (Complex)complex2.readResolve();
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex3));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertSame(complex0, complex2);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex3);
      assertSame(complex2, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotNull(complex4);
      
      Complex complex5 = complex3.I.divide(complex0);
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex3.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex4));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex5);
      assertSame(complex2, complex3);
      assertSame(complex2, complex1);
      assertSame(complex3, complex0);
      assertSame(complex3, complex2);
      assertSame(complex3, complex5);
      assertSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertSame(complex5, complex1);
      assertSame(complex5, complex2);
      assertSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertSame(complex5, complex3);
      assertNotNull(complex5);
      
      Complex complex6 = complex0.cosh();
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex6);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex2);
      assertSame(complex6, complex1);
      assertSame(complex6, complex5);
      assertSame(complex6, complex0);
      assertSame(complex6, complex3);
      assertNotNull(complex6);
      
      Complex complex7 = complex0.negate();
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex4));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex6);
      assertSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertSame(complex7, complex3);
      assertSame(complex7, complex1);
      assertSame(complex7, complex5);
      assertSame(complex7, complex2);
      assertSame(complex7, complex6);
      assertNotNull(complex7);
      
      Complex complex8 = complex7.ONE.acos();
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex6);
      assertSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertSame(complex7, complex3);
      assertSame(complex7, complex1);
      assertNotSame(complex7, complex8);
      assertSame(complex7, complex5);
      assertSame(complex7, complex2);
      assertSame(complex7, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotNull(complex8);
      
      Complex complex9 = complex2.subtract((-2533.0393569541));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex8));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertSame(complex0, complex6);
      assertSame(complex2, complex0);
      assertSame(complex2, complex6);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex5);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex3);
      assertSame(complex2, complex1);
      assertSame(complex9, complex2);
      assertSame(complex9, complex7);
      assertSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex4);
      assertSame(complex9, complex6);
      assertSame(complex9, complex3);
      assertSame(complex9, complex0);
      assertSame(complex9, complex1);
      assertNotNull(complex9);
      
      Complex complex10 = complex9.ZERO.negate();
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex8));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertSame(complex0, complex6);
      assertSame(complex2, complex0);
      assertSame(complex2, complex6);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex3);
      assertSame(complex2, complex1);
      assertSame(complex9, complex2);
      assertSame(complex9, complex7);
      assertSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex4);
      assertSame(complex9, complex6);
      assertSame(complex9, complex3);
      assertSame(complex9, complex0);
      assertSame(complex9, complex1);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertNotNull(complex10);
      
      Complex complex11 = Complex.valueOf(967.9629509673);
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(967.9629509673, complex11.getReal(), 0.01);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotNull(complex11);
      
      complex11.hashCode();
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(967.9629509673, complex11.getReal(), 0.01);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      
      Complex complex12 = complex6.acos();
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertSame(complex0, complex6);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex10);
      assertSame(complex6, complex9);
      assertSame(complex6, complex2);
      assertSame(complex6, complex1);
      assertSame(complex6, complex5);
      assertSame(complex6, complex0);
      assertSame(complex6, complex7);
      assertSame(complex6, complex12);
      assertSame(complex6, complex3);
      assertSame(complex12, complex9);
      assertSame(complex12, complex0);
      assertSame(complex12, complex2);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex3);
      assertSame(complex12, complex5);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex7);
      assertSame(complex12, complex1);
      assertNotNull(complex12);
      
      boolean boolean0 = complex2.isNaN();
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(boolean0);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertSame(complex0, complex6);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex11);
      assertSame(complex2, complex6);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex3);
      assertSame(complex2, complex1);
      assertSame(complex2, complex12);
      
      Complex complex13 = complex3.cosh();
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex4));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertSame(complex0, complex13);
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex1);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertSame(complex2, complex6);
      assertSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex11);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertSame(complex2, complex12);
      assertSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertSame(complex3, complex13);
      assertSame(complex3, complex5);
      assertNotSame(complex3, complex8);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex10);
      assertSame(complex3, complex7);
      assertSame(complex3, complex1);
      assertSame(complex3, complex9);
      assertNotSame(complex3, complex4);
      assertSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertSame(complex13, complex6);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex5);
      assertSame(complex13, complex0);
      assertSame(complex13, complex12);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertSame(complex13, complex9);
      assertSame(complex13, complex1);
      assertSame(complex13, complex7);
      assertSame(complex13, complex2);
      assertNotNull(complex13);
      
      Complex complex14 = complex13.NaN.acos();
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex11));
      assertTrue(complex14.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex4));
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertNotSame(complex14, complex8);
      assertSame(complex14, complex3);
      assertSame(complex14, complex7);
      assertSame(complex14, complex6);
      assertSame(complex14, complex0);
      assertSame(complex14, complex5);
      assertNotSame(complex14, complex10);
      assertSame(complex14, complex13);
      assertSame(complex14, complex12);
      assertSame(complex14, complex2);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertSame(complex14, complex1);
      assertSame(complex14, complex9);
      assertSame(complex0, complex13);
      assertSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex1);
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertSame(complex2, complex6);
      assertSame(complex2, complex9);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex11);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertSame(complex2, complex12);
      assertSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertSame(complex3, complex13);
      assertSame(complex3, complex5);
      assertNotSame(complex3, complex8);
      assertSame(complex3, complex14);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex10);
      assertSame(complex3, complex7);
      assertSame(complex3, complex1);
      assertSame(complex3, complex9);
      assertNotSame(complex3, complex4);
      assertSame(complex13, complex14);
      assertSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertSame(complex13, complex6);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex5);
      assertSame(complex13, complex0);
      assertSame(complex13, complex12);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertSame(complex13, complex9);
      assertSame(complex13, complex1);
      assertSame(complex13, complex7);
      assertSame(complex13, complex2);
      assertNotNull(complex14);
      
      Complex complex15 = complex12.ZERO.negate();
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex12));
      assertTrue(complex15.equals((Object)complex10));
      assertTrue(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(-0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertSame(complex0, complex13);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex1);
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex10);
      assertSame(complex6, complex9);
      assertSame(complex6, complex2);
      assertSame(complex6, complex1);
      assertSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex14);
      assertSame(complex6, complex13);
      assertSame(complex6, complex5);
      assertSame(complex6, complex0);
      assertSame(complex6, complex12);
      assertSame(complex6, complex3);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex3);
      assertSame(complex12, complex13);
      assertSame(complex12, complex5);
      assertSame(complex12, complex14);
      assertSame(complex12, complex9);
      assertSame(complex12, complex2);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex7);
      assertSame(complex12, complex1);
      assertNotNull(complex15);
      
      Complex complex16 = complex1.divide(761.23996);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex15));
      assertTrue(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertTrue(complex16.isNaN());
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertSame(complex0, complex13);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex1);
      assertSame(complex0, complex16);
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertSame(complex1, complex12);
      assertSame(complex1, complex9);
      assertSame(complex1, complex13);
      assertSame(complex1, complex5);
      assertSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex14);
      assertSame(complex1, complex6);
      assertSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertSame(complex1, complex7);
      assertSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex15);
      assertSame(complex16, complex12);
      assertSame(complex16, complex3);
      assertSame(complex16, complex13);
      assertSame(complex16, complex5);
      assertSame(complex16, complex0);
      assertSame(complex16, complex9);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex4);
      assertSame(complex16, complex14);
      assertNotSame(complex16, complex8);
      assertSame(complex16, complex6);
      assertNotSame(complex16, complex11);
      assertSame(complex16, complex1);
      assertNotSame(complex16, complex15);
      assertSame(complex16, complex7);
      assertSame(complex16, complex2);
      assertNotNull(complex16);
      
      Complex complex17 = complex12.subtract(complex13);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex10));
      assertTrue(complex17.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertTrue(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex15));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex17.isNaN());
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertTrue(complex13.isNaN());
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertSame(complex0, complex13);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex1);
      assertSame(complex0, complex16);
      assertSame(complex0, complex17);
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertSame(complex2, complex16);
      assertSame(complex2, complex6);
      assertSame(complex2, complex9);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex1);
      assertSame(complex2, complex17);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex11);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertSame(complex2, complex12);
      assertSame(complex17, complex14);
      assertSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertSame(complex17, complex6);
      assertNotSame(complex17, complex4);
      assertSame(complex17, complex9);
      assertSame(complex17, complex1);
      assertSame(complex17, complex7);
      assertSame(complex17, complex2);
      assertSame(complex17, complex16);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex10);
      assertSame(complex17, complex13);
      assertSame(complex17, complex5);
      assertSame(complex17, complex0);
      assertSame(complex17, complex12);
      assertSame(complex3, complex16);
      assertSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertSame(complex3, complex13);
      assertSame(complex3, complex5);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex8);
      assertSame(complex3, complex14);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertSame(complex3, complex17);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex10);
      assertSame(complex3, complex7);
      assertSame(complex3, complex1);
      assertSame(complex3, complex9);
      assertNotSame(complex3, complex4);
      assertSame(complex6, complex17);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex10);
      assertSame(complex6, complex9);
      assertSame(complex6, complex2);
      assertSame(complex6, complex1);
      assertSame(complex6, complex16);
      assertSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex14);
      assertSame(complex6, complex13);
      assertSame(complex6, complex5);
      assertSame(complex6, complex0);
      assertSame(complex6, complex12);
      assertSame(complex6, complex3);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex17);
      assertSame(complex12, complex3);
      assertSame(complex12, complex13);
      assertSame(complex12, complex5);
      assertSame(complex12, complex14);
      assertSame(complex12, complex9);
      assertSame(complex12, complex16);
      assertSame(complex12, complex2);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex7);
      assertSame(complex12, complex1);
      assertSame(complex13, complex14);
      assertSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertSame(complex13, complex6);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex5);
      assertSame(complex13, complex0);
      assertSame(complex13, complex12);
      assertNotSame(complex13, complex11);
      assertSame(complex13, complex17);
      assertNotSame(complex13, complex10);
      assertSame(complex13, complex9);
      assertSame(complex13, complex1);
      assertNotSame(complex13, complex15);
      assertSame(complex13, complex7);
      assertSame(complex13, complex2);
      assertSame(complex13, complex16);
      assertNotNull(complex17);
      
      String string0 = complex7.toString();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex8));
      assertTrue(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex10));
      assertEquals("(NaN, NaN)", string0);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertSame(complex0, complex13);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex1);
      assertSame(complex0, complex16);
      assertSame(complex0, complex17);
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertSame(complex7, complex16);
      assertNotSame(complex7, complex4);
      assertSame(complex7, complex9);
      assertSame(complex7, complex3);
      assertSame(complex7, complex1);
      assertSame(complex7, complex13);
      assertSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertSame(complex7, complex0);
      assertSame(complex7, complex12);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex8);
      assertSame(complex7, complex2);
      assertSame(complex7, complex17);
      assertSame(complex7, complex14);
      assertNotSame(complex7, complex11);
      assertSame(complex7, complex6);
      assertNotNull(string0);
      
      Complex complex18 = complex12.asin();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex15));
      assertTrue(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex15));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex18.isNaN());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertSame(complex0, complex18);
      assertSame(complex0, complex13);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex1);
      assertSame(complex0, complex16);
      assertSame(complex0, complex17);
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex18, complex4);
      assertSame(complex18, complex6);
      assertNotSame(complex18, complex8);
      assertSame(complex18, complex3);
      assertSame(complex18, complex7);
      assertSame(complex18, complex16);
      assertSame(complex18, complex9);
      assertSame(complex18, complex1);
      assertNotSame(complex18, complex10);
      assertSame(complex18, complex12);
      assertNotSame(complex18, complex11);
      assertSame(complex18, complex17);
      assertNotSame(complex18, complex15);
      assertSame(complex18, complex13);
      assertSame(complex18, complex0);
      assertSame(complex18, complex5);
      assertSame(complex18, complex2);
      assertSame(complex18, complex14);
      assertSame(complex6, complex17);
      assertSame(complex6, complex18);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex10);
      assertSame(complex6, complex9);
      assertSame(complex6, complex2);
      assertSame(complex6, complex1);
      assertSame(complex6, complex16);
      assertSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex14);
      assertSame(complex6, complex13);
      assertSame(complex6, complex5);
      assertSame(complex6, complex0);
      assertSame(complex6, complex12);
      assertSame(complex6, complex3);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex17);
      assertSame(complex12, complex3);
      assertSame(complex12, complex18);
      assertSame(complex12, complex13);
      assertSame(complex12, complex5);
      assertSame(complex12, complex14);
      assertSame(complex12, complex9);
      assertSame(complex12, complex16);
      assertSame(complex12, complex2);
      assertSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex7);
      assertSame(complex12, complex1);
      assertNotNull(complex18);
      
      Complex complex19 = (Complex)complex3.readResolve();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex15));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex11));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex8));
      assertTrue(complex19.equals((Object)complex2));
      assertTrue(complex19.equals((Object)complex1));
      assertTrue(complex19.equals((Object)complex9));
      assertTrue(complex19.equals((Object)complex18));
      assertTrue(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex11));
      assertTrue(complex19.equals((Object)complex6));
      assertTrue(complex19.equals((Object)complex17));
      assertTrue(complex19.equals((Object)complex16));
      assertTrue(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex8));
      assertTrue(complex19.equals((Object)complex14));
      assertTrue(complex19.equals((Object)complex5));
      assertTrue(complex19.equals((Object)complex13));
      assertTrue(complex19.equals((Object)complex0));
      assertTrue(complex19.equals((Object)complex12));
      assertTrue(complex19.equals((Object)complex3));
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertTrue(complex19.isNaN());
      assertEquals(Double.NaN, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertSame(complex0, complex18);
      assertSame(complex0, complex13);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex15);
      assertSame(complex0, complex2);
      assertSame(complex0, complex12);
      assertSame(complex0, complex1);
      assertSame(complex0, complex16);
      assertSame(complex0, complex17);
      assertSame(complex0, complex14);
      assertNotSame(complex0, complex11);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex19);
      assertSame(complex0, complex7);
      assertSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertSame(complex2, complex16);
      assertSame(complex2, complex6);
      assertSame(complex2, complex9);
      assertSame(complex2, complex14);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex15);
      assertSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex1);
      assertSame(complex2, complex17);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex11);
      assertSame(complex2, complex5);
      assertNotSame(complex2, complex10);
      assertSame(complex2, complex18);
      assertSame(complex2, complex13);
      assertSame(complex2, complex3);
      assertSame(complex2, complex12);
      assertSame(complex3, complex16);
      assertSame(complex3, complex6);
      assertSame(complex3, complex2);
      assertSame(complex3, complex13);
      assertSame(complex3, complex5);
      assertNotSame(complex3, complex19);
      assertSame(complex3, complex18);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex8);
      assertSame(complex3, complex14);
      assertSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertSame(complex3, complex17);
      assertSame(complex3, complex12);
      assertNotSame(complex3, complex10);
      assertSame(complex3, complex7);
      assertSame(complex3, complex1);
      assertSame(complex3, complex9);
      assertNotSame(complex3, complex4);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex18);
      assertNotNull(complex19);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = Complex.valueOf(0.0, (-1.0));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      List<Complex> list0 = complex0.nthRoot(3198);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(3198, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(complex0, complex1);
      assertNotNull(list0);
      assertTrue(list0.contains(complex0));
      
      Complex complex2 = complex0.I.conjugate();
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotNull(complex2);
      
      Complex complex3 = complex2.NaN.cos();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1.0), complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertTrue(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotNull(complex3);
      
      try { 
        complex2.I.nthRoot((-303));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -303
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertNotNull(complex0);
      
      Complex complex1 = complex0.I.log();
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
      
      complex0.hashCode();
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertNotSame(complex0, complex1);
      
      Complex complex2 = complex1.log();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.4515827052894548, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.5707963267948966, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotNull(complex2);
      
      Complex complex3 = (Complex)complex2.I.readResolve();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.4515827052894548, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.5707963267948966, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotNull(complex3);
      
      Complex complex4 = complex0.sqrt();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotNull(complex4);
      
      Complex complex5 = Complex.valueOf(2731.1320767127663);
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.isNaN());
      assertEquals(2731.1320767127663, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotNull(complex5);
      
      Complex complex6 = complex1.sqrt1z();
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.8620958891185866, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotNull(complex6);
      
      Complex complex7 = Complex.INF;
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotNull(complex7);
      
      Complex complex8 = complex6.INF.add(complex7);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex5));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.8620958891185866, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getImaginary(), 0.01);
      assertTrue(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertTrue(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertNotNull(complex8);
      
      Complex complex9 = complex0.divide(complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertSame(complex4, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotNull(complex9);
      
      Complex complex10 = (Complex)complex1.readResolve();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(1.5707963267948966, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotNull(complex10);
      
      Complex complex11 = complex0.ONE.sin();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotNull(complex11);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = complex1.equals(object0);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(boolean0);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      
      Complex complex12 = complex1.divide(2731.1320767127663);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex8));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(5.751447687896266E-4, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotNull(complex12);
      
      Complex complex13 = Complex.valueOf((-113.63898), 0.0);
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertEquals((-113.63898), complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotNull(complex13);
      
      Complex complex14 = complex13.sqrt1z();
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertEquals((-113.63898), complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertEquals(113.63458001612186, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotNull(complex14);
      
      Complex complex15 = complex14.ONE.cosh();
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex9));
      assertEquals((-113.63898), complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertEquals(113.63458001612186, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(1.5430806348152437, complex15.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isNaN());
      assertFalse(complex15.isInfinite());
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex9);
      assertNotNull(complex15);
      
      Complex complex16 = Complex.valueOf(2731.1320767127663);
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex12));
      assertTrue(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(2731.1320767127663, complex16.getReal(), 0.01);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex15);
      assertNotNull(complex16);
      
      Complex complex17 = complex5.reciprocal();
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex17.isInfinite());
      assertEquals(3.661485317852573E-4, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(2731.1320767127663, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex7);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex12);
      assertNotNull(complex17);
      
      ComplexField complexField0 = complex5.getField();
      assertTrue(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.isNaN());
      assertEquals(2731.1320767127663, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex12);
      assertNotNull(complexField0);
      
      Complex complex18 = complex15.sinh();
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex17));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex17));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex17));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex16));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex0));
      assertEquals((-113.63898), complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertEquals(113.63458001612186, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(1.5430806348152437, complex15.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isNaN());
      assertFalse(complex15.isInfinite());
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(2.2326303196791324, complex18.getReal(), 0.01);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex18);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex9);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex0);
      assertNotNull(complex18);
      
      ComplexField complexField1 = complex0.getField();
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertNotSame(complex0, complex18);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertSame(complexField1, complexField0);
      assertNotNull(complexField1);
      
      double double0 = complex13.abs();
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex17));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex18));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertEquals(113.63898, double0, 0.01);
      assertEquals((-113.63898), complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex13.isInfinite());
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      
      double double1 = complex1.getImaginary();
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex15));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.5707963267948966, double1, 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex1.isNaN());
      assertEquals(1.5707963267948966, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex18);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex12);
      
      Complex complex19 = complex4.log();
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex7));
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertTrue(complex19.isNaN());
      assertNotSame(complex0, complex18);
      assertSame(complex0, complex9);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertSame(complex0, complex19);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex18);
      assertSame(complex4, complex19);
      assertSame(complex4, complex9);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex11);
      assertSame(complex19, complex4);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex12);
      assertSame(complex19, complex0);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex6);
      assertSame(complex19, complex9);
      assertNotSame(complex19, complex7);
      assertNotNull(complex19);
      
      Complex complex20 = complex16.pow(2419.137521298861);
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex12));
      assertTrue(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex18));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex19));
      assertFalse(complex16.equals((Object)complex15));
      assertTrue(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex15));
      assertTrue(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex16));
      assertTrue(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex5));
      assertTrue(complex20.equals((Object)complex0));
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(2731.1320767127663, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertFalse(complex20.isInfinite());
      assertTrue(complex20.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex20.getReal(), 0.01);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex15);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex4);
      assertNotNull(complex20);
      
      Complex complex21 = Complex.valueOf(0.0, 0.0);
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex13));
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertFalse(complex21.isNaN());
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex13);
      assertNotNull(complex21);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(3822.65713304, (-45.4807));
      assertEquals((-45.4807), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(3822.65713304, complex0.getReal(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.equals((Object)complex0));
      assertEquals((-45.4807), complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(3822.65713304, complex0.getReal(), 0.01);
      assertEquals(3822.65713304, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(45.4807, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotNull(complex1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1885.30853664707));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1885.30853664707), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(2.0599991793068063E262);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(2.0599991793068063E262, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotNull(complex1);
      
      Complex complex2 = complex0.pow(complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals((-1885.30853664707), complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(2.0599991793068063E262, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotNull(complex2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 606.25984);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex1 = Complex.ONE;
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      
      double double0 = complex0.NaN.abs();
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      
      Complex complex2 = complex1.NaN.divide(complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      Complex complex3 = complex2.ONE.createComplex(606.25984, 606.25984);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(606.25984, complex3.getReal(), 0.01);
      assertEquals(606.25984, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      
      Complex complex4 = complex2.ZERO.createComplex(606.25984, 606.25984);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(606.25984, complex4.getReal(), 0.01);
      assertEquals(606.25984, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      
      Complex complex5 = complex0.ZERO.multiply(complex1);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      
      Complex complex6 = complex5.multiply(606.25984);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      
      Complex complex7 = complex5.ONE.cosh();
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex7.isInfinite());
      assertEquals(1.5430806348152437, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex1);
      
      boolean boolean0 = complex0.isNaN();
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(boolean0);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      
      Complex complex8 = complex5.divide((-1.0));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      
      Complex complex9 = complex5.sqrt();
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertTrue(complex9.equals((Object)complex5));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      
      double double1 = complex9.abs();
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertTrue(complex9.equals((Object)complex5));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      
      Complex complex10 = Complex.NaN;
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex0);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      
      Complex complex11 = complex1.I.tan();
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.7615941559557649, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      
      Complex complex12 = complex8.subtract(complex10);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex9));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertSame(complex10, complex12);
      assertNotSame(complex10, complex8);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex2);
      assertSame(complex12, complex10);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      
      Complex complex13 = complex12.INF.negate();
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex11));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getImaginary(), 0.01);
      assertTrue(complex13.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex10);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertSame(complex10, complex12);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex13);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex2);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex10);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex5);
      
      Complex complex14 = complex12.NaN.exp();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex14, complex13);
      assertSame(complex14, complex12);
      assertSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex11);
      assertSame(complex14, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex10);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertSame(complex10, complex14);
      assertSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertSame(complex10, complex12);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex13);
      assertNotSame(complex12, complex4);
      assertSame(complex12, complex2);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertSame(complex12, complex10);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex14);
      assertNotSame(complex12, complex5);
      
      Complex complex15 = complex14.INF.sinh();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex7));
      assertTrue(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex13));
      assertTrue(complex15.equals((Object)complex12));
      assertTrue(complex15.equals((Object)complex10));
      assertTrue(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex5));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex14));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex10);
      
      complex14.INF.getField();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertTrue(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex14));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex9));
      assertTrue(complex12.equals((Object)complex15));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertTrue(complex14.isNaN());
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      
      Complex complex16 = complex2.subtract(0.0);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex11));
      assertTrue(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex16.isNaN());
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      
      Complex complex17 = (Complex)complex12.NaN.readResolve();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex7));
      assertTrue(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex13));
      assertTrue(complex17.equals((Object)complex10));
      assertTrue(complex17.equals((Object)complex16));
      assertTrue(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex11));
      assertTrue(complex17.equals((Object)complex12));
      assertTrue(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex16));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex16));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex14));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex9));
      assertTrue(complex12.equals((Object)complex15));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertTrue(complex17.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      
      Complex complex18 = complex16.NaN.log();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertTrue(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertTrue(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex11));
      assertTrue(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex0));
      assertTrue(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex13));
      assertTrue(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex16.isNaN());
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertTrue(complex18.isNaN());
      
      double double2 = complex18.I.abs();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertTrue(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertTrue(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex11));
      assertTrue(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex0));
      assertTrue(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex13));
      assertTrue(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex16.isNaN());
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(Double.NaN, complex18.getReal(), 0.01);
      assertTrue(complex18.isNaN());
      
      boolean boolean1 = complex6.isInfinite();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex17));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex18));
      assertTrue(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex15));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      
      Complex complex19 = complex7.multiply(complex12);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex17));
      assertTrue(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex11));
      assertTrue(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex13));
      assertTrue(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex18));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex17));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex14));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex17));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertTrue(complex12.equals((Object)complex15));
      assertTrue(complex12.equals((Object)complex17));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex7.isInfinite());
      assertEquals(1.5430806348152437, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.NaN, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertTrue(complex19.isNaN());
      assertFalse(complex8.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertTrue(complex12.isNaN());
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      
      Complex complex20 = complex10.cosh();
      assertFalse(complex20.equals((Object)complex0));
      assertTrue(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex6));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex20.equals((Object)complex8));
      assertTrue(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex15));
      assertFalse(complex10.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex17));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex13));
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertTrue(complex20.isNaN());
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      
      Complex complex21 = complex1.log();
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex20));
      assertTrue(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex3));
      assertFalse(complex21.equals((Object)complex19));
      assertTrue(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex17));
      assertTrue(complex21.equals((Object)complex8));
      assertTrue(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertFalse(complex21.isInfinite());
      assertFalse(complex21.isNaN());
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      
      double double3 = complex0.getReal();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex22 = complex4.acos();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex21));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex20));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex21));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertTrue(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex20));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex19));
      assertFalse(complex4.equals((Object)complex21));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex18));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex0));
      assertFalse(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex15));
      assertFalse(complex22.equals((Object)complex1));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex16));
      assertFalse(complex22.equals((Object)complex17));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex21));
      assertFalse(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex2));
      assertFalse(complex22.equals((Object)complex3));
      assertFalse(complex22.equals((Object)complex6));
      assertFalse(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(606.25984, complex4.getReal(), 0.01);
      assertEquals(606.25984, complex4.getImaginary(), 0.01);
      assertEquals((-7.4470294438878994), complex22.getImaginary(), 0.01);
      assertFalse(complex22.isInfinite());
      assertEquals(0.7853985034863127, complex22.getReal(), 0.01);
      assertFalse(complex22.isNaN());
      
      Complex complex23 = complex3.cosh();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex22));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex21));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex22));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex19));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex20));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex22));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex21));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertTrue(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex16));
      assertFalse(complex3.equals((Object)complex17));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex15));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex14));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex19));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex20));
      assertFalse(complex3.equals((Object)complex18));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex21));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex22));
      assertTrue(complex3.equals((Object)complex4));
      assertFalse(complex23.equals((Object)complex8));
      assertFalse(complex23.equals((Object)complex11));
      assertFalse(complex23.equals((Object)complex21));
      assertFalse(complex23.equals((Object)complex10));
      assertFalse(complex23.equals((Object)complex22));
      assertFalse(complex23.equals((Object)complex5));
      assertFalse(complex23.equals((Object)complex15));
      assertFalse(complex23.equals((Object)complex0));
      assertFalse(complex23.equals((Object)complex4));
      assertFalse(complex23.equals((Object)complex16));
      assertFalse(complex23.equals((Object)complex17));
      assertFalse(complex23.equals((Object)complex1));
      assertFalse(complex23.equals((Object)complex12));
      assertFalse(complex23.equals((Object)complex13));
      assertFalse(complex23.equals((Object)complex14));
      assertFalse(complex23.equals((Object)complex7));
      assertFalse(complex23.equals((Object)complex9));
      assertFalse(complex23.equals((Object)complex18));
      assertFalse(complex23.equals((Object)complex2));
      assertFalse(complex23.equals((Object)complex3));
      assertFalse(complex23.equals((Object)complex6));
      assertFalse(complex23.equals((Object)complex20));
      assertFalse(complex23.equals((Object)complex19));
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(606.25984, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(606.25984, complex3.getReal(), 0.01);
      assertEquals(606.25984, complex3.getImaginary(), 0.01);
      assertEquals(6.660666609991565E261, complex23.getImaginary(), 0.01);
      assertEquals((-9.846496908128271E262), complex23.getReal(), 0.01);
      assertFalse(complex23.isInfinite());
      assertFalse(complex23.isNaN());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.ZERO.divide(0.0);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      double double0 = complex1.ONE.getArgument();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex1.INF.negate();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      Complex complex3 = (Complex)complex0.I.readResolve();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      
      Complex complex4 = complex1.ZERO.atan();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      
      Complex complex5 = complex0.atan();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      
      Complex complex6 = complex5.negate();
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals((-0.7853981633974483), complex6.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      
      Complex complex7 = complex5.log();
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.2415644752704905), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      
      Complex complex8 = Complex.valueOf(0.0);
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      
      Complex complex9 = complex8.I.add(complex0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex4));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex8.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertEquals(1.0, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      
      Complex complex10 = complex7.ONE.tanh();
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.2415644752704905), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex10.isNaN());
      assertFalse(complex10.isInfinite());
      assertEquals(0.7615941559557649, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex7);
      
      Complex complex11 = complex7.I.multiply(complex6);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex3));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals((-0.7853981633974483), complex6.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.2415644752704905), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals((-0.7853981633974483), complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex3);
      
      Complex complex12 = complex11.ONE.subtract(0.0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex10));
      assertTrue(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex4));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals((-0.7853981633974483), complex6.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.2415644752704905), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals((-0.7853981633974483), complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertEquals(1.0, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex3);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex0);
      
      String string0 = complex11.NaN.toString();
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex3));
      assertEquals("(NaN, NaN)", string0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals((-0.7853981633974483), complex6.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.2415644752704905), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals((-0.7853981633974483), complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex5);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex3);
      
      Complex complex13 = complex0.I.divide((-4049.1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex7));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex13.isInfinite());
      assertEquals((-2.4696846212738635E-4), complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex7);
      
      Complex complex14 = complex2.sqrt();
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex6));
      assertTrue(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      
      Complex complex15 = complex14.divide(complex9);
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex6));
      assertTrue(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex0));
      assertTrue(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex14));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex4));
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertEquals(1.0, complex9.getImaginary(), 0.01);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex10);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex3);
      assertSame(complex15, complex1);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex14);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex4);
      
      double double1 = complex14.getArgument();
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex6));
      assertTrue(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex9));
      assertTrue(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex3);
      assertSame(complex1, complex15);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      
      Complex complex16 = complex6.cos();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex5));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex16.isNaN());
      assertFalse(complex16.isInfinite());
      assertEquals(0.7071067811865476, complex16.getReal(), 0.01);
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals((-0.7853981633974483), complex6.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex10);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex10);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex5);
      
      Complex complex17 = complex5.cosh();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(1.3246090892520057, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex10);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex16);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex1);
      
      Complex complex18 = complex7.sqrt1z();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(0.970384771256893, complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.2415644752704905), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex10);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex15);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex1);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      
      complex18.getField();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(0.970384771256893, complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.2415644752704905), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      
      double double2 = complex2.getImaginary();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex18));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex18));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, double2, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      
      Complex complex19 = complex8.pow(Double.NaN);
      assertTrue(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex15));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex14));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex17));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex18));
      assertEquals(Double.NaN, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isInfinite());
      assertTrue(complex19.isNaN());
      assertEquals(Double.NaN, complex19.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      
      Complex complex20 = complex8.subtract(complex6);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex16));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex19));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex18));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex19));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex17));
      assertFalse(complex20.equals((Object)complex12));
      assertFalse(complex20.equals((Object)complex3));
      assertFalse(complex20.equals((Object)complex7));
      assertFalse(complex20.equals((Object)complex2));
      assertFalse(complex20.equals((Object)complex14));
      assertFalse(complex20.equals((Object)complex15));
      assertFalse(complex20.equals((Object)complex8));
      assertFalse(complex20.equals((Object)complex0));
      assertFalse(complex20.equals((Object)complex1));
      assertFalse(complex20.equals((Object)complex10));
      assertFalse(complex20.equals((Object)complex9));
      assertFalse(complex20.equals((Object)complex6));
      assertTrue(complex20.equals((Object)complex5));
      assertFalse(complex20.equals((Object)complex4));
      assertFalse(complex20.equals((Object)complex13));
      assertFalse(complex20.equals((Object)complex19));
      assertFalse(complex20.equals((Object)complex18));
      assertFalse(complex20.equals((Object)complex16));
      assertFalse(complex20.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex15));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex14));
      assertTrue(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex16));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex17));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex19));
      assertFalse(complex8.equals((Object)complex18));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals((-0.7853981633974483), complex6.getReal(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex20.getReal(), 0.01);
      assertFalse(complex20.isInfinite());
      assertFalse(complex8.isInfinite());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isNaN());
      
      boolean boolean0 = complex7.isNaN();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex17));
      assertFalse(complex5.equals((Object)complex16));
      assertTrue(complex5.equals((Object)complex20));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex14));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex15));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex19));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex18));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex19));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex20));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex18));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(boolean0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.7853981633974483, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.2415644752704905), complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      
      Complex complex21 = complex0.sin();
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex3));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex21.getReal(), 0.01);
      assertFalse(complex21.isNaN());
      assertFalse(complex21.isInfinite());
      
      boolean boolean1 = complex21.equals((Object) null);
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex13));
      assertFalse(complex21.equals((Object)complex14));
      assertFalse(complex21.equals((Object)complex15));
      assertFalse(complex21.equals((Object)complex9));
      assertFalse(complex21.equals((Object)complex11));
      assertFalse(complex21.equals((Object)complex8));
      assertFalse(complex21.equals((Object)complex18));
      assertFalse(complex21.equals((Object)complex20));
      assertFalse(complex21.equals((Object)complex5));
      assertFalse(complex21.equals((Object)complex0));
      assertFalse(complex21.equals((Object)complex1));
      assertFalse(complex21.equals((Object)complex10));
      assertFalse(complex21.equals((Object)complex16));
      assertFalse(complex21.equals((Object)complex19));
      assertFalse(complex21.equals((Object)complex12));
      assertFalse(complex21.equals((Object)complex6));
      assertFalse(complex21.equals((Object)complex17));
      assertFalse(complex21.equals((Object)complex2));
      assertFalse(complex21.equals((Object)complex4));
      assertFalse(complex21.equals((Object)complex7));
      assertFalse(complex21.equals((Object)complex3));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex21.getReal(), 0.01);
      assertFalse(complex21.isNaN());
      assertFalse(complex21.isInfinite());
      
      Complex complex22 = complex0.sqrt1z();
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex2));
      assertFalse(complex22.equals((Object)complex12));
      assertFalse(complex22.equals((Object)complex3));
      assertTrue(complex22.equals((Object)complex8));
      assertFalse(complex22.equals((Object)complex20));
      assertFalse(complex22.equals((Object)complex17));
      assertFalse(complex22.equals((Object)complex16));
      assertFalse(complex22.equals((Object)complex21));
      assertFalse(complex22.equals((Object)complex15));
      assertFalse(complex22.equals((Object)complex13));
      assertFalse(complex22.equals((Object)complex7));
      assertFalse(complex22.equals((Object)complex5));
      assertFalse(complex22.equals((Object)complex9));
      assertFalse(complex22.equals((Object)complex11));
      assertFalse(complex22.equals((Object)complex6));
      assertTrue(complex22.equals((Object)complex4));
      assertFalse(complex22.equals((Object)complex14));
      assertFalse(complex22.equals((Object)complex19));
      assertFalse(complex22.equals((Object)complex1));
      assertFalse(complex22.equals((Object)complex10));
      assertFalse(complex22.equals((Object)complex18));
      assertFalse(complex22.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex22.isNaN());
      assertFalse(complex22.isInfinite());
      assertEquals(0.0, complex22.getReal(), 0.01);
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      
      Complex complex23 = complex13.sqrt1z();
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex22));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertFalse(complex23.equals((Object)complex4));
      assertFalse(complex23.equals((Object)complex15));
      assertFalse(complex23.equals((Object)complex0));
      assertFalse(complex23.equals((Object)complex13));
      assertFalse(complex23.equals((Object)complex7));
      assertFalse(complex23.equals((Object)complex18));
      assertFalse(complex23.equals((Object)complex19));
      assertFalse(complex23.equals((Object)complex11));
      assertFalse(complex23.equals((Object)complex21));
      assertFalse(complex23.equals((Object)complex6));
      assertFalse(complex23.equals((Object)complex16));
      assertFalse(complex23.equals((Object)complex2));
      assertFalse(complex23.equals((Object)complex12));
      assertFalse(complex23.equals((Object)complex3));
      assertFalse(complex23.equals((Object)complex22));
      assertFalse(complex23.equals((Object)complex17));
      assertFalse(complex23.equals((Object)complex20));
      assertFalse(complex23.equals((Object)complex8));
      assertFalse(complex23.equals((Object)complex1));
      assertFalse(complex23.equals((Object)complex10));
      assertFalse(complex23.equals((Object)complex14));
      assertFalse(complex23.equals((Object)complex5));
      assertFalse(complex23.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex18));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex20));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex22));
      assertFalse(complex13.equals((Object)complex19));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex21));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex17));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex7));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex23.isInfinite());
      assertFalse(complex23.isNaN());
      assertEquals(1.00000003049671, complex23.getReal(), 0.01);
      assertEquals(0.0, complex23.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals((-2.4696846212738635E-4), complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getReal(), 0.01);
      
      boolean boolean2 = complex13.isInfinite();
      assertFalse(complex0.equals((Object)complex21));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex18));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex20));
      assertFalse(complex0.equals((Object)complex22));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex23));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex19));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex12));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex15));
      assertFalse(complex13.equals((Object)complex18));
      assertFalse(complex13.equals((Object)complex23));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex20));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex22));
      assertFalse(complex13.equals((Object)complex19));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex16));
      assertFalse(complex13.equals((Object)complex21));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex17));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(boolean2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex13.isInfinite());
      assertEquals((-2.4696846212738635E-4), complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(-0.0, complex13.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = Complex.valueOf(175.8207935907049, (-228.9));
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.INF.createComplex(0.0, (-228.9));
      Complex complex5 = complex4.NaN.divide(complex1);
      complex5.ONE.createComplex(388.52, (-20.0));
      Complex complex6 = complex3.ONE.sqrt();
      complex2.hashCode();
      Complex complex7 = Complex.valueOf(0.0);
      Complex complex8 = complex7.sin();
      complex1.negate();
      complex3.INF.exp();
      complex8.INF.reciprocal();
      Complex complex9 = complex1.NaN.sqrt1z();
      Complex complex10 = complex8.NaN.divide(complex0);
      complex0.hashCode();
      complex1.sin();
      Complex complex11 = complex1.tan();
      assertSame(complex11, complex9);
      
      complex7.getField();
      Complex complex12 = complex7.sinh();
      Complex complex13 = complex10.ZERO.atan();
      assertEquals(0.0, complex13.getReal(), 0.01);
      
      complex4.exp();
      complex10.getField();
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      complex1.tanh();
      Complex complex14 = complex12.sinh();
      Complex complex15 = (Complex)complex6.readResolve();
      assertEquals(1.0, complex15.getReal(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals((-228.9), complex2.getImaginary(), 0.01);
      
      Complex complex16 = complex14.sinh();
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertTrue(complex16.equals((Object)complex13));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sin();
      complex3.NaN.getArgument();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex2.createComplex(0.0, 0.0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.NaN.multiply(0);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      complex5.I.divide(complex1);
      Complex complex8 = complex2.I.add(complex0);
      Complex complex9 = complex4.createComplex(0.0, Double.NaN);
      Complex complex10 = complex0.cos();
      Complex complex11 = complex5.sqrt1z();
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex0.multiply(complex9);
      Complex complex13 = complex12.tanh();
      assertSame(complex13, complex3);
      
      Complex.valueOf(0.0, 0.0);
      complex4.getArgument();
      complex10.isInfinite();
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      
      complex0.getField();
      Complex complex14 = Complex.valueOf(1.0, 0.0);
      assertTrue(complex14.equals((Object)complex11));
      
      complex8.isNaN();
      Complex complex15 = Complex.valueOf(0.0);
      assertTrue(complex15.equals((Object)complex6));
      
      complex8.getImaginary();
      assertSame(complex2, complex7);
      
      Complex complex16 = Complex.valueOf((-1048.0));
      assertFalse(complex16.equals((Object)complex9));
  }
}
