/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:59:50 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-4.0873400635183405E225), 2537.1273194);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-2856.8759723));
      Complex complex1 = Complex.valueOf(2774.53251275648);
      Complex complex2 = Complex.valueOf((-2856.8759723), Double.POSITIVE_INFINITY);
      Complex complex3 = Complex.INF;
      complex2.multiply(complex3);
      Complex complex4 = complex1.sinh();
      Complex complex5 = Complex.I;
      complex5.multiply(69);
      Complex complex6 = new Complex(5.0, (-6.336314643222911E118));
      Complex complex7 = Complex.ONE;
      complex0.createComplex(69, 2610.054523918614);
      complex7.nthRoot(69);
      Complex complex8 = complex7.conjugate();
      complex8.asin();
      complex4.abs();
      Complex complex9 = new Complex(6.283185307179586);
      complex4.acos();
      complex6.tanh();
      Complex complex10 = Complex.NaN;
      complex10.exp();
      Complex complex11 = Complex.valueOf(1.0, (-2856.8759723));
      complex11.asin();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.783809071694788E-8, Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      complex1.sinh();
      Complex complex3 = complex2.multiply((-739));
      Complex complex4 = new Complex((-739), 25);
      Complex complex5 = Complex.I;
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.INF;
      complex7.createComplex(25, 2955.516);
      complex7.conjugate();
      complex4.asin();
      complex6.abs();
      Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex(Double.POSITIVE_INFINITY, 1928.80471561);
      complex8.acos();
      complex7.nthRoot(811);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex((-2046.309611571507), 0.0);
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = complex1.ONE.sqrt1z();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex0.pow(complex3);
      complex2.multiply(1340.0);
      complex1.exp();
      complex5.toString();
      complex3.atan();
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex(633.0, 1167.7628);
      Complex complex2 = complex1.cos();
      Complex complex3 = complex0.acos();
      complex3.cos();
      Complex complex4 = complex1.I.reciprocal();
      complex2.NaN.reciprocal();
      Complex complex5 = complex0.cos();
      complex5.subtract(633.0);
      Complex complex6 = complex1.divide(complex0);
      complex2.sinh();
      Complex complex7 = complex1.NaN.cos();
      Complex complex8 = complex3.multiply(2007);
      complex8.I.divide(1167.7628);
      Complex complex9 = complex5.divide(1372.04808909747);
      complex9.INF.asin();
      Complex complex10 = complex6.multiply(complex5);
      complex10.atan();
      complex4.ZERO.tanh();
      Complex complex11 = complex7.divide(complex0);
      complex11.ZERO.sin();
      complex4.sqrt1z();
      Complex complex12 = complex2.log();
      complex10.toString();
      complex12.sqrt();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2125.222054549, Double.POSITIVE_INFINITY);
      complex1.multiply(2125.222054549);
      Complex complex2 = complex1.asin();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.INF.add((-787.6205));
      complex1.NaN.add(20.0);
      Complex complex2 = new Complex(20.0);
      Complex complex3 = complex0.pow(complex2);
      complex3.ONE.getField();
      complex2.toString();
      complex3.readResolve();
      Complex complex4 = complex3.atan();
      complex1.ONE.conjugate();
      Complex complex5 = complex4.I.createComplex((-641.8942629), (-641.8942629));
      complex1.add(complex3);
      complex2.conjugate();
      Complex complex6 = Complex.valueOf(20.0, (-641.8942629));
      complex6.NaN.cos();
      complex1.conjugate();
      Complex complex7 = complex0.NaN.asin();
      complex5.createComplex(3253.8906, (-6422636.477393214));
      complex0.tanh();
      complex6.abs();
      complex7.sinh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(4.4796615839004517E-7, 20.0);
      complex1.asin();
      complex1.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.valueOf(22.3187665504813);
      Complex complex1 = Complex.valueOf((-905.927580334981), 22.3187665504813);
      complex0.multiply(complex1);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.multiply(1363);
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ONE;
      complex3.createComplex(4.014566457044566E-13, 22.3187665504813);
      complex1.conjugate();
      complex2.asin();
      complex1.abs();
      Complex complex6 = new Complex(22.3187665504813);
      complex2.acos();
      complex2.nthRoot(592);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex((-858.7), (-858.7));
      Complex complex1 = complex0.INF.add(1.8189894035458565E-12);
      Complex complex2 = Complex.I;
      complex1.ONE.readResolve();
      Complex complex3 = complex2.ZERO.add(Double.NaN);
      Complex complex4 = complex3.ZERO.conjugate();
      Complex complex5 = complex4.INF.multiply(complex3);
      complex3.INF.tanh();
      Complex complex6 = complex0.INF.tan();
      complex6.INF.asin();
      Complex complex7 = complex0.pow(complex2);
      Complex complex8 = complex1.pow(complex0);
      complex8.tan();
      complex5.acos();
      complex7.log();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.828409270079167, 1115990.7353060027);
      Complex complex1 = complex0.multiply(2774.53251275648);
      complex1.hashCode();
      complex0.hashCode();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.sinh();
      Complex complex4 = new Complex(4.828409270079167, Double.POSITIVE_INFINITY);
      complex4.multiply(1.0);
      Complex complex5 = Complex.ONE;
      complex0.conjugate();
      complex2.asin();
      complex0.abs();
      Complex complex6 = new Complex(3.104604603719281);
      Complex complex7 = Complex.ZERO;
      complex7.tan();
      Complex complex8 = Complex.NaN;
      complex3.add(2774.53251275648);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-4291.0), (-4290.677809946116));
      complex1.hashCode();
      complex0.hashCode();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.valueOf((-4290.677809946116), 3.6745564712028466E7);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.conjugate();
      complex5.asin();
      complex5.abs();
      Complex complex7 = new Complex(3.6745564712028466E7);
      Complex complex8 = Complex.ZERO;
      complex4.tan();
      complex2.sqrt1z();
      Complex.valueOf(Double.NaN, (-461.5));
      complex6.multiply(1102);
      complex7.add(complex5);
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sinh();
      Complex complex2 = new Complex((-20.0), (-20.0));
      Complex complex3 = complex1.multiply((-20.0));
      Complex complex4 = Complex.ONE;
      complex2.conjugate();
      complex0.asin();
      complex4.abs();
      Complex complex5 = new Complex(1.0);
      Complex complex6 = Complex.ZERO;
      complex2.tan();
      Complex complex7 = Complex.I;
      complex7.sqrt1z();
      Complex complex8 = Complex.valueOf((-20.0), 1.0);
      complex6.multiply(1102);
      complex8.reciprocal();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex1.subtract(8.29610608069022E13);
      Complex.valueOf((-346.518759742403), 8.29610608069022E13);
      complex1.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(0.12611078510282459, 0.12611078510282459);
      complex0.nthRoot(1148);
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex(0.5850973129272461, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.ONE;
      complex0.add(complex1);
      try { 
        complex0.nthRoot((-1312145731));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,312,145,731
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2447.71606);
      Complex complex1 = Complex.valueOf(2447.71606, 2447.71606);
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.cosh();
      complex3.ONE.getArgument();
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = complex3.INF.conjugate();
      Complex complex6 = complex4.ZERO.cos();
      Complex complex7 = complex1.NaN.cosh();
      Complex.valueOf(0.0, 0.0);
      complex7.readResolve();
      Complex complex8 = complex5.INF.sinh();
      Complex complex9 = complex8.INF.subtract(complex5);
      complex1.cosh();
      complex2.getField();
      Complex complex10 = complex0.acos();
      complex6.I.pow(0.0);
      Complex complex11 = Complex.valueOf((double) 0, (-10.923933325002734));
      complex10.NaN.add(complex11);
      complex9.multiply((-903));
      Complex complex12 = Complex.valueOf(2.0);
      complex12.ZERO.sinh();
      complex4.readResolve();
      complex5.subtract(7.530840351477639E-188);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply((-1544));
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = (-1056.4051);
      Complex complex0 = Complex.valueOf((-1056.4051));
      complex0.subtract((-1056.4051));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.INF.sqrt();
      Complex complex3 = complex1.NaN.pow(complex0);
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = Complex.NaN;
      complex5.pow(complex6);
      complex5.ONE.multiply((-1.0808162722402073E-8));
      Complex.valueOf(1117.0791048082488, 2126.3387953468437);
      Complex complex7 = complex1.createComplex(2126.3387953468437, 1988.684);
      complex2.NaN.multiply(4054);
      Complex complex8 = complex0.sinh();
      complex0.conjugate();
      complex8.ZERO.createComplex((-1.0), Double.NaN);
      Complex complex9 = complex7.ZERO.divide(Double.NaN);
      complex1.abs();
      complex7.toString();
      complex8.abs();
      complex1.pow(complex2);
      Complex complex10 = complex9.sin();
      complex10.NaN.toString();
      complex7.sin();
      Complex complex11 = complex9.add(0.7853981633974483);
      complex1.ZERO.nthRoot(4054);
      Complex complex12 = complex11.multiply(1292);
      complex12.sinh();
      complex2.pow((double) 1292);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(complex0);
      Complex complex1 = Complex.I;
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
      Complex complex2 = Complex.ONE;
      Complex complex3 = Complex.INF;
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.multiply((-20.0));
      Complex complex2 = new Complex((-1.0));
      Complex complex3 = complex2.negate();
      complex1.getImaginary();
      complex0.getImaginary();
      complex0.tanh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = Complex.ONE;
      try { 
        complex3.nthRoot((-2939));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,939
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(1889.4243099239284);
      Complex complex1 = Complex.valueOf(1889.4243099239284, 1889.4243099239284);
      complex1.exp();
      Complex complex2 = Complex.I;
      Complex.valueOf(0.0515);
      complex1.subtract(1889.4243099239284);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.I;
      complex1.multiply((-713.3389142913853));
      Complex complex4 = new Complex(6.283185307179586);
      complex4.negate();
      complex4.getImaginary();
      complex4.getImaginary();
      complex4.tanh();
      Complex complex5 = Complex.NaN;
      Complex.valueOf(Double.NaN);
      complex2.subtract(1091.53);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.sinh();
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.conjugate();
      complex2.INF.multiply(37);
      Complex complex5 = complex0.add(complex4);
      complex4.asin();
      complex3.negate();
      Complex complex6 = Complex.ZERO;
      complex1.tan();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.divide(complex1);
      complex0.exp();
      Complex complex2 = Complex.I;
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
      Complex complex2 = Complex.ZERO;
      complex0.equals(complex2);
      Complex.valueOf(1339.9544854973858, 2396.848335901);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.add((-20.0));
      complex2.tan();
      complex3.tanh();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(1608.026889637876, 5.021151284637011E-4);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply(complex0);
      Complex complex1 = Complex.valueOf(372.98630742, (-2018.3692523));
      complex1.equals((Object) null);
      Complex complex2 = Complex.valueOf(2.0, 372.98630742);
      Complex complex3 = complex1.multiply(4664);
      complex1.pow((double) 4664);
      complex1.getImaginary();
      complex3.getImaginary();
      Complex complex4 = Complex.I;
      Complex.valueOf((-9413674.1927272));
      Complex complex5 = Complex.NaN;
      Object object0 = new Object();
      complex5.isInfinite();
      Complex complex6 = new Complex(Double.NaN);
      complex2.nthRoot(4664);
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0, (-174.1966355612851));
      complex0.equals(complex1);
      Complex.valueOf(0.0, (-174.1966355612851));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.add(0.9999979944904175);
      complex0.tan();
      complex3.tanh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex(0.0, 6.283185307179586);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.createComplex((-237.34), 0.0);
      complex7.hashCode();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-7.962256961838823E292));
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf(372.98630742, (-2018.3692523));
      complex3.equals((Object) null);
      Complex complex4 = Complex.valueOf(2.0, 372.98630742);
      Complex complex5 = complex1.asin();
      Complex complex6 = complex2.negate();
      Complex complex7 = complex4.multiply(2090970920);
      complex3.getImaginary();
      complex0.getImaginary();
      complex7.tanh();
      Complex complex8 = Complex.NaN;
      complex6.equals(complex5);
      complex5.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2720.0762178618156, 2720.0762178618156);
      complex0.ZERO.multiply(0);
      Complex complex1 = complex0.sin();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex(927.71744499, (-2247.9700437396));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.divide(complex0);
      complex3.INF.sqrt1z();
      complex2.hashCode();
      complex1.reciprocal();
      complex0.divide((-2203.7950824));
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = Complex.ONE;
      complex0.tanh();
      complex4.createComplex(2222.0, (-2247.9700437396));
      complex4.hashCode();
      Object object0 = new Object();
      complex1.equals(object0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.NaN.hashCode();
      Complex complex4 = new Complex(1742.27817486);
      complex3.multiply(complex4);
      complex3.equals(complex2);
      Complex complex5 = Complex.valueOf(3.1730967845000003E7, 3.1730967845000003E7);
      Complex complex6 = complex1.tan();
      complex3.getField();
      complex6.ONE.cosh();
      complex2.createComplex(3223.33391371103, 1.6374611405314333E-7);
      complex5.acos();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.multiply(3298.0);
      complex0.ONE.hashCode();
      complex0.ZERO.hashCode();
      Complex complex1 = Complex.valueOf(3298.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-6319.3955567));
      Complex complex4 = complex2.sinh();
      Complex complex5 = new Complex((-6319.3955567), (-6319.3955567));
      Complex complex6 = complex5.multiply(3298.0);
      Complex complex7 = Complex.I;
      Complex complex8 = complex4.pow(complex5);
      complex5.atan();
      complex4.hashCode();
      complex0.getArgument();
      complex7.hashCode();
      Complex complex9 = Complex.INF;
      double double0 = 2.511206178765573E-4;
      complex7.multiply(2.511206178765573E-4);
      complex8.getImaginary();
      Complex complex10 = complex8.sin();
      complex6.reciprocal();
      complex2.cosh();
      complex7.conjugate();
      complex3.subtract((-289.0411638229));
      try { 
        complex10.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = Complex.valueOf(33.98276236493182);
      Complex complex1 = Complex.valueOf(33.98276236493182);
      complex0.pow(complex1);
      Complex complex2 = complex0.asin();
      complex0.tan();
      Complex complex3 = new Complex(33.98276236493182, 33.98276236493182);
      Complex complex4 = Complex.valueOf(33.98276236493182, 0.7615941559557649);
      complex2.equals(complex4);
      complex1.nthRoot(2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0902938113007961E-8));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = new Complex(40.19140625, 0.0);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.divide(complex2);
      complex4.NaN.hashCode();
      complex3.ZERO.reciprocal();
      complex4.divide(40.19140625);
      complex3.INF.reciprocal();
      complex1.exp();
      Complex complex5 = Complex.ONE;
      complex1.sqrt1z();
      complex2.subtract(40.19140625);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.I.multiply((-1713.2520305));
      complex2.I.multiply(complex0);
      complex1.getImaginary();
      complex1.readResolve();
      Complex complex3 = complex2.atan();
      Complex complex4 = Complex.valueOf(2.041872501373291);
      complex4.hashCode();
      Complex complex5 = complex1.multiply(complex3);
      Complex complex6 = new Complex((-974.19121));
      complex3.isNaN();
      complex3.sqrt();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.reciprocal();
      complex2.ZERO.asin();
      complex0.ZERO.readResolve();
      complex0.createComplex(4067.9186512120305, 134.5886);
      complex1.equals(complex0);
      Complex.valueOf(0.0);
      Complex complex3 = complex1.exp();
      complex3.ONE.cos();
      complex1.ZERO.acos();
      Complex complex4 = complex2.NaN.cos();
      Complex complex5 = complex4.ONE.exp();
      complex1.getImaginary();
      complex1.ONE.negate();
      Complex complex6 = complex5.sinh();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex2.exp();
      complex6.add(complex8);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(3298.0);
      complex0.ONE.hashCode();
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply((-650.4));
      complex2.INF.conjugate();
      Complex complex4 = complex1.add(complex3);
      complex3.asin();
      Complex complex5 = complex4.I.negate();
      complex4.I.multiply(1305);
      complex2.getImaginary();
      complex5.reciprocal();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.valueOf(0.5403023058681398);
      complex7.tanh();
      complex7.I.abs();
      Complex complex8 = complex7.createComplex(9.863720960170636E228, 637.136674136183);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-2018.3692523));
      Complex complex2 = complex1.multiply(complex0);
      complex2.equals(complex0);
      Complex complex3 = Complex.valueOf(1045.95837305, 1045.95837305);
      Complex complex4 = Complex.ZERO;
      complex4.INF.add(248.355);
      complex4.tan();
      complex3.getField();
      Complex complex5 = complex2.createComplex(248.355, 1045.95837305);
      complex4.acos();
      complex5.add(5.0345752964740226E-45);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(0.1335292540568635);
      Complex complex2 = complex1.pow(complex0);
      complex1.asin();
      Complex complex3 = Complex.I;
      Complex complex4 = new Complex(Double.NaN, 0.07748340560658108);
      complex3.equals(object0);
      complex2.nthRoot(1289);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3983.15, 3983.15);
      Complex complex1 = new Complex(0.1335292540568635, 40.19140625);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.atan();
      Complex complex4 = complex3.divide(complex1);
      complex4.hashCode();
      Complex complex5 = complex1.reciprocal();
      complex4.divide((-2236.768));
      complex3.reciprocal();
      Complex complex6 = Complex.ONE;
      complex5.tanh();
      complex3.createComplex(872.855264710881, 0.1335292540568635);
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.0883019300873278E122);
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.asin();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.multiply(1305);
      complex1.getImaginary();
      complex0.getImaginary();
      Complex complex5 = complex2.tanh();
      Complex complex6 = new Complex(0.0, 0.0);
      complex6.isNaN();
      complex1.pow(complex5);
      Complex complex7 = complex3.log();
      Complex complex8 = Complex.valueOf(1.0883019300873278E122);
      complex8.getReal();
      complex7.multiply(complex0);
      complex6.abs();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.reciprocal();
      complex2.ZERO.asin();
      Complex complex3 = (Complex)complex0.ZERO.readResolve();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.multiply((-1.0));
      Complex complex6 = complex0.conjugate();
      Complex complex7 = complex0.add(complex1);
      complex7.asin();
      Complex complex8 = complex2.negate();
      Complex complex9 = complex4.multiply(1305);
      complex4.getImaginary();
      complex9.getImaginary();
      complex5.tanh();
      complex6.isNaN();
      Complex complex10 = complex0.pow(complex3);
      complex0.log();
      complex5.getReal();
      complex10.multiply(complex7);
      complex8.abs();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(3298.0);
      complex0.ONE.hashCode();
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.sinh();
      complex0.createComplex((-1.1623125976292733E-7), Double.POSITIVE_INFINITY);
      complex2.equals(complex0);
      Complex complex3 = Complex.valueOf(0.0);
      complex1.exp();
      Complex complex4 = complex0.cos();
      complex0.acos();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.cos();
      Complex complex7 = complex4.exp();
      complex6.getImaginary();
      complex2.negate();
      Complex complex8 = Complex.ONE;
      complex8.getImaginary();
      complex5.readResolve();
      Complex complex9 = complex6.atan();
      complex4.hashCode();
      complex7.multiply(complex9);
      Complex complex10 = new Complex((-1973.9785));
      complex3.isNaN();
      complex4.sqrt();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.reciprocal();
      complex3.exp();
      complex3.tanh();
      complex3.tanh();
      complex0.getArgument();
      Complex complex4 = complex2.cosh();
      complex2.multiply(1.0002510575721417);
      // Undeclared exception!
      complex4.nthRoot(7238);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = new Complex(1.0902938113007961E-8);
      complex2.multiply(complex1);
      complex0.equals(complex1);
      Complex complex3 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex4 = complex2.tan();
      complex2.getField();
      complex3.createComplex((-2018.3692523), 248.355);
      complex4.acos();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0902938113007961E-8));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = Complex.NaN;
      complex3.hashCode();
      Complex complex4 = Complex.valueOf((-2018.3692523));
      Complex complex5 = complex4.add(complex1);
      Complex.valueOf((-1.0902938113007961E-8));
      Complex complex6 = complex4.exp();
      Complex complex7 = complex0.asin();
      complex6.abs();
      complex7.sqrt();
      complex3.getArgument();
      complex5.getField();
      Complex complex8 = complex1.sinh();
      Complex.valueOf(1660.999007311, 40.19140625);
      complex4.nthRoot(273);
      Complex complex9 = complex2.conjugate();
      complex9.pow(complex8);
      Complex complex10 = Complex.ONE;
      complex10.multiply(Double.NaN);
      Complex complex11 = Complex.I;
      complex4.nthRoot(1456);
      complex4.cos();
      complex10.divide(complex1);
      complex8.hashCode();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3983.15, 3983.15);
      Complex complex1 = Complex.valueOf(3983.15);
      complex1.multiply((-1753.244174));
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex3.negate();
      complex2.multiply(2147483289);
      complex3.getImaginary();
      complex0.getImaginary();
      complex2.tanh();
      complex5.isNaN();
      Complex complex6 = complex0.pow(complex2);
      complex4.log();
      Complex complex7 = Complex.valueOf(0.0, (-4259.9080609374));
      complex7.getReal();
      Complex complex8 = complex4.multiply(complex7);
      complex0.abs();
      Complex complex9 = new Complex(3983.15, 3983.15);
      Complex complex10 = complex9.sinh();
      complex10.subtract((-5.5299180508885456E281));
      complex6.add(complex8);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3983.15, 3983.15);
      complex0.toString();
      Complex complex1 = Complex.valueOf(3918.881665505, 2.2950686306677644E-244);
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.asin();
      complex1.log();
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = Complex.ZERO;
      complex5.conjugate();
      complex4.hashCode();
      Complex complex6 = complex1.add((-1817.2262177));
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(3298.0);
      complex0.ONE.hashCode();
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply((-650.4));
      Complex complex4 = complex2.INF.conjugate();
      complex2.I.atan();
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex3.asin();
      Complex complex7 = Complex.valueOf(3298.0, Double.POSITIVE_INFINITY);
      complex7.ZERO.hashCode();
      Complex complex8 = complex7.tanh();
      complex4.getArgument();
      complex6.add(2344.0);
      complex5.cosh();
      complex4.multiply(3298.0);
      try { 
        complex8.nthRoot((-1199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,199
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.asin();
      complex0.ZERO.readResolve();
      Complex complex4 = complex0.createComplex(4067.9186512120305, 134.5886);
      complex1.equals(complex0);
      Complex.valueOf(0.0);
      Complex complex5 = complex1.exp();
      complex5.ONE.cos();
      Complex complex6 = complex5.ZERO.divide(complex1);
      Complex complex7 = complex6.ZERO.acos();
      complex2.NaN.cos();
      Complex complex8 = Complex.ZERO;
      complex1.getImaginary();
      Complex complex9 = complex1.ONE.negate();
      complex0.getImaginary();
      Complex complex10 = complex4.sin();
      complex3.getField();
      complex1.NaN.atan();
      Complex complex11 = complex10.divide(complex7);
      Complex complex12 = complex11.add((-784.35));
      complex6.INF.acos();
      complex12.subtract(0.0);
      complex3.sqrt();
      Complex complex13 = new Complex(0.0, Double.NaN);
      Complex complex14 = Complex.INF;
      complex9.equals(complex14);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0902938113007961E-8));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = new Complex((-1.0902938113007961E-8), 40.19140625);
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.divide(complex2);
      complex3.hashCode();
      Complex complex5 = complex3.reciprocal();
      complex4.divide(1.0);
      complex1.reciprocal();
      Complex complex6 = complex5.cos();
      complex6.atan();
      complex6.pow(complex1);
      Complex complex7 = complex1.divide(8.472965161251656E-169);
      complex3.getReal();
      complex6.atan();
      complex7.asin();
      complex0.abs();
      complex4.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0902938113007961E-8));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = new Complex(40.19140625, 0.0);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.divide(complex2);
      complex4.NaN.hashCode();
      Complex complex5 = complex3.ZERO.reciprocal();
      complex5.getImaginary();
      Complex complex6 = complex0.negate();
      complex0.getImaginary();
      complex4.sin();
      complex1.getField();
      Complex complex7 = Complex.INF;
      complex1.divide(complex0);
      complex2.add((-1.0902938113007961E-8));
      Complex complex8 = new Complex(40.19140625, 1373.741);
      complex8.acos();
      Complex complex9 = complex6.subtract(0.0);
      complex9.ONE.getField();
      complex3.I.multiply((-1189));
      Complex complex10 = complex2.sqrt();
      complex2.sinh();
      complex5.nthRoot(2146935804);
      complex10.conjugate();
      complex3.pow(complex5);
      complex8.toString();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.asin();
      complex0.ZERO.readResolve();
      complex0.createComplex(4067.9186512120305, 134.5886);
      complex1.equals(complex0);
      Complex.valueOf(0.0);
      Complex complex4 = complex1.exp();
      complex4.ONE.cos();
      Complex complex5 = complex1.ZERO.acos();
      Complex complex6 = complex2.NaN.cos();
      complex6.ONE.exp();
      complex1.getImaginary();
      complex1.ONE.negate();
      complex0.getImaginary();
      complex5.readResolve();
      complex0.atan();
      complex3.hashCode();
      Complex complex7 = complex5.multiply(complex1);
      Complex complex8 = new Complex(0.0);
      complex8.isNaN();
      complex2.sqrt();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0902938113007961E-8));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = new Complex(40.19140625, 0.0);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.divide(complex2);
      complex4.NaN.hashCode();
      complex3.ZERO.reciprocal();
      Complex complex5 = complex4.divide(40.19140625);
      complex3.INF.reciprocal();
      Complex complex6 = complex2.cos();
      complex6.ZERO.atan();
      complex3.pow(complex6);
      Complex complex7 = complex1.divide(1.0);
      complex7.multiply(complex3);
      complex0.isNaN();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0902938113007961E-8));
      complex0.INF.negate();
      Complex complex1 = new Complex(40.19140625, 0.0);
      Complex complex2 = complex1.I.atan();
      Complex complex3 = complex0.divide(complex1);
      complex3.NaN.hashCode();
      complex2.ZERO.reciprocal();
      Complex complex4 = complex3.divide(40.19140625);
      Complex complex5 = complex2.INF.reciprocal();
      Complex complex6 = complex1.cos();
      complex6.ZERO.atan();
      Complex complex7 = complex2.pow(complex6);
      complex2.divide(40.19140625);
      complex7.getReal();
      complex0.atan();
      Complex complex8 = complex5.asin();
      complex8.abs();
      complex4.createComplex((-3495.642691263085), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2061.01056193);
      Complex complex1 = complex0.I.add((-281.911));
      Complex complex2 = complex1.INF.cosh();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.I.negate();
      try { 
        complex4.ZERO.nthRoot((-1505));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,505
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.sqrt1z();
      complex1.INF.nthRoot(37);
      Complex complex2 = complex1.ZERO.add(complex0);
      complex2.ONE.reciprocal();
      Complex complex3 = complex0.multiply(0.5800528526306152);
      Complex complex4 = complex0.conjugate();
      complex4.INF.sin();
      Complex complex5 = complex3.pow((-512.948534379));
      Complex complex6 = complex5.ONE.sinh();
      complex1.atan();
      Complex complex7 = complex6.NaN.cosh();
      complex3.nthRoot(37);
      complex7.sqrt1z();
      Complex complex8 = complex5.subtract(complex2);
      complex8.hashCode();
      complex4.multiply((-512.948534379));
      complex0.getField();
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(1163.430295, 1163.430295);
      complex1.ZERO.abs();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.multiply((-2012.686904302925));
      Complex complex4 = complex2.I.atan();
      Complex complex5 = complex3.INF.multiply(complex0);
      complex5.I.getField();
      Complex complex6 = complex4.ONE.subtract(complex3);
      Complex complex7 = complex3.acos();
      Complex complex8 = complex6.INF.subtract(0.0);
      complex8.ZERO.exp();
      Complex complex9 = complex4.tanh();
      complex2.abs();
      Complex complex10 = complex2.ZERO.tanh();
      complex10.cosh();
      Complex complex11 = complex10.INF.divide(1163.430295);
      complex0.getField();
      complex11.NaN.exp();
      Complex complex12 = complex2.reciprocal();
      complex12.hashCode();
      Complex complex13 = complex12.negate();
      complex6.nthRoot(1465);
      Complex complex14 = complex1.subtract(complex6);
      complex14.readResolve();
      complex11.getReal();
      complex12.equals(complex1);
      complex0.pow(complex13);
      Complex.valueOf((-2048.282377878711), (double) 1465);
      complex9.multiply(1465);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.NaN.acos();
      Complex complex3 = complex2.ONE.cos();
      complex3.I.reciprocal();
      Complex complex4 = complex0.ONE.log();
      Complex complex5 = complex4.INF.pow((-922.2595));
      Complex complex6 = complex4.I.createComplex(0.0, 0.0);
      complex0.equals((Object) null);
      complex0.getField();
      complex4.exp();
      complex2.isNaN();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.I.multiply(1711);
      complex1.hashCode();
      Complex complex8 = complex0.INF.pow(327.5219324335806);
      Complex complex9 = complex8.NaN.multiply(complex0);
      complex9.INF.nthRoot(1711);
      complex1.I.add(complex6);
      complex9.NaN.multiply(complex8);
      complex4.ONE.reciprocal();
      complex3.getArgument();
      complex2.getField();
      Complex complex10 = Complex.valueOf(0.0, -0.0);
      complex10.ONE.log();
      complex5.nthRoot(1433);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = new Complex((-251.7663), (-822.5));
      complex0.hashCode();
      Complex complex1 = complex0.multiply((-2567));
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.NaN.atan();
      complex3.I.multiply(complex2);
      Complex complex4 = complex1.ONE.multiply(complex0);
      complex4.asin();
      Complex complex5 = complex4.NaN.tan();
      complex5.ONE.sqrt();
      complex0.hashCode();
      Complex complex6 = Complex.valueOf((-822.5));
      Complex complex7 = Complex.valueOf((-251.7663));
      complex1.cosh();
      Complex complex8 = complex6.multiply(641);
      complex7.acos();
      complex8.pow((-2366.294156594319));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2249.76581484415));
      Complex complex1 = Complex.valueOf(0.0, (-502.3594418565));
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex0.negate();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.sqrt();
      complex4.INF.asin();
      Complex complex5 = complex0.multiply(complex3);
      complex0.getReal();
      complex0.hashCode();
      Complex complex6 = Complex.valueOf((-2249.76581484415));
      complex6.ZERO.getArgument();
      complex6.NaN.acos();
      complex5.getField();
      complex2.getField();
      complex0.asin();
      complex6.subtract(0.0);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.toString();
      Complex complex1 = Complex.valueOf(0.0, (-213.30653));
      complex1.I.hashCode();
      Complex complex2 = complex1.multiply(1.864600658416748);
      Complex complex3 = complex0.subtract(complex1);
      complex2.I.getArgument();
      Complex complex4 = complex3.pow(0.0);
      Complex complex5 = complex4.I.multiply(1266);
      complex5.INF.pow(complex2);
      complex2.I.hashCode();
      Complex complex6 = complex4.INF.divide(complex2);
      complex3.INF.getField();
      complex6.NaN.subtract(complex5);
      Complex complex7 = complex4.subtract(complex1);
      Complex complex8 = complex3.createComplex(1.864600658416748, 1466.001167126814);
      complex2.toString();
      complex0.ZERO.nthRoot(1266);
      complex8.multiply((-644));
      Complex complex9 = complex7.conjugate();
      try { 
        complex9.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.sqrt();
      complex1.ONE.pow((-175.0013));
      Complex complex2 = complex0.multiply(0);
      complex0.INF.pow(complex1);
      Complex complex3 = Complex.valueOf((-6319.3955567));
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex1.I.reciprocal();
      complex4.ONE.multiply(1383.0);
      Complex complex6 = Complex.I;
      complex3.ONE.pow(complex6);
      Complex complex7 = complex0.atan();
      complex4.hashCode();
      complex7.getArgument();
      complex4.hashCode();
      Complex complex8 = complex0.NaN.subtract(complex3);
      complex8.NaN.multiply((-4306.387732715));
      complex0.getImaginary();
      Complex complex9 = complex2.sin();
      complex9.ONE.reciprocal();
      complex5.cosh();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = new Object();
      Complex complex1 = new Complex(0.0);
      complex0.ZERO.multiply(complex1);
      complex0.equals(object0);
      Complex complex2 = Complex.valueOf(248.355, Double.NaN);
      complex2.I.tan();
      complex2.getField();
      Complex complex3 = complex0.cos();
      complex3.I.createComplex(3.8331545111676784E-249, 0.0);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2447.71606);
      Complex complex1 = complex0.I.sqrt();
      Complex complex2 = complex0.NaN.conjugate();
      Complex complex3 = complex0.cosh();
      complex3.ONE.getArgument();
      Complex complex4 = complex3.ZERO.add(complex0);
      complex3.INF.conjugate();
      complex4.ZERO.cos();
      Complex complex5 = complex3.INF.multiply(0);
      Complex complex6 = complex1.NaN.cosh();
      Complex.valueOf(0.0, 0.0);
      complex6.readResolve();
      Complex complex7 = complex5.INF.sinh();
      Complex complex8 = complex7.INF.subtract(complex5);
      complex1.cosh();
      complex2.getField();
      Complex complex9 = complex0.acos();
      complex5.I.pow(0.0);
      Complex complex10 = Complex.valueOf((double) 0, 1.360180139541626);
      complex9.NaN.add(complex10);
      complex8.multiply((-903));
      Complex.valueOf(2.0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.5193525310038174E-8);
      Complex complex1 = complex0.subtract(1983.9);
      Complex complex2 = Complex.NaN;
      complex2.ZERO.hashCode();
      Complex complex3 = complex0.multiply(complex2);
      complex3.NaN.readResolve();
      Complex complex4 = complex0.negate();
      complex2.subtract(complex0);
      complex1.multiply(complex4);
      complex2.multiply(768);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.hashCode();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.add(complex0);
      complex1.reciprocal();
      Complex complex4 = complex0.exp();
      Complex complex5 = complex3.tanh();
      complex0.tanh();
      complex4.getArgument();
      Complex complex6 = complex5.cosh();
      complex6.ZERO.multiply((-1488.156915837708));
      try { 
        complex2.nthRoot((-1199));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,199
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex1.NaN.atan();
      complex2.INF.hashCode();
      complex1.I.exp();
      Complex complex3 = complex0.multiply(1763);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.pow(complex4);
      complex5.tanh();
      complex5.NaN.pow(0.45870959758758545);
      complex3.hashCode();
      Complex complex6 = complex0.divide(complex4);
      complex6.subtract(complex4);
      complex3.pow((-916.274380247876));
      complex5.tan();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      Complex complex3 = complex1.NaN.cosh();
      complex0.isInfinite();
      Complex complex4 = Complex.valueOf(1629.0547915611887);
      complex4.ZERO.toString();
      Complex complex5 = complex2.subtract((-1.0088898215431471E52));
      Complex complex6 = complex2.NaN.reciprocal();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex7.ZERO.pow(complex3);
      Complex complex9 = complex2.atan();
      complex9.sqrt1z();
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.INF.sqrt1z();
      complex10.INF.getArgument();
      complex2.hashCode();
      complex5.add((-1.0088898215431471E52));
      complex2.ONE.reciprocal();
      Complex complex12 = complex5.divide(complex6);
      Complex complex13 = complex12.INF.acos();
      Complex complex14 = complex12.acos();
      Complex complex15 = complex12.sin();
      complex15.add(0.7853981633974483);
      complex8.subtract(complex14);
      complex12.INF.createComplex(0.3333333134651184, (-154.99218732928));
      complex5.divide(0.0);
      complex11.acos();
      complex13.hashCode();
      complex5.sqrt1z();
      complex7.isNaN();
      complex12.sqrt();
      complex7.nthRoot(1090);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0902938113007961E-8));
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = new Complex(40.19140625, 0.0);
      Complex complex3 = complex2.I.atan();
      Complex complex4 = complex0.divide(complex2);
      complex4.NaN.hashCode();
      complex3.ZERO.reciprocal();
      complex4.divide(40.19140625);
      complex3.INF.reciprocal();
      Complex complex5 = complex2.cos();
      complex5.ZERO.atan();
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = complex1.divide(1.0);
      complex7.getReal();
      complex6.I.atan();
      Complex complex8 = complex6.asin();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.I.multiply((-1713.2520305));
      Complex complex3 = complex2.I.multiply(complex0);
      complex3.I.sinh();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.exp();
      complex5.add(complex4);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1779.4957509356077, 1779.4957509356077);
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.multiply(complex0);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.ZERO.pow(1148.21744);
      complex5.ZERO.hashCode();
      complex3.NaN.reciprocal();
      complex0.abs();
      Complex complex6 = complex2.divide(complex3);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex3.I.sqrt1z();
      Complex complex9 = complex1.log();
      Complex complex10 = complex9.ZERO.cosh();
      complex0.ONE.multiply(1779.4957509356077);
      Complex.valueOf(1779.4957509356077);
      complex7.getReal();
      Complex complex11 = complex2.add(complex3);
      complex11.createComplex(0.0, 1.3006497185242537E-7);
      complex10.getArgument();
      complex8.INF.negate();
      Complex complex12 = complex11.add(complex6);
      complex12.abs();
      complex8.tan();
      complex7.asin();
      Complex complex13 = complex6.sinh();
      complex6.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = new Complex((-2943.15064), (-2943.15064));
      complex0.abs();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.ONE.sqrt1z();
      Complex complex4 = Complex.valueOf(1048.7, 480.996432628);
      complex2.NaN.exp();
      complex2.I.readResolve();
      Complex complex5 = complex3.NaN.asin();
      Complex complex6 = complex1.ONE.pow(831.3835);
      Complex complex7 = complex1.INF.log();
      complex7.I.multiply(complex5);
      Complex complex8 = complex0.tan();
      Complex complex9 = complex8.subtract(complex2);
      Complex complex10 = complex8.subtract(complex1);
      complex7.hashCode();
      Complex complex11 = complex9.divide(4162.243551195054);
      complex10.hashCode();
      complex11.INF.multiply((-1383));
      complex7.cosh();
      Complex complex12 = complex1.createComplex(0.0, 480.996432628);
      complex11.equals(complex6);
      complex10.pow(complex4);
      Complex.valueOf(3538.82845, 4162.243551195054);
      try { 
        complex12.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ZERO.asin();
      complex0.ZERO.readResolve();
      Complex complex4 = complex0.createComplex(4067.9186512120305, 134.5886);
      complex1.equals(complex0);
      Complex.valueOf(0.0);
      Complex complex5 = complex1.exp();
      complex5.ONE.cos();
      Complex complex6 = complex5.ZERO.divide(complex1);
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex2.NaN.cos();
      complex8.ONE.exp();
      complex1.getImaginary();
      complex1.ONE.negate();
      complex0.getImaginary();
      Complex complex9 = complex4.sin();
      complex3.getField();
      complex1.NaN.atan();
      Complex complex10 = complex9.divide(complex7);
      Complex complex11 = complex10.add((-784.35));
      complex6.INF.acos();
      complex11.subtract(0.0);
      complex3.sqrt();
      Complex complex12 = complex0.sinh();
      try { 
        complex12.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide(0.0);
      complex1.ONE.pow(2855.2);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ZERO.cosh();
      complex0.ONE.getField();
      complex3.I.abs();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex0.I.multiply(0.0);
      complex5.I.asin();
      complex4.ZERO.getArgument();
      complex2.pow(2.710329532623291);
      Complex complex6 = complex0.multiply(complex4);
      Complex complex7 = complex0.acos();
      complex7.ZERO.sin();
      complex6.add(0.0);
      complex7.isNaN();
      complex7.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.NaN.add(complex1);
      complex1.I.sinh();
      complex1.sqrt1z();
      complex0.abs();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex1.tan();
      complex3.tan();
      Complex complex4 = complex2.NaN.cosh();
      complex2.ONE.conjugate();
      Complex complex5 = complex2.divide(complex3);
      Complex complex6 = complex5.INF.multiply(448);
      Complex complex7 = complex0.INF.pow(0.0);
      Complex complex8 = complex2.subtract(complex0);
      complex1.ZERO.getField();
      complex8.sin();
      Complex complex9 = complex4.cos();
      complex9.INF.getArgument();
      Complex complex10 = complex6.INF.subtract(complex2);
      complex10.INF.conjugate();
      complex4.equals(complex8);
      Complex complex11 = complex9.sqrt1z();
      Complex complex12 = complex11.ONE.cos();
      complex12.ZERO.divide(0.7853981633974483);
      complex11.ZERO.divide(complex4);
      Complex complex13 = complex7.divide(0.0);
      Complex complex14 = complex1.cosh();
      complex14.subtract(complex7);
      Complex.valueOf(1.5173907279968262, 401.17022191);
      Complex complex15 = complex13.conjugate();
      complex15.INF.reciprocal();
      complex6.exp();
      try { 
        complex7.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.NaN.negate();
      Complex complex3 = complex0.ONE.sqrt1z();
      complex3.NaN.hashCode();
      Complex.valueOf(197.8);
      complex2.ZERO.tanh();
      complex2.I.createComplex(0.0, (-134.95628625982));
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586);
      complex0.getField();
      complex0.equals("");
      complex0.readResolve();
      Complex complex1 = complex0.ZERO.conjugate();
      Complex complex2 = complex1.ONE.add(6.283185307179586);
      Complex complex3 = complex0.multiply(1796.2108401915732);
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.I.sinh();
      complex5.ONE.toString();
      complex6.ONE.sqrt();
      Complex complex7 = complex1.ONE.tanh();
      complex1.pow(1.3895726688907995E-282);
      Complex complex8 = Complex.valueOf((-2533.4121236), (-310.4307436840736));
      complex8.I.acos();
      complex2.NaN.sqrt();
      Complex complex9 = complex2.multiply((-998.950622633));
      complex9.INF.sin();
      complex9.ZERO.tan();
      complex9.INF.cos();
      complex9.ONE.getField();
      complex4.conjugate();
      Object object0 = new Object();
      complex5.equals(object0);
      complex0.isNaN();
      complex7.createComplex((-310.4307436840736), 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply(3298.0);
      complex0.ONE.hashCode();
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.multiply((-650.4));
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex1.add(complex3);
      Complex complex6 = complex3.asin();
      complex5.I.negate();
      Complex complex7 = complex5.I.multiply(1305);
      complex2.getImaginary();
      complex5.getImaginary();
      complex6.tanh();
      complex6.isNaN();
      complex1.pow(complex3);
      complex2.log();
      complex4.getReal();
      complex7.multiply(complex5);
      complex0.abs();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(1.0883019300873278E122);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ZERO.asin();
      complex2.tan();
      Complex complex4 = new Complex(1.0883019300873278E122, 1.0883019300873278E122);
      complex3.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ONE.reciprocal();
      complex0.readResolve();
      complex0.toString();
      Complex complex1 = Complex.valueOf((-460.0), (-460.0));
      Complex complex2 = complex1.INF.tan();
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.NaN.log();
      Complex complex5 = complex0.pow(complex1);
      complex5.NaN.conjugate();
      complex5.hashCode();
      complex4.add((-460.0));
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.valueOf(946.8189456896664);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      complex1.ZERO.getArgument();
      complex2.I.toString();
      complex2.getField();
      Complex complex3 = Complex.valueOf(946.8189456896664);
      Complex complex4 = complex3.ZERO.divide((-1136.1830097369798));
      complex4.ZERO.abs();
      complex2.NaN.sqrt1z();
      Complex complex5 = complex3.I.reciprocal();
      Complex complex6 = complex0.pow(complex3);
      complex1.ZERO.multiply(946.8189456896664);
      Complex complex7 = complex3.sinh();
      complex7.INF.sin();
      Complex complex8 = complex7.INF.exp();
      complex8.NaN.divide(complex5);
      complex5.ZERO.pow((-1136.1830097369798));
      complex7.ZERO.sin();
      complex2.getField();
      complex5.getField();
      complex0.getField();
      complex6.getReal();
      complex3.asin();
      complex6.pow(0.0);
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-4318.299503641922), (-4318.299503641922));
      complex1.ONE.sqrt1z();
      Complex complex2 = complex1.INF.sinh();
      complex2.ONE.nthRoot(1);
      Complex complex3 = complex1.subtract(706.80999064445);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = Complex.valueOf((-1.0), (double) 1);
      complex4.pow(complex1);
      complex3.INF.asin();
      Complex complex6 = complex4.negate();
      Complex complex7 = complex6.ZERO.cos();
      complex7.INF.atan();
      complex6.exp();
      Complex complex8 = complex2.sin();
      complex8.readResolve();
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex(2396.848335901);
      complex0.INF.getField();
      Complex complex1 = complex0.pow(2396.848335901);
      Complex complex2 = Complex.NaN;
      complex0.subtract(complex2);
      complex1.isNaN();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1412.26823, (-1.0));
      Complex complex1 = complex0.tanh();
      complex0.asin();
      Complex complex2 = complex0.divide((-2369.33));
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex3.ONE.sinh();
      Complex complex6 = complex2.cosh();
      complex1.pow(complex2);
      Complex complex7 = Complex.valueOf((-1727.53247053458), (-2419.916483481));
      Complex complex8 = complex1.asin();
      complex7.sqrt1z();
      Complex complex9 = complex4.cosh();
      complex9.NaN.toString();
      complex5.hashCode();
      complex8.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(994.272883);
      complex0.createComplex(665.37232, (-430.16));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      int int0 = (-1747);
      try { 
        complex2.ZERO.nthRoot((-1747));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,747
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      
      Complex complex1 = Complex.valueOf((-1542.0), 44.820668293028);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex0.add(complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      ComplexField complexField0 = complex0.getField();
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      
      Complex complex3 = complex1.ONE.negate();
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-1.0), complex3.getReal(), 0.01);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      
      Complex complex4 = complex0.acos();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      
      double double0 = complex0.I.abs();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      
      boolean boolean0 = complex4.isInfinite();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(boolean0);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      
      Complex complex5 = complex2.createComplex((-284.2), (-284.2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-284.2), complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals((-284.2), complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      
      Complex complex6 = complex4.atan();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      
      Complex complex7 = complex6.sqrt1z();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      
      Complex complex8 = complex1.subtract(1071.7975);
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals((-2613.7974999999997), complex8.getReal(), 0.01);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      
      Complex complex9 = complex2.multiply(1.0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(44.820668293028, complex9.getImaginary(), 0.01);
      assertEquals((-1542.0), complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      
      Complex complex10 = complex9.I.exp();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex1));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(44.820668293028, complex9.getImaginary(), 0.01);
      assertEquals((-1542.0), complex9.getReal(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.8414709848078965, complex10.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex1);
      
      Complex complex11 = complex2.pow(complex7);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex0));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex11.isNaN());
      assertEquals(0.6059548006428884, complex11.getReal(), 0.01);
      assertEquals(0.45848051676652424, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      
      Complex complex12 = complex11.ZERO.cosh();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex3));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex11.isNaN());
      assertEquals(0.6059548006428884, complex11.getReal(), 0.01);
      assertEquals(0.45848051676652424, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(1.0, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex3);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      
      double double1 = complex0.NaN.getArgument();
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      
      Complex complex13 = complex7.add(6.283185307179586);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(6.283185307179586, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex12);
      
      ComplexField complexField1 = complex13.ONE.getField();
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex12));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(6.283185307179586, complex13.getReal(), 0.01);
      assertFalse(complex13.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertSame(complexField1, complexField0);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex12);
      
      Complex complex14 = complex8.tanh();
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex6));
      assertTrue(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals((-1.0), complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(44.820668293028, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals((-2613.7974999999997), complex8.getReal(), 0.01);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex9);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex13);
      
      Complex complex15 = complex4.multiply(complex7);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex12));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.13859316382120454, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex12);
      
      Complex complex16 = complex2.sinh();
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex2));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertTrue(complex16.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex16.getImaginary(), 0.01);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex10);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex2);
      
      Complex complex17 = complex2.add(complex15);
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex16));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex12));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.13859316382120454, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(44.959261456849205, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals((-1542.0), complex17.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex10);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex11);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex17);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex12);
      
      double double2 = complex16.abs();
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex17));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex17));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertTrue(complex16.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex16.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double2, 0.01);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex10);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex2);
      
      String string0 = complex17.toString();
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex17));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex16));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex17));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex17));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex12));
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertEquals(44.820668293028, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1542.0), complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.13859316382120454, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isNaN());
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(44.959261456849205, complex17.getImaginary(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals((-1542.0), complex17.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0038848218538872, complex6.getReal(), 0.01);
      assertEquals(0.08823114840355814, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals("(-1542.0, 44.959261456849205)", string0);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex10);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex1);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex11);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex17);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex12);
      
      Complex complex18 = complex1.log();
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex13));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex17));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(44.820668293028, complex1.getImaginary(), 0.01);
      assertEquals((-1542.0), complex1.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(7.3412578088469065, complex18.getReal(), 0.01);
      assertEquals(3.1125342539793306, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isNaN());
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex12);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotNull(complex0);
      
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Complex complex0 = Complex.INF;
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(1.5340733916570804E145);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotNull(complex1);
      
      Complex complex2 = complex0.multiply(complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotNull(complex2);
      
      Complex complex3 = (Complex)complex0.readResolve();
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(complex3.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotNull(complex3);
      
      Complex complex4 = complex0.cos();
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotNull(complex4);
      
      complex2.hashCode();
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      
      Complex complex5 = complex4.subtract(1.5340733916570804E145);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotNull(complex5);
      
      Complex complex6 = complex5.NaN.divide(0.0);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex5);
      assertNotNull(complex6);
      
      complex6.I.hashCode();
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex5);
      
      Complex complex7 = complex6.ONE.tanh();
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex5);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotNull(complex7);
      
      Complex complex8 = complex6.ZERO.acos();
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex0));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertTrue(complex5.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(1.5707963267948966, complex8.getReal(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertSame(complex5, complex6);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertSame(complex6, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex0);
      assertNotNull(complex8);
      
      Complex complex9 = complex0.add(complex1);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertTrue(complex9.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getImaginary(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotNull(complex9);
      
      Complex complex10 = complex9.NaN.tan();
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex3));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertTrue(complex9.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertTrue(complex10.isNaN());
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertSame(complex10, complex6);
      assertSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotNull(complex10);
      
      double double0 = complex9.INF.getArgument();
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex5));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertTrue(complex9.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, double0, 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      
      Complex complex11 = complex9.I.tanh();
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex8));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertTrue(complex9.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex9.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(1.557407724654902, complex11.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertNotNull(complex11);
      
      Complex complex12 = complex0.multiply(1);
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertTrue(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex10));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertTrue(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex2);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      assertNotNull(complex12);
      
      double double1 = complex12.abs();
      assertNotEquals(double1, double0, 0.01);
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertTrue(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex10));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertTrue(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex2);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      
      Complex complex13 = complex2.reciprocal();
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotNull(complex13);
      
      Complex complex14 = complex2.acos();
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex2));
      assertTrue(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(Double.NaN, complex14.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex14.getReal(), 0.01);
      assertTrue(complex14.isNaN());
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex7);
      assertSame(complex14, complex10);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex1);
      assertSame(complex14, complex5);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex2);
      assertSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex0);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotNull(complex14);
      
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY);
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex15.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertTrue(complex15.isInfinite());
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex7);
      assertNotNull(complex15);
      
      Complex complex16 = complex12.add(0.0);
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex11));
      assertTrue(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex14));
      assertTrue(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex8));
      assertTrue(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex12));
      assertFalse(complex12.equals((Object)complex11));
      assertTrue(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex14));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex15));
      assertFalse(complex12.equals((Object)complex5));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex16.getImaginary(), 0.01);
      assertTrue(complex16.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertTrue(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex4);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex2);
      assertNotSame(complex12, complex15);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex3);
      assertNotNull(complex16);
      
      Complex complex17 = complex16.I.cos();
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex11));
      assertTrue(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex14));
      assertTrue(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex8));
      assertTrue(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex12.equals((Object)complex11));
      assertTrue(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex14));
      assertTrue(complex12.equals((Object)complex16));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex15));
      assertFalse(complex12.equals((Object)complex5));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex16.getImaginary(), 0.01);
      assertTrue(complex16.isInfinite());
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex17.getReal(), 0.01);
      assertFalse(complex17.isInfinite());
      assertFalse(complex17.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertTrue(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex4);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex14);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex17);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex2);
      assertNotSame(complex12, complex15);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex3);
      assertNotNull(complex17);
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertTrue(boolean0);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      
      String string0 = complex2.toString();
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex17));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex16));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5340733916570804E145, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals("(Infinity, Infinity)", string0);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex15);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertSame(complex2, complex12);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotNull(string0);
      
      Complex complex18 = complex16.sqrt();
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex11));
      assertTrue(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex14));
      assertTrue(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex17));
      assertTrue(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex4));
      assertTrue(complex16.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex17));
      assertTrue(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex3));
      assertTrue(complex18.equals((Object)complex6));
      assertTrue(complex18.equals((Object)complex4));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex8));
      assertTrue(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex12));
      assertTrue(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertTrue(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex13));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex17));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex7));
      assertTrue(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex14));
      assertTrue(complex12.equals((Object)complex16));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex15));
      assertFalse(complex12.equals((Object)complex5));
      assertEquals(Double.POSITIVE_INFINITY, complex0.getReal(), 0.01);
      assertTrue(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex16.getImaginary(), 0.01);
      assertTrue(complex16.isInfinite());
      assertTrue(complex18.isNaN());
      assertEquals(Double.NaN, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex18.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertTrue(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.getImaginary(), 0.01);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex12);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex4);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex9);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex17);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex8);
      assertSame(complex12, complex2);
      assertNotSame(complex12, complex15);
      assertSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex18);
      assertNotNull(complex18);
      
      Complex complex19 = Complex.valueOf(4367.21613, 0.0);
      assertFalse(complex19.equals((Object)complex4));
      assertFalse(complex19.equals((Object)complex13));
      assertFalse(complex19.equals((Object)complex17));
      assertFalse(complex19.equals((Object)complex10));
      assertFalse(complex19.equals((Object)complex3));
      assertFalse(complex19.equals((Object)complex6));
      assertFalse(complex19.equals((Object)complex1));
      assertFalse(complex19.equals((Object)complex0));
      assertFalse(complex19.equals((Object)complex15));
      assertFalse(complex19.equals((Object)complex8));
      assertFalse(complex19.equals((Object)complex12));
      assertFalse(complex19.equals((Object)complex2));
      assertFalse(complex19.equals((Object)complex14));
      assertFalse(complex19.equals((Object)complex5));
      assertFalse(complex19.equals((Object)complex18));
      assertFalse(complex19.equals((Object)complex16));
      assertFalse(complex19.equals((Object)complex7));
      assertFalse(complex19.equals((Object)complex11));
      assertFalse(complex19.equals((Object)complex9));
      assertFalse(complex19.isInfinite());
      assertEquals(4367.21613, complex19.getReal(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex9);
      assertNotNull(complex19);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.sqrt();
      complex0.isNaN();
      complex0.NaN.add(1089.54);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ONE.conjugate();
      Complex complex4 = complex2.ZERO.conjugate();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.subtract(complex5);
      complex4.ONE.getArgument();
      complex2.ZERO.toString();
      Complex complex7 = complex1.multiply(complex2);
      Complex complex8 = complex7.ZERO.tan();
      List<Complex> list0 = complex1.nthRoot(2453);
      assertTrue(list0.contains(complex8));
      assertEquals(2453, list0.size());
      
      Complex complex9 = Complex.I;
      Complex complex10 = complex2.multiply(complex9);
      Complex complex11 = complex8.multiply(2453);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex12 = complex7.INF.acos();
      Complex complex13 = complex10.log();
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      
      Complex complex14 = complex7.multiply((-2274.0));
      assertTrue(complex0.equals((Object)complex3));
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertTrue(complex7.equals((Object)complex11));
      
      Complex complex15 = complex5.cosh();
      assertSame(complex15, complex12);
      assertSame(complex5, complex6);
      
      Complex complex16 = complex9.acos();
      assertEquals((-0.8813735870195429), complex16.getImaginary(), 0.01);
  }
}
