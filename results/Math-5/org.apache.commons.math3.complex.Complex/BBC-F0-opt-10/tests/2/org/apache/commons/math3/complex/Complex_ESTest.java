/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:53:20 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      double double0 = Double.NaN;
      complex0.ZERO.toString();
      Complex complex1 = complex0.createComplex(Double.NaN, 1251.72018);
      Complex complex2 = complex0.createComplex(1251.72018, 2.979288529962515E274);
      complex2.add(complex1);
      Complex complex3 = complex1.ONE.multiply(2764);
      Complex complex4 = complex3.NaN.conjugate();
      complex1.toString();
      complex0.reciprocal();
      Complex complex5 = complex1.cos();
      Complex complex6 = Complex.valueOf((-3659.398176), (double) 2764);
      Complex complex7 = complex5.INF.tanh();
      Complex complex8 = complex7.INF.multiply(2764);
      complex8.I.tanh();
      Complex complex9 = complex4.NaN.divide(complex3);
      complex9.I.negate();
      double double1 = 3.759713966511158E184;
      complex5.ZERO.subtract(complex4);
      Complex complex10 = complex5.ZERO.multiply(3.759713966511158E184);
      complex2.sqrt1z();
      complex4.abs();
      complex0.reciprocal();
      complex6.pow((-1.0));
      complex10.multiply(2764);
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1703.0), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.add((-1.0));
      complex1.cos();
      Complex complex2 = complex0.INF.tan();
      complex2.ZERO.negate();
      Complex complex3 = complex0.ONE.sinh();
      complex0.ONE.asin();
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex3.INF.sinh();
      Complex complex6 = complex3.INF.divide(Double.POSITIVE_INFINITY);
      complex6.conjugate();
      Complex complex7 = complex0.multiply((-3103.2687469670777));
      Complex complex8 = complex7.cosh();
      Complex.valueOf((-1226.0), 293.5839825565);
      complex3.log();
      Complex complex9 = complex2.reciprocal();
      complex7.nthRoot(1173);
      complex3.subtract(complex5);
      complex3.pow(complex0);
      complex0.cosh();
      complex9.toString();
      complex4.asin();
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.I.divide(complex0);
      complex2.NaN.multiply((-2470));
      complex0.I.abs();
      Complex complex3 = complex0.tanh();
      complex3.toString();
      Complex complex4 = Complex.valueOf(1.0);
      complex4.INF.getField();
      complex1.ZERO.log();
      complex3.ONE.readResolve();
      Complex complex5 = complex3.divide((-59.4));
      Complex complex6 = complex5.atan();
      Complex complex7 = complex0.subtract(complex5);
      Complex complex8 = Complex.valueOf(760.3146369309706);
      Complex complex9 = complex3.subtract(complex8);
      Complex complex10 = complex9.add(complex8);
      complex10.INF.divide(complex8);
      complex9.subtract(complex8);
      complex5.toString();
      Complex complex11 = complex6.pow((-4.965223283137047E15));
      complex11.conjugate();
      complex7.multiply(complex0);
      Complex complex12 = complex1.acos();
      complex12.abs();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.cosh();
      complex1.tanh();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.I;
      complex5.INF.tan();
      Complex complex6 = complex5.tanh();
      complex6.toString();
      Complex complex7 = Complex.valueOf(1951.3);
      complex7.ONE.add(complex5);
      complex3.reciprocal();
      complex3.atan();
      complex2.sqrt();
      Complex complex8 = Complex.valueOf(5.906102862953403E-195, (-20.0));
      Complex complex9 = complex8.exp();
      complex3.toString();
      complex4.getField();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-2.398432764606965), 1.4664812557938819E-15);
      Complex complex2 = complex1.createComplex(572.69, (-1821.27364));
      Complex complex3 = Complex.valueOf((-2.398432764606965), (-20.0));
      Complex complex4 = complex3.cos();
      complex0.divide(complex2);
      complex4.acos();
      complex4.createComplex(268.62236, (-20.0));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex0.multiply((-1.6332083257987747E-10));
      complex2.pow((-1.6332083257987747E-10));
      Complex complex3 = Complex.valueOf((-1.6332083257987747E-10), 2551.41);
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.nthRoot(1);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.NaN, (-4622.28865039));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 946, Double.POSITIVE_INFINITY);
      complex0.multiply((-2195.219342011374));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.NaN;
      complex2.ZERO.sqrt();
      complex1.I.reciprocal();
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(1.5430806348152437);
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.6332083257987747E-10));
      Complex complex2 = complex1.NaN.divide((-1132.1352971542008));
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = Complex.ONE;
      complex1.reciprocal();
      complex1.pow(complex0);
      Complex complex6 = complex1.multiply(0.483998016950278);
      complex1.abs();
      Complex complex7 = Complex.INF;
      complex7.add(complex6);
      Complex complex8 = new Complex(20.0, (-1.0));
      complex8.tanh();
      Complex complex9 = Complex.valueOf((-1.0));
      Complex complex10 = Complex.valueOf((-1.0), 1.352594940263854E270);
      complex4.multiply(complex10);
      complex3.tanh();
      Complex.valueOf(20.0, 0.483998016950278);
      complex9.createComplex(1.352594940263854E270, 6.52252321321176E-8);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.sinh();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex2.I.acos();
      complex3.I.reciprocal();
      complex3.conjugate();
      complex2.I.divide(complex1);
      Complex complex4 = complex2.INF.sinh();
      complex4.I.multiply((-1202));
      complex4.NaN.divide(complex0);
      Complex complex5 = complex0.conjugate();
      complex5.INF.add(2.3805896467049493E-39);
      Complex complex6 = complex0.multiply(complex5);
      complex6.NaN.hashCode();
      // Undeclared exception!
      complex1.nthRoot(1431655765);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.6332083257987747E-10));
      Complex complex2 = complex1.NaN.divide((-1132.1352971542008));
      complex0.tan();
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex1.pow(complex0);
      Complex complex7 = complex3.multiply((-1.6332083257987747E-10));
      Complex complex8 = complex7.sqrt();
      complex8.NaN.abs();
      Complex complex9 = Complex.ONE;
      complex5.sqrt();
      Complex complex10 = new Complex((-137.963420081), Double.NaN);
      Complex complex11 = complex6.tanh();
      complex11.getField();
      complex2.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-2402.522), 20.0);
      Complex complex1 = complex0.createComplex((-1811.1), (-4409.62053787));
      complex0.conjugate();
      Complex complex2 = complex1.tan();
      complex2.reciprocal();
      Complex complex3 = Complex.NaN;
      complex1.readResolve();
      Complex.valueOf((-5556.8447), (-20.0));
      complex0.atan();
      complex0.tan();
      Complex complex4 = Complex.valueOf((-511.5378521), (double) (-279));
      complex4.multiply((-916));
      complex3.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(791.55832531);
      Complex complex2 = new Complex(25);
      complex2.nthRoot(25);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex2.atan();
      Complex complex6 = complex5.pow(complex4);
      Complex complex7 = complex4.sqrt();
      Complex complex8 = Complex.valueOf(791.55832531, (double) 25);
      Complex complex9 = complex3.sqrt();
      Object object0 = new Object();
      complex8.equals(object0);
      Complex complex10 = complex6.negate();
      Complex complex11 = Complex.ONE;
      complex7.pow(complex11);
      complex5.createComplex(1530.2, (-20.0));
      complex9.atan();
      Complex complex12 = Complex.I;
      complex12.I.exp();
      complex11.tan();
      complex7.atan();
      complex5.tan();
      complex7.nthRoot(37);
      complex10.multiply(Double.POSITIVE_INFINITY);
      complex3.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      complex1.reciprocal();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = new Complex((-1.6332083257987747E-10));
      complex5.sqrt();
      Complex complex6 = new Complex((-1.6332083257987747E-10), 298.869);
      complex1.tanh();
      complex1.getField();
      Complex.valueOf((-1965.693));
      complex2.equals(complex3);
      Complex.valueOf((-20.0), 1176.300426928512);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.add(complex1);
      complex1.isInfinite();
      Complex complex3 = Complex.ZERO;
      try { 
        complex2.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1.6332083257987747E-10));
      Complex complex2 = complex1.NaN.divide((-1103.33331159));
      complex2.ONE.getField();
      complex0.toString();
      Complex complex3 = complex1.pow((-1.6332083257987747E-10));
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.pow(complex3);
      Complex complex6 = complex5.multiply((-1.6332083257987747E-10));
      Complex complex7 = complex5.sqrt();
      complex5.abs();
      complex4.add(complex0);
      Complex complex8 = new Complex((-1.6332083257987747E-10), Double.POSITIVE_INFINITY);
      complex1.tanh();
      Complex.valueOf((-1580.6592254));
      complex8.multiply(complex6);
      complex7.negate();
      complex7.divide(6.122917600959727E9);
      Complex complex9 = Complex.INF;
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(791.55832531);
      complex0.ZERO.nthRoot(25);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.atan();
      complex4.I.pow(complex3);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = Complex.valueOf(791.55832531, (double) 25);
      complex5.INF.sqrt();
      complex6.equals(complex2);
      Complex complex7 = complex5.negate();
      Complex complex8 = complex7.I.divide(complex1);
      complex1.I.pow(complex8);
      Complex complex9 = complex6.ZERO.createComplex((-20.0), 393.67539797669605);
      Complex complex10 = complex6.conjugate();
      complex6.tan();
      Complex complex11 = new Complex((-1504.51881152809));
      complex11.tan();
      complex10.nthRoot(25);
      Complex complex12 = Complex.ONE;
      Complex complex13 = Complex.I;
      complex13.equals(complex3);
      complex10.asin();
      Complex complex14 = Complex.NaN;
      complex1.pow((-1486.0));
      Complex complex15 = complex12.sinh();
      Complex complex16 = Complex.INF;
      complex9.subtract((-20.0));
      complex15.getField();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex complex1 = complex0.multiply((-3668));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = Complex.ONE;
      complex0.reciprocal();
      complex1.pow(complex0);
      Complex complex5 = complex1.multiply((double) 37);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex0.add(complex5);
      complex7.createComplex(632.8562941, 3825.363349711);
      Complex complex8 = complex6.conjugate();
      complex2.tan();
      complex8.readResolve();
      Complex complex9 = new Complex(3825.363349711, 632.8562941);
      complex9.atan();
      complex1.tan();
      complex6.nthRoot(37);
      Complex complex10 = Complex.ONE;
      Object object0 = new Object();
      complex4.equals(object0);
      complex9.asin();
      complex10.sin();
      complex3.pow(393.67539797669605);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(791.55832531);
      complex0.ZERO.nthRoot(25);
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.I.pow(complex3);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = Complex.valueOf(791.55832531, (double) 25);
      Complex complex8 = complex6.INF.sqrt();
      complex7.equals(complex2);
      Complex complex9 = complex6.negate();
      Complex complex10 = complex9.I.divide(complex1);
      complex1.I.pow(complex10);
      complex7.ZERO.createComplex((-20.0), 393.67539797669605);
      Complex complex11 = complex7.conjugate();
      Complex complex12 = complex7.tan();
      complex5.readResolve();
      Complex.valueOf(439.0138, (-20.0));
      complex8.I.atan();
      complex9.tan();
      complex8.ZERO.tan();
      complex2.nthRoot(7);
      Complex complex13 = Complex.ONE;
      complex12.equals(complex13);
      complex8.asin();
      complex12.sin();
      complex3.pow((double) 7);
      complex11.sinh();
      complex10.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4224, 2.4224);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(complex0);
      complex2.ONE.pow(2.4224);
      complex0.reciprocal();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1521));
      Complex complex2 = complex1.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.pow(complex4);
      Complex complex8 = Complex.valueOf((double) (-1521));
      Complex complex9 = complex8.multiply((-0.0016720852517125569));
      complex1.sqrt();
      complex7.add(complex4);
      Complex complex10 = new Complex((-1521), 2.4224166870117188);
      Complex complex11 = complex2.tanh();
      Complex.valueOf((double) (-1521));
      Complex complex12 = complex10.multiply(complex11);
      Complex complex13 = Complex.I;
      complex13.negate();
      complex12.sqrt();
      complex9.NaN.exp();
      Complex complex14 = complex8.cos();
      complex9.subtract(complex14);
      complex14.add(2.4224166870117188);
      Complex complex15 = Complex.ZERO;
      Complex complex16 = Complex.ONE;
      complex5.divide(complex2);
      try { 
        complex10.nthRoot((-1521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex.valueOf((double) 37, 4.439791652732591E81);
      Complex complex1 = Complex.ZERO;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex((-2640.1294));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = new Complex((-2640.1294), (-2640.1294));
      Complex complex3 = new Complex((-2640.1294), 0.08730847390014518);
      complex0.I.divide(complex3);
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex4.INF.pow(complex1);
      complex5.INF.cos();
      Complex complex6 = complex4.ZERO.add(0.08730847390014518);
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex4.I.sin();
      complex8.I.add(complex0);
      Complex complex9 = complex7.cos();
      Complex complex10 = complex5.multiply(complex9);
      complex10.reciprocal();
      complex4.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-2640.1294));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.valueOf((-2640.1294));
      Complex complex3 = complex1.sin();
      complex1.toString();
      Complex complex4 = new Complex(1.186414053683047, (-2.564688370677835E-8));
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY, (-1.0));
      complex2.divide(complex5);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 0.0);
      complex3.pow(complex4);
      complex4.cos();
      complex0.add(1231.3498037794654);
      complex2.reciprocal();
      complex0.I.cos();
      complex5.log();
      complex0.asin();
      Complex.valueOf(0.0, (-1215.499036189));
      Complex complex7 = Complex.valueOf((-2640.1294), (-2640.1294));
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.cos();
      Complex complex1 = complex0.ONE.conjugate();
      Complex.valueOf(2196.645);
      Complex complex2 = complex0.sin();
      complex2.INF.toString();
      Complex complex3 = new Complex(2196.645, (-2.564688370677835E-8));
      complex1.isNaN();
      complex3.sinh();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.cos();
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = new Complex((-1454.0665574615), (-1454.0665574615));
      complex2.readResolve();
      Complex complex3 = new Complex((-1454.0665574615));
      complex2.multiply(complex3);
      Complex complex4 = complex1.pow(complex3);
      Complex complex5 = Complex.valueOf((-1454.0665574615), (-1454.0665574615));
      complex5.equals(complex3);
      Complex.valueOf((-3159.150062524693));
      Complex complex6 = Complex.valueOf((-1454.0665574615));
      Complex complex7 = complex6.sin();
      complex7.ONE.negate();
      complex4.multiply(505);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-2640.1294));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.valueOf(1.6252744238288646);
      Complex complex3 = new Complex((-2640.1294), 1.0);
      complex0.I.divide(complex3);
      complex1.divide(complex3);
      Complex complex4 = new Complex(6.301585387776819E255, 0.2731642775834406);
      Complex complex5 = Complex.valueOf((-2640.1294), 0.2731642775834406);
      Complex complex6 = complex2.pow(complex5);
      complex4.ZERO.pow((-2640.1294));
      complex4.cos();
      complex6.add((-2167.708229529));
      complex4.reciprocal();
      complex1.log();
      Complex complex7 = Complex.INF;
      complex7.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY, (-2640.1294));
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.4224166870117188, 2.4224166870117188);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.pow(complex1);
      complex0.cos();
      complex0.add(2.4224166870117188);
      complex3.reciprocal();
      complex1.cos();
      Complex complex4 = complex2.multiply(complex0);
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex complex1 = complex0.multiply((-3668));
      Complex complex2 = complex0.tan();
      complex1.add(complex2);
      Complex complex3 = Complex.ONE;
      complex0.reciprocal();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex1.multiply((double) 37);
      Complex complex6 = complex3.sqrt();
      Complex complex7 = complex0.add(complex5);
      Complex complex8 = new Complex(0.4248080849647522, 37);
      complex4.tanh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.multiply(complex3);
      complex4.negate();
      Complex complex9 = complex7.sqrt();
      complex2.cos();
      complex3.subtract(complex1);
      complex0.add(1.0);
      Complex complex10 = complex4.reciprocal();
      complex6.log();
      complex9.asin();
      Complex.valueOf(2.0902938842773438, (-3418.88008613861));
      complex1.asin();
      complex2.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.log();
      complex1.I.exp();
      complex0.INF.acos();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.NaN.reciprocal();
      complex0.asin();
      complex3.isNaN();
      complex0.multiply(complex2);
      Complex complex4 = Complex.ZERO;
      complex3.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex complex1 = complex0.multiply((-3668));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = new Complex(1485.95645433, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.INF;
      complex3.divide(complex4);
      complex1.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = Complex.valueOf(0.0);
      complex0.multiply(complex1);
      Complex complex2 = complex0.ONE.subtract(0.0);
      complex0.multiply(37);
      Complex complex3 = complex2.tan();
      complex3.add(complex1);
      Complex complex4 = Complex.ONE;
      complex0.reciprocal();
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ONE.subtract(0.0);
      Complex complex4 = complex0.multiply(37);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex2.pow(complex4);
      Complex complex10 = complex4.multiply((double) 37);
      complex2.sqrt();
      complex6.add(complex1);
      Complex complex11 = new Complex(37, 0.0);
      Complex complex12 = complex11.tanh();
      complex8.multiply(complex6);
      complex10.negate();
      complex4.sqrt();
      Complex complex13 = Complex.INF;
      Complex complex14 = new Complex(3631.0);
      complex14.divide(6.283185307179586);
      complex8.atan();
      Complex complex15 = complex12.subtract(1.1793478462381443E-7);
      complex15.conjugate();
      Complex complex16 = new Complex(2.4224166870117188);
      complex16.getArgument();
      Complex complex17 = new Complex((-1.01738658407525E-7), 3631.0);
      complex8.negate();
      complex9.sin();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(4336.908, 4336.908);
      complex0.getArgument();
      Complex complex1 = complex0.subtract(4336.908);
      Complex complex2 = complex0.multiply(37);
      complex2.tan();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.NaN;
      complex4.divide(complex1);
      try { 
        complex2.nthRoot((-2752));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,752
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      int int0 = 37;
      Complex complex1 = complex0.multiply((-3668));
      Complex complex2 = complex0.tan();
      complex1.add(complex2);
      Complex complex3 = Complex.ONE;
      complex0.reciprocal();
      Complex complex4 = complex1.pow(complex0);
      Complex complex5 = complex1.multiply((double) 37);
      complex3.sqrt();
      complex0.add(complex5);
      Complex complex6 = new Complex(0.4248080849647522, 37);
      complex4.tanh();
      double double0 = (-1231.3498037794654);
      Complex complex7 = Complex.valueOf((-1231.3498037794654));
      Complex complex8 = complex7.multiply(complex0);
      complex1.negate();
      complex8.sqrt();
      complex7.cos();
      try { 
        complex8.NaN.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-2640.1294));
      Complex complex1 = complex0.ONE.cos();
      Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(1169.79165684337, (-2445.1));
      Complex complex3 = Complex.ZERO;
      complex0.divide(complex3);
      Complex complex4 = complex1.tan();
      complex4.ONE.sinh();
      complex0.nthRoot(133);
      Complex complex5 = Complex.ZERO;
      complex1.atan();
      complex2.multiply(133);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-470.87681), (-1169.79165684337));
      Complex complex1 = complex0.I.sin();
      complex0.readResolve();
      Complex complex2 = complex0.createComplex((-470.87681), 0.008333333333329196);
      Complex complex3 = complex2.INF.reciprocal();
      complex3.I.hashCode();
      Complex complex4 = Complex.valueOf((-1169.79165684337));
      complex0.pow(0.008333333333329196);
      Complex.valueOf((-1169.79165684337), Double.POSITIVE_INFINITY);
      complex0.asin();
      Complex complex5 = complex4.multiply((-353));
      complex5.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex complex1 = complex0.multiply((-3668));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = Complex.ONE;
      complex0.reciprocal();
      Complex complex5 = complex1.pow(complex0);
      Complex complex6 = complex1.multiply((double) 37);
      complex4.sqrt();
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = new Complex(0.4248080849647522, 37);
      complex5.tanh();
      Complex complex9 = Complex.valueOf((-1231.3498037794654));
      Complex complex10 = complex9.multiply(complex0);
      Complex complex11 = complex1.negate();
      complex10.sqrt();
      Complex complex12 = Complex.INF;
      Complex complex13 = new Complex((-1231.3498037794654), 37);
      Complex complex14 = complex13.atan();
      complex14.subtract((-1231.3498037794654));
      complex11.conjugate();
      complex0.getArgument();
      Complex complex15 = new Complex((-1.2998975819628988E-8), (-20.0));
      complex2.divide(20.0);
      complex3.getImaginary();
      complex15.isInfinite();
      complex7.add(51.20246899723331);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1485.95645433);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.add(complex0);
      complex2.I.exp();
      complex1.createComplex(2551.5075748824866, 0.0);
      complex2.multiply((-367));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1815.5603, (-1169.79165684337));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex0.multiply(complex3);
      complex2.abs();
      Complex complex5 = complex3.sqrt1z();
      complex2.readResolve();
      complex5.toString();
      complex4.isInfinite();
      complex4.cosh();
      Complex complex6 = Complex.valueOf(1169.5414971439677, 1815.5603);
      Complex complex7 = complex6.negate();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex complex1 = complex0.subtract(3.507754341050756E-176);
      Complex complex2 = complex1.multiply(1260);
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.valueOf(3.507754341050756E-176, (double) 37);
      complex1.ONE.abs();
      Complex complex6 = complex4.add(complex5);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.reciprocal();
      complex3.pow(complex1);
      Complex complex9 = complex2.multiply(6.283185307179586);
      complex5.sqrt();
      Complex complex10 = complex4.add(complex5);
      Complex complex11 = new Complex(37, 872.939537795);
      complex8.tanh();
      complex4.multiply(complex2);
      complex11.negate();
      Complex complex12 = Complex.I;
      Complex complex13 = complex12.sqrt();
      Complex complex14 = Complex.INF;
      Complex complex15 = complex9.atan();
      complex10.subtract(6.283185307179586);
      complex15.conjugate();
      complex14.getArgument();
      Complex complex16 = new Complex(0.7853981633974483, 1260);
      complex6.divide(6.283185307179586);
      complex6.getImaginary();
      complex14.isInfinite();
      complex13.add((-3705.059242556972));
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1485.95645433);
      Complex complex1 = complex0.subtract(0.038390612801481476);
      Complex complex2 = complex1.multiply(37);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = Complex.ONE;
      complex2.reciprocal();
      Complex complex6 = complex4.pow(complex1);
      Complex complex7 = complex2.multiply((-2.227647301474917E234));
      Complex complex8 = complex6.sqrt();
      complex0.add(complex8);
      Complex complex9 = new Complex((-1776.7805720372), 374.365);
      complex7.tanh();
      Complex complex10 = complex9.multiply(complex1);
      complex1.negate();
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.INF;
      complex6.atan();
      complex0.subtract(374.365);
      complex6.conjugate();
      complex3.getArgument();
      Complex complex13 = new Complex(135.2061524837, 3.141592653589793);
      Complex complex14 = complex7.divide(872.939537795);
      complex10.getImaginary();
      complex14.isInfinite();
      complex10.add(3.141592653589793);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(2712.0, 1.1793478462381443E-7);
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.INF.tan();
      Complex complex3 = complex1.NaN.log();
      Complex complex4 = complex1.ONE.sinh();
      complex1.I.hashCode();
      Complex complex5 = complex0.NaN.exp();
      complex4.INF.cosh();
      complex4.sqrt();
      Complex complex6 = complex2.add(complex5);
      Complex complex7 = new Complex(2712.0, 2712.0);
      Complex complex8 = complex3.tanh();
      complex0.multiply(complex1);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.negate();
      Complex complex11 = complex0.sqrt();
      Complex complex12 = Complex.INF;
      complex11.atan();
      complex7.subtract(2712.0);
      Complex complex13 = complex10.conjugate();
      complex6.getArgument();
      Complex complex14 = new Complex(Double.NaN, (-1499.91299730565));
      complex13.divide((-1499.91299730565));
      complex8.getImaginary();
      complex2.isInfinite();
      complex9.add(2.0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex((-2640.1294));
      Complex complex1 = complex0.ONE.cos();
      Complex.valueOf((-2640.1294));
      Complex complex2 = new Complex((-2640.1294), (-8085.5327920624));
      complex2.divide(complex0);
      Complex complex3 = complex2.sinh();
      Complex complex4 = new Complex(6.283185307179586, (-2640.1294));
      Complex complex5 = complex0.pow(complex4);
      complex3.cos();
      complex4.add(0.0);
      complex0.reciprocal();
      Complex complex6 = complex5.log();
      complex1.asin();
      Complex.valueOf(0.0, (-910.67768));
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1485.95645433);
      complex0.ONE.readResolve();
      Complex complex1 = new Complex(1485.95645433);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.ONE.pow(complex1);
      complex1.equals(complex0);
      Complex complex4 = Complex.valueOf(1485.95645433);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.INF.multiply(complex0);
      complex7.ZERO.abs();
      Complex complex8 = complex5.sqrt1z();
      complex5.ONE.readResolve();
      complex2.toString();
      complex3.isInfinite();
      complex8.cosh();
      complex6.negate();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1815.5603, 1815.5603);
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf(1815.5603, 1815.5603);
      Complex complex2 = Complex.I;
      complex2.readResolve();
      Complex complex3 = Complex.INF;
      complex1.equals(complex3);
      complex3.nthRoot(394);
      Complex complex4 = complex2.divide(1815.5603);
      Complex complex5 = complex1.tanh();
      complex2.tanh();
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = Complex.NaN;
      complex6.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex complex1 = complex0.INF.divide((-1703.0));
      Complex complex2 = complex0.ZERO.exp();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = new Complex(701.04, (-1703.0));
      Complex complex5 = complex4.multiply((-1.8936644033345014));
      complex1.sqrt();
      Complex complex6 = Complex.I;
      complex5.add(complex6);
      Complex complex7 = complex4.tanh();
      Complex complex8 = Complex.ONE;
      Complex complex9 = new Complex((-1703.0), 94.116709);
      complex8.multiply(complex9);
      complex7.negate();
      complex7.sqrt();
      complex5.atan();
      complex8.subtract(1875.66201852);
      complex3.conjugate();
      complex1.getArgument();
      complex9.divide((-1022.77939));
      complex3.getImaginary();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2712.0);
      Complex complex1 = complex0.ONE.cos();
      complex0.INF.tan();
      complex1.NaN.log();
      Complex complex2 = Complex.I;
      complex1.I.hashCode();
      complex0.NaN.exp();
      complex2.INF.cosh();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex0.asin();
      complex5.ZERO.getField();
      Complex complex6 = complex5.I.tanh();
      complex6.cos();
      complex6.INF.abs();
      Complex complex7 = complex0.multiply(1063);
      complex7.readResolve();
      complex5.sin();
      complex5.abs();
      complex4.subtract(complex6);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex1.multiply((-905));
      Complex complex6 = Complex.ONE;
      complex4.exp();
      complex6.multiply((-905));
      Complex complex7 = complex1.divide(complex2);
      complex7.log();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.subtract(complex4);
      complex7.pow(complex1);
      Complex complex9 = complex7.conjugate();
      Complex complex10 = complex9.subtract(1.0);
      Complex complex11 = new Complex((-24.456555), 20.0);
      complex11.multiply(complex10);
      complex10.cosh();
      complex3.add(complex5);
      complex8.createComplex(Double.POSITIVE_INFINITY, (-905));
      Complex complex12 = Complex.valueOf((double) 1402);
      complex12.negate();
      complex11.asin();
      Complex complex13 = Complex.INF;
      complex13.acos();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1485.95645433);
      complex0.ONE.readResolve();
      Complex complex1 = new Complex(1485.95645433);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      complex2.I.toString();
      complex3.ONE.pow(complex1);
      complex3.equals(complex0);
      Complex complex4 = Complex.valueOf(1485.95645433, 1485.95645433);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.INF.multiply(complex0);
      complex7.INF.multiply(complex3);
      complex7.ZERO.abs();
      Complex complex8 = complex5.sqrt1z();
      complex5.ONE.readResolve();
      complex2.toString();
      complex6.isNaN();
      complex8.cosh();
      complex6.negate();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6551742553710938, 1.6551742553710938);
      Complex complex1 = Complex.valueOf(0.0, 1.6551742553710938);
      Complex complex2 = complex1.ONE.sinh();
      Complex complex3 = complex1.NaN.subtract(complex0);
      Complex complex4 = complex3.INF.multiply(37);
      complex4.ONE.tan();
      Complex complex5 = complex0.INF.add(complex1);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex0.pow(complex6);
      Complex complex9 = complex7.ZERO.multiply(0.0);
      Complex complex10 = complex6.sqrt();
      complex10.NaN.add(complex7);
      complex2.log();
      complex0.multiply(37);
      complex5.hashCode();
      complex7.getImaginary();
      complex9.add((double) 0);
      Complex complex11 = Complex.I;
      complex7.readResolve();
      Complex complex12 = Complex.ZERO;
      complex0.equals(complex12);
      complex8.sqrt();
      Complex complex13 = Complex.ONE;
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex complex1 = complex0.INF.divide((-1703.0));
      complex1.exp();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.negate();
      complex2.log();
      Complex complex4 = complex1.asin();
      complex1.getField();
      complex4.cos();
      complex3.abs();
      complex3.multiply(1063);
      Complex complex5 = Complex.ONE;
      complex5.getImaginary();
      complex0.add(Double.NaN);
      Complex complex6 = complex4.add(1.7831667901191395E-4);
      complex5.abs();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1815.5603, (-1169.79165684337));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      complex2.I.tan();
      complex2.nthRoot(133);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.47463450070961094, 0.47463450070961094);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.multiply((-4891));
      complex1.ZERO.toString();
      Complex complex2 = complex0.atan();
      complex1.subtract((double) (-4891));
      complex0.multiply(complex2);
      Complex.valueOf(3521.7);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.cos();
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = Complex.valueOf(2196.645);
      Complex complex3 = complex0.sin();
      complex3.INF.toString();
      Complex complex4 = new Complex(2196.645, (-2.564688370677835E-8));
      Complex complex5 = new Complex(0.5751199722290039, (-1.0));
      complex5.divide(complex0);
      Complex complex6 = new Complex(0.5751199722290039, 2196.645);
      complex6.pow(complex2);
      complex1.cos();
      complex5.add(2196.645);
      Complex complex7 = complex5.reciprocal();
      Complex complex8 = complex3.log();
      complex8.asin();
      Complex.valueOf((-1.0), 2196.645);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-2640.1294));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.createComplex((-2640.1294), 1.0);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = new Complex(38082.70155597113, 932.03);
      Complex complex6 = Complex.valueOf((-2640.1294), 6.283185307179586);
      Complex complex7 = complex4.pow(complex6);
      complex3.divide(complex6);
      Complex complex8 = complex7.pow(complex1);
      complex4.sqrt1z();
      complex0.getArgument();
      complex2.add(51.20246899723331);
      complex1.toString();
      complex3.readResolve();
      Complex complex9 = complex0.log();
      complex4.tanh();
      complex7.readResolve();
      Complex complex10 = complex8.sin();
      Complex complex11 = Complex.NaN;
      complex11.abs();
      complex9.subtract(complex5);
      complex9.toString();
      complex10.subtract(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ONE.subtract(0.0);
      Complex complex4 = complex0.multiply(37);
      Complex complex5 = complex3.tan();
      Complex complex6 = complex5.add(complex1);
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex2.pow(complex4);
      Complex complex10 = complex4.multiply((double) 37);
      complex2.sqrt();
      complex6.add(complex1);
      Complex complex11 = new Complex(37, 0.0);
      Complex complex12 = complex11.tanh();
      complex8.multiply(complex6);
      complex10.negate();
      complex4.sqrt();
      Complex complex13 = Complex.INF;
      Complex complex14 = complex13.atan();
      Complex complex15 = complex14.subtract(546.4);
      complex12.conjugate();
      complex15.getArgument();
      Complex complex16 = new Complex(37, 0.0);
      complex16.divide(1074.0);
      complex14.getImaginary();
      complex9.isInfinite();
      complex10.add(546.4);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.I.multiply(complex1);
      Complex complex4 = complex2.tan();
      complex0.isInfinite();
      complex0.isInfinite();
      Complex complex5 = Complex.INF;
      complex5.multiply(complex0);
      complex1.tan();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex4.cos();
      complex2.divide(complex1);
      Complex complex8 = complex3.cos();
      Complex complex9 = Complex.valueOf((double) 1402);
      Complex complex10 = complex9.log();
      Complex complex11 = complex8.multiply((-405));
      complex7.hashCode();
      complex9.getImaginary();
      complex11.add(3.759713966511158E184);
      Complex complex12 = Complex.valueOf(2.0527342305586606E186);
      complex12.readResolve();
      Object object0 = complex10.readResolve();
      complex5.equals(object0);
      complex3.sqrt();
      complex4.exp();
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex0.ONE.conjugate();
      Complex complex3 = Complex.valueOf(2196.645);
      Complex complex4 = complex0.sin();
      complex4.INF.toString();
      complex1.NaN.createComplex(0.5751199722290039, 0.5751199722290039);
      Complex complex5 = complex1.sqrt();
      Complex complex6 = new Complex(2196.645, 3106.01);
      complex5.NaN.pow(complex6);
      complex5.divide(complex0);
      Complex complex7 = complex0.pow(complex1);
      Complex complex8 = complex4.sqrt1z();
      complex8.ONE.getArgument();
      Complex complex9 = complex2.add(0.5751199722290039);
      complex7.ZERO.toString();
      complex9.NaN.readResolve();
      Complex complex10 = complex7.log();
      complex10.tanh();
      complex8.readResolve();
      complex4.sin();
      complex8.abs();
      complex3.subtract(complex0);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-116.39403203073), (-984.499065244));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.INF.multiply(1);
      complex3.hashCode();
      Complex complex5 = complex0.sin();
      Complex complex6 = complex5.NaN.divide((-142.28));
      complex6.NaN.divide(complex5);
      Complex complex7 = complex0.cos();
      complex7.ZERO.getField();
      complex1.sqrt();
      Complex complex8 = complex5.negate();
      complex8.INF.tan();
      complex0.hashCode();
      complex8.cosh();
      Complex complex9 = complex2.multiply((-116.39403203073));
      complex4.NaN.acos();
      try { 
        complex9.ZERO.nthRoot((-1316));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,316
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-703.4939826));
      Complex complex1 = complex0.ZERO.sin();
      complex1.ONE.subtract(complex0);
      Complex complex2 = complex0.divide((-703.4939826));
      Complex complex3 = complex2.INF.multiply(complex1);
      Complex complex4 = complex2.INF.atan();
      complex4.NaN.log();
      Complex complex5 = complex2.add(0.0);
      complex5.I.sinh();
      complex5.INF.getField();
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.conjugate();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex8.ZERO.sqrt();
      complex9.INF.pow(8.528268445871411E254);
      Complex complex10 = complex6.multiply(complex8);
      Complex complex11 = complex8.sqrt();
      complex11.divide(complex1);
      Complex complex12 = complex3.INF.exp();
      Complex complex13 = complex6.ONE.sqrt1z();
      complex10.multiply((-2897));
      complex6.atan();
      Complex complex14 = complex7.cos();
      Complex complex15 = complex3.divide(0.0);
      complex2.multiply(0);
      complex14.getReal();
      complex15.exp();
      complex14.getReal();
      complex13.abs();
      complex14.reciprocal();
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex0.isInfinite();
      Complex complex3 = complex1.cosh();
      Complex complex4 = complex0.subtract(complex1);
      Complex complex5 = complex4.sinh();
      complex5.I.atan();
      complex1.multiply(3275);
      complex2.isNaN();
      complex0.ONE.readResolve();
      complex5.conjugate();
      complex3.atan();
      complex0.subtract((-461.6));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      double double0 = (-3168.3662676111885);
      Complex complex0 = new Complex((-3168.3662676111885), (-3168.3662676111885));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.asin();
      complex0.multiply(complex1);
      complex2.subtract((-20.0));
      complex2.ZERO.getField();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.pow((-885.7796396817));
      Complex complex3 = complex2.INF.add(0.0);
      complex3.NaN.log();
      Complex complex4 = complex2.ONE.pow(complex0);
      complex4.ZERO.sin();
      Complex.valueOf(560.7179602, 560.7179602);
      Complex complex5 = complex2.negate();
      complex5.NaN.multiply(1);
      complex4.cos();
      complex1.equals(", ");
      Complex.valueOf((-3158.0));
      complex2.cosh();
      complex0.exp();
      Complex.valueOf(0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.pow(complex1);
      complex2.NaN.getArgument();
      Complex complex3 = complex0.acos();
      Complex.valueOf(2795.6720915, (-401.15251592616));
      complex3.ONE.createComplex((-401.15251592616), Double.NaN);
      Complex complex4 = Complex.valueOf(20.0);
      complex4.INF.sin();
      Complex complex5 = complex4.I.sin();
      Complex complex6 = Complex.valueOf(20.0);
      complex5.multiply(complex3);
      complex4.toString();
      Complex complex7 = complex1.log();
      Complex.valueOf(20.0, 0.0);
      complex7.conjugate();
      complex6.readResolve();
      complex1.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isInfinite();
      complex0.readResolve();
      complex0.INF.abs();
      Complex complex1 = complex0.multiply(559);
      Complex complex2 = complex0.cos();
      complex2.NaN.sin();
      Complex complex3 = complex1.sqrt1z();
      complex2.NaN.conjugate();
      Complex complex4 = complex3.add(0.0);
      complex1.toString();
      complex2.abs();
      complex2.ONE.cos();
      complex0.hashCode();
      complex2.getArgument();
      complex2.nthRoot(699);
      Complex complex5 = complex3.multiply((-1047.3157175));
      complex5.ZERO.tan();
      Complex complex6 = complex4.exp();
      complex2.add(complex1);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sinh();
      double double0 = 900.576486;
      Complex complex2 = complex1.ZERO.pow(900.576486);
      complex2.I.divide(complex1);
      Complex complex3 = Complex.valueOf(1948.766, 2858.4513056769065);
      Complex complex4 = complex1.ZERO.divide(complex0);
      complex0.sqrt1z();
      complex3.I.log();
      Complex.valueOf(900.576486);
      Complex complex5 = complex4.I.asin();
      complex5.atan();
      complex5.I.negate();
      complex4.ZERO.asin();
      try { 
        complex4.ONE.nthRoot((-2886));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,886
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1485.95645433);
      complex0.ONE.readResolve();
      Complex complex1 = new Complex(1485.95645433);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.sqrt();
      complex3.ONE.pow(complex1);
      complex3.equals(complex0);
      Complex complex4 = Complex.valueOf(1485.95645433);
      Complex complex5 = complex1.sin();
      Complex complex6 = complex4.cos();
      Complex complex7 = complex6.INF.multiply(complex0);
      complex7.ZERO.abs();
      Complex complex8 = complex5.sqrt1z();
      complex5.ONE.readResolve();
      complex2.toString();
      complex6.isNaN();
      complex8.cosh();
      complex6.negate();
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(1471.055219);
      Complex complex2 = complex1.multiply(37);
      Complex complex3 = Complex.valueOf(1.929433822631836);
      complex3.I.subtract(complex1);
      Complex complex4 = complex2.ONE.createComplex(2372.4, 5.906102862953403E-195);
      Complex complex5 = complex1.INF.reciprocal();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex5.ZERO.multiply(1520);
      Complex complex8 = complex6.createComplex(1471.055219, 195.1478966219496);
      complex6.readResolve();
      complex8.abs();
      Complex complex9 = complex8.multiply(195.1478966219496);
      complex9.ZERO.subtract((-1155.9));
      complex6.ZERO.conjugate();
      Complex complex10 = complex9.reciprocal();
      complex4.INF.asin();
      complex5.createComplex((-20.0), 2372.4);
      Complex complex11 = complex4.multiply(0.0);
      complex11.NaN.log();
      Complex complex12 = complex11.divide(complex5);
      complex12.NaN.cosh();
      complex10.isNaN();
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-594.671366918174), 0.058823529411764705);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.INF.cos();
      complex0.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex1.createComplex((-594.671366918174), 3.759713966511158E184);
      Complex complex5 = complex0.ZERO.pow(complex2);
      Complex complex6 = complex5.add(complex0);
      complex6.getArgument();
      complex4.cosh();
      complex4.nthRoot(7);
      Complex complex7 = complex0.subtract(2549.81128);
      Complex complex8 = complex3.sqrt1z();
      complex4.getReal();
      complex7.sinh();
      Complex.valueOf(0.0, (-64.92891188443427));
      complex8.acos();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-2640.1294));
      Complex complex1 = complex0.ONE.cos();
      Complex.valueOf(0.0);
      Complex complex2 = new Complex((-2640.1294), 1.0);
      complex0.I.divide(complex2);
      Complex complex3 = complex0.ONE.sinh();
      Complex complex4 = complex3.INF.pow(complex1);
      complex4.INF.cos();
      Complex complex5 = complex3.ZERO.add(1.0);
      complex5.ZERO.reciprocal();
      Complex complex6 = complex0.log();
      complex1.asin();
      Complex.valueOf(1.0, (-2956.799007341152));
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.abs();
      Complex complex1 = complex0.INF.divide((-1703.0));
      Complex complex2 = complex0.ZERO.exp();
      complex0.multiply((-891));
      Complex complex3 = complex2.subtract((-1703.0));
      complex2.sqrt1z();
      complex0.add(complex1);
      complex3.asin();
      complex3.multiply((-2498));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.nthRoot(788);
      Complex complex1 = complex0.sin();
      complex1.ONE.add(complex0);
      complex1.I.getArgument();
      Complex complex2 = complex1.multiply(1);
      complex2.ONE.multiply(610.481975789);
      Complex complex3 = complex0.atan();
      complex3.multiply(complex2);
      Complex complex4 = complex1.sin();
      complex4.hashCode();
      complex1.multiply((double) 1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.ONE.add(complex1);
      complex0.multiply((-2222));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1285.1960419749);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(434.6558080759788, 434.6558080759788);
      Complex complex1 = complex0.NaN.multiply((-767));
      Complex complex2 = complex0.pow((-1183.7671938));
      Complex complex3 = complex2.I.subtract(complex0);
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex4.I.sin();
      Complex.valueOf((double) (-767));
      complex5.multiply((-767));
      Complex complex6 = complex1.cos();
      complex1.getImaginary();
      complex1.createComplex(Double.NaN, (-767));
      Complex.valueOf((double) (-767), Double.NaN);
      Complex complex7 = complex0.add(complex3);
      complex2.log();
      complex1.log();
      complex5.hashCode();
      complex7.sqrt1z();
      complex6.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      complex0.ONE.sqrt();
      Complex complex1 = Complex.valueOf(1163.48181, 0.0);
      complex1.ONE.readResolve();
      Complex complex2 = complex0.divide(complex1);
      complex2.NaN.getArgument();
      Complex complex3 = complex2.ZERO.add(complex0);
      Complex complex4 = complex1.createComplex(0.0, 1163.48181);
      Complex complex5 = complex3.reciprocal();
      complex3.toString();
      complex3.multiply(455.9772);
      complex5.I.readResolve();
      Complex complex6 = complex4.sqrt1z();
      complex6.I.subtract((-20.0));
      complex1.readResolve();
      complex1.ONE.sqrt1z();
      complex1.divide(complex2);
      complex1.log();
      Complex complex7 = complex5.cosh();
      complex7.NaN.pow(complex6);
      complex7.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(1546.4362809311297, 578.33740813);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.toString();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.sin();
      complex3.INF.pow(0.0);
      Complex complex4 = complex1.I.sqrt1z();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.negate();
      complex0.INF.divide(3011.65824776632);
      Complex complex7 = complex0.multiply(1161);
      complex7.getImaginary();
      complex6.sqrt1z();
      Complex complex8 = complex6.multiply(complex5);
      Complex.valueOf(0.0, 672.5024486523);
      complex7.I.sin();
      complex5.conjugate();
      complex8.cosh();
      complex2.cosh();
      complex7.sqrt1z();
      complex5.multiply(3189.0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2588.15), (-2588.15));
      Complex complex2 = complex0.INF.divide(complex1);
      complex0.getArgument();
      Complex complex3 = Complex.valueOf(0.0, (-9.287179048539306E-9));
      complex3.INF.subtract(complex2);
      complex3.ONE.toString();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.sin();
      complex4.ONE.readResolve();
      complex5.I.asin();
      complex5.NaN.sqrt();
      complex2.isInfinite();
      complex5.log();
      complex1.isNaN();
      Complex complex6 = complex4.cos();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.multiply(2562);
      complex0.I.readResolve();
      Complex complex3 = complex0.INF.pow(complex1);
      Complex complex4 = complex0.sqrt1z();
      complex4.ZERO.pow(1.0);
      Complex complex5 = complex4.multiply(17);
      complex1.getArgument();
      complex4.subtract((double) 2562);
      complex5.multiply(complex2);
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.reciprocal();
      complex7.sin();
      complex1.isInfinite();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex(2712.0, 1.1793478462381443E-7);
      Complex complex1 = complex0.ONE.cos();
      complex0.INF.tan();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex1.ONE.sinh();
      complex1.I.hashCode();
      complex0.NaN.exp();
      complex3.INF.cosh();
      Complex complex4 = complex1.ONE.negate();
      complex4.I.log();
      Complex complex5 = complex0.asin();
      complex5.ZERO.getField();
      Complex complex6 = complex5.I.tanh();
      complex6.cos();
      complex6.INF.abs();
      complex0.multiply(1063);
      complex2.getImaginary();
      Complex complex7 = complex2.add((double) 1063);
      complex7.add(Double.NaN);
      complex4.abs();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = new Complex(4336.908, 4336.908);
      complex0.getArgument();
      Complex complex1 = complex0.multiply(0.7853981633974483);
      complex1.multiply((-305));
      complex1.multiply((-2666.5213));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.ONE.asin();
      complex3.NaN.subtract((-77.540497375));
      complex1.hashCode();
      Complex complex4 = complex2.sin();
      Complex complex5 = Complex.valueOf(0.0, 2.396533966064453);
      Complex complex6 = complex1.multiply(complex5);
      complex6.ZERO.sqrt1z();
      complex6.ZERO.getArgument();
      complex6.ONE.multiply(83);
      complex6.getArgument();
      Complex complex7 = complex1.conjugate();
      complex7.asin();
      complex4.add(719.98156090368);
      complex2.nthRoot(83);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      complex1.I.add(complex0);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.divide(0.0);
      Complex complex4 = complex0.INF.subtract(1.0);
      complex3.I.sinh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.I.cos();
      complex5.exp();
      complex0.ONE.subtract(0.0);
      complex0.getImaginary();
      complex0.multiply(1.0);
      Complex.valueOf(0.0, 1.0);
      complex5.getImaginary();
      complex4.tanh();
      complex3.hashCode();
      complex5.I.cosh();
      complex4.reciprocal();
      complex6.pow((-3108.718431));
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.I.reciprocal();
      complex2.cos();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = complex1.ZERO.multiply(1.7617425105337704E-87);
      complex1.pow(complex4);
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex1.sqrt1z();
      complex4.I.sqrt1z();
      complex0.cos();
      Complex complex7 = complex2.divide(1.2195076420741757E-249);
      complex7.ONE.getField();
      Complex complex8 = complex5.multiply(2208.47);
      complex6.pow(complex4);
      complex8.ZERO.subtract(1.7617425105337704E-87);
      complex3.multiply(complex5);
      complex3.NaN.tanh();
      complex2.I.subtract((-1804.1214));
      Complex complex9 = complex8.sin();
      complex3.toString();
      complex8.multiply(1.7617425105337704E-87);
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.tanh();
      int int0 = 0;
      complex1.I.conjugate();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      complex0.I.multiply(complex1);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.ONE.multiply(1402);
      Complex complex5 = complex4.NaN.multiply(1402);
      Complex complex6 = complex5.divide(complex2);
      complex5.log();
      Complex complex7 = Complex.valueOf(1.1844011798406507E244);
      complex7.ONE.subtract(complex3);
      complex3.ZERO.pow(complex7);
      complex1.conjugate();
      complex4.ONE.subtract((-2064.57471246));
      Complex complex8 = complex4.multiply(complex2);
      Complex complex9 = complex0.cosh();
      complex8.add(complex2);
      Complex complex10 = complex3.createComplex(1402, 1402);
      complex4.negate();
      complex9.equals(complex1);
      complex10.asin();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.ONE.sqrt();
      complex2.NaN.pow(1005.42027);
      Complex complex3 = complex0.acos();
      complex3.getArgument();
      Complex complex4 = complex3.ZERO.sinh();
      Complex complex5 = complex3.subtract((-982.0536221353));
      complex5.ZERO.subtract(complex2);
      Complex complex6 = Complex.valueOf(1005.42027, (-1268.820372207821));
      Complex.valueOf(1005.42027);
      complex2.conjugate();
      complex3.getField();
      complex2.cosh();
      complex4.atan();
      complex1.ZERO.sqrt();
      Complex complex7 = Complex.valueOf(657.0, (-0.5113252103366475));
      Complex complex8 = Complex.valueOf(657.0);
      complex8.ZERO.getField();
      complex2.tanh();
      Complex complex9 = complex6.multiply(complex7);
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex4.sqrt();
      complex11.getField();
      complex8.getArgument();
      complex9.hashCode();
      complex10.isInfinite();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-4499.342), (-4499.342));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex1.NaN.atan();
      complex4.INF.toString();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.ONE.acos();
      complex1.isNaN();
      Complex complex7 = complex0.divide((-653.0));
      Complex complex8 = complex7.exp();
      Complex.valueOf((-684.283289));
      Complex complex9 = complex8.ONE.tan();
      complex9.ZERO.subtract(complex8);
      complex2.ZERO.add((-4499.342));
      Complex complex10 = complex1.ONE.tan();
      complex7.pow(complex0);
      Complex complex11 = Complex.valueOf((-653.0), (-653.0));
      complex11.ONE.sqrt1z();
      Complex complex12 = complex3.negate();
      complex3.isInfinite();
      complex3.multiply(complex2);
      complex2.readResolve();
      Complex complex13 = complex10.multiply(2.0);
      complex10.tanh();
      complex2.toString();
      complex6.add(2.0);
      complex13.cos();
      complex12.getImaginary();
      complex5.tanh();
      Complex.valueOf(0.0, (-684.283289));
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex.valueOf((-2753.87248919), 0.347847044467926);
      Complex complex1 = complex0.NaN.pow(5098.324074028);
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.ZERO.multiply(1);
      Complex complex5 = complex4.ONE.subtract(complex2);
      complex0.I.exp();
      Complex complex6 = complex4.ZERO.atan();
      complex6.subtract(0.0);
      Complex complex7 = complex3.ZERO.tan();
      complex7.ZERO.add((-1000.04822));
      Complex complex8 = complex2.cos();
      Complex complex9 = complex0.sqrt();
      Complex complex10 = complex9.I.divide(complex5);
      complex10.ZERO.add(5098.324074028);
      Complex complex11 = Complex.I;
      complex11.ZERO.acos();
      complex9.INF.subtract(complex11);
      Complex complex12 = complex9.createComplex(3384.42350849, 5098.324074028);
      complex1.subtract(complex3);
      complex7.INF.getField();
      complex12.sin();
      complex0.sqrt();
      Complex complex13 = complex7.add((double) 1);
      complex13.ONE.atan();
      complex8.getArgument();
      complex10.multiply(1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.tan();
      complex0.isNaN();
      complex0.sinh();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-275.105));
      Complex complex1 = complex0.ZERO.cos();
      complex0.ZERO.sqrt();
      complex1.ZERO.exp();
      Complex complex2 = complex1.INF.asin();
      Complex complex3 = new Complex((-275.105), (-275.105));
      complex3.I.readResolve();
      Complex complex4 = complex0.subtract(complex3);
      complex4.INF.asin();
      Complex complex5 = complex2.createComplex((-465.4963106619082), (-275.105));
      complex5.INF.cosh();
      complex5.cosh();
      complex2.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.pow(complex0);
      complex2.ONE.multiply(complex1);
      complex2.I.atan();
      Complex complex3 = complex0.pow(complex2);
      complex0.toString();
      Complex complex4 = complex1.subtract((-2571.0799));
      complex4.ONE.negate();
      complex0.getReal();
      Complex complex5 = Complex.ZERO;
      complex3.multiply(complex5);
      complex4.sin();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6551742553710938, 1.6551742553710938);
      Complex complex1 = Complex.valueOf(0.0, 1.6551742553710938);
      complex1.ONE.sinh();
      Complex complex2 = complex1.NaN.subtract(complex0);
      Complex complex3 = complex2.INF.multiply(37);
      complex3.ONE.tan();
      complex0.INF.add(complex1);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.I.reciprocal();
      Complex complex6 = complex0.pow(complex4);
      complex5.ZERO.multiply(0.0);
      Complex complex7 = complex4.sqrt();
      complex7.NaN.add(complex5);
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex5.multiply(complex6);
      complex4.negate();
      complex4.sqrt();
      Complex complex10 = complex0.atan();
      Complex complex11 = complex4.subtract(0.0);
      complex11.NaN.conjugate();
      complex1.getArgument();
      complex9.divide((-3.535214171178576E-8));
      complex10.getImaginary();
      complex8.isInfinite();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(80.9, (-176.05173922));
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex3.I.add(complex0);
      Complex complex5 = complex0.INF.divide(complex2);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.ONE.sinh();
      Complex complex8 = complex7.NaN.sqrt1z();
      complex7.I.multiply(complex4);
      Complex complex9 = complex0.multiply(complex6);
      complex0.multiply(1401);
      complex9.pow(complex1);
      Complex complex10 = complex4.sqrt();
      Complex complex11 = complex9.sin();
      complex10.negate();
      complex8.getArgument();
      complex10.cosh();
      Complex.valueOf((double) 1401, Double.NaN);
      complex5.getField();
      complex9.exp();
      Complex complex12 = complex2.sinh();
      complex11.getImaginary();
      complex0.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((-3749.179759683));
      Complex complex2 = complex0.NaN.pow(complex1);
      complex2.INF.tanh();
      complex0.getField();
      complex0.isInfinite();
      Complex complex3 = complex0.sin();
      complex3.I.getArgument();
      Complex complex4 = complex3.multiply(2);
      complex4.NaN.divide(complex1);
      Complex complex5 = complex4.INF.add(complex3);
      complex5.ZERO.hashCode();
      Complex.valueOf((double) 2, (-8.689594184775204E146));
      complex2.NaN.sin();
      Complex complex6 = complex3.acos();
      complex3.equals(complex2);
      Complex complex7 = complex2.sin();
      complex3.isInfinite();
      complex6.getField();
      complex0.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.multiply((-4891));
      complex1.ZERO.toString();
      Complex complex2 = complex0.atan();
      complex1.subtract((double) (-4891));
      complex0.multiply(complex2);
      Complex.valueOf(3521.7);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-452.79964));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex1.INF.cosh();
      complex0.NaN.tan();
      Complex complex4 = complex1.NaN.sinh();
      Complex complex5 = complex4.I.acos();
      complex5.tanh();
      complex1.NaN.abs();
      Complex complex6 = Complex.I;
      Complex.valueOf((-2024.09644), Double.NaN);
      complex0.divide(complex6);
      complex2.cos();
      complex2.sqrt();
      complex0.exp();
      complex0.exp();
      Complex complex7 = complex1.cos();
      complex0.ZERO.add((-452.79964));
      complex3.abs();
      complex3.pow(complex2);
      Complex.valueOf(Double.NaN);
      complex1.sinh();
      complex7.negate();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.ONE.subtract(0.0);
      Complex complex4 = complex3.INF.sqrt();
      complex0.isInfinite();
      complex3.isInfinite();
      Complex complex5 = complex1.INF.multiply(complex3);
      Complex complex6 = complex2.ONE.tan();
      assertEquals(1.557407724654902, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex1.reciprocal();
      complex7.INF.cos();
      Complex complex8 = complex7.divide(complex4);
      Complex complex9 = complex2.cos();
      Complex complex10 = complex9.I.log();
      Complex complex11 = complex2.multiply(0);
      assertEquals(0.0, complex11.getReal(), 0.01);
      
      complex8.hashCode();
      assertFalse(complex4.equals((Object)complex5));
      assertEquals(Double.POSITIVE_INFINITY, complex4.getReal(), 0.01);
      
      complex7.getImaginary();
      assertSame(complex7, complex8);
      assertTrue(complex7.equals((Object)complex4));
      
      Complex complex12 = complex3.add((double) 0);
      Complex complex13 = Complex.I;
      Object object0 = complex13.readResolve();
      complex12.equals(object0);
      Complex complex14 = complex10.sqrt();
      assertTrue(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex11));
      assertEquals(0.886226925452758, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex13.exp();
      assertNotSame(complex13, complex5);
      assertEquals(0.8414709848078965, complex15.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, 0.0);
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = (Complex)complex2.readResolve();
      boolean boolean0 = complex0.equals(complex3);
      assertFalse(boolean0);
      assertEquals(0.0, complex3.getReal(), 0.01);
      
      complex2.INF.nthRoot(341);
      Complex complex4 = complex2.divide(0.0);
      Complex complex5 = complex4.I.tanh();
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(1.557407724654902, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex2.tanh();
      Complex complex7 = complex4.add(complex0);
      assertSame(complex7, complex1);
      assertFalse(complex7.equals((Object)complex6));
      assertSame(complex7, complex4);
      
      Complex complex8 = complex6.multiply(complex0);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
      assertTrue(complex8.equals((Object)complex2));
  }
}
