/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 08:49:07 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), 3.947457923821984E-183);
      Complex complex1 = complex0.multiply(6.283185307179586);
      Complex complex2 = complex1.pow(6.283185307179586);
      Complex.valueOf(3.947457923821984E-183, (-1711.317415));
      complex2.multiply(942);
      Complex complex3 = Complex.valueOf(4.725191397657393E289, Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY, 309.98494);
      Complex complex5 = complex4.divide(complex0);
      Complex complex6 = Complex.valueOf(3056.58869);
      Complex complex7 = complex3.multiply(complex4);
      Complex complex8 = complex7.multiply(Double.POSITIVE_INFINITY);
      Complex complex9 = complex8.conjugate();
      complex6.acos();
      Complex complex10 = Complex.ZERO;
      complex10.toString();
      complex5.INF.sin();
      complex9.multiply(324);
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add((-105.90309972));
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex1.createComplex(1.2516618713553432E300, 86974.45361800448);
      Complex complex4 = Complex.I;
      complex2.nthRoot(1524);
      complex4.multiply(complex1);
      complex3.sqrt1z();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex3.pow(complex2);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = new Complex(1481, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.pow((double) 1481);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(3.947457923821984E-183, 1502.0);
      Complex complex1 = complex0.multiply(6572.923281207403);
      complex1.pow(1277.07242074);
      Complex complex2 = Complex.valueOf(3.947457923821984E-183, (-1503.0));
      Complex complex3 = Complex.valueOf(1502.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.add((-2111.803807748611));
      complex4.multiply(368);
      complex4.createComplex(1502.0, (-1711.317415));
      Complex complex5 = Complex.I;
      complex2.nthRoot(2008);
      complex5.multiply(complex3);
      complex4.sqrt1z();
      Complex complex6 = Complex.INF;
      complex2.pow(complex3);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = new Complex(3.576362101990194E10, 0.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex.valueOf(20.0);
      Complex complex2 = complex1.multiply(complex0);
      complex2.tan();
      complex2.asin();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-6.824454861992054E-31));
      Complex complex1 = complex0.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(20.0, (-0.4727124331470158));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf((-20.0));
      Complex complex1 = Complex.valueOf((-1323.0), (-20.0));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-20.0));
      complex1.multiply(complex0);
      Complex complex2 = new Complex((-20.0), 1576.8);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.negate();
      Complex complex1 = Complex.ZERO;
      complex1.negate();
      Complex complex2 = complex1.multiply((-9.425430421425288));
      complex2.tanh();
      Complex complex3 = complex0.conjugate();
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(5.470066808E11, 3.1280620563875923E-93);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = new Complex(4.213776207767998, 1299.23);
      complex3.negate();
      Complex.valueOf(1299.23);
      Complex complex4 = complex3.multiply(complex1);
      complex4.tanh();
      complex4.asin();
      complex4.tan();
      complex4.multiply(1459.1);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(1621.1, 1621.1);
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex3.acos();
      complex2.getArgument();
      Complex complex5 = complex0.subtract(complex2);
      complex1.asin();
      complex5.asin();
      complex4.atan();
      complex0.nthRoot(2695);
      Complex complex6 = Complex.ONE;
      complex3.sinh();
      Complex complex7 = new Complex(2.404020521381534E-8, 2695);
      Complex complex8 = Complex.valueOf((double) 2695, 1719.9994186044546);
      complex8.tanh();
      Complex complex9 = new Complex(8.180741693201973, (-2197.0));
      complex9.multiply(2695);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = (-3687.3650153);
      Complex complex0 = new Complex((-3687.3650153));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.asin();
      complex0.pow(complex1);
      Complex complex3 = complex0.acos();
      complex3.getArgument();
      complex0.NaN.subtract(complex2);
      complex0.asin();
      complex0.asin();
      Complex complex4 = complex1.atan();
      complex4.nthRoot(2695);
      Complex complex5 = null;
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.divide((-1.0));
      complex0.reciprocal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.multiply(complex2);
      Complex complex4 = Complex.ZERO;
      complex4.sqrt1z();
      Complex complex5 = complex1.conjugate();
      complex5.ONE.pow((-1.0));
      complex3.subtract(complex4);
      Complex complex6 = Complex.valueOf((-1.0));
      complex5.multiply(complex6);
      complex6.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.divide(Double.POSITIVE_INFINITY);
      complex3.conjugate();
      complex2.subtract(complex0);
      Complex complex6 = Complex.valueOf((-533.578231));
      complex6.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex0.reciprocal();
      complex2.cos();
      complex1.getArgument();
      complex0.reciprocal();
      complex1.cos();
      Complex.valueOf(594.8984177509602);
      try { 
        complex2.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3400.81199752), 2714.0);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.NaN.sin();
      Complex complex3 = complex1.ONE.negate();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = Complex.valueOf(2714.0);
      Complex complex6 = complex5.I.multiply(complex1);
      Complex complex7 = complex6.INF.log();
      Complex complex8 = complex7.I.subtract((-3400.81199752));
      complex8.INF.toString();
      Complex complex9 = complex5.conjugate();
      Complex complex10 = complex5.divide((-3400.81199752));
      Complex complex11 = complex4.NaN.subtract(complex1);
      Complex complex12 = complex11.ZERO.negate();
      complex4.nthRoot(1342);
      complex7.getField();
      Complex complex13 = complex2.subtract(complex0);
      Complex complex14 = complex13.acos();
      complex14.NaN.divide(2714.0);
      complex14.I.subtract(complex7);
      complex14.I.sinh();
      Complex complex15 = complex5.add(complex1);
      complex15.INF.sin();
      complex2.divide(Double.NaN);
      Complex complex16 = complex12.tanh();
      complex16.multiply(2714.0);
      complex10.cos();
      Complex complex17 = complex10.acos();
      complex17.reciprocal();
      complex1.add(complex9);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.cos();
      Complex complex4 = complex3.multiply(complex3);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.sqrt1z();
      complex6.INF.divide(Double.POSITIVE_INFINITY);
      Complex complex7 = complex1.conjugate();
      complex4.subtract(complex5);
      Complex complex8 = Complex.valueOf((-1.0));
      complex7.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.cos();
      complex3.multiply(complex3);
      Complex complex4 = Complex.ZERO;
      complex4.I.abs();
      complex4.sqrt1z();
      Complex complex5 = complex2.cosh();
      complex2.sinh();
      complex2.tanh();
      complex5.readResolve();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.negate();
      complex3.toString();
      complex5.getArgument();
      complex1.reciprocal();
      complex4.cos();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.multiply(0.7853981633974483);
      complex3.multiply(complex4);
      Complex complex8 = Complex.ZERO;
      complex7.cosh();
      Complex complex9 = complex3.sinh();
      Complex complex10 = Complex.NaN;
      complex10.tanh();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.asin();
      complex0.tan();
      Complex complex13 = new Complex(3.378413594504258E148);
      complex13.reciprocal();
      Complex complex14 = Complex.NaN;
      Complex complex15 = complex14.pow(0.7853981633974483);
      Complex complex16 = Complex.NaN;
      Complex complex17 = Complex.ONE;
      complex17.NaN.getField();
      Complex complex18 = Complex.I;
      complex7.equals(complex9);
      complex13.add((-2328482.0));
      Complex complex19 = complex15.asin();
      complex15.sqrt();
      complex12.isInfinite();
      complex5.pow(3.378413594504258E148);
      complex19.toString();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
      complex0.getField();
      Complex.valueOf(1.5693607430356136, 1.5693607430356136);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = new Complex(313.0);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.NaN.cosh();
      Complex complex2 = complex0.cosh();
      complex0.ONE.hashCode();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.subtract(complex3);
      Complex complex5 = complex4.sin();
      complex1.multiply(1216);
      Complex.valueOf(313.0, 4981.6035335863);
      complex5.ONE.reciprocal();
      complex5.reciprocal();
      Complex complex6 = complex1.subtract(313.0);
      complex6.I.getArgument();
      complex4.multiply(2227);
      Complex complex7 = complex2.multiply(1.5707963267948966);
      complex6.multiply(1796);
      complex7.conjugate();
      Complex complex8 = complex1.sin();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2537.468863224361);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.NaN.subtract(complex2);
      Complex.valueOf((-2025.508206626));
      complex1.ZERO.getArgument();
      Complex complex4 = Complex.ZERO;
      complex1.asin();
      complex2.pow((-2025.508206626));
      Complex complex5 = new Complex(0.0, 0.0);
      complex5.subtract(1246.6855128);
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex5.pow(2537.468863224361);
      complex6.asin();
      Complex complex8 = complex3.divide(2537.468863224361);
      Complex complex9 = Complex.NaN;
      complex1.asin();
      Complex complex10 = new Complex(1617.182, Double.NaN);
      complex10.subtract(complex2);
      complex8.multiply(complex4);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.I.cos();
      complex1.negate();
      Complex complex4 = complex0.negate();
      complex4.NaN.toString();
      complex2.getArgument();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex3.ONE.multiply(Double.NaN);
      Complex complex8 = complex0.multiply(complex7);
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex1.cosh();
      complex5.sinh();
      Complex complex11 = complex6.tanh();
      complex10.asin();
      complex8.tan();
      Complex complex12 = complex9.reciprocal();
      complex5.createComplex(1.0287251472473145, (-3302.773823654));
      Complex complex13 = complex11.conjugate();
      complex7.cosh();
      Complex complex14 = complex10.createComplex(1.0287251472473145, 1.0287251472473145);
      complex13.tan();
      complex13.getField();
      complex12.cosh();
      complex14.abs();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.pow(1246.6855128);
      Complex complex5 = new Complex(5.344099492481288E13, 5.344099492481288E13);
      complex0.subtract(3311.50418143);
      Complex complex6 = complex0.sqrt();
      Complex complex7 = complex6.pow(1246.6855128);
      Complex complex8 = complex7.asin();
      Complex complex9 = complex4.divide(1246.6855128);
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.valueOf(1323.091495238822, 3311.50418143);
      Complex complex12 = complex11.asin();
      complex8.pow(3311.50418143);
      Complex complex13 = complex3.reciprocal();
      complex0.log();
      Complex complex14 = complex9.reciprocal();
      complex2.abs();
      complex13.pow(3311.50418143);
      Complex complex15 = Complex.NaN;
      complex11.getField();
      Complex complex16 = Complex.ONE;
      complex0.equals(complex14);
      complex12.add((-1492.507));
      complex4.asin();
      complex13.sqrt();
      complex5.isInfinite();
      complex15.cosh();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex1.negate();
      Complex complex5 = complex0.negate();
      complex5.NaN.toString();
      complex5.ZERO.getArgument();
      complex2.getArgument();
      Complex complex6 = complex3.cos();
      complex4.divide(complex5);
      complex2.abs();
      Complex complex7 = Complex.INF;
      Complex complex8 = complex2.add(complex6);
      complex1.add(complex8);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex2.multiply(complex0);
      complex0.toString();
      complex4.abs();
      Complex complex6 = Complex.valueOf(0.0, 0.7080734182735711);
      complex5.add(complex6);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = new Complex((-4790.7204), (-4790.7204));
      Complex complex1 = complex0.multiply((-1079));
      complex0.sqrt();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.pow(1463.4);
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.sinh();
      complex5.INF.reciprocal();
      complex4.asin();
      Complex complex6 = complex2.pow((-853.4824109));
      Complex complex7 = complex1.reciprocal();
      complex7.ZERO.sqrt();
      complex6.log();
      complex3.asin();
      Complex complex8 = Complex.ZERO;
      complex8.tan();
      Complex complex9 = new Complex((-853.4824109), 1.033837462320005E7);
      Complex complex10 = new Complex(446.366898102799);
      // Undeclared exception!
      complex10.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2537.468863224361);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex0.ZERO.cosh();
      complex1.NaN.subtract(complex2);
      Complex.valueOf((-2025.508206626));
      complex1.ZERO.getArgument();
      complex0.pow(complex1);
      complex1.asin();
      complex2.pow((-2025.508206626));
      Complex complex3 = new Complex(0.0, 0.0);
      complex3.subtract(1246.6855128);
      complex3.sqrt();
      Complex complex4 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex4.exp();
      Complex complex5 = new Complex((-2645.059471));
      complex5.createComplex(0.0, (-1.728610646009749E253));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.pow(0.0);
      complex2.asin();
      Complex complex3 = complex0.divide(5.2249837964645906E-8);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.pow(1.0);
      complex4.reciprocal();
      complex3.log();
      Complex complex7 = complex6.reciprocal();
      complex5.abs();
      complex2.pow((-280.0));
      Complex complex8 = Complex.NaN;
      complex7.getField();
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.INF;
      complex8.equals(complex10);
      complex6.add((-280.0));
      complex7.asin();
      complex10.divide((-2728.3642300490073));
      complex1.sqrt();
      complex10.isInfinite();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-414.30126412), (-2.8511112548600118E-8));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ZERO.sqrt();
      complex0.cosh();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = new Complex((-2314.79456514783));
      Complex complex7 = complex6.sqrt1z();
      complex5.cosh();
      complex7.sinh();
      complex3.tanh();
      Complex complex8 = Complex.ZERO;
      complex8.asin();
      complex8.tan();
      complex6.reciprocal();
      complex3.createComplex(3.9570944535956896, 1.2074086666107178);
      complex5.conjugate();
      complex3.cosh();
      complex5.createComplex(Double.POSITIVE_INFINITY, (-4102682.4951092745));
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-414.30126412), (-2.8511112548600118E-8));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.ZERO.sqrt();
      complex0.cosh();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.ONE.cosh();
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.I.tanh();
      complex9.I.asin();
      complex8.nthRoot(2656);
      complex7.hashCode();
      Complex complex10 = Complex.ONE;
      complex6.sinh();
      Complex.valueOf((-2.8511112548600118E-8), 1693.23);
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf((-993.4408734));
      complex0.getArgument();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.asin();
      Complex complex4 = complex1.pow(0.1970241367816925);
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex5.asin();
      complex1.sinh();
      complex4.asin();
      complex0.pow(1246.6855128);
      Complex complex8 = complex3.reciprocal();
      complex6.log();
      complex8.getArgument();
      complex8.acos();
      Complex complex9 = Complex.valueOf(1.5707963267948966, 2.134534694578756);
      complex9.add((-993.4408734));
      complex0.add((-5473.22));
      complex0.log();
      Complex.valueOf(2.134534694578756);
      complex7.divide(complex5);
      complex4.readResolve();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex((-4790.7204), (-1785.73));
      Complex complex1 = complex0.multiply((-1079));
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.valueOf(0.24171993136405945);
      complex2.readResolve();
      complex3.equals(complex2);
      complex2.getArgument();
      complex1.acos();
      Complex complex4 = complex0.cosh();
      complex4.ZERO.getField();
      Complex complex5 = complex3.cosh();
      complex5.tanh();
      complex2.abs();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.log();
      complex0.exp();
      complex1.getReal();
      complex0.subtract((-915.495173810993));
      Complex complex2 = new Complex(Double.NEGATIVE_INFINITY, 0.0);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = Complex.valueOf(1.5707963267948966, 1.5707963267948966);
      Complex complex2 = Complex.valueOf((-993.4408734));
      Complex complex3 = new Complex((-1565.2643370065887));
      complex3.getArgument();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.pow(0.1970241367816925);
      Complex complex7 = Complex.valueOf(3.141592653589793);
      Complex complex8 = complex7.pow(0.0);
      Complex complex9 = complex7.asin();
      complex2.sinh();
      Complex complex10 = complex6.asin();
      Complex complex11 = complex1.pow(1246.6855128);
      complex5.reciprocal();
      complex8.log();
      Complex complex12 = complex2.reciprocal();
      complex10.abs();
      complex5.pow((-0.8838817191940501));
      complex12.getField();
      complex9.readResolve();
      complex1.add(373.549218642);
      Complex complex13 = new Complex(2.2515711245439034);
      complex13.asin();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.log();
      complex4.ZERO.hashCode();
      Complex complex5 = complex3.sqrt1z();
      complex5.acos();
      Complex complex6 = complex5.ZERO.divide(0.0);
      Complex complex7 = complex4.sqrt();
      complex7.multiply(complex1);
      Complex complex8 = new Complex(0.0, 2661.945465067402);
      Complex complex9 = complex8.conjugate();
      complex7.subtract(complex6);
      Complex complex10 = Complex.valueOf(20.0);
      complex1.multiply(complex10);
      complex0.INF.divide((-2087.759524));
      Complex complex11 = complex7.sinh();
      complex11.conjugate();
      complex9.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      complex0.sqrt();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.sqrt1z();
      complex4.cosh();
      Complex complex5 = complex1.sinh();
      complex1.tanh();
      Complex complex6 = complex5.asin();
      Complex complex7 = complex0.tan();
      complex5.reciprocal();
      complex4.createComplex(445.54524, (-1.0));
      Complex complex8 = complex2.conjugate();
      complex6.cosh();
      complex7.createComplex(445.54524, (-457.1));
      complex8.tan();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex1.multiply(171.23446793013);
      Complex complex4 = new Complex(2.55748609144135);
      Complex complex5 = complex4.multiply(complex3);
      Complex complex6 = complex4.sqrt1z();
      complex5.cosh();
      Complex complex7 = complex0.sinh();
      complex6.tanh();
      Complex complex8 = complex4.asin();
      complex1.tan();
      complex7.reciprocal();
      Complex complex9 = Complex.valueOf(1.5707963267948966, 2937.17211);
      complex2.conjugate();
      complex7.cosh();
      complex9.createComplex(2.55748609144135, 2.55748609144135);
      complex2.tan();
      complex4.add(complex8);
      complex4.multiply(1336);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.divide(2334.3409181174584);
      Complex complex3 = complex1.divide(2309.27981196377);
      Complex complex4 = Complex.INF;
      complex4.subtract(complex3);
      complex1.getArgument();
      complex2.cos();
      complex4.nthRoot(1);
      complex2.cosh();
      complex1.cosh();
      complex4.abs();
      Complex.valueOf(1.5707963267948966, 183.27809228483258);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.divide(complex4);
      complex0.getArgument();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex4.divide(complex2);
      complex7.NaN.reciprocal();
      complex4.readResolve();
      complex4.equals("W+){p8;;r^D");
      Complex complex8 = Complex.INF;
      complex8.getArgument();
      Complex complex9 = Complex.valueOf(0.7853981633974483, Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.acos();
      complex10.sqrt();
      complex9.add(820.032449535039);
      Complex complex11 = Complex.ONE;
      complex11.add(993.4408734);
      Complex complex12 = complex2.log();
      Complex.valueOf(0.7853981633974483);
      complex12.divide(complex9);
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = new Complex((-1451.0346667750357));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.log();
      complex0.hashCode();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex4.acos();
      Complex complex7 = complex2.divide(0.9999851153304874);
      complex4.sqrt();
      Complex complex8 = Complex.NaN;
      complex8.sqrt1z();
      Complex complex9 = complex3.divide(complex0);
      complex9.getArgument();
      complex5.divide(complex7);
      complex6.readResolve();
      Object object0 = complex4.readResolve();
      complex9.equals(object0);
      Complex complex10 = Complex.ZERO;
      complex10.getArgument();
      Complex complex11 = complex9.acos();
      Complex complex12 = complex8.add(0.0);
      complex12.add(744.0);
      complex6.log();
      Complex.valueOf((-3996.30216429));
      complex7.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1258.4431994424);
      Complex complex2 = complex1.sinh();
      complex2.isInfinite();
      Complex complex3 = Complex.valueOf((-1529.1891950834845), 1258.4431994424);
      complex1.readResolve();
      complex1.getArgument();
      complex0.divide(complex2);
      Complex complex4 = complex3.tan();
      complex0.negate();
      complex2.getField();
      complex0.isInfinite();
      complex3.getArgument();
      Complex complex5 = complex2.pow((-1529.1891950834845));
      complex5.subtract(complex4);
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2334.3409181174584);
      complex1.subtract(complex1);
      complex0.getArgument();
      Complex complex2 = new Complex(6.283185307179586, (-0.8804455116315189));
      Complex complex3 = complex2.cos();
      complex3.NaN.negate();
      complex2.I.sqrt1z();
      complex0.cosh();
      complex2.abs();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.NaN.multiply(complex2);
      complex3.I.readResolve();
      complex1.conjugate();
      complex1.nthRoot(323);
      complex0.cosh();
      Complex complex4 = complex1.cosh();
      complex2.abs();
      complex1.divide((-294.048681));
      complex4.divide((-294.048681));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-433.777169734932));
      Complex complex1 = complex0.INF.sinh();
      complex0.isInfinite();
      Complex complex2 = Complex.valueOf((-1529.1891950834845), (-1529.1891950834845));
      Complex complex3 = (Complex)complex2.NaN.readResolve();
      complex2.ONE.getArgument();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex2.tan();
      complex0.equals(complex1);
      complex3.reciprocal();
      complex1.readResolve();
      complex2.sqrt();
      complex4.exp();
      Complex complex6 = complex5.exp();
      complex6.createComplex((-433.777169734932), (-22.68460749484));
      Complex complex7 = complex5.asin();
      complex0.isInfinite();
      complex3.negate();
      Complex complex8 = (Complex)complex1.readResolve();
      complex7.equals(complex8);
      complex1.add((-22.68460749484));
      complex5.cos();
      Complex.valueOf((-22.68460749484), (-0.8804455116315189));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.I.cos();
      complex1.negate();
      Complex complex4 = complex0.negate();
      complex4.NaN.toString();
      complex2.getArgument();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.cos();
      complex3.ONE.multiply((-2.356194490192345));
      complex6.NaN.add(1.0287251472473145);
      Complex complex7 = complex4.sin();
      complex7.hashCode();
      complex4.multiply((-2.356194490192345));
      complex7.tan();
      complex4.ONE.atan();
      complex3.cos();
      // Undeclared exception!
      complex7.nthRoot(2147471136);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1662.73));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.sin();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.multiply(complex6);
      complex4.sqrt1z();
      Complex complex8 = new Complex((-1662.73));
      complex8.cosh();
      Complex complex9 = complex0.sinh();
      Complex complex10 = Complex.ZERO;
      complex10.tanh();
      complex2.asin();
      Complex complex11 = complex9.tan();
      Complex complex12 = Complex.valueOf((-1.899407107267079E-8), (-1662.73));
      complex12.reciprocal();
      complex5.createComplex(Double.POSITIVE_INFINITY, 445.54524);
      complex11.conjugate();
      complex10.cosh();
      complex7.createComplex((-2592.1992), 1443.759550578048);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = new Complex((-414.30126412), (-2.8511112548600118E-8));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.add((-2.8511112548600118E-8));
      complex1.toString();
      Complex complex6 = complex5.acos();
      complex5.toString();
      Complex complex7 = complex2.divide(complex5);
      complex3.readResolve();
      complex5.equals(complex6);
      Complex complex8 = complex6.acos();
      complex3.atan();
      complex7.multiply(complex8);
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.divide(2334.3409181174584);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex5.divide(complex1);
      complex3.getArgument();
      Complex complex7 = Complex.NaN;
      complex4.divide(complex7);
      Object object0 = complex7.readResolve();
      complex5.equals(object0);
      complex0.getArgument();
      Complex complex8 = complex7.acos();
      complex8.ONE.sqrt();
      complex4.add(820.032449535039);
      complex7.add(993.4408734);
      complex6.log();
      Complex.valueOf((-1008.77273));
      complex1.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = Complex.valueOf((-993.4408734));
      Complex complex3 = new Complex((-1565.2643370065887));
      complex3.getArgument();
      Complex complex4 = complex0.pow(complex2);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.pow(0.1970241367816925);
      Complex complex7 = complex3.sqrt();
      Complex complex8 = complex7.pow(0.0);
      Complex complex9 = complex7.asin();
      complex2.sinh();
      Complex complex10 = complex6.asin();
      Complex complex11 = complex1.pow(1246.6855128);
      complex5.reciprocal();
      complex8.log();
      Complex complex12 = complex2.reciprocal();
      complex10.abs();
      complex5.pow((-0.8838817191940501));
      complex12.getField();
      Object object0 = complex9.readResolve();
      complex4.equals(object0);
      complex1.add(373.549218642);
      Complex complex13 = new Complex(2.2515711245439034);
      complex13.asin();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2537.468863224361);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.NaN.subtract(complex2);
      Complex complex4 = Complex.valueOf((-2025.508206626));
      complex1.ZERO.getArgument();
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex1.pow(1246.6855128);
      complex7.subtract(0.0);
      Complex complex8 = complex4.sqrt1z();
      Complex complex9 = Complex.I;
      complex9.divide(complex1);
      complex9.getArgument();
      Complex complex10 = complex9.divide(complex6);
      complex4.readResolve();
      complex8.equals(complex7);
      complex3.getArgument();
      complex10.acos();
      Complex complex11 = complex9.add(0.0);
      complex8.add(Double.NaN);
      complex11.log();
      Complex.valueOf(2738.5214);
      Complex complex12 = Complex.NaN;
      complex4.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = complex5.acos();
      Complex complex7 = complex5.ZERO.divide(0.0);
      Complex complex8 = complex4.sqrt();
      Complex complex9 = complex4.sqrt();
      complex8.pow((-2434.0));
      Complex complex10 = Complex.ZERO;
      complex10.asin();
      complex9.divide(0.0);
      complex7.sinh();
      complex6.asin();
      complex2.pow((-280.0));
      Complex complex11 = complex2.reciprocal();
      Complex complex12 = Complex.NaN;
      complex1.reciprocal();
      complex5.abs();
      complex7.pow((-2434.0));
      complex11.getField();
      Complex complex13 = Complex.valueOf(Double.NaN);
      Object object0 = new Object();
      complex13.equals(object0);
      complex1.add((-280.0));
      Complex complex14 = Complex.INF;
      complex14.asin();
      Complex complex15 = Complex.I;
      complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1662.73));
      Complex complex1 = complex0.divide(2334.3409181174584);
      Complex complex2 = complex0.subtract(complex1);
      complex0.getArgument();
      Complex.valueOf(2.0);
      Complex complex3 = complex1.cos();
      complex2.nthRoot(1);
      complex1.cosh();
      complex3.cosh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex3.add(951.516547);
      complex3.toString();
      Complex complex7 = complex0.acos();
      complex4.toString();
      complex1.divide(complex2);
      complex2.readResolve();
      complex6.equals(complex7);
      Complex complex8 = complex5.acos();
      Complex complex9 = complex6.atan();
      complex9.pow(1127.65475);
      complex3.multiply(complex9);
      Complex complex10 = complex5.sqrt1z();
      Complex complex11 = complex8.createComplex(951.516547, 951.516547);
      complex11.ZERO.atan();
      complex10.atan();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(789.722086317383, 2684.208);
      Complex complex1 = new Complex(0.0, 0.0);
      Complex complex2 = Complex.valueOf(654.235);
      Complex complex3 = complex1.createComplex(789.722086317383, 1680.5073773094);
      complex3.INF.multiply((-5.79002114093961E86));
      Complex complex4 = complex0.subtract(complex1);
      complex3.reciprocal();
      complex3.exp();
      complex0.multiply(1);
      complex4.toString();
      complex0.negate();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-433.777169734932));
      complex0.INF.sinh();
      complex0.isInfinite();
      Complex complex1 = Complex.valueOf((-1529.1891950834845), (-1529.1891950834845));
      complex1.NaN.readResolve();
      complex1.ONE.getArgument();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex0.NaN.negate();
      complex3.INF.getField();
      complex2.isInfinite();
      complex3.getArgument();
      complex4.pow((-2714.5462298695));
      complex3.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, 2537.468863224361);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex1.NaN.subtract(complex2);
      Complex complex3 = Complex.valueOf((-2025.508206626));
      complex1.ZERO.getArgument();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex1.pow(1246.6855128);
      Complex complex7 = complex6.subtract(0.0);
      Complex complex8 = complex3.sqrt();
      complex0.ZERO.pow(Double.NaN);
      Complex complex9 = complex1.asin();
      Complex complex10 = complex5.divide(2537.468863224361);
      Complex complex11 = complex9.I.sinh();
      Complex complex12 = complex10.I.asin();
      Complex complex13 = complex3.pow((-280.0));
      Complex complex14 = complex4.reciprocal();
      complex14.INF.log();
      complex9.reciprocal();
      complex7.abs();
      complex4.INF.pow(0.0);
      complex4.getField();
      complex8.equals(complex12);
      Complex complex15 = complex13.add((-1982.166));
      complex15.I.asin();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.NaN.asin();
      Complex complex1 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.NaN.sqrt();
      Complex complex4 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex5 = complex4.conjugate();
      complex5.readResolve();
      complex4.NaN.acos();
      complex0.hashCode();
      complex0.isInfinite();
      complex1.I.log();
      complex5.getImaginary();
      complex3.multiply(complex0);
      complex4.getArgument();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-522.0449033047173), Double.NaN);
      Complex complex1 = Complex.valueOf(Double.NaN, 4872.21138);
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.I.getArgument();
      Complex complex3 = complex0.log();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex1.sinh();
      Complex complex6 = complex5.ZERO.sqrt1z();
      Complex complex7 = complex1.sqrt1z();
      complex7.multiply(complex0);
      complex1.hashCode();
      Complex complex8 = complex5.I.subtract(complex2);
      complex8.INF.add((-4326.4));
      complex8.ONE.exp();
      complex1.divide(complex4);
      Complex.valueOf(4872.21138, (-4326.4));
      complex5.exp();
      complex0.acos();
      complex5.getArgument();
      complex3.getReal();
      Complex complex9 = complex6.createComplex(Double.NaN, (-4326.4));
      complex9.INF.sin();
      complex6.getField();
      complex4.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.log();
      Complex complex1 = complex0.exp();
      complex1.createComplex((-2308.0745690855997), 0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      double double0 = 119.5250793317037;
      Complex complex1 = complex0.I.divide(119.5250793317037);
      Complex complex2 = complex0.INF.multiply(119.5250793317037);
      Complex complex3 = complex2.I.atan();
      complex3.I.multiply(119.5250793317037);
      complex1.ONE.sqrt();
      Complex complex4 = complex1.conjugate();
      double double1 = (-1.0);
      Complex complex5 = complex0.createComplex((-273.9486354), (-1.0));
      Complex complex6 = complex4.multiply((-273.9486354));
      int int0 = 1;
      complex6.I.multiply(1);
      Complex complex7 = complex4.tan();
      complex7.multiply((-1.0));
      complex0.negate();
      complex5.reciprocal();
      int int1 = (-1743);
      try { 
        complex7.INF.nthRoot((-1743));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,743
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.I.subtract(complex1);
      Complex complex3 = complex1.I.cos();
      complex1.negate();
      Complex complex4 = complex0.negate();
      complex4.NaN.toString();
      complex2.getArgument();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.cos();
      complex3.ONE.multiply((-2.356194490192345));
      complex6.NaN.add(1.0287251472473145);
      Complex complex7 = complex4.sin();
      complex7.hashCode();
      Complex complex8 = complex4.multiply((-2.356194490192345));
      Complex complex9 = complex7.tan();
      complex4.ONE.atan();
      Complex complex10 = complex3.multiply((-4277));
      Complex complex11 = complex10.INF.divide(complex6);
      complex11.I.acos();
      Complex complex12 = complex9.cos();
      complex8.ZERO.multiply(complex11);
      Complex complex13 = complex12.cosh();
      Complex complex14 = Complex.valueOf((-2.356194490192345));
      complex10.multiply(1);
      complex8.INF.multiply((double) 1);
      Object object0 = new Object();
      complex14.equals(object0);
      complex13.pow(complex8);
      Complex complex15 = complex12.tanh();
      complex15.exp();
      complex14.add(1.0287251472473145);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      double double0 = (-770.60412404);
      Complex complex0 = new Complex((-770.60412404));
      Complex complex1 = null;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = complex1.NaN.multiply(806);
      complex2.I.exp();
      Complex.valueOf((double) 806);
      complex2.NaN.getField();
      complex1.INF.toString();
      Complex complex3 = complex2.NaN.exp();
      complex2.negate();
      Complex complex4 = Complex.valueOf(9.023639664212642E195, 0.0);
      complex0.getImaginary();
      complex0.ONE.toString();
      Complex complex5 = Complex.valueOf(3573.4, 0.0);
      complex5.abs();
      Complex complex6 = complex5.pow(complex1);
      complex6.ZERO.sinh();
      Complex complex7 = complex2.subtract(complex4);
      complex4.isInfinite();
      complex1.I.asin();
      Complex complex8 = complex7.sqrt();
      complex8.INF.pow(2.0);
      complex3.getField();
      complex0.getImaginary();
      complex0.divide(9.023639664212642E195);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1655.828052), (-1655.828052));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.valueOf((-1655.828052), (-1655.828052));
      complex0.ONE.abs();
      Complex complex3 = complex0.add(complex1);
      complex2.add(complex3);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 6.283185307179586);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.I.multiply((-2565));
      Complex complex3 = complex2.ONE.pow(complex1);
      complex2.ONE.multiply(2604.204325751042);
      Complex complex4 = complex0.reciprocal();
      complex1.getField();
      complex1.subtract(400.92325);
      complex4.INF.reciprocal();
      Complex complex5 = complex1.multiply(400.92325);
      complex4.readResolve();
      Complex complex6 = complex5.subtract((-1.3811462167E-314));
      complex5.toString();
      complex6.abs();
      complex3.isInfinite();
      complex1.readResolve();
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.exp();
      complex0.INF.readResolve();
      Complex complex2 = complex0.cosh();
      complex2.NaN.divide(complex1);
      Complex complex3 = complex1.ONE.atan();
      complex3.getArgument();
      Complex complex4 = complex2.NaN.sinh();
      complex4.NaN.sqrt();
      complex2.I.pow(634.2521148733803);
      complex2.ONE.toString();
      complex2.getReal();
      // Undeclared exception!
      complex1.nthRoot(5083);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex1.ZERO.exp();
      Complex complex3 = complex2.INF.multiply(0.0);
      Complex complex4 = complex1.ONE.cos();
      Complex complex5 = complex0.ONE.add(0.3333333134651184);
      Complex complex6 = Complex.valueOf(0.3333333134651184, (-417.35579503490817));
      complex6.INF.atan();
      Complex complex7 = complex5.INF.subtract(complex6);
      complex7.ONE.atan();
      Complex complex8 = complex4.tan();
      Complex complex9 = complex4.NaN.sinh();
      Complex complex10 = Complex.valueOf((-1223.5100348784047), (-1223.5100348784047));
      complex10.ONE.add(complex3);
      complex4.ZERO.nthRoot(1);
      complex10.abs();
      complex10.divide(complex8);
      complex1.atan();
      Complex complex11 = complex8.atan();
      Complex complex12 = complex11.NaN.sinh();
      complex12.NaN.multiply(117);
      complex11.NaN.sinh();
      Complex complex13 = complex11.I.reciprocal();
      complex13.abs();
      Complex complex14 = complex11.subtract(0.3333333134651184);
      complex14.nthRoot(1);
      Object object0 = new Object();
      complex2.equals(object0);
      Complex.valueOf(0.0);
      complex0.divide(0.0);
      complex3.subtract((-417.35579503490817));
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2857.30003416825);
      Complex complex1 = complex0.log();
      complex0.INF.hashCode();
      Complex complex2 = complex1.cos();
      complex2.equals((Object) null);
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = Complex.valueOf((-1867.0377));
      Complex complex5 = complex0.NaN.pow(complex2);
      complex5.INF.exp();
      complex5.nthRoot(1070);
      Complex complex6 = complex1.add(873.771313);
      complex6.ONE.abs();
      Complex complex7 = complex0.sqrt();
      complex7.I.subtract((double) 1070);
      complex7.sinh();
      Complex complex8 = complex4.cos();
      complex8.ONE.add((-465.29505));
      complex3.acos();
      complex7.conjugate();
      complex1.nthRoot(1070);
      Complex complex9 = complex5.sinh();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1041.28391), (-1041.28391));
      complex0.pow(1.9350945949554443);
      Complex complex2 = complex1.multiply(1.9350945949554443);
      Complex complex3 = complex0.multiply(complex1);
      complex0.ZERO.pow(complex2);
      Complex complex4 = complex3.INF.multiply((-1041.28391));
      complex4.NaN.multiply((-1041.28391));
      try { 
        complex3.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.subtract(complex2);
      complex3.I.add(0.0);
      complex1.ZERO.createComplex(0.0, 0.0);
      Complex complex4 = complex2.I.sin();
      complex0.INF.tanh();
      Complex complex5 = new Complex(1526.4001, 0.0);
      complex4.ONE.multiply(complex5);
      Complex complex6 = complex0.conjugate();
      complex6.reciprocal();
      complex2.toString();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.asin();
      complex0.ZERO.getField();
      Complex complex2 = complex0.atan();
      complex2.ZERO.multiply(complex0);
      Complex complex3 = complex2.sinh();
      complex3.ONE.pow(1003.69064754);
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.divide(complex1);
      Complex complex6 = complex5.cos();
      Complex complex7 = complex5.I.cosh();
      Complex complex8 = complex4.multiply(complex6);
      Complex complex9 = complex8.sqrt1z();
      Complex.valueOf(1003.69064754, (-359.6408683767));
      complex5.add((-5385.791));
      complex3.ZERO.asin();
      Complex.valueOf((-359.6408683767), 0.0);
      complex3.asin();
      complex3.multiply((-802));
      complex7.getField();
      Complex complex10 = complex9.sinh();
      complex10.sqrt1z();
      complex5.equals("tL");
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex1.NaN.log();
      complex2.INF.pow((-688.2918960871687));
      Complex complex3 = complex0.ONE.multiply((-1565.2643370065887));
      complex3.ONE.asin();
      Complex complex4 = complex0.INF.log();
      complex0.hashCode();
      Complex complex5 = complex4.sinh();
      complex0.getReal();
      complex4.subtract(5.865827662008209E-8);
      complex5.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isNaN();
      Complex complex1 = complex0.I.divide((-1891.6295116258));
      Complex complex2 = complex1.NaN.subtract((-1891.6295116258));
      complex2.INF.toString();
      complex1.I.hashCode();
      Complex complex3 = complex1.ZERO.sinh();
      Complex complex4 = complex0.tanh();
      complex4.isNaN();
      complex0.getArgument();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = complex4.ZERO.cos();
      complex5.ONE.cos();
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex7.ONE.multiply(1);
      complex0.I.multiply(1);
      complex4.INF.abs();
      complex3.ONE.readResolve();
      Complex complex9 = complex0.sqrt1z();
      complex9.abs();
      complex1.ONE.pow(complex3);
      Complex complex10 = complex3.reciprocal();
      complex10.ONE.divide(Double.NaN);
      complex1.tanh();
      complex5.tanh();
      complex0.subtract((-1891.6295116258));
      complex8.abs();
      complex5.getArgument();
      complex0.isInfinite();
      complex1.subtract(Double.NaN);
      complex1.multiply(397);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-5223.423131363), 1.1793478462381443E-7);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.reciprocal();
      complex1.readResolve();
      complex4.ONE.subtract((-5223.423131363));
      Complex complex5 = Complex.valueOf(491.0991797884504);
      Complex complex6 = complex5.ZERO.multiply(1.1793478462381443E-7);
      complex3.INF.pow(complex2);
      complex0.cosh();
      Complex complex7 = Complex.valueOf(491.0991797884504, 491.0991797884504);
      Complex complex8 = complex7.ZERO.conjugate();
      complex7.NaN.multiply(1020);
      complex7.ZERO.cosh();
      complex7.ONE.tanh();
      complex8.ZERO.subtract((-235.0));
      complex7.I.sin();
      complex4.acos();
      complex5.ZERO.sinh();
      complex6.subtract(0.0);
      Complex.valueOf(1.1793478462381443E-7);
      complex6.getImaginary();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = new Complex((-2030.1635377461));
      Complex complex1 = Complex.valueOf((-2030.1635377461));
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex1.atan();
      complex5.hashCode();
      Complex complex6 = complex4.add(complex5);
      complex6.ZERO.subtract(complex0);
      complex3.divide(complex5);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 183.275364251);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      complex2.divide(183.275364251);
      Complex complex3 = complex0.pow(complex1);
      complex0.NaN.sin();
      complex1.subtract(complex0);
      Complex complex4 = complex0.ZERO.add(1.0);
      Complex complex5 = complex3.I.conjugate();
      complex4.acos();
      Complex complex6 = complex5.ONE.conjugate();
      complex6.ONE.abs();
      complex1.INF.atan();
      Complex complex7 = complex0.multiply(0);
      complex7.ONE.sqrt();
      complex3.I.pow(complex5);
      complex1.abs();
      Complex complex8 = complex3.add((-2526.77212665278));
      complex8.I.subtract((double) 0);
      complex8.ZERO.abs();
      Complex complex9 = complex3.pow(complex4);
      complex9.ZERO.multiply(0);
      complex2.NaN.getArgument();
      complex6.getField();
      complex4.isInfinite();
      complex2.multiply(complex0);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex1.I.pow(complex2);
      complex1.INF.conjugate();
      complex0.isNaN();
      complex0.isNaN();
      complex3.conjugate();
      Complex complex5 = complex1.acos();
      Complex complex6 = complex1.NaN.multiply(0.6415454149246216);
      complex6.INF.add(0.6415454149246216);
      complex5.I.subtract(complex3);
      complex5.multiply(complex1);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.atan();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex0.negate();
      complex5.sinh();
      Complex complex6 = complex0.reciprocal();
      complex6.NaN.pow(complex0);
      complex6.ZERO.atan();
      double double0 = 0.0;
      complex5.INF.toString();
      Complex complex7 = complex5.atan();
      complex4.I.exp();
      complex7.cosh();
      complex6.I.getArgument();
      complex3.ZERO.cos();
      Complex complex8 = complex2.divide(0.0);
      complex8.ONE.tan();
      try { 
        complex8.ONE.nthRoot((-2178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,178
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.I.divide(0.0);
      complex0.ONE.createComplex((-394.0963650588502), 0.0);
      Complex.valueOf(765.0, (-5.179903818099661E-9));
      Complex complex1 = complex0.ONE.pow(0.0);
      complex1.subtract(0.0);
      complex0.getImaginary();
      complex0.cosh();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex((-695.38389));
      Complex complex1 = complex0.ZERO.sinh();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.NaN.add(complex0);
      Complex complex4 = complex0.NaN.tan();
      complex1.ZERO.multiply(1525);
      Complex complex5 = complex3.ONE.reciprocal();
      Complex complex6 = complex5.I.cosh();
      complex6.ZERO.cos();
      complex3.I.atan();
      Complex complex7 = Complex.NaN;
      Complex complex8 = complex0.subtract(complex7);
      complex8.NaN.getArgument();
      complex8.acos();
      Complex.valueOf((-695.38389), (-695.38389));
      Complex complex9 = complex2.add(Double.NaN);
      Complex.valueOf(0.0, 7.952287052787358E165);
      complex9.NaN.add((-104.0));
      complex8.multiply(873);
      complex0.abs();
      complex9.abs();
      complex4.cosh();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      complex1.INF.divide(2334.3409181174584);
      Complex complex2 = complex0.subtract(complex1);
      complex2.getArgument();
      complex2.cos();
      complex1.ONE.nthRoot(1);
      complex1.cosh();
      complex1.cosh();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.cos();
      Complex complex4 = complex2.log();
      complex4.ZERO.hashCode();
      Complex complex5 = complex3.sqrt1z();
      complex5.acos();
      complex5.ZERO.divide(0.0);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex6.ZERO.divide(complex2);
      complex8.I.getArgument();
      complex8.INF.divide(complex7);
      Object object0 = complex2.readResolve();
      complex3.equals(object0);
      complex1.getArgument();
      complex0.acos();
      complex2.add((-0.7853981633974483));
      Complex complex9 = complex1.add(1.7270287031459572E-134);
      complex9.log();
      Complex.valueOf((-967.6704985));
      complex2.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex0.sqrt1z();
      complex0.NaN.multiply(complex2);
      Complex complex3 = complex1.conjugate();
      complex1.subtract(complex3);
      complex2.multiply(complex0);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply(0);
      Complex.valueOf((-1737.53), (-1737.53));
      complex1.NaN.readResolve();
      complex1.NaN.sin();
      Complex complex2 = complex1.negate();
      complex2.I.getArgument();
      Object object0 = complex0.readResolve();
      Complex complex3 = complex0.atan();
      complex3.I.createComplex(2375.86272875358, 1.5707963267948966);
      complex3.atan();
      complex3.ONE.getField();
      complex3.getArgument();
      complex0.equals(object0);
      complex0.equals((Object) null);
      Complex complex4 = Complex.valueOf((-1131.70151062), 0.0);
      complex4.getArgument();
      complex2.pow((-455.4679));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.I.abs();
      complex0.getArgument();
      complex0.getField();
      complex0.INF.log();
      Complex complex1 = complex0.ZERO.sqrt1z();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.I.createComplex(0.0, 0.0);
      Complex.valueOf(0.0);
      complex1.add(1.0);
      Complex complex4 = complex2.I.acos();
      complex1.INF.getField();
      complex4.NaN.toString();
      complex0.toString();
      complex3.tanh();
      complex0.hashCode();
      Complex complex5 = complex1.add(complex2);
      complex4.NaN.acos();
      complex5.ONE.add(1.0);
      Complex complex6 = complex5.NaN.sinh();
      complex6.asin();
      Complex complex7 = complex4.pow(1.0);
      complex7.ONE.tanh();
      complex3.createComplex(0.0, 0.0);
      Complex complex8 = complex0.atan();
      complex8.tanh();
      complex0.toString();
      complex8.createComplex(0.0, 0.0);
      complex5.reciprocal();
      complex4.divide(0.0);
      Complex.valueOf((-4995.729), 0.0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.hashCode();
      complex0.INF.getArgument();
      Complex complex1 = Complex.valueOf((-2878.0613829508));
      complex1.I.subtract(complex0);
      Complex complex2 = complex1.I.cos();
      complex2.ONE.negate();
      Complex complex3 = complex0.negate();
      complex3.ONE.atan();
      Complex complex4 = complex3.ONE.divide(0.7853981633974483);
      complex0.hashCode();
      complex4.conjugate();
      Complex complex5 = complex3.tan();
      complex5.ZERO.subtract(0.7853981633974483);
      complex0.getReal();
      Complex complex6 = complex4.log();
      complex6.NaN.divide(20.0);
      complex3.getImaginary();
      complex4.hashCode();
      Complex complex7 = complex1.negate();
      complex7.tanh();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(1488);
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = Complex.valueOf((double) 1488, (double) 1488);
      Complex complex5 = complex4.NaN.sqrt();
      Object object0 = complex0.ONE.readResolve();
      Complex complex6 = complex1.ZERO.cosh();
      assertTrue(complex6.equals((Object)object0));
      
      Complex complex7 = complex4.atan();
      Complex complex8 = complex3.ONE.sinh();
      complex8.ZERO.readResolve();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex5.I.add((double) 1488);
      assertEquals(1488.0, complex10.getReal(), 0.01);
      
      Complex.valueOf((double) 1488);
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex11.I.cosh();
      double double0 = complex5.ZERO.abs();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex13 = complex12.ONE.sinh();
      assertEquals(1.1752011936438014, complex13.getReal(), 0.01);
      
      Complex complex14 = complex12.INF.add(complex4);
      Complex complex15 = complex3.sin();
      Complex complex16 = complex3.subtract(0.0);
      Complex complex17 = complex15.NaN.cosh();
      complex5.toString();
      Complex complex18 = complex1.sqrt1z();
      Complex complex19 = complex18.NaN.negate();
      assertSame(complex19, complex17);
      
      Complex complex20 = complex15.sqrt();
      complex2.readResolve();
      complex5.pow((-760.76796));
      Complex complex21 = complex9.tanh();
      assertEquals(0.4256181235150851, complex21.getImaginary(), 0.01);
      
      Complex complex22 = complex1.subtract(complex14);
      assertTrue(complex3.isInfinite());
      assertSame(complex22, complex20);
      assertTrue(complex14.equals((Object)complex16));
      
      Complex.valueOf((-760.76796), (double) 1488);
      Complex complex23 = complex7.sqrt1z();
      assertEquals((-1.2109275979231142), complex23.getImaginary(), 0.01);
      assertFalse(complex23.isInfinite());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-3069.366795));
      Complex complex2 = complex1.NaN.cosh();
      Complex complex3 = complex0.add(1.71845288713123E115);
      complex2.ONE.conjugate();
      Complex complex4 = complex3.ONE.pow(complex0);
      double double0 = complex3.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex5 = complex3.sinh();
      assertEquals(Double.POSITIVE_INFINITY, complex5.getReal(), 0.01);
      
      Complex complex6 = complex1.createComplex(1.71845288713123E115, 2196.5);
      Complex complex7 = complex6.I.tanh();
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(1.557407724654902, complex7.getImaginary(), 0.01);
      
      complex4.negate();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.I.subtract(351.447009008616);
      assertEquals((-351.447009008616), complex9.getReal(), 0.01);
      assertEquals(1.0, complex9.getImaginary(), 0.01);
      assertTrue(complex8.equals((Object)complex5));
      
      String string0 = complex4.toString();
      assertEquals("(1.0, 0.0)", string0);
      
      Complex complex10 = Complex.valueOf(0.0, (-3069.366795));
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex1.divide((-994.7445));
      assertEquals(3.08558307686044, complex11.getReal(), 0.01);
      
      Complex complex12 = complex4.cosh();
      assertEquals(0.0, complex12.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Complex complex0 = new Complex((-414.30126412), (-2.8511112548600118E-8));
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.ZERO.sin();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.ZERO.sqrt();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.multiply(complex3);
      Complex complex7 = complex6.sqrt1z();
      complex7.ONE.cosh();
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex8.I.tanh();
      Complex complex10 = complex9.I.asin();
      assertEquals(0.8813735870195428, complex10.getImaginary(), 0.01);
      
      Complex complex11 = complex8.NaN.tan();
      Complex complex12 = complex1.INF.reciprocal();
      complex4.createComplex(445.54524, (-3302.773823654));
      assertEquals(1.2098653020372062E172, complex4.getImaginary(), 0.01);
      assertEquals(4.243486815798108E179, complex4.getReal(), 0.01);
      
      Complex complex13 = complex1.conjugate();
      Complex complex14 = complex13.cosh();
      assertSame(complex14, complex11);
      
      complex6.createComplex((-457.1), 445.54524);
      assertTrue(complex6.equals((Object)complex12));
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      
      Complex complex15 = complex9.tan();
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertEquals(0.9149994957367077, complex15.getImaginary(), 0.01);
      assertEquals((-4.243486815798108E179), complex8.getReal(), 0.01);
  }
}
