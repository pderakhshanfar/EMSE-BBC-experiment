/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:47:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.multiply(495);
      Complex complex2 = complex0.NaN.createComplex(398.9, (-5.200242118648143E-273));
      Complex complex3 = complex0.add(5.769871153180574E57);
      Complex complex4 = complex0.conjugate();
      Complex complex5 = complex2.sinh();
      complex5.NaN.nthRoot(476);
      Complex complex6 = complex5.ZERO.cosh();
      Complex complex7 = complex3.sqrt1z();
      complex7.I.atan();
      complex7.NaN.exp();
      Complex complex8 = complex2.ONE.multiply(complex4);
      complex3.NaN.nthRoot(44);
      complex7.INF.getField();
      Complex complex9 = complex5.sqrt1z();
      complex9.multiply(495);
      Complex complex10 = complex1.subtract(complex6);
      complex8.multiply(5.769871153180574E57);
      Complex complex11 = complex10.subtract((-935.0057829));
      complex11.sqrt();
      complex5.add(complex8);
      Complex complex12 = complex0.cosh();
      complex12.INF.nthRoot(495);
      Complex complex13 = complex6.subtract((-1034.857263));
      complex13.ZERO.divide(complex3);
      Complex.valueOf(545.213571277817, (-1.3577357192972777E258));
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Object object0 = complex0.readResolve();
      Object object1 = complex0.readResolve();
      complex0.equals(object1);
      Complex complex1 = Complex.valueOf((-1.0), 8.90737333900943E103);
      Complex complex2 = complex1.divide(complex0);
      complex2.readResolve();
      Complex complex3 = Complex.NaN;
      complex2.equals(object0);
      Complex complex4 = complex2.divide(2.3400625068490396E-280);
      complex4.subtract((-2122.24969666));
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex2.cosh();
      complex4.multiply(complex0);
      complex4.acos();
      Complex complex7 = complex1.multiply(4140);
      complex7.multiply(complex5);
      complex4.multiply(8.90737333900943E103);
      Complex complex8 = new Complex(564);
      complex6.sqrt();
      complex5.nthRoot(564);
      Complex complex9 = Complex.NaN;
      complex1.multiply(4140);
      complex2.sqrt();
      complex8.createComplex(564, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 333, (-5.433154287341921E-8));
      complex0.readResolve();
      complex0.equals("G;wj");
      Complex complex1 = Complex.valueOf(0.2531573176383972, 907.5739395225);
      Complex complex2 = complex0.divide(complex1);
      complex0.readResolve();
      Complex complex3 = complex0.add(complex2);
      complex3.equals("G;wj");
      Complex complex4 = complex1.divide((-5.433154287341921E-8));
      complex1.subtract(1.5707963267948966);
      Complex.valueOf(0.2531573176383972);
      double double0 = (-1.3810978455418157);
      Complex complex5 = Complex.valueOf((-1.3810978455418157));
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.multiply(complex4);
      Complex complex8 = complex7.acos();
      Complex complex9 = complex0.multiply(2625);
      Complex complex10 = complex8.multiply(complex6);
      complex3.multiply(1172.835);
      complex9.multiply(complex0);
      complex6.readResolve();
      complex10.sqrt();
      // Undeclared exception!
      complex4.nthRoot(2147464281);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.532717207690439E-4, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.tan();
      complex2.tan();
      Complex complex3 = complex2.NaN.conjugate();
      complex3.ONE.sqrt();
      Complex complex4 = complex0.multiply(complex1);
      complex0.toString();
      complex1.ZERO.subtract(complex4);
      Complex complex5 = complex4.I.pow(3.532717207690439E-4);
      Complex complex6 = complex4.ZERO.subtract(3.532717207690439E-4);
      double double0 = 1.0;
      complex6.NaN.createComplex(3.532717207690439E-4, 1.0);
      Complex complex7 = complex4.tan();
      Complex complex8 = complex1.asin();
      Complex complex9 = complex8.ONE.createComplex(Double.POSITIVE_INFINITY, 3.532717207690439E-4);
      complex5.ZERO.tan();
      complex9.ONE.asin();
      complex9.subtract(3300.2493034);
      complex0.negate();
      Complex complex10 = complex5.sin();
      complex10.NaN.divide(complex7);
      complex7.cosh();
      try { 
        complex8.nthRoot((-90));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -90
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex4.sin();
      complex3.abs();
      complex3.subtract(Double.NaN);
      complex1.add(complex0);
      complex3.readResolve();
      complex3.createComplex((-1.0), 20.0);
      complex1.multiply(complex3);
      Complex complex6 = Complex.INF;
      complex4.pow(complex6);
      complex5.log();
      Complex complex7 = Complex.INF;
      complex5.log();
      complex1.reciprocal();
      complex3.reciprocal();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex1.I.sin();
      complex1.INF.abs();
      Complex complex2 = Complex.valueOf((-3201.21389018));
      complex2.ONE.sinh();
      Complex complex3 = complex0.subtract((-3201.21389018));
      complex0.NaN.add(complex3);
      complex0.I.createComplex((-3201.21389018), (-3201.21389018));
      complex2.ONE.multiply(complex1);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = new Complex(1233.96365636121, (-20.0));
      complex0.I.sin();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, (-2312.875013057));
      Complex complex1 = complex0.sinh();
      complex1.ZERO.exp();
      Complex complex2 = complex0.tan();
      complex2.NaN.hashCode();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex3.log();
      Complex complex5 = complex0.pow(complex2);
      Complex complex6 = complex5.ONE.divide(complex0);
      complex3.toString();
      Complex complex7 = complex3.asin();
      complex6.ONE.getArgument();
      complex7.subtract(complex4);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex8 = complex0.cosh();
      complex8.ZERO.abs();
      complex7.ONE.acos();
      complex7.cosh();
      complex3.atan();
      complex6.sin();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(2171.79, 1277.59244);
      complex1.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.NaN;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex.valueOf((-5.003410681432538E-8), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2803.2125), (-2803.2125));
      Complex complex1 = complex0.multiply(2452.4666613059753);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      try { 
        complex1.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = new Complex(1.130435759928337E-140);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = Complex.INF;
      complex2.divide(complex4);
      complex0.add(1.130435759928337E-140);
      complex3.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-139));
      complex1.acos();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.valueOf(3.7179924024793253E227);
      complex3.subtract(3.7179924024793253E227);
      Complex complex4 = Complex.valueOf((double) (-139));
      Complex complex5 = complex2.multiply(complex3);
      complex5.acos();
      Complex complex6 = Complex.ZERO;
      complex6.multiply(complex3);
      complex3.getArgument();
      complex4.abs();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.multiply((-40));
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.ZERO.negate();
      complex2.INF.sinh();
      complex3.INF.pow(complex2);
      complex2.I.tan();
      Complex complex4 = complex1.log();
      complex0.INF.acos();
      Complex complex5 = complex1.createComplex((-40), (-40));
      Complex complex6 = complex5.multiply(Double.NaN);
      complex1.NaN.readResolve();
      Complex complex7 = complex1.tanh();
      Complex.valueOf((double) (-40), (-1325.66817006774));
      Complex complex8 = complex7.negate();
      complex8.I.sinh();
      complex8.subtract(complex4);
      Complex complex9 = complex5.negate();
      complex1.add((double) (-40));
      complex7.I.subtract(complex6);
      complex1.sin();
      complex9.INF.nthRoot(822);
      try { 
        complex7.nthRoot((-40));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -40
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = new Complex(2273.0229865201823);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals("G;wj");
      Complex complex2 = Complex.valueOf(2273.0229865201823, 2.3400625068490396E-280);
      Complex complex3 = complex1.tanh();
      Complex complex4 = Complex.valueOf(1.0, 2.3400625068490396E-280);
      Complex complex5 = (Complex)complex0.readResolve();
      complex2.equals(complex5);
      Complex complex6 = complex3.divide(2.3400625068490396E-280);
      Complex complex7 = complex4.subtract(1790.423);
      Complex.valueOf((-1836.7109400042));
      Complex complex8 = new Complex(879.061, Double.POSITIVE_INFINITY);
      complex8.getArgument();
      complex7.abs();
      complex8.getField();
      complex0.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.6764062643051147);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.cosh();
      complex1.toString();
      complex2.getReal();
      complex0.abs();
      Complex complex3 = new Complex(0.6764062643051147, 0.0);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.createComplex((-745.574899), (-1654.651201));
      Complex complex6 = complex2.tan();
      Complex complex7 = Complex.INF;
      Complex complex8 = Complex.valueOf((-550.0), 0.7289705229238762);
      complex6.ZERO.divide(complex8);
      complex7.divide(Double.NaN);
      complex5.asin();
      complex4.multiply(complex1);
      Complex complex9 = complex3.sqrt1z();
      Complex.valueOf((-550.0), 2.0358991622924805);
      Complex complex10 = complex6.pow(complex3);
      complex7.cosh();
      Complex complex11 = complex9.sqrt1z();
      Complex complex12 = complex7.tanh();
      complex0.hashCode();
      complex12.isNaN();
      complex5.readResolve();
      complex10.subtract(complex7);
      complex11.multiply((-1));
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1637.927), (-1637.927));
      // Undeclared exception!
      complex1.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = new Complex(5.7527436249968E-290);
      Complex complex1 = Complex.INF;
      Complex complex2 = new Complex(5.2614409704305464E54);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.add(complex3);
      complex4.isInfinite();
      complex3.divide(complex0);
      Complex.valueOf(1688.03);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1966.9187834), (-962.347));
      complex0.pow((-1966.9187834));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = Complex.valueOf(768.3162);
      Complex complex1 = complex0.cosh();
      complex0.toString();
      complex1.getReal();
      complex1.abs();
      complex1.sqrt1z();
      Complex complex2 = complex0.createComplex((-550.0), Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.divide(768.3162);
      Complex complex5 = complex2.asin();
      complex5.multiply(complex3);
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = Complex.valueOf((-550.0), (-550.0));
      Complex complex8 = complex7.pow(complex4);
      Complex complex9 = Complex.NaN;
      complex9.cosh();
      Complex complex10 = complex0.sqrt1z();
      complex8.tanh();
      complex0.hashCode();
      complex6.isNaN();
      complex3.readResolve();
      complex10.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex(2273.0229865201823);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals("G;wj");
      Complex complex2 = Complex.valueOf(2273.0229865201823, 2.3400625068490396E-280);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf(2.3400625068490396E-280, 1.0);
      Complex complex6 = Complex.valueOf(2.3400625068490396E-280, 443.990014);
      complex6.readResolve();
      Complex complex7 = Complex.ONE;
      complex2.equals(complex7);
      complex4.divide(4686.409);
      Complex complex8 = complex1.subtract(Double.POSITIVE_INFINITY);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.multiply(complex4);
      complex2.acos();
      complex2.multiply(complex6);
      complex9.hashCode();
      complex5.reciprocal();
      Complex complex10 = Complex.ZERO;
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = Complex.valueOf((-481.547994705), (-2.5436254170647032E-67));
      Complex complex2 = Complex.valueOf(Double.NaN, 979.64586);
      complex2.readResolve();
      Complex complex3 = Complex.INF;
      complex3.subtract(Double.NaN);
      Complex.valueOf((-481.547994705));
      complex1.multiply(complex0);
      Complex complex4 = Complex.valueOf(5072.02583004);
      complex4.hashCode();
      Complex complex5 = Complex.ZERO;
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 2273.0229865201823;
      Complex complex0 = Complex.valueOf(2273.0229865201823, 2273.0229865201823);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.hashCode();
      Complex complex1 = complex0.add((-2285.774253));
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.negate();
      Object object0 = new Object();
      complex1.equals(complex0);
      complex3.divide(complex2);
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.valueOf((-2533.817151), (-2285.774253));
      Complex complex6 = new Complex((-2533.817151));
      complex5.equals(complex6);
      complex1.hashCode();
      Complex complex7 = new Complex((-1.0), 134981.75999999998);
      Complex complex8 = new Complex(134981.75999999998, (-2285.774253));
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-550.0), (-1637.927));
      Complex complex1 = complex0.divide(2453.142753244288);
      Complex complex2 = complex1.tan();
      complex1.cosh();
      Complex complex3 = Complex.ONE;
      complex3.ONE.divide((-794.1));
      complex2.hashCode();
      Complex complex4 = new Complex((-2533.817151), (-1425.34797073886));
      Complex complex5 = new Complex(2453.142753244288, 2453.142753244288);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.cosh();
      complex1.ZERO.toString();
      complex0.getReal();
      complex0.ZERO.abs();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.ZERO.createComplex(0.0, (-550.0));
      Complex complex4 = complex3.tan();
      complex4.NaN.multiply((-1986));
      complex1.I.divide(2.0);
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex4.tanh();
      Complex complex7 = Complex.valueOf(0.8680226583436221, 2.0);
      complex5.equals(complex6);
      complex7.hashCode();
      Complex complex8 = new Complex(1.887601210001E12, 4122.0);
      Complex complex9 = Complex.I;
      complex8.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(4332.2645227542325);
      Complex complex2 = (Complex)complex1.ONE.readResolve();
      complex1.asin();
      Complex complex3 = new Complex((-20.0));
      Complex complex4 = complex1.multiply(complex2);
      Complex complex5 = Complex.valueOf(4332.2645227542325, 348.22);
      complex5.sqrt1z();
      Complex complex6 = Complex.valueOf(4332.2645227542325, 1.0);
      complex3.pow(complex1);
      Complex complex7 = Complex.I;
      complex7.cosh();
      Complex complex8 = complex7.sqrt1z();
      complex3.tanh();
      Complex complex9 = Complex.ONE;
      complex5.hashCode();
      complex6.isNaN();
      Complex complex10 = Complex.INF;
      complex10.readResolve();
      complex8.hashCode();
      complex9.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2184600.0, 20.0);
      complex0.divide((-2533.817151));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.ONE;
      complex1.hashCode();
      complex3.I.tanh();
      Complex complex4 = new Complex((-481.547994705), 20.0);
      complex3.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.cosh();
      complex1.ZERO.toString();
      complex0.getReal();
      complex0.ZERO.abs();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.ZERO.createComplex(0.0, (-550.0));
      Complex complex4 = complex3.tan();
      complex4.NaN.multiply((-1986));
      Complex complex5 = complex1.I.divide(2.0);
      complex5.NaN.asin();
      Complex complex6 = complex1.INF.multiply(complex5);
      complex6.ZERO.sqrt1z();
      Complex.valueOf(0.0, 2.0);
      Complex complex7 = complex1.pow(complex0);
      complex7.ZERO.cosh();
      complex0.INF.sqrt1z();
      complex7.tanh();
      complex7.NaN.hashCode();
      complex2.reciprocal();
      Complex complex8 = Complex.valueOf((-2.8583500869462184E28));
      complex8.add(complex1);
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      complex1.INF.hashCode();
      complex2.ONE.abs();
      complex2.tan();
      Complex complex3 = complex0.pow((-73.992622328012));
      complex1.nthRoot(1);
      complex2.getField();
      Complex complex4 = Complex.valueOf((double) 1, (double) 1);
      Complex complex5 = complex4.I.multiply(1464);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = new Complex((-73.992622328012));
      Complex complex8 = Complex.INF;
      complex7.multiply(complex8);
      Complex complex9 = complex2.multiply(complex6);
      complex9.hashCode();
      complex3.reciprocal();
      complex9.exp();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex((-1860.0), (-1860.0));
      Complex complex1 = Complex.valueOf((-1860.0), 1.5683802588004895E-170);
      Complex complex2 = Complex.valueOf((-1860.0));
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.createComplex(1.5683802588004895E-170, (-557.0));
      Complex complex5 = complex1.tan();
      Complex complex6 = complex0.multiply((-1986));
      complex0.divide((-8197238.561252847));
      Complex complex7 = new Complex(2087.0, (-557.0));
      Complex complex8 = complex7.asin();
      complex2.multiply(complex8);
      Complex complex9 = Complex.I;
      complex3.sqrt1z();
      Complex.valueOf(2853.1604299, 2087.0);
      complex6.pow(complex3);
      Complex complex10 = complex3.cosh();
      complex6.sqrt1z();
      Complex complex11 = complex6.tanh();
      complex3.hashCode();
      complex5.isNaN();
      complex8.readResolve();
      complex4.hashCode();
      complex10.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = new Complex((-1.6436423669122624E8));
      Complex complex1 = complex0.asin();
      Complex.valueOf(6.519765758635405E-145);
      Complex complex2 = complex1.divide(complex0);
      complex0.reciprocal();
      complex2.tan();
      Complex complex3 = complex0.tan();
      complex0.add((-1.6436423669122624E8));
      complex3.isInfinite();
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ZERO;
      complex2.getReal();
      complex0.abs();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = complex0.createComplex(0.0, (-550.0));
      complex3.tan();
      Complex complex5 = complex0.multiply(409);
      complex5.readResolve();
      complex1.divide(0.0);
      complex1.asin();
      complex1.multiply(complex0);
      Complex complex6 = Complex.I;
      complex4.sqrt1z();
      Complex.valueOf((-25.901182465348047), (-1481.0441003204699));
      try { 
        complex4.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.I.cosh();
      complex0.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.valueOf(1.0);
      complex5.divide((-1474.9));
      Complex complex6 = complex0.asin();
      complex6.exp();
      complex2.multiply(complex4);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex7.sqrt1z();
      Complex complex9 = complex2.reciprocal();
      Complex complex10 = complex9.pow(complex4);
      complex9.cosh();
      complex5.getArgument();
      Complex complex11 = complex4.sqrt1z();
      complex11.tanh();
      complex10.hashCode();
      complex4.isNaN();
      Complex complex12 = Complex.valueOf(1.716073989868164);
      complex12.divide((-2.0258084311749475E155));
      complex8.readResolve();
      complex11.hashCode();
      Complex complex13 = Complex.INF;
      complex13.subtract(complex2);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1860.0), (-1860.0));
      Complex complex1 = Complex.valueOf((-1860.0), 1.5683802588004895E-170);
      Complex.valueOf((-1860.0));
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.INF.createComplex(1.5683802588004895E-170, 1435.0516904075);
      complex2.ONE.getField();
      complex0.subtract(complex2);
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex1.subtract(complex4);
      Complex.valueOf((-5.099183273176545E-248), (-1.0));
      complex1.asin();
      Complex complex6 = complex5.tan();
      Complex complex7 = Complex.valueOf(1435.0516904075, 1435.0516904075);
      complex7.NaN.acos();
      complex5.abs();
      complex4.equals("N9`l(");
      complex6.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      complex1.INF.hashCode();
      complex2.ONE.abs();
      complex0.getField();
      Complex complex3 = complex1.subtract(1.0);
      complex1.hashCode();
      complex2.getArgument();
      complex0.isInfinite();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.cos();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.reciprocal();
      complex4.abs();
      Complex complex8 = Complex.valueOf((-4339.929), (-4339.929));
      complex8.pow((-1.0));
      complex6.reciprocal();
      complex5.divide(complex1);
      Complex complex9 = complex7.reciprocal();
      complex9.tan();
      complex0.tan();
      Complex complex10 = new Complex(15.5030402, Double.NaN);
      complex10.conjugate();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.cosh();
      complex1.ZERO.toString();
      complex0.getReal();
      complex0.ZERO.abs();
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.ZERO.createComplex(0.0, (-550.0));
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.NaN.multiply((-1986));
      Complex complex6 = complex1.I.divide(2.0);
      complex6.NaN.asin();
      complex5.multiply(complex3);
      Complex complex7 = Complex.I;
      complex7.sqrt1z();
      Complex complex8 = Complex.valueOf((-25.901182465348047), (-25.901182465348047));
      complex8.pow(complex3);
      complex4.cosh();
      complex7.sqrt1z();
      complex8.tanh();
      complex2.hashCode();
      complex4.isNaN();
      complex3.readResolve();
      complex8.hashCode();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ONE.asin();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.divide(complex0);
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.I.tan();
      Complex complex4 = complex1.INF.tan();
      Complex complex5 = complex4.ZERO.subtract(complex3);
      Complex complex6 = complex0.divide(0.0);
      complex5.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(4332.2645227542325);
      complex0.I.getField();
      complex1.equals(complex0);
      complex0.INF.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.createComplex(4332.2645227542325, 0.0);
      complex0.abs();
      Complex complex4 = complex3.ZERO.multiply(4332.2645227542325);
      complex4.divide(0.0);
      Complex complex5 = Complex.NaN;
      complex5.reciprocal();
      Complex complex6 = complex5.tan();
      complex6.cosh();
      complex0.hashCode();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, 2.0);
      complex7.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      complex1.INF.hashCode();
      complex2.ONE.abs();
      Complex complex3 = complex2.tan();
      complex0.pow((-73.992622328012));
      complex1.nthRoot(1);
      complex2.getField();
      Complex.valueOf((double) 1, (double) 1);
      Complex complex4 = complex0.multiply((double) 1);
      Complex complex5 = complex4.divide((double) 1);
      Complex complex6 = complex5.sin();
      complex3.hashCode();
      complex6.tanh();
      Complex.valueOf(0.9996749341391205, (double) 1);
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.sinh();
      Complex complex10 = Complex.valueOf(0.0, 1.0);
      complex4.nthRoot(585);
      complex9.getArgument();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex12 = complex11.multiply(complex10);
      complex10.isNaN();
      complex7.readResolve();
      complex12.getImaginary();
      complex11.getArgument();
      Complex.valueOf((-925.0870962885949));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-0.2308242881082309), (-0.2308242881082309));
      Complex complex1 = complex0.divide(4332.2645227542325);
      complex0.I.getField();
      complex1.equals(complex0);
      complex0.INF.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.createComplex(4332.2645227542325, (-0.2308242881082309));
      complex0.abs();
      Complex complex4 = complex3.ZERO.multiply(4332.2645227542325);
      complex4.divide(0.0);
      complex2.sin();
      complex0.NaN.hashCode();
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = Complex.valueOf(0.0, 1870.95841976584);
      complex3.exp();
      complex1.sinh();
      Complex complex7 = Complex.valueOf(0.3264348387677749);
      complex7.nthRoot(585);
      complex3.getArgument();
      complex3.multiply(complex2);
      complex6.isNaN();
      complex2.readResolve();
      complex5.getImaginary();
      complex4.getArgument();
      Complex complex8 = new Complex(4332.2645227542325);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(4332.2645227542325);
      complex0.I.getField();
      complex0.equals("");
      complex0.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.createComplex(0.33333333333333337, 0.0);
      complex1.abs();
      complex0.multiply(4332.2645227542325);
      Complex complex4 = complex3.divide(0.0);
      Complex complex5 = complex3.sin();
      complex3.hashCode();
      Complex complex6 = Complex.valueOf((-955.06));
      Complex complex7 = complex6.tanh();
      Complex complex8 = Complex.valueOf(0.0, (-955.06));
      Complex complex9 = complex4.exp();
      complex7.sinh();
      Complex.valueOf(4332.2645227542325, 1.557407724654902);
      Complex complex10 = Complex.INF;
      complex10.nthRoot(17);
      complex8.getArgument();
      complex0.multiply(complex7);
      complex5.isNaN();
      complex9.readResolve();
      complex9.getImaginary();
      complex2.getArgument();
      Complex.valueOf((-1514.60923));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.conjugate();
      complex2.INF.sqrt1z();
      Complex complex3 = complex0.ZERO.log();
      complex0.isInfinite();
      Complex complex4 = complex0.multiply((-5.525009099476396E155));
      complex4.tanh();
      Complex complex5 = complex0.sqrt1z();
      complex5.atan();
      complex4.add(1581.0489091);
      Complex complex6 = complex1.multiply(2191.078);
      Complex.valueOf(2191.078, 6.283185307179586);
      complex3.pow(complex6);
      complex3.multiply((-5.525009099476396E155));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.INF.hashCode();
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = complex0.pow(complex1);
      complex2.hashCode();
      complex0.atan();
      complex2.divide(1.0000000000000002);
      complex0.log();
      Complex complex3 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex3.createComplex(1.6390891075134277, 1.3280021798948244E-8);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.INF.sqrt1z();
      Complex complex4 = complex0.ZERO.log();
      complex3.exp();
      Complex complex5 = complex4.cos();
      complex2.reciprocal();
      complex5.abs();
      Complex complex6 = complex5.pow(Double.NaN);
      complex6.reciprocal();
      complex1.acos();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.tan();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex9.acos();
      Complex complex11 = complex8.sqrt1z();
      complex0.atan();
      complex10.divide(Double.NaN);
      int int0 = (-3861);
      try { 
        complex11.nthRoot((-3861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,861
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.cosh();
      complex1.ZERO.toString();
      complex0.getReal();
      Complex complex2 = complex1.reciprocal();
      complex2.ZERO.abs();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.createComplex(0.0, (-550.0));
      complex4.tan();
      Complex complex5 = complex2.I.divide(2.0);
      Complex complex6 = complex5.NaN.asin();
      Complex complex7 = complex1.INF.multiply(complex5);
      complex7.ZERO.sqrt1z();
      Complex complex8 = complex5.INF.reciprocal();
      complex1.createComplex((-2533.817151), 597.108);
      Complex complex9 = complex2.exp();
      complex6.hashCode();
      Complex complex10 = complex9.atan();
      Complex complex11 = Complex.valueOf((-118.489463429), 597.108);
      Complex complex12 = Complex.ZERO;
      complex12.getReal();
      complex8.atan();
      Complex complex13 = complex10.sqrt();
      complex7.log();
      complex7.negate();
      complex11.tan();
      Complex complex14 = Complex.NaN;
      complex5.subtract(complex14);
      complex13.readResolve();
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      complex1.INF.hashCode();
      complex2.ONE.abs();
      complex0.getField();
      Complex complex3 = complex1.subtract(1.0);
      complex1.hashCode();
      complex2.getArgument();
      complex0.isInfinite();
      Complex complex4 = complex3.exp();
      complex3.cos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.reciprocal();
      complex4.abs();
      double double0 = (-4339.929);
      Complex complex7 = Complex.valueOf((-4339.929), (-4339.929));
      Complex complex8 = complex7.pow((-1.0));
      complex5.reciprocal();
      complex4.acos();
      complex4.tan();
      Complex complex9 = complex6.acos();
      complex9.sqrt1z();
      complex6.atan();
      Complex complex10 = complex8.divide((-4339.929));
      try { 
        complex10.nthRoot((-3861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,861
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.tan();
      Complex complex1 = complex0.conjugate();
      complex1.INF.sqrt1z();
      Complex complex2 = complex0.ZERO.log();
      Complex complex3 = complex0.multiply((-5.525009099476396E155));
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex0.sqrt1z();
      complex5.getImaginary();
      Complex complex6 = complex4.acos();
      complex2.reciprocal();
      complex6.exp();
      complex6.readResolve();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      complex1.INF.hashCode();
      complex2.ONE.abs();
      complex2.tan();
      Complex complex3 = complex0.pow((-73.992622328012));
      List<Complex> list0 = complex1.nthRoot(1);
      complex2.getField();
      Complex complex4 = Complex.valueOf((double) 1, (double) 1);
      Complex complex5 = complex4.I.multiply(1464);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex6.I.divide(complex2);
      Complex complex8 = complex7.multiply((double) 1);
      complex4.ONE.divide(1.0);
      Complex complex9 = complex0.divide(complex1);
      complex4.readResolve();
      Complex complex10 = complex2.cos();
      complex3.conjugate();
      Complex complex11 = complex9.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex6.exp();
      complex9.hashCode();
      complex10.atan();
      Complex.valueOf(0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      complex6.getReal();
      complex9.atan();
      complex8.sqrt();
      Complex complex12 = complex11.log();
      complex7.negate();
      complex12.equals(list0);
      complex11.asin();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.I.cosh();
      complex0.tan();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.ZERO.divide(complex0);
      Complex complex3 = complex1.tan();
      Complex complex4 = Complex.valueOf(1.0);
      complex4.divide((-1474.9));
      complex0.asin();
      complex2.multiply(complex3);
      Complex complex5 = Complex.INF;
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex2.reciprocal();
      Complex complex8 = complex7.pow(complex3);
      complex7.cosh();
      complex4.getArgument();
      Complex complex9 = complex3.sqrt1z();
      complex9.tanh();
      complex8.hashCode();
      complex3.isNaN();
      Complex complex10 = Complex.valueOf(1.716073989868164);
      complex10.divide((-2.0258084311749475E155));
      complex6.readResolve();
      complex9.hashCode();
      Complex complex11 = Complex.INF;
      complex11.subtract(complex2);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.ZERO.createComplex(902.6399031849, 0.0);
      Complex complex2 = complex0.cos();
      complex0.toString();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(4192.306774);
      Complex complex5 = complex4.INF.asin();
      complex5.I.abs();
      complex5.ONE.acos();
      Complex complex6 = Complex.NaN;
      complex6.INF.getField();
      complex5.multiply(complex6);
      Complex complex7 = complex2.sqrt1z();
      complex7.I.toString();
      Complex complex8 = complex7.I.exp();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex7.NaN.sinh();
      complex1.equals((Object) null);
      Complex.valueOf(817.14389404102, 817.14389404102);
      complex7.conjugate();
      complex8.conjugate();
      complex9.hashCode();
      complex1.hashCode();
      complex3.sqrt();
      Complex complex11 = Complex.valueOf(817.14389404102, 1.0);
      complex9.subtract(complex11);
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = new Complex(623.9486305, 1233.569191);
      complex0.I.getField();
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex1.ONE.subtract((-451.49388));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.acos();
      Complex complex5 = complex3.NaN.subtract(complex2);
      Complex complex6 = Complex.valueOf(623.9486305);
      complex3.getField();
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.divide(complex1);
      complex0.I.toString();
      Complex complex9 = complex8.ONE.pow(1377.32830077);
      Complex complex10 = complex8.acos();
      Complex complex11 = complex10.INF.atan();
      complex9.ZERO.readResolve();
      complex4.sqrt1z();
      complex1.INF.tan();
      Complex complex12 = complex0.subtract(1377.32830077);
      complex5.getImaginary();
      complex12.NaN.add(complex6);
      complex8.ONE.createComplex(1233.569191, 0.0);
      complex0.INF.tan();
      complex9.getImaginary();
      complex12.isInfinite();
      complex12.subtract(0.0);
      complex2.isNaN();
      complex11.subtract(4.0772734783595525E230);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.INF.hashCode();
      Complex complex1 = new Complex((-1.0), (-1.0));
      Complex complex2 = complex0.pow(complex1);
      complex2.hashCode();
      Complex complex3 = complex0.ONE.divide(complex2);
      Complex complex4 = Complex.ONE;
      complex2.negate();
      complex1.I.add(complex4);
      complex2.I.conjugate();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = new Complex(0.0);
      complex7.NaN.multiply(complex3);
      complex6.I.add(complex7);
      complex2.I.exp();
      complex2.multiply((-4832));
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = (-4489.77474763855);
      Complex complex0 = Complex.valueOf((-4489.77474763855));
      Complex complex1 = complex0.sqrt1z();
      double double1 = (-2152.36473940868);
      Complex.valueOf((-4489.77474763855), (-2152.36473940868));
      Complex complex2 = complex1.asin();
      Complex complex3 = null;
      try { 
        complex2.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.tan();
      Complex complex2 = complex0.conjugate();
      complex2.INF.sqrt1z();
      Complex complex3 = complex0.ZERO.log();
      complex0.isInfinite();
      Complex complex4 = complex0.multiply((-5.525009099476396E155));
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex0.sqrt1z();
      complex6.getImaginary();
      complex5.acos();
      complex3.reciprocal();
      try { 
        complex1.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.sqrt();
      Complex complex1 = Complex.ONE;
      complex0.abs();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.ONE.multiply(complex0);
      complex0.equals("`juORdAc");
      complex0.cosh();
      Complex.valueOf(0.0, 20.0);
      Complex complex4 = complex0.asin();
      complex3.ZERO.add(Double.NaN);
      Complex complex5 = complex0.ZERO.createComplex(Double.NaN, 354.795);
      complex5.NaN.sin();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      complex6.ZERO.sqrt();
      Complex complex7 = Complex.valueOf((-3611.8209509));
      Complex complex8 = complex2.exp();
      Complex complex9 = complex0.multiply(complex3);
      complex9.add(complex7);
      Complex.valueOf(Double.NaN);
      Complex.valueOf(Double.NaN, 0.0);
      complex8.getArgument();
      Complex complex10 = Complex.NaN;
      complex4.equals(complex10);
      complex3.createComplex(Double.NaN, Double.NaN);
      complex4.sinh();
      complex7.multiply(0);
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.subtract(complex0);
      complex1.INF.hashCode();
      complex2.ONE.abs();
      complex2.tan();
      Complex complex3 = complex0.pow((-73.992622328012));
      complex1.nthRoot(1);
      complex2.getField();
      Complex complex4 = Complex.valueOf((double) 1, (double) 1);
      Complex complex5 = complex4.I.multiply(1464);
      Complex complex6 = complex5.ONE.cos();
      Complex complex7 = complex6.I.divide(complex2);
      Complex complex8 = complex7.multiply((double) 1);
      complex4.ONE.divide(1.0);
      Complex complex9 = complex0.divide(complex1);
      complex4.readResolve();
      Complex complex10 = complex2.cos();
      complex3.conjugate();
      Complex complex11 = complex9.createComplex(0.0, Double.POSITIVE_INFINITY);
      complex6.exp();
      complex9.hashCode();
      complex10.atan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.0);
      complex6.getReal();
      complex9.atan();
      complex8.sqrt();
      complex11.log();
      Complex complex12 = complex7.negate();
      Complex complex13 = complex11.tan();
      complex13.INF.subtract(complex12);
      complex2.readResolve();
      complex7.conjugate();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = Complex.valueOf(929.478957);
      complex1.ONE.getArgument();
      complex1.ZERO.toString();
      Complex complex3 = complex0.ZERO.negate();
      complex3.ONE.multiply(complex2);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.sinh();
      Complex complex6 = complex5.NaN.atan();
      complex6.I.getField();
      complex0.getArgument();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex7.I.add(complex1);
      complex8.ONE.sin();
      Complex complex9 = complex7.asin();
      Complex complex10 = Complex.valueOf((-20.0), (-2.356194490192345));
      Complex complex11 = complex9.acos();
      Complex complex12 = complex4.cosh();
      complex7.NaN.getField();
      Complex complex13 = Complex.valueOf((-20.0));
      complex11.INF.multiply(0.0);
      complex10.abs();
      complex5.divide(complex10);
      complex9.multiply(929.478957);
      complex12.getField();
      complex11.divide(929.478957);
      Complex.valueOf((-2450.36767778551), (-2450.36767778551));
      complex11.tanh();
      complex12.multiply(complex10);
      complex10.subtract((-2.356194490192345));
      complex13.subtract(1115.47031941);
      complex7.getReal();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.divide(4332.2645227542325);
      complex0.I.getField();
      complex1.equals(complex0);
      complex0.INF.abs();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.INF.createComplex(4332.2645227542325, 0.0);
      complex0.abs();
      Complex complex4 = complex3.ZERO.multiply(4332.2645227542325);
      complex4.divide(0.0);
      complex2.sin();
      complex0.NaN.hashCode();
      Complex complex5 = complex3.I.tanh();
      Complex complex6 = Complex.valueOf(0.0, 1870.95841976584);
      complex3.exp();
      complex1.sinh();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex7.nthRoot(585);
      complex3.getArgument();
      complex3.multiply(complex2);
      complex6.isNaN();
      complex2.readResolve();
      complex5.getImaginary();
      complex4.getArgument();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.cosh();
      complex1.ZERO.toString();
      complex0.getReal();
      Complex complex2 = complex1.reciprocal();
      complex2.ZERO.abs();
      Complex complex3 = complex0.ZERO.sqrt1z();
      Complex complex4 = complex3.ZERO.createComplex(0.0, (-550.0));
      complex4.tan();
      Complex complex5 = complex2.I.divide(2.0);
      complex5.NaN.asin();
      Complex complex6 = complex1.INF.multiply(complex5);
      complex6.ZERO.sqrt1z();
      Complex complex7 = complex5.INF.reciprocal();
      Complex complex8 = complex1.pow(complex0);
      complex8.ZERO.cosh();
      complex6.I.getArgument();
      Complex complex9 = complex0.INF.sqrt1z();
      Complex complex10 = complex8.tanh();
      complex8.NaN.hashCode();
      complex6.isNaN();
      Complex complex11 = complex10.divide(0.0);
      complex7.readResolve();
      complex8.hashCode();
      complex9.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.6436423669122624E8), 6.519765758635405E-145);
      Complex complex1 = Complex.valueOf(6.519765758635405E-145, (-1.6436423669122624E8));
      Complex complex2 = complex0.multiply(6.519765758635405E-145);
      Complex complex3 = complex2.multiply(complex0);
      complex3.I.subtract(373.7308830188638);
      Complex complex4 = complex0.multiply(complex3);
      complex4.multiply(complex3);
      complex1.hashCode();
      complex1.getImaginary();
      complex3.conjugate();
      complex1.pow(853.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.asin();
      complex1.NaN.hashCode();
      Complex complex3 = complex1.INF.add((-1153.668226021));
      complex3.multiply((-1153.668226021));
      Complex complex4 = complex0.cosh();
      Object object0 = complex4.readResolve();
      complex4.equals(object0);
      Complex complex5 = complex4.conjugate();
      complex5.negate();
      complex2.ZERO.hashCode();
      Complex complex6 = complex2.atan();
      complex1.add(214.04);
      complex6.multiply(2.1076716069929933E-95);
      Complex complex7 = Complex.valueOf((-1855.93182396), 214.04);
      complex7.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.add((-481.547994705));
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = complex2.NaN.negate();
      Object object0 = complex1.readResolve();
      complex3.equals(object0);
      complex0.I.divide(complex2);
      Complex complex4 = complex2.INF.tanh();
      Complex complex5 = Complex.valueOf((-481.547994705), (-481.547994705));
      complex0.equals(complex2);
      complex1.ZERO.divide((-481.547994705));
      Complex complex6 = complex4.multiply((-3044));
      Complex complex7 = complex5.cos();
      complex7.isInfinite();
      complex4.getField();
      complex4.I.asin();
      Complex complex8 = complex6.createComplex((-3044), 1.1612776191572459E-7);
      complex8.INF.nthRoot(440);
      complex3.isNaN();
      Complex.valueOf(3656.4887861, 3656.4887861);
      Complex complex9 = complex1.cosh();
      complex9.cosh();
      Complex.valueOf((-481.547994705), (-481.547994705));
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.sqrt();
      complex0.getArgument();
      Complex complex2 = complex1.ZERO.divide(0.0);
      Complex complex3 = complex0.pow(0.0);
      complex0.NaN.multiply(0.0);
      complex3.ZERO.subtract((-706.07));
      Complex complex4 = complex0.log();
      complex4.I.exp();
      Complex complex5 = complex2.createComplex((-706.07), (-706.07));
      Complex complex6 = complex0.multiply(complex1);
      complex6.ZERO.multiply(0.0);
      Complex complex7 = complex0.divide(complex2);
      complex7.divide(0.0);
      complex7.tanh();
      complex2.multiply((-706.07));
      complex1.negate();
      Complex complex8 = complex5.asin();
      complex8.I.multiply((-545.791224915));
      complex8.cos();
      Complex.valueOf(0.0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = new Complex(Double.NaN, (-20.0));
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.NaN.divide(complex1);
      Complex complex4 = complex2.ZERO.add(complex0);
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex1.subtract(complex0);
      complex1.createComplex(0.0, 0.0);
      Complex complex7 = complex6.divide(Double.NaN);
      complex7.tanh();
      Complex complex8 = complex7.pow(0.0);
      complex5.cos();
      complex2.equals(complex3);
      Complex complex9 = complex8.divide(complex0);
      complex9.ONE.toString();
      Complex complex10 = complex3.divide(0.0);
      complex10.sqrt();
      complex10.tanh();
      complex1.log();
      complex3.readResolve();
      complex3.subtract(2045.726342);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.ZERO.divide(complex0);
      complex3.ONE.reciprocal();
      complex4.toString();
      Complex complex5 = complex2.multiply(complex0);
      complex3.ONE.divide(complex0);
      complex3.I.exp();
      Complex complex6 = complex0.INF.multiply(782);
      complex6.ZERO.subtract(0.0);
      complex3.conjugate();
      complex2.getField();
      complex5.subtract(complex3);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      double double0 = 979.6693991706837;
      Complex complex0 = new Complex(979.6693991706837, 979.6693991706837);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.ZERO.multiply(979.6693991706837);
      complex4.INF.nthRoot(1);
      double double1 = (-5.206910481915062E99);
      Complex complex5 = Complex.valueOf((-5.206910481915062E99));
      Complex complex6 = complex5.ZERO.add(0.0);
      complex6.hashCode();
      Complex complex7 = Complex.valueOf(979.6693991706837, (-5147.594244979));
      complex7.INF.reciprocal();
      Complex complex8 = complex2.INF.acos();
      complex8.divide(complex7);
      complex7.INF.tanh();
      complex8.ONE.asin();
      complex1.NaN.readResolve();
      complex2.NaN.nthRoot(1);
      Complex complex9 = complex0.pow(complex1);
      complex9.ONE.readResolve();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex.valueOf((-498.10997));
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex1.ONE.multiply(0.0);
      Complex complex3 = complex2.NaN.asin();
      complex3.ONE.sinh();
      complex3.ONE.pow(20.0);
      Complex complex4 = complex0.negate();
      Complex complex5 = complex0.INF.tan();
      Complex complex6 = complex5.NaN.sinh();
      complex4.ONE.getArgument();
      Complex complex7 = complex0.pow(complex1);
      complex7.I.atan();
      complex1.pow(complex2);
      complex1.cos();
      Complex complex8 = complex2.ZERO.pow(20.0);
      complex8.ZERO.createComplex(20.0, 20.0);
      Complex complex9 = complex6.sinh();
      complex9.INF.subtract(1995.257383018316);
      int int0 = 0;
      try { 
        complex9.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.isInfinite();
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = complex0.sqrt1z();
      complex0.I.readResolve();
      Complex.valueOf(5.471416081500162E-8);
      complex2.ZERO.toString();
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex2.I.tan();
      complex5.NaN.sin();
      complex4.ONE.multiply(1);
      complex5.I.cos();
      Complex complex6 = complex4.NaN.subtract((-1.0));
      Complex complex7 = complex6.ONE.sin();
      complex7.NaN.multiply(1);
      Complex.valueOf(5.471416081500162E-8, 0.0);
      Complex complex8 = complex2.conjugate();
      complex8.pow(complex3);
      complex8.toString();
      complex0.getField();
      complex6.readResolve();
      complex6.toString();
      complex1.isInfinite();
      complex0.toString();
      complex1.exp();
      complex5.add(1760.2362270000494);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586, 6.283185307179586);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.ZERO.sinh();
      complex0.getField();
      Complex complex3 = complex2.createComplex(1.841078519821167, (-2318.380824400217));
      Complex complex4 = complex1.ONE.conjugate();
      Complex complex5 = complex2.multiply(1.841078519821167);
      complex5.ZERO.pow(Double.POSITIVE_INFINITY);
      complex3.divide(complex2);
      Complex complex6 = complex0.multiply((-1.0));
      complex6.sin();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = new Complex((-2014.1110988665), 1.3726137091534984E303);
      Complex complex1 = complex0.INF.cos();
      complex1.NaN.divide(3341.4397603358);
      complex0.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.NaN.multiply(1.3726137091534984E303);
      complex0.ZERO.tanh();
      Complex.valueOf(668.1414171728426, 3341.4397603358);
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.subtract((-2014.1110988665));
      Complex complex7 = complex6.sqrt1z();
      complex7.I.sqrt();
      Complex complex8 = complex0.tan();
      Complex complex9 = Complex.valueOf(2.0, (-2014.1110988665));
      complex9.I.cos();
      Complex complex10 = complex5.ONE.cos();
      complex10.INF.hashCode();
      complex9.nthRoot(1044);
      complex4.getArgument();
      complex0.NaN.hashCode();
      complex8.pow(complex9);
      complex4.I.toString();
      complex6.nthRoot(1044);
      complex4.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Complex complex0 = new Complex((-2853.1604299), (-4042.0));
      Complex complex1 = complex0.NaN.subtract((-2853.1604299));
      complex0.hashCode();
      Complex complex2 = complex0.ONE.tan();
      Complex complex3 = complex0.NaN.multiply(complex2);
      complex3.I.createComplex((-4042.0), (-2853.1604299));
      complex2.INF.readResolve();
      Complex complex4 = complex2.ONE.tan();
      complex4.ONE.conjugate();
      complex1.ONE.getField();
      Complex complex5 = complex0.multiply(1671);
      complex1.ONE.log();
      Complex complex6 = complex1.subtract((double) 1671);
      complex6.NaN.sqrt1z();
      complex5.negate();
      complex2.nthRoot(1671);
      complex0.nthRoot(1671);
      complex0.conjugate();
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      complex1.reciprocal();
      complex1.INF.tan();
      complex0.createComplex((-6116.3802230106), 1.1892591576149107E49);
      complex1.negate();
      complex0.INF.conjugate();
      Complex complex2 = complex0.asin();
      complex1.pow(complex2);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex0.subtract(complex1);
      complex0.INF.toString();
      complex2.I.negate();
      Complex complex4 = complex3.I.reciprocal();
      complex0.getReal();
      complex2.negate();
      complex1.getImaginary();
      complex4.sqrt();
      Complex complex5 = complex0.sqrt1z();
      double double0 = 1166.010343196912;
      Complex complex6 = Complex.valueOf(0.0, 1166.010343196912);
      complex6.ZERO.readResolve();
      complex6.ONE.reciprocal();
      complex6.add(Double.NaN);
      complex3.ONE.getArgument();
      int int0 = (-1);
      try { 
        complex5.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      complex1.ONE.abs();
      Complex complex2 = complex1.INF.multiply(complex0);
      Complex complex3 = Complex.INF;
      complex3.ZERO.pow(complex2);
      complex0.NaN.add(complex3);
      Complex complex4 = complex0.asin();
      complex4.I.tan();
      Complex complex5 = complex0.cos();
      complex5.ONE.readResolve();
      Complex complex6 = complex0.cosh();
      complex6.getImaginary();
      Complex.valueOf(1.0);
      Complex.valueOf(0.0);
      complex6.I.tan();
      Complex.valueOf(0.0);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tanh();
      Complex complex2 = Complex.valueOf(598.1, 1604.085107);
      complex2.NaN.toString();
      Complex complex3 = complex0.ZERO.multiply(complex2);
      Complex complex4 = complex3.subtract((-20.0));
      complex4.I.negate();
      complex1.ZERO.reciprocal();
      complex1.ZERO.log();
      complex3.INF.getArgument();
      Complex complex5 = complex0.sqrt();
      Complex.valueOf(598.1, (-2684.6864941437));
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.I.subtract(complex1);
      complex7.cosh();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex2.log();
      Complex complex11 = complex0.subtract(1604.085107);
      Complex complex12 = complex11.INF.multiply(1);
      complex12.ONE.divide((-3566.7714868526264));
      Complex complex13 = complex8.atan();
      complex2.divide(complex9);
      complex0.I.subtract(complex10);
      complex11.readResolve();
      complex8.tan();
      complex8.getField();
      complex13.isInfinite();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.divide(1487.3906494094704);
      complex0.getField();
      Complex complex2 = complex1.subtract((-2982.3174));
      complex1.ZERO.hashCode();
      complex0.ZERO.getArgument();
      complex0.isInfinite();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex0.reciprocal();
      complex2.abs();
      complex5.NaN.pow(1487.3906494094704);
      Complex complex6 = complex5.INF.reciprocal();
      complex6.ZERO.acos();
      complex1.tan();
      Complex complex7 = complex4.acos();
      complex0.sqrt1z();
      complex7.atan();
      complex1.ONE.divide(1487.3906494094704);
      try { 
        complex2.nthRoot((-3861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,861
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex(6143.07149580881);
      complex0.ZERO.add(Double.NaN);
      Complex complex1 = new Complex(266.263758171562);
      Complex complex2 = complex0.subtract(complex1);
      complex2.INF.conjugate();
      complex2.getArgument();
      complex0.sinh();
      complex1.equals("");
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      double double0 = 7.054443447243064E-8;
      Complex complex0 = new Complex(7.054443447243064E-8);
      Complex complex1 = complex0.NaN.subtract(7.054443447243064E-8);
      complex1.INF.atan();
      Complex complex2 = complex0.INF.conjugate();
      try { 
        complex2.nthRoot((-1971));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,971
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = new Complex(3414.150801252406, 2.2038806519542315E-267);
      Complex complex1 = complex0.multiply(0);
      Complex complex2 = complex1.ZERO.add(2.2038806519542315E-267);
      Complex complex3 = complex2.INF.cosh();
      Complex complex4 = complex1.divide((-400.76223659964));
      Complex complex5 = complex4.ZERO.asin();
      complex3.divide((double) 0);
      Complex complex6 = complex3.negate();
      Complex complex7 = complex2.I.pow((-3377.5572257972));
      complex3.isNaN();
      Complex complex8 = complex5.createComplex(6.283185307179586, 5.077824728028163E-274);
      complex6.add(complex8);
      Complex complex9 = complex0.createComplex((-3377.5572257972), (-599.1586268857));
      Complex.valueOf((-3377.5572257972), (-1559.7580668));
      complex7.isNaN();
      Complex complex10 = Complex.valueOf(440.30062958, 3770.170237583254);
      complex10.sqrt1z();
      Complex complex11 = complex9.sqrt();
      complex2.add(complex11);
      complex4.multiply((-785));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = new Complex((-1102.3141), (-2807.10906));
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = complex1.I.pow(complex0);
      complex0.createComplex(0.0, 0.0);
      complex2.ONE.createComplex((-2807.10906), 1121.3219);
      Complex complex3 = complex0.ZERO.divide(complex1);
      Complex complex4 = complex3.NaN.tanh();
      complex4.INF.reciprocal();
      complex2.ONE.cos();
      Complex complex5 = complex1.I.multiply(670);
      Complex complex6 = complex1.ZERO.createComplex((-2807.10906), (-216.642));
      Complex complex7 = complex0.reciprocal();
      complex7.I.createComplex(648.208553806, (-2807.10906));
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex1.add((-2405.638084));
      complex9.ONE.readResolve();
      Complex complex10 = complex6.ONE.add(complex2);
      complex8.add(complex5);
      complex6.sqrt1z();
      complex2.exp();
      complex5.isInfinite();
      complex10.multiply(2294.0);
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(1.0, 1553.869836853966);
      complex0.divide(complex1);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.add(complex0);
      complex2.getReal();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.sqrt1z();
      Complex complex6 = complex2.ZERO.sqrt1z();
      complex6.ONE.subtract(0.0);
      Complex complex7 = complex0.negate();
      Complex complex8 = complex7.INF.conjugate();
      Complex complex9 = complex0.conjugate();
      complex3.ONE.nthRoot(810);
      Complex complex10 = complex5.divide(0.0);
      complex1.hashCode();
      Complex complex11 = complex3.multiply(0.0);
      complex11.atan();
      Complex complex12 = Complex.ONE;
      complex10.ZERO.getArgument();
      complex2.equals(complex12);
      complex3.subtract(complex10);
      complex8.INF.cos();
      complex12.getImaginary();
      complex8.acos();
      Complex complex13 = complex6.cosh();
      complex13.multiply(0.0);
      complex9.add(complex6);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.hashCode();
      Complex complex1 = complex0.NaN.cos();
      complex1.toString();
      complex1.I.asin();
      Complex complex2 = complex0.multiply(1241.0);
      complex2.sinh();
      complex2.sinh();
      Complex complex3 = Complex.valueOf(1241.0, 1857.5);
      complex3.NaN.multiply(1241.0);
      complex2.isInfinite();
      Complex.valueOf((-1946.5167148), 1857.5);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = Complex.I;
      Complex complex4 = complex2.NaN.pow(complex3);
      complex4.ONE.subtract((-971.300119926));
      complex4.NaN.sinh();
      complex2.NaN.negate();
      complex4.getArgument();
      complex0.I.getArgument();
      Complex complex5 = complex0.tan();
      complex2.ZERO.tan();
      Complex complex6 = complex5.ZERO.divide(1.5707963267948966);
      complex6.I.subtract(6.283185307179586);
      Complex complex7 = complex0.divide(complex5);
      Complex complex8 = complex2.divide(complex0);
      Complex.valueOf(1.5707963267948966, 1235.361);
      Complex complex9 = complex0.tanh();
      Complex complex10 = Complex.valueOf(6.283185307179586, (-1564.810325772));
      Complex complex11 = complex9.ONE.conjugate();
      complex11.toString();
      Complex complex12 = complex2.pow(1.5707963267948966);
      complex0.isInfinite();
      complex9.hashCode();
      complex7.isNaN();
      complex11.createComplex(6.283185307179586, 0.0);
      complex2.conjugate();
      complex3.getImaginary();
      Complex complex13 = complex12.cos();
      complex8.getField();
      complex13.isNaN();
      complex13.cos();
      complex13.add(complex10);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(0.0, 0.0);
      Complex complex2 = complex0.divide(complex1);
      complex2.NaN.toString();
      complex0.reciprocal();
      Complex complex3 = Complex.valueOf(1541.6007262707437);
      complex0.tanh();
      complex2.ZERO.nthRoot(1);
      complex3.multiply(complex1);
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.I.atan();
      complex5.INF.readResolve();
      complex0.tanh();
      complex2.getArgument();
      Complex complex6 = complex4.negate();
      complex6.ZERO.readResolve();
      complex2.conjugate();
      complex2.tan();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.INF.divide(complex1);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.NaN.negate();
      complex5.ZERO.pow((-1.0));
      complex4.NaN.conjugate();
      Complex complex6 = complex4.I.divide(complex3);
      complex0.ZERO.readResolve();
      complex3.I.add((-499.00860286991));
      complex2.equals("'(j[$?");
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex7.log();
      complex8.INF.multiply(0.35471993684768677);
      complex0.NaN.getArgument();
      complex6.getField();
      Complex complex9 = complex2.pow(complex3);
      complex9.NaN.tanh();
      Complex complex10 = complex9.multiply((-3261));
      Complex complex11 = complex0.ONE.multiply((-1.0));
      complex4.multiply(complex6);
      complex3.negate();
      complex10.multiply(445);
      complex8.getImaginary();
      try { 
        complex11.nthRoot((-2685));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,685
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
