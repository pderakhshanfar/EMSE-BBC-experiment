/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 17:04:09 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(3789.7626, 5.855267177907345E90);
      Complex complex2 = complex0.multiply(complex1);
      complex2.NaN.getArgument();
      Complex complex3 = complex2.asin();
      complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-321.05115315295876), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(0.9640275800758169);
      Complex complex2 = Complex.I;
      complex2.sqrt1z();
      Complex complex3 = new Complex(0.031, 0.031);
      complex1.multiply(1);
      complex0.toString();
      Complex.valueOf((double) 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(0.058823529411764705, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.divide(complex3);
      complex3.hashCode();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.pow(complex3);
      Complex complex7 = new Complex((-5494.322662204038), (-5494.322662204038));
      complex3.cos();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.INF;
      Complex complex10 = complex9.divide(complex3);
      Complex complex11 = complex6.sinh();
      complex10.getField();
      complex11.nthRoot(21);
      complex8.ZERO.asin();
      complex4.getArgument();
      complex8.divide(0.058823529411764705);
      Complex complex12 = complex1.exp();
      Complex complex13 = Complex.I;
      complex9.sqrt1z();
      complex8.conjugate();
      complex4.multiply((-1750991681));
      complex1.divide(complex0);
      complex4.toString();
      complex0.add(complex12);
      Complex complex14 = Complex.ZERO;
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(5.609418227003629E-301);
      Complex complex2 = complex0.tanh();
      Complex complex3 = Complex.valueOf(5.609418227003629E-301);
      complex0.add(5.609418227003629E-301);
      Complex complex4 = complex2.divide(complex0);
      complex4.hashCode();
      Complex complex5 = Complex.I;
      complex4.pow(complex5);
      Complex complex6 = complex4.atan();
      Complex complex7 = Complex.I;
      Complex complex8 = complex6.divide(complex3);
      complex8.I.sinh();
      complex5.getField();
      complex5.nthRoot(17);
      complex3.divide((double) 17);
      complex0.exp();
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.sqrt1z();
      complex6.sqrt();
      complex1.conjugate();
      complex9.multiply(17);
      complex2.ZERO.pow(complex10);
      complex5.divide(complex10);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(1.637852737426943E-248);
      Complex complex2 = complex1.NaN.sqrt();
      complex2.ONE.subtract(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.exp();
      complex1.sqrt1z();
      complex4.conjugate();
      complex4.multiply(265);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.atan();
      complex3.conjugate();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-182.84396323), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.ONE.divide((-2545.2));
      Complex complex2 = Complex.valueOf(2395.712731130968);
      Complex complex3 = Complex.valueOf(20.0);
      Complex.valueOf(2395.712731130968, 927.82064567);
      complex3.ZERO.readResolve();
      Complex.valueOf(2965.05, 3373.452182626625);
      Complex complex4 = complex0.multiply(complex2);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.sqrt1z();
      Complex complex6 = complex4.multiply(complex1);
      complex4.asin();
      Complex complex7 = complex5.pow(3373.452182626625);
      complex7.conjugate();
      Complex complex8 = complex0.reciprocal();
      Complex complex9 = complex8.ZERO.acos();
      complex1.subtract(185.23338743378);
      complex3.multiply(2.0);
      complex6.abs();
      complex9.atan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      Complex complex1 = new Complex((-831.921));
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-304.5289));
      complex3.readResolve();
      Complex complex4 = complex2.divide(complex1);
      complex1.hashCode();
      Complex complex5 = Complex.I;
      Complex complex6 = complex3.pow(complex2);
      complex5.atan();
      Complex complex7 = Complex.I;
      complex5.divide(complex7);
      complex5.getField();
      complex4.nthRoot(17);
      complex6.divide(Double.POSITIVE_INFINITY);
      complex1.exp();
      complex0.sqrt1z();
      complex3.sqrt();
      complex1.conjugate();
      complex4.multiply(17);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.NaN);
      complex1.sqrt1z();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(5.609418227003629E-301);
      Complex complex2 = complex0.I.conjugate();
      complex1.sqrt1z();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = Complex.valueOf(5.961476437680416E-4, 0.0012528685958397585);
      complex2.atan();
      complex4.sqrt();
      complex5.pow(5.609418227003629E-301);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.hashCode();
      complex0.divide(complex0);
      Complex complex1 = Complex.valueOf((-1621.0), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.multiply(3.5638391501880846E-10);
      complex0.divide(complex0);
      complex0.hashCode();
      Complex complex4 = Complex.valueOf(308.0, 887.38916627);
      complex4.NaN.subtract(7.221902646057552E211);
      complex3.tan();
      Complex complex5 = Complex.NaN;
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex.valueOf(0.0, Double.NaN);
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex2.I.asin();
      Complex complex4 = Complex.valueOf(Double.NaN);
      complex4.I.abs();
      complex0.cos();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.ONE.reciprocal();
      complex0.NaN.subtract(Double.NaN);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex4.add(1.0);
      complex3.I.reciprocal();
      Complex complex9 = complex2.subtract(Double.NaN);
      Complex complex10 = complex9.sqrt();
      complex5.ONE.sin();
      Complex complex11 = complex9.pow(complex0);
      Complex complex12 = complex8.add(complex10);
      complex12.I.conjugate();
      complex5.cos();
      complex7.ZERO.log();
      complex0.acos();
      complex7.ZERO.cos();
      complex8.acos();
      complex4.reciprocal();
      Complex complex13 = complex11.divide(complex1);
      complex7.sin();
      Complex.valueOf(Double.NaN, (-1.0));
      Complex complex14 = complex9.createComplex(20.0, (-1.8989521930292648));
      complex14.atan();
      complex13.cos();
      complex3.subtract(20.0);
      complex11.add(complex12);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = Complex.valueOf((-2038.722333), (-2038.722333));
      complex3.ONE.log();
      complex3.INF.pow(complex2);
      Complex complex4 = complex0.ZERO.tan();
      complex4.INF.toString();
      complex2.ONE.acos();
      complex4.ONE.nthRoot(2714);
      complex4.ONE.sqrt();
      Complex.valueOf(Double.NaN, (-1228.33252949006));
      complex0.toString();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.pow((-2038.722333));
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex5.INF.atan();
      Complex complex9 = complex6.multiply(0);
      complex1.INF.log();
      Complex complex10 = complex5.NaN.divide(complex9);
      complex2.createComplex(2714, Double.NaN);
      Complex complex11 = complex1.divide((double) 2714);
      Complex complex12 = complex11.add(complex9);
      complex12.INF.cos();
      complex7.toString();
      complex1.sqrt();
      complex8.subtract((double) 0);
      complex10.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(569);
      complex0.tan();
      // Undeclared exception!
      complex1.nthRoot(5729);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.I.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(605, Double.NaN);
      Complex complex2 = complex1.log();
      complex1.log();
      complex2.exp();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.divide(3268.5846468);
      complex1.NaN.multiply(complex2);
      Complex complex4 = complex0.INF.sin();
      Complex complex5 = complex4.ZERO.tanh();
      complex1.ZERO.createComplex(2019.5612050893074, 1497.7518517824);
      Complex complex6 = complex0.subtract(complex1);
      Complex complex7 = complex6.add(1497.7518517824);
      complex7.conjugate();
      complex7.getField();
      complex1.multiply((-2885));
      Complex complex8 = complex3.createComplex(2019.5612050893074, Double.POSITIVE_INFINITY);
      complex2.pow(2019.5612050893074);
      complex5.subtract(complex8);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(17);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-32.451170880973905));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(119);
      Complex complex3 = complex2.tanh();
      complex1.acos();
      Complex complex4 = new Complex(2789.0796916407);
      complex3.abs();
      Complex complex5 = complex1.multiply((-2424.434148832));
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.sinh();
      complex2.abs();
      Complex complex8 = Complex.valueOf(20.0);
      Complex complex9 = complex0.conjugate();
      complex5.multiply((-196.02));
      complex9.multiply(3781.6853722);
      Complex complex10 = complex8.divide((-2424.434148832));
      Complex.valueOf((-20.0));
      complex2.subtract(complex7);
      complex10.pow(1801.002558128315);
      complex8.tanh();
      complex9.sqrt1z();
      complex0.multiply(1014.67102958);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.reciprocal();
      complex2.sinh();
      complex2.equals(complex1);
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
      Complex complex2 = Complex.valueOf((-1284.19), (-1676.4365086429));
      complex0.tan();
      Complex complex3 = Complex.valueOf((-1284.19), (-1676.4365086429));
      Complex complex4 = complex3.exp();
      complex0.abs();
      Complex complex5 = Complex.valueOf((-1676.4365086429));
      complex3.INF.divide(Double.POSITIVE_INFINITY);
      complex5.multiply((-1284.19));
      complex4.sinh();
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.conjugate();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex6.divide((-825.50375));
      Complex complex8 = Complex.valueOf((-1676.4365086429));
      Complex complex9 = Complex.valueOf((-825.50375), 1.2969525746071163E-6);
      complex9.subtract(complex8);
      complex7.pow(0.09975062344139651);
      complex8.tanh();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY, 0.09975062344139651);
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1089579286126536E-4, 2.1089579286126536E-4);
      Complex complex1 = complex0.createComplex(2.1089579286126536E-4, 2.1089579286126536E-4);
      Complex complex2 = complex1.I.multiply(complex0);
      Complex complex3 = complex1.ZERO.exp();
      Complex complex4 = complex3.NaN.sinh();
      Complex complex5 = Complex.valueOf((-165.313));
      complex5.ZERO.subtract(2.1089579286126536E-4);
      Complex complex6 = complex0.pow(complex1);
      complex3.ZERO.subtract(complex0);
      complex1.INF.subtract(complex3);
      complex6.ZERO.readResolve();
      complex4.INF.multiply(1830.02);
      Complex complex7 = complex6.atan();
      Complex complex8 = complex4.sinh();
      Complex complex9 = complex2.cosh();
      complex4.NaN.multiply((-2249));
      complex9.ZERO.log();
      complex0.pow((-2106.0));
      complex8.ZERO.divide(5.4319406949527915E-5);
      complex7.sin();
      complex8.tanh();
      Complex.valueOf(3.775719065734602E-4, 1015.3683951998245);
      complex7.acos();
      complex5.atan();
      Complex.valueOf(0.02501564456182237, 1015.3683951998245);
      complex1.multiply((-2839));
      Complex.valueOf(1830.02, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-32.451170880973905));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(242);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.acos();
      Complex complex5 = new Complex((-32.451170880973905));
      complex5.hashCode();
      Complex complex6 = complex3.divide(complex5);
      Complex.valueOf((-32.451170880973905), 1667.0);
      Complex complex7 = Complex.ZERO;
      complex7.readResolve();
      Complex complex8 = new Complex(5317.92113998335);
      Complex complex9 = complex8.divide(complex6);
      complex1.hashCode();
      Complex.valueOf(0.0, (-1473.2282470100447));
      complex4.tan();
      complex1.pow(complex3);
      complex6.atan();
      complex0.multiply((double) 242);
      complex2.cos();
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(2.0);
      complex0.divide(complex1);
      Complex complex2 = complex1.I.cosh();
      complex1.nthRoot(347);
      Complex complex3 = complex1.atan();
      complex0.abs();
      Complex complex4 = complex2.pow(complex1);
      complex4.abs();
      Complex complex5 = complex1.sinh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.acos();
      Complex complex8 = complex2.asin();
      Complex complex9 = complex0.reciprocal();
      Complex complex10 = complex7.cosh();
      complex3.sinh();
      complex6.divide(2.4141423627760256E278);
      complex9.exp();
      complex5.multiply(2.0);
      complex5.conjugate();
      complex6.toString();
      complex10.pow(complex4);
      Complex complex11 = Complex.NaN;
      complex11.tan();
      Complex complex12 = Complex.ZERO;
      complex8.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      Complex complex1 = complex0.cos();
      complex1.cos();
      Complex complex2 = Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      Complex complex3 = Complex.valueOf((-5463.364895545147), Double.POSITIVE_INFINITY);
      complex2.multiply((-1834));
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex2.acos();
      complex4.hashCode();
      complex3.divide(complex0);
      complex3.divide(complex5);
      complex4.sin();
      Complex complex6 = new Complex((-3465.5972237));
      complex6.multiply(2350.11893719);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      Complex complex1 = complex0.cos();
      complex1.I.multiply(complex0);
      Complex complex2 = complex1.multiply(1);
      Complex complex3 = complex2.acos();
      complex0.hashCode();
      Complex complex4 = complex1.divide(complex3);
      complex1.pow(complex3);
      complex2.tanh();
      complex4.tanh();
      complex1.divide(complex2);
      Complex.valueOf(3.0);
      Complex complex5 = Complex.NaN;
      complex5.conjugate();
      complex5.getReal();
      complex1.add((-1676.4365086429));
      Complex complex6 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.ONE.pow(complex1);
      Complex.valueOf((-1284.19), (-1284.19));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.NaN.exp();
      complex2.NaN.abs();
      Complex complex4 = complex2.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = complex3.I.sinh();
      complex0.ZERO.abs();
      Complex.valueOf((-825.50375));
      Complex complex6 = complex4.I.conjugate();
      complex6.ZERO.multiply((-825.50375));
      Complex complex7 = complex2.divide(Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.NaN.atan();
      complex7.INF.abs();
      Complex complex9 = complex3.pow(complex1);
      complex1.abs();
      complex9.I.sinh();
      complex3.acos();
      complex9.asin();
      Complex complex10 = complex2.reciprocal();
      complex8.cosh();
      complex8.ZERO.sinh();
      complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex11 = complex7.exp();
      complex11.NaN.multiply((-825.50375));
      complex8.conjugate();
      complex5.toString();
      Complex complex12 = complex10.pow(complex1);
      complex12.NaN.tan();
      Complex complex13 = Complex.ZERO;
      complex9.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.hashCode();
      Complex complex2 = new Complex(1.9658551724508715E-9, 1.9658551724508715E-9);
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex1.tanh();
      complex3.tanh();
      complex5.divide(complex3);
      Complex.valueOf(94.28);
      Complex complex6 = complex3.conjugate();
      complex6.getReal();
      Complex complex7 = new Complex(1.9658551724508715E-9);
      complex7.add((-20.0));
      Complex complex8 = Complex.ONE;
      complex6.equals(complex4);
      complex8.isNaN();
      complex8.abs();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-32.451170880973905));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(242);
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex2.acos();
      Complex complex5 = new Complex((-32.451170880973905));
      complex5.hashCode();
      Complex complex6 = complex3.divide(complex5);
      Complex complex7 = Complex.valueOf((-32.451170880973905), 1667.0);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = (Complex)complex8.readResolve();
      Complex complex10 = new Complex(5317.92113998335);
      complex10.divide(complex6);
      complex1.hashCode();
      Complex.valueOf(0.0, (-1456.3063856634));
      complex4.tan();
      complex7.createComplex(0.0, (-2936.568946326275));
      complex7.add(complex1);
      complex1.getArgument();
      Complex complex11 = Complex.valueOf(0.0, (-1456.3063856634));
      complex11.sqrt();
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.INF.multiply((-2106));
      Complex complex4 = complex3.NaN.tanh();
      Complex complex5 = complex0.acos();
      complex5.ONE.hashCode();
      Complex complex6 = complex0.divide(complex5);
      complex6.ONE.pow(complex4);
      complex5.tanh();
      complex0.tanh();
      complex5.divide(complex6);
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.conjugate();
      complex7.getReal();
      Complex complex8 = complex2.add((-381.132711084365));
      Complex complex9 = Complex.ONE;
      complex8.equals("SsZ5kNhXMI(");
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(791.6948011);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.add(791.6948011);
      complex0.isInfinite();
      Complex complex4 = complex3.tanh();
      complex2.tanh();
      complex3.divide(complex4);
      Complex complex5 = Complex.valueOf((-1144.0), (-23.4701438648));
      complex0.abs();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.I;
      Complex complex8 = complex7.divide(complex5);
      complex1.tanh();
      complex8.tanh();
      Complex complex9 = Complex.ONE;
      complex9.divide(complex7);
      complex1.conjugate();
      complex5.INF.negate();
      complex2.getReal();
      complex8.cosh();
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.ONE;
      Complex complex13 = new Complex(Double.POSITIVE_INFINITY, 7.296670293275653E-10);
      complex12.equals(complex13);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(Double.NaN);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      Complex complex1 = complex0.cos();
      Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      complex1.isInfinite();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.tanh();
      Complex complex5 = complex2.divide(complex3);
      Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      complex5.abs();
      Complex complex6 = Complex.INF;
      Complex complex7 = Complex.I;
      complex2.divide(complex5);
      complex4.tanh();
      complex0.tanh();
      Complex complex8 = Complex.ONE;
      Complex complex9 = Complex.ZERO;
      Complex complex10 = new Complex(Double.NaN);
      Complex complex11 = complex9.divide(complex10);
      complex5.conjugate();
      complex9.getReal();
      complex4.cosh();
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex12.add((-1676.4365086429));
      complex11.readResolve();
      Object object0 = new Object();
      complex13.equals(object0);
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(791.6948011);
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.add((-11.306768780727));
      complex2.isInfinite();
      complex0.tanh();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.divide(complex4);
      Complex.valueOf(1247.324642352047, 1052.0784915461686);
      complex5.abs();
      Complex complex6 = Complex.INF;
      complex6.divide(complex0);
      complex2.tanh();
      complex0.tanh();
      Complex complex7 = Complex.ONE;
      Complex complex8 = complex3.divide(complex1);
      Complex complex9 = complex3.conjugate();
      complex6.getReal();
      complex1.cosh();
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.ONE;
      complex11.add(791.6948011);
      complex5.readResolve();
      Complex complex12 = Complex.INF;
      complex12.equals(complex9);
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(791.6948011);
      Complex complex2 = new Complex((-6.077779731902102E-9));
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex2.add((-346.5084349270798));
      complex1.isInfinite();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex1.tanh();
      complex4.divide(complex5);
      Complex complex7 = Complex.valueOf((-23.4701438648), (-23.4701438648));
      complex5.abs();
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.I;
      complex7.add(complex6);
      Complex complex10 = complex3.divide(complex4);
      Complex complex11 = complex8.tanh();
      complex11.ONE.asin();
      complex7.tanh();
      Complex complex12 = Complex.ONE;
      complex1.divide(complex3);
      complex11.conjugate();
      complex4.getReal();
      Complex complex13 = complex4.cosh();
      Complex complex14 = Complex.NaN;
      complex12.add((-1144.0));
      complex13.readResolve();
      Complex complex15 = Complex.I;
      complex10.equals(complex15);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.nthRoot(998);
      Complex complex1 = complex0.subtract(791.6948011);
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(791.6948011, 791.6948011);
      Complex complex4 = Complex.ONE;
      complex2.sinh();
      Complex complex5 = complex2.acos();
      Complex complex6 = new Complex(791.6948011);
      Complex complex7 = Complex.ONE;
      complex5.isNaN();
      complex2.tan();
      Complex complex8 = new Complex((-0.4142135623730951), 1388.0552);
      complex8.divide(791.6948011);
      complex1.abs();
      complex5.hashCode();
      complex3.cosh();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-20.0), (-2116.537));
      Complex complex3 = complex2.multiply(1389);
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.acos();
      complex1.hashCode();
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = complex3.pow(complex5);
      Complex complex8 = Complex.valueOf((-2116.537), (-1.0624985110080394E-7));
      complex7.readResolve();
      Complex complex9 = complex8.divide(complex6);
      Complex complex10 = Complex.INF;
      complex10.hashCode();
      Complex complex11 = Complex.valueOf((-20.0), (-2.036954998E9));
      complex9.tan();
      Complex complex12 = complex8.pow(complex9);
      complex12.isNaN();
      complex11.divide(892.5574359014213);
      Complex complex13 = new Complex(2341.607, 1.0);
      complex8.abs();
      complex10.hashCode();
      complex1.divide((-2.036954998E9));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.asin();
      complex0.ZERO.tanh();
      complex0.ONE.hashCode();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.INF.pow((-20.0));
      complex4.INF.log();
      Complex complex5 = complex2.conjugate();
      complex0.getField();
      Complex complex6 = Complex.valueOf((-20.0), 20.0);
      complex1.I.cosh();
      Complex complex7 = new Complex(678580.5558154332, 20.0);
      complex7.tan();
      Complex complex8 = complex0.pow(complex1);
      complex7.isNaN();
      complex5.tan();
      complex1.divide(20.0);
      complex8.ONE.sin();
      Complex complex9 = new Complex(1.0, 678580.5558154332);
      complex8.abs();
      complex6.hashCode();
      complex9.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.multiply(242);
      Complex complex3 = complex2.tanh();
      complex2.acos();
      Complex complex4 = new Complex((-20.0));
      complex4.hashCode();
      Complex complex5 = complex3.divide(complex4);
      complex0.sinh();
      Complex complex6 = complex2.acos();
      complex6.sqrt1z();
      complex5.tanh();
      complex2.tan();
      Complex complex7 = new Complex(0.0, 0.5039018405998233);
      Complex complex8 = Complex.INF;
      complex8.divide(1388.0552);
      Complex complex9 = Complex.I;
      complex9.abs();
      Complex complex10 = Complex.ONE;
      complex10.hashCode();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(791.6948011);
      Complex complex2 = Complex.I;
      Complex complex3 = new Complex(791.6948011, 791.6948011);
      Complex complex4 = new Complex(791.6948011, 791.6948011);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex2.acos();
      Complex complex7 = complex5.sqrt1z();
      complex1.createComplex(791.6948011, (-21.5707963267949));
      complex0.abs();
      Complex complex8 = Complex.valueOf(1.0, 1.0);
      complex8.hashCode();
      complex1.sin();
      Complex complex9 = Complex.NaN;
      complex9.isInfinite();
      Complex complex10 = complex2.subtract(791.6948011);
      complex10.subtract(complex7);
      complex8.ONE.abs();
      complex3.getField();
      complex8.abs();
      Complex complex11 = Complex.INF;
      complex6.divide(complex11);
      Complex.valueOf(Double.NaN, (-21.5707963267949));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.abs();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.ONE.multiply(complex1);
      complex0.toString();
      complex0.readResolve();
      Complex complex3 = complex1.subtract(complex2);
      Complex complex4 = complex3.ONE.reciprocal();
      complex3.pow(complex2);
      Complex complex5 = complex1.atan();
      complex5.ONE.abs();
      Complex complex6 = Complex.valueOf(1.0);
      complex6.sin();
      complex1.add(complex2);
      complex1.cos();
      complex2.negate();
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.INF.tan();
      Complex complex2 = complex0.INF.subtract((-353.0));
      Complex complex3 = complex2.subtract(0.5);
      complex3.ONE.getField();
      Complex complex4 = new Complex((-353.0));
      Complex complex5 = complex0.subtract(complex4);
      complex4.NaN.multiply(3105);
      complex4.multiply(1722.45713);
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      complex1.toString();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex0.createComplex((-6.0275040161173166E-18), 2438.4268417);
      complex3.INF.toString();
      complex2.abs();
      complex3.hashCode();
      complex2.sin();
      Complex complex6 = new Complex(2.63957027915428E-66, 1981.4);
      complex6.isInfinite();
      Complex complex7 = complex3.subtract(380.132711084365);
      complex3.subtract(complex4);
      complex3.getField();
      Complex complex8 = Complex.valueOf(1.0, 2.63957027915428E-66);
      complex8.abs();
      Complex complex9 = Complex.INF;
      Complex complex10 = complex7.divide(complex9);
      complex9.tanh();
      complex7.tanh();
      Complex complex11 = complex4.divide(complex3);
      complex2.conjugate();
      complex5.getReal();
      complex10.INF.cosh();
      complex1.add(4435236.0);
      Object object0 = complex10.readResolve();
      complex11.equals(object0);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6616.272032571258, 2.2934980392456055);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = Complex.valueOf(6616.272032571258);
      complex1.readResolve();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex2.multiply(complex5);
      Complex complex7 = complex6.cos();
      complex4.sin();
      Complex complex8 = complex6.sin();
      Complex complex9 = complex3.pow(complex1);
      complex0.getImaginary();
      Complex complex10 = complex0.multiply(320);
      Complex complex11 = Complex.valueOf((-1816.18863));
      complex11.toString();
      complex2.abs();
      complex2.getImaginary();
      complex1.I.divide(0.0);
      complex7.nthRoot(272);
      List<Complex> list0 = complex1.nthRoot(272);
      complex11.equals(list0);
      complex4.divide(complex9);
      Complex.valueOf((double) 320);
      Complex complex12 = complex10.divide(0.27487633066146194);
      complex11.multiply(complex12);
      Complex.valueOf(3078.64853);
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      Complex complex3 = complex0.tanh();
      complex3.hashCode();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.add(complex4);
      complex4.cosh();
      complex5.pow((-261.858304239));
      Complex complex6 = complex0.conjugate();
      complex2.getField();
      Complex complex7 = complex6.sinh();
      complex5.nthRoot(459);
      complex7.add(2.0);
      Complex complex8 = complex3.acos();
      complex1.isNaN();
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.INF;
      complex2.negate();
      Complex complex3 = complex1.sqrt1z();
      complex2.abs();
      Complex complex4 = Complex.NaN;
      complex4.getField();
      Complex complex5 = new Complex(1549.480693, Double.POSITIVE_INFINITY);
      complex4.divide(complex5);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.divide(complex3);
      complex7.conjugate();
      complex4.getReal();
      complex5.add(1549.480693);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2153.53486));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.pow((-2153.53486));
      Complex complex4 = Complex.INF;
      complex0.negate();
      complex1.multiply(complex4);
      complex4.toString();
      Complex complex5 = new Complex(3.6769498759522324E-8, 6616.271957);
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex5.sqrt1z();
      Complex complex8 = complex3.createComplex(3.6769498759522324E-8, (-1.0));
      complex8.abs();
      complex6.hashCode();
      complex1.sin();
      complex6.isInfinite();
      Complex complex9 = complex7.subtract((-1.0));
      Complex complex10 = complex6.subtract(complex9);
      complex9.getField();
      complex7.abs();
      Complex complex11 = complex1.divide(complex9);
      complex11.tanh();
      complex8.tanh();
      complex0.divide(complex9);
      complex2.conjugate();
      complex1.getReal();
      Complex complex12 = Complex.I;
      complex12.add((-2153.53486));
      Complex complex13 = Complex.I;
      Complex complex14 = Complex.valueOf(1693.8776336, 1662.819007879159);
      Object object0 = complex14.readResolve();
      complex13.equals(object0);
      complex10.isNaN();
      Complex.valueOf(6616.272032571258);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-717.48297), (-1682.2231));
      complex0.INF.sinh();
      Complex complex1 = complex0.createComplex((-1682.2231), (-1682.2231));
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      complex2.sin();
      Object object0 = complex2.readResolve();
      complex0.equals(object0);
      Complex complex3 = complex1.createComplex(0.0, (-1682.2231));
      Complex complex4 = complex1.sinh();
      complex4.I.atan();
      object0.equals(complex3);
      complex4.multiply(2.9825165926110716E-4);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2153.53486));
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.ONE.pow((-2153.53486));
      complex1.tanh();
      Complex complex4 = complex3.acos();
      complex0.hashCode();
      complex3.divide(complex2);
      Complex complex5 = Complex.valueOf(0.0, (-20.0));
      complex3.readResolve();
      Complex complex6 = complex3.divide(complex5);
      complex0.hashCode();
      Complex complex7 = Complex.valueOf((-1676.4365086429), 21.721227516872396);
      complex4.pow(complex7);
      complex5.atan();
      complex4.divide(complex7);
      complex6.getField();
      complex2.nthRoot(17);
      complex5.divide(536.7253829575642);
      complex0.exp();
      Complex complex8 = Complex.I;
      Complex complex9 = complex0.sqrt();
      complex2.conjugate();
      complex9.multiply((-1587));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(791.6948011);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.add(791.6948011);
      complex0.isInfinite();
      Complex complex4 = complex3.tanh();
      complex2.tanh();
      complex3.divide(complex4);
      Complex complex5 = complex0.conjugate();
      complex3.getReal();
      complex4.add(791.6948011);
      Complex complex6 = Complex.ONE;
      complex5.equals(complex6);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2153.53486));
      Complex complex2 = complex0.negate();
      complex2.ONE.pow((-2153.53486));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex0.INF.multiply(complex3);
      complex5.ZERO.toString();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex6.ONE.sqrt1z();
      complex3.INF.createComplex((-2153.53486), (-2153.53486));
      complex0.abs();
      complex7.hashCode();
      Complex complex8 = complex7.sin();
      complex8.isInfinite();
      Complex complex9 = complex2.subtract((-2153.53486));
      Complex complex10 = complex1.subtract(complex9);
      complex6.NaN.getField();
      complex10.INF.abs();
      Complex complex11 = complex0.divide(complex5);
      complex11.ONE.tanh();
      complex3.tanh();
      complex10.pow((-2153.53486));
      Complex complex12 = Complex.NaN;
      Complex complex13 = Complex.valueOf(5.5299060775883977E-8);
      Object object0 = complex13.readResolve();
      complex8.equals(object0);
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-2153.53486));
      Complex complex1 = complex0.negate();
      complex1.ONE.pow((-2153.53486));
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex0.INF.multiply(complex2);
      complex4.ZERO.toString();
      complex4.INF.conjugate();
      Complex complex5 = new Complex(0.9999999999999998, 1.7071067811865475);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex0.reciprocal();
      complex7.ONE.multiply(complex5);
      complex2.multiply(complex3);
      complex6.pow((-0.05));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      complex2.I.tan();
      complex0.NaN.sqrt();
      Complex complex3 = complex2.divide(complex0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.I.acos();
      complex4.INF.sqrt1z();
      Complex complex6 = complex1.tanh();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex2.divide(complex6);
      Complex complex9 = Complex.I;
      complex9.getField();
      complex8.nthRoot(17);
      Complex complex10 = complex5.divide(1.1210410594940186);
      complex0.exp();
      complex4.sqrt1z();
      complex0.sqrt();
      complex10.conjugate();
      complex7.multiply((-1587));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(2.0, 1216.847052);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex1.sqrt();
      complex3.divide(0.6224634988053931);
      Complex complex4 = complex0.asin();
      complex2.readResolve();
      Complex complex5 = complex3.add(3064.574629843);
      complex5.negate();
      Complex complex6 = complex4.pow(1216.847052);
      Complex complex7 = Complex.NaN;
      complex2.equals("R>](");
      complex4.hashCode();
      complex5.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2153.53486));
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf((-2153.53486), (-2153.53486));
      Complex complex3 = complex2.pow(0.0);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex3.negate();
      Complex complex6 = Complex.valueOf(1684.235);
      Complex complex7 = complex6.multiply(complex3);
      complex6.toString();
      complex4.conjugate();
      complex1.sqrt1z();
      Complex complex8 = complex7.createComplex(0.0, (-2153.53486));
      Complex complex9 = Complex.I;
      complex9.abs();
      complex8.hashCode();
      complex6.sin();
      complex3.isInfinite();
      complex0.subtract(1684.235);
      Complex complex10 = complex2.subtract(complex8);
      complex8.getField();
      Complex complex11 = new Complex(0.0, (-236.29));
      complex11.abs();
      complex10.divide(complex5);
      complex3.tanh();
      complex1.tanh();
      complex10.divide(complex6);
      complex3.conjugate();
      Complex complex12 = Complex.ONE;
      complex12.getReal();
      complex3.add(-0.0);
      complex12.equals(complex8);
      complex7.isNaN();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      double double0 = 2.0;
      Complex complex1 = complex0.divide(2.0);
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.NaN.pow(complex1);
      complex3.I.cosh();
      Complex complex4 = Complex.valueOf(1966.30797);
      try { 
        complex4.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      double double0 = (-894.777145113);
      Complex complex0 = Complex.valueOf((-894.777145113));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex2.ONE.multiply(0);
      complex3.ONE.nthRoot(251);
      complex3.I.hashCode();
      Complex complex4 = complex0.sinh();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex0.add(complex5);
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex7.I.sqrt();
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = Complex.valueOf(0.0, 1.1304970373249033E199);
      complex10.NaN.toString();
      complex1.exp();
      Complex complex11 = Complex.valueOf(1111.92450502324, 0.6379399299621582);
      Complex complex12 = complex4.multiply(0.0);
      Complex complex13 = complex1.multiply(complex7);
      complex13.ONE.reciprocal();
      complex13.ZERO.acos();
      Complex complex14 = complex8.tanh();
      complex5.INF.divide(1111.92450502324);
      complex7.sinh();
      complex14.sinh();
      complex2.acos();
      complex11.createComplex((-294.3648377028), 0.0);
      complex8.sqrt1z();
      complex12.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2148.39141387029));
      Complex complex2 = complex1.INF.add(complex0);
      Complex complex3 = complex0.subtract(1128.192);
      Complex complex4 = complex3.ZERO.sqrt();
      complex4.ONE.sinh();
      Complex complex5 = complex0.ONE.negate();
      Complex complex6 = complex3.multiply(0);
      Complex complex7 = complex6.log();
      Complex complex8 = complex1.multiply(complex4);
      complex0.ONE.conjugate();
      complex0.ZERO.pow(complex5);
      Complex complex9 = complex7.divide(complex8);
      complex9.toString();
      complex2.abs();
      complex0.add((-1.1623125976292733E-7));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-2153.53486));
      Complex complex2 = complex0.negate();
      complex2.ONE.pow((-2153.53486));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex2.I.negate();
      Complex complex5 = complex0.INF.multiply(complex3);
      complex5.ZERO.toString();
      Complex complex6 = complex5.INF.conjugate();
      Complex complex7 = complex6.ONE.sqrt1z();
      Complex complex8 = complex3.INF.createComplex((-2153.53486), (-2153.53486));
      complex0.abs();
      complex7.hashCode();
      Complex complex9 = complex7.sin();
      complex9.isInfinite();
      Complex complex10 = complex2.subtract((-2153.53486));
      Complex complex11 = complex1.subtract(complex10);
      complex6.NaN.getField();
      complex11.INF.abs();
      Complex complex12 = complex0.divide(complex5);
      Complex complex13 = complex12.ONE.tanh();
      complex3.tanh();
      complex8.divide(complex4);
      complex9.conjugate();
      complex13.getReal();
      Complex complex14 = complex3.add(1.0);
      complex14.equals("C)o (Mp&rkG9");
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(7.374944406615125E-186, 7.374944406615125E-186);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.asin();
      complex2.I.multiply(0);
      Complex complex3 = complex2.INF.asin();
      complex3.ONE.abs();
      complex2.ZERO.abs();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = complex4.I.cosh();
      complex5.ONE.abs();
      complex1.toString();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.NaN.abs();
      complex0.isInfinite();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = Complex.valueOf(1975.0);
      complex2.NaN.log();
      complex4.INF.subtract(complex0);
      complex1.isNaN();
      complex2.getReal();
      complex0.ONE.cos();
      Complex complex5 = complex0.createComplex((-5.79002114093961E86), 1975.0);
      complex5.acos();
      Complex complex6 = complex3.tan();
      complex6.NaN.getArgument();
      complex0.pow(0.0);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = new Complex(942.238, (-1149.626302941012));
      Complex complex1 = new Complex(942.238);
      complex0.I.toString();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex0.multiply(942.238);
      Complex complex4 = complex0.sin();
      Complex complex5 = complex4.I.sinh();
      Complex complex6 = complex3.ONE.sqrt1z();
      Complex.valueOf(0.0);
      Complex complex7 = complex3.ONE.sqrt1z();
      complex4.NaN.divide(3135.6731435716893);
      Complex complex8 = complex3.subtract(complex4);
      complex1.tanh();
      Complex complex9 = complex1.sqrt();
      complex9.INF.log();
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = Complex.valueOf(6.283185307179586);
      complex11.INF.sin();
      Complex complex12 = complex11.reciprocal();
      Complex complex13 = complex12.I.multiply((-4584));
      complex0.isInfinite();
      complex12.sin();
      complex5.isNaN();
      complex10.multiply(complex8);
      complex6.getImaginary();
      complex3.equals(complex8);
      complex13.log();
      complex2.cos();
      complex6.hashCode();
      Complex complex14 = Complex.valueOf(2112.090596748439, 0.0);
      complex7.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ZERO.tanh();
      Complex complex2 = complex0.multiply(2.0919226941745448E-8);
      Complex complex3 = complex1.INF.asin();
      Complex complex4 = complex0.I.sinh();
      complex2.getReal();
      complex1.exp();
      Complex.valueOf(2.0919226941745448E-8, (-2.774475773922311E-8));
      complex4.isInfinite();
      Complex complex5 = complex3.sin();
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = new Complex(1571.23, 1571.23);
      complex3.ZERO.nthRoot(519);
      Complex complex8 = complex7.ONE.add(complex2);
      Complex.valueOf(0.0, (-2.774475773922311E-8));
      Complex complex9 = complex5.pow(complex7);
      complex6.tan();
      complex3.cos();
      complex9.atan();
      complex8.cos();
      Complex.valueOf(184.400394);
      complex3.nthRoot(1);
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.tanh();
      complex2.I.tan();
      Complex complex3 = complex0.NaN.sqrt();
      Complex complex4 = complex2.divide(complex0);
      Complex complex5 = complex4.sinh();
      complex5.I.acos();
      complex5.INF.sqrt1z();
      complex1.tanh();
      complex4.isNaN();
      Complex complex6 = complex2.tan();
      complex6.ZERO.divide((-1.2588742703536392E188));
      complex6.abs();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.664920449256897);
      Complex complex1 = Complex.valueOf(0.664920449256897, 0.664920449256897);
      complex1.INF.getArgument();
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = complex0.I.multiply(2298);
      Complex complex4 = Complex.valueOf(0.0);
      complex4.ONE.tanh();
      Complex complex5 = complex2.NaN.atan();
      complex5.ONE.pow(0.664920449256897);
      complex5.INF.abs();
      complex0.nthRoot(1911);
      complex1.INF.toString();
      complex0.abs();
      complex2.getImaginary();
      Complex complex6 = complex3.cosh();
      Complex complex7 = complex3.pow(complex2);
      complex6.log();
      complex1.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 3064.574629843);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.sqrt();
      complex0.INF.divide(0.0);
      complex1.ONE.asin();
      complex1.NaN.readResolve();
      Complex complex3 = complex0.add(0.0);
      complex3.ONE.negate();
      complex3.pow(3064.574629843);
      Complex complex4 = Complex.NaN;
      complex2.equals(complex4);
      complex2.hashCode();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.reciprocal();
      Complex complex1 = Complex.valueOf(1.1144917011260986);
      complex1.NaN.divide((-1488.56525488113));
      complex1.INF.cosh();
      Complex complex2 = complex1.acos();
      complex1.NaN.getField();
      complex1.I.getArgument();
      complex0.multiply(complex1);
      complex1.multiply(1.1144917011260986);
      Complex complex3 = complex0.createComplex(1.1144917011260986, (-824.0));
      complex3.tan();
      complex2.readResolve();
      complex2.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.INF.cos();
      complex1.isNaN();
      complex0.createComplex(809.0, 809.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.subtract(complex1);
      complex4.ONE.sqrt();
      complex2.isNaN();
      complex3.conjugate();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 562.1053451);
      Complex complex1 = complex0.I.subtract(0.0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.divide(complex1);
      complex2.getReal();
      Complex complex4 = complex2.subtract(0.0);
      complex2.ZERO.getField();
      complex1.pow(complex2);
      complex0.NaN.divide((-1289.1));
      complex3.cosh();
      Complex complex5 = Complex.valueOf(562.1053451);
      Complex complex6 = Complex.valueOf(1761.0, 562.1053451);
      Complex complex7 = complex0.ONE.cosh();
      complex7.NaN.add(complex3);
      Complex complex8 = complex3.createComplex(562.1053451, (-323.1630533));
      complex8.I.add(complex5);
      Complex complex9 = complex8.acos();
      complex9.ZERO.pow((-3493.9812));
      complex6.multiply(3404);
      complex2.cos();
      Complex.valueOf(0.0, 921.3714894);
      complex5.sqrt();
      complex4.reciprocal();
      complex8.multiply((-1289.1));
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex((-2292.943885258));
      Complex complex1 = null;
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(2.3416513526430908E-7, 0.0);
      complex0.I.log();
      Complex complex1 = complex0.I.pow(6.283185307179586);
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ONE.sinh();
      complex0.readResolve();
      Complex complex4 = complex0.exp();
      complex2.NaN.multiply(complex1);
      Complex complex5 = complex4.ONE.conjugate();
      Complex complex6 = complex5.ZERO.subtract(complex3);
      Complex complex7 = complex6.sqrt1z();
      complex7.divide(complex4);
      Complex.valueOf(0.0);
      complex7.readResolve();
      Complex complex8 = complex4.multiply(complex0);
      Complex complex9 = complex8.NaN.cos();
      Complex complex10 = complex9.INF.sin();
      Complex complex11 = complex1.sin();
      Complex complex12 = complex1.pow(complex5);
      complex4.getImaginary();
      complex12.multiply(320);
      complex8.toString();
      complex9.getImaginary();
      complex3.nthRoot(272);
      complex11.nthRoot(320);
      complex10.equals(complex8);
      complex6.divide(complex8);
      Complex complex13 = Complex.valueOf(0.0);
      complex13.divide((-1016.0));
      complex11.multiply(complex1);
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(286.280945, (-522.3124877049506));
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex0.hashCode();
      Complex complex2 = complex0.multiply(complex1);
      complex0.I.getArgument();
      complex0.atan();
      Complex.valueOf((-522.3124877049506), (-563.0));
      Complex complex3 = Complex.valueOf(286.280945);
      complex3.subtract(complex2);
      complex0.pow(707.2);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-8.90738964219), (-8.90738964219));
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = Complex.valueOf((-8.90738964219), 4554.117);
      Complex complex3 = complex2.ZERO.multiply(2223.8135);
      Complex complex4 = complex3.ONE.divide((-74.734));
      complex4.INF.atan();
      Complex.valueOf((-1583.00062026467), 4554.117);
      Complex complex5 = complex4.INF.subtract(complex0);
      complex5.atan();
      Complex complex6 = complex0.NaN.log();
      complex6.ZERO.multiply(complex1);
      Complex complex7 = complex6.INF.sqrt();
      complex7.sqrt1z();
      complex0.isInfinite();
      Complex.valueOf((-1.0109271059094341E-7));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-587.521));
      Complex complex1 = complex0.multiply(0);
      complex1.I.toString();
      complex0.NaN.getField();
      Complex complex2 = Complex.valueOf(6.283185307179586, 0.0);
      complex2.I.add(0.0);
      Complex complex3 = complex0.negate();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex3.pow(complex4);
      complex3.I.tanh();
      complex1.negate();
      complex5.pow((-749.5709362699515));
      complex0.log();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(1138.9489331139487);
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.I.acos();
      complex1.INF.multiply(1138.9489331139487);
      Complex complex2 = new Complex((-600.206), 0.0);
      complex2.NaN.nthRoot(1323);
      Complex complex3 = complex0.ZERO.subtract(5.8840879519086286E-204);
      complex3.ZERO.tanh();
      Complex complex4 = complex0.ZERO.pow(complex2);
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = complex2.NaN.createComplex((-600.206), 1138.9489331139487);
      Complex complex7 = complex6.ONE.conjugate();
      complex7.NaN.add(complex0);
      complex0.multiply(complex2);
      Complex complex8 = Complex.ZERO;
      Complex.valueOf((double) 1323, 0.0);
      Complex complex9 = complex0.multiply(complex8);
      complex2.conjugate();
      complex9.ONE.divide(0.0);
      complex9.cosh();
      Complex complex10 = complex9.divide(1138.9489331139487);
      complex5.getArgument();
      Complex complex11 = complex0.subtract(1860.350723);
      complex11.ZERO.sin();
      complex10.hashCode();
      complex0.multiply(1.0);
      complex5.getReal();
      complex3.tanh();
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex((-849.608128609), (-849.608128609));
      Complex complex1 = Complex.NaN;
      complex1.subtract(975.85884);
      complex0.ONE.getArgument();
      Complex complex2 = complex0.ZERO.multiply(complex1);
      Complex complex3 = complex0.INF.asin();
      complex3.ZERO.cos();
      Complex complex4 = complex1.I.tanh();
      Complex complex5 = complex2.INF.asin();
      complex2.ONE.nthRoot(315);
      complex0.reciprocal();
      complex2.ONE.getField();
      Complex complex6 = Complex.valueOf((-3607.5057612867));
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex1.divide((-6.972256643013266E-8));
      complex8.I.cos();
      Complex complex9 = complex7.negate();
      complex9.hashCode();
      complex4.multiply(complex5);
      Complex complex10 = complex6.exp();
      complex10.INF.abs();
      complex7.I.add(complex4);
      complex0.createComplex((-849.608128609), 0.0);
      complex9.cosh();
      complex6.divide((double) 315);
      complex8.hashCode();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      double double0 = 6.283185307179586;
      Complex complex0 = new Complex(6.283185307179586);
      complex0.multiply(6.283185307179586);
      complex0.NaN.sin();
      Complex complex1 = complex0.sqrt();
      complex1.INF.negate();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Object object0 = new Object();
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex1.ZERO.subtract(complex0);
      complex0.equals(object0);
      complex0.sinh();
      complex2.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.tanh();
      complex0.ONE.hashCode();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.INF.pow((-20.0));
      Complex complex6 = complex3.conjugate();
      complex0.getField();
      complex2.I.sinh();
      complex6.nthRoot(459);
      complex2.add((double) 459);
      complex3.acos();
      complex5.isNaN();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex1.I.pow(complex0);
      Complex complex2 = complex1.ONE.log();
      complex2.INF.conjugate();
      complex1.getArgument();
      Complex complex3 = complex1.INF.atan();
      try { 
        complex3.I.nthRoot((-3504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,504
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(0.0);
      complex1.ZERO.hashCode();
      complex0.multiply(complex1);
      Complex complex2 = complex1.createComplex(0.0, 0.0);
      complex2.NaN.add(complex0);
      complex0.getArgument();
      Complex complex3 = complex0.sqrt();
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      complex1.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex0.multiply(0.0);
      complex0.getReal();
      Complex complex4 = complex3.INF.reciprocal();
      complex3.multiply(1);
      complex3.I.readResolve();
      Complex complex5 = complex2.ONE.multiply(0);
      complex3.nthRoot(1);
      complex0.isNaN();
      Complex complex6 = complex2.cosh();
      complex6.cos();
      complex6.ZERO.sqrt();
      complex6.isInfinite();
      complex5.sqrt1z();
      complex4.multiply(565);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      complex0.cos();
      Complex.valueOf((-1676.4365086429), (-1676.4365086429));
      Complex complex1 = complex0.INF.multiply((-2106));
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex0.acos();
      complex3.ONE.hashCode();
      complex0.divide(complex3);
      Complex complex4 = Complex.valueOf(156.91639058827, 0.0);
      complex4.INF.readResolve();
      complex0.divide(complex4);
      complex4.hashCode();
      Complex complex5 = Complex.valueOf(1.0, (double) (-2106));
      Complex complex6 = complex2.tan();
      complex5.ZERO.pow(complex2);
      Complex complex7 = complex0.atan();
      complex0.divide(complex7);
      complex7.getField();
      complex7.nthRoot(17);
      complex2.divide((-1676.4365086429));
      complex4.exp();
      complex5.sqrt1z();
      complex0.sqrt();
      complex1.conjugate();
      complex6.multiply((-1587));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.reciprocal();
      complex1.reciprocal();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.NaN.multiply(complex0);
      complex0.ZERO.add(complex1);
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract(791.6948011);
      Complex complex2 = complex0.multiply(complex1);
      complex2.add(791.6948011);
      complex0.isInfinite();
      Complex.valueOf(0.47036975622177124, (-1609.917282571554));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-692.567), (-692.567));
      complex0.INF.readResolve();
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.exp();
      double double0 = 0.0;
      Complex complex2 = complex1.I.multiply(0.0);
      complex2.tan();
      complex2.I.sinh();
      try { 
        complex0.NaN.nthRoot((-469));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -469
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-166.232249));
      Complex complex1 = Complex.ZERO;
      complex1.nthRoot(1);
      Complex complex2 = Complex.NaN;
      complex0.readResolve();
      complex2.INF.toString();
      Complex complex3 = complex1.I.subtract(complex2);
      Complex complex4 = complex0.ZERO.log();
      Complex complex5 = complex0.INF.add(complex1);
      Complex complex6 = complex5.I.sin();
      Complex complex7 = complex6.I.tanh();
      complex0.hashCode();
      complex4.toString();
      Complex complex8 = Complex.ONE;
      Complex.valueOf((-72.4208654));
      complex1.equals(complex8);
      complex3.INF.acos();
      complex8.sinh();
      complex5.INF.conjugate();
      complex3.getReal();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.valueOf((-1441.0));
      Complex complex2 = complex1.INF.sqrt();
      complex1.NaN.reciprocal();
      Complex complex3 = complex0.add((-1441.0));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex0.asin();
      Complex complex6 = complex3.I.pow((-5.150590480969644E-8));
      complex0.getImaginary();
      Complex complex7 = complex0.pow(complex3);
      Complex.valueOf((-1381.0229));
      Complex complex8 = complex7.ZERO.acos();
      complex8.NaN.log();
      complex7.INF.toString();
      Complex complex9 = complex4.multiply(0);
      Complex complex10 = complex9.pow(complex5);
      complex10.I.add(complex0);
      complex0.pow(0.0);
      complex6.tan();
      Complex.valueOf((-1381.0229));
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(881.187);
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.ZERO.sin();
      complex3.I.hashCode();
      complex0.I.abs();
      Complex complex4 = complex0.NaN.tan();
      complex4.NaN.tanh();
      complex4.ZERO.divide(complex1);
      complex4.NaN.getArgument();
      Complex complex5 = complex0.cosh();
      complex5.atan();
      complex4.getArgument();
      complex3.acos();
      complex1.conjugate();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-696.6));
      Complex complex2 = complex1.multiply(2115);
      complex1.hashCode();
      Complex complex3 = complex2.I.createComplex(9.043280094115832E-8, 1.6422934532165527);
      Complex complex4 = Complex.NaN;
      complex3.ONE.multiply(complex4);
      Complex complex5 = complex0.subtract(complex1);
      Complex.valueOf(9.043280094115832E-8);
      complex1.conjugate();
      Complex complex6 = complex5.pow(1.6422934532165527);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.tan();
      Complex complex2 = complex1.ZERO.acos();
      Complex complex3 = complex2.ONE.exp();
      complex3.ZERO.nthRoot(530);
      complex0.ONE.conjugate();
      complex0.ONE.divide((-1125.8061035927938));
      complex0.I.atan();
      Complex complex4 = complex2.I.pow(complex1);
      Complex complex5 = complex2.I.divide(0.0);
      complex1.ONE.getArgument();
      complex2.NaN.log();
      Complex complex6 = complex0.INF.pow(complex5);
      complex6.ZERO.sin();
      Complex complex7 = complex0.multiply(0.0);
      complex7.NaN.log();
      complex6.NaN.sinh();
      complex7.getImaginary();
      complex7.add(0.0);
      complex6.isInfinite();
      complex4.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      double double0 = 1459.86;
      Complex complex0 = Complex.valueOf(1459.86, 1459.86);
      complex0.getField();
      Complex complex1 = complex0.exp();
      complex1.I.acos();
      complex1.ONE.sin();
      int int0 = 0;
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.INF.sqrt1z();
      Complex complex3 = complex2.NaN.tan();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex1.atan();
      complex5.ZERO.sinh();
      List<Complex> list0 = complex4.ZERO.nthRoot(1057);
      assertFalse(list0.contains(complex2));
      assertTrue(list0.contains(complex0));
      assertEquals(1057, list0.size());
      
      complex0.pow(complex5);
      complex2.isInfinite();
      Complex complex6 = complex1.I.pow(0.0);
      Complex complex7 = complex6.NaN.asin();
      complex7.ONE.getArgument();
      assertEquals(1.0, complex6.getReal(), 0.01);
      
      Complex complex8 = complex3.reciprocal();
      complex8.ZERO.getArgument();
      complex8.nthRoot(1057);
      Complex complex9 = complex8.I.divide(0.0);
      Complex complex10 = complex4.conjugate();
      Complex complex11 = complex8.acos();
      complex4.getReal();
      Complex complex12 = complex10.atan();
      Complex complex13 = complex2.pow((double) 1057);
      assertSame(complex13, complex9);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertTrue(complex2.equals((Object)complex11));
      
      Complex complex14 = complex10.pow(complex12);
      Complex complex15 = complex14.createComplex(0.0, 0.7071067811865476);
      complex15.I.hashCode();
      assertTrue(complex0.equals((Object)complex5));
      assertEquals((-0.4092269924828062), complex14.getImaginary(), 0.01);
      
      Complex complex16 = Complex.valueOf(0.7071067811865476, 0.0);
      assertFalse(complex16.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      complex0.I.cos();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.INF.sqrt1z();
      complex2.NaN.toString();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.ONE.conjugate();
      int int0 = (-306);
      complex0.add(complex3);
      complex4.I.tan();
      try { 
        complex0.ZERO.nthRoot((-306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -306
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.tan();
      Complex complex3 = complex0.INF.subtract(complex2);
      Complex complex4 = complex0.I.pow(160.90279);
      assertEquals(0.988364430844968, complex4.getImaginary(), 0.01);
      assertEquals(0.15210441098305674, complex4.getReal(), 0.01);
      
      Complex.valueOf(7.38049210144);
      complex0.getArgument();
      Complex complex5 = complex0.exp();
      complex1.negate();
      complex0.subtract(complex5);
      Complex complex6 = complex0.sinh();
      Complex complex7 = complex5.tan();
      Complex complex8 = complex7.sin();
      Complex complex9 = complex8.acos();
      double double0 = complex9.ONE.abs();
      assertEquals(1.0, double0, 0.01);
      
      Complex complex10 = complex2.reciprocal();
      Complex complex11 = complex10.ONE.sin();
      assertFalse(complex11.isInfinite());
      assertSame(complex10, complex3);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      
      Complex complex12 = complex1.sqrt1z();
      assertSame(complex12, complex9);
      
      Complex complex13 = complex0.negate();
      assertSame(complex13, complex6);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex((-1122.0));
      complex1.INF.sin();
      Complex complex2 = complex0.I.add(complex1);
      Complex complex3 = complex0.INF.pow(1693.0);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex5.I.divide(complex1);
      assertEquals((-8.9126559714795E-4), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex5.NaN.createComplex(1693.0, (-20.0));
      Complex complex8 = complex7.I.asin();
      assertEquals(0.8813735870195428, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex3.exp();
      List<Complex> list0 = complex2.nthRoot(1);
      assertEquals(1, list0.size());
      
      complex4.negate();
      Complex.valueOf((-1122.0));
      Complex complex10 = complex7.pow(complex4);
      assertNotSame(complex10, complex3);
      assertSame(complex4, complex9);
  }
}
