/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 16:51:56 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(20.0, 20.0);
      Complex complex2 = complex1.tan();
      complex2.NaN.negate();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex((-3153.524773652259), Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(25.38461806987044, Double.POSITIVE_INFINITY);
      complex0.multiply(742);
      complex0.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(25.38461806987044, Double.POSITIVE_INFINITY);
      complex0.NaN.cosh();
      Complex complex1 = complex0.tan();
      complex1.NaN.multiply(Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(25.38461806987044, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.tan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.createComplex((-628.5), (-628.5));
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.ZERO.createComplex((-628.5), (-628.5));
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.multiply(175);
      Complex complex6 = complex5.ZERO.cos();
      Complex complex7 = Complex.valueOf(1024.0, 0.9999989961300815);
      Complex complex8 = complex7.INF.divide(Double.POSITIVE_INFINITY);
      complex8.I.sin();
      complex4.I.multiply(0.6719275712966919);
      complex6.I.reciprocal();
      Complex complex9 = complex0.sin();
      Complex complex10 = complex9.acos();
      Complex complex11 = complex9.sin();
      complex11.I.add(complex0);
      complex4.cosh();
      Complex complex12 = complex10.divide(complex5);
      complex5.INF.sqrt();
      complex12.pow(complex6);
      complex12.conjugate();
      Complex complex13 = complex2.add(complex3);
      complex13.I.cos();
      complex10.createComplex((-628.5), 0.9999989961300815);
      complex13.atan();
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide((double) (-563));
      complex1.toString();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.divide(Double.POSITIVE_INFINITY);
      complex0.sinh();
      complex3.acos();
      Complex complex4 = Complex.INF;
      complex4.readResolve();
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1094, Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.ONE.divide(647.864604715);
      complex1.NaN.sin();
      Complex complex3 = complex2.NaN.log();
      complex3.readResolve();
      Complex complex4 = complex3.ONE.divide((-4642.4));
      complex1.I.toString();
      Complex complex5 = complex2.conjugate();
      Complex complex6 = Complex.valueOf((-362.0320577811), (-1482.086));
      Complex complex7 = complex6.ZERO.tan();
      Complex complex8 = complex6.atan();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex5.sin();
      complex10.NaN.hashCode();
      complex9.INF.nthRoot(17);
      Complex complex11 = complex0.INF.subtract(1.0);
      complex11.NaN.tanh();
      Complex complex12 = complex8.reciprocal();
      complex12.I.divide(1.0);
      complex6.multiply(1997);
      complex0.nthRoot(1997);
      complex7.tanh();
      complex0.multiply(complex9);
      complex2.divide(647.864604715);
      Complex complex13 = complex10.sqrt1z();
      complex13.NaN.negate();
      complex1.sqrt();
      complex1.readResolve();
      complex4.readResolve();
      complex10.cosh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.multiply(17);
      complex1.getArgument();
      complex2.tan();
      Complex complex3 = new Complex(17, (-2714.9983270646));
      complex3.sqrt1z();
      complex3.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex.valueOf((-20.0));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.tanh();
      Complex complex3 = new Complex((-20.0));
      complex3.multiply(complex2);
      complex2.atan();
      Complex.valueOf((-20.0));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      Complex complex2 = complex0.cosh();
      complex2.NaN.nthRoot(1742);
      Complex complex3 = complex1.conjugate();
      Complex complex4 = complex0.pow(20.0);
      complex4.ZERO.nthRoot(1742);
      complex4.NaN.sin();
      Complex complex5 = complex1.subtract(20.0);
      complex5.ZERO.toString();
      Complex complex6 = complex5.ONE.acos();
      complex6.ONE.subtract(complex1);
      complex6.ONE.multiply(complex0);
      complex6.ZERO.readResolve();
      complex5.ONE.sqrt();
      complex3.sqrt();
      Complex complex7 = complex1.tan();
      complex1.pow(20.0);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-2492.1));
      Complex complex2 = complex1.cos();
      Complex complex3 = new Complex(1.3041809768060802E52);
      Complex complex4 = Complex.valueOf(1.0000000000000009, (-2685.8));
      Complex complex5 = complex2.createComplex((-2492.1), (-2685.8));
      complex3.acos();
      complex5.nthRoot(646);
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.divide(0.39893341064453125);
      complex4.cos();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.ZERO;
      complex7.log();
      complex3.getArgument();
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2247.0861, 2247.0861);
      double double0 = 590.1087251573;
      Complex.valueOf(590.1087251573);
      complex0.multiply(17);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.exp();
      complex1.ONE.hashCode();
      Complex complex3 = complex2.exp();
      complex3.abs();
      Complex complex4 = complex2.createComplex((-1286.783445261), 9.619685356326533E-10);
      Complex complex5 = complex1.pow(9.619685356326533E-10);
      Complex complex6 = complex5.ONE.acos();
      complex2.nthRoot(4446);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.ZERO.tan();
      complex8.INF.createComplex(3412.0, (-20.0));
      complex4.sin();
      Complex complex9 = complex2.createComplex(1487.6655911369216, (-1863.3969743153366));
      Complex complex10 = complex4.cos();
      complex10.I.add((-1286.783445261));
      Complex complex11 = Complex.INF;
      Complex complex12 = complex8.pow(complex11);
      Complex complex13 = complex12.multiply(1514.0003302510627);
      complex13.INF.sqrt1z();
      complex9.multiply(complex5);
      complex12.conjugate();
      complex9.subtract(9.619685356326533E-10);
      Complex complex14 = complex7.multiply(Double.NaN);
      complex14.ZERO.multiply(477.79979835);
      complex14.INF.reciprocal();
      complex4.abs();
      complex3.sqrt();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.asin();
      Complex complex2 = new Complex(3568.44, 3568.44);
      complex1.getArgument();
      complex0.tan();
      Complex complex3 = new Complex(3568.44, 3568.44);
      Complex complex4 = complex2.sqrt1z();
      Complex.valueOf(1.1554977893829346, 3568.44);
      complex0.tanh();
      Complex complex5 = Complex.valueOf((-2714.9983270646), -0.0);
      Complex complex6 = complex4.add(complex5);
      complex4.pow(complex3);
      Complex complex7 = new Complex(-0.0);
      complex6.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.exp();
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.NaN.createComplex(Double.POSITIVE_INFINITY, 731.751732683);
      complex0.I.readResolve();
      Complex complex4 = complex0.exp();
      complex4.log();
      Complex complex5 = complex3.tan();
      Complex complex6 = complex4.atan();
      complex6.ONE.nthRoot(1124);
      Complex complex7 = complex0.multiply(731.751732683);
      complex2.readResolve();
      complex6.ONE.sqrt1z();
      Complex complex8 = complex6.I.asin();
      complex8.INF.pow((double) 1124);
      complex2.pow(0.6466736793518066);
      complex6.pow(92309.94312019639);
      complex3.multiply(0.6466736793518066);
      complex7.exp();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.ZERO.pow(complex1);
      Complex complex11 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex11.subtract((-552.9));
      complex5.conjugate();
      Complex.valueOf((-552.9), (double) 1124);
      complex10.add((-1.54284341794019E14));
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.pow((-2492.1));
      complex1.I.cos();
      Complex complex2 = new Complex(2.3547754287719727);
      Complex complex3 = complex1.createComplex((-2492.1), (-2492.1));
      complex0.add((-3655.8678426818));
      Complex complex4 = complex0.acos();
      complex2.nthRoot(657);
      Complex.valueOf((double) 657);
      Complex complex5 = complex1.divide(4.392983574030969E-147);
      complex4.cos();
      complex3.acos();
      Complex complex6 = Complex.ONE;
      complex3.log();
      Complex complex7 = new Complex(Double.NaN, Double.NaN);
      complex6.getArgument();
      complex5.tan();
      complex4.pow(3.6248270547145136E-8);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.add(complex1);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.sinh();
      complex2.atan();
      Complex complex4 = Complex.INF;
      complex3.log();
      Complex complex5 = new Complex(20.0, 1.1386950016021729);
      complex2.getArgument();
      complex1.tan();
      complex1.sqrt1z();
      Complex.valueOf(3556.20752704541, (double) 17);
      Complex complex6 = complex5.tanh();
      Complex complex7 = Complex.ZERO;
      complex7.add(complex4);
      Complex complex8 = new Complex(3040.79, 20.0);
      complex8.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2674.48866042642, 2674.48866042642);
      complex0.getField();
      complex0.getField();
      Complex complex2 = new Complex(2674.48866042642);
      complex2.log();
      Complex complex3 = complex1.subtract(2674.48866042642);
      complex1.add(complex3);
      Complex complex4 = complex3.sinh();
      complex3.sinh();
      complex3.atan();
      Complex complex5 = Complex.INF;
      complex5.log();
      Complex complex6 = Complex.I;
      complex6.divide(1.234835147857666);
      complex1.cos();
      Complex complex7 = Complex.I;
      complex7.acos();
      Complex complex8 = Complex.ZERO;
      complex4.log();
      Complex complex9 = new Complex(127.15194, Double.POSITIVE_INFINITY);
      Complex complex10 = Complex.NaN;
      complex10.getArgument();
      complex3.tan();
      Complex complex11 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex11.pow(2.1863350868225098);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.pow((-2492.1));
      complex0.I.cos();
      Complex complex1 = new Complex(2.3547754287719727);
      Complex complex2 = complex0.createComplex((-2492.1), (-2492.1));
      Complex complex3 = Complex.ZERO;
      complex3.log();
      Complex complex4 = new Complex((-2492.1), 6.63595840453991E235);
      complex2.getArgument();
      complex0.tan();
      complex4.sqrt1z();
      complex3.pow((-2492.1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.ZERO.pow((-107.595));
      Complex.valueOf((-107.595));
      Complex complex3 = complex0.ZERO.sin();
      Complex complex4 = Complex.valueOf((-107.595));
      complex3.I.exp();
      Complex complex5 = complex0.multiply((-845));
      complex5.ZERO.abs();
      complex5.INF.abs();
      complex4.NaN.subtract(complex2);
      Complex complex6 = complex4.divide(Double.NaN);
      complex6.log();
      Complex complex7 = complex0.tanh();
      complex4.sinh();
      Complex complex8 = complex7.reciprocal();
      Complex complex9 = complex3.ONE.asin();
      complex9.I.multiply((-107.595));
      Complex complex10 = complex1.subtract(0.01742541790008545);
      Complex complex11 = complex3.pow(complex2);
      Complex complex12 = complex8.sqrt1z();
      complex12.ONE.getField();
      complex11.sqrt1z();
      complex7.divide(complex0);
      complex10.multiply(7);
      Complex.valueOf(0.01742541790008545, 1590.164);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(2674.48866042642, 2674.48866042642);
      complex0.getField();
      complex0.getField();
      Complex complex2 = new Complex(2674.48866042642);
      Complex complex3 = complex2.log();
      Complex complex4 = complex1.subtract(2674.48866042642);
      complex1.add(complex4);
      complex4.sinh();
      complex4.sinh();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.INF;
      complex6.log();
      Complex complex7 = new Complex(1.0, (-1.8124135273572568E-8));
      complex1.getArgument();
      complex1.tan();
      complex6.sqrt1z();
      Complex.valueOf(5967.3755004848, 1331.45872);
      complex3.tanh();
      complex5.add(1331.45872);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      complex0.pow((-2492.1));
      Complex complex2 = complex1.I.cos();
      Complex complex3 = new Complex(2.3547754287719727);
      Complex complex4 = complex1.createComplex((-2492.1), (-2492.1));
      complex2.asin();
      complex4.multiply(1218);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3751.0, 3751.0);
      Complex complex1 = complex0.subtract(20.0);
      Complex complex2 = complex1.negate();
      complex2.asin();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.divide(20.0);
      complex4.tanh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3751.0, 3751.0);
      Complex complex1 = Complex.ZERO;
      complex1.log();
      Complex complex2 = new Complex(2279.3528, (-20.0));
      complex2.tan();
      complex0.sqrt1z();
      Complex complex3 = Complex.valueOf(2279.3528, (-20.0));
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3751.0, 3751.0);
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow((-3739.155479356391));
      Complex complex3 = complex0.cos();
      Complex complex4 = new Complex((-3739.155479356391));
      Complex complex5 = complex3.createComplex(3751.0, 2.3547754287719727);
      complex3.add(6.283185307179586);
      Complex complex6 = complex0.acos();
      complex6.nthRoot(657);
      complex4.sqrt1z();
      Complex complex7 = complex1.divide(0.0);
      complex5.cos();
      complex4.acos();
      Complex complex8 = Complex.ZERO;
      complex2.log();
      Complex complex9 = new Complex(0.0, (-673.8331));
      Complex complex10 = new Complex(306.43);
      complex10.getArgument();
      Complex complex11 = complex7.tan();
      complex11.sqrt1z();
      Complex.valueOf((-1385.78117), (double) 657);
      complex11.tanh();
      complex5.add(2.3547754287719727);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.add(3751.0);
      Complex complex2 = complex0.acos();
      complex2.nthRoot(657);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.sqrt1z();
      complex1.divide(3751.0);
      Complex complex5 = complex4.cos();
      complex5.INF.toString();
      complex4.acos();
      Complex complex6 = Complex.ZERO;
      complex1.log();
      Complex complex7 = new Complex((-1477.6762842495045), (-1537.5));
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex8.getArgument();
      complex1.tan();
      complex2.sqrt1z();
      Complex complex9 = Complex.valueOf(794.32645169, 794.32645169);
      complex0.tanh();
      complex7.add(1288.07);
      complex9.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-556.8406338857937), 0.0);
      complex0.getField();
      complex0.getField();
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex1.log();
      complex2.subtract(4.8459153070935316E-77);
      Complex complex3 = complex0.add(complex2);
      Complex complex4 = complex1.sinh();
      complex2.sinh();
      complex0.ZERO.tan();
      complex4.atan();
      Complex complex5 = Complex.INF;
      complex5.log();
      complex3.multiply((-1835));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.add(940.83202984);
      complex0.NaN.nthRoot(1);
      complex0.toString();
      Complex complex1 = complex0.exp();
      complex1.exp();
      complex1.sqrt1z();
      Complex complex2 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sin();
      complex3.tanh();
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(1.3020631859056421E91, 1.3020631859056421E91);
      complex0.getArgument();
      Complex complex1 = complex0.asin();
      Complex.valueOf(1.3020631859056421E91);
      Complex complex2 = Complex.valueOf(1.3020631859056421E91, 1.3020631859056421E91);
      complex2.reciprocal();
      complex1.divide(complex2);
      complex2.multiply((-3633.6));
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      int int0 = 693;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ONE.divide(0.0);
      Complex complex2 = complex0.I.sin();
      complex2.I.getArgument();
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.pow(701.79112070903);
      Complex complex4 = complex3.cos();
      Complex complex5 = new Complex((-3517.3753));
      Complex complex6 = complex5.createComplex((-3517.3753), (-3517.3753));
      Complex complex7 = complex3.add((-4910368.76929568));
      complex7.acos();
      Complex complex8 = complex6.divide((-2085.58045806));
      Complex complex9 = complex4.cos();
      complex7.atan();
      Complex complex10 = complex7.acos();
      Complex complex11 = Complex.ZERO;
      complex1.multiply(complex8);
      complex1.getField();
      complex10.sinh();
      Complex complex12 = new Complex(2618, 2952.782064931);
      complex12.tanh();
      complex7.add(complex9);
      complex2.getImaginary();
      Complex complex13 = Complex.ONE;
      complex3.subtract(complex11);
      Complex complex14 = Complex.NaN;
      complex7.sqrt1z();
      try { 
        complex3.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(17);
      Complex complex1 = Complex.valueOf(754.1335456, 754.1335456);
      Complex complex2 = complex0.tanh();
      complex2.INF.multiply(complex1);
      complex2.nthRoot(37);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-1922.37432733541), (-1780.353));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.multiply(complex1);
      complex3.ZERO.reciprocal();
      complex3.ZERO.atan();
      Complex complex4 = complex0.cosh();
      complex4.nthRoot(13);
      Complex complex5 = complex2.tan();
      complex1.sqrt();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.getField();
      Complex complex1 = complex0.add(6.283185307179586);
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex1.I.reciprocal();
      Complex complex4 = complex1.reciprocal();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex.valueOf(1.0117876529693604, 0.2990913391113281);
      complex3.cos();
      Complex.valueOf(4094.470926111, 0.0);
      complex2.subtract(complex1);
      complex3.divide(6.1694117899971836E-201);
      complex5.subtract(1.0117876529693604);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(6.283185307179586, (-5.763495903609913E-231));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex2.atan();
      complex0.createComplex(1.6960809230804443, 2.18713790898745E-148);
      Complex complex4 = complex2.log();
      Complex complex5 = Complex.I;
      complex3.I.sqrt();
      Complex complex6 = Complex.I;
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = complex0.sinh();
      Complex complex9 = complex3.atan();
      Complex complex10 = Complex.INF;
      complex7.getArgument();
      Complex complex11 = complex9.tan();
      complex1.sqrt1z();
      Complex complex12 = complex3.add(0.7853981633974483);
      complex5.asin();
      Complex complex13 = complex12.subtract(401.4738567);
      complex4.negate();
      complex3.asin();
      Complex complex14 = complex11.divide(complex3);
      Complex complex15 = Complex.ZERO;
      Complex complex16 = new Complex((-1316.0), 20.0);
      Complex complex17 = complex16.divide((-20.0));
      complex17.ONE.getField();
      complex13.getReal();
      complex14.getField();
      complex8.acos();
      complex13.sin();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.pow((-2492.1));
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex3.ZERO.createComplex((-2492.1), (-860.5));
      complex2.I.add(2.3547754287719727);
      Complex complex5 = complex2.ZERO.acos();
      complex2.INF.nthRoot(37);
      Complex complex6 = complex0.sqrt1z();
      complex5.conjugate();
      Complex complex7 = complex0.cos();
      complex7.pow(complex3);
      complex4.subtract((double) 37);
      Complex complex8 = complex6.add(complex2);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex0.INF.createComplex(401.4738567, 401.4738567);
      Complex complex5 = complex1.log();
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.add(complex4);
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.atan();
      Complex complex10 = complex4.log();
      complex10.getArgument();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex9.atan();
      Complex complex13 = complex5.acos();
      Complex complex14 = complex11.subtract(complex4);
      complex2.multiply(complex0);
      complex2.getField();
      Complex complex15 = complex9.sinh();
      complex15.reciprocal();
      complex3.tanh();
      complex13.add(complex12);
      complex7.getImaginary();
      complex6.subtract(complex14);
      complex8.sqrt1z();
      complex8.subtract(complex1);
      complex14.isNaN();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.pow((-2492.1));
      Complex complex3 = complex1.I.cos();
      Complex complex4 = new Complex(2.3547754287719727);
      Complex complex5 = complex1.createComplex((-2492.1), (-2492.1));
      Complex complex6 = complex5.add((-1499.1));
      Complex complex7 = complex5.acos();
      complex2.nthRoot(657);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex3.divide((double) 657);
      complex8.NaN.cos();
      complex3.atan();
      Complex complex10 = complex2.acos();
      Complex complex11 = Complex.ZERO;
      Complex complex12 = complex5.multiply(complex9);
      complex1.getField();
      complex8.sinh();
      complex11.tanh();
      complex10.add(complex7);
      complex3.getImaginary();
      Complex complex13 = Complex.ONE;
      complex12.subtract(complex10);
      Complex complex14 = Complex.NaN;
      complex14.sqrt1z();
      complex6.subtract(complex14);
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-556.445393347), 0.0);
      complex0.getField();
      Complex complex1 = complex0.createComplex((-556.445393347), (-1.237192800105009E7));
      Complex complex2 = Complex.I;
      complex2.sinh();
      Complex complex3 = complex0.atan();
      complex2.cos();
      Complex complex4 = Complex.NaN;
      complex0.getArgument();
      Complex complex5 = complex1.tan();
      Complex complex6 = complex3.sqrt1z();
      Complex complex7 = Complex.valueOf(3.141592653589793);
      complex2.asin();
      Complex complex8 = complex4.subtract(3.141592653589793);
      complex8.INF.pow(complex7);
      Complex complex9 = Complex.ZERO;
      complex9.negate();
      complex4.asin();
      complex9.divide(complex7);
      complex1.sqrt1z();
      complex5.divide((-78.66));
      complex5.getReal();
      complex6.getField();
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-556.445393347), 0.0);
      complex0.getField();
      complex0.getField();
      Complex complex1 = new Complex((-1.0));
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.subtract(4.8459153070935316E-77);
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex1.sinh();
      complex2.sinh();
      complex5.atan();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.log();
      Complex complex8 = new Complex((-774.67140885848), 1.0);
      complex8.getArgument();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex0.sqrt1z();
      complex8.add((-745.0));
      complex10.subtract((-2601.26155));
      Complex complex11 = complex7.negate();
      complex4.asin();
      Complex complex12 = Complex.NaN;
      complex6.divide(complex12);
      complex11.sqrt1z();
      complex9.divide(0.0);
      complex6.getReal();
      complex7.getField();
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.pow((-2492.1));
      Complex complex3 = complex1.I.cos();
      complex3.ZERO.createComplex((-2492.1), (-860.5));
      Complex complex4 = complex2.I.add(2.3547754287719727);
      Complex complex5 = complex2.ZERO.acos();
      complex2.INF.nthRoot(37);
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex6.ZERO.divide((-2492.1));
      complex4.ZERO.atan();
      Complex complex8 = complex1.ZERO.acos();
      complex8.ONE.subtract(complex0);
      complex1.multiply(complex0);
      complex5.conjugate();
      complex7.toString();
      Complex complex9 = complex8.asin();
      Complex complex10 = complex8.cos();
      Complex complex11 = complex3.tan();
      Complex complex12 = complex10.log();
      complex11.getArgument();
      Complex complex13 = complex10.asin();
      complex13.reciprocal();
      complex11.divide(complex9);
      complex12.conjugate();
      complex8.multiply(0.2658022288340798);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.atan();
      complex2.atan();
      complex0.I.getField();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.ONE.multiply(0.0);
      Complex complex6 = complex5.ONE.subtract(complex4);
      complex5.NaN.hashCode();
      Complex complex7 = complex4.NaN.divide(0.0);
      complex4.NaN.abs();
      complex1.equals(complex0);
      complex0.getArgument();
      complex4.ZERO.conjugate();
      Complex complex8 = complex4.subtract((-1301.52));
      complex6.ONE.abs();
      complex1.createComplex(0.0, Double.NaN);
      complex7.asin();
      complex0.getField();
      Complex complex9 = Complex.valueOf(0.0);
      complex9.sinh();
      Complex complex10 = new Complex(463.284962698);
      Complex complex11 = complex10.tanh();
      Complex complex12 = new Complex(0.0);
      complex12.add(complex11);
      complex3.getImaginary();
      Complex complex13 = Complex.valueOf(2.0, (-1301.52));
      complex13.subtract(complex5);
      complex10.sqrt1z();
      Complex complex14 = Complex.I;
      complex5.subtract(complex14);
      complex8.isNaN();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1566.9028, 1566.9028);
      complex0.I.nthRoot(1347);
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.ONE.toString();
      Complex complex2 = complex1.multiply(complex0);
      complex2.NaN.reciprocal();
      Complex complex3 = complex2.pow(1566.9028);
      complex3.ZERO.pow(1763.380811363671);
      Complex complex4 = complex2.ONE.reciprocal();
      complex0.toString();
      complex0.abs();
      Complex complex5 = complex0.multiply(1347);
      complex0.tan();
      Complex complex6 = new Complex(1347, 2215.9351906803777);
      complex6.sqrt1z();
      complex5.toString();
      complex1.sinh();
      complex4.divide(1196.974185442);
      complex3.divide(0.06042102827074667);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.getField();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.atan();
      complex1.getField();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.multiply(0.0);
      Complex complex5 = complex0.subtract(complex2);
      complex4.hashCode();
      Complex complex6 = complex1.divide((-2355.7413563663295));
      complex0.abs();
      complex5.equals(complex3);
      complex1.getArgument();
      complex1.conjugate();
      Complex complex7 = complex4.subtract(1.0);
      complex6.abs();
      complex6.createComplex((-1301.52), (-2355.7413563663295));
      Complex complex8 = complex4.asin();
      complex8.conjugate();
      complex6.toString();
      complex8.asin();
      Complex complex9 = complex3.cos();
      Complex complex10 = complex7.tan();
      complex0.log();
      complex5.getArgument();
      complex9.asin();
      Complex.valueOf(5.082190670014963E-262);
      Complex complex11 = complex5.reciprocal();
      complex11.divide(complex10);
      complex7.multiply(2988.4431);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex1.I.atan();
      Complex complex4 = complex0.INF.createComplex(401.4738567, 401.4738567);
      complex1.log();
      Complex complex5 = Complex.I;
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex7.atan();
      Complex complex9 = complex4.log();
      complex9.getArgument();
      complex8.tan();
      complex0.sqrt1z();
      Complex complex10 = complex5.add(564.4564205181);
      complex10.asin();
      Complex complex11 = complex5.subtract(20.0);
      Complex complex12 = complex6.negate();
      Complex complex13 = complex4.asin();
      complex11.divide(complex12);
      complex12.sqrt1z();
      complex13.divide(20.0);
      complex8.getReal();
      complex7.getField();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex((-1.8359244902596882E-7), (-1.8359244902596882E-7));
      Complex complex1 = complex0.ONE.sin();
      Complex complex2 = complex0.I.conjugate();
      complex2.INF.hashCode();
      Complex complex3 = complex1.ZERO.multiply((-1.8359244902596882E-7));
      Complex complex4 = complex0.I.divide(2347.5569122468532);
      complex2.nthRoot(2674);
      complex1.atan();
      complex4.subtract((double) 2674);
      Complex complex5 = complex0.reciprocal();
      complex3.nthRoot(406);
      Complex complex6 = complex5.acos();
      complex2.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(0.0, Double.NaN);
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.add((-20.0));
      complex3.getImaginary();
      Complex complex4 = Complex.INF;
      complex4.divide((-20.0));
      complex2.atan();
      Complex complex5 = Complex.valueOf((-20.0), Double.NaN);
      Complex complex6 = complex5.tan();
      Complex complex7 = complex0.sqrt();
      Complex complex8 = complex1.divide(1829.2);
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY, 2813.747066654948);
      Complex complex10 = complex9.tan();
      complex2.nthRoot(165);
      complex2.sin();
      complex7.hashCode();
      complex10.add(complex8);
      complex6.negate();
      complex9.sin();
      complex1.getArgument();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1737.11913348773), (-1737.11913348773));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.I.log();
      Complex complex4 = complex1.NaN.sqrt1z();
      complex1.ONE.pow(complex3);
      Complex complex5 = complex0.pow(complex1);
      Complex.valueOf((-1737.11913348773), (-1737.11913348773));
      complex5.I.abs();
      complex5.exp();
      Complex complex6 = new Complex(4.307749759934266E-8, 1566.9029595504282);
      complex4.sqrt();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1566.9028, 1566.9028);
      complex0.I.nthRoot(1347);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.pow(complex1);
      complex1.pow(complex0);
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.valueOf((-3286.018008), (-447.99646));
      complex2.abs();
      complex4.exp();
      complex1.multiply(complex4);
      complex2.add(1908.3607138923433);
      complex2.getImaginary();
      Complex complex5 = complex0.divide((-447.99646));
      Complex complex6 = complex5.atan();
      Complex complex7 = Complex.INF;
      complex7.tan();
      complex6.sqrt();
      Complex complex8 = Complex.ONE;
      complex8.divide(1817.436767155);
      complex3.tan();
      try { 
        complex4.nthRoot((-969));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -969
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = new Complex((-1737.11913348773), (-1737.11913348773));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex4.sqrt();
      complex1.toString();
      Complex complex6 = complex3.multiply(complex2);
      Complex complex7 = complex3.reciprocal();
      complex2.pow(1.0);
      Complex complex8 = complex3.reciprocal();
      complex3.toString();
      complex7.abs();
      complex4.abs();
      Complex complex9 = complex8.sinh();
      complex3.multiply((-1737.11913348773));
      Complex complex10 = complex5.exp();
      complex6.multiply((-1.0));
      complex10.add((-1.0));
      Object object0 = new Object();
      complex9.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.multiply(complex2);
      complex1.reciprocal();
      Complex complex5 = complex0.pow(1.000000183592449);
      Complex complex6 = complex5.reciprocal();
      complex0.toString();
      complex6.abs();
      complex2.abs();
      Complex complex7 = complex4.sinh();
      complex3.multiply((-2513.728828374));
      complex1.exp();
      Complex complex8 = complex7.multiply(1.0);
      complex6.add(1.000000183592449);
      Object object0 = new Object();
      complex8.equals("(0.0, 1.0)");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1566.9028, 1566.9028);
      complex0.I.nthRoot(1347);
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.ONE.toString();
      Complex complex2 = complex0.exp();
      complex1.tanh();
      complex1.getArgument();
      Complex complex3 = complex2.createComplex(0.0, 0.8414709848078965);
      Complex complex4 = complex1.negate();
      Complex complex5 = Complex.I;
      complex5.divide(1566.9028);
      Object object0 = complex3.readResolve();
      complex1.equals(object0);
      complex5.abs();
      Complex complex6 = Complex.valueOf(1.3240710866573994E38, 1566.9028);
      Complex complex7 = complex6.divide(1.8258671919710925E-4);
      Complex complex8 = Complex.INF;
      complex7.INF.divide(complex8);
      Complex.valueOf(1.8258671919710925E-4);
      Complex complex9 = Complex.NaN;
      complex9.cos();
      Complex complex10 = complex0.subtract(complex1);
      Complex.valueOf(0.8414709848078965, 2.2433348713144506E-8);
      complex10.I.pow(complex9);
      complex4.multiply(1347);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(5476.8496);
      Complex complex2 = complex0.I.divide(complex1);
      complex0.asin();
      complex1.I.multiply(complex2);
      Complex complex3 = complex0.cos();
      complex1.tan();
      complex0.log();
      complex3.getArgument();
      Complex complex4 = new Complex(0.0);
      Complex complex5 = complex4.asin();
      complex2.reciprocal();
      complex4.divide(complex5);
      complex2.conjugate();
      complex5.multiply(5476.8496);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex((-1.8359244902596882E-7), (-1.8359244902596882E-7));
      Complex complex1 = complex0.ONE.sin();
      complex0.I.conjugate();
      Complex complex2 = complex1.divide((-145.78));
      complex0.sin();
      complex0.getArgument();
      complex1.nthRoot(782);
      complex0.atan();
      complex2.subtract((-1695.4384060183284));
      complex0.reciprocal();
      try { 
        complex2.nthRoot((-933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -933
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1737.11913348773), (-1737.11913348773));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex2.NaN.sqrt1z();
      complex2.ONE.pow(complex4);
      Complex complex6 = complex0.pow(complex2);
      complex6.INF.divide(complex3);
      Complex.valueOf((-1737.11913348773), (-1737.11913348773));
      complex6.I.abs();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.INF.multiply(complex5);
      complex6.I.add((-1737.11913348773));
      complex0.getImaginary();
      Complex complex9 = complex2.divide(1.4470673509275515E-259);
      complex3.atan();
      Complex complex10 = complex9.ZERO.tan();
      complex0.I.sqrt();
      complex0.divide(1829.2);
      Complex complex11 = complex1.tan();
      complex9.NaN.nthRoot(165);
      complex11.sin();
      complex0.hashCode();
      complex9.add(complex3);
      complex11.add(8.64677387911381);
      Object object0 = new Object();
      Object object1 = complex8.readResolve();
      complex3.equals(object1);
      complex3.add(complex10);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.pow((-2492.1));
      Complex complex3 = complex1.I.cos();
      complex3.ZERO.createComplex((-2492.1), (-860.5));
      Complex complex4 = complex2.I.add(2.3547754287719727);
      complex2.ZERO.acos();
      complex0.getArgument();
      complex1.nthRoot(3651);
      complex1.atan();
      Complex complex5 = complex4.subtract((double) 37);
      complex5.I.negate();
      Complex complex6 = Complex.valueOf((double) 3651, (double) 3651);
      complex6.reciprocal();
      // Undeclared exception!
      complex0.nthRoot(3683);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(2259.86334, 2059.4744202926);
      complex0.pow(complex2);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.valueOf(0.0, (-516.803516));
      complex4.I.getArgument();
      complex3.add((-1.0));
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.tanh();
      complex1.INF.getArgument();
      complex0.INF.hashCode();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = Complex.valueOf(20.0);
      complex2.ZERO.acos();
      List<Complex> list0 = complex0.nthRoot(3685);
      complex0.equals(list0);
      complex0.abs();
      Complex complex4 = complex1.multiply(complex0);
      complex2.subtract(978.2133056802926);
      Complex complex5 = Complex.valueOf(3042.42737170927);
      Complex complex6 = complex5.NaN.createComplex(0.7853981633974483, 978.2133056802926);
      complex6.I.conjugate();
      Complex complex7 = complex5.NaN.multiply(complex2);
      complex7.ONE.reciprocal();
      Complex complex8 = complex1.add(978.2133056802926);
      complex8.NaN.pow(3042.42737170927);
      Complex complex9 = complex3.subtract((-1.0808162722402073E-8));
      complex4.isNaN();
      complex9.reciprocal();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.subtract(0.0);
      complex1.ZERO.asin();
      Complex complex2 = complex0.log();
      Complex complex3 = complex2.tan();
      complex2.nthRoot(243);
      Complex complex4 = complex2.multiply(4530.71589772);
      Complex complex5 = complex0.createComplex(1757.57609, 243);
      Complex complex6 = complex5.ONE.add(complex4);
      complex6.NaN.tanh();
      Complex complex7 = complex5.INF.reciprocal();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.I.sin();
      complex4.I.readResolve();
      complex8.sin();
      Complex complex10 = complex8.cos();
      Complex complex11 = Complex.NaN;
      complex11.ONE.subtract(1757.57609);
      Complex complex12 = complex5.ONE.pow(1757.57609);
      complex0.add(complex11);
      complex5.getReal();
      complex4.cos();
      complex0.abs();
      Complex complex13 = complex7.subtract(complex5);
      complex5.ONE.asin();
      Complex complex14 = new Complex(0.0, 1.0);
      complex3.divide(complex14);
      complex12.sqrt1z();
      Complex complex15 = complex10.divide(complex9);
      complex15.INF.sqrt1z();
      complex13.multiply(complex10);
      complex13.cos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(1001.3642007561722);
      complex0.toString();
      Complex complex1 = Complex.valueOf(0.18654438853263855, (-2041.23600301));
      Complex complex2 = complex1.ZERO.exp();
      complex1.INF.hashCode();
      Complex complex3 = complex0.multiply(17);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex2.INF.divide(complex4);
      complex0.nthRoot(1);
      Complex complex6 = complex3.multiply(complex2);
      complex4.subtract((-2041.23600301));
      Complex complex7 = complex4.INF.multiply(0.18654438853263855);
      complex7.INF.createComplex(0.0, 17);
      Complex complex8 = complex0.multiply(17);
      Complex complex9 = complex8.I.add(1.0);
      Complex complex10 = complex5.subtract(complex3);
      complex9.I.nthRoot(17);
      complex9.cos();
      complex10.I.toString();
      Complex complex11 = complex10.multiply(3084.10450626699);
      complex11.toString();
      complex9.sin();
      complex6.subtract(complex9);
      complex3.cos();
      complex8.subtract(0.0);
      Complex complex12 = complex9.acos();
      complex1.getImaginary();
      complex12.getImaginary();
      complex1.subtract(complex6);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex0.NaN.cos();
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.divide(complex0);
      complex5.INF.exp();
      Complex complex6 = complex3.NaN.cosh();
      Complex complex7 = complex6.NaN.tan();
      Complex complex8 = complex1.I.acos();
      Complex complex9 = complex8.INF.divide((-4445.7383298875));
      Complex complex10 = complex1.I.atan();
      complex10.I.add((-3010.9510696211));
      complex2.INF.sinh();
      complex0.multiply(1);
      Complex.valueOf(0.0);
      complex2.equals(complex1);
      complex6.getImaginary();
      Complex complex11 = complex2.divide(0.0);
      Complex complex12 = complex11.I.sin();
      complex12.ONE.sqrt();
      complex9.cos();
      complex7.abs();
      complex10.asin();
      complex12.exp();
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.createComplex((-3.0635272288480756E25), (-3.0635272288480756E25));
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = complex0.add(0.0);
      complex4.getField();
      Complex complex5 = complex4.ONE.add((-1701.7386073687));
      complex4.nthRoot(667);
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.pow((-3.0635272288480756E25));
      complex2.INF.sqrt1z();
      complex7.I.nthRoot(667);
      complex1.ZERO.multiply(1);
      complex7.ZERO.negate();
      complex7.NaN.nthRoot(667);
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex4.cos();
      complex4.cos();
      complex8.divide(complex1);
      Complex complex10 = complex0.multiply(667);
      complex10.cos();
      complex1.toString();
      complex3.multiply(1.0972476870931676E-268);
      complex3.pow((-4610.276287814));
      complex4.getReal();
      Complex complex11 = complex9.multiply(complex5);
      complex11.negate();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1872.5165900981));
      Complex complex1 = complex0.ONE.sinh();
      complex0.INF.toString();
      Complex complex2 = complex1.ONE.conjugate();
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = complex2.ZERO.acos();
      complex4.NaN.cosh();
      Complex complex5 = complex4.INF.exp();
      Complex complex6 = complex0.ZERO.tanh();
      Complex complex7 = complex4.ONE.multiply(1061);
      complex4.NaN.getArgument();
      Complex complex8 = complex0.acos();
      complex8.add(0.0);
      Complex complex9 = complex2.cosh();
      complex9.nthRoot(1061);
      complex0.I.cosh();
      Complex complex10 = complex6.cos();
      complex6.INF.readResolve();
      Complex complex11 = complex1.exp();
      complex1.pow(6.283185307179586);
      complex7.multiply(complex1);
      complex5.tan();
      Complex complex12 = complex10.sqrt1z();
      complex12.ONE.divide(complex3);
      complex11.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1566.9028, 1566.9028);
      complex0.I.nthRoot(1347);
      Complex complex1 = complex0.ZERO.sqrt();
      complex1.ONE.toString();
      Complex complex2 = complex1.multiply(complex0);
      complex2.NaN.reciprocal();
      complex2.pow(1566.9028);
      Complex complex3 = complex2.ONE.reciprocal();
      complex0.toString();
      complex0.abs();
      complex0.abs();
      complex3.NaN.sinh();
      complex1.multiply(0.0);
      Complex complex4 = complex2.exp();
      complex4.ZERO.multiply(0.0);
      complex3.add((-1.0));
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.ZERO.add(complex0);
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = complex0.tanh();
      complex1.getArgument();
      Complex complex6 = complex5.createComplex(1.0, 0.0);
      Complex complex7 = complex5.negate();
      complex4.pow(0.0);
      Complex complex8 = complex7.divide(1.0);
      complex2.equals(complex8);
      complex6.abs();
      complex1.divide(1.0);
      Complex.valueOf(0.0);
      complex0.cos();
      complex5.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-1242.8256);
      Complex complex1 = complex0.createComplex(0.0, (-1242.8256));
      complex0.conjugate();
      Complex complex2 = complex0.INF.exp();
      Complex complex3 = complex2.I.exp();
      int int0 = (-1570);
      Complex complex4 = complex3.ZERO.multiply((-1570));
      Complex complex5 = complex1.ONE.conjugate();
      Complex complex6 = complex1.ZERO.divide(20.0);
      Complex complex7 = complex6.ONE.tan();
      double double1 = 0.0;
      Complex complex8 = complex7.ZERO.divide(0.0);
      complex7.INF.asin();
      Complex complex9 = complex6.add(complex1);
      complex0.isNaN();
      complex2.asin();
      complex4.I.getField();
      complex0.isInfinite();
      complex8.NaN.log();
      complex1.equals(complex4);
      Complex complex10 = complex9.exp();
      complex10.INF.atan();
      try { 
        complex5.nthRoot((-1570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,570
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex0.INF.pow(complex1);
      complex0.getReal();
      complex0.getField();
      complex1.INF.add(complex3);
      Complex complex4 = complex0.multiply((-2579));
      Complex complex5 = complex4.multiply(complex1);
      complex0.isInfinite();
      Complex complex6 = complex5.INF.subtract(complex2);
      Complex complex7 = complex6.subtract((-2257.0));
      Complex complex8 = complex5.multiply(0.0);
      complex8.ONE.sqrt1z();
      complex3.abs();
      complex6.INF.exp();
      Complex complex9 = complex6.divide(complex0);
      Complex complex10 = complex6.sinh();
      complex9.reciprocal();
      complex7.cos();
      complex3.readResolve();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex((-2845.54445303), (-43.5365));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.acos();
      complex2.ZERO.subtract((-43.5365));
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex3.ZERO.createComplex(955.50866, 955.50866);
      complex2.toString();
      Complex.valueOf((-1575.93844882466));
      complex1.ONE.subtract(complex2);
      Complex complex5 = Complex.valueOf(20.0, (-1.0));
      complex5.I.createComplex(0.0, 0.0);
      Complex complex6 = complex0.sqrt1z();
      complex1.abs();
      complex4.I.exp();
      complex6.add(complex1);
      complex2.abs();
      complex4.sqrt();
      complex0.getReal();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.NaN.negate();
      complex2.INF.multiply(628);
      Complex complex3 = complex2.ZERO.atan();
      Complex complex4 = complex2.ZERO.createComplex(0.0, 0.0);
      complex3.NaN.subtract((double) 628);
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex5.INF.subtract(4442.615);
      Complex complex7 = complex6.asin();
      complex7.ONE.divide(complex3);
      Complex complex8 = complex5.NaN.negate();
      complex8.I.readResolve();
      Complex complex9 = complex5.divide(1031.8700367318);
      complex9.INF.toString();
      Complex complex10 = complex9.add(Double.POSITIVE_INFINITY);
      Complex complex11 = complex10.ONE.exp();
      Complex complex12 = Complex.ZERO;
      complex11.INF.subtract(complex12);
      complex10.I.sin();
      complex0.getImaginary();
      Complex complex13 = complex0.NaN.sqrt1z();
      complex13.NaN.pow(complex2);
      complex0.isInfinite();
      complex3.cosh();
      complex0.sin();
      complex4.isNaN();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
      Complex complex1 = complex0.NaN.sin();
      complex0.NaN.subtract(complex1);
      Complex complex2 = complex1.I.asin();
      complex0.getReal();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.subtract((-575.8087474));
      complex2.abs();
      complex0.toString();
      complex2.subtract((-575.8087474));
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.exp();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.negate();
      complex2.ZERO.sqrt1z();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 0.0);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.NaN.subtract(complex0);
      complex2.ZERO.log();
      complex2.ONE.acos();
      Complex complex3 = complex0.divide(complex1);
      complex1.I.getArgument();
      complex0.createComplex(0.0, 0.2539151906967163);
      Complex complex4 = complex0.atan();
      complex3.multiply(0);
      Complex complex5 = complex0.I.multiply(0);
      Complex complex6 = complex3.pow(0.0);
      complex5.pow((-20.0));
      complex4.tanh();
      complex3.getReal();
      complex6.sqrt1z();
      complex1.add(1321.54712813143);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex1.INF.sinh();
      Complex complex4 = complex3.NaN.cos();
      Complex complex5 = Complex.valueOf(Double.NaN, (-3045.68719));
      complex0.cosh();
      complex2.toString();
      complex5.multiply(complex4);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-1737.11913348773), (-1737.11913348773));
      Complex complex1 = complex0.atan();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex2.NaN.sqrt1z();
      complex2.ONE.pow(complex4);
      Complex complex6 = complex0.pow(complex2);
      complex6.INF.divide(complex3);
      Complex complex7 = Complex.valueOf((-1737.11913348773), (-1737.11913348773));
      complex6.I.abs();
      Complex complex8 = complex6.exp();
      complex8.INF.multiply(complex5);
      complex6.I.add((-1737.11913348773));
      complex0.getImaginary();
      Complex complex9 = complex2.divide(1.4470673509275515E-259);
      complex3.atan();
      complex9.ZERO.tan();
      complex0.I.sqrt();
      Complex complex10 = complex0.divide(1829.2);
      Complex complex11 = complex1.tan();
      complex9.NaN.nthRoot(165);
      complex11.sin();
      complex0.hashCode();
      complex9.add(complex3);
      Complex complex12 = complex7.negate();
      complex12.I.sin();
      complex10.getArgument();
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-181.35), (-181.35));
      complex0.I.getArgument();
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.ONE.pow(1679.058731);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.add(complex3);
      complex0.INF.abs();
      complex1.createComplex((-181.35), 0.0);
      Complex complex5 = complex2.atan();
      complex5.ONE.sqrt1z();
      complex4.sqrt();
      try { 
        complex1.nthRoot((-349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -349
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4281.539);
      Complex complex1 = Complex.valueOf(4281.539);
      complex0.INF.subtract(complex1);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = new Complex(585.74735902);
      Complex complex1 = complex0.INF.subtract(585.74735902);
      complex0.ZERO.pow(0.0);
      Complex complex2 = complex1.ZERO.reciprocal();
      Complex complex3 = complex0.sin();
      complex2.NaN.hashCode();
      complex3.hashCode();
      Complex complex4 = complex3.I.pow(585.74735902);
      complex3.divide(585.74735902);
      complex3.asin();
      complex1.INF.cosh();
      complex2.cosh();
      complex4.pow(0.0);
      complex1.cosh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = new Complex(5476.8496);
      complex0.I.divide(complex1);
      complex0.getImaginary();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      double double0 = 1.080202341079712;
      Complex complex0 = Complex.valueOf(1.080202341079712, 1.080202341079712);
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.INF.getField();
      complex1.ZERO.abs();
      complex1.INF.readResolve();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.pow(1.080202341079712);
      Complex complex5 = complex4.ZERO.asin();
      complex3.INF.readResolve();
      Complex complex6 = complex0.acos();
      complex6.INF.toString();
      complex5.multiply(0.0);
      complex6.abs();
      complex5.sinh();
      complex0.INF.nthRoot(461);
      complex6.ONE.multiply(1);
      complex0.createComplex((-2367.0), 1.4400142028694904);
      complex0.hashCode();
      Complex.valueOf((double) 461, 1.080202341079712);
      complex5.sqrt();
      try { 
        complex3.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = Complex.valueOf((-1538.1600125889063), (-1538.1600125889063));
      complex1.I.abs();
      Complex complex2 = complex0.multiply(complex1);
      complex0.readResolve();
      complex1.I.readResolve();
      complex0.getArgument();
      complex1.multiply(complex2);
      complex1.abs();
      complex1.createComplex(445.635, 0.0);
      complex0.reciprocal();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.atan();
      complex3.I.readResolve();
      complex4.INF.readResolve();
      complex3.multiply(1.0);
      complex2.sin();
      complex1.multiply(0);
      complex0.conjugate();
      Complex.valueOf(1.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1633.9665835946143, 1633.9665835946143);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf((-823.3));
      complex2.NaN.pow((-823.3));
      complex4.isInfinite();
      complex1.getArgument();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.subtract(complex5);
      Complex complex7 = complex3.add((-1071.325355600654));
      complex7.INF.readResolve();
      Complex.valueOf(0.7853981633974483);
      Complex.valueOf((-823.3), (-823.3));
      Complex.valueOf(1.0);
      complex1.getReal();
      complex6.createComplex((-823.3), (-5.235397688850367E180));
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.pow(2345.49354882364);
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.NaN.multiply(2345.49354882364);
      Complex complex5 = complex4.ZERO.subtract(2345.49354882364);
      complex3.tanh();
      complex5.multiply(complex2);
      Complex complex6 = complex0.add(complex1);
      complex6.readResolve();
      complex5.isInfinite();
      Complex complex7 = complex3.add(0.0);
      complex3.acos();
      Complex complex8 = complex1.sqrt1z();
      complex3.sinh();
      complex7.readResolve();
      Object object0 = new Object();
      complex8.equals(object0);
      complex8.getImaginary();
      complex1.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.getField();
      complex0.getField();
      Complex complex1 = complex0.exp();
      complex0.NaN.log();
      Complex complex2 = complex0.subtract(564.4564205181);
      Complex complex3 = complex2.add(complex0);
      complex1.sinh();
      complex2.sinh();
      Complex complex4 = complex1.atan();
      complex4.log();
      complex0.getArgument();
      Complex complex5 = complex2.tan();
      complex5.ONE.sqrt1z();
      complex3.NaN.add(1047.4);
      Complex complex6 = complex0.subtract(1047.4);
      Complex complex7 = complex3.negate();
      Complex complex8 = complex6.asin();
      Complex complex9 = complex7.divide(complex1);
      complex1.sqrt1z();
      complex8.divide(0.0);
      complex9.getReal();
      complex6.getField();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      Complex complex1 = complex0.ONE.sqrt();
      complex1.getArgument();
      Complex.valueOf(Double.NaN);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ONE.sinh();
      Complex.valueOf(0.0, 0.0);
      Complex complex4 = complex0.cosh();
      complex1.equals(complex0);
      complex2.ZERO.subtract(complex0);
      Complex complex5 = complex0.createComplex((-2194.4747980020056), (-509.8));
      Complex complex6 = complex5.INF.tan();
      Complex complex7 = complex6.ONE.multiply(1159);
      Complex complex8 = complex6.NaN.add(complex2);
      complex2.asin();
      Complex complex9 = complex0.tan();
      complex9.NaN.divide(complex3);
      complex4.tan();
      complex1.exp();
      complex8.add((-509.8));
      complex1.readResolve();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ONE.divide(0.0);
      Complex complex2 = complex0.I.sin();
      complex2.I.getArgument();
      complex0.nthRoot(693);
      Complex complex3 = complex0.INF.atan();
      Complex complex4 = complex0.NaN.subtract((double) 693);
      complex0.reciprocal();
      complex3.nthRoot(693);
      Complex complex5 = complex3.acos();
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex0.pow((-5001.2));
      complex3.getArgument();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.INF.multiply(920.43840450519);
      complex1.ZERO.add(2302.2);
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex1.acos();
      Complex complex8 = complex7.ZERO.cosh();
      complex8.I.sqrt();
      complex4.getReal();
      Complex complex9 = complex7.INF.pow(complex3);
      Complex complex10 = complex0.reciprocal();
      Complex complex11 = complex8.tanh();
      complex11.I.sin();
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex12 = complex2.cosh();
      Complex complex13 = Complex.ZERO;
      complex9.ZERO.add(complex13);
      complex12.NaN.subtract(1043.78324);
      complex7.INF.asin();
      complex10.multiply(complex9);
      complex7.cosh();
      complex10.tan();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex complex1 = complex0.ZERO.subtract(2441.150832446);
      Complex complex2 = complex1.add((-20.0));
      complex1.NaN.subtract(2441.150832446);
      complex2.pow(2441.150832446);
      Complex.valueOf(1.6168320178985596, (-2.4459827842685974E-8));
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.divide(2441.150832446);
      complex1.hashCode();
      Complex complex5 = complex3.I.pow(378.932);
      complex0.multiply((-98.39819237));
      Complex complex6 = complex5.NaN.conjugate();
      complex5.INF.sqrt1z();
      complex3.I.multiply((-1.230153548825964E-8));
      Complex complex7 = complex3.subtract((-20.0));
      complex7.NaN.sqrt1z();
      complex5.sin();
      complex7.isInfinite();
      complex3.conjugate();
      complex6.sinh();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(17);
      Complex complex1 = Complex.valueOf(2239.6286346521, 6.283185307179586);
      complex0.tanh();
      complex1.add(1.3483035574114863E-58);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex((-1536.0354448874284), (-3676.859));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.divide(complex1);
      complex2.tanh();
      complex0.INF.sqrt1z();
      Complex complex3 = complex0.multiply(0);
      Complex complex4 = complex3.I.conjugate();
      Complex complex5 = complex4.I.divide(complex0);
      complex5.I.nthRoot(533);
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.I.negate();
      complex1.I.atan();
      Complex complex3 = complex0.INF.createComplex(401.4738567, 401.4738567);
      complex3.atan();
      complex0.I.getField();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.ONE.multiply(0.0);
      Complex complex6 = complex5.ONE.subtract(complex4);
      complex5.NaN.hashCode();
      Complex complex7 = complex4.NaN.divide(0.0);
      complex4.NaN.abs();
      complex1.equals(complex0);
      complex0.getArgument();
      complex4.ZERO.conjugate();
      Complex complex8 = complex4.subtract((-1301.52));
      complex6.ONE.abs();
      Complex complex9 = complex1.createComplex(0.0, Double.NaN);
      complex7.asin();
      Complex complex10 = complex8.conjugate();
      complex9.toString();
      Complex complex11 = complex10.ZERO.asin();
      complex11.cos();
      Complex complex12 = complex10.tan();
      Complex complex13 = complex0.log();
      complex13.getArgument();
      Complex complex14 = complex12.asin();
      complex14.I.reciprocal();
      complex6.divide(complex8);
      Complex complex15 = complex2.conjugate();
      complex15.multiply((-752.8246));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.log();
      complex0.hashCode();
      complex0.nthRoot(1);
      Complex complex2 = complex0.NaN.subtract((double) 1);
      complex1.pow(435.6886372248007);
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      complex4.NaN.multiply(1108);
      Complex complex5 = Complex.valueOf(6.283185307179586, 3052.387707157107);
      complex3.getArgument();
      complex5.cosh();
      Complex complex6 = complex1.conjugate();
      complex6.INF.readResolve();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.abs();
      Complex complex1 = new Complex(2.970445258959489E-73, 0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.ZERO.multiply((-1279));
      Complex complex3 = complex2.multiply(1.0);
      Complex complex4 = complex3.INF.multiply(0);
      complex3.NaN.readResolve();
      Complex complex5 = complex1.ONE.cosh();
      Complex complex6 = complex5.multiply(complex1);
      complex5.ZERO.multiply((double) (-1279));
      Complex complex7 = complex0.add(complex1);
      complex2.readResolve();
      complex7.I.getArgument();
      Complex complex8 = complex7.multiply(complex1);
      Complex complex9 = complex5.multiply(1);
      Complex complex10 = new Complex(0.0);
      complex5.equals(complex10);
      complex6.NaN.divide(complex7);
      Complex complex11 = complex6.multiply(1250.3993472060702);
      complex8.ONE.multiply(complex9);
      Complex complex12 = complex8.sinh();
      complex12.I.readResolve();
      complex11.subtract(24.29540293);
      complex0.sqrt();
      complex6.exp();
      complex5.hashCode();
      complex12.add(complex10);
      complex4.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex1.ZERO.conjugate();
      complex0.isInfinite();
      complex0.isInfinite();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.conjugate();
      Complex complex5 = complex4.ZERO.cos();
      complex5.NaN.pow(complex1);
      complex5.subtract(3.457553391989844E-8);
      complex0.add(complex3);
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(1.3020631859056421E91, 0.0);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ONE.pow(complex1);
      Complex complex3 = complex2.INF.atan();
      Complex complex4 = complex2.add(complex1);
      Complex.valueOf((-2927.66758), (-2927.66758));
      Complex complex5 = complex2.ZERO.pow(Double.POSITIVE_INFINITY);
      complex5.INF.pow((-2927.66758));
      complex5.add(complex3);
      double double0 = complex5.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex6 = complex0.ONE.divide((-2358.47716847));
      Complex complex7 = complex6.INF.multiply((-2358.47716847));
      Complex complex8 = complex7.ZERO.multiply((-916));
      List<Complex> list0 = complex8.ZERO.nthRoot(1);
      assertTrue(list0.contains(complex1));
      assertEquals(-0.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex7.ZERO.exp();
      complex9.INF.readResolve();
      complex7.NaN.getArgument();
      Complex complex10 = complex9.NaN.atan();
      complex10.INF.readResolve();
      assertTrue(complex9.equals((Object)complex4));
      assertSame(complex10, complex3);
      
      Complex complex11 = complex0.acos();
      String string0 = complex7.toString();
      assertEquals("(Infinity, Infinity)", string0);
      
      complex7.getField();
      assertEquals((-4.2400240857481936E-4), complex6.getReal(), 0.01);
      
      Complex complex12 = complex11.pow(complex0);
      Complex complex13 = Complex.valueOf((-2358.47716847));
      complex13.ZERO.getField();
      assertEquals((-2358.47716847), complex13.getReal(), 0.01);
      
      complex11.getImaginary();
      Complex complex14 = complex1.subtract(complex12);
      assertEquals((-1.3870410226633185), complex14.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tanh();
      List<Complex> list0 = complex0.INF.nthRoot(100);
      assertTrue(list0.contains(complex0));
      assertEquals(1, list0.size());
      
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex2 = complex0.multiply(0);
      Complex complex3 = (Complex)complex0.readResolve();
      assertTrue(complex3.isInfinite());
      
      Complex complex4 = complex2.sin();
      assertTrue(complex4.equals((Object)complex1));
      assertNotSame(complex4, complex1);
      assertTrue(complex2.equals((Object)complex3));
      assertFalse(complex4.isInfinite());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.add(940.83202984);
      assertEquals(940.83202984, complex1.getReal(), 0.01);
      
      complex0.NaN.nthRoot(1);
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      
      Complex complex2 = complex0.exp();
      Complex complex3 = complex2.exp();
      assertEquals(2.718281828459045, complex3.getReal(), 0.01);
      
      Complex complex4 = complex2.sqrt1z();
      Complex complex5 = complex2.divide(complex0);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      Complex complex6 = complex0.cos();
      complex4.sqrt();
      Complex complex7 = complex6.subtract(complex4);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      
      Complex complex8 = complex4.sinh();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex9 = (Complex)complex0.readResolve();
      assertTrue(complex9.equals((Object)complex8));
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex0.pow((-2492.1));
      Complex complex3 = complex1.I.cos();
      Complex complex4 = complex3.ZERO.createComplex((-2492.1), (-860.5));
      Complex complex5 = complex2.I.add(2.3547754287719727);
      Complex complex6 = complex2.ZERO.acos();
      complex2.INF.nthRoot(37);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.ZERO.divide((-2492.1));
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex5.ZERO.atan();
      Complex complex10 = complex1.ZERO.acos();
      complex10.ONE.subtract(complex0);
      Complex complex11 = complex1.multiply(complex0);
      complex7.getField();
      Complex complex12 = complex1.sinh();
      Complex complex13 = complex5.tanh();
      assertEquals(0.016505819814607883, complex13.getImaginary(), 0.01);
      assertEquals(1.007390482469622, complex13.getReal(), 0.01);
      
      Complex complex14 = complex9.add(complex6);
      assertEquals(1.5707963267948966, complex14.getReal(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      
      double double0 = complex12.getImaginary();
      assertEquals(0.0, double0, 0.01);
      
      Complex complex15 = complex4.subtract(complex2);
      Complex complex16 = complex11.sqrt1z();
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex0.subtract(complex15);
      complex17.isNaN();
      assertNotSame(complex17, complex2);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
  }
}
