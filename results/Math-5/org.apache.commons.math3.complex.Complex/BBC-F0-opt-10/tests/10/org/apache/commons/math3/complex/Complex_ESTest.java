/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:03:10 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5.2744376732859406E250));
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 1.5234465914578058E-153);
      Complex complex1 = new Complex(0.0, Double.POSITIVE_INFINITY);
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-2245), Double.POSITIVE_INFINITY);
      complex0.multiply((-2245));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex(180.9796327, 180.9796327);
      Complex complex1 = complex0.multiply(2141.21027575399);
      Complex complex2 = complex1.multiply(766);
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.atan();
      complex4.divide(180.9796327);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex5.ONE.cos();
      complex6.ONE.hashCode();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(1.5234465914578058E-153, 940.2506537484219);
      complex0.abs();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.I;
      complex0.multiply(complex3);
      Complex complex4 = new Complex(0.0, 1.5234465914578058E-153);
      complex4.pow(complex2);
      Complex complex5 = complex3.multiply((-2297));
      complex5.getArgument();
      Complex complex6 = Complex.I;
      complex6.readResolve();
      complex4.pow(0.0);
      complex5.reciprocal();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex1.NaN.sinh();
      complex1.ZERO.asin();
      Complex.valueOf(0.0, 1.5234465914578058E-153);
      complex1.INF.abs();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.ONE.multiply(complex0);
      complex2.equals(complex3);
      Complex.valueOf(3854.463722483552, 1821.1971471975032);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex0.sqrt1z();
      complex0.createComplex((-582.5984953931716), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(0.9999996468166248, 20.0);
      complex0.acos();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(1506.9522959642);
      complex0.getField();
      complex1.NaN.getArgument();
      Complex.valueOf(Double.NaN, Double.NaN);
      try { 
        complex1.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      complex0.log();
      Complex complex2 = complex1.atan();
      Complex complex3 = (Complex)complex1.readResolve();
      Complex.valueOf(125.0);
      complex3.abs();
      Complex complex4 = Complex.ZERO;
      complex4.equals(complex2);
      Complex complex5 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex6 = new Complex(Double.NaN, (-1.783686171956726E7));
      complex6.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.ONE;
      complex2.conjugate();
      Complex complex8 = complex5.reciprocal();
      complex8.pow(552.0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex.valueOf(0.0, 1.5234465914578058E-153);
      Complex complex3 = new Complex((-2971.393028), Double.NaN);
      complex1.hashCode();
      complex2.exp();
      Complex.valueOf(160.0, 2697.34053295);
      Complex.valueOf(2697.34053295, (-2971.393028));
      complex1.tan();
      Complex complex4 = Complex.ONE;
      complex4.getArgument();
      Complex.valueOf((-2639.7795219570226));
      Complex complex5 = new Complex((-2639.7795219570226), 0.12264325494848016);
      Complex complex6 = Complex.NaN;
      complex6.acos();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.sinh();
      Complex complex3 = Complex.valueOf(0.0, 1.5234465914578058E-153);
      complex1.INF.abs();
      Complex complex4 = Complex.ZERO;
      complex2.equals(complex3);
      Complex complex5 = complex0.divide(Double.POSITIVE_INFINITY);
      complex5.ZERO.multiply(1.5234465914578058E-153);
      Complex complex6 = Complex.ONE;
      complex6.conjugate();
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.NaN.sqrt1z();
      Complex complex2 = complex0.NaN.subtract((-1846.663618));
      Complex complex3 = complex2.ZERO.pow((-1846.663618));
      complex3.createComplex((-1846.663618), (-1846.663618));
      complex3.ZERO.hashCode();
      Complex complex4 = complex2.INF.pow(complex0);
      complex2.ZERO.toString();
      Complex complex5 = complex2.I.multiply(1449);
      complex3.ZERO.multiply(Double.NaN);
      complex0.add((-2329.49608662792));
      Complex complex6 = complex3.exp();
      complex5.divide(complex4);
      Complex complex7 = complex2.conjugate();
      complex2.pow(complex6);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.log();
      complex1.atan();
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = Complex.valueOf(125.0);
      Complex complex5 = new Complex(11.62179410286026, 11.62179410286026);
      complex5.hashCode();
      Complex complex6 = complex0.exp();
      Complex.valueOf(125.0, 125.0);
      Complex complex7 = Complex.I;
      complex7.hashCode();
      complex1.acos();
      complex7.nthRoot(2679);
      complex6.abs();
      complex4.getField();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.multiply((-0.9998720081914758));
      complex1.I.subtract((-0.9998720081914758));
      Complex complex2 = Complex.valueOf(0.20739519596099854);
      Complex complex3 = complex2.divide((-1039.8));
      complex3.sin();
      Complex.valueOf(0.0);
      Complex complex4 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      complex0.log();
      Complex complex2 = complex1.atan();
      complex1.readResolve();
      Complex complex3 = Complex.valueOf(125.0);
      Complex complex4 = new Complex(11.62179410286026, 11.62179410286026);
      complex4.hashCode();
      complex0.exp();
      Complex complex5 = new Complex(11.62179410286026);
      Complex complex6 = Complex.valueOf(11.62179410286026, 759.8706);
      complex2.tan();
      complex3.getArgument();
      Complex.valueOf(0.0);
      Complex complex7 = new Complex(193.24733841259248, Double.POSITIVE_INFINITY);
      complex0.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      complex0.log();
      Complex complex2 = complex1.atan();
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = Complex.valueOf(125.0);
      complex4.ONE.multiply(Double.POSITIVE_INFINITY);
      Complex complex5 = new Complex(11.62179410286026, 11.62179410286026);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY, 487.877683);
      Complex complex7 = Complex.INF;
      complex7.hashCode();
      complex2.exp();
      Complex complex8 = new Complex((-1787.913918166));
      Complex.valueOf((-1787.913918166), 2183.651275348423);
      complex2.tan();
      complex5.getArgument();
      Complex.valueOf(11.62179410286026);
      Complex complex9 = new Complex((-1787.913918166), 0.0);
      complex3.acos();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = new Complex(2411.7751052, 2411.7751052);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.I.abs();
      complex0.equals(complex1);
      Complex complex2 = complex1.cosh();
      complex2.getImaginary();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      Complex complex4 = complex3.sqrt1z();
      Complex complex5 = complex4.acos();
      complex0.createComplex(1.0, (-894.28799));
      Complex complex6 = Complex.ZERO;
      Complex complex7 = Complex.valueOf(1.2420918941497803);
      Complex complex8 = complex6.pow(complex7);
      Complex complex9 = complex5.asin();
      complex3.divide(2417.680359);
      Complex complex10 = Complex.valueOf(20.0);
      complex1.tanh();
      Complex complex11 = complex10.tanh();
      complex8.tan();
      complex4.reciprocal();
      complex5.subtract(complex4);
      complex11.multiply((-1545));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3.7621956910836314);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex2.subtract(complex4);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex2.cosh();
      complex3.getImaginary();
      complex6.subtract(complex2);
      Complex complex8 = complex2.sqrt1z();
      complex0.NaN.acos();
      complex0.I.nthRoot(1137);
      Complex complex9 = complex3.createComplex(2921.5891, 1.0004488552338286);
      complex5.pow(complex7);
      Complex complex10 = complex9.tan();
      complex10.INF.atan();
      complex8.reciprocal();
      try { 
        complex6.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = new Complex(0.0);
      Complex complex3 = Complex.valueOf(0.0, 1.5234465914578058E-153);
      complex1.INF.abs();
      Complex complex4 = Complex.ZERO;
      complex3.I.pow(complex4);
      complex1.ZERO.multiply(73);
      complex3.readResolve();
      Complex complex5 = complex0.log();
      complex5.ZERO.sqrt();
      Complex complex6 = Complex.valueOf(2400.709789, (-1975.98909279));
      complex3.multiply(complex6);
      Complex complex7 = complex2.add(2400.709789);
      complex7.ONE.pow(complex4);
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.add(523.02648);
      complex1.cosh();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.sqrt();
      complex0.sqrt1z();
      Complex complex4 = Complex.valueOf((-20.0), 523.02648);
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex5.pow(3139.340913698089);
      complex3.asin();
      Complex complex7 = new Complex(1870.1);
      Complex complex8 = complex6.pow(complex7);
      Complex complex9 = complex8.multiply(complex5);
      complex5.getReal();
      complex0.sqrt1z();
      complex9.getReal();
      complex4.abs();
      complex5.cosh();
      complex0.tan();
      complex9.reciprocal();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.add(523.02648);
      Complex complex2 = Complex.NaN;
      complex0.tanh();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex3.tan();
      complex4.I.divide(complex2);
      Complex complex5 = complex1.reciprocal();
      complex5.subtract(complex0);
      complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex.valueOf(0.7900580382210654);
      complex1.log();
      Complex complex2 = complex0.atan();
      Object object0 = new Object();
      Complex.valueOf(0.7900580382210654);
      Complex complex3 = new Complex(0.7900580382210654, 1122.0);
      complex0.reciprocal();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.multiply(complex2);
      Complex complex6 = Complex.INF;
      complex0.getField();
      Complex complex7 = complex1.conjugate();
      complex5.tanh();
      complex5.getArgument();
      Complex complex8 = new Complex(1122.0);
      complex3.subtract(11.62179410286026);
      Complex complex9 = Complex.valueOf(0.2920032778009408);
      complex0.cosh();
      complex9.multiply(983);
      complex7.getField();
      complex7.tanh();
      Complex complex10 = Complex.I;
      complex6.cos();
      complex0.subtract(Double.NaN);
      complex1.add(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.asin();
      Complex complex3 = Complex.valueOf((-2118.708098802));
      Complex complex4 = complex3.cos();
      complex1.tan();
      Complex complex5 = complex0.asin();
      complex2.subtract(complex4);
      Complex complex6 = complex3.cos();
      Complex complex7 = complex4.cosh();
      complex6.getImaginary();
      Complex complex8 = Complex.valueOf(0.0);
      complex8.subtract(complex7);
      complex6.sqrt1z();
      complex5.acos();
      complex8.createComplex(0.0, (-2521.0));
      Complex complex9 = Complex.valueOf((-2118.708098802), 2.0);
      complex9.pow(complex3);
      Complex complex10 = complex5.asin();
      complex6.divide((-2521.0));
      Complex.valueOf(2.0);
      complex10.tanh();
      complex4.tanh();
      complex6.tan();
      complex6.reciprocal();
      Complex complex11 = Complex.valueOf(0.42089839744949253, 1.3437661278929747);
      complex11.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.valueOf(1.523329496383667);
      Complex complex3 = complex2.log();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.atan();
      complex1.readResolve();
      Complex.valueOf((-1675.63234));
      Complex complex6 = new Complex(1.523329496383667, 2286.443);
      complex0.hashCode();
      Complex complex7 = Complex.valueOf((-1675.63234));
      Complex complex8 = complex7.exp();
      complex8.NaN.createComplex((-1260.3317081541), 1508.4851237469927);
      Complex complex9 = new Complex(11.62179410286026);
      Complex complex10 = Complex.I;
      Complex complex11 = complex10.acos();
      complex4.asin();
      Complex.valueOf(5.38733640215475E-8, (-241.61084141862));
      complex5.tan();
      complex2.getArgument();
      complex11.pow(complex5);
      Complex complex12 = new Complex((-1.1279742372661484E-266), (-574.82253));
      complex11.acos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 2921.5891);
      complex0.readResolve();
      complex0.abs();
      Complex complex1 = new Complex(0.7900580382210654);
      complex0.equals(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.valueOf(1.0);
      Complex complex5 = complex1.cos();
      Complex complex6 = complex5.multiply(complex3);
      complex3.atan();
      complex2.getField();
      complex4.ONE.add((-1.0));
      Complex complex7 = new Complex(0.12264325494848016);
      complex7.divide(complex6);
      complex4.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(0.7900580382210654, 0.7900580382210654);
      complex1.readResolve();
      complex1.abs();
      complex0.NaN.createComplex(1.1173107927141117, 3.7944631664558904E-85);
      complex1.equals((Object) null);
      Complex complex2 = Complex.ZERO;
      Complex.valueOf(1.1173107927141117);
      complex0.cos();
      complex1.multiply(complex0);
      Complex complex3 = Complex.valueOf(1.1173107927141117);
      complex3.atan();
      complex0.getField();
      try { 
        complex2.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2581.0);
      Complex complex1 = null;
      try { 
        complex0.ZERO.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-2735.5167));
      Complex complex3 = complex0.cos();
      complex3.INF.exp();
      Complex complex4 = complex2.multiply(complex3);
      complex4.NaN.tanh();
      Complex complex5 = complex2.atan();
      complex1.getField();
      complex0.divide(complex5);
      Complex complex6 = complex5.subtract(2.0);
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex1.NaN.sinh();
      Complex complex2 = Complex.valueOf(0.0, 1.5234465914578058E-153);
      complex1.INF.abs();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex2.I.pow(complex3);
      Complex complex5 = Complex.valueOf(1.5234465914578058E-153, Double.POSITIVE_INFINITY);
      complex2.readResolve();
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.ZERO.sqrt();
      complex7.I.cosh();
      Complex complex8 = complex6.sqrt();
      complex6.NaN.sqrt1z();
      Complex.valueOf(Double.POSITIVE_INFINITY, 1.5234465914578058E-153);
      complex8.ZERO.cosh();
      complex6.NaN.pow(2.7925807446276126E-8);
      complex6.ONE.asin();
      complex6.pow(complex1);
      complex4.ONE.multiply(complex5);
      complex6.getReal();
      complex3.sqrt1z();
      complex5.getReal();
      complex2.abs();
      Complex complex9 = new Complex(246.1145394, (-1001.2065201));
      Complex complex10 = Complex.INF;
      complex3.tan();
      complex5.reciprocal();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 427.32128790647477);
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.valueOf(125.0, 2618.0);
      complex4.abs();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = complex4.multiply(73);
      complex1.readResolve();
      complex0.log();
      Complex complex8 = complex0.sqrt();
      Complex complex9 = complex7.cosh();
      complex6.sqrt();
      Complex complex10 = complex0.sqrt1z();
      Complex.valueOf((double) 73, 427.32128790647477);
      Complex complex11 = complex9.cosh();
      Complex complex12 = complex10.pow(2620.9824493880155);
      complex8.asin();
      Complex complex13 = complex11.pow(complex8);
      complex6.multiply(complex13);
      complex12.getReal();
      Complex complex14 = complex1.sqrt1z();
      Complex complex15 = Complex.valueOf(Double.NaN);
      complex15.getReal();
      complex5.abs();
      complex14.cosh();
      complex15.tan();
      complex12.reciprocal();
      complex15.tanh();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = new Complex(125.0, 125.0);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex0.multiply((-2618));
      Complex complex6 = complex5.subtract(3929.77);
      Complex complex7 = Complex.ONE;
      complex7.isInfinite();
      complex0.toString();
      complex3.subtract(complex4);
      Complex complex8 = complex1.reciprocal();
      complex3.getField();
      Complex complex9 = complex4.conjugate();
      complex0.tanh();
      complex9.getArgument();
      Complex complex10 = new Complex(1.0767329434136184);
      Complex complex11 = complex10.subtract((-2.185039863261519));
      complex6.readResolve();
      Complex complex12 = complex9.sqrt();
      complex12.subtract((-984.8082534352));
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex0.multiply(complex8);
      complex3.multiply(complex11);
      complex0.sqrt();
      Complex complex15 = complex14.log();
      complex0.getReal();
      complex15.add(complex14);
      complex14.atan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals(complex0);
      Complex complex1 = complex0.negate();
      complex0.readResolve();
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex0.cosh();
      complex0.acos();
      complex4.multiply(6.693500938105557E234);
      Complex complex5 = Complex.valueOf(2.0, 0.41421356237309515);
      complex5.tan();
      complex0.getArgument();
      complex2.pow(complex4);
      Complex complex6 = new Complex((-2518.4633198174406), 1609.59);
      Complex complex7 = complex3.tanh();
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.exp();
      complex2.getField();
      complex2.getImaginary();
      complex2.negate();
      Complex.valueOf(1503.94647041);
      Complex complex4 = complex3.pow(Double.POSITIVE_INFINITY);
      Complex.valueOf(2922.7, Double.POSITIVE_INFINITY);
      complex3.nthRoot(272);
      complex2.nthRoot(17);
      complex4.abs();
      Complex complex5 = complex4.multiply(446);
      Complex complex6 = Complex.NaN;
      complex6.getField();
      Complex complex7 = new Complex(6.283185307179586);
      Complex complex8 = complex5.tanh();
      complex8.ZERO.getArgument();
      complex8.cos();
      complex3.createComplex(1295.203754362, 464.166313);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(125.0, 125.0);
      Complex complex1 = Complex.valueOf(125.0);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.log();
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex0.multiply((-2618));
      complex5.subtract(3929.77);
      Complex complex6 = Complex.valueOf((-2.185039863261519), (-2.185039863261519));
      complex6.isInfinite();
      complex0.toString();
      complex3.subtract(complex4);
      complex0.reciprocal();
      complex6.multiply(complex0);
      complex1.getField();
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex0.tanh();
      complex7.getArgument();
      Complex complex9 = new Complex(1.0767329434136184);
      Complex complex10 = complex9.subtract((-2.185039863261519));
      Complex complex11 = Complex.valueOf((-1101.6956686418));
      complex11.cosh();
      complex11.multiply(37);
      complex8.getField();
      complex6.tanh();
      Complex complex12 = Complex.I;
      complex12.cos();
      complex10.subtract((-1101.6956686418));
      complex6.add(125.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(Double.NaN);
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(2411.7751052);
      complex2.readResolve();
      double double0 = 83.704030561;
      complex2.ONE.multiply(83.704030561);
      Complex complex3 = new Complex((-2385.0), 1.0950722694396973);
      Complex complex4 = complex2.cosh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex4.pow(complex5);
      complex4.exp();
      complex6.getImaginary();
      Complex complex7 = new Complex(0.0, 11.62179410286026);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex2.pow((-2385.0));
      try { 
        complex9.nthRoot((-1354));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,354
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.log();
      complex0.log();
      Complex complex2 = complex1.atan();
      complex1.readResolve();
      Complex complex3 = Complex.valueOf(125.0);
      Complex complex4 = new Complex(11.62179410286026, 11.62179410286026);
      complex4.hashCode();
      complex0.exp();
      Complex complex5 = new Complex(2286.443);
      Complex complex6 = complex5.acos();
      Complex.valueOf(2286.443, 759.8706);
      complex2.tan();
      complex3.getArgument();
      Complex complex7 = complex3.pow(complex6);
      Complex complex8 = new Complex(193.24733841259248, Double.POSITIVE_INFINITY);
      complex7.acos();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = new Complex(2411.7751052, 2411.7751052);
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.I.abs();
      Complex complex2 = new Complex((-2100.279225706226), (-2100.279225706226));
      Complex complex3 = complex2.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = complex0.exp();
      complex6.getImaginary();
      Complex complex7 = complex6.negate();
      complex5.pow(2360.538181);
      complex3.nthRoot(1474);
      complex2.nthRoot(1495);
      Complex complex8 = Complex.NaN;
      complex8.abs();
      Complex complex9 = complex7.tanh();
      complex0.tan();
      complex6.reciprocal();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.atan();
      complex0.negate();
      complex3.readResolve();
      Complex complex4 = Complex.INF;
      complex4.equals(complex3);
      Complex complex5 = Complex.INF;
      complex5.hashCode();
      complex3.exp();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      Complex complex7 = complex1.divide(complex6);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex7.acos();
      complex1.multiply(0.0);
      Complex complex10 = Complex.valueOf(0.0, (-1015.90135998));
      complex10.tan();
      complex0.getArgument();
      complex9.pow(complex2);
      Complex complex11 = new Complex((-1015.90135998), (-279.0584557299));
      complex11.ZERO.getArgument();
      Complex complex12 = new Complex((-1523.45), (-1523.45));
      complex12.tanh();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(125.0, 125.0);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.log();
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = complex0.subtract(complex2);
      Complex complex6 = complex0.multiply((-2618));
      Complex complex7 = complex6.subtract(3929.77);
      Complex complex8 = Complex.ONE;
      complex8.isInfinite();
      complex0.toString();
      complex3.subtract(complex5);
      Complex complex9 = complex4.reciprocal();
      complex4.getField();
      Complex complex10 = complex5.conjugate();
      complex0.tanh();
      complex10.getArgument();
      Complex complex11 = new Complex(1.0767329434136184);
      Complex complex12 = complex11.subtract((-2.185039863261519));
      complex7.readResolve();
      Complex complex13 = complex10.sqrt();
      complex13.subtract((-984.8082534352));
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex4.multiply(complex9);
      complex3.multiply(complex12);
      complex0.sqrt();
      Complex complex16 = complex15.log();
      complex0.getReal();
      complex16.add(complex15);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(15.5081691, 15.5081691);
      Complex complex3 = Complex.valueOf((-3.295268490032475E179), 3122.59296067676);
      complex1.readResolve();
      complex3.readResolve();
      Complex complex4 = complex2.asin();
      complex0.cosh();
      Complex complex5 = complex3.pow(complex2);
      Complex complex6 = complex4.exp();
      Complex complex7 = Complex.INF;
      complex7.getField();
      complex5.getImaginary();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex5.pow(922.2266746);
      complex3.nthRoot(369);
      complex4.nthRoot(1);
      complex6.abs();
      complex8.tanh();
      complex9.tan();
      complex1.reciprocal();
      Complex complex10 = Complex.INF;
      complex10.tanh();
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(125.0, 125.0);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.log();
      complex2.pow(complex3);
      complex0.subtract(complex2);
      int int0 = (-2618);
      Complex complex4 = complex0.multiply((-2618));
      complex4.subtract(3929.77);
      Complex complex5 = complex0.cosh();
      Complex complex6 = Complex.INF;
      complex6.pow(complex5);
      Complex complex7 = new Complex(125.0);
      complex7.exp();
      complex2.getField();
      Complex complex8 = Complex.ZERO;
      complex8.getImaginary();
      complex5.negate();
      Complex complex9 = new Complex((-2618));
      complex9.pow(1281.7762022291997);
      // Undeclared exception!
      complex8.nthRoot(936821865);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.0);
      complex0.equals(complex1);
      Complex complex2 = complex0.negate();
      complex0.readResolve();
      Object object0 = complex0.readResolve();
      complex1.equals(object0);
      complex1.hashCode();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex1.cosh();
      complex0.acos();
      complex5.multiply(6.693500938105557E234);
      Complex complex6 = Complex.valueOf(2.0, 0.41421356237309515);
      complex6.tan();
      complex1.getArgument();
      complex3.pow(complex5);
      Complex complex7 = new Complex((-2518.4633198174406), 1609.59);
      Complex complex8 = complex4.tanh();
      complex8.tanh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.ONE.multiply(0.0);
      complex3.NaN.readResolve();
      complex3.ZERO.readResolve();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.ZERO.pow(complex4);
      Complex complex7 = complex6.ZERO.exp();
      complex2.getField();
      complex3.getImaginary();
      Complex complex8 = complex2.negate();
      complex5.ONE.pow(0.0);
      complex8.nthRoot(1495);
      complex4.nthRoot(1495);
      complex8.abs();
      complex3.tanh();
      complex7.createComplex(Double.NaN, Double.NaN);
      Complex complex9 = new Complex(Double.NaN, Double.NaN);
      complex8.subtract(complex0);
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-3739.22596094), 0.0);
      Complex complex2 = Complex.valueOf((-3739.22596094), (-2518.4633198174406));
      complex1.getArgument();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf((-2095.0));
      complex4.toString();
      Complex complex5 = complex1.sinh();
      complex1.getArgument();
      complex1.hashCode();
      Complex complex6 = complex3.sin();
      Complex complex7 = complex2.divide((-2518.4633198174406));
      complex3.readResolve();
      complex1.equals(complex2);
      Complex complex8 = complex0.exp();
      complex7.tanh();
      complex5.sqrt();
      Complex complex9 = complex8.tanh();
      Complex complex10 = Complex.I;
      complex9.equals((Object) null);
      complex7.sqrt();
      Complex.valueOf(3.141592653589793);
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.conjugate();
      complex1.NaN.sinh();
      Complex complex2 = Complex.valueOf(0.0, 1.5234465914578058E-153);
      complex1.INF.abs();
      Complex complex3 = Complex.ZERO;
      complex2.I.pow(complex3);
      complex1.ZERO.multiply(73);
      complex2.readResolve();
      Complex complex4 = complex0.log();
      Complex complex5 = complex4.ZERO.sqrt();
      complex5.I.cosh();
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex4.NaN.sqrt1z();
      Complex complex8 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.5234465914578058E-153);
      Complex complex9 = complex6.ZERO.cosh();
      complex4.NaN.pow(2.7925807446276126E-8);
      Complex complex10 = complex4.pow(complex1);
      complex10.getImaginary();
      complex0.toString();
      complex1.readResolve();
      Complex complex11 = complex4.sqrt();
      complex8.subtract(2.9599693109692324E-149);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = new Complex(1505.7707042946172);
      complex13.multiply(complex7);
      Complex complex14 = new Complex(Double.POSITIVE_INFINITY);
      complex14.multiply(complex5);
      complex9.sqrt();
      complex1.log();
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex15.getReal();
      complex11.add(complex0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4279.547));
      Complex complex1 = complex0.ONE.reciprocal();
      complex1.I.sinh();
      Complex complex2 = complex0.createComplex((-4279.547), (-0.9805145808828202));
      complex0.conjugate();
      Complex complex3 = complex2.sinh();
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5273248225058396);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.asin();
      Complex complex3 = complex1.subtract(0.5273248225058396);
      complex1.I.add(0.5273248225058396);
      complex1.equals(complex0);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.NaN.reciprocal();
      complex1.I.divide(complex3);
      complex5.I.getField();
      Complex complex6 = complex4.ONE.cos();
      Complex complex7 = complex0.divide(complex1);
      Complex.valueOf(471.080966373708, 29.77118076439941);
      Complex.valueOf(0.5273248225058396, 1196.3877512);
      complex6.log();
      complex7.ONE.multiply(1116);
      Complex complex8 = complex3.atan();
      complex8.atan();
      complex8.NaN.cos();
      complex5.add(0.5273248225058396);
      complex7.readResolve();
      complex2.abs();
      complex6.nthRoot(1);
      complex7.I.abs();
      complex2.toString();
      Complex complex9 = complex7.cos();
      complex7.pow(471.080966373708);
      complex9.atan();
      Complex complex10 = complex9.cosh();
      complex10.cos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-4279.547), (-4279.547));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.valueOf(2.0505156814429197);
      Complex complex3 = complex2.acos();
      Complex complex4 = new Complex(6.283185307179586);
      complex4.subtract(376.85941915);
      complex3.exp();
      complex1.atan();
      Complex.valueOf((-4279.547), 7.0);
      Complex complex5 = Complex.NaN;
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-9.040643863751471E-8), (-9.040643863751471E-8));
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.INF.negate();
      complex0.equals(complex1);
      complex1.INF.hashCode();
      Complex complex5 = complex3.I.exp();
      Complex complex6 = complex1.divide(complex0);
      Complex complex7 = complex6.cosh();
      Complex complex8 = complex7.ZERO.acos();
      Complex complex9 = complex7.INF.multiply((-9.040643863751471E-8));
      Complex complex10 = Complex.valueOf((-9.040643863751471E-8), (-9.040643863751471E-8));
      Complex complex11 = complex3.ONE.tan();
      complex11.NaN.getArgument();
      Complex complex12 = complex3.ONE.pow(complex9);
      complex12.INF.sqrt();
      complex10.ZERO.cos();
      complex2.cos();
      Complex complex13 = complex3.tan();
      complex6.asin();
      Complex complex14 = complex10.ZERO.subtract(complex4);
      complex6.asin();
      complex11.pow(complex13);
      Complex complex15 = complex11.multiply(complex7);
      complex1.getReal();
      Complex.valueOf((-9.040643863751471E-8), 0.1767723262310028);
      complex7.sqrt1z();
      Complex complex16 = Complex.NaN;
      complex16.getReal();
      complex9.abs();
      complex15.cosh();
      complex14.sinh();
      complex11.divide(Double.NaN);
      complex0.tanh();
      complex7.add(complex5);
      complex5.divide(complex1);
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-9.040643863751471E-8), (-9.040643863751471E-8));
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.INF.negate();
      complex0.equals(complex1);
      complex1.INF.hashCode();
      complex2.readResolve();
      complex3.readResolve();
      Complex complex5 = complex1.asin();
      Complex complex6 = complex2.cosh();
      Complex complex7 = complex6.pow(complex2);
      complex3.exp();
      complex0.getField();
      complex0.getImaginary();
      complex7.negate();
      Complex complex8 = complex5.pow((-9.040643863751471E-8));
      complex8.ZERO.sqrt();
      int int0 = (-3455);
      try { 
        complex4.nthRoot((-3455));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,455
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf(15.5081691, 15.5081691);
      Complex complex3 = complex1.cosh();
      complex2.toString();
      Complex complex4 = complex1.tan();
      complex2.toString();
      Complex complex5 = complex2.pow(complex4);
      complex5.abs();
      complex3.subtract(complex5);
      Complex complex6 = complex2.conjugate();
      complex6.tan();
      complex0.toString();
      Complex complex7 = complex6.acos();
      complex1.getImaginary();
      Complex complex8 = complex6.multiply(complex0);
      complex8.getReal();
      Complex complex9 = complex0.tan();
      complex4.abs();
      complex1.getImaginary();
      complex1.toString();
      complex2.readResolve();
      complex5.sqrt();
      complex3.subtract(2.0);
      Complex complex10 = Complex.ZERO;
      complex10.multiply(complex2);
      complex9.I.multiply(complex8);
      Complex complex11 = complex10.sqrt();
      complex9.log();
      complex11.getReal();
      complex7.add(complex5);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, 3.7621956910836314);
      complex0.cos();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.asin();
      Complex complex4 = complex1.subtract(complex3);
      Complex complex5 = complex0.cos();
      Complex complex6 = complex1.cosh();
      complex2.getImaginary();
      complex5.subtract(complex1);
      complex1.sqrt1z();
      complex0.NaN.acos();
      complex2.createComplex(2921.5891, 1.0004488552338286);
      complex4.pow(complex6);
      complex2.asin();
      complex1.multiply(1024);
      complex1.divide((double) 1024);
      Complex complex7 = Complex.valueOf((double) 1024);
      Complex complex8 = complex7.tanh();
      complex7.createComplex((-2267.88022223), 3.7621956910836314);
      complex1.divide(1.0);
      complex4.subtract(complex8);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex(125.0, 125.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.I.subtract((-4.820065619207094E-9));
      complex3.I.exp();
      Complex complex4 = complex1.INF.tanh();
      Complex complex5 = complex0.I.atan();
      Complex complex6 = complex1.cosh();
      complex0.getImaginary();
      complex2.subtract(complex5);
      complex1.sqrt1z();
      complex2.createComplex((-1.0), 125.0);
      Complex complex7 = complex6.pow(complex4);
      Complex complex8 = complex3.asin();
      Complex complex9 = complex2.multiply(37);
      complex7.divide((-1.0));
      Complex complex10 = complex8.tanh();
      complex10.createComplex(125.0, (-1.0));
      Complex complex11 = complex4.divide((-4.820065619207094E-9));
      complex9.subtract(complex11);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow(2.7925807446276126E-8);
      Complex complex3 = complex0.asin();
      complex3.pow(complex0);
      Complex complex4 = complex0.multiply(complex1);
      complex0.getReal();
      Complex complex5 = Complex.valueOf((-3972.6694740685125), 102.98720975295367);
      complex0.sqrt1z();
      complex5.getReal();
      complex5.abs();
      Complex complex6 = complex3.cosh();
      complex4.sinh();
      complex6.divide(102.98720975295367);
      Complex complex7 = Complex.NaN;
      complex7.I.tanh();
      complex7.tanh();
      complex5.add(complex2);
      Complex complex8 = complex0.divide(complex2);
      complex8.I.cosh();
      complex6.conjugate();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ONE.divide(0.0);
      Complex complex3 = complex2.I.reciprocal();
      Complex complex4 = complex1.INF.negate();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      Complex complex6 = complex5.ONE.multiply(complex0);
      Complex complex7 = complex3.atan();
      complex6.multiply(complex7);
      complex4.readResolve();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex0.getField();
      complex7.sqrt1z();
      complex5.getField();
      complex7.toString();
      complex3.atan();
      complex3.isNaN();
      complex2.sqrt();
      complex2.pow(3905.0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(125.0, 125.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.I.subtract((-4.820065619207094E-9));
      Complex complex4 = complex3.I.exp();
      Complex complex5 = complex0.pow(complex1);
      complex0.add((-4.820065619207094E-9));
      Complex complex6 = complex4.cosh();
      complex0.sqrt();
      complex6.negate();
      complex4.multiply(complex0);
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY, (-631.43762054));
      complex7.subtract(complex5);
      Complex complex8 = Complex.valueOf((-6.6045909118908625E-9));
      complex8.readResolve();
      complex7.nthRoot(280);
      complex1.hashCode();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4323.4, (-1438.709));
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.I;
      complex2.toString();
      Complex complex3 = complex1.tan();
      complex2.toString();
      Complex complex4 = Complex.valueOf(4323.4, (-1438.709));
      Complex complex5 = complex4.pow(complex2);
      complex2.abs();
      Complex complex6 = complex3.subtract(complex4);
      complex6.conjugate();
      Complex complex7 = complex2.tan();
      complex0.toString();
      complex2.acos();
      complex2.getImaginary();
      Complex complex8 = complex2.multiply(complex6);
      complex2.getReal();
      Complex complex9 = complex7.tan();
      complex6.abs();
      complex9.getImaginary();
      complex6.toString();
      complex2.readResolve();
      Complex complex10 = complex5.sqrt();
      Complex complex11 = Complex.valueOf(4323.4);
      complex11.subtract((-1438.709));
      complex10.multiply(complex8);
      complex9.sqrt();
      complex7.log();
      complex3.getReal();
      complex8.add(complex2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.ONE.multiply(0.0);
      Complex complex4 = Complex.valueOf(20.0);
      complex3.divide(complex4);
      Complex complex5 = Complex.valueOf(0.0);
      Complex.valueOf((-799.3569666));
      Complex complex6 = complex2.pow(complex3);
      Complex complex7 = complex3.add((-799.3569666));
      complex3.cosh();
      complex2.sqrt();
      complex6.negate();
      Complex complex8 = complex2.multiply(complex4);
      complex5.subtract(complex8);
      complex0.readResolve();
      complex3.nthRoot(1033);
      complex7.hashCode();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(2.0);
      complex0.equals(complex1);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.exp();
      complex3.tanh();
      complex1.sqrt();
      complex1.tanh();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.valueOf(2.0);
      complex2.equals(complex5);
      complex2.sqrt();
      Complex.valueOf((-1708.6331));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex.valueOf(2.0);
      Complex complex0 = Complex.valueOf(0.0, 2.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      complex3.readResolve();
      complex2.conjugate();
      complex0.cosh();
      Complex complex4 = new Complex(2.0, (-1331.0249944265915));
      complex4.hashCode();
      complex1.divide((-285.64467103));
      complex3.add(2.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = Complex.valueOf(0.0, 1.2216413021087646);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.valueOf(1.2216413021087646);
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex0.pow(complex4);
      complex5.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.cosh();
      complex6.sqrt();
      complex5.ONE.negate();
      Complex complex7 = complex2.multiply(complex3);
      complex7.subtract(complex3);
      complex4.readResolve();
      complex6.nthRoot(280);
      complex2.pow(1.783686171956726E7);
      complex7.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.pow(0.0);
      Complex complex3 = complex1.sinh();
      Complex.valueOf(1669.99872);
      Complex complex4 = complex3.multiply(1669.99872);
      complex4.readResolve();
      complex4.readResolve();
      Complex complex5 = complex0.asin();
      complex4.cosh();
      complex0.ZERO.tanh();
      Complex complex6 = complex3.pow(complex5);
      Complex complex7 = complex2.exp();
      complex6.getField();
      Complex complex8 = complex4.negate();
      Complex complex9 = complex5.pow(1669.99872);
      complex7.nthRoot(1495);
      complex9.nthRoot(1495);
      complex8.abs();
      Complex complex10 = Complex.NaN;
      complex10.tan();
      complex0.reciprocal();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow((-1436.2623403116997));
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.ONE.multiply((-1436.2623403116997));
      complex3.NaN.readResolve();
      Object object0 = complex3.ZERO.readResolve();
      ((Complex) object0).I.negate();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.ZERO.pow(complex4);
      complex6.ZERO.exp();
      complex0.getField();
      complex3.getImaginary();
      Complex complex7 = complex2.negate();
      complex5.ONE.pow((-1436.2623403116997));
      complex7.nthRoot(1495);
      complex4.nthRoot(1495);
      complex7.abs();
      Complex complex8 = complex3.tanh();
      complex5.tan();
      complex8.reciprocal();
      complex4.tanh();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-4279.547));
      Complex complex1 = new Complex((-4279.547), (-4279.547));
      Complex complex2 = complex1.ONE.log();
      complex2.ONE.log();
      complex2.INF.pow(complex0);
      Complex complex3 = complex0.subtract(complex1);
      complex3.INF.multiply(2973);
      Complex complex4 = complex0.subtract((-2420.99771417));
      Complex.valueOf(1.2991611957550049, 1.2991611957550049);
      complex0.isInfinite();
      complex1.multiply(86);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(125.0, 125.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.INF.acos();
      Complex complex3 = complex0.I.subtract((-4.820065619207094E-9));
      complex3.I.exp();
      Complex complex4 = complex1.INF.tanh();
      complex4.ZERO.multiply(complex1);
      Complex complex5 = complex0.I.atan();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = new Complex((-994008.0));
      Complex complex8 = complex7.multiply(complex6);
      complex8.INF.subtract((-4.820065619207094E-9));
      complex3.getField();
      complex5.conjugate();
      complex7.tanh();
      complex2.getArgument();
      complex0.subtract((-994008.0));
      Complex complex9 = complex2.cosh();
      Complex complex10 = Complex.ONE;
      complex10.multiply((-814));
      complex1.getField();
      complex5.tanh();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      complex1.getImaginary();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.I.multiply(1);
      Complex complex3 = Complex.valueOf(1228.1151, Double.NaN);
      complex3.INF.abs();
      complex1.tan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.createComplex(Double.NaN, Double.NaN);
      complex0.toString();
      complex0.I.acos();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.reciprocal();
      complex2.INF.getArgument();
      Complex complex3 = complex1.tan();
      Complex complex4 = complex3.NaN.negate();
      complex2.INF.abs();
      Complex complex5 = complex1.negate();
      complex5.INF.conjugate();
      Complex complex6 = complex4.multiply(0.7853981633974483);
      complex6.abs();
      complex4.sqrt();
      complex3.exp();
      complex3.pow((-1771.19395));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-4279.547));
      Complex complex1 = new Complex((-4279.547), (-4279.547));
      Complex complex2 = complex1.ONE.log();
      complex2.ONE.log();
      complex2.INF.pow(complex0);
      Complex complex3 = complex0.subtract(complex1);
      Complex complex4 = complex3.INF.multiply(2973);
      Complex complex5 = complex0.subtract((-2420.99771417));
      Complex.valueOf(1.2991611957550049, 1.2991611957550049);
      complex0.isInfinite();
      complex0.toString();
      Complex complex6 = complex0.subtract(complex5);
      Complex complex7 = complex6.reciprocal();
      complex6.multiply(complex3);
      complex5.getField();
      Complex complex8 = complex0.I.conjugate();
      Complex complex9 = complex8.tanh();
      complex8.getArgument();
      complex4.subtract(Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.cosh();
      complex10.ONE.multiply((-814));
      complex5.getField();
      complex7.tanh();
      complex9.cos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isNaN();
      complex0.ONE.sqrt1z();
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.ONE.acos();
      complex0.NaN.conjugate();
      complex0.negate();
      complex1.ZERO.tan();
      Complex complex4 = complex0.asin();
      complex3.I.toString();
      Complex complex5 = Complex.valueOf((-889.642422787449));
      complex4.conjugate();
      Complex complex6 = complex5.reciprocal();
      complex6.cos();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ZERO.sqrt1z();
      Complex complex3 = complex1.INF.sqrt1z();
      complex0.abs();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex1.I.tan();
      complex5.I.sqrt1z();
      Complex complex6 = complex3.reciprocal();
      complex3.NaN.divide(complex6);
      Complex complex7 = complex0.divide(1.0);
      complex3.toString();
      Complex complex8 = complex0.reciprocal();
      complex8.ZERO.asin();
      complex8.ZERO.getArgument();
      Complex complex9 = complex0.multiply(0.0);
      complex2.toString();
      complex9.hashCode();
      Complex complex10 = complex0.asin();
      complex10.I.pow(complex7);
      Complex complex11 = complex6.tan();
      Complex complex12 = complex11.multiply(complex4);
      complex4.getField();
      Complex.valueOf(1.0, (-3.2117127164185917E-77));
      complex8.sqrt();
      Complex complex13 = complex2.acos();
      complex11.add(complex12);
      complex13.pow(1.0);
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getArgument();
      complex0.ZERO.nthRoot(37);
      Complex complex1 = new Complex(4.406062052965071E200);
      Complex complex2 = complex0.I.subtract(complex1);
      complex2.createComplex(0.7853981633974483, 0.0);
      Complex complex3 = complex0.negate();
      complex3.NaN.nthRoot(1);
      Complex complex4 = complex3.ONE.asin();
      Complex complex5 = complex4.ONE.subtract(complex0);
      complex4.NaN.tan();
      complex0.getReal();
      complex0.equals(complex3);
      Complex complex6 = complex0.ONE.exp();
      complex0.readResolve();
      complex0.isInfinite();
      complex5.tanh();
      complex1.sin();
      complex0.conjugate();
      complex1.acos();
      complex6.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0, (-2518.4633198174406));
      Complex complex1 = Complex.valueOf(1.0, (-2518.4633198174406));
      complex0.getArgument();
      Complex complex2 = complex0.sin();
      Complex.valueOf((-2518.4633198174406));
      complex2.toString();
      Complex complex3 = complex0.sinh();
      complex0.getArgument();
      complex1.INF.hashCode();
      Complex complex4 = complex3.sin();
      complex4.divide((-1.5703992592896536));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      complex0.ZERO.exp();
      Complex complex5 = complex1.tanh();
      Complex complex6 = complex5.INF.sqrt();
      complex5.INF.tanh();
      Complex complex7 = Complex.I;
      complex2.equals(complex7);
      complex6.NaN.sqrt();
      Complex.valueOf((-441.367));
      complex6.tan();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.divide(1848.3);
      Complex complex3 = complex1.INF.sinh();
      complex1.isInfinite();
      complex0.I.toString();
      complex0.NaN.tanh();
      Complex complex4 = complex0.subtract(2.0);
      Complex complex5 = complex4.NaN.cos();
      complex0.toString();
      complex1.isNaN();
      Complex complex6 = complex0.tanh();
      complex1.getField();
      Complex complex7 = complex1.divide(complex0);
      Complex complex8 = new Complex((-1.0));
      Complex complex9 = complex7.I.pow(complex8);
      Complex complex10 = complex9.I.asin();
      complex6.getField();
      complex3.multiply((-1452.4096613875222));
      Complex complex11 = Complex.valueOf((-1.0), (-1452.4096613875222));
      complex11.multiply(complex10);
      Complex.valueOf(59.341873399699);
      complex2.sin();
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.asin();
      complex0.INF.atan();
      Complex complex1 = Complex.valueOf(0.0, 525.0);
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex0.tan();
      Complex complex5 = complex1.multiply(complex3);
      complex3.NaN.cos();
      Complex complex6 = complex2.negate();
      complex6.cos();
      complex5.INF.acos();
      complex3.I.multiply(complex2);
      complex1.isNaN();
      complex5.readResolve();
      complex4.hashCode();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex((-3981.7213));
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = Complex.valueOf((-3981.7213), (-3981.7213));
      Complex complex3 = complex1.NaN.cosh();
      complex3.INF.toString();
      Complex complex4 = complex0.INF.tan();
      complex0.ZERO.toString();
      Complex complex5 = complex2.ONE.pow(complex1);
      complex0.abs();
      Complex complex6 = complex4.subtract(complex2);
      Complex complex7 = complex0.conjugate();
      Complex complex8 = complex2.I.tan();
      complex7.toString();
      complex8.I.acos();
      complex4.getImaginary();
      Complex complex9 = complex2.multiply(complex0);
      complex4.getReal();
      complex7.INF.tan();
      complex1.abs();
      complex9.getImaginary();
      complex7.toString();
      complex7.readResolve();
      Complex complex10 = complex0.sqrt();
      Complex complex11 = complex10.ZERO.subtract((-468.62734871));
      complex6.multiply(complex10);
      complex10.sqrt();
      complex5.log();
      complex9.getReal();
      complex11.add(complex3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sin();
      complex2.I.subtract(0.0);
      Complex complex3 = complex2.ZERO.add((-355.47103226186));
      complex3.INF.subtract(complex0);
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex4.ONE.createComplex((-4.019569741253664E-293), (-4.019569741253664E-293));
      Complex complex6 = complex1.multiply(complex0);
      Complex complex7 = complex6.add(complex5);
      complex6.I.add((-4.019569741253664E-293));
      complex1.sin();
      complex7.NaN.reciprocal();
      Complex complex8 = complex6.NaN.pow((-7.635830383612894E-133));
      Complex complex9 = Complex.valueOf((-2309.0));
      Complex complex10 = complex8.ZERO.atan();
      Complex complex11 = complex6.cosh();
      complex11.ONE.sqrt();
      complex5.exp();
      complex0.readResolve();
      complex5.isInfinite();
      complex5.acos();
      complex1.isInfinite();
      complex5.cos();
      complex9.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = new Complex(4224.50476, (-97.8659680143888));
      complex0.INF.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.subtract((-97.8659680143888));
      complex1.hashCode();
      complex2.getImaginary();
      Complex complex3 = complex1.NaN.sinh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.ZERO.multiply((-1669));
      complex5.INF.multiply((-1859.2009318671046));
      complex0.ZERO.abs();
      complex5.ZERO.subtract(complex4);
      Complex complex6 = complex4.ZERO.createComplex((-97.8659680143888), (-97.8659680143888));
      complex6.INF.reciprocal();
      Complex complex7 = complex1.subtract(complex2);
      complex4.ONE.atan();
      complex7.add(4224.50476);
      complex6.toString();
      complex6.isInfinite();
      complex2.reciprocal();
      complex7.tan();
      complex3.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.ONE.add(2182.88);
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.INF.sin();
      Complex.valueOf(0.0, 0.0);
      Complex complex5 = complex4.ONE.multiply(complex0);
      Complex complex6 = complex5.ZERO.add(complex4);
      Complex complex7 = complex6.ONE.add(6.283185307179586);
      complex0.INF.hashCode();
      Complex complex8 = complex0.NaN.divide((-2111.627003960294));
      Complex complex9 = complex8.NaN.multiply(2217.585630387302);
      complex8.hashCode();
      Complex complex10 = complex9.ZERO.conjugate();
      complex8.ZERO.cosh();
      Complex complex11 = complex0.sqrt1z();
      Complex complex12 = Complex.I;
      Complex complex13 = complex11.ZERO.pow(complex12);
      complex13.NaN.sinh();
      complex11.multiply(872.0);
      complex4.readResolve();
      complex7.divide(0.0);
      complex5.acos();
      complex5.pow(complex2);
      complex7.sqrt();
      complex4.subtract(complex0);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = complex4.INF.sinh();
      Complex complex6 = complex4.ONE.multiply(1);
      Complex complex7 = complex6.subtract((double) 1);
      complex7.I.acos();
      complex0.I.add(complex5);
      complex7.I.readResolve();
      complex1.getReal();
      complex2.divide(complex6);
      Complex complex8 = complex6.multiply(1);
      complex6.isInfinite();
      complex2.isNaN();
      Complex complex9 = complex0.exp();
      complex3.readResolve();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex5.multiply(complex3);
      complex9.cos();
      complex7.subtract(0.0);
      complex8.negate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      double double0 = 681.8108631021003;
      Complex complex0 = new Complex(1946.7704037133, 681.8108631021003);
      Complex complex1 = complex0.INF.sinh();
      Complex.valueOf(1943.6581689127072);
      Complex complex2 = complex0.ZERO.multiply((-2722));
      Complex complex3 = complex0.ZERO.divide(complex2);
      complex3.ZERO.readResolve();
      complex1.I.add(complex2);
      Complex complex4 = complex1.INF.divide(4870.9);
      complex4.abs();
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2395.4762355715493, 2395.4762355715493);
      complex0.I.pow((-429.1));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(125.0, 125.0);
      Complex complex1 = complex0.sqrt();
      complex0.INF.acos();
      double double0 = (-4.820065619207094E-9);
      Complex complex2 = complex0.I.subtract((-4.820065619207094E-9));
      complex2.I.exp();
      complex1.INF.tanh();
      complex0.I.atan();
      Complex complex3 = Complex.valueOf(125.0, 1.8380461271305958E74);
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex0.subtract(complex1);
      complex3.I.getArgument();
      Complex complex4 = complex1.ONE.multiply(997);
      complex3.conjugate();
      Complex complex5 = complex2.pow(1524.5594);
      Complex complex6 = complex1.sinh();
      complex6.INF.multiply(997);
      complex4.INF.atan();
      complex5.reciprocal();
      complex6.acos();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.pow(0.0);
      Complex complex2 = complex0.NaN.sinh();
      Complex complex3 = complex1.ONE.multiply(0.0);
      complex3.NaN.readResolve();
      complex3.ZERO.readResolve();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex5.ZERO.pow(complex4);
      complex6.ZERO.exp();
      complex2.getField();
      complex3.getImaginary();
      Complex complex7 = complex2.negate();
      complex5.ONE.pow(0.0);
      complex7.nthRoot(1495);
      complex4.nthRoot(1495);
      complex7.abs();
      Complex complex8 = complex3.tanh();
      complex5.tan();
      complex8.reciprocal();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = complex0.I.sinh();
      Complex complex3 = complex2.ZERO.multiply(complex0);
      Complex complex4 = Complex.ONE;
      complex2.ZERO.abs();
      complex4.ONE.getField();
      Complex complex5 = complex0.subtract(complex4);
      complex5.NaN.sqrt1z();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex4.acos();
      complex1.ONE.hashCode();
      complex4.getImaginary();
      complex2.NaN.sqrt1z();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      Complex complex10 = complex4.sin();
      complex9.INF.toString();
      complex10.INF.subtract(0.0);
      Complex complex11 = complex9.cos();
      complex1.isInfinite();
      complex8.NaN.divide(complex4);
      Complex complex12 = complex11.ZERO.exp();
      complex11.ZERO.readResolve();
      Complex complex13 = complex11.acos();
      Complex complex14 = complex13.negate();
      complex3.exp();
      complex12.negate();
      complex8.abs();
      complex2.createComplex(0.0, 0.0);
      complex14.sqrt();
      complex7.tanh();
      complex2.equals("(Infinity, Infinity)");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(460.0);
      Complex complex2 = complex0.INF.sqrt();
      Complex complex3 = complex1.ONE.asin();
      Complex complex4 = complex0.divide(complex1);
      complex1.toString();
      Complex complex5 = complex0.INF.tan();
      complex5.tanh();
      complex5.I.readResolve();
      complex4.isNaN();
      Complex complex6 = complex3.pow(complex0);
      complex6.ONE.sinh();
      Complex complex7 = complex3.asin();
      Complex complex8 = complex7.ONE.asin();
      Complex complex9 = Complex.valueOf((-2453.88047985));
      Complex complex10 = complex1.INF.divide(complex9);
      complex8.add(460.0);
      Complex complex11 = complex8.NaN.conjugate();
      Complex complex12 = complex1.negate();
      Complex complex13 = complex2.divide(20.0);
      Complex complex14 = complex4.multiply(complex2);
      complex12.multiply(complex13);
      complex11.subtract(454.20015459101);
      complex14.subtract(complex2);
      complex10.isInfinite();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ONE.tanh();
      Complex complex1 = complex0.conjugate();
      complex0.INF.subtract(3.138217752973845E-196);
      complex1.isNaN();
      complex0.abs();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.ONE.divide(0.0);
      Complex complex3 = complex2.I.reciprocal();
      complex1.INF.negate();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.ONE.multiply(complex0);
      Complex complex5 = complex0.atan();
      Complex complex6 = complex2.multiply(complex3);
      Object object0 = complex5.readResolve();
      complex0.equals(object0);
      complex1.getField();
      Complex complex7 = complex6.sqrt1z();
      complex5.getField();
      complex5.toString();
      Complex complex8 = complex2.atan();
      complex7.isNaN();
      complex7.sqrt();
      complex8.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.INF.conjugate();
      complex2.NaN.sinh();
      Complex complex3 = Complex.valueOf(0.0, 1.5234465914578058E-153);
      complex2.INF.abs();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.I.pow(complex4);
      Complex complex6 = complex2.ZERO.multiply(73);
      complex3.readResolve();
      Complex complex7 = complex0.log();
      Complex complex8 = complex7.ZERO.sqrt();
      complex8.I.cosh();
      Complex complex9 = complex7.sqrt();
      complex7.NaN.sqrt1z();
      Complex complex10 = Complex.valueOf(Double.POSITIVE_INFINITY, 1.5234465914578058E-153);
      complex9.ZERO.cosh();
      complex7.NaN.pow(2.7925807446276126E-8);
      complex7.ONE.asin();
      Complex complex11 = complex7.pow(complex2);
      complex5.ONE.multiply(complex6);
      complex7.getReal();
      Complex.valueOf((double) 73, (double) 73);
      Complex complex12 = complex4.sqrt1z();
      complex6.getReal();
      complex3.abs();
      Complex complex13 = complex6.cosh();
      complex5.sinh();
      complex3.divide(0.0);
      complex13.tanh();
      complex10.add(complex11);
      complex12.divide(complex7);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.subtract(1506.9522959642);
      complex0.getField();
      try { 
        complex1.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.conjugate();
      Complex complex2 = complex0.multiply((-586));
      Complex complex3 = complex2.I.log();
      Complex complex4 = Complex.valueOf((double) (-586));
      complex4.multiply((-129.2255394894));
      Complex complex5 = complex4.I.multiply((double) (-586));
      complex0.getReal();
      Complex complex6 = complex1.subtract(complex3);
      complex6.I.sqrt();
      Complex.valueOf((-1756.629019573202));
      complex0.isNaN();
      Complex complex7 = complex0.exp();
      Complex complex8 = complex1.acos();
      complex7.pow(complex8);
      Complex complex9 = Complex.valueOf(2.417689800262451, (-707.288579));
      Complex complex10 = complex7.acos();
      complex10.cosh();
      complex0.conjugate();
      complex5.negate();
      complex9.isNaN();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = Complex.valueOf(0.0, 1.2216413021087646);
      Complex complex2 = complex0.ONE.divide(complex1);
      Complex complex3 = Complex.valueOf(1.2216413021087646);
      Complex complex4 = Complex.valueOf(2.0);
      Complex complex5 = complex0.pow(complex4);
      complex5.ONE.add(Double.POSITIVE_INFINITY);
      Complex complex6 = complex5.cosh();
      complex6.sqrt();
      complex5.ONE.negate();
      Complex complex7 = complex2.multiply(complex3);
      complex7.subtract(complex3);
      complex4.readResolve();
      complex6.nthRoot(280);
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 1118.1876394);
      complex0.ONE.createComplex(0.0, (-20.0));
      try { 
        complex0.ZERO.nthRoot((-37));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -37
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.ONE.negate();
      complex1.I.toString();
      complex1.sqrt1z();
      Complex complex3 = Complex.valueOf((-1012.17455906), 839.83827);
      complex2.ZERO.pow(complex3);
      Complex complex4 = complex2.cos();
      complex1.I.log();
      Complex complex5 = complex4.ZERO.conjugate();
      complex5.cos();
      complex4.INF.readResolve();
      complex0.exp();
      complex5.negate();
      Complex complex6 = complex4.pow(72.101526336472);
      complex6.INF.cosh();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.add(523.02648);
      Complex complex1 = Complex.valueOf(1906.25095088, 69.380409608214);
      complex1.multiply(complex0);
      complex0.add(523.02648);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-9.040643863751471E-8), (-9.040643863751471E-8));
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex1.INF.atan();
      Complex complex4 = complex3.INF.negate();
      complex0.equals(complex1);
      complex1.INF.hashCode();
      complex3.I.exp();
      Complex complex5 = complex1.divide(complex0);
      Complex complex6 = complex5.cosh();
      Complex complex7 = complex6.ZERO.acos();
      Complex complex8 = complex6.INF.multiply((-9.040643863751471E-8));
      Complex complex9 = Complex.valueOf((-9.040643863751471E-8), (-9.040643863751471E-8));
      Complex complex10 = complex3.ONE.tan();
      complex10.NaN.getArgument();
      assertEquals(1.557407724654902, complex10.getReal(), 0.01);
      
      Complex complex11 = complex3.ONE.pow(complex8);
      complex9.ZERO.cos();
      complex2.cos();
      complex3.tan();
      Complex complex12 = complex5.asin();
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      
      Complex complex13 = complex9.ZERO.subtract(complex4);
      Complex complex14 = complex13.I.cos();
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex1.ZERO.cosh();
      complex8.getImaginary();
      Complex complex16 = complex2.subtract(complex6);
      Complex complex17 = complex16.NaN.sqrt1z();
      complex8.INF.createComplex(Double.NaN, (-9.040643863751471E-8));
      Complex complex18 = complex17.ONE.pow(complex9);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      
      Complex complex19 = complex0.ONE.asin();
      assertEquals(1.5707963267948966, complex19.getReal(), 0.01);
      assertTrue(complex19.equals((Object)complex7));
      
      Complex complex20 = complex2.multiply(37);
      complex8.divide(Double.NaN);
      complex11.tanh();
      complex15.createComplex(1007.68147916078, 37);
      Complex complex21 = complex1.divide((double) 37);
      assertEquals((-2.4434172604733707E-9), complex21.getReal(), 0.01);
      
      complex11.subtract(complex2);
      assertNotSame(complex8, complex20);
      assertFalse(complex6.equals((Object)complex5));
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertTrue(complex11.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex19));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4323.4);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.ZERO.cos();
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex3.ZERO.asin();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = complex0.log();
      Complex complex6 = complex5.ZERO.subtract(complex0);
      assertEquals((-4323.4), complex6.getReal(), 0.01);
      
      complex0.abs();
      Complex complex7 = complex1.ONE.divide(complex3);
      assertSame(complex7, complex3);
      
      Complex complex8 = complex2.multiply(4323.4);
      assertEquals(4323.4, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex1.cos();
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2921.5891);
      Complex complex1 = complex0.tanh();
      assertEquals((-0.006471838028106682), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(2921.5891, complex0.getImaginary(), 0.01);
      assertEquals(0.9646036226410415, complex1.getReal(), 0.01);
      assertEquals(2.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.ONE.negate();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex2.ONE.reciprocal();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertFalse(complex4.equals((Object)complex3));
      assertEquals(1.0, complex4.getReal(), 0.01);
      
      complex2.ZERO.createComplex((-1552.41), 20.0);
      Complex complex5 = (Complex)complex2.ZERO.readResolve();
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex2.ZERO.conjugate();
      Complex complex7 = complex1.cosh();
      complex2.hashCode();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.equals((Object)complex6));
      
      Complex complex8 = complex7.divide((-1870.049788));
      assertNotSame(complex8, complex1);
      assertFalse(complex8.equals((Object)complex2));
      assertNotSame(complex8, complex6);
      assertTrue(complex8.isNaN());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1091.2996423), 0.0);
      complex0.ZERO.sinh();
      complex0.negate();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex((-4.0873400635183405E225), 1502.1919458735);
      complex0.I.tanh();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = new Complex(200.772886, 20.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = Complex.valueOf((-1364.1));
      Complex complex3 = Complex.valueOf(20.0, 3218.8838395);
      complex3.ONE.readResolve();
      Complex complex4 = complex3.ZERO.divide(complex2);
      Complex complex5 = complex1.NaN.tanh();
      Complex complex6 = complex5.I.pow(complex2);
      assertEquals(0.9876883405951684, complex6.getReal(), 0.01);
      
      Complex complex7 = Complex.valueOf(20.0, 200.772886);
      Complex complex8 = complex0.multiply(298);
      Complex.valueOf(20.0, 0.0);
      Complex complex9 = complex8.ONE.tanh();
      Object object0 = complex5.readResolve();
      Complex.valueOf((double) 298, 4541.12);
      Complex complex10 = complex8.acos();
      Complex complex11 = complex10.sinh();
      assertEquals(0.7674630076781765, complex11.getImaginary(), 0.01);
      assertEquals(0.06420303181311453, complex11.getReal(), 0.01);
      
      Complex complex12 = complex8.acos();
      Complex complex13 = complex12.I.divide(complex7);
      assertEquals(4.91282779650938E-4, complex13.getImaginary(), 0.01);
      assertEquals(0.004931813075631045, complex13.getReal(), 0.01);
      
      complex12.ONE.getField();
      complex12.toString();
      Complex complex14 = complex12.reciprocal();
      assertEquals(7.255847275723311E-4, complex14.getReal(), 0.01);
      
      Object object1 = complex5.readResolve();
      assertTrue(complex5.equals((Object)object0));
      
      Complex complex15 = complex9.exp();
      complex4.hashCode();
      assertFalse(complex4.equals((Object)object1));
      
      Complex complex16 = Complex.INF;
      complex16.conjugate();
      Complex complex17 = complex15.add(complex16);
      Complex complex18 = complex17.conjugate();
      assertEquals(2.14168768474935, complex15.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex18.getImaginary(), 0.01);
  }
}
