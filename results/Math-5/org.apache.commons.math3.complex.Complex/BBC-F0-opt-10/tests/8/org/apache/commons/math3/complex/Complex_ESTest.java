/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:58:44 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sin();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = new Complex(1872.3608656600184, Double.POSITIVE_INFINITY);
      complex1.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sin();
      complex1.sqrt();
      complex0.sqrt1z();
      double double0 = 20.0;
      Complex complex2 = new Complex(129.258849, 20.0);
      complex2.tan();
      Complex.valueOf(Double.POSITIVE_INFINITY, 129.258849);
      try { 
        complex2.nthRoot((-3036));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,036
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sin();
      complex0.sqrt();
      Complex complex1 = new Complex(1872.3608656600184, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex1.tan();
      complex3.ONE.pow(Double.POSITIVE_INFINITY);
      complex2.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Complex complex0 = new Complex(1.2254085656601853E-156, 1.2254085656601853E-156);
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex0.multiply(1.2254085656601853E-156);
      complex0.getField();
      complex1.asin();
      complex2.reciprocal();
      Complex complex3 = complex2.multiply(967.61682139815);
      complex3.NaN.log();
      Complex complex4 = Complex.NaN;
      complex3.tan();
      Complex complex5 = Complex.ZERO;
      complex2.readResolve();
      complex0.ONE.multiply((-1));
      // Undeclared exception!
      complex2.nthRoot(6399);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = new Complex(1872.3608656600184, Double.POSITIVE_INFINITY);
      complex1.tan();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.divide(complex2);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Complex complex0 = Complex.valueOf(406.874682677146);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.ONE.asin();
      complex2.INF.pow(406.874682677146);
      complex1.I.sin();
      Complex complex3 = complex0.sinh();
      complex3.ONE.pow(Double.NaN);
      Complex complex4 = complex3.subtract((-942.0));
      complex0.ONE.getField();
      Complex complex5 = complex3.createComplex((-942.0), 406.874682677146);
      Complex complex6 = complex5.negate();
      complex6.ZERO.abs();
      Complex complex7 = complex4.add(complex0);
      Complex complex8 = complex0.INF.reciprocal();
      complex8.I.sin();
      Complex complex9 = complex0.divide(406.874682677146);
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex7.sqrt1z();
      complex7.add(complex9);
      Complex complex12 = complex3.sqrt();
      Complex complex13 = complex11.conjugate();
      complex9.INF.multiply((-1.8853982316037226E201));
      Complex.valueOf(1057.8);
      complex10.tanh();
      Complex complex14 = complex11.sin();
      complex4.tan();
      Complex complex15 = complex7.cosh();
      Complex complex16 = complex1.tan();
      complex16.ZERO.tanh();
      complex13.cos();
      complex15.divide(complex3);
      complex14.multiply(Double.POSITIVE_INFINITY);
      complex12.conjugate();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(410.487919061703, Double.POSITIVE_INFINITY);
      complex1.cosh();
      Complex complex2 = complex0.sqrt();
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.INF.reciprocal();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex3.NaN.add(complex1);
      complex2.ONE.divide(351.148);
      Complex complex5 = complex4.ZERO.multiply(286);
      complex3.nthRoot(868);
      complex2.log();
      Complex.valueOf((double) 868, 6.283185307179586);
      complex3.getField();
      complex5.INF.getArgument();
      Complex complex6 = complex2.add(1414.523323430637);
      complex6.ONE.negate();
      Complex.valueOf(1.2130804652329134E-7);
      complex3.readResolve();
      complex5.conjugate();
      Complex.valueOf(20.0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.reciprocal();
      complex0.multiply(complex3);
      complex1.getField();
      complex0.asin();
      complex0.reciprocal();
      complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.tan();
      Complex complex6 = new Complex(986.95484, 3511.320133722297);
      complex5.I.subtract(complex6);
      Complex complex7 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Complex complex0 = new Complex(1248.614);
      Complex complex1 = Complex.valueOf(1248.614);
      Complex complex2 = complex1.divide(complex0);
      int int0 = (-2168);
      Complex complex3 = complex0.multiply((-2168));
      Complex complex4 = complex2.pow(2.0);
      complex3.add(complex2);
      complex2.negate();
      double double0 = 4813635.0;
      complex4.INF.acos();
      try { 
        complex3.I.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Complex complex0 = new Complex((-1.0), (-1.0));
      Complex complex1 = Complex.ONE;
      complex1.ONE.abs();
      Complex complex2 = complex1.multiply(4.218682431618625E286);
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.I.add(complex2);
      complex5.acos();
      complex1.toString();
      complex3.INF.sqrt();
      complex4.ONE.getField();
      complex4.toString();
      complex4.ZERO.toString();
      complex3.ZERO.getField();
      Complex complex6 = complex3.subtract(complex0);
      Complex complex7 = complex0.multiply(1073741824);
      complex6.abs();
      Complex complex8 = Complex.ZERO;
      complex7.INF.hashCode();
      Complex complex9 = complex0.pow(complex8);
      complex8.pow(complex9);
      Complex.valueOf(1.0);
      Complex complex10 = complex0.sinh();
      complex7.multiply(7.861419797923639E-8);
      complex4.readResolve();
      Complex complex11 = Complex.valueOf(1.0);
      complex11.ZERO.acos();
      complex10.reciprocal();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Complex complex0 = Complex.valueOf(601.881183364113);
      complex0.ONE.createComplex(601.881183364113, Double.NaN);
      Complex complex1 = complex0.subtract((-3745.7641065203547));
      try { 
        complex1.nthRoot((-4326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,326
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Complex complex0 = new Complex((-936.078384));
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.valueOf(1.2171312846476212E-9);
      complex2.multiply(3708);
      Complex complex3 = Complex.valueOf(1.2171312846476212E-9, 2148.43882091407);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.divide(complex3);
      Complex complex6 = complex4.cos();
      Complex complex7 = complex4.pow(2148.43882091407);
      Complex.valueOf((-2703.00454), 1.2171312846476212E-9);
      complex4.tan();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex8.multiply((-19));
      Complex complex10 = Complex.ZERO;
      Complex complex11 = new Complex(2148.43882091407, 1.2171312846476212E-9);
      complex11.abs();
      Complex complex12 = Complex.valueOf(1.2171312846476212E-9);
      Complex complex13 = complex12.cosh();
      complex13.ZERO.cosh();
      complex7.toString();
      Object object0 = new Object();
      Complex complex14 = Complex.I;
      complex9.equals(complex14);
      Object object1 = new Object();
      Object object2 = complex5.readResolve();
      complex4.equals(object2);
      Complex complex15 = complex6.cos();
      complex15.I.toString();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.log();
      complex0.INF.tan();
      complex0.createComplex(2041.0753, 2041.0753);
      Complex.valueOf(12149.923798364209);
      Complex complex1 = complex0.tanh();
      Complex.valueOf(2041.0753, 3587.4880986579);
      Complex complex2 = complex1.I.negate();
      complex0.readResolve();
      complex2.tanh();
      complex1.sinh();
      Complex.valueOf(0.0010682866062207885);
      Complex.valueOf(2958.3580677, 12149.923798364209);
      complex2.atan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.nthRoot(2397);
      complex0.abs();
      Complex complex1 = complex0.sinh();
      complex1.asin();
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2392.182);
      complex0.readResolve();
      Complex complex1 = complex0.multiply(2392.182);
      complex1.I.tanh();
      complex1.INF.abs();
      Complex complex2 = complex1.asin();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.ONE.acos();
      complex1.ONE.add(0.0);
      complex0.getField();
      Complex complex3 = complex0.NaN.add(complex2);
      Complex complex4 = complex3.NaN.atan();
      complex4.pow(complex3);
      Complex complex5 = complex4.NaN.atan();
      Complex complex6 = complex2.multiply((-1849));
      Complex complex7 = complex6.ONE.cosh();
      complex2.equals(complex3);
      complex5.equals(complex4);
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Complex complex0 = new Complex((-1933.7204306995206));
      complex0.getArgument();
      Complex complex1 = Complex.I;
      complex1.I.acos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.divide(complex2);
      Complex complex5 = Complex.I;
      complex5.cos();
      complex3.pow(507.29280062310096);
      Complex complex6 = Complex.I;
      complex6.tan();
      complex1.sqrt();
      Complex complex7 = Complex.I;
      complex7.tan();
      complex7.log();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Complex complex0 = new Complex((-936.078384), (-20.0));
      complex0.readResolve();
      Complex complex1 = complex0.multiply((-2449));
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex2.sinh();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.subtract(17.0);
      complex2.divide((-2360.871139035));
      complex4.readResolve();
      Complex complex5 = Complex.valueOf((-20.0));
      Object object0 = complex5.readResolve();
      complex2.equals(object0);
      complex3.acos();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.abs();
      Complex complex2 = complex1.cosh();
      Complex.valueOf(0.8813735870195428);
      complex2.NaN.acos();
      Complex complex3 = complex2.INF.add(complex1);
      complex0.equals(complex1);
      Complex complex4 = complex1.createComplex((-734.3), 0.8813735870195428);
      Complex complex5 = complex4.I.multiply(complex3);
      Complex complex6 = complex5.I.tanh();
      complex3.ZERO.getArgument();
      complex4.INF.multiply(1391);
      Complex complex7 = Complex.valueOf(2.7689167860486803, (-395.0747669142));
      complex1.atan();
      complex1.add(complex7);
      complex3.abs();
      complex6.add(0.8813735870195428);
      complex3.asin();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Complex complex0 = new Complex((-936.078384));
      complex0.ONE.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.INF.atan();
      complex3.ONE.log();
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex0.I.divide((-936.078384));
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.INF.divide(complex6);
      complex8.ZERO.cos();
      Complex complex9 = complex0.pow((-936.078384));
      Complex.valueOf(0.0, 0.0);
      complex0.NaN.asin();
      complex9.abs();
      complex0.nthRoot(1830);
      complex1.abs();
      complex1.equals(complex2);
      complex5.nthRoot(1830);
      complex6.multiply(complex5);
      complex7.tan();
      complex0.isNaN();
      Complex complex10 = Complex.NaN;
      complex10.tanh();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Complex complex0 = new Complex((-936.078384));
      complex0.ONE.getArgument();
      Complex complex1 = Complex.ZERO;
      complex0.ONE.log();
      Complex complex2 = complex0.I.divide((-936.078384));
      Complex complex3 = complex1.INF.divide(complex2);
      Complex complex4 = complex3.ZERO.cos();
      complex0.pow((-936.078384));
      complex4.tan();
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.tan();
      complex6.NaN.log();
      complex5.getImaginary();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 6.283185307179586);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Complex complex0 = new Complex((-936.078384));
      complex0.getArgument();
      Complex complex1 = Complex.I;
      complex0.acos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.add(complex0);
      Complex complex4 = (Complex)complex3.readResolve();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.pow((-1.4345560712078123));
      Complex complex7 = new Complex(1218.4036768, 1475.08634);
      complex7.cosh();
      complex6.atan();
      complex2.tanh();
      complex4.nthRoot(1305);
      complex0.cos();
      complex5.reciprocal();
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex0.INF.divide(2255.30003909292);
      Complex complex3 = new Complex(1326.2770437244, 1326.2770437244);
      Complex complex4 = complex3.ONE.pow(complex1);
      complex2.I.acos();
      Complex complex5 = complex3.ONE.sin();
      Complex complex6 = complex4.INF.asin();
      complex3.I.multiply(325);
      Complex complex7 = complex0.ZERO.multiply(complex3);
      Complex complex8 = complex7.NaN.atan();
      complex0.abs();
      Complex complex9 = complex7.log();
      Complex.valueOf(0.0);
      complex9.INF.exp();
      complex2.isInfinite();
      Complex complex10 = complex6.cos();
      complex10.ZERO.subtract(399.0);
      complex9.multiply((-1319));
      complex7.acos();
      complex1.reciprocal();
      complex5.add(complex8);
      Complex.valueOf(359.1340565826349, 2293.598);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1050.1368, 2.8071891156165334);
      complex0.toString();
      Complex complex1 = Complex.valueOf((-1986.464), (-2706.0032));
      Complex complex2 = complex1.ZERO.negate();
      complex2.conjugate();
      complex0.INF.getArgument();
      Complex complex3 = complex1.ONE.divide((-2038.247005162628));
      Complex complex4 = complex3.conjugate();
      complex4.exp();
      complex1.abs();
      Complex complex5 = complex1.sqrt1z();
      complex5.negate();
      complex5.ONE.readResolve();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex6.NaN.cosh();
      Complex complex8 = complex5.I.cos();
      complex8.I.multiply((-3668.7063762425128));
      Complex complex9 = complex5.sin();
      Complex complex10 = complex0.divide(complex9);
      Complex complex11 = complex5.ZERO.add(complex3);
      complex5.INF.reciprocal();
      Complex.valueOf((-2038.247005162628));
      complex9.ZERO.getField();
      complex10.sqrt1z();
      complex9.cosh();
      complex7.getImaginary();
      Complex complex12 = Complex.valueOf(659.732, (-2038.247005162628));
      complex12.conjugate();
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      complex0.add(complex1);
      complex1.readResolve();
      double double0 = 1475.08634;
      complex0.pow(1475.08634);
      Complex complex2 = complex1.reciprocal();
      complex2.tan();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.negate();
      Complex complex5 = complex3.sinh();
      Complex complex6 = Complex.INF;
      Complex complex7 = complex6.sqrt();
      Complex complex8 = Complex.I;
      complex8.divide(complex7);
      Complex complex9 = complex4.cos();
      complex3.cos();
      complex4.pow(complex0);
      Complex complex10 = complex5.log();
      Complex complex11 = Complex.NaN;
      complex11.tanh();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.valueOf(1475.08634, 1475.08634);
      Complex complex14 = complex9.multiply(complex13);
      complex6.acos();
      complex13.subtract(complex14);
      try { 
        complex10.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Complex complex0 = new Complex(2258.1148);
      Complex complex1 = complex0.tan();
      complex0.abs();
      Complex complex2 = Complex.INF;
      complex2.nthRoot(1830);
      complex0.abs();
      complex2.equals(complex0);
      complex0.nthRoot(1830);
      Complex complex3 = complex1.multiply(complex0);
      complex1.tan();
      complex1.isNaN();
      Complex complex4 = complex3.tanh();
      complex4.I.hashCode();
      complex4.I.tanh();
      complex2.sqrt();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Complex complex0 = new Complex(2258.1148);
      complex0.tan();
      Complex complex1 = complex0.pow(2258.1148);
      complex0.toString();
      complex1.nthRoot(1201);
      Complex complex2 = complex0.sinh();
      complex2.tanh();
      complex2.abs();
      complex1.asin();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.add((-1.0));
      Complex.valueOf(792.6667974568288);
      Complex complex5 = complex4.cos();
      complex5.log();
      complex0.log();
      complex0.pow(complex1);
      Complex complex6 = Complex.I;
      complex6.multiply(Double.NaN);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.log();
      complex2.subtract(complex4);
      complex4.sqrt();
      Complex complex5 = complex1.divide(31.645173);
      Complex complex6 = Complex.valueOf((-20.0), 31.645173);
      Complex complex7 = complex6.tanh();
      complex6.divide(complex3);
      Complex complex8 = Complex.INF;
      complex8.cos();
      Complex complex9 = Complex.ZERO;
      complex9.pow(70.62109712938769);
      Complex complex10 = Complex.valueOf(0.0, (-20.0));
      Complex complex11 = complex0.asin();
      complex2.abs();
      complex1.INF.multiply(0.0);
      complex7.nthRoot(1830);
      complex5.abs();
      complex11.equals("");
      // Undeclared exception!
      complex10.nthRoot(2146373102);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Complex complex0 = new Complex((-1933.7204306995206));
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = (Complex)complex3.ONE.readResolve();
      Complex complex6 = complex4.I.pow(3.141592653589793);
      complex6.INF.toString();
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex7.tanh();
      Complex complex9 = Complex.valueOf(2258.1148, 0.0);
      complex9.multiply(complex2);
      complex8.getField();
      complex0.acos();
      complex3.subtract(complex5);
      complex6.nthRoot(688);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Complex complex0 = new Complex(2258.1148);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.tanh();
      Complex complex4 = complex0.multiply(complex2);
      complex1.getField();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.subtract(complex4);
      try { 
        complex6.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Complex complex0 = new Complex((-1933.7204306995206));
      complex0.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.subtract(complex3);
      Complex complex6 = complex4.sqrt();
      Complex complex7 = complex5.divide(3.141592653589793);
      Complex complex8 = complex7.tanh();
      Complex complex9 = complex4.divide(complex6);
      Complex complex10 = new Complex((-46.397476100739254), (-864.99));
      complex10.cos();
      complex4.pow((-46.397476100739254));
      complex8.tan();
      Complex complex11 = Complex.valueOf(2.0760536193847656);
      complex11.sqrt();
      complex9.tan();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = (Complex)complex0.ZERO.readResolve();
      Complex complex2 = complex0.ONE.multiply(1);
      Complex complex3 = complex2.tan();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.negate();
      Complex complex6 = complex2.sinh();
      Complex complex7 = Complex.valueOf((double) 1, (-309.256750384691));
      Complex complex8 = complex7.sqrt();
      Complex complex9 = complex6.divide(complex5);
      complex7.cos();
      Complex complex10 = complex9.cos();
      Complex complex11 = complex1.pow(complex10);
      Complex complex12 = complex6.log();
      complex6.tanh();
      Complex complex13 = Complex.ZERO;
      complex11.multiply(complex12);
      complex5.getField();
      Complex complex14 = complex3.acos();
      Complex complex15 = complex7.subtract(complex14);
      complex9.nthRoot(1);
      complex8.pow((-9.530545662611411E-8));
      complex15.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.ONE.multiply(1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.pow(complex2);
      complex2.getField();
      Complex complex4 = complex0.acos();
      complex4.NaN.atan();
      complex1.subtract(complex0);
      try { 
        complex3.nthRoot((-288));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -288
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Complex complex0 = new Complex(2258.1148);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(Double.NaN);
      Complex complex3 = complex2.subtract(complex1);
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.valueOf(1.0);
      Complex complex6 = complex5.divide(2258.1148);
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex2.divide(complex7);
      complex2.cos();
      Complex complex9 = complex8.pow(1.0);
      Complex.valueOf(0.0, (-3.0));
      complex9.asin();
      complex4.abs();
      complex1.nthRoot(1918);
      complex6.abs();
      complex1.equals(complex6);
      complex1.nthRoot(1830);
      complex3.multiply(complex5);
      complex5.tan();
      complex1.isNaN();
      Complex complex10 = Complex.ZERO;
      complex10.tanh();
      Complex complex11 = Complex.valueOf(1930.38794709376);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Complex complex0 = new Complex((-1933.7204306995206));
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex2.multiply((-2007));
      Complex complex5 = Complex.ZERO;
      complex4.pow(complex3);
      complex0.exp();
      Complex complex6 = complex4.sinh();
      complex2.divide(Double.NaN);
      complex6.subtract((-3410.962028248));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ZERO.add((-3633.533544759888));
      complex1.NaN.abs();
      Complex complex3 = complex1.ZERO.tanh();
      Complex complex4 = complex3.ZERO.log();
      Complex complex5 = complex3.ZERO.sqrt();
      complex1.ZERO.sqrt1z();
      complex0.isNaN();
      complex5.conjugate();
      Complex complex6 = complex2.sqrt();
      complex6.NaN.add(complex3);
      complex1.atan();
      Complex complex7 = new Complex((-3633.533544759888), Double.NaN);
      complex4.atan();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Complex complex0 = new Complex((-1933.7204306995206));
      complex0.getArgument();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.I.acos();
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex1.add(complex3);
      Complex complex5 = (Complex)complex3.ONE.readResolve();
      complex4.I.pow(1475.08634);
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex4.tan();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.negate();
      complex6.sinh();
      complex0.sqrt();
      complex3.divide(complex5);
      complex5.cos();
      complex9.cos();
      Complex complex10 = complex3.pow(complex9);
      Complex complex11 = complex4.log();
      complex11.tanh();
      Complex complex12 = Complex.ZERO;
      complex7.multiply(complex12);
      complex10.getField();
      complex11.acos();
      complex2.subtract(complex1);
      try { 
        complex12.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Complex complex0 = new Complex(2258.1148);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex0.multiply(complex2);
      complex1.getField();
      Complex complex5 = complex3.acos();
      Complex complex6 = complex5.subtract(complex4);
      try { 
        complex6.nthRoot((-2045222521));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,521
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Complex complex0 = new Complex((-1982.245753232), (-1982.245753232));
      Complex complex1 = complex0.add((-1982.245753232));
      complex1.getReal();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex2.reciprocal();
      complex2.I.subtract(complex4);
      Complex complex5 = complex0.tan();
      complex5.negate();
      Complex complex6 = complex5.sinh();
      complex4.sqrt();
      Complex complex7 = complex5.divide(complex1);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.cos();
      Complex complex10 = complex7.cos();
      Complex complex11 = complex5.pow(complex6);
      complex10.log();
      Complex complex12 = complex0.tanh();
      complex11.multiply(complex9);
      complex9.getField();
      Complex complex13 = complex8.acos();
      complex13.subtract(complex12);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.NaN.add(0.0);
      complex0.getReal();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = new Complex(1.0, 2514.598252531153);
      complex5.reciprocal();
      Complex complex6 = complex1.tan();
      complex4.negate();
      complex3.sinh();
      complex0.sqrt();
      complex0.divide(complex6);
      Complex complex7 = complex6.cos();
      complex1.cos();
      complex5.pow(complex7);
      Complex complex8 = Complex.NaN;
      complex8.log();
      complex1.tanh();
      complex6.multiply(complex5);
      complex4.getField();
      complex4.acos();
      Complex complex9 = Complex.NaN;
      complex9.subtract(complex4);
      try { 
        complex0.nthRoot((-3071));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,071
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.divide(0.0);
      Complex complex5 = complex0.tanh();
      complex2.divide(complex5);
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex6.cos();
      complex0.pow(1.2027015686035156);
      Complex.valueOf(2761.57, 0.0);
      complex7.asin();
      complex6.abs();
      complex6.nthRoot(462);
      complex0.abs();
      complex3.equals(complex5);
      complex7.nthRoot(267);
      Complex complex8 = complex4.multiply(complex0);
      Complex complex9 = complex0.tan();
      complex9.tanh();
      Complex complex10 = complex3.pow((-1626.45989));
      complex6.multiply(complex1);
      complex10.sqrt1z();
      complex9.hashCode();
      complex6.negate();
      complex8.atan();
      Complex complex11 = new Complex(2732.7281);
      complex11.acos();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Complex complex0 = new Complex(2258.1148);
      Complex.valueOf((-2199.71809155), Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.ONE;
      complex2.abs();
      int int0 = 1830;
      complex0.nthRoot(1);
      complex1.abs();
      complex0.equals("DyO$Xp|^ 't7.FE");
      Complex complex3 = Complex.ONE;
      complex3.nthRoot(1830);
      try { 
        complex3.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Complex complex0 = new Complex((-1933.7204306995206));
      complex0.getArgument();
      Complex complex1 = Complex.I;
      complex1.I.acos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.add(complex2);
      complex2.ONE.readResolve();
      Complex complex4 = complex3.I.pow(1475.08634);
      complex4.INF.toString();
      complex2.ZERO.nthRoot(1201);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.I.tanh();
      complex6.I.abs();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex2.add(0.0);
      Complex complex9 = Complex.valueOf((-1933.7204306995206));
      complex9.I.cos();
      complex0.ONE.log();
      Complex complex10 = complex7.log();
      Complex complex11 = complex3.pow(complex0);
      complex11.ONE.multiply(1433);
      complex3.hashCode();
      complex1.getArgument();
      Complex.valueOf((-1933.7204306995206), (double) 1201);
      Complex complex12 = complex3.pow((-1933.7204306995206));
      complex12.add(107.58);
      complex10.isInfinite();
      Complex complex13 = complex8.add(1475.08634);
      complex13.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.atan();
      Complex complex2 = complex0.NaN.add(0.0);
      complex0.getReal();
      Complex complex3 = complex2.add(0.0);
      Complex complex4 = complex3.I.reciprocal();
      complex4.INF.reciprocal();
      complex1.ZERO.tan();
      complex3.negate();
      Complex complex5 = complex0.sinh();
      complex5.ZERO.sqrt();
      complex2.divide(complex1);
      complex0.INF.cos();
      complex3.INF.cos();
      try { 
        complex1.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.readResolve();
      complex0.ONE.multiply(1);
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.sinh();
      complex3.divide(Double.POSITIVE_INFINITY);
      complex1.subtract(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.ONE.abs();
      complex0.NaN.abs();
      complex0.getField();
      Complex complex1 = complex0.sqrt();
      complex1.I.getArgument();
      complex0.getField();
      Complex complex2 = complex1.I.log();
      Complex complex3 = complex2.I.add(complex1);
      Complex complex4 = complex2.INF.negate();
      complex4.NaN.getField();
      Complex complex5 = complex1.createComplex(1.5707963267948966, 0.0);
      Complex complex6 = complex1.I.asin();
      complex2.I.pow(1.0);
      complex3.ZERO.divide(Double.NaN);
      Complex complex7 = complex0.pow(4028.4);
      complex3.toString();
      Complex complex8 = complex5.pow(complex2);
      complex8.ONE.divide(complex7);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Complex complex0 = new Complex((-1933.7204306995206));
      complex0.getArgument();
      Complex complex1 = Complex.I;
      complex1.I.acos();
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex1.add(complex2);
      complex2.ONE.readResolve();
      Complex complex4 = complex3.I.pow(1475.08634);
      complex4.INF.toString();
      complex2.ZERO.nthRoot(1201);
      Complex complex5 = complex3.sinh();
      Complex complex6 = complex5.I.tanh();
      complex6.I.abs();
      Complex complex7 = complex0.asin();
      Complex complex8 = complex2.add(0.0);
      Complex complex9 = Complex.valueOf((-1933.7204306995206));
      complex9.I.cos();
      complex0.ONE.log();
      Complex complex10 = complex7.log();
      Complex complex11 = complex3.pow(complex0);
      complex11.ONE.multiply(1433);
      complex3.hashCode();
      complex7.hashCode();
      complex1.getArgument();
      Complex.valueOf((-1933.7204306995206), (double) 1201);
      Complex complex12 = complex3.pow((-1933.7204306995206));
      complex12.add(107.58);
      complex1.nthRoot(1201);
      complex10.isInfinite();
      complex8.add(1475.08634);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.I.sin();
      complex0.sin();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.cos();
      complex0.readResolve();
      Complex complex2 = complex0.ZERO.tan();
      Complex complex3 = Complex.INF;
      complex2.I.multiply(complex3);
      Complex complex4 = complex0.cosh();
      complex4.NaN.abs();
      complex4.getArgument();
      Complex complex5 = complex1.subtract((-446.360852205585));
      Complex complex6 = complex4.sqrt1z();
      complex6.readResolve();
      complex5.cos();
      complex6.sqrt();
      Complex complex7 = complex4.divide(Double.NaN);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2595.0506109632, 2893.35197);
      Complex complex1 = new Complex(590.39485624676, 0.0);
      complex0.pow(complex1);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.pow(complex2);
      Complex complex4 = complex3.ONE.tanh();
      complex4.I.subtract(2893.35197);
      complex3.divide(2893.35197);
      Complex complex5 = complex0.negate();
      complex5.atan();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-9.9029094612149), (-1.0));
      complex1.ONE.conjugate();
      complex1.I.multiply(complex0);
      try { 
        complex1.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.NaN.divide(0.0);
      Complex complex5 = complex2.ZERO.pow(complex3);
      complex1.INF.multiply(complex4);
      complex5.readResolve();
      complex2.I.cosh();
      Object object0 = new Object();
      complex0.equals(object0);
      complex0.getField();
      complex3.hashCode();
      Complex complex6 = complex2.multiply(complex3);
      complex6.ZERO.toString();
      complex0.ONE.multiply(0.0);
      Complex complex7 = complex0.cosh();
      Complex complex8 = complex4.multiply(0);
      complex6.toString();
      complex7.getImaginary();
      Complex complex9 = complex8.tan();
      try { 
        complex9.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0), 0.0);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex2.getReal();
      Complex complex3 = new Complex((-20.0));
      complex3.cosh();
      complex0.add(complex3);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.NaN.sqrt();
      Complex complex3 = complex1.NaN.reciprocal();
      complex3.ONE.multiply((-127));
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = complex0.ZERO.atan();
      complex5.I.toString();
      Complex complex6 = Complex.valueOf(0.0);
      Complex complex7 = complex4.ZERO.exp();
      complex7.ONE.getField();
      complex7.I.getField();
      complex4.INF.readResolve();
      Complex complex8 = complex1.exp();
      complex8.ZERO.exp();
      complex4.INF.tan();
      complex8.INF.negate();
      complex6.I.reciprocal();
      Complex complex9 = complex2.multiply(complex7);
      complex2.toString();
      complex6.sqrt();
      Complex complex10 = complex3.pow((double) (-127));
      Complex complex11 = complex1.acos();
      Complex.valueOf(2295.4953473679, (double) (-127));
      complex11.I.abs();
      Complex complex12 = Complex.valueOf(0.0, 0.0);
      Complex.valueOf(0.0);
      complex2.INF.pow(complex7);
      complex4.hashCode();
      complex9.negate();
      Complex complex13 = complex12.exp();
      complex10.cosh();
      complex13.abs();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.negate();
      complex1.I.abs();
      complex0.ONE.getArgument();
      complex0.INF.getField();
      Complex complex2 = complex0.ZERO.sin();
      Complex complex3 = complex2.ZERO.cosh();
      Complex complex4 = complex3.ONE.sqrt1z();
      complex4.subtract(0.0);
      Complex complex5 = complex0.cos();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex5.divide(complex6);
      Complex complex8 = complex5.ONE.log();
      complex0.abs();
      complex6.getReal();
      Complex complex9 = complex0.pow(1.0);
      complex9.NaN.acos();
      complex9.NaN.atan();
      Complex complex10 = complex8.sinh();
      complex5.atan();
      complex8.getArgument();
      complex1.divide(0.0);
      Complex complex11 = complex10.add(1.0);
      complex11.add(2084.585545219476);
      complex5.multiply(complex6);
      complex5.hashCode();
      complex7.multiply((-117));
      complex9.createComplex(Double.POSITIVE_INFINITY, 0.0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.add((-1.0));
      complex0.negate();
      complex1.ZERO.acos();
      int int0 = (-840);
      int int1 = (-3493);
      try { 
        complex0.ZERO.nthRoot((-3493));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,493
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.ZERO.getField();
      Complex complex1 = complex0.ZERO.add(2.0);
      complex1.I.pow((-838.0));
      complex0.readResolve();
      complex0.add(0.0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex1.add(complex0);
      complex3.isInfinite();
      complex0.pow(6.283185307179586);
      complex2.createComplex((-1200.1127535653), 0.0);
      complex2.isNaN();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Complex complex0 = new Complex(2258.1148);
      complex0.tan();
      Complex.valueOf(2258.1148);
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.cosh();
      complex0.nthRoot(1429);
      Complex complex1 = complex0.divide((double) 1429);
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.NaN.divide((double) 1429);
      complex3.NaN.divide((double) 1429);
      complex2.NaN.tanh();
      Complex.valueOf((double) 1429);
      complex2.getReal();
      Complex complex4 = complex0.log();
      Complex.valueOf(0.167, 1.1453864574432373);
      complex0.toString();
      complex4.sin();
      Complex complex5 = complex4.log();
      Complex complex6 = complex4.createComplex(1429, (-2947.3643664099277));
      complex4.log();
      complex4.nthRoot(1429);
      complex1.getField();
      complex6.getArgument();
      Complex complex7 = complex5.pow((-1.1193501434510913));
      Complex complex8 = new Complex(6.789527378582775E-122);
      complex7.ZERO.add(complex8);
      complex0.conjugate();
      Complex complex9 = complex2.asin();
      complex9.INF.sin();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.I.tan();
      complex1.NaN.sin();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.I.conjugate();
      Complex complex4 = complex3.ZERO.pow((-1936.3));
      complex0.isInfinite();
      complex0.abs();
      Complex complex5 = complex0.log();
      complex2.acos();
      complex5.tan();
      complex2.getReal();
      complex4.add(complex5);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.NaN;
      complex0.ONE.multiply((-5.635173762130303E-9));
      complex0.ONE.pow(complex1);
      complex0.abs();
      Complex complex2 = complex0.sqrt();
      complex2.multiply((-1468.53129649404));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.ZERO.add((-3633.533544759888));
      complex1.NaN.abs();
      Complex complex3 = complex1.ZERO.tanh();
      complex3.ZERO.log();
      Complex complex4 = complex3.ZERO.sqrt();
      complex1.ZERO.sqrt1z();
      complex0.isNaN();
      complex4.conjugate();
      Complex complex5 = complex2.sqrt();
      complex5.NaN.add(complex3);
      complex1.getReal();
      complex5.tan();
      complex3.sqrt();
      complex2.createComplex(0.0, (-3633.533544759888));
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.acos();
      complex0.readResolve();
      Complex complex2 = complex0.I.subtract(0.0);
      complex2.ZERO.nthRoot(1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.abs();
      Complex complex4 = complex0.asin();
      Complex complex5 = complex4.NaN.acos();
      complex0.getField();
      complex3.pow(complex1);
      complex5.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.hashCode();
      Complex complex1 = complex0.NaN.cosh();
      complex1.I.exp();
      Complex.valueOf(2087.639357);
      Complex complex2 = new Complex((-1730.4281205302));
      complex0.ONE.cos();
      complex0.multiply(complex2);
      complex2.add(complex1);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.cosh();
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.NaN.reciprocal();
      complex3.NaN.getField();
      complex2.hashCode();
      complex1.INF.abs();
      complex0.INF.multiply((-3439));
      complex2.ZERO.sinh();
      Complex complex4 = Complex.valueOf(0.0, (-3559.54812707447));
      complex1.divide(complex4);
      Complex complex5 = complex4.negate();
      complex1.reciprocal();
      Complex complex6 = Complex.valueOf((-2.8144926807308225E-85), (-2.8144926807308225E-85));
      complex5.subtract((double) (-3439));
      complex6.INF.multiply((-3559.54812707447));
      Complex complex7 = complex6.NaN.createComplex(0.0, 0.33115679025650024);
      Complex complex8 = complex4.sqrt1z();
      complex8.equals(complex5);
      complex6.toString();
      Complex complex9 = complex7.conjugate();
      complex0.hashCode();
      complex2.toString();
      complex0.divide(0.0);
      complex9.add(1746.4928);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2355.5), (-535.522));
      complex0.hashCode();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.I.conjugate();
      Complex complex3 = complex0.pow(complex1);
      complex2.NaN.toString();
      complex3.I.createComplex(0.6744182109832764, (-535.522));
      complex1.sqrt();
      complex0.getArgument();
      complex3.abs();
      complex1.INF.abs();
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double double0 = (-3.4174925203771133E-9);
      Complex complex0 = Complex.valueOf((-3.4174925203771133E-9), 1799.5775);
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.INF.cos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.log();
      Complex complex7 = complex5.tan();
      complex4.INF.conjugate();
      complex5.NaN.nthRoot(1434);
      Complex.valueOf(2002.035159282448);
      complex7.abs();
      complex7.divide(484.26263155);
      complex7.reciprocal();
      complex3.reciprocal();
      complex6.getField();
      int int0 = (-1);
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.negate();
      Complex.valueOf(0.0);
      complex1.I.exp();
      Complex complex2 = complex1.NaN.divide(4622.05);
      complex0.ONE.tan();
      Complex complex3 = complex2.ZERO.divide(complex1);
      Complex complex4 = complex2.tan();
      Complex complex5 = complex0.divide((-2867.303925604565));
      complex5.createComplex((-2867.303925604565), 541.73);
      Complex complex6 = complex0.tanh();
      complex5.divide(complex1);
      Complex complex7 = complex1.reciprocal();
      complex3.add((-2867.303925604565));
      Complex complex8 = complex6.multiply(0.0);
      Complex complex9 = complex4.multiply(complex1);
      complex9.NaN.cos();
      Complex.valueOf(0.0);
      complex9.sqrt1z();
      complex7.conjugate();
      complex2.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 580.3146529;
      try { 
        complex0.INF.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.NaN.multiply((-7));
      complex2.ONE.reciprocal();
      complex1.getReal();
      complex0.ZERO.sqrt1z();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.abs();
      complex0.ZERO.subtract((-1354.227980532));
      Complex complex1 = complex0.divide((-344.3843341905557));
      complex1.ZERO.toString();
      complex0.ONE.negate();
      Complex complex2 = Complex.valueOf((-1354.227980532), (-2530.512417435899));
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex2.I.cosh();
      complex4.ONE.tanh();
      complex4.ONE.abs();
      complex2.NaN.hashCode();
      complex2.divide((-1354.227980532));
      complex1.createComplex(2435.6, (-344.3843341905557));
      complex3.getArgument();
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.INF.add(complex1);
      complex0.INF.multiply(0.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Complex complex0 = new Complex((-568.944), (-5.1));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.divide((-5.1));
      complex2.exp();
      Complex complex3 = complex1.ZERO.add(complex0);
      Complex complex4 = complex0.cos();
      complex4.NaN.getField();
      Complex complex5 = complex3.pow(complex0);
      Complex complex6 = complex5.I.sin();
      complex5.isInfinite();
      complex5.getArgument();
      complex6.INF.cos();
      Complex complex7 = Complex.valueOf((-3865.9511359));
      complex7.conjugate();
      Complex complex8 = Complex.valueOf((-3.141592653589793), 1.0);
      Complex complex9 = complex0.conjugate();
      complex6.isNaN();
      Complex complex10 = complex9.cos();
      Complex.valueOf((-3.141592653589793), (-5.1));
      complex1.pow((-568.944));
      complex8.getArgument();
      complex10.divide((-3865.9511359));
      Complex complex11 = complex8.negate();
      Complex complex12 = complex11.multiply(131);
      complex6.abs();
      complex12.asin();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Complex complex0 = new Complex(229.9, 229.9);
      Complex complex1 = new Complex(842.1546752277, 842.1546752277);
      complex0.NaN.hashCode();
      Complex complex2 = complex1.ZERO.conjugate();
      complex2.INF.pow(1822.4);
      Complex complex3 = complex0.multiply(complex1);
      complex3.NaN.getField();
      complex3.hashCode();
      complex0.pow(1822.4);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ZERO.tan();
      Complex.valueOf((-2230.472), (-1513.7686476532233));
      complex5.hashCode();
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1763.05), (-1763.05));
      complex0.getField();
      Complex complex2 = complex0.sqrt();
      complex0.ZERO.cosh();
      complex0.NaN.atan();
      Complex complex3 = complex0.tanh();
      complex3.nthRoot(1305);
      complex3.cos();
      complex1.reciprocal();
      complex2.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1042.19), 0.0);
      Complex complex1 = complex0.ONE.multiply(0.0);
      Complex complex2 = complex1.INF.add(2115.40796043342);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.INF.negate();
      Complex complex5 = complex0.divide(complex3);
      complex5.add(complex4);
      complex5.divide(6.987544103716777E-8);
      complex2.reciprocal();
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.pow(complex1);
      complex1.hashCode();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.ONE.tan();
      complex0.I.readResolve();
      complex0.isInfinite();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.NaN.tanh();
      complex3.INF.cosh();
      complex3.ONE.getField();
      Complex complex4 = Complex.valueOf(189.2418079, Double.NaN);
      Complex.valueOf((-1403.73), 98.488257);
      complex2.NaN.pow(complex4);
      Complex.valueOf(Double.NaN, 0.0);
      complex1.I.atan();
      complex1.getArgument();
      Complex complex5 = complex0.subtract(Double.NaN);
      Complex complex6 = complex5.multiply(complex0);
      Complex complex7 = complex5.ZERO.multiply(complex2);
      complex7.INF.cos();
      Complex complex8 = complex5.reciprocal();
      complex0.sinh();
      complex8.tan();
      complex5.INF.cos();
      complex5.NaN.subtract((-977.552));
      complex8.asin();
      complex4.getImaginary();
      complex6.hashCode();
      complex5.conjugate();
      complex8.sqrt1z();
      complex6.atan();
      Complex.valueOf(6.283185307179586);
      complex7.equals(complex0);
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1660.76614060714);
      Complex complex1 = Complex.I;
      complex0.I.multiply(complex1);
      Complex complex2 = complex0.conjugate();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Complex complex0 = new Complex((-936.078384));
      complex0.ONE.getArgument();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.sqrt();
      Complex complex3 = complex2.INF.atan();
      complex3.ONE.log();
      Complex complex4 = complex0.NaN.subtract(complex1);
      Complex complex5 = complex4.INF.sqrt();
      Complex complex6 = complex0.I.divide((-936.078384));
      Complex complex7 = complex0.tanh();
      Complex complex8 = complex7.INF.divide(complex6);
      complex8.ZERO.cos();
      Complex complex9 = complex0.pow((-936.078384));
      Complex complex10 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.asin();
      complex9.abs();
      complex0.nthRoot(1830);
      complex1.abs();
      complex1.equals(complex2);
      complex5.nthRoot(1830);
      Complex complex11 = complex6.multiply(complex5);
      complex11.I.tan();
      complex7.isNaN();
      complex11.tanh();
      Complex complex12 = complex5.pow((-1626.45989));
      complex12.NaN.multiply(complex6);
      Complex complex13 = complex10.sqrt1z();
      complex13.hashCode();
      complex13.ZERO.negate();
      complex0.atan();
      complex13.acos();
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.reciprocal();
      complex1.NaN.getArgument();
      complex2.reciprocal();
      Complex complex4 = complex0.subtract((-325.766715));
      complex1.hashCode();
      Complex complex5 = complex1.I.exp();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex1.multiply(complex6);
      complex3.abs();
      Complex complex8 = Complex.INF;
      complex1.divide(complex8);
      Complex complex9 = Complex.valueOf(Double.NaN);
      complex9.I.pow(complex4);
      Complex complex10 = complex5.ZERO.add(Double.NaN);
      complex10.add(Double.NaN);
      Complex complex11 = complex9.NaN.acos();
      complex11.INF.tan();
      Complex complex12 = complex0.ONE.log();
      complex12.INF.pow(complex7);
      Complex.valueOf(Double.NaN);
      complex6.conjugate();
      Complex complex13 = complex1.subtract((-325.766715));
      complex0.conjugate();
      Complex complex14 = complex13.cos();
      Complex complex15 = complex7.cos();
      complex15.ONE.multiply((-2175));
      complex15.ZERO.toString();
      complex5.negate();
      Complex complex16 = complex8.multiply((-1752));
      complex16.ONE.reciprocal();
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.subtract(3996.07009458);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Complex complex0 = new Complex((-2752.760639001861), 1480.9873263);
      Complex complex1 = complex0.INF.cos();
      complex1.ONE.log();
      complex0.reciprocal();
      complex0.hashCode();
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1418.48);
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.INF.multiply((-1590.3796692));
      complex1.getArgument();
      Complex complex3 = complex1.INF.sqrt1z();
      Complex complex4 = complex1.ZERO.subtract(2.0);
      Complex complex5 = complex3.INF.multiply(complex0);
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex0.NaN.cos();
      Complex complex9 = complex7.I.tan();
      complex1.getImaginary();
      Complex complex10 = complex1.sqrt();
      assertEquals(0.9993517971462573, complex10.getImaginary(), 0.01);
      
      Complex complex11 = Complex.NaN;
      complex7.NaN.log();
      Complex complex12 = complex1.multiply(complex11);
      assertSame(complex12, complex8);
      
      complex3.equals("");
      complex11.isNaN();
      complex9.negate();
      complex11.divide(complex4);
      assertEquals((-2.0), complex4.getReal(), 0.01);
      
      List<Complex> list0 = complex0.nthRoot(2624);
      assertEquals(2624, list0.size());
      assertFalse(list0.contains(complex2));
      
      Complex complex13 = complex6.pow(complex9);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(3.307885960393607, complex13.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex3.getImaginary(), 0.01);
      assertTrue(complex7.equals((Object)complex3));
      assertEquals(0.0, complex13.getImaginary(), 0.01);
  }
}
