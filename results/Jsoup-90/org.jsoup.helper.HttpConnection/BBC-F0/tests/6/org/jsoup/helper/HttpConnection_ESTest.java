/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:48:04 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.offerFirst("Content-Type");
      assertTrue(boolean0);
      assertTrue(linkedList1.contains("Content-Type"));
      assertEquals(1, linkedList1.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      List<String> list0 = hashMap0.put("set-cookie", linkedList1);
      assertFalse(linkedList1.contains("set-cookie"));
      assertTrue(linkedList1.contains("Content-Type"));
      assertEquals(1, linkedList1.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(list0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      List<String> list1 = hashMap0.put("Content-Encoding", linkedList1);
      assertFalse(linkedList1.contains("Content-Encoding"));
      assertTrue(linkedList1.contains("Content-Type"));
      assertEquals(1, linkedList1.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(list1);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.offerFirst("Content-Type");
      assertTrue(boolean0);
      assertTrue(linkedList1.contains("Content-Type"));
      assertEquals(1, linkedList1.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      List<String> list0 = hashMap0.put("set-cookie", linkedList1);
      assertTrue(linkedList1.contains("Content-Type"));
      assertFalse(linkedList1.contains("set-cookie"));
      assertEquals(1, linkedList1.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(list0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.offerFirst((String) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList1.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      List<String> list0 = hashMap0.put("set-cookie", linkedList1);
      assertFalse(linkedList1.contains("set-cookie"));
      assertEquals(1, linkedList1.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(list0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.timeout(119);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(119, httpConnection_Request0.timeout());
      assertEquals(119, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      Parser parser1 = Parser.htmlParser();
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertNotSame(parser1, parser0);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser1);
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(119, httpConnection_Request0.timeout());
      assertEquals(119, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(parser1.isTrackErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(119, httpConnection_Request3.timeout());
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNotSame(parser1, parser0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      
      // Undeclared exception!
      try { 
        httpConnection_Request3.proxy((String) null, 5187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = connection0.followRedirects(false);
      assertEquals(0, stringArray0.length);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.followRedirects());
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreContentType(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      
      Connection.Request connection_Request1 = httpConnection0.request();
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertEquals(1048576, connection_Request1.maxBodySize());
      assertTrue(connection_Request1.followRedirects());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertEquals(30000, connection_Request1.timeout());
      assertNull(connection_Request1.requestBody());
      assertTrue(connection_Request1.ignoreContentType());
      assertNotNull(connection_Request1);
      assertSame(httpConnection0, connection0);
      assertSame(connection_Request1, connection_Request0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request1, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = connection0.ignoreHttpErrors(true);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.data("multipart/form-data", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      
      try { 
        connection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      List<String> list0 = hashMap0.put("set-&hooie", linkedList0);
      assertFalse(linkedList0.contains("set-&hooie"));
      assertEquals(0, linkedList0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(list0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("InHeadNoscript");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreContentType(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("Content-Encoding", 20);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data", (InputStream) null);
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) null);
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal1);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertNull(httpConnection_Request3.requestBody());
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request3.requestBody("multipart/form-data");
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("multipart/form-data", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertEquals("multipart/form-data", httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request3);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      
      Connection connection1 = httpConnection0.request(connection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("multipart/form-data", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertEquals("multipart/form-data", httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request3);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      
      Connection connection3 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request2.data();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("multipart/form-data", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNotNull(collection0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      
      // Undeclared exception!
      try { 
        httpConnection0.data(collection0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"));
      assertEquals(1, linkedList0.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      List<String> list0 = hashMap0.put("Content-Encoding", linkedList0);
      assertFalse(linkedList0.contains("Content-Encoding"));
      assertTrue(linkedList0.contains("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"));
      assertEquals(1, linkedList0.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(list0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      stringArray0[1] = "application/x-www-form-urlencoded";
      stringArray0[2] = "Content-Type";
      stringArray0[3] = "multipart/form-data";
      Connection connection1 = httpConnection0.data(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      List<String> list1 = hashMap0.put("set-cookie", list0);
      assertFalse(set0.contains("set-cookie"));
      assertFalse(list0.contains("set-cookie"));
      assertEquals(0, linkedList0.size());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(list1);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("le`ged");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: le`ged
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      byte[] byteArray0 = new byte[3];
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)60;
      Connection connection1 = httpConnection0.referrer("org.jsoup.select.StructuralEvaluator$Root");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      byteArray0[2] = (byte)117;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)112, (byte)60, (byte)117}, byteArray0);
      
      Connection connection2 = httpConnection0.userAgent("4dd8d\"X']A:k: ");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertNotSame(linkedList1, linkedList0);
      
      List<String> list1 = hashMap0.put((String) null, list0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(list1);
      assertNotSame(linkedList1, linkedList0);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<String> list1 = hashMap0.put("legend", list0);
      assertFalse(set0.contains("legend"));
      assertFalse(list0.contains("legend"));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(list1);
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.cookie("ewIdX~Xa", "ewIdX~Xa");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      Connection connection1 = httpConnection0.cookie("Content-Encoding", "Content-Encoding");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.url(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      
      try { 
        connection2.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(pushbackInputStream0);
      
      Connection connection0 = httpConnection0.data("l(,('sc0MGq1Szs6bFZ", "l(,('sc0MGq1Szs6bFZ", (InputStream) pushbackInputStream0, "l(,('sc0MGq1Szs6bFZ");
      assertFalse(fileDescriptor0.valid());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertNotNull(httpConnection1);
      
      Connection connection1 = httpConnection1.ignoreHttpErrors(false);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertNotNull(connection1);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, connection0);
      assertSame(connection1, httpConnection1);
      assertNotSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection1));
      assertNotNull(httpConnection2);
      
      Connection connection2 = httpConnection2.data("deflate", "8");
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection1));
      assertFalse(connection2.equals((Object)connection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)connection0));
      assertNotNull(connection2);
      assertSame(httpConnection2, connection2);
      assertNotSame(httpConnection2, httpConnection0);
      assertNotSame(httpConnection2, connection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertNotSame(httpConnection2, connection1);
      assertNotSame(connection2, connection1);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, httpConnection2);
      assertNotSame(connection2, httpConnection0);
      assertNotSame(connection2, connection0);
      
      HttpConnection httpConnection3 = new HttpConnection();
      assertFalse(httpConnection3.equals((Object)connection0));
      assertFalse(httpConnection3.equals((Object)httpConnection0));
      assertFalse(httpConnection3.equals((Object)connection2));
      assertFalse(httpConnection3.equals((Object)connection1));
      assertFalse(httpConnection3.equals((Object)httpConnection2));
      assertFalse(httpConnection3.equals((Object)httpConnection1));
      assertNotNull(httpConnection3);
      
      Connection connection3 = httpConnection3.postDataCharset("iso-8859-1");
      assertFalse(httpConnection3.equals((Object)connection0));
      assertFalse(httpConnection3.equals((Object)httpConnection0));
      assertFalse(httpConnection3.equals((Object)connection2));
      assertFalse(httpConnection3.equals((Object)connection1));
      assertFalse(httpConnection3.equals((Object)httpConnection2));
      assertFalse(httpConnection3.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)connection1));
      assertFalse(connection3.equals((Object)httpConnection2));
      assertFalse(connection3.equals((Object)httpConnection0));
      assertFalse(connection3.equals((Object)connection0));
      assertFalse(connection3.equals((Object)connection2));
      assertNotNull(connection3);
      assertNotSame(httpConnection3, connection0);
      assertNotSame(httpConnection3, httpConnection0);
      assertNotSame(httpConnection3, connection2);
      assertSame(httpConnection3, connection3);
      assertNotSame(httpConnection3, connection1);
      assertNotSame(httpConnection3, httpConnection2);
      assertNotSame(httpConnection3, httpConnection1);
      assertNotSame(connection3, httpConnection1);
      assertNotSame(connection3, connection1);
      assertNotSame(connection3, httpConnection2);
      assertSame(connection3, httpConnection3);
      assertNotSame(connection3, httpConnection0);
      assertNotSame(connection3, connection0);
      assertNotSame(connection3, connection2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection0 = httpConnection1.request((Connection.Request) null);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertNotNull(connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection1);
      
      // Undeclared exception!
      try { 
        httpConnection1.referrer("TjRK6t+_Q7u'o");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.cookie("Content-Encoding", "Content-Encoding");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Content-Type", uRLStreamHandler0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      Connection connection0 = httpConnection0.url(uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.cookie("dT--8", "+5sC#SoxN-Cj");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = connection1.requestBody("multipart/form-data");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, connection2);
      assertSame(connection1, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      
      Connection connection3 = connection1.data("selected", "selected");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(connection1, connection0);
      assertSame(connection1, connection3);
      assertSame(connection1, connection2);
      assertSame(connection1, httpConnection0);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      
      // Undeclared exception!
      try { 
        connection1.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set a request body for HTTP method GET
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "multipart/form-data";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray0[1] = "Content-Encoding";
      stringArray0[2] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      stringArray0[3] = "Content-Type";
      Connection connection1 = httpConnection0.requestBody("Content-Encoding");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Connection connection2 = connection0.data(stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.timeout((-1504));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.jsoup.helper.HttpConnection");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      
      Connection connection1 = connection0.ignoreHttpErrors(false);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = connection0.data("O\u0004rI", "_7");
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection0, connection2);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      Connection connection3 = httpConnection0.proxy(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(connection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection2);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Connection connection4 = connection0.header("Content-Type", "application/x-www-form-urlencoded");
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(connection4);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection4);
      assertSame(connection0, connection2);
      assertSame(connection0, connection4);
      assertSame(connection0, connection3);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection1);
      assertSame(connection4, connection2);
      assertSame(connection4, connection3);
      assertSame(connection4, connection0);
      
      Connection connection5 = connection1.cookie("Content-Encoding", "Content-Encoding");
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(connection5);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection4);
      assertSame(connection0, connection2);
      assertSame(connection0, connection4);
      assertSame(connection0, connection5);
      assertSame(connection0, connection3);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, connection4);
      assertSame(connection1, connection3);
      assertSame(connection1, connection2);
      assertSame(connection1, connection5);
      assertSame(connection5, httpConnection0);
      assertSame(connection5, connection0);
      assertSame(connection5, connection1);
      assertSame(connection5, connection4);
      assertSame(connection5, connection2);
      assertSame(connection5, connection3);
      
      try { 
        connection2.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertNotNull(httpConnection1);
      
      Connection connection1 = connection0.ignoreHttpErrors(false);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(connection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertNotSame(connection1, httpConnection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = connection0.data("O\u0004rI", "_7");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNotNull(httpConnection_Response1);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Connection connection3 = httpConnection0.data("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "m5l54x18lrvlviu");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertNotNull(connection3);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      assertNotSame(connection3, httpConnection1);
      assertSame(connection3, connection0);
      assertSame(connection3, connection1);
      
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response();
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response1));
      assertNull(httpConnection_Response2.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      assertNotNull(httpConnection_Response2);
      
      Connection connection4 = connection3.header("pX5", "s0");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertFalse(connection4.equals((Object)httpConnection1));
      assertNotNull(connection4);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection2);
      assertSame(connection3, connection4);
      assertSame(connection3, httpConnection0);
      assertNotSame(connection3, httpConnection1);
      assertSame(connection3, connection2);
      assertSame(connection3, connection0);
      assertSame(connection3, connection1);
      assertSame(connection4, connection2);
      assertSame(connection4, connection3);
      assertSame(connection4, connection1);
      assertSame(connection4, connection0);
      assertNotSame(connection4, httpConnection1);
      assertSame(connection4, httpConnection0);
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-56);
      byteArray0[0] = (byte) (-56);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection1 = connection0.ignoreHttpErrors(false);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertNotSame(connection1, httpConnection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      String string0 = "O\\4rI";
      Connection connection2 = connection0.data("O\u0004rI", "_7");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertSame(connection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, connection1);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertNotNull(httpConnection_Response1);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Connection connection3 = connection0.header("Content-Type", ">0}<VlB0 r?A'KVURq");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertSame(connection0, connection1);
      assertSame(connection0, connection3);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      assertSame(connection3, connection0);
      assertNotSame(connection3, httpConnection1);
      assertSame(connection3, connection1);
      
      try { 
        connection2.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("some", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getHost());
      assertEquals("file", uRL1.getProtocol());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("text/", "_7");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      Connection connection1 = httpConnection0.header("_7", "Header name must not be empty");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("text/");
      assertEquals("text/", connection_KeyVal0.key());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("_7", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-56);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-56)}, byteArray0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertNotNull(httpConnection1);
      
      Connection connection1 = connection0.ignoreHttpErrors(false);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, httpConnection0);
      assertNotSame(connection1, httpConnection1);
      assertSame(connection1, connection0);
      
      Connection connection2 = connection0.data("O\u0004rI", "_7");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(connection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertSame(connection0, connection1);
      assertSame(connection2, connection0);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Connection connection3 = connection0.header("%rQJt\"lwv!T_~ZC", "Header name must not be empty");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(connection3);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection0, connection3);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertSame(connection0, connection1);
      assertSame(connection3, connection0);
      assertNotSame(connection3, httpConnection1);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      assertSame(connection3, connection1);
      
      Connection.KeyVal connection_KeyVal0 = connection0.data("multipart/form-data");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(connection_KeyVal0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection0, connection3);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertSame(connection0, connection1);
      
      try { 
        connection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)60;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)111;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)26, (byte)74, (byte)60, (byte) (-32), (byte)111}, byteArray0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("HTTP e5rorAfetchingURL", "j[8J|{du", 3127, "Unexpected token type: ", uRLStreamHandler0);
      assertEquals("Unexpected token type: ", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("j[8J|{du", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("Unexpected token type: ", uRL0.getFile());
      assertEquals("http e5rorafetchingurl", uRL0.getProtocol());
      assertEquals(3127, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("j[8J|{du:3127", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertEquals("Unexpected token type: ", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("j[8J|{du", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("Unexpected token type: ", uRL0.getFile());
      assertEquals("http e5rorafetchingurl", uRL0.getProtocol());
      assertEquals(3127, uRL0.getPort());
      assertNull(uRL0.toString());
      assertEquals("j[8J|{du:3127", uRL0.getAuthority());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("j[8J|{du", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(3127, uRL1.getPort());
      assertEquals("j[8J|{du:3127", uRL1.getAuthority());
      assertEquals("http e5rorafetchingurl", uRL1.getProtocol());
      assertEquals("Unexpected token type: ", uRL1.getFile());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toExternalForm());
      assertEquals("Unexpected token type: ", uRL1.getPath());
      assertNotNull(uRL1);
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      String string0 = HttpConnection.CONTENT_TYPE;
      assertEquals("Content-Type", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(30000, connection_Request0.timeout());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(0, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.cookie("UTF-8", "UTF-8");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      try { 
        connection1.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      boolean boolean0 = hashMap0.replace("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Content-Encoding", "Content-Type");
      assertFalse(boolean0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Connection connection0 = httpConnection0.cookies(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      Connection connection1 = httpConnection0.data("org.jsoup.select.Evaluator$ContainsOwnText", "encoding", (InputStream) mockFileInputStream0, "boundary");
      assertFalse(fileDescriptor0.valid());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Set<Map.Entry<String, String>> set0 = (Set<Map.Entry<String, String>>)hashMap0.entrySet();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      String string0 = hashMap0.put("multipart/form-data", (String) null);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      String string1 = hashMap0.put("boundary", "Content-Encoding");
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNull(string1);
      
      Connection connection2 = httpConnection0.headers(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.cookie("*", "*");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("Unexpected character '%s' in input state [%s]", "application/x-www-form-urlencoded");
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(string0);
      
      Connection connection1 = httpConnection0.cookies(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      Proxy proxy1 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertNotNull(proxy1);
      assertSame(proxy1, proxy0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertNotNull(httpConnection1);
      
      Connection connection2 = connection0.cookie("@.5,_(Y4>%oqI", "VrrCkH");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertNotSame(connection2, httpConnection1);
      
      Connection connection3 = httpConnection1.header("user agent must not be null", "Content-Type");
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection2));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(connection3.equals((Object)connection0));
      assertFalse(connection3.equals((Object)connection2));
      assertFalse(connection3.equals((Object)httpConnection0));
      assertFalse(connection3.equals((Object)connection1));
      assertNotNull(connection3);
      assertNotSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection3);
      assertNotSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(httpConnection1, connection1);
      assertNotSame(connection3, connection0);
      assertNotSame(connection3, connection2);
      assertNotSame(connection3, httpConnection0);
      assertNotSame(connection3, connection1);
      assertSame(connection3, httpConnection1);
      
      Connection connection4 = httpConnection0.requestBody((String) null);
      assertFalse(httpConnection0.equals((Object)connection3));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection4.equals((Object)httpConnection1));
      assertFalse(connection4.equals((Object)connection3));
      assertNotNull(connection4);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, connection3);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(connection4, connection0);
      assertNotSame(connection4, httpConnection1);
      assertNotSame(connection4, connection3);
      assertSame(connection4, connection2);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection1);
      
      Connection connection5 = connection0.proxy(proxy1);
      assertFalse(httpConnection0.equals((Object)connection3));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)connection3));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection5.equals((Object)connection3));
      assertFalse(connection5.equals((Object)httpConnection1));
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertNotNull(connection5);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, connection3);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection4);
      assertSame(connection0, connection5);
      assertNotSame(connection0, connection3);
      assertSame(connection0, connection2);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, connection1);
      assertSame(proxy1, proxy0);
      assertSame(connection5, connection0);
      assertNotSame(connection5, connection3);
      assertNotSame(connection5, httpConnection1);
      assertSame(connection5, connection2);
      assertSame(connection5, connection4);
      assertSame(connection5, connection1);
      assertSame(connection5, httpConnection0);
      
      Connection connection6 = httpConnection0.cookie("user agent must not be null", "1tTr7|<zkN'z?%Bs]2");
      assertFalse(httpConnection0.equals((Object)connection3));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection6.equals((Object)httpConnection1));
      assertFalse(connection6.equals((Object)connection3));
      assertNotNull(connection6);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection6);
      assertNotSame(httpConnection0, connection3);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(connection6, httpConnection0);
      assertSame(connection6, connection1);
      assertNotSame(connection6, httpConnection1);
      assertSame(connection6, connection0);
      assertSame(connection6, connection4);
      assertNotSame(connection6, connection3);
      assertSame(connection6, connection5);
      assertSame(connection6, connection2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreContentType(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.helper.Validate", "tqzvxo\tia6g-i");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal0.value());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal0.value());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal1.key());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal0.value());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal1.key());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal0.value());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal1.key());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotNull(collection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Connection connection1 = httpConnection0.data(collection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal0.value());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.helper.Validate", httpConnection_KeyVal1.key());
      assertEquals("tqzvxo\tia6g-i", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotNull(connection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.header("$pzOBoKfj^WfG", "$pzOBoKfj^WfG");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection2));
      assertNotNull(httpConnection1);
      
      // Undeclared exception!
      try { 
        httpConnection1.data((String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key value pairs must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(24);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(24, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(24, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      URL uRL0 = httpConnection_Response0.url;
      assertNull(uRL0);
      
      // Undeclared exception!
      try { 
        connection_Request0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null, (String) null, (InputStream) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("%22", "%22");
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      String string0 = "8h J<$K(8w)";
      HttpConnection.Response httpConnection_Response2 = httpConnection_Response0.charset("8h J<$K(8w)");
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response2.charset());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNotNull(httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      // Undeclared exception!
      try { 
        httpConnection1.referrer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.requestBody("}`}P_u[`]>@jV");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      Connection connection1 = HttpConnection.connect(uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertNotNull(connection1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("multipart/form-data");
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("multipart/form-data", httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("multipart/form-data", httpConnection_Response1.charset());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertNotNull(httpConnection2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "multipart/form-data";
      stringArray0[1] = "multipart/form-data";
      stringArray0[2] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      stringArray0[3] = "Content-Type";
      // Undeclared exception!
      try { 
        httpConnection2.maxBodySize((-2323));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNotNull(httpConnection_Response1);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection_Request0, httpConnection_Request0);
      
      String string0 = HttpConnection.CONTENT_TYPE;
      assertEquals("Content-Type", string0);
      assertNotNull(string0);
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.cookies(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      Connection connection1 = httpConnection0.timeout(192);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Proxy proxy1 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertEquals("DIRECT", proxy1.toString());
      assertNotNull(proxy1);
      assertSame(proxy1, proxy0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertNotNull(httpConnection1);
      
      Connection connection2 = httpConnection0.cookie("multipart/form-data", "Content-Encoding");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertNotNull(connection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, httpConnection0);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      Connection connection3 = httpConnection0.header("Tqzvxo\tIa6G-i", "multipart/form-data");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertNotNull(connection3);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, connection1);
      assertNotSame(connection3, httpConnection1);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("multipart/form-data");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertNull(connection_KeyVal0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertSame(httpConnection_Request0, connection_Request0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)75;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)112, (byte)88, (byte) (-105), (byte) (-1), (byte)119, (byte)107, (byte)75}, byteArray0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.data("Method must not be null", "M5L54x18LRvlviU");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Response0.method = connection_Method0;
      assertTrue(httpConnection_Response0.method.hasBody());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      httpConnection_Response0.headers = map0;
      assertTrue(httpConnection_Response0.headers.isEmpty());
      assertEquals(0, httpConnection_Response0.headers.size());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection2 = connection1.header("dmh[{T@wl;3x7oYB5", "f2j^`dp%l.`");
      assertNotNull(connection2);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection2);
      assertSame(connection1, connection0);
      
      Connection.KeyVal connection_KeyVal0 = connection0.data("Content-Encoding");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeHeader("Content-Type");
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      String string0 = hashMap0.put("t/aK~H;0|F", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNull(string0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data((Map<String, String>) hashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection0);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertNotNull(httpConnection2);
      
      // Undeclared exception!
      try { 
        httpConnection2.cookie((String) null, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)119;
      byteArray0[6] = (byte)107;
      byteArray0[7] = (byte)75;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-26), (byte)112, (byte)88, (byte) (-105), (byte) (-1), (byte)119, (byte)107, (byte)75}, byteArray0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.data("Method must not be null", "M5L54x18LRvlviU");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Response0.method = connection_Method0;
      assertTrue(httpConnection_Response0.method.hasBody());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      httpConnection_Response0.headers = map0;
      assertTrue(httpConnection_Response0.headers.isEmpty());
      assertEquals(0, httpConnection_Response0.headers.size());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.header("Content-Type", "c8v");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c^-{bmb");
      assertFalse(boolean0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.referrer("FS[g&=");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.url(uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertNotNull(connection1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      String string0 = HttpConnection.CONTENT_TYPE;
      assertEquals("Content-Type", string0);
      assertNotNull(string0);
      
      try { 
        connection0.get();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      Connection connection0 = HttpConnection.connect(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(connection0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertFalse(httpConnection0.equals((Object)connection0));
      assertNotNull(httpConnection0);
      
      String string0 = "g\\cM\\7@._Fql i0_";
      Connection connection1 = httpConnection0.userAgent("gcM\u0007@._Fql i0_");
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(connection1.equals((Object)connection0));
      assertNotNull(connection1);
      assertNotSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertNotSame(connection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      httpConnection_Response0.processResponseHeaders(map0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.method(connection_Method0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection0 = httpConnection1.headers(map0);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(connection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection1);
      
      Connection connection1 = httpConnection1.referrer("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertNotNull(connection1);
      assertSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection1, httpConnection0);
      assertSame(connection1, httpConnection1);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.data("multipart/form-data", "YFk!Q.d%fYp");
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)connection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)connection0));
      assertNotNull(connection2);
      assertNotSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertNotSame(connection2, connection1);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, httpConnection0);
      assertNotSame(connection2, connection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      assertNotNull(mockInetSocketAddress0);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)connection1));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)connection2));
      assertNotNull(httpConnection2);
      
      HttpConnection httpConnection3 = new HttpConnection();
      assertFalse(httpConnection3.equals((Object)connection2));
      assertFalse(httpConnection3.equals((Object)connection1));
      assertFalse(httpConnection3.equals((Object)connection0));
      assertFalse(httpConnection3.equals((Object)httpConnection2));
      assertFalse(httpConnection3.equals((Object)httpConnection1));
      assertFalse(httpConnection3.equals((Object)httpConnection0));
      assertNotNull(httpConnection3);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("multipart/form-data", 0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(0, httpConnection_Request3.timeout());
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(0, httpConnection_Request3.timeout());
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("location", " g");
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(" g", httpConnection_KeyVal0.value());
      assertEquals("location", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(" g", httpConnection_KeyVal0.value());
      assertEquals("location", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals(0, httpConnection_Request5.timeout());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertNull(httpConnection_Request5.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(0, httpConnection_Request3.timeout());
      assertNotNull(httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      
      String string0 = httpConnection_Request5.postDataCharset();
      assertEquals("UTF-8", string0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(" g", httpConnection_KeyVal0.value());
      assertEquals("location", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals(0, httpConnection_Request5.timeout());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertNull(httpConnection_Request5.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(0, httpConnection_Request3.timeout());
      assertNotNull(string0);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      
      // Undeclared exception!
      try { 
        httpConnection3.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(httpConnection_Request0);
      
      Connection connection0 = httpConnection0.data("iymjO=TH", "Mark invalid");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection_Request0, httpConnection_Request0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)3, (byte) (-115), (byte)40, (byte)34}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "Content-Encoding", (InputStream) byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)3, (byte) (-115), (byte)40, (byte)34}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("i9q;@*,6C1(\u0006R7A>");
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)3, (byte) (-115), (byte)40, (byte)34}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("i9q;@*,6C1(\u0006R7A>", httpConnection_KeyVal0.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("i9q;@*,6C1(\u0006R7A>", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.key());
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("application/x-www-form-urlencoded");
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)3, (byte) (-115), (byte)40, (byte)34}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("i9q;@*,6C1(\u0006R7A>", httpConnection_KeyVal0.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("i9q;@*,6C1(\u0006R7A>", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.key());
      assertEquals("i9q;@*,6C1(\u0006R7A>", httpConnection_KeyVal2.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal0.value("dNU=,tTNe<*1Q`v:6(Z");
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)3, (byte) (-115), (byte)40, (byte)34}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("dNU=,tTNe<*1Q`v:6(Z", httpConnection_KeyVal0.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertEquals("dNU=,tTNe<*1Q`v:6(Z", httpConnection_KeyVal3.value());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertNotNull(httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create("ScriptDataEscapedLessthanSign", "Content-Type", (InputStream) null);
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal0));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal3));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal2));
      assertEquals("Content-Type", httpConnection_KeyVal4.value());
      assertEquals("ScriptDataEscapedLessthanSign", httpConnection_KeyVal4.key());
      assertNull(httpConnection_KeyVal4.contentType());
      assertFalse(httpConnection_KeyVal4.hasInputStream());
      assertNotNull(httpConnection_KeyVal4);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal2);
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertTrue(boolean0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)3, (byte) (-115), (byte)40, (byte)34}, byteArray0);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal4));
      assertEquals(5, byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("dNU=,tTNe<*1Q`v:6(Z", httpConnection_KeyVal0.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("file", "data input stream must not be null");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      Connection connection1 = httpConnection1.cookie("0b2Y}%N*Q]Tbb", "cUX@2+5E\"ya4_R DzF");
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertNotNull(connection1);
      assertNotSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(connection1, httpConnection1);
      assertNotSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)connection1));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertNotNull(httpConnection2);
      
      Connection connection2 = httpConnection1.header("data input stream must not be null", (String) null);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection2));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)connection0));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)httpConnection2));
      assertNotNull(connection2);
      assertNotSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, httpConnection2);
      assertSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection2, connection0);
      assertSame(connection2, httpConnection1);
      assertNotSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertNotSame(connection2, httpConnection2);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection1.data("Content-Type");
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection2));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNull(connection_KeyVal0);
      assertNotSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, httpConnection2);
      assertSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookies((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertNotNull(httpConnection1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("application/x-www-form-urlencoded");
      assertEquals("application/x-www-form-urlencoded", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertEquals("application/x-www-form-urlencoded", httpConnection_Response1.charset());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      Connection connection1 = connection0.cookie("application/x-www-form-urlencoded", "+U");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNotSame(connection1, httpConnection1);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertNotNull(httpConnection2);
      
      Connection connection2 = httpConnection2.header("xmlns", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)connection1));
      assertFalse(connection2.equals((Object)connection0));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertNotNull(connection2);
      assertNotSame(httpConnection2, connection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertNotSame(httpConnection2, connection1);
      assertNotSame(httpConnection2, httpConnection0);
      assertSame(httpConnection2, connection2);
      assertNotSame(connection2, httpConnection0);
      assertNotSame(connection2, connection1);
      assertNotSame(connection2, connection0);
      assertSame(connection2, httpConnection2);
      assertNotSame(connection2, httpConnection1);
      
      Connection.KeyVal connection_KeyVal0 = connection0.data("multipart/form-data");
      assertFalse(httpConnection0.equals((Object)httpConnection2));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)connection2));
      assertFalse(connection0.equals((Object)httpConnection2));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)connection2));
      assertNull(connection_KeyVal0);
      assertNotSame(httpConnection0, httpConnection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection0, connection2);
      assertSame(connection0, httpConnection0);
      assertNotSame(connection0, httpConnection2);
      assertSame(connection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertNotSame(connection0, connection2);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(32);
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(32, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(sSLSocketFactory0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertNotNull(httpConnection2);
      
      Document document0 = new Document("application/x-www-form-urlencoded");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("application/x-www-form-urlencoded", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("application/x-www-form-urlencoded", document0.baseUri());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("application/x-www-form-urlencoded", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("application/x-www-form-urlencoded", document0.baseUri());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("application/x-www-form-urlencoded", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("application/x-www-form-urlencoded", document1.baseUri());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Map<String, String> map0 = document1.dataset();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("application/x-www-form-urlencoded", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("application/x-www-form-urlencoded", document0.baseUri());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("application/x-www-form-urlencoded", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("application/x-www-form-urlencoded", document1.baseUri());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Connection connection0 = httpConnection2.data(map0);
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("application/x-www-form-urlencoded", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("application/x-www-form-urlencoded", document0.baseUri());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("application/x-www-form-urlencoded", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("application/x-www-form-urlencoded", document1.baseUri());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(connection0);
      assertSame(httpConnection2, connection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertNotSame(httpConnection2, httpConnection0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection2);
      assertNotSame(connection0, httpConnection1);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "application/x-www-form-urlencoded");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) null);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key(" ");
      assertEquals(" ", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals(" ", httpConnection_KeyVal0.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(" ", httpConnection_KeyVal1.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value("*G-!6(@osHb(]Oa)[");
      assertEquals(" ", httpConnection_KeyVal2.key());
      assertEquals("*G-!6(@osHb(]Oa)[", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertFalse(httpConnection_KeyVal3.hasInputStream());
      assertEquals("*G-!6(@osHb(]Oa)[", httpConnection_KeyVal3.value());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals(" ", httpConnection_KeyVal3.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals(" ", httpConnection_KeyVal0.key());
      assertEquals("*G-!6(@osHb(]Oa)[", httpConnection_KeyVal0.value());
      assertEquals("*G-!6(@osHb(]Oa)[", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(" ", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNotNull(httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      
      HttpConnection.KeyVal httpConnection_KeyVal4 = HttpConnection.KeyVal.create("Request has already been read (with .parse())", "referer", (InputStream) pipedInputStream0);
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal3));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal0));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal2));
      assertEquals("referer", httpConnection_KeyVal4.value());
      assertEquals("Request has already been read (with .parse())", httpConnection_KeyVal4.key());
      assertNull(httpConnection_KeyVal4.contentType());
      assertTrue(httpConnection_KeyVal4.hasInputStream());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(httpConnection_KeyVal4);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal2);
      
      boolean boolean0 = httpConnection_KeyVal1.hasInputStream();
      assertFalse(boolean0);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal4));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal4));
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals(" ", httpConnection_KeyVal0.key());
      assertEquals("*G-!6(@osHb(]Oa)[", httpConnection_KeyVal0.value());
      assertEquals("*G-!6(@osHb(]Oa)[", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(" ", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      
      // Undeclared exception!
      try { 
        httpConnection0.url("referer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: referer
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.headers((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("nn[*l", "nn[*l");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Connection connection1 = connection0.cookies(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Encoding";
      stringArray0[1] = "application/x-www-form-urlencoded";
      stringArray0[2] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      stringArray0[3] = "Content-Type";
      stringArray0[4] = "Content-Encoding";
      stringArray0[5] = "Content-Type";
      stringArray0[6] = "nn[*l";
      stringArray0[7] = "application/x-www-form-urlencoded";
      Connection connection2 = httpConnection0.data(stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNotNull(uRI0);
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      Connection connection0 = HttpConnection.connect(uRL0);
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNotNull(connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(93);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(93, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(93, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("0c!/", "[%s^=%s]", (InputStream) null);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("0c!/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("[%s^=%s]", httpConnection_KeyVal0.value());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(93, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(93, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("0c!/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("[%s^=%s]", httpConnection_KeyVal0.value());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(93, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy("[%s^=%s]", 93);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(93, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(93, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("0c!/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("[%s^=%s]", httpConnection_KeyVal0.value());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(93, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(93, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.parser((Parser) null);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(93, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(93, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("0c!/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("[%s^=%s]", httpConnection_KeyVal0.value());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(93, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(93, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(93, httpConnection_Request4.timeout());
      assertTrue(httpConnection_Request4.followRedirects());
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(proxy0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(93, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(93, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("0c!/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("[%s^=%s]", httpConnection_KeyVal0.value());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(93, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(93, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(93, httpConnection_Request4.timeout());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(93, httpConnection_Request5.timeout());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertNull(httpConnection_Request5.requestBody());
      assertNotNull(httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      
      Proxy proxy1 = httpConnection_Request5.proxy();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(93, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(93, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("0c!/", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("[%s^=%s]", httpConnection_KeyVal0.value());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(93, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(93, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(93, httpConnection_Request4.timeout());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(93, httpConnection_Request5.timeout());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertNull(httpConnection_Request5.requestBody());
      assertEquals("DIRECT", proxy1.toString());
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertNotNull(proxy1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(proxy0, proxy1);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(proxy1, proxy0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertFalse(httpConnection0.equals((Object)connection0));
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-89);
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)10;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)6, (byte)96, (byte) (-89), (byte)61, (byte) (-4), (byte) (-106), (byte)10}, byteArray0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Content-Encoding");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Connection connection0 = httpConnection0.proxy("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", 104);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      String string0 = parseSettings0.normalizeTag("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", string0);
      assertNotNull(string0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Connection connection1 = httpConnection0.parser(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url("V0/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: V0/
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("8h J<$K(8w)");
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("nn[*l", "nn[*l");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Connection connection1 = connection0.cookies(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeHeader("Content-Type");
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(string0);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      
      URL uRL0 = HttpConnection.encodeUrl((URL) null);
      assertNull(uRL0);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(32);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(32, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection0 = httpConnection1.data("Set-Cookie", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertNotNull(connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection1);
      
      Connection connection1 = httpConnection1.header("application/x-www-form-urlencoded", "\r\n\r\n");
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertNotNull(connection1);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection0);
      assertSame(connection1, httpConnection1);
      assertSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.cookie("Content-Type", "multipart/form-data");
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(connection2.equals((Object)connection0));
      assertFalse(connection2.equals((Object)connection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertNotNull(connection2);
      assertNotSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertNotSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertNotSame(connection2, connection1);
      assertNotSame(connection2, httpConnection1);
      
      Connection connection3 = httpConnection0.referrer("Data key value pairs must not be null");
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(connection3.equals((Object)connection1));
      assertFalse(connection3.equals((Object)connection0));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertNotNull(connection3);
      assertSame(httpConnection0, connection3);
      assertNotSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection3, connection2);
      assertNotSame(connection3, connection1);
      assertSame(connection3, httpConnection0);
      assertNotSame(connection3, connection0);
      assertNotSame(connection3, httpConnection1);
      
      Connection connection4 = httpConnection0.userAgent("M\"@RPJ<FP");
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(connection4.equals((Object)connection1));
      assertFalse(connection4.equals((Object)httpConnection1));
      assertFalse(connection4.equals((Object)connection0));
      assertNotNull(connection4);
      assertSame(httpConnection0, connection3);
      assertNotSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection2);
      assertNotSame(connection4, connection1);
      assertSame(connection4, connection3);
      assertSame(connection4, httpConnection0);
      assertNotSame(connection4, httpConnection1);
      assertNotSame(connection4, connection0);
      assertSame(connection4, connection2);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Data key value pairs must not be null", "UTF-8");
      assertEquals("UTF-8", httpConnection_KeyVal0.value());
      assertEquals("Data key value pairs must not be null", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("M\"@RPJ<FP");
      assertEquals("UTF-8", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal1.key());
      assertEquals("UTF-8", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("UTF-8", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("UTF-8", httpConnection_KeyVal1.value());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("UTF-8", httpConnection_KeyVal2.value());
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value("user-agent");
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("user-agent", httpConnection_KeyVal0.value());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal1.key());
      assertEquals("user-agent", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("user-agent", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals("user-agent", httpConnection_KeyVal3.value());
      assertNotNull(httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      
      String string0 = httpConnection_KeyVal3.key();
      assertEquals("M\"@RPJ<FP", string0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("user-agent", httpConnection_KeyVal0.value());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal1.key());
      assertEquals("user-agent", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("user-agent", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("M\"@RPJ<FP", httpConnection_KeyVal3.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertEquals("user-agent", httpConnection_KeyVal3.value());
      assertNotNull(string0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(32);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(32, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(32, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(sSLSocketFactory0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      Document document0 = Document.createShell("=n}Cy");
      assertEquals("=n}Cy", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("=n}Cy", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertEquals("=n}Cy", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("=n}Cy", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection0 = httpConnection1.data(map0);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertEquals("=n}Cy", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("=n}Cy", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(connection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection1);
      
      Connection connection1 = httpConnection1.cookie("F2J^`dP%l.`", "nth-last-child");
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertNotNull(connection1);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection1);
      assertSame(connection1, httpConnection1);
      assertSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection1.header("F2J^`dP%l.`", ".JKzl,-(");
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertNotNull(connection2);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection2);
      assertSame(httpConnection1, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertNotSame(connection2, httpConnection0);
      assertSame(connection2, httpConnection1);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Type", "nF7:k{c$6T0)");
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("nF7:k{c$6T0)", httpConnection_KeyVal0.value());
      assertNotNull(httpConnection_KeyVal0);
      
      String string0 = httpConnection_KeyVal0.contentType();
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("nF7:k{c$6T0)", httpConnection_KeyVal0.value());
      assertNull(string0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      Connection connection3 = HttpConnection.connect(uRL0);
      assertFalse(connection3.equals((Object)httpConnection0));
      assertFalse(connection3.equals((Object)connection0));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)connection2));
      assertFalse(connection3.equals((Object)connection1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(connection3);
      assertNotSame(connection3, httpConnection0);
      assertNotSame(connection3, connection0);
      assertNotSame(connection3, httpConnection1);
      assertNotSame(connection3, connection2);
      assertNotSame(connection3, connection1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertNotNull(httpConnection2);
      
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection2.data(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertNotNull(connection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertSame(httpConnection2, connection0);
      assertNotSame(httpConnection2, httpConnection0);
      assertNotSame(connection0, httpConnection0);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNotNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.referrer("FS[g&=");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.url(uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNotNull(connection2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      String string0 = HttpConnection.CONTENT_TYPE;
      assertEquals("Content-Type", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "application/x-www-form-urlencoded";
      stringArray0[1] = "Content-Encoding";
      stringArray0[2] = "org.jsoup.nodes.CDataNode";
      stringArray0[3] = "application/x-www-form-urlencoded";
      stringArray0[4] = "application/x-www-form-urlencoded";
      try { 
        connection2.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.header("Content-Encoding", "Content-Encoding");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.cookie("Content-Type", "application/x-www-form-urlencoded");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNull(connection_Response0.charset());
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.contentType());
      assertNotNull(connection_Response0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      
      Connection connection2 = httpConnection0.response(connection_Response0);
      assertNull(connection_Response0.charset());
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.contentType());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(httpConnection_Request0);
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(collection0);
      
      Connection connection0 = httpConnection0.data(collection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(106);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(106, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(106, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)109;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)82, (byte) (-127), (byte)78, (byte)109}, byteArray0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(106, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(106, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(106, httpConnection_Request2.timeout());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.proxy(proxy0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(106, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(106, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(106, httpConnection_Request3.timeout());
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      
      boolean boolean1 = httpConnection_Request3.followRedirects();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(106, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(106, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(106, httpConnection_Request3.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.url("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("nn[*l", "nn[*l");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertNotNull(httpConnection2);
      
      HttpConnection httpConnection3 = new HttpConnection();
      assertFalse(httpConnection3.equals((Object)httpConnection2));
      assertFalse(httpConnection3.equals((Object)connection0));
      assertFalse(httpConnection3.equals((Object)httpConnection1));
      assertFalse(httpConnection3.equals((Object)httpConnection0));
      assertNotNull(httpConnection3);
      
      Connection connection1 = connection0.data("'%Gm3Pc]*PxD", "Xiqxl4{&.gY?", (InputStream) null);
      assertFalse(httpConnection0.equals((Object)httpConnection2));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)httpConnection3));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection2));
      assertFalse(connection0.equals((Object)httpConnection3));
      assertFalse(connection1.equals((Object)httpConnection2));
      assertFalse(connection1.equals((Object)httpConnection3));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertNotNull(connection1);
      assertNotSame(httpConnection0, httpConnection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, httpConnection3);
      assertSame(connection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertNotSame(connection0, httpConnection2);
      assertNotSame(connection0, httpConnection3);
      assertSame(connection0, httpConnection0);
      assertNotSame(connection1, httpConnection2);
      assertNotSame(connection1, httpConnection3);
      assertNotSame(connection1, httpConnection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = httpConnection_Request0.parser();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertNotNull(httpConnection2);
      
      Connection connection0 = httpConnection2.proxy("Content-Type", 3);
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertNotNull(connection0);
      assertNotSame(httpConnection2, httpConnection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertSame(httpConnection2, connection0);
      assertNotSame(connection0, httpConnection1);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection2);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Content-Type");
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(httpConnection0.equals((Object)httpConnection2));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertNull(connection_KeyVal0);
      assertNotSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection2);
      assertNotSame(httpConnection0, httpConnection1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Tag tag0 = Tag.valueOf("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "multipart/form-data");
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", element0.normalName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("multipart/form-data", element0.baseUri());
      assertNotNull(element0);
      
      Tag tag1 = Tag.valueOf("Content-Encoding");
      assertFalse(tag1.equals((Object)tag0));
      assertEquals("content-encoding", tag1.normalName());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isData());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isFormListed());
      assertEquals("Content-Encoding", tag1.getName());
      assertEquals("Content-Encoding", tag1.toString());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      
      int int0 = httpConnection_Request0.maxBodySize();
      assertEquals(1048576, int0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "", (InputStream) sequenceInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      // Undeclared exception!
      try { 
        httpConnection1.data("", "user-agent");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "zC_aYlzng |{", (InputStream) sequenceInputStream0);
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("zC_aYlzng |{", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("application/x-www-form-urlencoded");
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.contentType());
      assertEquals("zC_aYlzng |{", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", connection_KeyVal0.contentType());
      assertEquals("zC_aYlzng |{", connection_KeyVal0.value());
      assertEquals("Content-Encoding", connection_KeyVal0.key());
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        httpConnection1.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "";
      Connection connection0 = httpConnection0.userAgent("");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      try { 
        MockURL.URL("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(32);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(32, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(97);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream0, 99);
      assertFalse(pipedInputStream2.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream2.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream2.available());
      assertNotNull(pipedInputStream2);
      
      pipedInputStream0.mark(99);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream2));
      assertEquals(0, pipedInputStream0.available());
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertNotSame(pipedInputStream0, pipedInputStream2);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection0 = httpConnection1.data("Content-Encoding", "referer", (InputStream) pipedInputStream1, "multipart/form-data");
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream2));
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(connection0);
      assertNotSame(pipedInputStream1, pipedInputStream2);
      assertNotSame(pipedInputStream1, pipedInputStream0);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(connection0, httpConnection1);
      assertNotSame(connection0, httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "content-encoding", (InputStream) pipedInputStream0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream2));
      assertEquals(0, pipedInputStream0.available());
      assertEquals("content-encoding", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertNotSame(pipedInputStream0, pipedInputStream2);
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "EOF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.referrer("FS[g&=");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.url(uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("some", uRL1.getAuthority());
      assertEquals("some", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNotNull(connection2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(string0);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "application/x-www-form-urlencoded";
      stringArray0[1] = "Content-Encoding";
      stringArray0[2] = "org.jsoup.nodes.CDataNode";
      stringArray0[3] = "application/x-www-form-urlencoded";
      stringArray0[4] = "application/x-www-form-urlencoded";
      stringArray0[5] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      stringArray0[6] = "Content-Encoding";
      // Undeclared exception!
      try { 
        connection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("nn[*l", "nn[*l");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Connection connection1 = connection0.cookies(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection2 = httpConnection1.cookie("Content-Encoding", "application/x-www-form-urlencoded");
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)connection0));
      assertFalse(connection2.equals((Object)connection1));
      assertNotNull(connection2);
      assertNotSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, connection1);
      assertSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection2, httpConnection0);
      assertNotSame(connection2, connection0);
      assertSame(connection2, httpConnection1);
      assertNotSame(connection2, connection1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Connection connection3 = httpConnection1.ignoreHttpErrors(true);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection3.equals((Object)connection0));
      assertFalse(connection3.equals((Object)httpConnection0));
      assertFalse(connection3.equals((Object)connection1));
      assertNotNull(connection3);
      assertSame(httpConnection1, connection3);
      assertNotSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, connection1);
      assertSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection3, connection0);
      assertNotSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      assertNotSame(connection3, connection1);
      assertSame(connection3, httpConnection1);
      
      // Undeclared exception!
      try { 
        connection1.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("nn[*l", "nn[*l");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertNotNull(httpConnection1);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertNotNull(httpConnection2);
      
      Connection connection1 = httpConnection2.cookie("Content-Encoding", "application/x-www-form-urlencoded");
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)connection0));
      assertNotNull(connection1);
      assertNotSame(httpConnection2, httpConnection0);
      assertNotSame(httpConnection2, connection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertSame(httpConnection2, connection1);
      assertNotSame(connection1, httpConnection0);
      assertNotSame(connection1, httpConnection1);
      assertSame(connection1, httpConnection2);
      assertNotSame(connection1, connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal2.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal2.value());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      
      InputStream inputStream0 = httpConnection_KeyVal1.inputStream();
      assertEquals(0, inputStream0.available());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertNotNull(inputStream0);
      assertSame(inputStream0, pipedInputStream0);
      assertSame(pipedInputStream0, inputStream0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("\n", "!SZR.6;'7'c,q'N1o*3");
      assertEquals("\n", httpConnection_KeyVal0.key());
      assertEquals("!SZR.6;'7'c,q'N1o*3", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", "content-encoding");
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("content-encoding", httpConnection_KeyVal1.value());
      assertNotNull(httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal0));
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", httpConnection_KeyVal2.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal2.value());
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("\n=!SZR.6;'7'c,q'N1o*3", string0);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal2));
      assertEquals("\n", httpConnection_KeyVal0.key());
      assertEquals("!SZR.6;'7'c,q'N1o*3", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNotNull(string0);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("!SZR.6;'7'c,q'N1o*3");
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals("!SZR.6;'7'c,q'N1o*3", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("!SZR.6;'7'c,q'N1o*3", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      String string1 = httpConnection_Response1.statusMessage();
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals("!SZR.6;'7'c,q'N1o*3", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("!SZR.6;'7'c,q'N1o*3", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(string1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("HTTP error fetching URL", "");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      Proxy proxy1 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy1.toString());
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertNotNull(proxy1);
      assertSame(proxy1, proxy0);
      
      Connection connection1 = httpConnection0.proxy(proxy1);
      assertEquals("DIRECT", proxy1.toString());
      assertEquals(Proxy.Type.DIRECT, proxy1.type());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(proxy1, proxy0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.header("org.jsoup.parser.TreeBuilder", "XNJFMr{f;");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookie("", "    ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("nn[*l", "nn[*l");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      Connection connection1 = connection0.cookies(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertNotNull(httpConnection1);
      
      Connection connection2 = httpConnection1.cookie("Content-Encoding", "application/x-www-form-urlencoded");
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)connection0));
      assertFalse(connection2.equals((Object)connection1));
      assertNotNull(connection2);
      assertNotSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(httpConnection1, connection1);
      assertNotSame(connection2, httpConnection0);
      assertNotSame(connection2, connection0);
      assertNotSame(connection2, connection1);
      assertSame(connection2, httpConnection1);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(855);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(855, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(855, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(855, httpConnection_Request2.timeout());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request2.postDataCharset("text/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // text/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.followRedirects(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("content-encoding");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Connection connection1 = httpConnection0.headers(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(80);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 80);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      
      pipedInputStream1.mark(80);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      assertNotSame(pipedInputStream1, pipedInputStream0);
      
      Connection connection2 = httpConnection0.data("content-encoding", "\n", (InputStream) pipedInputStream1, "\n");
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(pipedInputStream1, pipedInputStream0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("8OWMQ?x", "\n", (InputStream) pipedInputStream0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals("\n", httpConnection_KeyVal0.value());
      assertEquals("8OWMQ?x", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("t|o5JITf@j}x,|GBN^3", "");
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertEquals("t|o5JITf@j}x,|GBN^3", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNotNull(httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value("S");
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals("S", httpConnection_KeyVal0.value());
      assertEquals("8OWMQ?x", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("S", httpConnection_KeyVal2.value());
      assertEquals("8OWMQ?x", httpConnection_KeyVal2.key());
      assertNotNull(httpConnection_KeyVal2);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      
      String string0 = httpConnection_KeyVal2.toString();
      assertEquals("8OWMQ?x=S", string0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals("S", httpConnection_KeyVal0.value());
      assertEquals("8OWMQ?x", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("S", httpConnection_KeyVal2.value());
      assertEquals("8OWMQ?x", httpConnection_KeyVal2.key());
      assertNotNull(string0);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.key("multipart/form-data");
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal1));
      assertEquals(0, pipedInputStream0.available());
      assertEquals("S", httpConnection_KeyVal0.value());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("S", httpConnection_KeyVal2.value());
      assertEquals("multipart/form-data", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("S", httpConnection_KeyVal3.value());
      assertEquals("multipart/form-data", httpConnection_KeyVal3.key());
      assertNotNull(httpConnection_KeyVal3);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      
      Connection connection3 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection3);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection2);
      assertSame(connection3, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      try { 
        MockURL.URL("application/x-www-form-urlencoded", "\n", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: application/x-www-form-urlencoded
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(32);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(32, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(32, httpConnection_Request1.timeout());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request1.maxBodySize(32);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertEquals(32, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32, httpConnection_Request1.maxBodySize());
      assertEquals(32, httpConnection_Request1.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(32, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(32, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection0 = httpConnection1.request((Connection.Request) httpConnection_Request1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertEquals(32, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32, httpConnection_Request1.maxBodySize());
      assertEquals(32, httpConnection_Request1.timeout());
      assertNotNull(connection0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection1);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy(proxy0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertEquals(32, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(32, httpConnection_Request2.maxBodySize());
      assertEquals(32, httpConnection_Request2.timeout());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertEquals(32, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(sSLSocketFactory0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertNotNull(httpConnection2);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-2182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("some", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.referrer("FS[g&=");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.url(uRL1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("file", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("some", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNotNull(connection2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(string0);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      
      // Undeclared exception!
      try { 
        httpConnection0.header((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.requestBody("");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.referrer("");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(191);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(191, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(191, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("ns}:I+{5@ ", 224);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(191, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(191, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(191, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(191);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(191, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(191, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(191, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(191, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(191, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(191, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(191, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(191, connection_Request0.maxBodySize());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(86);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Connection connection2 = connection1.data("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Content-Encoding", (InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection2);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      
      Connection connection3 = connection0.maxBodySize(101);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection2);
      assertSame(connection0, connection3);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection2);
      assertSame(connection3, connection0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      int int0 = 2470;
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertNotNull(httpConnection2);
      
      Connection connection0 = httpConnection2.proxy("Content-Type", 3);
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertNotNull(connection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertNotSame(httpConnection2, httpConnection0);
      assertSame(httpConnection2, connection0);
      assertNotSame(connection0, httpConnection0);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection2);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Content-Type");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(httpConnection0.equals((Object)httpConnection2));
      assertNull(connection_KeyVal0);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection2);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      Connection connection0 = httpConnection1.data("xFL<{Q", "xFL<{Q");
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      assertNotNull(connection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection1);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      Connection connection1 = httpConnection0.cookie("accept-encoding", ".=(,gO[nn_,");
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertNotNull(connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertNotSame(connection1, httpConnection1);
      
      Connection connection2 = httpConnection1.proxy(proxy0);
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)connection1));
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(connection2);
      assertNotSame(httpConnection1, connection1);
      assertSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(connection2, httpConnection1);
      assertSame(connection2, connection0);
      assertNotSame(connection2, httpConnection0);
      assertNotSame(connection2, connection1);
      
      Connection connection3 = httpConnection1.header("_]PXb6^a(4A>n", "Content-Encoding");
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection3.equals((Object)connection1));
      assertFalse(connection3.equals((Object)httpConnection0));
      assertNotNull(connection3);
      assertNotSame(httpConnection1, connection1);
      assertSame(httpConnection1, connection3);
      assertSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(connection3, httpConnection1);
      assertSame(connection3, connection2);
      assertNotSame(connection3, connection1);
      assertNotSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      Tag tag0 = Tag.valueOf("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "");
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertFalse(element0.isBlock());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", element0.normalName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.nodeName());
      assertNotNull(element0);
      
      Map<String, String> map0 = element0.dataset();
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertFalse(element0.isBlock());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", element0.normalName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.nodeName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Connection connection0 = httpConnection0.data(map0);
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertFalse(element0.isBlock());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", element0.normalName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.nodeName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(httpConnection_Response0);
      
      Connection connection1 = connection0.response((Connection.Response) httpConnection_Response0);
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertFalse(element0.isBlock());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", element0.normalName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.nodeName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)101, (byte)47);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)52, (byte)10, (byte)47}, byteArray0);
      assertEquals((-97), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)52, (byte)10, (byte)47}, byteArray0);
      assertEquals((-97), byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        httpConnection0.data("", "", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = "$ p;tjy0";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(32);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(32, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(32, httpConnection_Request1.maxBodySize());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(sSLSocketFactory0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      // Undeclared exception!
      try { 
        httpConnection1.postDataCharset("$ p;tjy0");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $ p;tjy0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      int int0 = 0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(0, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(0, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = new HttpConnection.Request();
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)httpConnection_Request1));
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNotNull(httpConnection_Request2);
      
      String string0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      Tag tag0 = Tag.valueOf("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "");
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertFalse(tag0.isBlock());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", element0.normalName());
      assertNotNull(element0);
      
      Tag tag1 = Tag.valueOf("g7|");
      assertFalse(tag1.equals((Object)tag0));
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isEmpty());
      assertEquals("g7|", tag1.normalName());
      assertFalse(tag1.isFormListed());
      assertEquals("g7|", tag1.toString());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertEquals("g7|", tag1.getName());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isSelfClosing());
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      
      Map<String, String> map0 = element0.dataset();
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertFalse(tag0.isBlock());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", element0.normalName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertNotSame(tag0, tag1);
      
      Connection connection0 = httpConnection0.data(map0);
      assertFalse(tag0.equals((Object)tag1));
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", tag0.getName());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      assertFalse(tag0.isBlock());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", element0.normalName());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(tag0, tag1);
      assertSame(connection0, httpConnection0);
      
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)101, (byte)47);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)52, (byte)10, (byte)47}, byteArray0);
      assertEquals((-97), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      String string0 = httpConnection_Request1.requestBody();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(string0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      byteArrayInputStream0.reset();
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)52, (byte)10, (byte)47}, byteArray0);
      assertEquals((-97), byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        httpConnection0.data("", "", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNotNull(httpConnection1);
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertNotNull(httpConnection2);
      
      // Undeclared exception!
      try { 
        httpConnection2.postDataCharset("48v");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 48v
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("HTTP error fetching URL", "HTTP error fetching URL");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(proxy0);
      
      Connection connection1 = connection0.proxy(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = connection0.header("Content-Encoding", "Content-Encoding");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection0, connection2);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      
      Connection connection3 = connection2.cookie("+0w/>CKW\"VhqS*6", "application/x-www-form-urlencoded");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection0, connection2);
      assertSame(connection0, connection3);
      assertSame(connection2, connection3);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      Connection connection1 = httpConnection0.proxy(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(false);
      assertFalse(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.followRedirects(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String string0 = "content-encoding";
      CDataNode cDataNode0 = new CDataNode("content-encoding");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Connection connection1 = httpConnection0.headers(map0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      String string1 = "\n";
      int int0 = 80;
      PipedInputStream pipedInputStream0 = new PipedInputStream(80);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 80);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookie((String) null, "F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("HTTP error fetching URL", "HTTP error fetching URL");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      Connection connection1 = connection0.proxy(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = connection0.header("Content-Encoding", "Content-Encoding");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.userAgent("Content-Encoding");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.timeout(80);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("application/x-www-form-urlencoded");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: application/x-www-form-urlencoded
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.userAgent((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      String string0 = "bcDM8eFX";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("$ p;tjy0", "bcDM8eFX", (InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("bcDM8eFX", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("$ p;tjy0", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("bcDM8eFX", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("$ p;tjy0", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(32);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32, httpConnection_Request1.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("bcDM8eFX", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("$ p;tjy0", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(32, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(32, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      
      Connection.Request connection_Request1 = httpConnection_Request1.maxBodySize(32);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(32, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals(32, connection_Request1.maxBodySize());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertNull(connection_Request1.requestBody());
      assertTrue(connection_Request1.followRedirects());
      assertEquals(30000, connection_Request1.timeout());
      assertNotNull(connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request2);
      assertSame(connection_Request1, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, httpConnection_Request1);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.proxy("$ p;tjy0", 98688);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:98688
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.method(connection_Method0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.proxy("", 2457);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize((-1534));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "o45ah";
      Connection connection0 = httpConnection0.requestBody("o45ah");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.maxBodySize(1241);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      int int0 = (-1525);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1525));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      httpConnection_Response0.method = connection_Method0;
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertFalse(httpConnection_Response0.method.hasBody());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("8h J<$K(8w)");
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      int int0 = httpConnection_Response1.statusCode();
      assertEquals(0, int0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "ZCX1B;v4", (InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertEquals("ZCX1B;v4", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertEquals("ZCX1B;v4", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.timeout());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertEquals("ZCX1B;v4", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(0, httpConnection_Request3.timeout());
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      int int1 = httpConnection_Request3.timeout();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertEquals("ZCX1B;v4", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(0, httpConnection_Request3.timeout());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(8);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      assertNotNull(pipedInputStream1);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      pipedOutputStream0.connect(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      assertNotSame(pipedInputStream1, pipedInputStream0);
      
      try { 
        pipedInputStream1.connect(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.cookie("nth-last-of-type", "");
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.ignoreContentType(false);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request0.requestBody("");
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals("", httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNotNull(httpConnection_Response0);
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("8h J<$K(8w)");
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      int int0 = httpConnection_Response1.statusCode();
      assertEquals(0, int0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response2 = (HttpConnection.Response)httpConnection_Response1.cookie("h5g6G+)z", "");
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response2.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNotNull(httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertSame(httpConnection_Response1, httpConnection_Response2);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.ignoreContentType(false);
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "application/x-www-form-urlencoded", (InputStream) mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNotNull(httpConnection_Response0);
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      httpConnection_Response0.method = connection_Method0;
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertFalse(httpConnection_Response0.method.hasBody());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("8h J<$K(8w)");
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      int int0 = httpConnection_Response1.statusCode();
      assertEquals(0, int0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response2 = (HttpConnection.Response)httpConnection_Response1.cookie("h5g6G+)z", "");
      assertNull(httpConnection_Response0.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.contentType());
      assertEquals("8h J<$K(8w)", httpConnection_Response2.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNotNull(httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertSame(httpConnection_Response1, httpConnection_Response2);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.ignoreContentType(false);
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "application/x-www-form-urlencoded", (InputStream) mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(httpConnection_Request0);
      
      Connection.Request connection_Request0 = httpConnection_Request0.requestBody("");
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("", httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("", connection_Request0.requestBody());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeCookie("\r\n\r\n");
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("", httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.requestBody((String) null);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      
      httpConnection_Request0.cookies = null;
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      assertFalse(boolean0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNotNull(collection0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.timeout(298);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(proxy0);
      
      Connection connection1 = httpConnection0.proxy(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNotNull(httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNotNull(httpConnection_Request0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      
      String string0 = "bcDM8eFX";
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("$ p;tjy0", "bcDM8eFX", (InputStream) pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("bcDM8eFX", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("$ p;tjy0", httpConnection_KeyVal0.key());
      assertNotNull(httpConnection_KeyVal0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("bcDM8eFX", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("$ p;tjy0", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      
      int int0 = 32;
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(32);
      assertEquals(32, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(32, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("bcDM8eFX", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("$ p;tjy0", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(32, httpConnection_Request2.maxBodySize());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(32, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.userAgent("L'1##x");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("L'1##x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: L'1##x
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNotNull(connection_Request0);
      
      Connection.Request connection_Request1 = httpConnection0.request();
      assertEquals(1048576, connection_Request1.maxBodySize());
      assertTrue(connection_Request1.followRedirects());
      assertEquals(30000, connection_Request1.timeout());
      assertNull(connection_Request1.requestBody());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertNotNull(connection_Request1);
      assertSame(connection_Request1, connection_Request0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.equals((Object)connection_Request1));
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNotNull(httpConnection_Request0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy("Content-Type", (-768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-768
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      Tag tag0 = Tag.valueOf("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      Element element0 = new Element(tag0, "");
      Map<String, String> map0 = element0.dataset();
      httpConnection0.data(map0);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)101, (byte)47);
      byteArrayInputStream0.reset();
      // Undeclared exception!
      try { 
        httpConnection0.data("", "", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-52);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 122);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Cookie", "", (InputStream) byteArrayInputStream0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(400);
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy0);
      httpConnection_Request3.proxy("@%.,gsC~KO>=Y[0e", 0);
      int int0 = 0;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.parser();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("HTTP error fetching URL", "HTTP error fetching URL");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.HttpStatusException", "application/x-www-form-urlencoded");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      httpConnection_KeyVal0.value("application/x-www-form-urlencoded");
      httpConnection_KeyVal0.value("application/x-www-form-urlencoded");
      httpConnection_KeyVal0.value();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.sslSocketFactory();
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      httpConnection_Request0.ignoreContentType();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Request0.removeHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("#`sx\"[n6@P");
      httpConnection_Response1.charset();
      httpConnection_Request0.sslSocketFactory();
      HttpConnection.connect(uRL0);
      // Undeclared exception!
      try { 
        httpConnection_Response1.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.requestBody("");
      httpConnection0.referrer("");
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(191);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("ns}:I+{5@ ", 224);
      // Undeclared exception!
      try { 
        httpConnection_Request2.postDataCharset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(0);
      httpConnection_Request1.ignoreHttpErrors(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create((String) null, "", (InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreHttpErrors(false);
      String string0 = "okE:BNoZX\\6Ym\\g!7";
      // Undeclared exception!
      try { 
        MockURL.URL("okE:BNoZX6Ymg!7", "Content-Type", 0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = null;
      String string1 = "JL;?1j9y:}4EMc$x:";
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      int int0 = 200;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(200);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      httpConnection0.proxy(proxy0);
      httpConnection0.userAgent(",Bg~Qv`#th");
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy((String) null, 200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(4263);
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreContentType(true);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      // Undeclared exception!
      try { 
        httpConnection_Request2.proxy((String) null, 61);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }
}
