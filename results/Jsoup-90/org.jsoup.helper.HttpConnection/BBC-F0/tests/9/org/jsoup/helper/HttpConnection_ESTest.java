/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:48:22 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.InetSocketAddress;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.SocketAddress;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("set-cbokir", "set-cbokir");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpConnection.Response httpConnection_Response2 = (HttpConnection.Response)httpConnection_Response0.header("set-cookir", "set-cookir");
      assertNotNull(httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.contentType());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.charset());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.request((Connection.Request) null);
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      // Undeclared exception!
      try { 
        httpConnection0.parser(parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = false;
      Connection.Request connection_Request0 = null;
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("boundary");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Content-Encoding");
      assertFalse(boolean0);
      
      Connection connection0 = httpConnection0.data("meta", "set-cookir");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("!");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Content-Encoding", "?oF`+tVd", 0, "{", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("{", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("?oF`+tVd:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("{", uRL0.getPath());
      assertEquals("content-encoding", uRL0.getProtocol());
      assertEquals("?oF`+tVd", uRL0.getHost());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      assertNull(uRL0.toString());
      assertNull(uRL0.toExternalForm());
      assertEquals("{", uRL0.getFile());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("?oF`+tVd:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("{", uRL0.getPath());
      assertEquals("content-encoding", uRL0.getProtocol());
      assertEquals("?oF`+tVd", uRL0.getHost());
      assertEquals(0, uRL1.getPort());
      assertEquals("{", uRL1.getPath());
      assertNull(uRL1.getQuery());
      assertEquals("?oF`+tVd", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("content-encoding", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("{", uRL1.getFile());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("?oF`+tVd:0", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Connection connection1 = httpConnection0.headers(hashMap0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        connection0.data("multipart/form-data", "Content-Encoding", (InputStream) null, "Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String string0 = "M),O[\"wie+8";
      // Undeclared exception!
      try { 
        httpConnection0.data("M),O[\"wie+8", "M),O[\"wie+8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.header("Data value must not be null", (String) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("Content-Encoding");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection1 = httpConnection0.cookies(map0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("v]zR2UF~18M?%2U:C<Y");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      
      // Undeclared exception!
      try { 
        connection0.data((Collection<Connection.KeyVal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("v H`)7p,[-7", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("M),O[\"wie+8");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      
      Connection connection1 = connection0.request((Connection.Request) null);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      URL uRL0 = httpConnection_Response0.url;
      assertNull(uRL0);
      
      // Undeclared exception!
      try { 
        connection0.url((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      String string0 = "Set-Cookie";
      String string1 = "S*vD=jO('W!NQe+";
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("Set-Cookie", (String) null);
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      String string0 = "Set-Cookie";
      String string1 = "S*vD=!O('W!CQe+";
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("Set-Cookie", "S*vD=!O('W!CQe+");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      
      try { 
        connection0.execute();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "cB}:K'.r~p/t");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Connection connection0 = HttpConnection.connect("http:/");
      assertNotNull(connection0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      assertFalse(httpConnection0.equals((Object)connection0));
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset("http:/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // http:/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreContentType(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.followRedirects(false);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection_Request0, httpConnection_Request0);
      assertFalse(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.equals((Object)httpConnection_Request0));
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection connection1 = connection0.proxy("basefont", 1979);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("Set-Cookie", "gw1hbz7v%0q");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response1);
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      
      HttpConnection.Response httpConnection_Response2 = (HttpConnection.Response)httpConnection_Response0.header("BogusDoctype", "BogusDoctype");
      assertNotNull(httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertNotSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response2, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.statusMessage());
      assertFalse(httpConnection_Response0.equals((Object)httpConnection_Response1));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response1));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)115;
      byteArray0[8] = (byte)76;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)24, (byte) (-121), (byte)92, (byte)81, (byte)25, (byte)0, (byte)29, (byte)115, (byte)76}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      httpConnection_Response1.processResponseHeaders(map0);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertNotSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response1, httpConnection_Response2);
      assertNotSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertFalse(httpConnection_Response0.equals((Object)httpConnection_Response1));
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response2));
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection connection0 = httpConnection0.header("Unexpected token [%s] when in state [%s]", "Unexpected token [%s] when in state [%s]");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertTrue(uRL1.equals((Object)uRL0));
      
      URL uRL2 = MockURL.URL(uRL1, "application/x-www-form-urlencoded", (URLStreamHandler) null);
      assertNotNull(uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getUserInfo());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/application/application/x-www-form-urlencoded", uRL2.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/application/application/x-www-form-urlencoded", uRL2.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertNull(uRL2.getQuery());
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.url(uRL2);
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getUserInfo());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/application/application/x-www-form-urlencoded", uRL2.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/application/application/x-www-form-urlencoded", uRL2.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL2.getDefaultPort());
      assertNull(uRL2.getRef());
      assertNull(uRL2.getQuery());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(uRL0.equals((Object)uRL2));
      assertFalse(uRL1.equals((Object)uRL2));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.userAgent((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response1);
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("set-ookie", "set-ookie");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.followRedirects(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeCookie("0xaz v`!Sb2XKH");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      URI uRI0 = MockURI.aFTPURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRL0.getFile());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://foo.bar", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("ftp://foo.bar", uRL0.toExternalForm());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("ftp", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertEquals("", uRI0.getRawPath());
      assertEquals("ftp://foo.bar", uRI0.toString());
      assertEquals("", uRL0.getFile());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://foo.bar", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals("ftp://foo.bar", uRL0.toExternalForm());
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNotNull(connection_Response0);
      assertNotSame(connection_Response0, httpConnection_Response0);
      assertNull(connection_Response0.charset());
      assertNull(connection_Response0.contentType());
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      assertFalse(connection_Response0.equals((Object)httpConnection_Response0));
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("PUBLIC", 3180);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      
      boolean boolean0 = httpConnection_Request2.followRedirects();
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("user-agent", ",L,");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("user-agent");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertEquals("user-agent", connection_KeyVal0.key());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals(",L,", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Connection connection0 = httpConnection0.maxBodySize(2193);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        connection0.postDataCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response1);
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      httpConnection_Response0.processResponseHeaders(map0);
      assertNotSame(httpConnection_Response0, httpConnection_Response1);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(httpConnection_Response0.equals((Object)httpConnection_Response1));
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNull(connection_KeyVal0);
      
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response2);
      assertNull(httpConnection_Response2.charset());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response1));
      
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response1);
      assertNotNull(connection0);
      assertNotSame(httpConnection_Response1, httpConnection_Response0);
      assertNotSame(httpConnection_Response1, httpConnection_Response2);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response2));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("set-cookie", "set-cookie");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Connection connection0 = httpConnection1.cookies(hashMap0);
      assertNotNull(connection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(connection0, httpConnection1);
      assertNotSame(connection0, httpConnection0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("allowfullscreen", "allowfullscreen", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.key());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.key());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("Pz':4hj:sg2", 12);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.key());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(1581);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1581, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.key());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1581, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(1581, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1581, httpConnection_Request3.timeout());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(proxy0);
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1581, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.key());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1581, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(1581, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1581, httpConnection_Request3.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertEquals(1581, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertTrue(httpConnection_Request4.followRedirects());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(2);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertNotNull(parser2);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.parser(parser2);
      assertNotNull(httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1581, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.key());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1581, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(1581, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1581, httpConnection_Request3.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertEquals(1581, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertTrue(httpConnection_Request4.followRedirects());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals(1581, httpConnection_Request5.timeout());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertNull(httpConnection_Request5.requestBody());
      
      int int0 = httpConnection_Request5.maxBodySize();
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1581, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("allowfullscreen", httpConnection_KeyVal0.key());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1581, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(1581, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1581, httpConnection_Request3.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertEquals(1581, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertTrue(httpConnection_Request4.followRedirects());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals(1581, httpConnection_Request5.timeout());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertNull(httpConnection_Request5.requestBody());
      assertEquals(1048576, int0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, String> map1 = attributes0.dataset();
      assertNotNull(map1);
      assertNotSame(map1, map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map1.equals((Object)map0));
      
      Connection connection0 = httpConnection0.cookie("org.jsoup.parser.Tag", "E_[gKFJt=");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String[] stringArray0 = new String[1];
      Connection connection1 = httpConnection0.data("\"\r\nContent-Type: ", "\"\r\nContent-Type: ");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response1);
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("set-cookie", "set-cookie");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.headers(hashMap0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(16);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        connection0.data((String) null, (String) null, (InputStream) pipedInputStream0, "v@cX>Fz/q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.referrer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("multipart/form-data");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, stringArray0.length);
      
      Connection connection1 = httpConnection0.referrer("Content-Type");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("8 E%!", 1011);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertNotNull(proxy0);
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(1011, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:1011", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:1011", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(1011, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:1011", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:1011", proxy0.toString());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser((Parser) null);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(1011, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:1011", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:1011", proxy0.toString());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", 1011);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(1011, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:1011", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:1011", proxy0.toString());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      
      String string0 = httpConnection_Request3.requestBody();
      assertNull(string0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("200.42.42.0", mockInetSocketAddress0.getHostString());
      assertEquals(1011, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("/200.42.42.0:1011", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.HTTP, proxy0.type());
      assertEquals("HTTP @ /200.42.42.0:1011", proxy0.toString());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("e{'/XLq.$32G(3&j=");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals("e{'/XLq.$32G(3&j=", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("e{'/XLq.$32G(3&j=", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      httpConnection_Response1.processResponseHeaders(hashMap0);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals("e{'/XLq.$32G(3&j=", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("e{'/XLq.$32G(3&j=", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.URL("TAaeF[M<weF;2vr", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", 95, "set-cookie", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", uRL0.getHost());
      assertEquals(95, uRL0.getPort());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36:95", uRL0.getAuthority());
      assertEquals("taaef[m<wef;2vr", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("set-cookie", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("set-cookie", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", uRL0.getHost());
      assertEquals(95, uRL0.getPort());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36:95", uRL0.getAuthority());
      assertEquals("taaef[m<wef;2vr", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("set-cookie", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("set-cookie", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals(95, uRL1.getPort());
      assertEquals("set-cookie", uRL1.getFile());
      assertEquals("taaef[m<wef;2vr", uRL1.getProtocol());
      assertEquals("set-cookie", uRL1.getPath());
      assertNull(uRL1.getQuery());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36:95", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      Connection connection0 = httpConnection0.data("user-agent", "Content-Type");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)81, (byte) (-1), (byte)116}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      Connection connection1 = httpConnection0.data("Gw1Hbz7v%0Q", "user-agent", (InputStream) byteArrayInputStream0, "accept-encoding");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertArrayEquals(new byte[] {(byte) (-69), (byte)81, (byte) (-1), (byte)116}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Gw1Hbz7v%0Q");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertEquals("accept-encoding", connection_KeyVal0.contentType());
      assertEquals("Gw1Hbz7v%0Q", connection_KeyVal0.key());
      assertEquals("user-agent", connection_KeyVal0.value());
      assertTrue(connection_KeyVal0.hasInputStream());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      Connection.Method connection_Method0 = Connection.Method.TRACE;
      Connection connection2 = connection0.method(connection_Method0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("multipart/form-data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: multipart/form-data
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("W9NH>*.s%Z57wt\"$$2", "W9NH>*.s%Z57wt\"$$2");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.requestBody("Content-Type");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      int int0 = httpConnection_Response0.statusCode();
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, int0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection1 = httpConnection0.data(map0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection2 = httpConnection0.cookie("]@oT{l6{", "]@oT{l6{");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      String string0 = "x><5W";
      String string1 = "RJ";
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("multipart/form-data");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Connection connection0 = httpConnection0.timeout(112);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      Connection connection1 = httpConnection0.userAgent("zG-W N}qEdGry0r3");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Connection connection2 = httpConnection0.cookies(map0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("multipart/form-data");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Connection connection0 = httpConnection0.data(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      Proxy proxy0 = httpConnection_Request0.proxy();
      assertNull(proxy0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.header("Gw1Hbz7v%0Q", "v]zR2UF~18M?%2U:C<Y");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      Connection connection1 = httpConnection1.postDataCharset("UTF-8");
      assertNotNull(connection1);
      assertNotSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection1, connection0);
      assertSame(connection1, httpConnection1);
      assertNotSame(connection1, httpConnection0);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.proxy("gw1hbz7v%0q", (-33));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-33
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = HttpConnection.encodeUrl((URL) null);
      assertNull(uRL0);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.header("Gw1Hbz7v%0Q", "v]zR2UF~18M?%2U:C<Y");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("multipart/form-data");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      Connection connection1 = httpConnection1.cookies(map0);
      assertNotNull(connection1);
      assertNotSame(httpConnection1, connection0);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      assertSame(connection1, httpConnection1);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("8A8(D^{m'T'3 ~G*Zsr");
      assertNull(connection_KeyVal0);
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("boundary", "content-type");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("boundary", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("content-type", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("application/octet-stream");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("boundary", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/octet-stream", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("application/octet-stream", httpConnection_KeyVal1.value());
      assertEquals("boundary", httpConnection_KeyVal1.key());
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("application/x-www-form-urlencoded");
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/octet-stream", httpConnection_KeyVal0.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("application/octet-stream", httpConnection_KeyVal1.value());
      assertEquals("application/octet-stream", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.key());
      
      String string0 = httpConnection_KeyVal2.key();
      assertNotNull(string0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/octet-stream", httpConnection_KeyVal0.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("application/octet-stream", httpConnection_KeyVal1.value());
      assertEquals("application/octet-stream", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.key());
      assertEquals("application/x-www-form-urlencoded", string0);
      
      Connection connection2 = httpConnection0.cookie("application/x-www-form-urlencoded", "H ?oJr");
      assertNotNull(connection2);
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, connection0);
      assertNotSame(connection2, connection1);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, httpConnection0);
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)connection1));
      assertFalse(connection2.equals((Object)httpConnection1));
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      CDataNode cDataNode0 = new CDataNode("02");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection1 = httpConnection0.proxy("multipart/form-data", 191);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection.Response connection_Response0 = connection0.response();
      assertNotNull(connection_Response0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertNotSame(connection_Response0, httpConnection_Response0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.statusMessage());
      assertNull(connection_Response0.charset());
      assertNull(connection_Response0.contentType());
      assertFalse(connection_Response0.equals((Object)httpConnection_Response0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      httpConnection_Response0.processResponseHeaders(map0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      String string0 = "Gw1Hbz7v%0Q";
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.header((String) null, "V;f,(9O;EqwCKSGlOYd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Content-Encoding";
      stringArray0[1] = "Content-Type";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      stringArray0[2] = "multipart/form-data";
      stringArray0[3] = "Content-Encoding";
      Connection connection0 = httpConnection0.data(stringArray0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(4, stringArray0.length);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Parser parser0 = httpConnection_Request0.parser();
      assertNotNull(parser0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      
      Connection connection1 = httpConnection0.data("p_i\"x<(V.u", "HTTP error fetching URL");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("user-agent", "multipart/form-data; boundary=");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        connection0.timeout((-500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.header("Gw1Hbz7v%0Q", "v]zR2UF~18M?%2U:C<Y");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("multipart/form-data");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection1 = httpConnection0.cookies(map0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      String string0 = "(jYy\\uy;eFRe";
      Connection.KeyVal connection_KeyVal0 = connection1.data(string0);
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("multipart/form-data");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Attributes attributes1 = attributes0.put("", true);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      // Undeclared exception!
      try { 
        httpConnection0.cookies(map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("user-agent", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("user-agent", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("%");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("%", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("%", httpConnection_KeyVal1.key());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", httpConnection_KeyVal1.value());
      
      String string0 = httpConnection_KeyVal1.toString();
      assertNotNull(string0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("%", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("%", httpConnection_KeyVal1.key());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", httpConnection_KeyVal1.value());
      assertEquals("%=org.jsoup.nodes.Attributes$Dataset$DatasetIterator", string0);
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("%", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("%", httpConnection_KeyVal1.key());
      assertEquals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value("Content-Encoding");
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertEquals("%", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.value());
      assertEquals("%", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("%", httpConnection_KeyVal2.key());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal2.value());
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal1.key("multipart/form-data");
      assertNotNull(httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal3.hasInputStream());
      assertNull(httpConnection_KeyVal3.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal3.key());
      assertEquals("Content-Encoding", httpConnection_KeyVal3.value());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.method(connection_Method0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request1.timeout(2011);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(2011, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2011, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(2011, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertNull(httpConnection_Request3.requestBody());
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.data((Connection.KeyVal) httpConnection_KeyVal2);
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(2011, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2011, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal2.key());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal2.value());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(2011, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(2011, httpConnection_Request4.timeout());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      
      boolean boolean1 = httpConnection_Request3.ignoreContentType();
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(2011, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(2011, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(2011, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.referrer("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      assertNotNull(httpConnection1);
      assertSame(httpConnection1, connection0);
      assertSame(httpConnection1, httpConnection0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.userAgent("");
      assertNotNull(httpConnection2);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, httpConnection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection2, connection0);
      assertSame(httpConnection2, httpConnection0);
      assertSame(httpConnection2, httpConnection1);
      
      HttpConnection httpConnection3 = (HttpConnection)httpConnection0.referrer("accept-encoding");
      assertNotNull(httpConnection3);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, httpConnection2);
      assertSame(httpConnection0, httpConnection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection3, connection0);
      assertSame(httpConnection3, httpConnection2);
      assertSame(httpConnection3, httpConnection0);
      assertSame(httpConnection3, httpConnection1);
      
      HttpConnection httpConnection4 = (HttpConnection)httpConnection0.referrer("Only http & https protocols supported");
      assertNotNull(httpConnection4);
      assertSame(httpConnection0, httpConnection4);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, httpConnection2);
      assertSame(httpConnection0, httpConnection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection4, httpConnection2);
      assertSame(httpConnection4, httpConnection1);
      assertSame(httpConnection4, httpConnection0);
      assertSame(httpConnection4, connection0);
      assertSame(httpConnection4, httpConnection3);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection0 = httpConnection0.data(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, attributes0.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("Content-Encoding", 75);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.timeout((-6058));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("%", "Q4");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Connection connection1 = connection0.request((Connection.Request) httpConnection_Request0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Connection connection2 = httpConnection0.cookie("Charset must not be null", "Charset must not be null");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      int int0 = 86;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("Content-Encoding", "nowrap");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.maxBodySize(130);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URL uRL1 = MockURL.URL(uRL0, "#data", (URLStreamHandler) null);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample#data", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("data", uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample#data", uRL1.toString());
      assertFalse(uRL1.equals((Object)uRL0));
      
      URL uRL2 = HttpConnection.encodeUrl(uRL1);
      assertNotNull(uRL2);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL2);
      assertNotSame(uRL1, uRL0);
      assertNotSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample#data", uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("data", uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample#data", uRL1.toString());
      assertNull(uRL2.getQuery());
      assertEquals("data", uRL2.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample#data", uRL2.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample#data", uRL2.toExternalForm());
      assertEquals((-1), uRL2.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertEquals((-1), uRL2.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertEquals("http", uRL2.getProtocol());
      assertNull(uRL2.getUserInfo());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(uRL2.equals((Object)uRL1));
      assertFalse(uRL2.equals((Object)uRL0));
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("\"{jG`W!qC~m;.J");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"{jG`W!qC~m;.J
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.userAgent("%");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("EVh<[`p}4yv'o0r'&");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // EVh<[`p}4yv'o0r'&
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-86);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-38), (byte) (-1), (byte)0, (byte) (-86), (byte)47, (byte) (-86), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-38), (byte) (-1), (byte)0, (byte) (-86), (byte)47, (byte) (-86), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertEquals(9, int0);
      
      Connection connection0 = httpConnection0.data("\r\n\r\n", "&", (InputStream) byteArrayInputStream0, "accept-encoding");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-38), (byte) (-1), (byte)0, (byte) (-86), (byte)47, (byte) (-86), (byte) (-1), (byte) (-1)}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        httpConnection0.url("%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: %
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-1), (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      Connection connection0 = httpConnection1.timeout(56);
      assertNotNull(connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection0);
      assertSame(connection0, httpConnection1);
      assertNotSame(connection0, httpConnection0);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      
      Connection connection1 = httpConnection1.maxBodySize((byte)0);
      assertNotNull(connection1);
      assertSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection0);
      assertSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      assertSame(connection1, httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-1), (byte)0}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)0;
      int int0 = byteArrayInputStream0.read(byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-1), (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-86)}, byteArray1);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertEquals(3, byteArray0.length);
      assertEquals(1, byteArray1.length);
      assertEquals(1, int0);
      
      Connection connection0 = httpConnection0.data("&", "&", (InputStream) byteArrayInputStream0, "h2");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(byteArray0, byteArray1);
      assertSame(connection0, httpConnection0);
      assertArrayEquals(new byte[] {(byte) (-86), (byte) (-1), (byte)0}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        httpConnection0.url("y[hD[C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: y[hD[C
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.proxy("]TzawA{e_yV^h", (int) (byte)0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.data("output", "output");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      Connection connection2 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      
      Connection connection3 = httpConnection0.referrer("(`GKOIZRlNG%LGgk");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection3, connection1);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(false);
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      
      Connection connection4 = httpConnection0.request(connection_Request0);
      assertNotNull(connection4);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection4, connection0);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection2);
      assertSame(connection4, connection1);
      assertSame(connection4, connection3);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      
      Connection connection5 = httpConnection0.ignoreContentType(false);
      assertNotNull(connection5);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection0);
      assertSame(connection5, connection2);
      assertSame(connection5, httpConnection0);
      assertSame(connection5, connection1);
      assertSame(connection5, connection3);
      assertSame(connection5, connection4);
      assertSame(connection5, connection0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36", tag0.normalName());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "application/x-www-form-urlencoded";
      stringArray0[1] = "multipart/form-data";
      stringArray0[2] = "ul";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)21, (byte) (-114), (byte)86, (byte)48, (byte) (-1)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      stringArray0[3] = "ul";
      stringArray0[4] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      stringArray0[5] = "application/x-www-form-urlencoded";
      Connection connection1 = httpConnection0.data(stringArray0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("Content-Type", "D9Pj", (InputStream) null);
      assertNotNull(httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal1.key());
      assertEquals("D9Pj", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.key("application/x-www-form-urlencoded");
      assertNotNull(httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.key());
      assertEquals("multipart/form-data", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.value("application/x-www-form-urlencoded");
      assertNotNull(httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal3.value());
      assertNull(httpConnection_KeyVal3.contentType());
      assertFalse(httpConnection_KeyVal3.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal3.key());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal3.equals((Object)httpConnection_KeyVal1));
      
      HttpConnection.KeyVal httpConnection_KeyVal4 = httpConnection_KeyVal1.inputStream((InputStream) null);
      assertNotNull(httpConnection_KeyVal4);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal4);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal0);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal4, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal4, httpConnection_KeyVal3);
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal1.key());
      assertEquals("D9Pj", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal4.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal4.key());
      assertEquals("D9Pj", httpConnection_KeyVal4.value());
      assertFalse(httpConnection_KeyVal4.hasInputStream());
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal3));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal0));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal2));
      assertFalse(httpConnection_KeyVal4.equals((Object)httpConnection_KeyVal3));
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal4));
      assertFalse(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response1);
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      Connection connection0 = httpConnection1.proxy(proxy0);
      assertNotNull(connection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection1);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-121), (byte)0, (byte)0, (byte) (-8), (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (InputStream) byteArrayInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-121), (byte)0, (byte)0, (byte) (-8), (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("user-agent", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertEquals(7, byteArray0.length);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      assertNotNull(httpConnection_Request2);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(187);
      assertNotNull(httpConnection_Request3);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(187, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(187, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(187, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(187, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("application/x-www-form-urlencoded", 1213);
      assertNotNull(inetSocketAddress0);
      assertEquals("application/x-www-form-urlencoded", inetSocketAddress0.getHostString());
      assertEquals(1213, inetSocketAddress0.getPort());
      assertEquals("application/x-www-form-urlencoded:1213", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      assertNotNull(proxy0);
      assertEquals("application/x-www-form-urlencoded", inetSocketAddress0.getHostString());
      assertEquals(1213, inetSocketAddress0.getPort());
      assertEquals("application/x-www-form-urlencoded:1213", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("SOCKS @ application/x-www-form-urlencoded:1213", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(proxy0);
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertEquals(187, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(187, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(187, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(187, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(187, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("application/x-www-form-urlencoded", inetSocketAddress0.getHostString());
      assertEquals(1213, inetSocketAddress0.getPort());
      assertEquals("application/x-www-form-urlencoded:1213", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("SOCKS @ application/x-www-form-urlencoded:1213", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.data((Connection.KeyVal) httpConnection_KeyVal1);
      assertNotNull(httpConnection_Request5);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-121), (byte)0, (byte)0, (byte) (-8), (byte)0}, byteArray0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("user-agent", httpConnection_KeyVal1.key());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(187, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(187, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(187, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(187, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("application/x-www-form-urlencoded", inetSocketAddress0.getHostString());
      assertEquals(1213, inetSocketAddress0.getPort());
      assertEquals("application/x-www-form-urlencoded:1213", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("SOCKS @ application/x-www-form-urlencoded:1213", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertEquals(187, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertNull(httpConnection_Request5.requestBody());
      assertEquals(187, httpConnection_Request5.timeout());
      assertTrue(httpConnection_Request5.followRedirects());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertEquals(7, byteArray0.length);
      
      InetSocketAddress inetSocketAddress1 = MockInetSocketAddress.createUnresolved("Content-Encoding", 1367);
      assertNotNull(inetSocketAddress1);
      assertNotSame(inetSocketAddress1, inetSocketAddress0);
      assertEquals("Content-Encoding:1367", inetSocketAddress1.toString());
      assertTrue(inetSocketAddress1.isUnresolved());
      assertEquals("Content-Encoding", inetSocketAddress1.getHostString());
      assertEquals(1367, inetSocketAddress1.getPort());
      assertFalse(inetSocketAddress1.equals((Object)inetSocketAddress0));
      
      Proxy.Type proxy_Type1 = Proxy.Type.SOCKS;
      Proxy proxy1 = new Proxy(proxy_Type1, inetSocketAddress0);
      assertNotNull(proxy1);
      assertEquals("SOCKS @ application/x-www-form-urlencoded:1213", proxy1.toString());
      assertEquals(Proxy.Type.SOCKS, proxy1.type());
      assertEquals("application/x-www-form-urlencoded", inetSocketAddress0.getHostString());
      assertEquals(1213, inetSocketAddress0.getPort());
      assertEquals("application/x-www-form-urlencoded:1213", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertTrue(proxy1.equals((Object)proxy0));
      assertFalse(inetSocketAddress0.equals((Object)inetSocketAddress1));
      
      HttpConnection.Request httpConnection_Request6 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request6);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request6, httpConnection_Request1);
      assertSame(httpConnection_Request6, httpConnection_Request2);
      assertSame(httpConnection_Request6, httpConnection_Request5);
      assertSame(httpConnection_Request6, httpConnection_Request3);
      assertSame(httpConnection_Request6, httpConnection_Request0);
      assertSame(httpConnection_Request6, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request6);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request6);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(1048576, httpConnection_Request6.maxBodySize());
      assertTrue(httpConnection_Request6.followRedirects());
      assertNull(httpConnection_Request6.requestBody());
      assertEquals(187, httpConnection_Request6.timeout());
      assertFalse(httpConnection_Request6.ignoreHttpErrors());
      assertFalse(httpConnection_Request6.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request6.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(187, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(187, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      
      HttpConnection.Request httpConnection_Request7 = httpConnection_Request6.proxy(proxy0);
      assertNotNull(httpConnection_Request7);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request6, httpConnection_Request1);
      assertSame(httpConnection_Request6, httpConnection_Request7);
      assertSame(httpConnection_Request6, httpConnection_Request2);
      assertSame(httpConnection_Request6, httpConnection_Request5);
      assertSame(httpConnection_Request6, httpConnection_Request3);
      assertSame(httpConnection_Request6, httpConnection_Request0);
      assertSame(httpConnection_Request6, httpConnection_Request4);
      assertSame(httpConnection_Request7, httpConnection_Request0);
      assertSame(httpConnection_Request7, httpConnection_Request3);
      assertSame(httpConnection_Request7, httpConnection_Request6);
      assertSame(httpConnection_Request7, httpConnection_Request4);
      assertSame(httpConnection_Request7, httpConnection_Request5);
      assertSame(httpConnection_Request7, httpConnection_Request1);
      assertSame(httpConnection_Request7, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request7);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request6);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request7);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request6);
      assertSame(proxy_Type0, proxy_Type1);
      assertNotSame(inetSocketAddress0, inetSocketAddress1);
      assertNotSame(proxy0, proxy1);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(1048576, httpConnection_Request6.maxBodySize());
      assertTrue(httpConnection_Request6.followRedirects());
      assertNull(httpConnection_Request6.requestBody());
      assertEquals(187, httpConnection_Request6.timeout());
      assertFalse(httpConnection_Request6.ignoreHttpErrors());
      assertFalse(httpConnection_Request6.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request6.postDataCharset());
      assertEquals(187, httpConnection_Request7.timeout());
      assertFalse(httpConnection_Request7.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request7.postDataCharset());
      assertEquals(1048576, httpConnection_Request7.maxBodySize());
      assertTrue(httpConnection_Request7.followRedirects());
      assertFalse(httpConnection_Request7.ignoreHttpErrors());
      assertNull(httpConnection_Request7.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(187, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(187, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("application/x-www-form-urlencoded", inetSocketAddress0.getHostString());
      assertEquals(1213, inetSocketAddress0.getPort());
      assertEquals("application/x-www-form-urlencoded:1213", inetSocketAddress0.toString());
      assertTrue(inetSocketAddress0.isUnresolved());
      assertEquals("SOCKS @ application/x-www-form-urlencoded:1213", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(inetSocketAddress0.equals((Object)inetSocketAddress1));
      assertTrue(proxy0.equals((Object)proxy1));
      
      HttpConnection.Request httpConnection_Request8 = httpConnection_Request2.proxy("dUmfm=@)+PU", 1367);
      assertNotNull(httpConnection_Request8);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request8, httpConnection_Request5);
      assertSame(httpConnection_Request8, httpConnection_Request7);
      assertSame(httpConnection_Request8, httpConnection_Request1);
      assertSame(httpConnection_Request8, httpConnection_Request2);
      assertSame(httpConnection_Request8, httpConnection_Request6);
      assertSame(httpConnection_Request8, httpConnection_Request0);
      assertSame(httpConnection_Request8, httpConnection_Request3);
      assertSame(httpConnection_Request8, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request7);
      assertSame(httpConnection_Request0, httpConnection_Request8);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request6);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request7);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request8);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request6);
      assertSame(httpConnection_Request2, httpConnection_Request7);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request6);
      assertSame(httpConnection_Request2, httpConnection_Request8);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(1048576, httpConnection_Request8.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request8.postDataCharset());
      assertFalse(httpConnection_Request8.ignoreContentType());
      assertTrue(httpConnection_Request8.followRedirects());
      assertNull(httpConnection_Request8.requestBody());
      assertEquals(187, httpConnection_Request8.timeout());
      assertFalse(httpConnection_Request8.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(187, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(187, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(187, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      
      boolean boolean0 = httpConnection_Request2.ignoreHttpErrors();
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request7);
      assertSame(httpConnection_Request0, httpConnection_Request8);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request6);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request7);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request8);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request6);
      assertSame(httpConnection_Request2, httpConnection_Request7);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request6);
      assertSame(httpConnection_Request2, httpConnection_Request8);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(187, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(187, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(187, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      Connection connection0 = httpConnection0.followRedirects(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-60);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "multipart/form-data";
      stringArray0[1] = "multipart/form-data";
      stringArray0[2] = "Content-Encoding";
      stringArray0[3] = "Content-Encoding";
      Connection connection1 = httpConnection0.data(stringArray0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "KN!L\\";
      Connection connection0 = httpConnection0.data("span", "KN!L");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      SocketAddress socketAddress0 = null;
      // Undeclared exception!
      try { 
        httpConnection0.cookie("", "KN!L");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("%", "Q4");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      SocketAddress socketAddress0 = null;
      Connection connection1 = httpConnection0.cookie("Charset must not be null", "Charset must not be null");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      int int0 = 86;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", ",EiTMp(/{cA0p@Ww");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals(",EiTMp(/{cA0p@Ww", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("Z/ORE_xP");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Z/ORE_xP", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Z/ORE_xP", httpConnection_KeyVal1.value());
      
      InputStream inputStream0 = httpConnection_KeyVal1.inputStream();
      assertNull(inputStream0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Z/ORE_xP", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Z/ORE_xP", httpConnection_KeyVal1.value());
      
      httpConnection_Response0.headers = (Map<String, List<String>>) hashMap0;
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(httpConnection_Response0.headers.isEmpty());
      assertEquals(0, httpConnection_Response0.headers.size());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("", uRL0.getPath());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(false);
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("ul");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ul
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attribute attribute0 = Attribute.createFromEncoded("multipart/form-data", "Request has already been read (with .parse())");
      assertNotNull(attribute0);
      assertEquals("multipart/form-data", attribute0.getKey());
      assertEquals("Request has already been read (with .parse())", attribute0.getValue());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Connection connection0 = httpConnection0.cookies(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Document document0 = Parser.parseBodyFragment("Content-Encoding", "Content-Encoding");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Map<String, String> map1 = document0.dataset();
      assertNotNull(map1);
      assertNotSame(map1, map0);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map1.equals((Object)map0));
      
      Connection connection1 = httpConnection0.headers(map1);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(map1, map0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertTrue(map1.equals((Object)map0));
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Document document0 = Parser.parseBodyFragment("Content-Encoding", "Content-Encoding");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", 116);
      assertNotNull(pattern0);
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", pattern0.toString());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", pattern0.pattern());
      assertEquals(116, pattern0.flags());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", pattern0.toString());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", pattern0.pattern());
      assertEquals(116, pattern0.flags());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document1 = (Document)document0.text(":jv\"`$k");
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Content-Encoding", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.normalName());
      assertEquals("Content-Encoding", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      
      Document document2 = document1.ownerDocument();
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Content-Encoding", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.normalName());
      assertEquals("Content-Encoding", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Content-Encoding", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.normalName());
      assertFalse(document2.isBlock());
      assertEquals("Content-Encoding", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      
      Element element0 = document2.head();
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Content-Encoding", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.normalName());
      assertEquals("Content-Encoding", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Content-Encoding", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.normalName());
      assertFalse(document2.isBlock());
      assertEquals("Content-Encoding", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("Content-Encoding", element0.baseUri());
      assertEquals("head", element0.normalName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      Map<String, String> map0 = element0.dataset();
      assertNotNull(map0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Content-Encoding", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.normalName());
      assertEquals("Content-Encoding", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Content-Encoding", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.normalName());
      assertFalse(document2.isBlock());
      assertEquals("Content-Encoding", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("Content-Encoding", element0.baseUri());
      assertEquals("head", element0.normalName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.headers(map0);
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(httpConnection1, httpConnection0);
      assertFalse(document0.hasParent());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Content-Encoding", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.normalName());
      assertEquals("Content-Encoding", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Content-Encoding", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.normalName());
      assertFalse(document2.isBlock());
      assertEquals("Content-Encoding", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("Content-Encoding", element0.baseUri());
      assertEquals("head", element0.normalName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attribute attribute0 = Attribute.createFromEncoded("application/x-www-form-urlencoded", "bgsound");
      assertNotNull(attribute0);
      assertEquals("bgsound", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Document$OutputSettings$Syntax");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.clone();
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.equals((Object)attributes0));
      
      Attributes attributes2 = attributes1.put(attribute0);
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals("bgsound", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      Map<String, String> map0 = attributes2.dataset();
      assertNotNull(map0);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals("bgsound", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      Connection connection0 = httpConnection0.cookies(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes1);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertSame(connection0, httpConnection0);
      assertEquals("bgsound", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize((-1956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("%", "Q4");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      SocketAddress socketAddress0 = null;
      Connection connection1 = httpConnection0.cookie("Charset must not be null", "Charset must not be null");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      int int0 = 86;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      Connection connection1 = httpConnection0.cookie("Wt(c*8", "String input must not be null");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, (SocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type SOCKS is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("%", "Q4");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Connection.KeyVal connection_KeyVal0 = connection0.data("Gw1Hbz7v%0Q");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "Q4";
      String string1 = "9[meC,n9!mco}yJ_y|B";
      // Undeclared exception!
      try { 
        httpConnection0.data("9[meC,n9!mco}yJ_y|B", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[5] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-60);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "multipart/form-data";
      stringArray0[1] = "multipart/form-data";
      stringArray0[2] = "Content-Encoding";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attribute attribute0 = Attribute.createFromEncoded("multipart/form-data", "Request has already been read (with .parse())");
      assertNotNull(attribute0);
      assertEquals("Request has already been read (with .parse())", attribute0.getValue());
      assertEquals("multipart/form-data", attribute0.getKey());
      
      CDataNode cDataNode0 = new CDataNode("q-2ec");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Connection connection0 = httpConnection0.cookies(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Connection connection1 = httpConnection0.maxBodySize(2193);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attribute attribute0 = Attribute.createFromEncoded("application/x-www-form-urlencoded", "");
      assertNotNull(attribute0);
      assertEquals("", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      assertEquals(1, attributes1.size());
      
      Map<String, String> map0 = attributes1.dataset();
      assertNotNull(map0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection0 = httpConnection0.cookies(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection0, httpConnection0);
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection1 = httpConnection0.maxBodySize(2193);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = connection0.data("2t&=@uL,", "content");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection0, connection2);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("application/x-www-form-urlencoded", attribute0.getKey());
      assertEquals(1, attributes1.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      Connection connection3 = connection1.method(connection_Method0);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection3);
      assertSame(connection1, connection2);
      assertSame(connection1, connection0);
      assertSame(connection3, connection1);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(30000, httpConnection_Request2.timeout());
      
      boolean boolean0 = attributes0.hasKey("Content-Encoding");
      assertSame(attributes0, attributes1);
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request2.timeout((-24));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      String string0 = "";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)121;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 116, 94);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)9, (byte)94, (byte)121}, byteArray0);
      assertEquals((-113), byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)9, (byte)94, (byte)121}, byteArray0);
      assertEquals((-113), byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("", "", (InputStream) sequenceInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-60);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "multipart/form-data";
      stringArray0[1] = "multipart/form-data";
      stringArray0[2] = "Content-Encoding";
      stringArray0[3] = "Content-Encoding";
      Connection connection0 = httpConnection0.data(stringArray0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      
      byte[] byteArray0 = new byte[7];
      Connection connection0 = httpConnection0.ignoreContentType(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-60);
      MockFile mockFile0 = new MockFile("Content-Encoding", "s-OZC:y3{");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("s-OZC:y3{", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals("/experiment/Content-Encoding/s-OZC:y3{", mockFile0.toString());
      assertEquals(0L, mockFile0.lastModified());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/Content-Encoding", mockFile0.getParent());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      try { 
        MockURL.URL(uRL0, "s-OZC:y3{");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: s-ozc
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.maxBodySize(130);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "multipart/form-data", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertFalse(uRL1.equals((Object)uRL0));
      
      URL uRL2 = HttpConnection.encodeUrl(uRL1);
      assertNotNull(uRL2);
      assertNotSame(uRL0, uRL2);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(uRL1, uRL2);
      assertSame(uRL2, uRL1);
      assertNotSame(uRL2, uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals(0, uRL2.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getAuthority());
      assertNull(uRL2.getRef());
      assertEquals("http", uRL2.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL2.getHost());
      assertNull(uRL2.getUserInfo());
      assertNull(uRL2.toString());
      assertNull(uRL2.toExternalForm());
      assertEquals((-1), uRL2.getPort());
      assertNull(uRL2.getQuery());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(uRL2.equals((Object)uRL0));
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("\"{jG`W!qC~m;.J");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"{jG`W!qC~m;.J
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("%", "Q4");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      SocketAddress socketAddress0 = null;
      Connection connection1 = httpConnection0.cookie("Charset must not be null", "Charset must not be null");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      Connection connection2 = connection1.maxBodySize(86);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, connection2);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, (SocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type SOCKS is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      
      String string0 = "";
      Connection connection0 = httpConnection0.timeout(379);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("=");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("%", "Q4");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      SocketAddress socketAddress0 = null;
      Connection connection1 = httpConnection0.cookie("Charset must not be null", "Charset must not be null");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, (SocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type SOCKS is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-121), (byte) (-58));
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0, (byte) (-121), (byte) (-56), (byte) (-58), (byte)2, (byte)71}, byteArray0);
      assertEquals((-58), byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0, (byte) (-121), (byte) (-56), (byte) (-58), (byte)2, (byte)71}, byteArray0);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals((-58), byteArrayInputStream0.available());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals(7, byteArray0.length);
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(boolean0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.proxy((String) null, 1048576);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:1048576
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Map<String, String> map0 = attributes0.dataset();
      assertNotNull(map0);
      assertEquals(0, attributes0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("", "hgElR9k>yRBM");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection0.headers(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("%", "Q4");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      File file0 = MockFile.createTempFile("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "href");
      assertNotNull(file0);
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals("/tmp/Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.360href", file0.toString());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertEquals("537.360href", file0.getName());
      assertEquals("/tmp/Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      
      String string0 = hashMap0.put("Content-Type", "application/x-www-form-urlencoded");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = hashMap0.put("Content-Type", "Q4");
      assertNotNull(string1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals("application/x-www-form-urlencoded", string1);
      
      Connection connection1 = connection0.headers(hashMap0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Connection connection2 = httpConnection0.timeout(49);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      Connection connection3 = httpConnection0.maxBodySize(4152);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String[] stringArray0 = new String[6];
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("vI-aXC", "Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("vI-aXC", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", httpConnection_KeyVal0.value());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 49);
      assertNotNull(bufferedInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) bufferedInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("vI-aXC", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", httpConnection_KeyVal0.value());
      assertEquals("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("vI-aXC", httpConnection_KeyVal1.key());
      
      String string0 = hashMap0.remove((Object) httpConnection_KeyVal1);
      assertNull(string0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("vI-aXC", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", httpConnection_KeyVal0.value());
      assertEquals("Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("vI-aXC", httpConnection_KeyVal1.key());
      
      String string1 = hashMap0.put("H%w;6-:c0+uh[u}V", "H%w;6-:c0+uh[u}V");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string2 = hashMap0.put("", "Content-Encoding");
      assertNull(string2);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection0.headers(hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Connection connection0 = httpConnection0.cookies(hashMap0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("pre", "Content-Type", (InputStream) sequenceInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Content-Type", httpConnection_KeyVal1.value());
      assertEquals("pre", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      
      String string0 = httpConnection_Request1.postDataCharset();
      assertNotNull(string0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertEquals("UTF-8", string0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.value("Content-Encoding");
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.key());
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal2.equals((Object)httpConnection_KeyVal1));
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      assertNotNull(collection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection connection1 = httpConnection0.data(collection0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url("Header map must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Header map must not be null
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = "=Dr|-S";
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.cookie("=Dr|-S", "");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      
      HttpConnection.Response httpConnection_Response2 = httpConnection_Response0.charset("Request has already been read (with .parse())");
      assertNotNull(httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request has already been read (with .parse())", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertEquals("Request has already been read (with .parse())", httpConnection_Response2.charset());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      
      String string1 = httpConnection_Response2.charset();
      assertNotNull(string1);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Request has already been read (with .parse())", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertEquals("Request has already been read (with .parse())", httpConnection_Response2.charset());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Request has already been read (with .parse())", string1);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.userAgent("Request has already been read (with .parse())");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      
      int int0 = 0;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy("multipart/form-data", 0);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      
      String string2 = "";
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(8205);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte)19;
      URL uRL0 = MockURL.getFtpExample();
      HttpConnection.connect(uRL0);
      byteArray0[4] = (byte)20;
      byteArray0[5] = (byte) (-102);
      byteArray0[6] = (byte) (-19);
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("gb", "gb", (InputStream) pushbackInputStream0);
      String string0 = httpConnection_KeyVal0.contentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.PUT;
      httpConnection_Request0.method = connection_Method0;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(2135);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("Data key value pairs must not be null", 1899);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.select.Evaluator$IndexGreaterThan", "");
      Connection.Method connection_Method1 = Connection.Method.DELETE;
      httpConnection_Request2.method = connection_Method1;
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal0);
      httpConnection_Request3.followRedirects(true);
      httpConnection_KeyVal0.toString();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("org.jsoup.select.Evaluator$IndexGreaterThan");
      // Undeclared exception!
      try { 
        httpConnection_Response1.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = 1391;
      InputStream inputStream0 = null;
      Proxy proxy0 = Proxy.NO_PROXY;
      httpConnection_Request0.proxy(proxy0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("fWHOxf_?UL%J=", "fWHOxf_?UL%J=", (InputStream) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_KeyVal0.value((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy proxy0 = null;
      httpConnection0.proxy((Proxy) null);
      httpConnection0.request();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-1428));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(0);
      httpConnection0.request((Connection.Request) httpConnection_Request2);
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals(0, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.requestBody("}G:x\"Ykz4Xx%Y< R|,l");
      httpConnection0.data("Timeout milliseconds must be 0 (infinite) or greater", "Timeout milliseconds must be 0 (infinite) or greater");
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.timeout(0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, (SocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type SOCKS is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.referrer("allowfullscreen");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("br", "q");
      httpConnection_KeyVal0.contentType("q");
      assertEquals("br", httpConnection_KeyVal0.key());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key(")<~,|X.9");
      HttpConnection.KeyVal httpConnection_KeyVal2 = HttpConnection.KeyVal.create("br", ")<~,|X.9");
      httpConnection_KeyVal1.toString();
      String string0 = httpConnection_KeyVal2.value();
      assertEquals(")<~,|X.9", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      httpConnection_Request0.method(connection_Method0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(0);
      mockInetSocketAddress0.getHostName();
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      httpConnection_Request0.proxy(proxy0);
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(3);
      Proxy proxy0 = Proxy.NO_PROXY;
      httpConnection_Request1.proxy(proxy0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      httpConnection0.parser(parser0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "\r\n\r\n");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("Content-Type");
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.key("\"+cmc");
      assertEquals("Content-Type", httpConnection_KeyVal2.value());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(2125);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      Connection connection0 = httpConnection0.proxy(proxy0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("6n-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: 6n-
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-11), (byte)46);
      Connection connection0 = httpConnection0.data("#A", "textarea", (InputStream) byteArrayInputStream0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "Input stream already read and parsed, cannot re-read.";
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("Input stream already read and parsed, cannot re-read.", 128);
      httpConnection_Request0.removeHeader("Input stream already read and parsed, cannot re-read.");
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      String string1 = "Q4K0dTo%";
      httpConnection_Request1.cookie("Input stream already read and parsed, cannot re-read.", "Q4K0dTo%");
      httpConnection_Request1.sslSocketFactory();
      httpConnection_Request1.sslSocketFactory((SSLSocketFactory) null);
      httpConnection_Request0.ignoreContentType(false);
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, (SocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type HTTP is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.maxBodySize(130);
      String string0 = "h{jG`W!qC~m;.g";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("h{jG`W!qC~m;.g");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // h{jG`W!qC~m;.g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "multipart/form-data";
      stringArray0[1] = "Content-Type";
      stringArray0[2] = "application/x-www-form-urlencoded";
      stringArray0[3] = "multipart/form-data";
      stringArray0[4] = "multipart/form-data";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "Content-Encoding";
      httpConnection0.data("Content-Encoding", "Content-Encoding");
      httpConnection0.referrer("lG2");
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string1 = "";
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create("", ";#nCgC%zsc]F(T9o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset("Vj)!+BxI-NZU9$71Y.6");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Vj)!+BxI-NZU9$71Y.6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.KeyVal.create("header", "systemId");
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = httpConnection_Response0.url;
      // Undeclared exception!
      try { 
        httpConnection0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
