/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:47:42 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.Proxy;
import java.net.SocketAddress;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownHostException;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Spliterator;
import java.util.function.BiConsumer;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      assertNotNull(inetAddress0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 1110);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertNotNull(proxy0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", mockInetSocketAddress0.getHostString());
      assertEquals("/127.0.0.1:1110", mockInetSocketAddress0.toString());
      assertEquals(1110, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("SOCKS @ /127.0.0.1:1110", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      
      Connection connection0 = httpConnection0.proxy(proxy0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertFalse(inetAddress0.isMCSiteLocal());
      assertFalse(inetAddress0.isAnyLocalAddress());
      assertEquals("/127.0.0.1", inetAddress0.toString());
      assertFalse(inetAddress0.isMCLinkLocal());
      assertFalse(inetAddress0.isSiteLocalAddress());
      assertFalse(inetAddress0.isMCGlobal());
      assertTrue(inetAddress0.isLoopbackAddress());
      assertFalse(inetAddress0.isMulticastAddress());
      assertFalse(inetAddress0.isMCOrgLocal());
      assertFalse(inetAddress0.isMCNodeLocal());
      assertEquals("127.0.0.1", inetAddress0.getHostAddress());
      assertFalse(inetAddress0.isLinkLocalAddress());
      assertEquals("127.0.0.1", mockInetSocketAddress0.getHostString());
      assertEquals("/127.0.0.1:1110", mockInetSocketAddress0.toString());
      assertEquals(1110, mockInetSocketAddress0.getPort());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals("SOCKS @ /127.0.0.1:1110", proxy0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "w>R/-FVX>sZKU}");
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      Connection.Response connection_Response0 = connection0.response();
      assertNotNull(connection_Response0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(connection_Response0.charset());
      assertNull(connection_Response0.statusMessage());
      assertNull(connection_Response0.contentType());
      assertEquals(0, connection_Response0.statusCode());
      
      Connection connection1 = httpConnection0.maxBodySize(81);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertEquals(81, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertFalse(httpConnection_Response0.equals((Object)connection_Response0));
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      Connection.Response connection_Response1 = httpConnection0.execute();
      assertNotNull(connection_Response1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(connection_Response1, httpConnection_Response0);
      assertNotSame(connection_Response1, connection_Response0);
      assertFalse(connection_Response1.equals((Object)httpConnection_Response0));
      assertFalse(connection_Response1.equals((Object)connection_Response0));
      assertNull(connection_Response1.charset());
      assertEquals("OK", connection_Response1.statusMessage());
      assertNull(connection_Response1.contentType());
      assertEquals(200, connection_Response1.statusCode());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      Connection connection2 = connection0.proxy(proxy0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection2);
      assertSame(connection0, connection1);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      Connection connection3 = httpConnection0.referrer("multipart/form-data");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection3, connection1);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "w>R/-FVX>sZKU}");
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      Connection.Response connection_Response0 = connection0.response();
      assertNotNull(connection_Response0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(connection_Response0.statusMessage());
      assertNull(connection_Response0.contentType());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.charset());
      
      Connection connection1 = httpConnection0.maxBodySize(81);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(81, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertFalse(httpConnection_Response0.equals((Object)connection_Response0));
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response0, connection_Response0);
      assertNotSame(httpConnection_Response1, connection_Response0);
      assertNotSame(httpConnection_Response1, httpConnection_Response0);
      assertFalse(httpConnection_Response0.equals((Object)connection_Response0));
      assertFalse(httpConnection_Response1.equals((Object)connection_Response0));
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(81, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(200, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      try { 
        connection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection0 = httpConnection0.cookie("Content-Encoding", "Content-Encoding");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      Connection connection2 = connection1.proxy(proxy0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection1, connection0);
      assertSame(connection1, connection2);
      assertSame(connection1, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      try { 
        connection0.post();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 1336);
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("Content-Encoding", "Content-Encoding", (InputStream) pipedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection1 = connection0.requestBody("Content-Type");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection2 = connection0.url(uRL0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection0, connection1);
      assertSame(connection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertEquals(0, pipedInputStream0.available());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection3 = httpConnection0.data("\":o2oets@", "+CEvCKDK!g5yF%#*N");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      
      // Undeclared exception!
      try { 
        connection2.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream data not supported in URL query string.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.ignoreContentType(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "https";
      URL uRL0 = MockURL.URL("https", "Dlb", "https");
      assertNotNull(uRL0);
      assertEquals("Dlb", uRL0.getAuthority());
      assertEquals("Dlb", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https://Dlbhttps", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https://Dlbhttps", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("Dlb", uRL0.getAuthority());
      assertEquals("Dlb", uRL0.getHost());
      assertEquals("https", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("https://Dlbhttps", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("https", uRL0.getPath());
      assertEquals((-1), uRL0.getPort());
      assertEquals("https://Dlbhttps", uRL0.toString());
      assertEquals("https", uRL0.getFile());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      Connection connection0 = httpConnection0.cookie("&{%q$", "obmrt??wQio1<");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      
      Connection connection1 = httpConnection0.data("oTXi#m[#y#:SM60", "oTXi#m[#y#:SM60", (InputStream) null);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertNotSame(connection1, httpConnection1);
      assertSame(connection1, connection0);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection1));
      
      Connection connection2 = httpConnection0.data("Content-Type", "multipart/form-data", (InputStream) null);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, httpConnection0);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection connection3 = httpConnection0.url(uRL0);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection1);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      assertNotSame(connection3, httpConnection1);
      assertSame(connection3, connection1);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection.Request connection_Request0 = httpConnection1.request();
      assertNotNull(connection_Request0);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, connection3);
      assertNotSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, connection0);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)connection3));
      assertFalse(httpConnection1.equals((Object)connection2));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("KOq");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("KOq"));
      assertEquals(1, linkedList0.size());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      Connection connection0 = httpConnection0.url(uRL1);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(connection0, httpConnection0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      Connection connection1 = httpConnection0.method(connection_Method0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      
      Connection connection2 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: ProtocolException");
      
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("$a,[icdwu");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("$a,[icdwu"));
      assertEquals(1, linkedList0.size());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("$a,[icdwu", "$a,[icdwu", (InputStream) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Connection connection1 = connection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      
      Connection connection2 = httpConnection0.url(uRL0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertNotSame(uRL0, uRL1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      Connection.Request connection_Request0 = connection2.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertNotSame(uRL0, uRL1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertTrue(uRL0.equals((Object)uRL1));
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      
      Connection connection3 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("$a,[icdwu");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("$a,[icdwu"));
      assertEquals(1, linkedList0.size());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(uRL0, uRL1);
      assertSame(connection0, httpConnection0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection.Request connection_Request0 = connection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertNotSame(uRL0, uRL1);
      assertSame(connection0, httpConnection0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "org.jsoup.select.Evaluator$IsFirstOfType";
      Connection connection0 = httpConnection0.data("accept-encoding", "org.jsoup.select.Evaluator$IsFirstOfType", (InputStream) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      
      Connection connection1 = httpConnection0.proxy("accept-encoding", 113);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.url(uRL1);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(uRL1, uRL0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertTrue(uRL1.equals((Object)uRL0));
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("Content-Encoding", "Content-Encoding", (InputStream) pipedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection1 = httpConnection0.cookie("Content-Encoding", "EndTag");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      Connection.Request connection_Request0 = connection2.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      
      // Undeclared exception!
      try { 
        connection2.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-*W)) s$0I>CU");
      assertFalse(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("-*W)) s$0I>CU"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.add("$a,[icdwu");
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("$a,[icdwu"));
      assertFalse(linkedList0.contains("-*W)) s$0I>CU"));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("$a,[icdwu", "$a,[icdwu", (InputStream) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(uRL0, uRL1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      Connection connection2 = httpConnection1.ignoreHttpErrors(true);
      assertNotNull(connection2);
      assertSame(httpConnection1, connection2);
      assertNotSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(connection2, connection0);
      assertSame(connection2, httpConnection1);
      assertNotSame(connection2, connection1);
      assertNotSame(connection2, httpConnection0);
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)connection0));
      assertFalse(connection2.equals((Object)connection1));
      assertFalse(connection2.equals((Object)httpConnection0));
      
      Connection connection3 = httpConnection0.url(uRL0);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection3);
      assertNotSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertNotSame(uRL0, uRL1);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      assertNotSame(connection3, httpConnection1);
      assertSame(connection3, httpConnection0);
      assertNotSame(connection3, connection2);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)connection2));
      assertTrue(uRL0.equals((Object)uRL1));
      assertFalse(connection3.equals((Object)httpConnection1));
      assertFalse(connection3.equals((Object)connection2));
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("$a,[icdwu");
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("$a,[icdwu"));
      assertEquals(1, linkedList0.size());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("$a,[icdwu", "$a,[icdwu", (InputStream) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(uRL0, uRL1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      
      Connection.Request connection_Request0 = httpConnection1.request();
      assertNotNull(connection_Request0);
      assertNotSame(httpConnection1, httpConnection0);
      assertNotSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, connection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 192);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("Data value must not be null", "h/<i8", (InputStream) bufferedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      Connection.Method connection_Method0 = Connection.Method.POST;
      Connection connection1 = httpConnection0.method(connection_Method0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      Connection connection2 = httpConnection0.url(uRL0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertNotSame(uRL0, uRL1);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("Content-Encoding", "Content-Encoding", (InputStream) pipedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      
      Connection connection1 = httpConnection0.cookie("Content-Encoding", "EndTag");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      
      Connection connection3 = httpConnection0.url(uRL0);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection1);
      assertSame(connection3, connection0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      
      try { 
        connection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 128);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      MockFile mockFile0 = new MockFile("o", "multipart/form-data");
      assertNotNull(mockFile0);
      
      URL uRL0 = mockFile0.toURL();
      assertNotNull(uRL0);
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("form-data", mockFile0.getName());
      assertEquals("/experiment/o/multipart/form-data", mockFile0.toString());
      assertEquals("/experiment/o/multipart", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("form-data", mockFile0.getName());
      assertEquals("/experiment/o/multipart/form-data", mockFile0.toString());
      assertEquals("/experiment/o/multipart", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      
      Connection connection0 = httpConnection0.url(uRL1);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertSame(connection0, httpConnection0);
      assertTrue(uRL0.equals((Object)uRL1));
      assertTrue(uRL1.equals((Object)uRL0));
      assertFalse(mockFile0.canWrite());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("form-data", mockFile0.getName());
      assertEquals("/experiment/o/multipart/form-data", mockFile0.toString());
      assertEquals("/experiment/o/multipart", mockFile0.getParent());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.length());
      assertNull(uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getAuthority());
      assertNull(uRL1.getUserInfo());
      assertEquals("", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("file", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("Content-Encoding", "Content-Encoding", (InputStream) pipedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotNull(uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      Connection connection1 = connection0.url(uRL1);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertNotSame(uRL1, uRL0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      Connection.Request connection_Request0 = connection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream data not supported in URL query string.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.requestBody("ienf#2o|5s&dbr{6g");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("ienf#2o|5s&dbr{6g"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("ienf#2o|5s&dbr{6g"));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add("qAb#[W(-Un um%ai");
      assertTrue(boolean0);
      assertFalse(linkedList0.contains("ienf#2o|5s&dbr{6g"));
      assertTrue(linkedList0.contains("qAb#[W(-Un um%ai"));
      assertEquals(1, linkedList0.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      List<String> list0 = hashMap0.put("BeforeHtml", linkedList0);
      assertFalse(linkedList0.contains("ienf#2o|5s&dbr{6g"));
      assertTrue(linkedList0.contains("qAb#[W(-Un um%ai"));
      assertNull(list0);
      assertEquals(1, linkedList0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      httpConnection_Response0.headers = (Map<String, List<String>>) hashMap0;
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertFalse(httpConnection_Response0.headers.isEmpty());
      assertEquals(1, httpConnection_Response0.headers.size());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte)3;
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(hashMap0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(101);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      
      Connection connection0 = httpConnection0.parser(parser1);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(connection0, httpConnection0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(101);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection1 = httpConnection0.data("selected", "", (InputStream) pipedInputStream0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection2 = httpConnection0.url(uRL0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.requestBody("RCDATAEndTagOpen");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      try { 
        connection1.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Document document0 = Document.createShell("Content-Type");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Content-Type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Content-Type", document0.location());
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNotNull(connection_Response0);
      assertNull(connection_Response0.contentType());
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.charset());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize((-236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("org.jsoup.helper.HttpConnection$1");
      assertNull(connection_KeyVal0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 79);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("-lHG^v5LPaKK`w:&", "-lHG^v5LPaKK`w:&", (InputStream) bufferedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = Parser.htmlParser();
      assertNotNull(parser1);
      assertNotSame(parser1, parser0);
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = new Document("Content-Encoding");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("Content-Encoding", document0.location());
      assertEquals("Content-Encoding", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("?1:f)#hAVs2r%%O*", 118);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      Parser parser2 = Parser.htmlParser();
      assertNotNull(parser2);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser0);
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser2.isTrackErrors());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection0));
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("-lHG^v5LPaKK`w:&");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertTrue(connection_KeyVal0.hasInputStream());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("-lHG^v5LPaKK`w:&", connection_KeyVal0.key());
      assertEquals("-lHG^v5LPaKK`w:&", connection_KeyVal0.value());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy("multipart/form-data", 80);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request2.timeout());
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertNotNull(httpConnection2);
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      
      // Undeclared exception!
      try { 
        httpConnection2.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("\"^-V]", "mS1qbm+3PF(:>Y");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(1124);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1124, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1124, httpConnection_Request1.timeout());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1124, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1124, httpConnection_Request1.timeout());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1124, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request2.removeCookie("application/x-www-form-urlencoded");
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1124, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1124, httpConnection_Request1.timeout());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1124, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1124, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      
      HttpConnection.Request httpConnection_Request4 = (HttpConnection.Request)httpConnection_Request2.header("a;s-rY\"`10", "zI/O)*7%MuY");
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1124, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1124, httpConnection_Request1.timeout());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1124, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(1124, httpConnection_Request4.timeout());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      
      String string0 = httpConnection_Request2.postDataCharset();
      assertEquals("UTF-8", string0);
      assertNotNull(string0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1124, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1124, httpConnection_Request1.timeout());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1124, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        connection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("multipart/form-data", "application/x-www-form-urlencoded");
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      
      String string0 = ":2eTtx1%w0 U\\r*";
      Attributes attributes2 = attributes1.put(":2eTtx1%w0 U\r*", true);
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Attributes attributes3 = attributes2.clone();
      assertNotNull(attributes3);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      
      Map<String, String> map0 = attributes3.dataset();
      assertNotNull(map0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection0 = httpConnection0.headers(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes3);
      assertSame(attributes2, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes3, attributes2);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertSame(connection0, httpConnection0);
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes2.equals((Object)attributes3));
      assertFalse(attributes3.equals((Object)attributes2));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertEquals(2, attributes3.size());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection1 = httpConnection0.ignoreHttpErrors(false);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.ignoreContentType(true);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      Connection connection3 = httpConnection0.referrer("pk)&'u}]y");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(connection3, connection1);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      
      Connection connection4 = httpConnection0.request(connection_Request0);
      assertNotNull(connection4);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(connection4, connection2);
      assertSame(connection4, connection3);
      assertSame(connection4, connection0);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection1);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Connection connection5 = httpConnection0.data("pk)&'u}]y", "org.jsoup.nodes.CDataNode", (InputStream) sequenceInputStream0);
      assertNotNull(connection5);
      assertSame(connection5, httpConnection0);
      assertSame(connection5, connection3);
      assertSame(connection5, connection0);
      assertSame(connection5, connection4);
      assertSame(connection5, connection1);
      assertSame(connection5, connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      Connection connection6 = httpConnection0.proxy(proxy0);
      assertNotNull(connection6);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection6);
      assertSame(httpConnection0, connection5);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection3);
      assertSame(connection6, httpConnection0);
      assertSame(connection6, connection0);
      assertSame(connection6, connection3);
      assertSame(connection6, connection2);
      assertSame(connection6, connection1);
      assertSame(connection6, connection4);
      assertSame(connection6, connection5);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "multipart/form-data";
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      stringArray0[1] = "Content-Encoding";
      stringArray0[2] = "zSm$jfWy";
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("zSm$jfWy");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("zSm$jfWy", httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("zSm$jfWy", httpConnection_Response1.charset());
      
      Map<String, String> map0 = httpConnection_Response1.cookies;
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection1 = httpConnection0.headers(map0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("zSm$jfWy", httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("zSm$jfWy", httpConnection_Response1.charset());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Content-Type");
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request1.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        httpConnection0.sslSocketFactory((SSLSocketFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNotNull(connection_Response0);
      assertNull(connection_Response0.contentType());
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.charset());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      
      Connection connection1 = httpConnection0.response(connection_Response0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNull(connection_Response0.contentType());
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.charset());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.followRedirects(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      Connection connection2 = httpConnection0.postDataCharset("UTF-8");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null, "UTF-8", (InputStream) null, "E,-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "mS1qbm+3PF(:>Y";
      Connection connection0 = httpConnection0.data("\"^-V]", "mS1qbm+3PF(:>Y");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(1124);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1124, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1124, httpConnection_Request1.timeout());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      URL uRL0 = httpConnection_Response0.url;
      assertNull(uRL0);
      
      // Undeclared exception!
      try { 
        httpConnection_Request1.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("-8");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("-8", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals("-8", httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      
      URL uRL0 = httpConnection_Response1.url;
      assertNull(uRL0);
      
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(125);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 79);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("-lHG^v5LPaKK`w:&", "-lHG^v5LPaKK`w:&", (InputStream) bufferedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection1 = connection0.data("application/x-www-form-urlencoded", "nQa8K");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("nowrap", "multipart/form-data", 125, "Content-Type", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("Content-Type", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(125, uRL0.getPort());
      assertEquals("multipart/form-data", uRL0.getHost());
      assertEquals("nowrap", uRL0.getProtocol());
      assertEquals("multipart/form-data:125", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("Content-Type", uRL0.getFile());
      assertNull(uRL0.toString());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      assertEquals("Content-Type", uRL0.getPath());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals(125, uRL0.getPort());
      assertEquals("multipart/form-data", uRL0.getHost());
      assertEquals("nowrap", uRL0.getProtocol());
      assertEquals("multipart/form-data:125", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("Content-Type", uRL0.getFile());
      assertNull(uRL0.toString());
      assertNull(uRL1.getRef());
      assertEquals("Content-Type", uRL1.getFile());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("multipart/form-data", uRL1.getHost());
      assertEquals("nowrap", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("multipart/form-data:125", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals("Content-Type", uRL1.getPath());
      assertNull(uRL1.getUserInfo());
      assertEquals(125, uRL1.getPort());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)connection0));
      
      // Undeclared exception!
      try { 
        httpConnection1.postDataCharset("application/x-www-form-urlencoded");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // application/x-www-form-urlencoded
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("Split offset must be not be negative", "+ta=T8l|3");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("~", "org.jsoup.helper.HttpConnection$Base");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("~", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.helper.HttpConnection$Base", httpConnection_KeyVal0.value());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(httpConnection_Request1, connection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("~", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.helper.HttpConnection$Base", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      Parser parser1 = httpConnection_Request0.parser();
      assertNotNull(parser1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(parser1, parser0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(parser1.isTrackErrors());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Split offset must be not be negative";
      stringArray0[1] = "Content-Encoding";
      Connection connection1 = connection0.data(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertNotSame(connection1, httpConnection1);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection1));
      
      Connection.Response connection_Response0 = httpConnection1.response();
      assertNotNull(connection_Response0);
      assertNotSame(httpConnection1, connection1);
      assertNotSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNull(connection_Response0.charset());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.statusMessage());
      assertNull(connection_Response0.contentType());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.header("ISO-8859-1", "[%s^=%s]");
      assertNotNull(httpConnection_Request2);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNotSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertNotNull(httpConnection2);
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection1));
      
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add(httpConnection_KeyVal0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("~", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.helper.HttpConnection$Base", httpConnection_KeyVal0.value());
      
      HttpConnection httpConnection3 = (HttpConnection)connection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      assertNotNull(httpConnection3);
      assertSame(httpConnection0, httpConnection3);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection0, httpConnection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection3);
      assertNotSame(connection0, httpConnection2);
      assertNotSame(connection0, httpConnection1);
      assertNotSame(httpConnection3, httpConnection2);
      assertNotSame(httpConnection3, httpConnection1);
      assertSame(httpConnection3, httpConnection0);
      assertSame(httpConnection3, connection1);
      assertSame(httpConnection3, connection0);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)httpConnection2));
      assertFalse(connection0.equals((Object)httpConnection2));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(httpConnection3.equals((Object)httpConnection2));
      assertFalse(httpConnection3.equals((Object)httpConnection1));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)121;
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)121);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Referer", "Content-Type", (InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal0.value());
      assertEquals("Referer", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("|u{V]eBb1(N*{,K|4e");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal0.key());
      assertEquals("Content-Type", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Type", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.value("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal0.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal2.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal2.value());
      
      HttpConnection.KeyVal httpConnection_KeyVal3 = httpConnection_KeyVal2.inputStream((InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal0.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal2.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal2.value());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal3.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal3.value());
      assertNull(httpConnection_KeyVal3.contentType());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      
      String string0 = httpConnection_KeyVal3.value();
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", string0);
      assertNotNull(string0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal3);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal3, httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal0.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal1.key());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal2.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal2.value());
      assertEquals("|u{V]eBb1(N*{,K|4e", httpConnection_KeyVal3.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal3.value());
      assertNull(httpConnection_KeyVal3.contentType());
      assertTrue(httpConnection_KeyVal3.hasInputStream());
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      String string0 = HttpConnection.MULTIPART_FORM_DATA;
      assertEquals("multipart/form-data", string0);
      assertNotNull(string0);
      
      String string1 = httpConnection_Response0.contentType();
      assertNull(string1);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.userAgent((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "Content-Encoding");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      
      File file0 = MockFile.createTempFile("content-encoding", "multipart/form-data");
      assertNotNull(file0);
      assertEquals("/tmp/content-encoding0multipart/form-data", file0.toString());
      assertEquals("form-data", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/content-encoding0multipart", file0.getParent());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("application/x-www-form-urlencoded");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal1.key());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal0.inputStream((InputStream) mockFileInputStream0);
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertEquals("/tmp/content-encoding0multipart/form-data", file0.toString());
      assertEquals("form-data", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/content-encoding0multipart", file0.getParent());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      
      boolean boolean0 = httpConnection_KeyVal2.hasInputStream();
      assertTrue(boolean0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertEquals("/tmp/content-encoding0multipart/form-data", file0.toString());
      assertEquals("form-data", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.length());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals("/tmp/content-encoding0multipart", file0.getParent());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal2.key());
      assertTrue(httpConnection_KeyVal2.hasInputStream());
      assertEquals("Content-Encoding", httpConnection_KeyVal2.value());
      assertNull(httpConnection_KeyVal2.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<String> list0 = hashMap0.put("pk)&'u}]Y", linkedList1);
      assertFalse(linkedList1.contains("pk)&'u}]Y"));
      assertNull(list0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(13);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(13, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(13, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy(proxy0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(13, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(13, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(13, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy("Content-Encoding", 13);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(13, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(13, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(13, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(13, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("-^\"/eDYJWI2", "l[[bznid:*|:m8 ", (InputStream) sequenceInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("-^\"/eDYJWI2", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("l[[bznid:*|:m8 ", httpConnection_KeyVal0.value());
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(13, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(13, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(13, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(13, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals("-^\"/eDYJWI2", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("l[[bznid:*|:m8 ", httpConnection_KeyVal0.value());
      assertEquals(13, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.followRedirects());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      
      Parser parser0 = httpConnection_Request1.parser();
      assertNotNull(parser0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(13, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(13, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      stringArray0[1] = "Content-Type";
      stringArray0[2] = "n8'c;q6gev(xll";
      stringArray0[3] = "Content-Type";
      Connection connection0 = httpConnection0.data(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      
      Connection.Response connection_Response0 = httpConnection1.response();
      assertNotNull(connection_Response0);
      assertNotSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.contentType());
      assertNull(connection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection1.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      List<String> list0 = hashMap0.put("pk)&'u}]Y", linkedList1);
      assertFalse(linkedList1.contains("pk)&'u}]Y"));
      assertNull(list0);
      assertNotSame(linkedList1, linkedList0);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("Cannot set a request body for HTTP method ", 89);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(87);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(87, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(87, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(87, httpConnection_Request2.timeout());
      
      Parser parser0 = httpConnection_Request2.parser();
      assertNotNull(parser0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(87, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(87, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(87, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Content-Encoding";
      stringArray0[1] = "multipart/form-data";
      stringArray0[2] = "D>\",CC";
      stringArray0[3] = "Content-Encoding";
      Connection connection0 = httpConnection0.data(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(connection0);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, httpConnection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      
      Connection.Response connection_Response0 = httpConnection1.response();
      assertNotNull(connection_Response0);
      assertNotSame(connection_Response0, httpConnection_Response0);
      assertNotSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertFalse(connection_Response0.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertNull(connection_Response0.contentType());
      assertNull(connection_Response0.charset());
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      String string0 = "referer";
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("qxjp", "referer");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("qxjp", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("referer", httpConnection_KeyVal0.value());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertTrue(uRL1.equals((Object)uRL0));
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("some", uRL1.getHost());
      assertEquals("file", uRL1.getProtocol());
      assertEquals("some", uRL1.getAuthority());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection connection0 = httpConnection0.followRedirects(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.header("Content-Type", "Ohn");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection.Request connection_Request1 = httpConnection0.request();
      assertNotNull(connection_Request1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, connection_Request0);
      assertFalse(connection_Request1.equals((Object)httpConnection_Request0));
      assertNull(connection_Request1.requestBody());
      assertFalse(connection_Request1.followRedirects());
      assertEquals(30000, connection_Request1.timeout());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals(1048576, connection_Request1.maxBodySize());
      assertFalse(connection_Request1.ignoreHttpErrors());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("Split offset must be not be negative", "+ta=T8l|3");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.header("Split offset must be not be negative", "ISO-8859-1");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(3104);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Split offset must be not be negative");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data(connection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(3104, httpConnection_Request2.timeout());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection.Request connection_Request0 = httpConnection_Request2.requestBody("+ta=T8l|3");
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(3104, connection_Request0.timeout());
      assertEquals("+ta=T8l|3", connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(62);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 79);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection2 = connection1.data("a`|%mb6\"I*eY(\u0000 ", "[41&}Dpd0|W)|?t0", (InputStream) bufferedInputStream0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection1, connection2);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      Parser parser1 = parser0.setTrackErrors(62);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      
      Document document0 = parser0.parseInput("", "Split offset must be not be negative");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertTrue(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Split offset must be not be negative", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals("Split offset must be not be negative", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser2 = httpConnection_Request1.parser();
      assertNotNull(parser2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(parser2, parser1);
      assertNotSame(parser2, parser0);
      assertFalse(parser2.equals((Object)parser1));
      assertFalse(parser2.equals((Object)parser0));
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(parser2.isTrackErrors());
      
      String[] stringArray0 = new String[13];
      stringArray0[0] = "Content-Type";
      Connection connection3 = httpConnection0.userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(connection3, connection0);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection2);
      assertSame(connection3, connection1);
      
      Connection.KeyVal connection_KeyVal1 = connection0.data("Content-Encoding");
      assertNull(connection_KeyVal1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(connection0, connection2);
      assertSame(connection0, connection3);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      
      Connection connection4 = connection1.data("Content-Type", "Content-Type");
      assertNotNull(connection4);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(connection1, connection2);
      assertSame(connection1, connection3);
      assertSame(connection1, connection4);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection4, connection3);
      assertSame(connection4, connection0);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection1);
      assertSame(connection4, connection2);
      
      int int0 = httpConnection_Request1.timeout();
      assertEquals(3104, int0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "application/x-www-form-urlencoded");
      assertFalse(boolean0);
      
      boolean boolean1 = linkedList1.add("fieldset");
      assertTrue(boolean1);
      assertTrue(linkedList1.contains("fieldset"));
      assertFalse(linkedList1.contains("application/x-www-form-urlencoded"));
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList1.size());
      
      List<String> list0 = hashMap0.put("pk)&'u}]Y", linkedList1);
      assertTrue(linkedList1.contains("fieldset"));
      assertFalse(linkedList1.contains("pk)&'u}]Y"));
      assertNull(list0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertEquals(1, linkedList1.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      Connection connection0 = httpConnection0.referrer("pk)&'u}]Y");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(">", "pdyMeCNJ", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(">", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("pdyMeCNJ", httpConnection_KeyVal0.value());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = HttpConnection.KeyVal.create("pdyMeCNJ", ">", (InputStream) null);
      assertNotNull(httpConnection_KeyVal1);
      assertNotSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal1.equals((Object)httpConnection_KeyVal0));
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("pdyMeCNJ", httpConnection_KeyVal1.key());
      assertEquals(">", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertFalse(boolean0);
      assertNotSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertFalse(httpConnection_KeyVal0.equals((Object)httpConnection_KeyVal1));
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(">", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("pdyMeCNJ", httpConnection_KeyVal0.value());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      URL uRL0 = httpConnection_Response0.url;
      assertNull(uRL0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(">", "pdyMeCNJ", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("pdyMeCNJ", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals(">", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.userAgent(">");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("pdyMeCNJ");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      
      Connection connection1 = httpConnection0.data("g+hpUzC_y1<<CR ", "|F\"!Jm5z>");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      
      Connection connection0 = httpConnection0.proxy("gzip", 815);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      LinkedList<String> linkedList2 = new LinkedList<String>();
      assertFalse(linkedList2.contains("gzip"));
      assertNotNull(linkedList2);
      assertTrue(linkedList2.equals((Object)linkedList0));
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<String> list0 = hashMap0.put((String) null, linkedList0);
      assertFalse(linkedList0.contains("gzip"));
      assertNull(list0);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertTrue(linkedList0.equals((Object)linkedList2));
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertEquals(0, linkedList0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Connection connection1 = httpConnection0.referrer("PXWE)I![ZL^N&],v#");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(connection1, connection0);
      assertNotSame(connection1, httpConnection1);
      assertSame(connection1, httpConnection0);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection1));
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("[%s^=%s");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<String> list0 = hashMap0.put("pk)&'u}]Y", linkedList0);
      assertFalse(linkedList0.contains("pk)&'u}]Y"));
      assertNull(list0);
      assertEquals(0, linkedList0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.referrer("Ho-T");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.header("l[[bzNid:*|:M8 ", "application/octet-stream");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = httpConnection0.followRedirects(true);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.timeout((-2988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      String string0 = Parser.unescapeEntities("Content-Type", true);
      assertEquals("Content-Type", string0);
      assertNotNull(string0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      Document document0 = parser1.parseInput("multipart/form-data", "Content-Type");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Content-Type", document0.location());
      assertEquals("Content-Type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      // Undeclared exception!
      try { 
        httpConnection1.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser1.parseInput("multipart/form-data", "Content-Type");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Content-Type", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Content-Type", document0.baseUri());
      assertFalse(document0.hasParent());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertFalse(boolean0);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.timeout(20);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeHeader("multipart/form-data");
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Type", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)httpConnection_Request0.ignoreHttpErrors(false);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request2.parser(parser0);
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      
      // Undeclared exception!
      try { 
        httpConnection_Request4.postDataCharset("Content-Encoding");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Content-Encoding
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 945);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Request has already been read (with .parse())", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Request has already been read (with .parse())", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Request has already been read (with .parse())", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection.Request connection_Request0 = httpConnection_Request1.requestBody("Request has already been read (with .parse())");
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertEquals("Request has already been read (with .parse())", httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Request has already been read (with .parse())", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Request has already been read (with .parse())", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("Request has already been read (with .parse())", connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      
      PipedInputStream pipedInputStream1 = new PipedInputStream(945);
      assertNotNull(pipedInputStream1);
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
      assertEquals(0, pipedInputStream1.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 359);
      assertNotNull(bufferedInputStream0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("[tb", "a`|%mb6\"I*eY(\u0000 ", (InputStream) pipedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertSame(connection0, httpConnection0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals(0, pipedInputStream0.available());
      
      Parser parser1 = Parser.htmlParser();
      assertNotNull(parser1);
      assertNotSame(parser1, parser0);
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(parser1.isTrackErrors());
      
      Parser parser2 = parser1.setTrackErrors((-986));
      assertNotNull(parser2);
      assertSame(parser1, parser2);
      assertNotSame(parser1, parser0);
      assertNotSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      
      Document document0 = parser2.parseInput("Unexpectedly reached end of file (EOF) in input state [%s]", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(document0);
      assertSame(parser1, parser2);
      assertNotSame(parser1, parser0);
      assertNotSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(parser2.equals((Object)parser0));
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("oG]lh1MZ", 113);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertEquals("Request has already been read (with .parse())", httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Request has already been read (with .parse())", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Request has already been read (with .parse())", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("Request has already been read (with .parse())", httpConnection_Request2.requestBody());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser0);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(pipedInputStream0, pipedInputStream1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(parser0, parser1);
      assertNotSame(parser0, parser2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertFalse(pipedInputStream0.equals((Object)pipedInputStream1));
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(parser0.equals((Object)parser2));
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals("Request has already been read (with .parse())", httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("Request has already been read (with .parse())", httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Request has already been read (with .parse())", httpConnection_KeyVal0.key());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Request has already been read (with .parse())", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("Request has already been read (with .parse())", httpConnection_Request2.requestBody());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      
      Parser parser3 = httpConnection_Request0.parser();
      assertNotNull(parser3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(parser3, parser0);
      assertNotSame(parser3, parser1);
      assertNotSame(parser3, parser2);
      assertFalse(parser3.equals((Object)parser1));
      assertFalse(parser3.equals((Object)parser2));
      assertEquals("Request has already been read (with .parse())", httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(parser3.isTrackErrors());
      
      Connection connection1 = httpConnection0.userAgent("[41&}Dpd0|W)|?t0");
      assertNotNull(connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("", httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertEquals("", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertNull(httpConnection_Response1.statusMessage());
      
      URL uRL0 = httpConnection_Response1.url;
      assertNull(uRL0);
      
      URL uRL1 = HttpConnection.encodeUrl((URL) null);
      assertNull(uRL1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser((Parser) null);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("", 83);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy((Proxy) null);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(30000, httpConnection_Request3.timeout());
      
      int int0 = httpConnection_Request3.maxBodySize();
      assertEquals(1048576, int0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(30000, httpConnection_Request3.timeout());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("\"^-V]", "");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("noLqG/c", "Content-Type");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection0.cookies((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.addHeader("multipart/form-data", "");
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress((InetAddress) null, 30);
      assertNotNull(mockInetSocketAddress0);
      
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      assertNotNull(proxy0);
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(30, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:30", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertEquals("SOCKS @ /192.168.1.42:30", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("192.168.1.42", mockInetSocketAddress0.getHostString());
      assertFalse(mockInetSocketAddress0.isUnresolved());
      assertEquals(30, mockInetSocketAddress0.getPort());
      assertEquals("/192.168.1.42:30", mockInetSocketAddress0.toString());
      assertEquals(Proxy.Type.SOCKS, proxy0.type());
      assertEquals("SOCKS @ /192.168.1.42:30", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.proxy("", 0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset((String) null);
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      
      String string0 = httpConnection_Response1.contentType();
      assertNull(string0);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)connection0));
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection httpConnection2 = new HttpConnection();
      assertNotNull(httpConnection2);
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection0));
      
      Connection connection1 = httpConnection2.header("-*])!i8<7-%oy>%i~W[", "fe,vmrb");
      assertNotNull(connection1);
      assertSame(httpConnection2, connection1);
      assertNotSame(httpConnection2, httpConnection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertNotSame(httpConnection2, connection0);
      assertNotSame(connection1, httpConnection0);
      assertNotSame(connection1, httpConnection1);
      assertNotSame(connection1, connection0);
      assertSame(connection1, httpConnection2);
      assertFalse(httpConnection2.equals((Object)httpConnection0));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)connection0));
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      Connection connection2 = connection0.proxy(proxy0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertNotSame(httpConnection0, httpConnection2);
      assertSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, connection1);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertNotSame(connection0, httpConnection1);
      assertSame(connection0, connection2);
      assertNotSame(connection0, httpConnection2);
      assertSame(connection2, httpConnection0);
      assertNotSame(connection2, httpConnection2);
      assertSame(connection2, connection0);
      assertNotSame(connection2, connection1);
      assertNotSame(connection2, httpConnection1);
      assertFalse(httpConnection0.equals((Object)httpConnection2));
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)connection1));
      assertFalse(connection0.equals((Object)httpConnection1));
      assertFalse(connection0.equals((Object)httpConnection2));
      assertFalse(connection2.equals((Object)httpConnection2));
      assertFalse(connection2.equals((Object)connection1));
      assertFalse(connection2.equals((Object)httpConnection1));
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.addHeader("multipart/form-data", "");
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.requestBody("Content-Encoding");
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertEquals("Content-Encoding", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("Content-Encoding", httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals("Content-Encoding", httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      String string0 = "[41&}Dpd0|W)|?t0";
      int int0 = 1574;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1574);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      int int1 = 2551;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2551);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      String string1 = "Set-Cookie";
      // Undeclared exception!
      try { 
        httpConnection0.data("", "Set-Cookie", (InputStream) bufferedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      int int0 = (-1220);
      String string1 = "th";
      // Undeclared exception!
      try { 
        HttpConnection.connect(":j4frQ5V>.qPLDG-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: :j4frQ5V>.qPLDG-
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("gg~/[yIT<roY$<I1/66", "Data map must not be null", 283, "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(283, uRL0.getPort());
      assertEquals("Data map must not be null", uRL0.getHost());
      assertEquals("gg~/[yit<roy$<i1/66", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("Data map must not be null:283", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(283, uRL0.getPort());
      assertEquals("Data map must not be null", uRL0.getHost());
      assertEquals("gg~/[yit<roy$<i1/66", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("Data map must not be null:283", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Connection connection1 = HttpConnection.connect(uRL0);
      assertNotNull(connection1);
      assertNotSame(connection1, connection0);
      assertNotSame(connection1, httpConnection0);
      assertFalse(connection1.equals((Object)connection0));
      assertFalse(connection1.equals((Object)httpConnection0));
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(283, uRL0.getPort());
      assertEquals("Data map must not be null", uRL0.getHost());
      assertEquals("gg~/[yit<roy$<i1/66", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("Data map must not be null:283", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      
      Connection connection2 = httpConnection0.userAgent("mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(connection2.equals((Object)connection1));
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("text/");
      assertNull(connection_KeyVal0);
      assertSame(httpConnection0, connection2);
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertFalse(httpConnection0.equals((Object)connection1));
      
      Connection connection3 = httpConnection0.ignoreContentType(false);
      assertNotNull(connection3);
      assertSame(httpConnection0, connection2);
      assertNotSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection0);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
      assertNotSame(connection3, connection1);
      assertFalse(httpConnection0.equals((Object)connection1));
      assertFalse(connection3.equals((Object)connection1));
      
      // Undeclared exception!
      try { 
        HttpConnection.connect("Charset must not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Charset must not be null
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(1304);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(1304, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1304, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.removeHeader("Content-Type");
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertEquals(1304, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1304, httpConnection_Request2.timeout());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertEquals(1304, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(1304, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      Connection.Method connection_Method0 = Connection.Method.OPTIONS;
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.method(connection_Method0);
      assertNotNull(httpConnection2);
      assertSame(httpConnection0, httpConnection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection2, httpConnection0);
      assertNotSame(httpConnection2, httpConnection1);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      
      HttpConnection httpConnection3 = new HttpConnection();
      assertNotNull(httpConnection3);
      assertFalse(httpConnection3.equals((Object)httpConnection2));
      assertFalse(httpConnection3.equals((Object)httpConnection0));
      assertFalse(httpConnection3.equals((Object)httpConnection1));
      
      HttpConnection httpConnection4 = (HttpConnection)httpConnection3.data("Content-Type", "Content-Encoding", (InputStream) null, "Kj1");
      assertNotNull(httpConnection4);
      assertNotSame(httpConnection3, httpConnection2);
      assertNotSame(httpConnection3, httpConnection0);
      assertNotSame(httpConnection3, httpConnection1);
      assertSame(httpConnection3, httpConnection4);
      assertNotSame(httpConnection4, httpConnection0);
      assertNotSame(httpConnection4, httpConnection1);
      assertNotSame(httpConnection4, httpConnection2);
      assertSame(httpConnection4, httpConnection3);
      assertFalse(httpConnection3.equals((Object)httpConnection2));
      assertFalse(httpConnection3.equals((Object)httpConnection0));
      assertFalse(httpConnection3.equals((Object)httpConnection1));
      assertFalse(httpConnection4.equals((Object)httpConnection0));
      assertFalse(httpConnection4.equals((Object)httpConnection1));
      assertFalse(httpConnection4.equals((Object)httpConnection2));
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.proxy("", 0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.proxy("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", 0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(httpConnection1.equals((Object)connection1));
      assertFalse(httpConnection1.equals((Object)connection0));
      
      Connection connection2 = connection1.data("multipart/form-data", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (InputStream) null, "application/x-www-form-urlencoded");
      assertNotNull(connection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertNotSame(connection1, httpConnection1);
      assertSame(connection1, connection2);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection2, httpConnection0);
      assertNotSame(connection2, httpConnection1);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(connection1.equals((Object)httpConnection1));
      assertFalse(connection2.equals((Object)httpConnection1));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("org.jsoup.nodes.DocumentType", "6T4o", (InputStream) null, "org.jsoup.nodes.DocumentType");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Connection connection1 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(0, linkedList0.size());
      
      Connection connection2 = httpConnection0.followRedirects(true);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.header((String) null, "Content-Encoding");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        httpConnection0.data("org.jsoup.nodes.Attributes$1", (String) null, (InputStream) null, "m^3aE*O7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeHeader("Content-Type");
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.followRedirects(false);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.followRedirects());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertFalse(list0.contains("Content-Type"));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode1);
      assertFalse(list1.contains("Content-Type"));
      assertNotNull(list1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(list1, list0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<String> list2 = hashMap0.put("multipart/form-data", list0);
      assertFalse(list0.contains("Content-Type"));
      assertNull(list2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(list0, list1);
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertTrue(list0.equals((Object)list1));
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      httpConnection_Response0.processResponseHeaders(map0);
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection httpConnection2 = (HttpConnection)httpConnection0.referrer("Content-Encoding");
      assertNotNull(httpConnection2);
      assertSame(httpConnection0, httpConnection2);
      assertNotSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection2, httpConnection1);
      assertSame(httpConnection2, httpConnection0);
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertFalse(httpConnection2.equals((Object)httpConnection1));
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("AAiKo5[qh_F_rXW", "Yf!a}a380k");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Yf!a}a380k", httpConnection_KeyVal0.value());
      assertEquals("AAiKo5[qh_F_rXW", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      
      String string0 = httpConnection_KeyVal0.key();
      assertEquals("AAiKo5[qh_F_rXW", string0);
      assertNotNull(string0);
      assertEquals("Yf!a}a380k", httpConnection_KeyVal0.value());
      assertEquals("AAiKo5[qh_F_rXW", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("\"^-V]", "");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("noLqG/c", "Content-Type");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Connection connection1 = httpConnection0.cookies(hashMap0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      String string1 = "mozilla/5.0 (macintosh; intel mac os x 10_11_6) applewebkit/537.36 (khtml, like gecko) chrome/53.0.2785.143 safari/537.36";
      int int0 = (-1);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.maxBodySize((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("\"^-V]", "");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("noLqG/c", "Content-Type");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      Connection connection1 = httpConnection0.cookies(hashMap0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("F", 1124);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy(proxy0);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(30000, httpConnection_Request3.timeout());
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser0.parseInput("afterhead", "");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection2 = connection0.headers(hashMap0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection0, connection1);
      assertSame(connection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("application/x-www-form-urlencoded", "TagOpen");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Connection connection0 = httpConnection0.headers(hashMap0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "";
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.addHeader("multipart/form-data", "");
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("Content-Type");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("Content-Type", httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertEquals("Content-Type", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      
      HttpConnection.Response httpConnection_Response2 = (HttpConnection.Response)httpConnection_Response1.header("multipart/form-data", "multipart/form-data");
      assertNotNull(httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response1, httpConnection_Response2);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("Content-Type", httpConnection_Response0.charset());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertEquals("Content-Type", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("Content-Type", httpConnection_Response2.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.statusMessage());
      
      boolean boolean1 = httpConnection_Request1.ignoreContentType();
      assertFalse(boolean1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertTrue(boolean1 == boolean0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, linkedList0.size());
      
      Connection connection1 = httpConnection0.followRedirects(true);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      
      Connection connection2 = connection1.header("set-cookie", "Ohn");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(connection1, connection2);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, linkedList0.size());
      
      Connection connection1 = httpConnection0.followRedirects(true);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection connection2 = httpConnection0.data(">QS}5", ">QS}5", (InputStream) null, ">QS}5");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeHeader("org.jsoup.select.Evaluator$IndexEvaluator");
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      String string0 = httpConnection_Request0.requestBody();
      assertNull(string0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      String string1 = httpConnection_Response0.charset();
      assertNull(string1);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      assertFalse(list0.contains("org.jsoup.select.Evaluator$IndexEvaluator"));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      assertFalse(list0.contains("org.jsoup.select.Evaluator$IndexEvaluator"));
      assertFalse(list1.contains("org.jsoup.select.Evaluator$IndexEvaluator"));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      List<String> list2 = hashMap0.put("Content-Encoding", list1);
      assertFalse(list0.contains("org.jsoup.select.Evaluator$IndexEvaluator"));
      assertFalse(list1.contains("org.jsoup.select.Evaluator$IndexEvaluator"));
      assertNull(list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.proxy("{ed$,<g.k fmypp;", 5);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = null;
      String string1 = hashMap0.put((String) null, (String) null);
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      BiConsumer<String, String> biConsumer0 = (BiConsumer<String, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      assertNotNull(hashMap1);
      assertFalse(hashMap1.equals((Object)hashMap0));
      assertEquals(0, hashMap1.size());
      assertTrue(hashMap1.isEmpty());
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put((String) null, "MlER'");
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put("Content-Encoding", "5:=,E6&:w|^_");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("o9");
      assertNull(connection_KeyVal0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      String string0 = httpConnection_Request0.requestBody();
      assertNull(string0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Connection connection0 = httpConnection1.header("Content-Encoding", (String) null);
      assertNotNull(connection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(connection0, httpConnection1);
      assertNotSame(connection0, httpConnection0);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create((String) null, "UHiFks=V)lvNh~{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("x9\"w>MdQ'NxfH.u{");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals("x9\"w>MdQ'NxfH.u{", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertEquals("x9\"w>MdQ'NxfH.u{", httpConnection_Response1.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("Split offset must be not be negative", "+ta=T8l|3");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.header("Split offset must be not be negative", "ISO-8859-1");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(3104);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Split offset must be not be negative");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data(connection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(62);
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(3104, connection_Request0.timeout());
      assertEquals(62, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection.Request connection_Request1 = httpConnection_Request2.requestBody("+ta=T8l|3");
      assertNotNull(connection_Request1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(connection_Request1, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, httpConnection_Request2);
      assertSame(connection_Request1, httpConnection_Request1);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", connection_Request1.requestBody());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals(62, connection_Request1.maxBodySize());
      assertTrue(connection_Request1.followRedirects());
      assertEquals(3104, connection_Request1.timeout());
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser0.parseInput("", "Split offset must be not be negative");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Split offset must be not be negative", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Split offset must be not be negative", document0.location());
      assertFalse(document0.hasParent());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser1);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(3104, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      
      Parser parser2 = httpConnection_Request3.parser();
      assertNotNull(parser2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(3104, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(parser2.isTrackErrors());
      
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNotNull(connection_Response0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      assertNull(connection_Response0.contentType());
      assertNull(connection_Response0.charset());
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("Split offset must be not be negative", "+ta=T8l|3");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.header("Split offset must be not be negative", "ISO-8859-1");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(3104);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Split offset must be not be negative");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNull(connection_KeyVal0.contentType());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertFalse(connection_KeyVal0.hasInputStream());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data(connection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(62);
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(3104, connection_Request0.timeout());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(62, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection.Request connection_Request1 = httpConnection_Request2.requestBody("+ta=T8l|3");
      assertNotNull(connection_Request1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(connection_Request1, httpConnection_Request1);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, httpConnection_Request2);
      assertSame(connection_Request1, connection_Request0);
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertTrue(connection_Request1.followRedirects());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", connection_Request1.requestBody());
      assertEquals(3104, connection_Request1.timeout());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals(62, connection_Request1.maxBodySize());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(62);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 79);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection2 = connection1.data("a`|%mb6\"I*eY(\u0000 ", "[41&}Dpd0|W)|?t0", (InputStream) bufferedInputStream0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection2);
      assertSame(connection1, connection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      List<Node> list0 = parser0.parseFragmentInput("Unexpectedly reached end of file (EOF) in input state [%s]", (Element) null, "ISO-8859-1");
      assertNotNull(list0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Document document0 = parser0.parseInput("", "Split offset must be not be negative");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Split offset must be not be negative", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Split offset must be not be negative", document0.baseUri());
      assertEquals("#root", document0.normalName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser1);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(3104, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Parser parser2 = httpConnection_Request3.parser();
      assertNotNull(parser2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(3104, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertFalse(parser2.isTrackErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Type";
      Connection connection3 = connection1.userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection2);
      assertSame(connection1, connection3);
      assertSame(connection1, connection0);
      assertSame(connection3, connection1);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
      assertSame(connection3, connection2);
      
      Connection.KeyVal connection_KeyVal1 = connection0.data("Content-Encoding");
      assertNull(connection_KeyVal1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection3);
      assertSame(connection0, connection1);
      assertSame(connection0, connection2);
      
      Connection connection4 = connection1.data("Content-Type", "Content-Type");
      assertNotNull(connection4);
      assertSame(httpConnection0, connection4);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection3);
      assertSame(connection1, connection4);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection2);
      assertSame(connection1, connection3);
      assertSame(connection1, connection0);
      assertSame(connection4, httpConnection0);
      assertSame(connection4, connection0);
      assertSame(connection4, connection1);
      assertSame(connection4, connection2);
      assertSame(connection4, connection3);
      
      // Undeclared exception!
      try { 
        connection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser1.parseInput("multipart/form-data", "Content-Type");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Content-Type", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Content-Type", document0.location());
      
      Map<String, String> map0 = document0.dataset();
      assertNotNull(map0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Content-Type", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Content-Type", document0.location());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Connection connection0 = httpConnection0.headers(map0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(connection0, httpConnection0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("Content-Type", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Content-Type", document0.location());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("o9");
      assertNull(connection_KeyVal0);
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      String string0 = httpConnection_Request0.requestBody();
      assertNull(string0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      String string1 = httpConnection_Response0.charset();
      assertNull(string1);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("Split offset must be not be negative", "+ta=T8l|3");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.header("Split offset must be not be negative", "ISO-8859-1");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(3104);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Split offset must be not be negative");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(connection_KeyVal0.hasInputStream());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data(connection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(62);
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(3104, connection_Request0.timeout());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(62, connection_Request0.maxBodySize());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection.Request connection_Request1 = httpConnection_Request2.requestBody("+ta=T8l|3");
      assertNotNull(connection_Request1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, httpConnection_Request2);
      assertSame(connection_Request1, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request1);
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertEquals(3104, connection_Request1.timeout());
      assertEquals(62, connection_Request1.maxBodySize());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertTrue(connection_Request1.followRedirects());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals("+ta=T8l|3", connection_Request1.requestBody());
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request3 = (HttpConnection.Request)connection_Request0.cookie("multipart/form-data", "fd/");
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(connection_Request0, connection_Request1);
      assertSame(connection_Request0, httpConnection_Request3);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, connection_Request1);
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(3104, connection_Request0.timeout());
      assertEquals("+ta=T8l|3", connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(62, connection_Request0.maxBodySize());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(3104, httpConnection_Request3.timeout());
      
      Document document0 = parser0.parseInput("", "Split offset must be not be negative");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Split offset must be not be negative", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Split offset must be not be negative", document0.location());
      assertFalse(document0.hasParent());
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request2.parser(parser1);
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request4, connection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, connection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertEquals(3104, httpConnection_Request4.timeout());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request4.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request4.requestBody());
      assertTrue(httpConnection_Request4.followRedirects());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertNotNull(parser2);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      
      Document document1 = parser0.parseInput("pre", "fd/");
      assertNotNull(document1);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("fd/", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("fd/", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      
      Map<String, String> map0 = document1.dataset();
      assertNotNull(map0);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("fd/", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("fd/", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection httpConnection1 = (HttpConnection)connection0.headers(map0);
      assertNotNull(httpConnection1);
      assertNotSame(document1, document0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(connection0, httpConnection1);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(httpConnection1, connection0);
      assertSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection1);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertFalse(document1.equals((Object)document0));
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("fd/", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("fd/", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(parser0.isTrackErrors());
      
      boolean boolean0 = connection_Request0.followRedirects();
      assertTrue(boolean0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(connection_Request0, connection_Request1);
      assertSame(connection_Request0, httpConnection_Request4);
      assertSame(connection_Request0, httpConnection_Request3);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request1);
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(3104, connection_Request0.timeout());
      assertEquals("+ta=T8l|3", connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(62, connection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("qxjp", "referer");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("referer", httpConnection_KeyVal0.value());
      assertEquals("qxjp", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("Content-Type");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Type", httpConnection_KeyVal0.value());
      assertEquals("qxjp", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal1.value());
      assertEquals("qxjp", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal1);
      assertNotNull(httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Type", httpConnection_KeyVal0.value());
      assertEquals("qxjp", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal1.value());
      assertEquals("qxjp", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      Parser parser1 = httpConnection_Request1.parser();
      assertNotNull(parser1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotSame(parser1, parser0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertFalse(parser1.equals((Object)parser0));
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Type", httpConnection_KeyVal0.value());
      assertEquals("qxjp", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal1.value());
      assertEquals("qxjp", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(parser1.isTrackErrors());
      
      HttpConnection httpConnection1 = new HttpConnection();
      assertNotNull(httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection1.data(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(connection0);
      assertNotSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection0);
      assertNotSame(connection0, httpConnection0);
      assertSame(connection0, httpConnection1);
      assertFalse(httpConnection1.equals((Object)httpConnection0));
      assertFalse(connection0.equals((Object)httpConnection0));
      
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNotNull(connection_Response0);
      assertNotSame(httpConnection0, connection0);
      assertNotSame(httpConnection0, httpConnection1);
      assertFalse(httpConnection0.equals((Object)connection0));
      assertFalse(httpConnection0.equals((Object)httpConnection1));
      assertNull(connection_Response0.charset());
      assertNull(connection_Response0.contentType());
      assertNull(connection_Response0.statusMessage());
      assertEquals(0, connection_Response0.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection1.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "I(E+('bL47";
      Connection connection0 = httpConnection0.proxy("I(E+('bL47", 307);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Method connection_Method0 = Connection.Method.DELETE;
      String string1 = "accept-encoding";
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("accept-encoding");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // accept-encoding
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("Split offset must be not be negative", "+ta=T8l|3");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.header("Split offset must be not be negative", "ISO-8859-1");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(3104);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Split offset must be not be negative");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data(connection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(62);
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(62, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals(3104, connection_Request0.timeout());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection.Request connection_Request1 = httpConnection_Request2.requestBody("+ta=T8l|3");
      assertNotNull(connection_Request1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(connection_Request1, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request1);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(connection_Request1, httpConnection_Request2);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertEquals(62, connection_Request1.maxBodySize());
      assertTrue(connection_Request1.followRedirects());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals("+ta=T8l|3", connection_Request1.requestBody());
      assertEquals(3104, connection_Request1.timeout());
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      Document document0 = parser0.parseInput("", "Split offset must be not be negative");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Split offset must be not be negative", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Split offset must be not be negative", document0.baseUri());
      assertFalse(document0.isBlock());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser1);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertEquals(3104, httpConnection_Request3.timeout());
      
      Parser parser2 = httpConnection_Request3.parser();
      assertNotNull(parser2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertEquals(3104, httpConnection_Request3.timeout());
      assertFalse(parser2.isTrackErrors());
      
      String[] stringArray0 = new String[21];
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "org.jsoup.select.StructuralEvaluator$Parent";
      stringArray0[2] = "+ta=T8l|3";
      stringArray0[3] = "ISO-8859-1";
      stringArray0[4] = "Content-Encoding";
      stringArray0[5] = "application/x-www-form-urlencoded";
      stringArray0[6] = "+ta=T8l|3";
      stringArray0[7] = "Content-Type";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(",z,g`", ",z,g`");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals(",z,g`", httpConnection_KeyVal0.key());
      assertEquals(",z,g`", httpConnection_KeyVal0.value());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("o9");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("o9", httpConnection_KeyVal0.key());
      assertEquals(",z,g`", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("o9", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(",z,g`", httpConnection_KeyVal1.value());
      
      InputStream inputStream0 = null;
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) null);
      assertNotNull(httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("o9", httpConnection_KeyVal0.key());
      assertEquals(",z,g`", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("o9", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(",z,g`", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("o9", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals(",z,g`", httpConnection_KeyVal2.value());
      
      String string0 = httpConnection_KeyVal2.toString();
      assertEquals("o9=,z,g`", string0);
      assertNotNull(string0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("o9", httpConnection_KeyVal0.key());
      assertEquals(",z,g`", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("o9", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(",z,g`", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("o9", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals(",z,g`", httpConnection_KeyVal2.value());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("o9");
      assertNull(connection_KeyVal0);
      
      Connection connection0 = httpConnection0.maxBodySize(0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("o9=,z,g`", 0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(0, httpConnection_Request2.timeout());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser0);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(0, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.data((Connection.KeyVal) httpConnection_KeyVal2);
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("o9", httpConnection_KeyVal0.key());
      assertEquals(",z,g`", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("o9", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(",z,g`", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("o9", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals(",z,g`", httpConnection_KeyVal2.value());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(0, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(0, httpConnection_Request4.timeout());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.proxy(proxy0);
      assertNotNull(httpConnection_Request5);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("o9", httpConnection_KeyVal0.key());
      assertEquals(",z,g`", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("o9", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(",z,g`", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("o9", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals(",z,g`", httpConnection_KeyVal2.value());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(0, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertNull(httpConnection_Request4.requestBody());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(0, httpConnection_Request4.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertNull(httpConnection_Request5.requestBody());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals(0, httpConnection_Request5.timeout());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertTrue(httpConnection_Request5.followRedirects());
      
      Connection.Request connection_Request0 = httpConnection_Request5.requestBody("xawuv3");
      assertNotNull(connection_Request0);
      assertSame(connection_Request0, httpConnection_Request4);
      assertSame(connection_Request0, httpConnection_Request2);
      assertSame(connection_Request0, httpConnection_Request3);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request5);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal2);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal0);
      assertSame(httpConnection_KeyVal2, httpConnection_KeyVal1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, connection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, connection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(0, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("xawuv3", connection_Request0.requestBody());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("o9", httpConnection_KeyVal0.key());
      assertEquals(",z,g`", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("o9", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals(",z,g`", httpConnection_KeyVal1.value());
      assertFalse(httpConnection_KeyVal2.hasInputStream());
      assertEquals("o9", httpConnection_KeyVal2.key());
      assertNull(httpConnection_KeyVal2.contentType());
      assertEquals(",z,g`", httpConnection_KeyVal2.value());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("xawuv3", httpConnection_Request0.requestBody());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("xawuv3", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("xawuv3", httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertEquals("xawuv3", httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(0, httpConnection_Request3.timeout());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertEquals("xawuv3", httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals(0, httpConnection_Request4.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("xawuv3", httpConnection_Request5.requestBody());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertEquals(0, httpConnection_Request5.timeout());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertTrue(httpConnection_Request5.followRedirects());
      
      Connection.Request connection_Request1 = httpConnection_Request3.maxBodySize(0);
      assertNotNull(connection_Request1);
      assertSame(connection_Request1, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request4);
      assertSame(connection_Request1, httpConnection_Request2);
      assertSame(connection_Request1, httpConnection_Request3);
      assertSame(connection_Request1, httpConnection_Request5);
      assertSame(connection_Request1, httpConnection_Request1);
      assertSame(connection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, connection_Request0);
      assertEquals("xawuv3", connection_Request1.requestBody());
      assertEquals(0, connection_Request1.timeout());
      assertFalse(connection_Request1.ignoreHttpErrors());
      assertTrue(connection_Request1.followRedirects());
      assertFalse(connection_Request1.ignoreContentType());
      assertEquals(0, connection_Request1.maxBodySize());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("xawuv3", httpConnection_Request0.requestBody());
      assertEquals(0, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(0, httpConnection_Request1.maxBodySize());
      assertEquals("xawuv3", httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("xawuv3", httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(0, httpConnection_Request2.maxBodySize());
      assertEquals(0, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertEquals("xawuv3", httpConnection_Request3.requestBody());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertEquals(0, httpConnection_Request3.timeout());
      assertEquals(0, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Connection connection0 = httpConnection0.cookie("Q\"!?yq:K]r%HN", "");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request1.ignoreHttpErrors(true);
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      
      String string0 = null;
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.header("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (String) null);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.referrer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "Nf-";
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      Connection connection1 = httpConnection0.proxy(proxy0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      // Undeclared exception!
      try { 
        httpConnection0.proxy("hptml", (-1220));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1220
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("Split offset must be not be negative", "+ta=T8l|3");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.header("Split offset must be not be negative", "ISO-8859-1");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(3104);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(3104, httpConnection_Request1.timeout());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Split offset must be not be negative");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(connection_KeyVal0.contentType());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data(connection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      
      Connection.Request connection_Request0 = httpConnection_Request2.maxBodySize(62);
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request1);
      assertSame(connection_Request0, httpConnection_Request0);
      assertSame(connection_Request0, httpConnection_Request2);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(3104, connection_Request0.timeout());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(62, connection_Request0.maxBodySize());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection.Request connection_Request1 = httpConnection_Request2.requestBody("+ta=T8l|3");
      assertNotNull(connection_Request1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(connection_Request1, httpConnection_Request2);
      assertSame(connection_Request1, httpConnection_Request1);
      assertSame(connection_Request1, connection_Request0);
      assertSame(connection_Request1, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertEquals(3104, connection_Request1.timeout());
      assertEquals("UTF-8", connection_Request1.postDataCharset());
      assertFalse(connection_Request1.ignoreContentType());
      assertTrue(connection_Request1.followRedirects());
      assertEquals("+ta=T8l|3", connection_Request1.requestBody());
      assertEquals(62, connection_Request1.maxBodySize());
      assertFalse(connection_Request1.ignoreHttpErrors());
      
      Parser parser1 = parser0.setTrackErrors(0);
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      
      List<Node> list0 = parser0.parseFragmentInput("Unexpectedly reached end of file (EOF) in input state [%s]", (Element) null, "ISO-8859-1");
      assertNotNull(list0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      Document document0 = parser0.parseInput("", "Split offset must be not be negative");
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertFalse(parser0.isTrackErrors());
      assertEquals("Split offset must be not be negative", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Split offset must be not be negative", document0.location());
      assertFalse(document0.hasParent());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.parser(parser1);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(3104, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      
      Parser parser2 = httpConnection_Request3.parser();
      assertNotNull(parser2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, connection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, connection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, connection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(parser0, parser1);
      assertSame(parser0, parser2);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, connection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, connection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(parser2, parser1);
      assertSame(parser2, parser0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals("+ta=T8l|3", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(62, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(3104, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request1.requestBody());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(62, httpConnection_Request1.maxBodySize());
      assertEquals(3104, httpConnection_Request1.timeout());
      assertEquals("Split offset must be not be negative", connection_KeyVal0.key());
      assertEquals("+ta=T8l|3", connection_KeyVal0.value());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertNull(connection_KeyVal0.contentType());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertEquals(62, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request2.requestBody());
      assertEquals(3104, httpConnection_Request2.timeout());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("+ta=T8l|3", httpConnection_Request3.requestBody());
      assertEquals(62, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      assertEquals(3104, httpConnection_Request3.timeout());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertFalse(parser2.isTrackErrors());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Type";
      Connection connection2 = connection1.userAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(connection2);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection1, connection2);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      Connection.KeyVal connection_KeyVal1 = connection0.data("Content-Encoding");
      assertNull(connection_KeyVal1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      
      Connection connection3 = connection1.data("Content-Type", "Content-Type");
      assertNotNull(connection3);
      assertSame(httpConnection0, connection3);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection2);
      assertSame(connection1, connection3);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection3, connection2);
      assertSame(connection3, httpConnection0);
      assertSame(connection3, connection0);
      assertSame(connection3, connection1);
      
      // Undeclared exception!
      try { 
        connection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      String string0 = "";
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeCookie("4IE6BG#BFAK");
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request0.addHeader("[tB", "user-agent");
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      assertSame(httpConnection1, connection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertEquals("", httpConnection_Response1.charset());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(3329);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.nodes.Entities", "org.jsoup.nodes.Entities", (InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("org.jsoup.nodes.Entities");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.value());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data(connection_KeyVal0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.value());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.proxy("", 2773);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.value());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
      
      boolean boolean0 = httpConnection_Request3.ignoreHttpErrors();
      assertFalse(boolean0);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(parser0.isTrackErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.key());
      assertEquals("org.jsoup.nodes.Entities", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.value());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.contentType());
      assertEquals("org.jsoup.nodes.Entities", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertNull(httpConnection_Request2.requestBody());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertTrue(httpConnection_Request3.followRedirects());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String string0 = "[-";
      String string1 = "html";
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, (SocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type DIRECT is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      String string0 = ";R%bD\"dDn$Q`";
      int int0 = (-2300);
      // Undeclared exception!
      try { 
        httpConnection0.proxy(";R%bD\"dDn$Q`", (-309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-309
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Connection connection0 = httpConnection0.parser(parser0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertFalse(parser0.isTrackErrors());
      
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.cookie("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      boolean boolean0 = false;
      Connection connection0 = httpConnection0.ignoreContentType(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      CDataNode cDataNode0 = new CDataNode("application/x-www-form-urlencoded");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Node node0 = cDataNode0.shallowClone();
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertNotSame(cDataNode0, node0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      String string0 = "";
      Attribute attribute0 = new Attribute("{*\u0007X", "", attributes0);
      assertNotNull(attribute0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{*\u0007X", attribute0.getKey());
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertNotNull(attributes1);
      assertNotSame(cDataNode0, node0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{*\u0007X", attribute0.getKey());
      assertEquals(2, attributes1.size());
      
      String string1 = attributes0.getIgnoreCase("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(cDataNode0, node0);
      assertSame(attributes0, attributes1);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      
      Comparator<Map.Entry<String, DataInputStream>> comparator0 = Map.Entry.comparingByKey();
      assertNotNull(comparator0);
      
      Attributes attributes2 = attributes1.clone();
      assertNotNull(attributes2);
      assertNotSame(cDataNode0, node0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{*\u0007X", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Spliterator<Attribute> spliterator0 = attributes2.spliterator();
      assertNotNull(spliterator0);
      assertNotSame(cDataNode0, node0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{*\u0007X", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      
      Spliterator<Attribute> spliterator1 = attributes1.spliterator();
      assertNotNull(spliterator1);
      assertNotSame(cDataNode0, node0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(spliterator1, spliterator0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(spliterator1.equals((Object)spliterator0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{*\u0007X", attribute0.getKey());
      assertEquals(2, attributes1.size());
      
      Map<String, String> map0 = attributes2.dataset();
      assertNotNull(map0);
      assertNotSame(cDataNode0, node0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{*\u0007X", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Connection connection1 = httpConnection0.headers(map0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertNotSame(cDataNode0, node0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals("", attribute0.getValue());
      assertEquals("{*\u0007X", attribute0.getKey());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      Connection connection2 = HttpConnection.connect(uRL0);
      assertNotNull(connection2);
      assertNotSame(connection2, connection0);
      assertNotSame(connection2, httpConnection0);
      assertNotSame(connection2, connection1);
      assertFalse(connection2.equals((Object)connection0));
      assertFalse(connection2.equals((Object)httpConnection0));
      assertFalse(connection2.equals((Object)connection1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("!j*%hp8aLq|O", 191);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.proxy("org.jsoup.SerializationException", 8203);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertNotSame(httpConnection_Request0, connection_Request0);
      assertNotSame(httpConnection_Request1, connection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertNotSame(httpConnection_Request2, connection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertFalse(httpConnection_Request0.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request1.equals((Object)connection_Request0));
      assertFalse(httpConnection_Request2.equals((Object)connection_Request0));
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request2.requestBody());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request1, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Proxy proxy0 = httpConnection_Request0.proxy();
      assertNull(proxy0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      int int0 = 0;
      String string0 = "";
      try { 
        MockURL.URL("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.parser(parser0);
      assertNotNull(httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("-{Z+>I:i*S<", "-{Z+>I:i*S<");
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.data((Connection.KeyVal) httpConnection_KeyVal1);
      assertNotNull(httpConnection_Request3);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(30000, httpConnection_Request3.timeout());
      
      int int0 = 871;
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy("-{Z+>I:i*S<", 871);
      assertNotNull(httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals(30000, httpConnection_Request2.timeout());
      assertTrue(httpConnection_Request2.followRedirects());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertEquals(30000, httpConnection_Request3.timeout());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(30000, httpConnection_Request4.timeout());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.followRedirects());
      
      HttpConnection.Request httpConnection_Request5 = httpConnection_Request4.timeout(871);
      assertNotNull(httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(871, httpConnection_Request0.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(871, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(871, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(871, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(871, httpConnection_Request4.timeout());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertNull(httpConnection_Request5.requestBody());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertEquals(871, httpConnection_Request5.timeout());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertTrue(httpConnection_Request5.followRedirects());
      
      HttpConnection.Request httpConnection_Request6 = httpConnection_Request5.proxy(proxy0);
      assertNotNull(httpConnection_Request6);
      assertSame(httpConnection_Request0, httpConnection_Request4);
      assertSame(httpConnection_Request0, httpConnection_Request2);
      assertSame(httpConnection_Request0, httpConnection_Request5);
      assertSame(httpConnection_Request0, httpConnection_Request6);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request3);
      assertSame(httpConnection_Request1, httpConnection_Request4);
      assertSame(httpConnection_Request1, httpConnection_Request2);
      assertSame(httpConnection_Request1, httpConnection_Request6);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertSame(httpConnection_Request1, httpConnection_Request5);
      assertSame(httpConnection_Request1, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request3);
      assertSame(httpConnection_Request2, httpConnection_Request0);
      assertSame(httpConnection_Request2, httpConnection_Request6);
      assertSame(httpConnection_Request2, httpConnection_Request4);
      assertSame(httpConnection_Request2, httpConnection_Request5);
      assertSame(httpConnection_Request2, httpConnection_Request1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertSame(httpConnection_Request3, httpConnection_Request1);
      assertSame(httpConnection_Request3, httpConnection_Request5);
      assertSame(httpConnection_Request3, httpConnection_Request0);
      assertSame(httpConnection_Request3, httpConnection_Request6);
      assertSame(httpConnection_Request3, httpConnection_Request4);
      assertSame(httpConnection_Request3, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request1);
      assertSame(httpConnection_Request4, httpConnection_Request3);
      assertSame(httpConnection_Request4, httpConnection_Request6);
      assertSame(httpConnection_Request4, httpConnection_Request0);
      assertSame(httpConnection_Request4, httpConnection_Request2);
      assertSame(httpConnection_Request4, httpConnection_Request5);
      assertSame(httpConnection_Request5, httpConnection_Request4);
      assertSame(httpConnection_Request5, httpConnection_Request2);
      assertSame(httpConnection_Request5, httpConnection_Request0);
      assertSame(httpConnection_Request5, httpConnection_Request3);
      assertSame(httpConnection_Request5, httpConnection_Request6);
      assertSame(httpConnection_Request5, httpConnection_Request1);
      assertSame(httpConnection_Request6, httpConnection_Request5);
      assertSame(httpConnection_Request6, httpConnection_Request0);
      assertSame(httpConnection_Request6, httpConnection_Request3);
      assertSame(httpConnection_Request6, httpConnection_Request1);
      assertSame(httpConnection_Request6, httpConnection_Request4);
      assertSame(httpConnection_Request6, httpConnection_Request2);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(871, httpConnection_Request0.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(871, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(parser0.isTrackErrors());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertTrue(httpConnection_Request2.followRedirects());
      assertEquals(871, httpConnection_Request2.timeout());
      assertFalse(httpConnection_Request2.ignoreHttpErrors());
      assertNull(httpConnection_Request2.requestBody());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals(0, pipedInputStream0.available());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.key());
      assertEquals("-{Z+>I:i*S<", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertEquals("UTF-8", httpConnection_Request3.postDataCharset());
      assertFalse(httpConnection_Request3.ignoreContentType());
      assertEquals(871, httpConnection_Request3.timeout());
      assertFalse(httpConnection_Request3.ignoreHttpErrors());
      assertTrue(httpConnection_Request3.followRedirects());
      assertNull(httpConnection_Request3.requestBody());
      assertEquals(1048576, httpConnection_Request3.maxBodySize());
      assertNull(httpConnection_Request4.requestBody());
      assertFalse(httpConnection_Request4.ignoreHttpErrors());
      assertEquals(871, httpConnection_Request4.timeout());
      assertEquals("UTF-8", httpConnection_Request4.postDataCharset());
      assertFalse(httpConnection_Request4.ignoreContentType());
      assertEquals(1048576, httpConnection_Request4.maxBodySize());
      assertTrue(httpConnection_Request4.followRedirects());
      assertEquals("UTF-8", httpConnection_Request5.postDataCharset());
      assertFalse(httpConnection_Request5.ignoreContentType());
      assertNull(httpConnection_Request5.requestBody());
      assertFalse(httpConnection_Request5.ignoreHttpErrors());
      assertEquals(871, httpConnection_Request5.timeout());
      assertEquals(1048576, httpConnection_Request5.maxBodySize());
      assertTrue(httpConnection_Request5.followRedirects());
      assertEquals("UTF-8", httpConnection_Request6.postDataCharset());
      assertEquals(871, httpConnection_Request6.timeout());
      assertFalse(httpConnection_Request6.ignoreHttpErrors());
      assertNull(httpConnection_Request6.requestBody());
      assertFalse(httpConnection_Request6.ignoreContentType());
      assertEquals(1048576, httpConnection_Request6.maxBodySize());
      assertTrue(httpConnection_Request6.followRedirects());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("-{Z+>I:i*S<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -{Z+>I:i*S<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.sslSocketFactory();
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      httpConnection_Request0.header("pre", "pre");
      httpConnection_Request0.requestBody("");
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        HttpConnection.connect("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("nAVbf6 z<DUkb^**?", "nAVbf6 z<DUkb^**?");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("nAVbf6 z<DUkb^**?");
      httpConnection_KeyVal1.contentType();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null, "]evHb9#Agf1}\"9_{$2;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser((Parser) null);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.timeout(379);
      String string0 = null;
      // Undeclared exception!
      try { 
        httpConnection_Request2.postDataCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("application/x-www-form-urlencoded", 0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(38);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", ")[F\"ew+b|)", (InputStream) pipedInputStream0);
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      mockInetSocketAddress0.getHostName();
      HttpConnection.Request httpConnection_Request3 = httpConnection_Request2.timeout(38);
      HttpConnection.Request httpConnection_Request4 = httpConnection_Request3.proxy(")[F\"ew+b|)", 38);
      httpConnection_Request4.requestBody();
      httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      httpConnection_KeyVal0.value("org.jsoup.nodes.Node$OuterHtmlVisitor");
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.headers((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("\"^-V]", "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("noLqG/c", "Content-Type");
      httpConnection0.cookies(hashMap0);
      String string0 = "s`%p";
      httpConnection0.userAgent("s`%p");
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Q\"!?yq:K]r%HN", "6MaDW=my->{ S");
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      hashMap0.put("GM'-cXol", (String) null);
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.proxy("", 0);
      Connection connection1 = httpConnection0.referrer("Content-Encoding");
      assertSame(connection1, connection0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreHttpErrors(false);
      httpConnection0.followRedirects(false);
      httpConnection0.referrer("G.b[");
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Type", "5C#Az1;a");
      httpConnection_KeyVal0.value("application/x-www-form-urlencoded");
      httpConnection0.data("5C#Az1;a");
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.data((Connection.KeyVal) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = "";
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser.xmlParser();
      int int0 = 3947;
      String string0 = "tUs_i!}%x4sIB:3O@";
      // Undeclared exception!
      try { 
        HttpConnection.connect("tUs_i!}%x4sIB:3O@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: tUs_i!}%x4sIB:3O@
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.url("]`1?,pk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: ]`1?,pk
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.requestBody("2]2,/");
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.timeout((-1509));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.statusCode();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("InputStream data not supported in URL query string.");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)51;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)12;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-86);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)127, (byte)0);
      httpConnection_KeyVal1.inputStream((InputStream) byteArrayInputStream0);
      InputStream inputStream0 = httpConnection_KeyVal1.inputStream();
      assertSame(inputStream0, byteArrayInputStream0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.ignoreHttpErrors();
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreHttpErrors(false);
      httpConnection_Request0.addHeader("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "");
      httpConnection_Request0.sslSocketFactory();
      httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Response0.method = connection_Method0;
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("Content-Encoding");
      // Undeclared exception!
      try { 
        httpConnection_Response1.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(",z,g`", ",z,g`");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("o9");
      HttpConnection.KeyVal httpConnection_KeyVal2 = httpConnection_KeyVal1.inputStream((InputStream) null);
      httpConnection_KeyVal2.toString();
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("o9");
      httpConnection0.maxBodySize(0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      httpConnection_Request0.proxy(proxy0);
      httpConnection_Request0.requestBody();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte) (-1);
      byte byte0 = (byte)79;
      byteArray0[8] = (byte)79;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-1, 92, 0, 0, 0, -38, 21, -1, 79]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        HttpConnection.KeyVal.create((String) null, "org.jsoup.nodes.TextNode");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("#+vYoGS1z|pi3'V4!9", "#+vYoGS1z|pi3'V4!9");
      httpConnection_KeyVal0.value("!o*y7HV)x4RG@@(g>:v");
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyStream();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
