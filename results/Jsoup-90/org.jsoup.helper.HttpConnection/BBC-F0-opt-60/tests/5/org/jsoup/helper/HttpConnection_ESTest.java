/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 13 22:07:25 GMT 2021
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      httpConnection_Request0.maxBodySize(0);
      assertEquals(0, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(30000, httpConnection_Request0.timeout());
      
      httpConnection_Request0.timeout(0);
      assertEquals(0, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer("\"I4");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.timeout();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, int0);
      assertTrue(httpConnection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.sslSocketFactory();
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.requestBody();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("\"YA<GTM>ZWKK7z", 0);
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.proxy();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = httpConnection_Request0.postDataCharset();
      assertEquals("UTF-8", string0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.htmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.parser();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.maxBodySize(293);
      assertEquals(293, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.maxBodySize();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, int0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(false);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.data();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "]+UyJR28$$E+CO4", (InputStream) null);
      httpConnection_KeyVal0.hasInputStream();
      assertEquals("]+UyJR28$$E+CO4", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?application%2Fx-www-form-urlencoded=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-data");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      HttpConnection.Response.execute(httpConnection_Request1, httpConnection_Response0);
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?application%2Fx-www-form-urlencoded=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "njO`ql");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request1.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      httpConnection_Response0.bufferUp();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?application%2Fx-www-form-urlencoded=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "njO`ql");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request1.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      httpConnection_Response0.bodyStream();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?application%2Fx-www-form-urlencoded=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "njO`ql");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request1.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      httpConnection_Response0.bodyAsBytes();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.timeout(47);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Content-Encoding");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      httpConnection0.get();
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNull(connection_Response0.contentType());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreHttpErrors(true);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreContentType(true);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.followRedirects(false);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertFalse(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URL uRL0 = HttpConnection.encodeUrl((URL) null);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("z", "application/x-www-form-urlencoded", 0, "Content-Type", uRLStreamHandler0);
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertEquals("Content-Type", uRL1.getPath());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("F<nU^~vck@4Zd", "ajEk5dlUIvrPWGm", 106, "Content-Type", uRLStreamHandler0);
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNull(uRL1.toString());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "multipart/form-data", uRLStreamHandler0);
      URL uRL2 = HttpConnection.encodeUrl(uRL1);
      assertNull(uRL2.toExternalForm());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      httpConnection0.data("w`n#s~0", "*B{ZE\"@c{BlfYT7*|", (InputStream) pipedInputStream0);
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("w`n#s~0");
      assertNotNull(connection_KeyVal0);
      assertEquals("*B{ZE\"@c{BlfYT7*|", connection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.userAgent("multipart/form-data");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.url("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.referrer("p[wewh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.proxy("set-cookie", (-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("Data map must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Data map must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.url(uRL0);
      Proxy proxy0 = Proxy.NO_PROXY;
      connection0.proxy(proxy0);
      try { 
        httpConnection0.post();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.method(connection_Method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(118);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.headers((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.header("defaHlt", "dfaxhlt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = httpConnection0.url(uRL0);
      try { 
        connection0.get();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.followRedirects(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.url(uRL0);
      try { 
        connection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      try { 
        connection0.execute();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Unexpected count of entities loaded", uRLStreamHandler0);
      httpConnection0.url(uRL1);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetAddress inetAddress0 = MockInetAddress.getByName("Content-Type");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 436);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      httpConnection0.proxy(proxy0);
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[6];
      httpConnection0.request((Connection.Request) null);
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data("Content-Type", (String) null, (InputStream) null, "Q?<L~eXd6\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.data("@", "@", (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null, (String) null, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.data("application/x-www-form-urlencoded", "Content-Encoding");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.data("application/x-www-form-urlencoded");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.cookies((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.cookie("[&9", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("\"9GiD5IoZ", "referer", (InputStream) null);
      assertEquals("\"9GiD5IoZ", httpConnection_KeyVal0.key());
      
      httpConnection_KeyVal0.key("application/x-www-form-urlencoded");
      assertEquals("referer", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("p[wewh", "|.DBQoS:>.h9%]N#Gir");
      MockFile mockFile0 = new MockFile("|.DBQoS:>.h9%]N#Gir");
      File file0 = MockFile.createTempFile("|.DBQoS:>.h9%]N#Gir", "c/Ls`l&gGF{RG", (File) mockFile0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) mockFileInputStream0);
      assertEquals("p[wewh", httpConnection_KeyVal1.key());
      assertEquals("|.DBQoS:>.h9%]N#Gir", httpConnection_KeyVal1.value());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Type", "P@ DFTUM0/w?ZM \"GB_");
      assertEquals("P@ DFTUM0/w?ZM \"GB_", httpConnection_KeyVal0.value());
      
      httpConnection_KeyVal0.value("boundary");
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Request must not be null");
      String string0 = httpConnection_KeyVal0.key();
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", string0);
      assertEquals("Request must not be null", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)16, (byte)0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("5(N6V_", "5(N6V_", (InputStream) byteArrayInputStream0);
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("5(N6V_");
      assertTrue(connection_KeyVal0.hasInputStream());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("user-agent", "^u>5>(}.d^O}u/{");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      httpConnection_Request1.requestBody("user-agent");
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection.Request httpConnection_Request2 = httpConnection_Request1.data((Connection.KeyVal) httpConnection_KeyVal0);
      httpConnection_Request2.url(uRL0);
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      httpConnection_Request2.method(connection_Method0);
      try { 
        HttpConnection.Response.execute(httpConnection_Request2);
        fail("Expecting exception: ProtocolException");
      
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.cookie("[UVqHP-", "application/x-www-form-urlencoded");
      httpConnection_Request1.cookie("Content-Type", "multipart/form-data");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.url(uRL0);
      try { 
        HttpConnection.Response.execute(httpConnection_Request1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Cookie", "Content-Encoding", (InputStream) mockFileInputStream0);
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.url(uRL0);
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.method(connection_Method0);
      try { 
        HttpConnection.Response.execute(httpConnection_Request2);
        fail("Expecting exception: ProtocolException");
      
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("gzip");
      hashMap0.put("set-cookie", linkedList0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Document document0 = Parser.parseBodyFragmentRelaxed("STOP", "z19W8|z[Y");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      hashMap0.put((String) null, list0);
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.url(uRL0);
      connection0.proxy("content-type", 8204);
      try { 
        connection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?application%2Fx-www-form-urlencoded=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-data");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request1);
      httpConnection_Response0.charset("accept-encoding");
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // accept-encoding
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?application%2Fx-www-form-urlencoded=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-data");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request1);
      httpConnection_Response0.body();
      String string0 = httpConnection_Response0.body();
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals("multipart/form-data", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?application%2Fx-www-form-urlencoded=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-data");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      httpConnection_Response0.body();
      httpConnection_Response0.parse();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?application%2Fx-www-form-urlencoded=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "njO`ql");
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      httpConnection_Request0.method(connection_Method0);
      HttpConnection.Response.execute(httpConnection_Request2, httpConnection_Response0);
      assertEquals(30000, httpConnection_Request2.timeout());
      assertEquals(1048576, httpConnection_Request2.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request2.postDataCharset());
      assertFalse(httpConnection_Request2.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.ignoreHttpErrors(true);
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      try { 
        HttpConnection.Response.execute(httpConnection_Request1, httpConnection_Response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      URL uRL0 = MockURL.getHttpExample();
      httpConnection_Request0.url(uRL0);
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      HttpConnection.Request httpConnection_Request2 = (HttpConnection.Request)httpConnection_Request1.method(connection_Method0);
      try { 
        HttpConnection.Response.execute(httpConnection_Request2);
        fail("Expecting exception: ProtocolException");
      
      } catch(ProtocolException e) {
         //
         // Invalid HTTP method: PATCH
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.requestBody("");
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.url(uRL0);
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set a request body for HTTP method GET
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFtpExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("Content-Type");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Content-Type
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize((-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.url(uRL0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.cookie(">a.,oVDRI", "application/x-www-form-urlencoded");
      try { 
        HttpConnection.Response.execute(httpConnection_Request1, httpConnection_Response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.userAgent(")?");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      httpConnection_Response0.header("application/x-www-form-urlencoded", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header("deflate", (String) null);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Content-Type");
      Connection connection0 = httpConnection0.cookies(hashMap0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("https", "InSelect");
      Connection connection0 = httpConnection0.headers(hashMap0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("DZ", "N@", (InputStream) null);
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("multipart/form-data");
      assertNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("accept-encoding", "deflate", (InputStream) sequenceInputStream0);
      linkedHashSet0.add(httpConnection_KeyVal0);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "application/x-www-form-urlencoded";
      stringArray0[1] = "multipart/form-data";
      Connection connection0 = httpConnection0.data(stringArray0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Data collection must not be null", "\"N1w5v%Ug.I.c+");
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded", (InputStream) null);
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("application/x-www-form-urlencoded=application/x-www-form-urlencoded", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("p[wewh", "|.DBQoS:>.h9%]N#Gir");
      String string0 = httpConnection_KeyVal0.value();
      assertEquals("|.DBQoS:>.h9%]N#Gir", string0);
      assertEquals("p[wewh", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("\"9GiD5IoZ", "referer", (InputStream) null);
      httpConnection_KeyVal0.contentType();
      assertEquals("referer", httpConnection_KeyVal0.value());
      assertEquals("\"9GiD5IoZ", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "Content-Encoding");
      httpConnection_KeyVal0.inputStream();
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("|E@&", "E", (InputStream) null);
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("|E@&");
      assertNotNull(connection_KeyVal0);
      assertEquals("E", connection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data("ForeignContent", "Content-Type", (InputStream) null, "referer");
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.referrer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.header("", "5y7P);ypg`|[TGh5;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.cookie((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("fZ:Pjl P&G[OeVS)Z/_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: fZ:Pjl P&G[OeVS)Z/_
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      Connection connection0 = httpConnection0.method(connection_Method0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data("application/x-www-form-urlencoded", "Content-Encoding");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.timeout((-4804));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNull(connection_Response0.contentType());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.postDataCharset("UTF-8");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.url("http:/");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.userAgent((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.maxBodySize(3);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.response((Connection.Response) null);
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNull(connection_Response0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.cookie(")e", ")e");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeCookie("Bb7:po");
      assertNull(httpConnection_Response1.statusMessage());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.followRedirects();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(boolean0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.requestBody("9j,f?ho;w!oa'.");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(boolean0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.URL("https", "Content-Encoding", "Content-Encoding");
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }
}
