/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:48:00 GMT 2020
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.internal.ConstrainableInputStream;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.requestBody("VB");
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("VB", httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("VB", httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      
      httpConnection_Request0.url = uRL0;
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("VB", httpConnection_Request0.requestBody());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set a request body for HTTP method GET
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(0);
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(0, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(0, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(0, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(0, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.userAgent("q|~");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(14);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(14, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(14, httpConnection_Request1.timeout());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      int int0 = httpConnection_Request0.timeout();
      assertEquals(30000, int0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      SSLSocketFactory sSLSocketFactory0 = httpConnection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      String string0 = httpConnection_Request0.requestBody();
      assertNull(string0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(":}C-nE35X", 124);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Proxy proxy0 = httpConnection_Request0.proxy();
      assertNull(proxy0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      String string0 = httpConnection_Request0.postDataCharset();
      assertNotNull(string0);
      assertEquals("UTF-8", string0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(parser0.isTrackErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Connection.Request connection_Request0 = httpConnection_Request0.maxBodySize(557);
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(557, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals(557, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(true);
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
      
      boolean boolean0 = connection_Request0.ignoreHttpErrors();
      assertFalse(boolean0);
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(true);
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(connection_Request0.ignoreContentType());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(false);
      assertNotNull(connection_Request0);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("application/x-www-form-urlencoded", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertFalse(boolean0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("application/x-www-form-urlencoded", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getQuery());
      
      httpConnection_Request0.url = uRL0;
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      assertNotNull(httpConnection_Response0);
      assertSame(httpConnection0, httpConnection1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      
      ConstrainableInputStream constrainableInputStream0 = (ConstrainableInputStream)httpConnection_Response0.bodyStream();
      assertNotNull(constrainableInputStream0);
      assertSame(httpConnection0, httpConnection1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      
      httpConnection_Request0.url = uRL0;
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertNull(httpConnection_Request0.url.getQuery());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(httpConnection_Request0, httpConnection_Response0);
      assertNotNull(httpConnection_Response1);
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(200, httpConnection_Response1.statusCode());
      
      HttpConnection.Response httpConnection_Response2 = httpConnection_Response1.charset("disabled");
      assertNotNull(httpConnection_Response2);
      assertFalse(httpConnection_Response0.equals((Object)httpConnection_Response1));
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response1, httpConnection_Response2);
      assertNotSame(httpConnection_Response1, httpConnection_Response0);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertNotSame(httpConnection_Response2, httpConnection_Response0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertEquals("disabled", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(200, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response2.contentType());
      assertEquals("OK", httpConnection_Response2.statusMessage());
      assertEquals(200, httpConnection_Response2.statusCode());
      assertEquals("disabled", httpConnection_Response2.charset());
      
      byte[] byteArray0 = httpConnection_Response2.bodyAsBytes();
      assertNotNull(byteArray0);
      assertEquals(121, byteArray0.length);
      assertFalse(httpConnection_Response0.equals((Object)httpConnection_Response1));
      assertFalse(httpConnection_Response0.equals((Object)httpConnection_Response2));
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertSame(httpConnection0, httpConnection1);
      assertNotSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response1, httpConnection_Response2);
      assertNotSame(httpConnection_Response1, httpConnection_Response0);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertNotSame(httpConnection_Response2, httpConnection_Response0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertEquals("disabled", httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(200, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response2.contentType());
      assertEquals("OK", httpConnection_Response2.statusMessage());
      assertEquals(200, httpConnection_Response2.statusCode());
      assertEquals("disabled", httpConnection_Response2.charset());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      
      Collection<Connection.KeyVal> collection0 = httpConnection_Request0.data();
      assertNotNull(collection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      
      Connection connection0 = httpConnection0.data(collection0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(connection0, httpConnection0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.followRedirects(false);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection.Request connection_Request0 = connection0.request();
      assertNotNull(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertFalse(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      
      httpConnection_Request0.url = uRL0;
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertNull(httpConnection_Request0.url.getRef());
      assertNull(httpConnection_Request0.url.getQuery());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = (HttpConnection.Response)httpConnection1.execute();
      assertNotNull(httpConnection_Response0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertEquals("OK", httpConnection_Response0.statusMessage());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = HttpConnection.encodeUrl((URL) null);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Must supply an even number of key value pairs", "Must supply an even number of key value pairs", 111, "Must supply an even number of key value pairs", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("Must supply an even number of key value pairs", uRL0.getFile());
      assertEquals(111, uRL0.getPort());
      assertEquals("Must supply an even number of key value pairs", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("Must supply an even number of key value pairs", uRL0.getPath());
      assertEquals("must supply an even number of key value pairs", uRL0.getProtocol());
      assertEquals("Must supply an even number of key value pairs:111", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      assertEquals("Must supply an even number of key value pairs", uRL0.getFile());
      assertEquals(111, uRL0.getPort());
      assertEquals("Must supply an even number of key value pairs", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("Must supply an even number of key value pairs", uRL0.getPath());
      assertEquals("must supply an even number of key value pairs", uRL0.getProtocol());
      assertEquals("Must supply an even number of key value pairs:111", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals("must supply an even number of key value pairs", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals("Must supply an even number of key value pairs", uRL1.getPath());
      assertEquals("Must supply an even number of key value pairs", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("Must supply an even number of key value pairs:111", uRL1.getAuthority());
      assertEquals("Must supply an even number of key value pairs", uRL1.getFile());
      assertEquals(111, uRL1.getPort());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("ftp", "cy", 0, "application/x-www-form-urlencoded", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("application/x-www-form-urlencoded", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("cy:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("cy", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("application/x-www-form-urlencoded", uRL0.getFile());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotNull(uRL1);
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("application/x-www-form-urlencoded", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertEquals(0, uRL0.getPort());
      assertNull(uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("cy:0", uRL0.getAuthority());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("cy", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("application/x-www-form-urlencoded", uRL0.getFile());
      assertEquals("application/x-www-form-urlencoded", uRL1.getPath());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals(0, uRL1.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("cy:0", uRL1.getAuthority());
      assertEquals("cy", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("application/x-www-form-urlencoded", uRL1.getFile());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("defer", "defer", (InputStream) pipedInputStream0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      Connection connection0 = HttpConnection.connect(uRL0);
      assertNotNull(connection0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.userAgent((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.requestBody("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.referrer("9H,F_$s<Q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.referrer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.proxy("\"eTC]H", (-1042));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.proxy((String) null, 110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hostname can't be null
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("application/x-www-form-urlencoded");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // application/x-www-form-urlencoded
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.headers((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.header((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      
      httpConnection_Request0.url = uRL0;
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("file", httpConnection_Request0.url.getProtocol());
      assertEquals("some", httpConnection_Request0.url.getAuthority());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("some", httpConnection_Request0.url.getHost());
      assertNull(httpConnection_Request0.url.getUserInfo());
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      
      httpConnection_Request0.headers = null;
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      
      httpConnection_Request0.url = uRL0;
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Connection.Method connection_Method0 = Connection.Method.PUT;
      httpConnection_Request0.method = connection_Method0;
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.method.hasBody());
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      
      httpConnection_Request0.url = uRL0;
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawFragment());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      
      try { 
        httpConnection0.execute();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(74);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 74);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null, "org.jsoup.select.Evaluator$AttributeWithValueNot", (InputStream) bufferedInputStream0, "org.jsoup.select.Evaluator$AttributeWithValueNot");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("6qph", "://");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("http");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookies((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookie((String) null, "application/x-www-form-urlencoded");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.userAgent("$d");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("content-type", "content-type");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("content-type", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("content-type", httpConnection_KeyVal0.value());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("content-type");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals("content-type", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("content-type", httpConnection_KeyVal0.value());
      assertEquals("content-type", httpConnection_KeyVal1.value());
      assertEquals("content-type", httpConnection_KeyVal1.key());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url("multipart/form-data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: multipart/form-data
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("~D7T2UC.CgZ7F*:w[9{", "KwPcqn6Y#[}\"h");
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("KwPcqn6Y#[}\"h", httpConnection_KeyVal0.value());
      assertEquals("~D7T2UC.CgZ7F*:w[9{", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3624);
      assertNotNull(bufferedInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) bufferedInputStream0);
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("KwPcqn6Y#[}\"h", httpConnection_KeyVal0.value());
      assertEquals("~D7T2UC.CgZ7F*:w[9{", httpConnection_KeyVal0.key());
      assertFalse(fileDescriptor0.valid());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("KwPcqn6Y#[}\"h", httpConnection_KeyVal1.value());
      assertEquals("~D7T2UC.CgZ7F*:w[9{", httpConnection_KeyVal1.key());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("~:+@R", "plaintext", (InputStream) pipedInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("plaintext", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("~:+@R", httpConnection_KeyVal0.key());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value(";<2");
      assertNotNull(httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("~:+@R", httpConnection_KeyVal0.key());
      assertEquals(";<2", httpConnection_KeyVal0.value());
      assertEquals("~:+@R", httpConnection_KeyVal1.key());
      assertEquals(";<2", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Va~", "c{");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Va~", httpConnection_KeyVal0.key());
      assertEquals("c{", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      
      String string0 = httpConnection_KeyVal0.key();
      assertNotNull(string0);
      assertEquals("Va~", string0);
      assertEquals("Va~", httpConnection_KeyVal0.key());
      assertEquals("c{", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.url(uRL0);
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("content-type", "content-type");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("content-type", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("content-type", httpConnection_KeyVal0.value());
      
      String string0 = httpConnection_KeyVal0.value();
      assertNotNull(string0);
      assertEquals("content-type", string0);
      assertEquals("content-type", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("content-type", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("r7FwKN.dG[f\"%JdiV", "org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", httpConnection_KeyVal0.value());
      assertEquals("r7FwKN.dG[f\"%JdiV", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("Key val must not be null");
      assertNotNull(connection_KeyVal0);
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", httpConnection_KeyVal0.value());
      assertEquals("r7FwKN.dG[f\"%JdiV", httpConnection_KeyVal0.key());
      assertEquals("Key val must not be null", httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("r7FwKN.dG[f\"%JdiV", connection_KeyVal0.key());
      assertEquals("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling", connection_KeyVal0.value());
      assertFalse(connection_KeyVal0.hasInputStream());
      assertEquals("Key val must not be null", connection_KeyVal0.contentType());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      
      httpConnection_Request0.url = uRL0;
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      Document document0 = httpConnection1.get();
      assertNotNull(document0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      assertFalse(document0.hasParent());
      assertEquals("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded", document0.location());
      assertEquals("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Type", "0");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("0", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("0", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Content-Type", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      
      try { 
        HttpConnection.Response.execute(httpConnection_Request1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection1 = connection0.data("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "a))m&bp>~", (InputStream) pipedInputStream0, "Content-Encoding");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawQuery());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, pipedInputStream0.available());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("%wH6Fvy`[(]Th", "%wH6Fvy`[(]Th");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response2);
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response1));
      assertNull(httpConnection_Response2.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.contentType());
      
      httpConnection_Response2.processResponseHeaders(map0);
      assertFalse(httpConnection_Response0.equals((Object)httpConnection_Response2));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response1));
      assertNotSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response2, httpConnection_Response0);
      assertNotSame(httpConnection_Response2, httpConnection_Response1);
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertEquals(1, map0.size());
      assertFalse(map0.isEmpty());
      assertNull(httpConnection_Response2.charset());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.contentType());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection1 = httpConnection0.cookie("application/x-www-form-urlencoded", "application/x-www-form-urlencoded");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRI0.getRawQuery());
      assertEquals("foo.bar", uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals("http", uRI0.getScheme());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getFile());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      Connection connection1 = httpConnection0.proxy(proxy0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      
      httpConnection_Request0.url = uRL0;
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://foo.bar", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      assertEquals("", httpConnection_Request0.url.getPath());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      assertNotNull(httpConnection_Response0);
      assertSame(httpConnection0, httpConnection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      
      String string0 = httpConnection_Response0.body();
      assertNotNull(string0);
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", string0);
      assertSame(httpConnection0, httpConnection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      httpConnection_Request0.url = uRL0;
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRL0.getUserInfo());
      assertEquals("", uRL0.getPath());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      assertNotNull(httpConnection_Response0);
      assertSame(httpConnection0, httpConnection1);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("Content-Encoding");
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("Content-Encoding", httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("Content-Encoding", httpConnection_Response1.charset());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertEquals(200, httpConnection_Response1.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection_Response1.body();
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // Content-Encoding
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      
      httpConnection_Request0.url = uRL0;
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("http", uRI0.getScheme());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("foo.bar", uRI0.getHost());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("", uRI0.getRawPath());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals("", httpConnection_Request0.url.getFile());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      assertNotNull(httpConnection_Response0);
      assertSame(httpConnection0, httpConnection1);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.bufferUp();
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(200, httpConnection_Response1.statusCode());
      
      HttpConnection.Response httpConnection_Response2 = (HttpConnection.Response)httpConnection_Response0.bufferUp();
      assertNotNull(httpConnection_Response2);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response0, httpConnection_Response2);
      assertSame(httpConnection_Response2, httpConnection_Response1);
      assertSame(httpConnection_Response2, httpConnection_Response0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response2.contentType());
      assertNull(httpConnection_Response2.charset());
      assertEquals("OK", httpConnection_Response2.statusMessage());
      assertEquals(200, httpConnection_Response2.statusCode());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertTrue(boolean0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      
      httpConnection_Request0.url = uRL0;
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertEquals("", httpConnection_Request0.url.getFile());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toString());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals("http://foo.bar", httpConnection_Request0.url.toExternalForm());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      assertEquals("foo.bar", httpConnection_Request0.url.getAuthority());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals("", httpConnection_Request0.url.getPath());
      assertEquals("foo.bar", httpConnection_Request0.url.getHost());
      
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      assertNotNull(httpConnection1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection1, httpConnection0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(httpConnection_Request0);
      assertNotNull(httpConnection_Response0);
      assertSame(httpConnection0, httpConnection1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.bufferUp();
      assertNotNull(httpConnection_Response1);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertEquals(200, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      
      Document document0 = httpConnection_Response1.parse();
      assertNotNull(document0);
      assertSame(httpConnection0, httpConnection1);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertEquals("UTF-8", httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertEquals(200, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("UTF-8", httpConnection_Response1.charset());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("", uRI0.getRawPath());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http", uRI0.getScheme());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("http://foo.bar", uRL0.toString());
      
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: foo.bar
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (InputStream) null);
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertNotNull(httpConnection_Request1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      
      Connection connection0 = httpConnection0.request((Connection.Request) httpConnection_Request0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(connection0, httpConnection0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Connection connection1 = connection0.requestBody("Content-Encoding");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(connection0, connection1);
      assertSame(connection0, httpConnection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertEquals("Content-Encoding", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Connection connection2 = connection0.url(uRL0);
      assertNotNull(connection2);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(connection0, connection1);
      assertSame(connection0, connection2);
      assertSame(connection0, httpConnection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertEquals((-1), uRI0.getPort());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals("http://foo.bar", uRI0.toString());
      assertEquals("http", uRI0.getScheme());
      assertEquals("", uRI0.getRawPath());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getRawFragment());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("Content-Encoding", httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      try { 
        connection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URI uRI0 = MockURI.aHttpURI;
      assertNotNull(uRI0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      
      URL uRL0 = MockURI.toURL(uRI0);
      assertNotNull(uRL0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals("", uRI0.getRawPath());
      assertEquals("http", uRI0.getScheme());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawUserInfo());
      assertFalse(uRI0.isOpaque());
      assertEquals("foo.bar", uRI0.getRawAuthority());
      assertEquals("foo.bar", uRI0.getHost());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawQuery());
      assertEquals((-1), uRI0.getPort());
      assertEquals("http://foo.bar", uRI0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("foo.bar", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://foo.bar", uRL0.toString());
      assertEquals("http://foo.bar", uRL0.toExternalForm());
      assertEquals("", uRL0.getPath());
      assertEquals("foo.bar", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection connection1 = httpConnection0.data("application/x-www-form-urlencoded", "Content-Encoding");
      assertNotNull(connection1);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      httpConnection_Request0.url = uRL0;
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), httpConnection_Request0.url.getPort());
      assertNull(httpConnection_Request0.url.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", httpConnection_Request0.url.toString());
      assertNull(httpConnection_Request0.url.getRef());
      assertEquals((-1), httpConnection_Request0.url.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", httpConnection_Request0.url.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", httpConnection_Request0.url.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", httpConnection_Request0.url.getHost());
      assertNull(httpConnection_Request0.url.getUserInfo());
      assertEquals("http", httpConnection_Request0.url.getProtocol());
      
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      try { 
        HttpConnection.Response.execute(httpConnection_Request0, httpConnection_Response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.postDataCharset("iso-8859-1");
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.maxBodySize(62);
      assertNotNull(connection0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.timeout((-892));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.header("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Content-Encoding");
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header("Lj`atiR", (String) null);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("reversed", "[Y6)Q<*@U8");
      Connection connection0 = httpConnection0.cookies(hashMap0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HttpConnection httpConnection0 = new HttpConnection();
      hashMap0.put("application/x-www-form-urlencoded", "L6hs\"vC>");
      Connection connection0 = httpConnection0.headers(hashMap0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("application/x-www-form-urlencoded", "application/x-www-form-urlencoded");
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Content-Encoding");
      assertNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data("Content-Type", "multipart/form-data");
      Connection.KeyVal connection_KeyVal0 = connection0.data("Content-Type");
      assertEquals("multipart/form-data", connection_KeyVal0.value());
      assertNotNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      linkedHashSet0.add((Connection.KeyVal) null);
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Key val must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Type", "application/x-www-form-urlencoded");
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Cookie name must not be empty", "Cookie name must not be empty");
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("Cookie name must not be empty=Cookie name must not be empty", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("-9E{wmbY}*", "-9E{wmbY}*");
      String string0 = httpConnection_KeyVal0.contentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("u!8)_TGL", "u!8)_TGL", (InputStream) byteArrayInputStream0);
      InputStream inputStream0 = httpConnection_KeyVal0.inputStream();
      assertEquals(7, inputStream0.available());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://foo.bar?a%29%29m%26bp%3E%7E=application%2Fx-www-form-urlencoded");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      httpConnection_Request0.url = uRL0;
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.data("a))m&bp>~", "application/x-www-form-urlencoded");
      httpConnection0.get();
      httpConnection1.response();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer("");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.PATCH;
      Connection connection0 = httpConnection0.method(connection_Method0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        httpConnection0.data("", "", (InputStream) pipedInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.timeout(777);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNull(connection_Response0.statusMessage());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("Content-Type");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Content-Type
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("multipart/form-data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: multipart/form-data
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize((-1766));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.response((Connection.Response) null);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection.Response connection_Response0 = httpConnection_Response0.removeCookie("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertSame(httpConnection_Response0, connection_Response0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      boolean boolean0 = connection_Request0.followRedirects();
      assertTrue(boolean0);
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreContentType(true);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.maxBodySize();
      assertEquals(1048576, int0);
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.parser((Parser) null);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(boolean0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.parser();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.proxy("X q3li [4Bp`K[^", 255);
      assertSame(connection0, httpConnection0);
  }
}
