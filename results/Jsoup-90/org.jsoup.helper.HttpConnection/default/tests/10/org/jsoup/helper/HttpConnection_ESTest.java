/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 31 21:51:46 GMT 2021
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection connection1 = httpConnection0.requestBody("Wr(FZ/w9c^60'ZF");
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertNotNull(connection1);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotNull(connection_Request0);
      assertEquals("Wr(FZ/w9c^60'ZF", connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set a request body for HTTP method GET
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      assertEquals(0, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(0, httpConnection_Request1.timeout());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.referrer("~v$");
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.timeout(712);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      assertEquals(712, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertNull(httpConnection_Request1.requestBody());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(712, httpConnection_Request1.timeout());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      int int0 = httpConnection_Request0.timeout();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      
      connection_Request0.sslSocketFactory((SSLSocketFactory) null);
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      
      SSLSocketFactory sSLSocketFactory0 = connection_Request0.sslSocketFactory();
      assertNull(sSLSocketFactory0);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      Connection.Request connection_Request0 = httpConnection_Request0.requestBody("dl");
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNotNull(connection_Request0);
      assertEquals("dl", httpConnection_Request0.requestBody());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals("dl", connection_Request0.requestBody());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      String string0 = httpConnection_Request0.requestBody();
      assertNull(string0);
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy(proxy0);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("DIRECT", proxy0.toString());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertNull(httpConnection_Request1.requestBody());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("c$?VSe@fK", 102);
      assertSame(httpConnection_Request0, httpConnection_Request1);
      assertSame(httpConnection_Request1, httpConnection_Request0);
      assertNotNull(httpConnection_Request1);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertNull(httpConnection_Request1.requestBody());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      
      Proxy proxy0 = connection_Request0.proxy();
      assertNull(proxy0);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(30000, httpConnection_Request0.timeout());
      
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset("u");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // u
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      
      String string0 = httpConnection_Request0.postDataCharset();
      assertNotNull(string0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Parser parser0 = httpConnection_Request0.parser();
      assertNotNull(parser0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(parser0.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      
      int int0 = httpConnection_Request0.maxBodySize();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals(1048576, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreHttpErrors(true);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNotNull(connection_Request0);
      assertNull(httpConnection_Request0.requestBody());
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNotNull(connection_Request0);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      
      boolean boolean0 = connection_Request0.ignoreHttpErrors();
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      Connection.Request connection_Request0 = httpConnection_Request0.ignoreContentType(true);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNotNull(connection_Request0);
      assertTrue(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertNotNull(httpConnection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
      assertSame(httpConnection_Request0, connection_Request0);
      assertSame(connection_Request0, httpConnection_Request0);
      assertNotNull(connection_Request0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Request0.requestBody());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      Connection.Request connection_Request0 = connection0.request();
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection_Request0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Content-Encoding");
      assertTrue(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(httpConnection_Response0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Response0.charset());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      assertFalse(httpConnection_Response1.equals((Object)httpConnection_Response0));
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response1, httpConnection_Response0);
      assertNotNull(httpConnection_Response1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertNull(connection_Request0.requestBody());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Response0.charset());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(200, httpConnection_Response1.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertSame(httpConnection0, connection0);
      assertNotNull(connection_Request0);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Content-Type");
      assertTrue(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertNotNull(httpConnection_Response0);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      BufferedInputStream bufferedInputStream0 = httpConnection_Response0.bodyStream();
      assertSame(httpConnection0, connection0);
      assertNotNull(bufferedInputStream0);
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection.Request connection_Request0 = connection0.request();
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection_Request0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Content-Encoding");
      assertTrue(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(httpConnection_Response0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      
      byte[] byteArray0 = httpConnection_Response0.bodyAsBytes();
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertNull(connection_Request0.requestBody());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("EndT+=aOpn", "EndT+=aOpn", (InputStream) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?EndT%2B%3DaOpn=EndT%2B%3DaOpn");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Content-Encoding");
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      Connection connection1 = connection0.url(uRL0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNotNull(connection1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      Document document0 = connection1.get();
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNotNull(document0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample?EndT%2B%3DaOpn=EndT%2B%3DaOpn", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample?EndT%2B%3DaOpn=EndT%2B%3DaOpn", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Connection.Response connection_Response0 = connection0.response();
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertNotNull(connection_Response0);
      assertNull(connection_Response0.contentType());
      assertEquals("OK", connection_Response0.statusMessage());
      assertEquals(200, connection_Response0.statusCode());
      assertEquals("UTF-8", connection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.maxBodySize(0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertSame(httpConnection0, connection0);
      assertNotNull(connection_Request0);
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(0, connection_Request0.maxBodySize());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("EndT+=aOpn", "EndT+=aOpn", (InputStream) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?EndT%2B%3DaOpn=EndT%2B%3DaOpn");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "application/x-www-form-urlencoded");
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNotNull(connection1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      Connection.Response connection_Response0 = httpConnection0.execute();
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertNotNull(connection_Response0);
      assertEquals(200, connection_Response0.statusCode());
      assertNull(connection_Response0.contentType());
      assertEquals("OK", connection_Response0.statusMessage());
      assertNull(connection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URL uRL0 = HttpConnection.encodeUrl((URL) null);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("81V'3Umkz-;H", "lv`", 88, "Data key must not be empty", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("Data key must not be empty", uRL0.getFile());
      assertEquals("81v'3umkz-;h", uRL0.getProtocol());
      assertEquals("lv`:88", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Data key must not be empty", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(88, uRL0.getPort());
      assertEquals("lv`", uRL0.getHost());
      
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertSame(uRL0, uRL1);
      assertSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertEquals("Data key must not be empty", uRL0.getFile());
      assertEquals("81v'3umkz-;h", uRL0.getProtocol());
      assertEquals("lv`:88", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("Data key must not be empty", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNull(uRL0.toString());
      assertEquals(88, uRL0.getPort());
      assertEquals("lv`", uRL0.getHost());
      assertEquals("lv`", uRL1.getHost());
      assertEquals(88, uRL1.getPort());
      assertEquals("Data key must not be empty", uRL1.getPath());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("81v'3umkz-;h", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("lv`:88", uRL1.getAuthority());
      assertEquals("Data key must not be empty", uRL1.getFile());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      
      Connection connection0 = httpConnection0.data("ISO-8859", "ISO-8859", (InputStream) byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertEquals(1, byteArray0.length);
      assertNotNull(connection0);
      assertEquals(1, byteArrayInputStream0.available());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("ISO-8859");
      assertSame(httpConnection0, connection0);
      assertNotNull(connection_KeyVal0);
      assertEquals("ISO-8859", connection_KeyVal0.key());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertNull(connection_KeyVal0.contentType());
      assertEquals("ISO-8859", connection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection connection0 = HttpConnection.connect(uRL0);
      assertNotNull(connection0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection connection1 = connection0.ignoreHttpErrors(true);
      assertSame(connection0, connection1);
      assertSame(connection1, connection0);
      assertNotNull(connection1);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection.Request connection_Request0 = connection0.request();
      assertSame(connection0, connection1);
      assertNotNull(connection_Request0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertNull(connection_Request0.requestBody());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Connection connection0 = HttpConnection.connect("http:/");
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.userAgent((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.timeout(80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.referrer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("org.jsoup.select.Evaluator$AttributeWithValueContaining");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Proxy proxy0 = Proxy.NO_PROXY;
      assertNotNull(proxy0);
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      Connection connection1 = connection0.proxy(proxy0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertNotNull(connection1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals(Proxy.Type.DIRECT, proxy0.type());
      assertEquals("DIRECT", proxy0.toString());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.headers((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.header("EndT+faOpn", "EndT+faOpn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      
      try { 
        connection0.get();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.followRedirects(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      try { 
        connection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Content-Type";
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      stringArray0[1] = "multipart/form-data";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null, (String) null, (InputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("Referer", "Referer");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data("l|n]B1~=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookies((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.cookie((String) null, "p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.userAgent("");
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Ubq7I$j?79a|BN-P$", "multipart/form-data");
      assertNotNull(httpConnection_KeyVal0);
      assertEquals("Ubq7I$j?79a|BN-P$", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("multipart/form-data");
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.value());
      assertEquals("multipart/form-data", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.value());
      assertNull(httpConnection_KeyVal1.contentType());
      assertFalse(httpConnection_KeyVal1.hasInputStream());
      assertEquals("multipart/form-data", httpConnection_KeyVal1.key());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      // Undeclared exception!
      try { 
        httpConnection0.url((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) pipedInputStream0);
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals(0, pipedInputStream0.available());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
      assertEquals("Content-Encoding", httpConnection_KeyVal1.key());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal1.value());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.parser.XmlTreeBuilder", "Data collection must not be null", (InputStream) mockFileInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(fileDescriptor0.valid());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.parser.XmlTreeBuilder", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Data collection must not be null", httpConnection_KeyVal0.value());
      
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("Data collection must not be null");
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
      assertSame(httpConnection_KeyVal1, httpConnection_KeyVal0);
      assertNotNull(httpConnection_KeyVal1);
      assertFalse(fileDescriptor0.valid());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.parser.XmlTreeBuilder", httpConnection_KeyVal0.key());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("Data collection must not be null", httpConnection_KeyVal0.value());
      assertEquals("org.jsoup.parser.XmlTreeBuilder", httpConnection_KeyVal1.key());
      assertEquals("Data collection must not be null", httpConnection_KeyVal1.value());
      assertTrue(httpConnection_KeyVal1.hasInputStream());
      assertNull(httpConnection_KeyVal1.contentType());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      assertNotNull(pushbackInputStream0);
      assertFalse(fileDescriptor0.valid());
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Content-Encoding", (InputStream) pushbackInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(fileDescriptor0.valid());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      
      String string0 = httpConnection_KeyVal0.key();
      assertNotNull(string0);
      assertFalse(fileDescriptor0.valid());
      assertNull(httpConnection_KeyVal0.contentType());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.value());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Encoding", "Content-Type");
      assertNotNull(httpConnection_KeyVal0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Type", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      
      String string0 = httpConnection_KeyVal0.value();
      assertNotNull(string0);
      assertNull(httpConnection_KeyVal0.contentType());
      assertFalse(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Content-Type", httpConnection_KeyVal0.value());
      assertEquals("Content-Encoding", httpConnection_KeyVal0.key());
      assertEquals("Content-Type", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
      
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      assertNull(httpConnection_Response0.contentType());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("org.jsoup.parser.XmlTreeBuilder", "Data collection must not be null", (InputStream) mockFileInputStream0);
      assertNotNull(httpConnection_KeyVal0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("Data collection must not be null", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertNull(httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.parser.XmlTreeBuilder", httpConnection_KeyVal0.key());
      
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("Data collection must not be null");
      assertSame(httpConnection_KeyVal0, connection_KeyVal0);
      assertSame(connection_KeyVal0, httpConnection_KeyVal0);
      assertNotNull(connection_KeyVal0);
      assertFalse(fileDescriptor0.valid());
      assertEquals("Data collection must not be null", httpConnection_KeyVal0.value());
      assertTrue(httpConnection_KeyVal0.hasInputStream());
      assertEquals("Data collection must not be null", httpConnection_KeyVal0.contentType());
      assertEquals("org.jsoup.parser.XmlTreeBuilder", httpConnection_KeyVal0.key());
      assertEquals("Data collection must not be null", connection_KeyVal0.value());
      assertEquals("Data collection must not be null", connection_KeyVal0.contentType());
      assertTrue(connection_KeyVal0.hasInputStream());
      assertEquals("org.jsoup.parser.XmlTreeBuilder", connection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.data("EndT+=aOpn", "EndT+=aOpn", (InputStream) null);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?EndT%2B%3DaOpn=EndT%2B%3DaOpn");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "=gYdC*u45v>F");
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, connection0);
      assertSame(connection1, httpConnection0);
      assertNotNull(connection1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      Document document0 = connection0.get();
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertSame(connection0, connection1);
      assertNotNull(document0);
      assertEquals("#root", document0.normalName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample?EndT%2B%3DaOpn=EndT%2B%3DaOpn", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample?EndT%2B%3DaOpn=EndT%2B%3DaOpn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Connection connection2 = httpConnection0.data("small", "multipart/form-data", (InputStream) null, "comment");
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(connection2, connection0);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertNotNull(connection2);
      
      try { 
        connection1.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Connection connection0 = httpConnection0.cookie("-$lHPUnJ/T#yq{", "-$lHPUnJ/T#yq{");
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      String string0 = hashMap0.put("application/x-www-form-urlencoded", "Content-Encoding");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      Connection connection1 = httpConnection0.cookies(hashMap0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNotNull(connection1);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      Connection connection2 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, connection1);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection0);
      assertNotNull(connection2);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      try { 
        connection1.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      Connection connection0 = httpConnection0.data("F9}1", "acronym", (InputStream) pipedInputStream0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertEquals(0, pipedInputStream0.available());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNotNull(connection1);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      assertNotNull(httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.header("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "application/x-www-form-urlencoded");
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNotNull(httpConnection_Response1);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals(0, httpConnection_Response1.statusCode());
      assertNull(httpConnection_Response1.charset());
      assertNull(httpConnection_Response1.statusMessage());
      
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      
      HttpConnection.Response httpConnection_Response2 = new HttpConnection.Response();
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response1));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertNotNull(httpConnection_Response2);
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.charset());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.contentType());
      
      httpConnection_Response2.processResponseHeaders(map0);
      assertFalse(httpConnection_Response0.equals((Object)httpConnection_Response2));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response1));
      assertFalse(httpConnection_Response2.equals((Object)httpConnection_Response0));
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertNotSame(httpConnection_Response0, httpConnection_Response2);
      assertNotSame(httpConnection_Response2, httpConnection_Response1);
      assertNotSame(httpConnection_Response2, httpConnection_Response0);
      assertNull(httpConnection_Response0.charset());
      assertEquals(0, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.contentType());
      assertNull(httpConnection_Response0.statusMessage());
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
      assertEquals(0, httpConnection_Response2.statusCode());
      assertNull(httpConnection_Response2.charset());
      assertNull(httpConnection_Response2.statusMessage());
      assertNull(httpConnection_Response2.contentType());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      Connection connection1 = httpConnection0.proxy("User agent must not be null", 187);
      assertSame(httpConnection0, connection1);
      assertSame(httpConnection0, connection0);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNotNull(connection1);
      
      try { 
        connection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertSame(httpConnection0, connection0);
      assertNotNull(connection_Request0);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-data");
      assertTrue(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertNotNull(httpConnection_Response0);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.charset());
      
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("C5uT~*Rd");
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Response0, httpConnection_Response1);
      assertSame(httpConnection_Response1, httpConnection_Response0);
      assertNotNull(httpConnection_Response1);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertEquals("C5uT~*Rd", httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response1.contentType());
      assertEquals("C5uT~*Rd", httpConnection_Response1.charset());
      assertEquals("OK", httpConnection_Response1.statusMessage());
      assertEquals(200, httpConnection_Response1.statusCode());
      
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // C5uT~*Rd
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertSame(httpConnection0, connection0);
      assertNotNull(connection_Request0);
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-data");
      assertTrue(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertNotNull(httpConnection_Response0);
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      
      Connection.Response connection_Response0 = httpConnection_Response0.bufferUp();
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Response0, connection_Response0);
      assertSame(connection_Response0, httpConnection_Response0);
      assertNotNull(connection_Response0);
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertNull(connection_Response0.contentType());
      assertEquals("OK", connection_Response0.statusMessage());
      assertEquals(200, connection_Response0.statusCode());
      assertNull(connection_Response0.charset());
      
      String string0 = httpConnection_Response0.body();
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Response0, connection_Response0);
      assertNotNull(string0);
      assertNull(connection_Request0.requestBody());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(httpConnection_Response0.contentType());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(httpConnection_Response0.charset());
      assertEquals("multipart/form-data", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Connection connection0 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      Connection.Request connection_Request0 = httpConnection0.request();
      assertSame(httpConnection0, connection0);
      assertNotNull(connection_Request0);
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample");
      boolean boolean0 = NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Content-Type");
      assertTrue(boolean0);
      
      HttpConnection.Response httpConnection_Response0 = HttpConnection.Response.execute(connection_Request0);
      assertSame(httpConnection0, connection0);
      assertNotNull(httpConnection_Response0);
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertNull(httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(200, httpConnection_Response0.statusCode());
      
      Connection.Response connection_Response0 = httpConnection_Response0.bufferUp();
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Response0, connection_Response0);
      assertSame(connection_Response0, httpConnection_Response0);
      assertNotNull(connection_Response0);
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertNull(httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertNull(connection_Response0.charset());
      assertNull(connection_Response0.contentType());
      assertEquals("OK", connection_Response0.statusMessage());
      assertEquals(200, connection_Response0.statusCode());
      
      Document document0 = httpConnection_Response0.parse();
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection_Response0, connection_Response0);
      assertNotNull(document0);
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertNull(connection_Request0.requestBody());
      assertEquals("UTF-8", httpConnection_Response0.charset());
      assertEquals("OK", httpConnection_Response0.statusMessage());
      assertNull(httpConnection_Response0.contentType());
      assertEquals(200, httpConnection_Response0.statusCode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      assertNotNull(httpConnection0);
      
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 200);
      assertNotNull(pushbackInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 51);
      assertNotNull(bufferedInputStream0);
      
      Connection connection0 = httpConnection0.data("&lt;", "&lt;", (InputStream) bufferedInputStream0);
      assertSame(httpConnection0, connection0);
      assertSame(connection0, httpConnection0);
      assertNotNull(connection0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection connection1 = httpConnection0.url(uRL0);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection1, httpConnection0);
      assertSame(connection1, connection0);
      assertNotNull(connection1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      Connection connection2 = httpConnection0.requestBody("%Mbd/");
      assertSame(httpConnection0, connection2);
      assertSame(httpConnection0, connection0);
      assertSame(httpConnection0, connection1);
      assertSame(connection2, connection0);
      assertSame(connection2, httpConnection0);
      assertSame(connection2, connection1);
      assertNotNull(connection2);
      
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // InputStream data not supported in URL query string.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", (InputStream) null);
      URL uRL0 = MockURL.getHttpExample();
      Connection connection1 = connection0.url(uRL0);
      try { 
        connection1.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.execute();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.postDataCharset("US-ASCII");
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.maxBodySize(75);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.timeout(1834);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.cookie("application/x-www-form-urlencoded", "application/x-www-form-urlencoded");
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.header("(application|text)/w*+?xml.*", "(application|text)/w*+?xml.*");
      Map<String, List<String>> map0 = httpConnection_Response0.headers;
      // Undeclared exception!
      try { 
        httpConnection_Response0.processResponseHeaders(map0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header("multipart/form-data", (String) null);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.url(uRL0);
      Connection connection0 = httpConnection0.header("Content-Type", "application/x-www-form-urlencoded");
      try { 
        connection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      Connection connection0 = httpConnection0.headers(hashMap0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("d", "d", (InputStream) null, "d");
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("d");
      assertNotNull(connection_KeyVal0);
      assertEquals("d", connection_KeyVal0.contentType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = (HttpConnection.Request)httpConnection0.request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Content-Type", "multipart/form-data");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      Collection<Connection.KeyVal> collection0 = httpConnection_Request1.data();
      // Undeclared exception!
      try { 
        httpConnection0.data(collection0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedHashSet<Connection.KeyVal> linkedHashSet0 = new LinkedHashSet<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedHashSet0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("application/x-www-form-urlencoded", "Content-Encoding");
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("uO[TXF=3g4;(-gc>.", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36");
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals("uO[TXF=3g4;(-gc>.=Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Children collection to be inserted must not be null.");
      httpConnection_KeyVal0.contentType();
      assertEquals("Children collection to be inserted must not be null.", httpConnection_KeyVal0.value());
      assertEquals("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 20);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Mg", "=EfQMM", (InputStream) bufferedInputStream0);
      httpConnection_KeyVal0.inputStream();
      assertEquals("Mg", httpConnection_KeyVal0.key());
      assertEquals("=EfQMM", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data("Content-Encoding", "Content-Encoding", (InputStream) null, "Content-Encoding");
      Connection.KeyVal connection_KeyVal0 = connection0.data("Content-Type");
      assertNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Content-Encoding", (InputStream) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.header("", "Content-Type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Method connection_Method0 = Connection.Method.GET;
      Connection connection0 = httpConnection0.method(connection_Method0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.timeout((-349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      assertEquals(0, connection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("Content-Type");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Content-Type
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("opXkWMs[4lpFU:Jv#%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: opXkWMs[4lpFU:Jv#%
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.xmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize((-289));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.removeCookie("nowrap");
      assertNull(httpConnection_Response1.charset());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Request connection_Request0 = httpConnection0.request();
      boolean boolean0 = connection_Request0.followRedirects();
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(boolean0);
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreContentType(true);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.followRedirects());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser((Parser) null);
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.data("Content-Type", "application/x-www-form-urlencoded");
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertFalse(boolean0);
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreHttpErrors(true);
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.proxy("WL|lvN>c-LG", (-12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-12
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.followRedirects(false);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.followRedirects());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
  }
}
