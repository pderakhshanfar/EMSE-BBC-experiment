/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 08:20:30 GMT 2021
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.Proxy;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.net.UnknownServiceException;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import javax.net.ssl.SSLSocketFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HttpConnection_ESTest extends HttpConnection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.requestBody("X]z,vwF!b");
      httpConnection0.url(uRL0);
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot set a request body for HTTP method GET
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertEquals(30000, httpConnection_Request0.timeout());
      
      httpConnection_Request0.timeout(0);
      assertEquals(0, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.proxy("multipart/form-data", 92);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("lawv*", "lawv*");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.key("lawv*");
      assertEquals("lawv*", httpConnection_KeyVal1.key());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.parse();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before parsing response
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        HttpConnection.Response.execute(httpConnection_Request0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.timeout();
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, int0);
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.sslSocketFactory((SSLSocketFactory) null);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.sslSocketFactory();
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Request connection_Request0 = httpConnection_Request0.requestBody("multipart/form-data");
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.requestBody();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.proxy();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      String string0 = httpConnection_Request0.postDataCharset();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertEquals("UTF-8", string0);
      assertFalse(httpConnection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Parser parser0 = Parser.xmlParser();
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.parser(parser0);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.parser();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      httpConnection_Request0.maxBodySize(118);
      assertEquals(118, httpConnection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      int int0 = httpConnection_Request0.maxBodySize();
      assertEquals(1048576, int0);
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      
      httpConnection_Request0.ignoreHttpErrors(true);
      assertTrue(httpConnection_Request0.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreHttpErrors();
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(boolean0);
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertTrue(httpConnection_Request0.followRedirects());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Connection.Request connection_Request0 = httpConnection_Request0.followRedirects(true);
      assertTrue(httpConnection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("lawv*", "lawv*");
      HttpConnection.Request httpConnection_Request1 = httpConnection_Request0.data((Connection.KeyVal) httpConnection_KeyVal0);
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("\r\n\r\n", "seamless", (InputStream) sequenceInputStream0);
      boolean boolean0 = httpConnection_KeyVal0.hasInputStream();
      assertTrue(boolean0);
      assertEquals("seamless", httpConnection_KeyVal0.value());
      assertEquals("\r\n\r\n", httpConnection_KeyVal0.key());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?uler-age1t=uler-age1t");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "multipart/form-data");
      Connection connection0 = httpConnection0.data("uler-age1t", "uler-age1t");
      URL uRL0 = MockURL.getHttpExample();
      connection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
      httpConnection_Response1.bodyStream();
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.body();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36";
      stringArray0[1] = "Request must not be null";
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.timeout(88);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertNull(connection_Request0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.ignoreHttpErrors(true);
      Connection.Request connection_Request0 = connection0.request();
      assertTrue(connection_Request0.followRedirects());
      assertEquals(30000, connection_Request0.timeout());
      assertTrue(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreContentType(true);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertTrue(connection_Request0.ignoreContentType());
      assertTrue(connection_Request0.followRedirects());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertEquals(30000, connection_Request0.timeout());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(1048576, connection_Request0.maxBodySize());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.referrer("Malformed URL: ");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.proxy("dwym]", 112);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?uler-age1t=uler-age1t");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "content-encoding");
      Connection connection0 = httpConnection0.data("uler-age1t", "uler-age1t");
      URL uRL0 = MockURL.getHttpExample();
      Connection connection1 = connection0.url(uRL0);
      Connection.Response connection_Response0 = connection1.execute();
      assertNull(connection_Response0.contentType());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = HttpConnection.encodeUrl((URL) null);
      assertNull(uRL0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("application/x-www-form-urlencoded", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", 0, "multipart/form-data", uRLStreamHandler0);
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNull(uRL1.getQuery());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("https", "kg9j+/", 76, "X2Nb|`tj!", uRLStreamHandler0);
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertEquals(76, uRL1.getPort());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 20, 811);
      httpConnection0.data("org.jsoup.select.structuralevaluator$immediateparent", "(`P<Ay", (InputStream) byteArrayInputStream0, "org.jsoup.safety.cleaner$cleaningvisitor");
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("org.jsoup.select.structuralevaluator$immediateparent");
      assertEquals("org.jsoup.safety.cleaner$cleaningvisitor", connection_KeyVal0.contentType());
      assertEquals("(`P<Ay", connection_KeyVal0.value());
      assertNotNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Connection connection0 = HttpConnection.connect("http:/");
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.userAgent("https");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.userAgent((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // User agent must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.url(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.url((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.url("B'a>2qlbhR[]c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: B'a>2qlbhR[]c
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.timeout(87);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.sslSocketFactory((SSLSocketFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.requestBody("!zLnj1m5M#>FE]F'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.referrer("Content-Type");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.proxy((Proxy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.proxy((String) null, (-4998));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("Content-Type");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Content-Type
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.postDataCharset("Must supply a valid URL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Charset must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.parser(parser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize(1131);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.ignoreHttpErrors(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        connection0.ignoreContentType(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Header name must not be null", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("", "hgroup");
      FormElement formElement0 = new FormElement(tag0, "Content-Encoding", attributes0);
      Map<String, String> map0 = formElement0.dataset();
      // Undeclared exception!
      try { 
        httpConnection0.headers(map0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.header("Rylabbn+q", "Rylabbn+q");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.header("", "input stream already read and parsed, cannot re-read.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Header name must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = httpConnection0.url(uRL0);
      try { 
        connection0.get();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.followRedirects(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URI uRI0 = MockURI.aHttpURI;
      URL uRL0 = MockURI.toURL(uRI0);
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.url(uRL0);
      Connection.Method connection_Method0 = Connection.Method.POST;
      httpConnection0.method(connection_Method0);
      try { 
        connection0.execute();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.execute();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("http", "]", 1048576, "multipart/form-data", uRLStreamHandler0);
      httpConnection0.url(uRL0);
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data((Collection<Connection.KeyVal>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data collection must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        httpConnection0.data("#DZ&f", "d([Nq", (InputStream) pipedInputStream0, "<!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data("B'a>2qlbhR[]c", "B'a>2qlbhR[]c", (InputStream) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        httpConnection0.data((String) null, "readonly", (InputStream) byteArrayInputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.data("1yxJ!/{SVI", "1yxJ!/{SVI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data("Set-Cookie", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.data("<^DX-hX}_!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.data("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data key must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.cookies((Map<String, String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie map must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.url("http:/");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("J", "J");
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)36, (byte)36);
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.inputStream((InputStream) byteArrayInputStream0);
      assertTrue(httpConnection_KeyVal1.hasInputStream());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Data collection must not be null", "Data collection must not be null");
      HttpConnection.KeyVal httpConnection_KeyVal1 = httpConnection_KeyVal0.value("");
      assertSame(httpConnection_KeyVal0, httpConnection_KeyVal1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Data collection must not be null", "Data collection must not be null");
      String string0 = httpConnection_KeyVal0.key();
      assertEquals("Data collection must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      MockFile mockFile0 = new MockFile("Pt_a=1_>I3v/){$SU", "OH#8E&Q,DRE/");
      URL uRL0 = mockFile0.toURL();
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.url(uRL0);
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("8(}dw9zVpFW,+bdn", "HWTteE,Bmq");
      String string0 = httpConnection_KeyVal0.value();
      assertEquals("HWTteE,Bmq", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.execute();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must be specified to connect
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.contentType();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("Object must not be null", "]", (InputStream) null);
      Connection.KeyVal connection_KeyVal0 = httpConnection_KeyVal0.contentType("Object must not be null");
      assertEquals("Object must not be null", connection_KeyVal0.key());
      assertEquals("]", connection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.data("Must be false", "set-colie");
      httpConnection0.url(uRL0);
      httpConnection0.data("WB[)h*11!", "ScriptDataLessthanSign");
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.cookie("h/u9~peka7tc1f ", "|f");
      httpConnection0.url(uRL0);
      Connection connection0 = httpConnection0.cookie("Content-Type", "Content-Type");
      try { 
        connection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      httpConnection0.data("%20", "* n{<'L(gUl7)Q4 66", (InputStream) sequenceInputStream0);
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      linkedList0.add("");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("Set-Cookie", linkedList0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      linkedList0.offerLast((String) null);
      hashMap0.put("Set-Cookie", linkedList0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.contentType());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      hashMap0.put("Content-Type", linkedList0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Document document0 = Parser.parse("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "multipart/form-data");
      Set<String> set0 = document0.classNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      hashMap0.put((String) null, list0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertNull(httpConnection_Response0.statusMessage());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      Proxy proxy0 = Proxy.NO_PROXY;
      httpConnection_Request0.proxy(proxy0);
      httpConnection0.request((Connection.Request) httpConnection_Request0);
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.post();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // java.lang.UnsupportedOperationException: Method not implemented.
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("Content-Encoding", "Content-Encoding");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.requestBody("Content-Type");
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("Content-Encoding", "Content-Encoding");
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.post();
        fail("Expecting exception: UnknownServiceException");
      
      } catch(UnknownServiceException e) {
         //
         // protocol doesn't support output
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("https", "kg9j+/", 76, "X2Nb|`tj!", uRLStreamHandler0);
      httpConnection0.url(uRL0);
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      URL uRL0 = MockURL.getFileExample();
      Connection connection0 = httpConnection0.url(uRL0);
      try { 
        connection0.post();
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      // Undeclared exception!
      try { 
        httpConnection_Request0.postDataCharset("Content-Encoding");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Content-Encoding
         //
         verifyException("org.jsoup.helper.HttpConnection$Request", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.postDataCharset("UTF-8");
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.maxBodySize((-87));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxSize must be 0 (unlimited) or larger
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.url(uRL0);
      Connection.Request connection_Request0 = httpConnection0.request();
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.cookie("Content-Type", "Content-Encoding");
      try { 
        HttpConnection.Response.execute(connection_Request0, httpConnection_Response0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("Content-Encoding");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      linkedList0.add("dZ#)#9`1m@^ ");
      hashMap0.put("Set-Cookie", linkedList0);
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      httpConnection_Response0.processResponseHeaders(hashMap0);
      assertEquals(0, httpConnection_Response0.statusCode());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.header("https", (String) null);
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Encoding", "multipart/form-data");
      Connection connection0 = httpConnection0.cookies(hashMap0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = (HttpConnection.Response)httpConnection_Response0.cookie(" 'w", " 'w");
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = httpConnection_Response1.cookies;
      httpConnection0.headers(map0);
      assertFalse(map0.isEmpty());
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.data("$&%.1qa(oB_A", "RXH!\"1y1Q r(6Ii ", (InputStream) null, "$&%.1qa(oB_A");
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("$&%.1qa(oB_A");
      assertNotNull(connection_KeyVal0);
      assertEquals("RXH!\"1y1Q r(6Ii ", connection_KeyVal0.value());
      assertEquals("$&%.1qa(oB_A", connection_KeyVal0.contentType());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("Content-Type");
      assertNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      LinkedList<Connection.KeyVal> linkedList0 = new LinkedList<Connection.KeyVal>();
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("multipart/form-data", "multipart/form-data");
      linkedList0.add((Connection.KeyVal) httpConnection_KeyVal0);
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) linkedList0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[0];
      Connection connection0 = httpConnection0.data(stringArray0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        httpConnection0.data(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply an even number of key value pairs
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("Content-Type", "G0elsT/B");
      Connection connection0 = httpConnection0.data((Map<String, String>) hashMap0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create(" '`s5ZuiRP8Pyr0R", "");
      String string0 = httpConnection_KeyVal0.toString();
      assertEquals(" '`s5ZuiRP8Pyr0R=", string0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("~'s9nvA%ouWY|j$", "head");
      httpConnection_KeyVal0.contentType();
      assertEquals("~'s9nvA%ouWY|j$", httpConnection_KeyVal0.key());
      assertEquals("head", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HttpConnection.KeyVal httpConnection_KeyVal0 = HttpConnection.KeyVal.create("8(}dw9zVpFW,+bdn", "HWTteE,Bmq");
      httpConnection_KeyVal0.inputStream();
      assertEquals("8(}dw9zVpFW,+bdn", httpConnection_KeyVal0.key());
      assertEquals("HWTteE,Bmq", httpConnection_KeyVal0.value());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      int int0 = httpConnection_Response0.statusCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.charset();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bodyAsBytes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      String string0 = httpConnection_Response0.statusMessage();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      // Undeclared exception!
      try { 
        httpConnection_Response0.bufferUp();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Request must be executed (with .execute(), .get(), or .post() before getting response body
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection.Response httpConnection_Response1 = httpConnection_Response0.charset("Content-Encoding");
      assertEquals(0, httpConnection_Response1.statusCode());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      httpConnection0.data("d([Nq", "Content-Type", (InputStream) pipedInputStream0, "#DZ&f");
      Connection.KeyVal connection_KeyVal0 = httpConnection0.data("#DZ&f");
      assertNull(connection_KeyVal0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect((URL) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.referrer((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Referrer must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection0 = httpConnection0.proxy(proxy0);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.header("Rylabbn+q", "Rylabbn+q");
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.request((Connection.Request) null);
      // Undeclared exception!
      try { 
        httpConnection0.cookie("d^assozgip6z>`sun", "rylabbn+nq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      URL uRL1 = HttpConnection.encodeUrl(uRL0);
      assertNotSame(uRL1, uRL0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.timeout((-599));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timeout milliseconds must be 0 (infinite) or greater
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection.Response connection_Response0 = httpConnection0.response();
      assertNull(connection_Response0.charset());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.postDataCharset("input stream already read and parsed, cannot re-read.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // input stream already read and parsed, cannot re-read.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        HttpConnection.connect("nth-last-child");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: nth-last-child
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.userAgent("~nnu'=u%");
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.proxy((String) null, (-4998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-4998
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.maxBodySize(0);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertTrue(connection_Request0.followRedirects());
      assertEquals(0, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals(30000, connection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HttpConnection.Response httpConnection_Response0 = new HttpConnection.Response();
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.response((Connection.Response) httpConnection_Response0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.cookie("E+-", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cookie value must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      HttpConnection.Request httpConnection_Request1 = (HttpConnection.Request)httpConnection_Request0.removeCookie("P");
      assertFalse(httpConnection_Request1.ignoreHttpErrors());
      assertEquals("UTF-8", httpConnection_Request1.postDataCharset());
      assertFalse(httpConnection_Request1.ignoreContentType());
      assertEquals(1048576, httpConnection_Request1.maxBodySize());
      assertEquals(30000, httpConnection_Request1.timeout());
      assertTrue(httpConnection_Request1.followRedirects());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.followRedirects();
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(httpConnection_Request0.ignoreContentType());
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
      assertTrue(boolean0);
      assertEquals(30000, httpConnection_Request0.timeout());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      assertFalse(httpConnection_Request0.ignoreContentType());
      
      httpConnection_Request0.ignoreContentType(true);
      assertTrue(httpConnection_Request0.ignoreContentType());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Parser parser0 = Parser.htmlParser();
      Connection connection0 = httpConnection0.parser(parser0);
      assertSame(connection0, httpConnection0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HttpConnection.Request httpConnection_Request0 = new HttpConnection.Request();
      boolean boolean0 = httpConnection_Request0.ignoreContentType();
      assertEquals(30000, httpConnection_Request0.timeout());
      assertFalse(httpConnection_Request0.ignoreHttpErrors());
      assertTrue(httpConnection_Request0.followRedirects());
      assertEquals(1048576, httpConnection_Request0.maxBodySize());
      assertFalse(boolean0);
      assertEquals("UTF-8", httpConnection_Request0.postDataCharset());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.sslSocketFactory((SSLSocketFactory) null);
      assertSame(httpConnection0, connection0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://www.someFakeButWellFormedURL.org/fooExample?uler-age1t=uler-age1t");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "content-encoding");
      Connection connection0 = httpConnection0.data("uler-age1t", "uler-age1t");
      URL uRL0 = MockURL.getHttpExample();
      connection0.url(uRL0);
      connection0.get();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.ignoreHttpErrors(true);
      URL uRL0 = MockURL.getHttpExample();
      httpConnection0.url(uRL0);
      try { 
        httpConnection0.get();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Could not find: www.someFakeButWellFormedURL.org
         //
         verifyException("org.evosuite.runtime.mock.java.net.EvoHttpURLConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      httpConnection0.followRedirects(false);
      Connection.Request connection_Request0 = httpConnection0.request();
      assertEquals(1048576, connection_Request0.maxBodySize());
      assertFalse(connection_Request0.ignoreContentType());
      assertEquals("UTF-8", connection_Request0.postDataCharset());
      assertEquals(30000, connection_Request0.timeout());
      assertFalse(connection_Request0.ignoreHttpErrors());
      assertFalse(connection_Request0.followRedirects());
  }
}
